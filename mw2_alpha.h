#ifndef _MW2_ALPHA
#define _MW2_ALPHA

// File generated by pdbripper v2.03 (http://www.ntinfo.biz)
// Bugreports : horsicq@gmail.com

enum GPUPERFEVENT_TCF
{
    GPUPE_VALID_CYCLES=0,
    GPUPE_SINGLE_PHASES=1,
    GPUPE_ANISO_PHASES=2,
    GPUPE_MIP_PHASES=3,
    GPUPE_VOL_PHASES=4,
    GPUPE_MIP_VOL_PHASES=5,
    GPUPE_MIP_ANISO_PHASES=6,
    GPUPE_VOL_ANISO_PHASES=7,
    GPUPE_ANISO_2_1_PHASES=8,
    GPUPE_ANISO_4_1_PHASES=9,
    GPUPE_ANISO_6_1_PHASES=10,
    GPUPE_ANISO_8_1_PHASES=11,
    GPUPE_ANISO_10_1_PHASES=12,
    GPUPE_ANISO_12_1_PHASES=13,
    GPUPE_ANISO_14_1_PHASES=14,
    GPUPE_ANISO_16_1_PHASES=15,
    GPUPE_MIP_VOL_ANISO_PHASES=16,
    GPUPE_ALIGN_2_PHASES=17,
    GPUPE_ALIGN_4_PHASES=18,
    GPUPE_TPC_BUSY=19,
    GPUPE_TPC_STALLED=20,
    GPUPE_TPC_STARVED=21,
    GPUPE_TPC_WORKING=22,
    GPUPE_TPC_WALKER_BUSY=23,
    GPUPE_TPC_WALKER_STALLED=24,
    GPUPE_TPC_WALKER_WORKING=25,
    GPUPE_TPC_ALIGNER_BUSY=26,
    GPUPE_TPC_ALIGNER_STALLED=27,
    GPUPE_TPC_ALIGNER_STALLED_BY_BLEND=28,
    GPUPE_TPC_ALIGNER_STALLED_BY_CACHE=29,
    GPUPE_TPC_ALIGNER_WORKING=30,
    GPUPE_TPC_BLEND_BUSY=31,
    GPUPE_TPC_BLEND_SYNC=32,
    GPUPE_TPC_BLEND_STARVED=33,
    GPUPE_TPC_BLEND_WORKING=34,
    GPUPE_OPCODE_0X00=35,
    GPUPE_OPCODE_0X01=36,
    GPUPE_OPCODE_0X04=37,
    GPUPE_OPCODE_0X10=38,
    GPUPE_OPCODE_0X11=39,
    GPUPE_OPCODE_0X12=40,
    GPUPE_OPCODE_0X13=41,
    GPUPE_OPCODE_0X18=42,
    GPUPE_OPCODE_0X19=43,
    GPUPE_OPCODE_0X1A=44,
    GPUPE_OPCODE_OTHER=45,
    GPUPE_RESERVED_46=46,
    GPUPE_RESERVED_47=47,
    GPUPE_RESERVED_48=48,
    GPUPE_RESERVED_49=49,
    GPUPE_RESERVED_50=50,
    GPUPE_RESERVED_51=51,
    GPUPE_RESERVED_52=52,
    GPUPE_RESERVED_53=53,
    GPUPE_RESERVED_54=54,
    GPUPE_RESERVED_55=55,
    GPUPE_IN_FIFO_0_EMPTY=56,
    GPUPE_IN_FIFO_0_LT_HALF_FULL=57,
    GPUPE_IN_FIFO_0_HALF_FULL=58,
    GPUPE_IN_FIFO_0_FULL=59,
    GPUPE_IN_FIFO_1_EMPTY=60,
    GPUPE_IN_FIFO_1_LT_HALF_FULL=61,
    GPUPE_IN_FIFO_1_HALF_FULL=62,
    GPUPE_IN_FIFO_1_FULL=63,
    GPUPE_IN_FIFO_2_EMPTY=64,
    GPUPE_IN_FIFO_2_LT_HALF_FULL=65,
    GPUPE_IN_FIFO_2_HALF_FULL=66,
    GPUPE_IN_FIFO_2_FULL=67,
    GPUPE_IN_FIFO_3_EMPTY=68,
    GPUPE_IN_FIFO_3_LT_HALF_FULL=69,
    GPUPE_IN_FIFO_3_HALF_FULL=70,
    GPUPE_IN_FIFO_3_FULL=71,
    GPUPE_IN_FIFO_TPC_EMPTY=72,
    GPUPE_IN_FIFO_TPC_LT_HALF_FULL=73,
    GPUPE_IN_FIFO_TPC_HALF_FULL=74,
    GPUPE_IN_FIFO_TPC_FULL=75,
    GPUPE_TPC_TC_XFC=76,
    GPUPE_TPC_TC_STATE=77,
    GPUPE_TC_STALL=78,
    GPUPE_QUAD0_TAPS=79,
    GPUPE_QUAD1_TAPS=80,
    GPUPE_QUAD2_TAPS=81,
    GPUPE_QUAD3_TAPS=82,
    GPUPE_QUADS=83,
    GPUPE_TCA_SYNC_STALL=84,
    GPUPE_TAG_STALL=85,
    GPUPE_SLICE_STALL=86,
    GPUPE_SKEW_STALL=87,
    GPUPE_TCB_SYNC_STALL=88,
    GPUPE_TCA_VALID=89,
    GPUPE_PROBES_VALID=90,
    GPUPE_MISS_STALL=91,
    GPUPE_FETCH_FIFO_STALL=92,
    GPUPE_TCO_STALL=93,
    GPUPE_ANY_STALL=94,
    GPUPE_TAG_MISSES=95,
    GPUPE_TAG_HITS=96,
    GPUPE_SUB_TAG_MISSES=97,
    GPUPE_SET0_INVALIDATES=98,
    GPUPE_SET1_INVALIDATES=99,
    GPUPE_SET2_INVALIDATES=100,
    GPUPE_SET3_INVALIDATES=101,
    GPUPE_SET0_TAG_MISSES=102,
    GPUPE_SET1_TAG_MISSES=103,
    GPUPE_SET2_TAG_MISSES=104,
    GPUPE_SET3_TAG_MISSES=105,
    GPUPE_SET0_TAG_HITS=106,
    GPUPE_SET1_TAG_HITS=107,
    GPUPE_SET2_TAG_HITS=108,
    GPUPE_SET3_TAG_HITS=109,
    GPUPE_SET0_SUB_TAG_MISSES=110,
    GPUPE_SET1_SUB_TAG_MISSES=111,
    GPUPE_SET2_SUB_TAG_MISSES=112,
    GPUPE_SET3_SUB_TAG_MISSES=113,
    GPUPE_SET0_EVICT1=114,
    GPUPE_SET0_EVICT2=115,
    GPUPE_SET0_EVICT3=116,
    GPUPE_SET0_EVICT4=117,
    GPUPE_SET0_EVICT5=118,
    GPUPE_SET0_EVICT6=119,
    GPUPE_SET0_EVICT7=120,
    GPUPE_SET0_EVICT8=121,
    GPUPE_SET0_EVICT9=122,
    GPUPE_SET0_EVICT10=123,
    GPUPE_SET0_EVICT11=124,
    GPUPE_SET0_EVICT12=125,
    GPUPE_SET0_EVICT13=126,
    GPUPE_SET0_EVICT14=127,
    GPUPE_SET0_EVICT15=128,
    GPUPE_SET0_EVICT16=129,
    GPUPE_SET1_EVICT1=130,
    GPUPE_SET1_EVICT2=131,
    GPUPE_SET1_EVICT3=132,
    GPUPE_SET1_EVICT4=133,
    GPUPE_SET1_EVICT5=134,
    GPUPE_SET1_EVICT6=135,
    GPUPE_SET1_EVICT7=136,
    GPUPE_SET1_EVICT8=137,
    GPUPE_SET1_EVICT9=138,
    GPUPE_SET1_EVICT10=139,
    GPUPE_SET1_EVICT11=140,
    GPUPE_SET1_EVICT12=141,
    GPUPE_SET1_EVICT13=142,
    GPUPE_SET1_EVICT14=143,
    GPUPE_SET1_EVICT15=144,
    GPUPE_SET1_EVICT16=145,
    GPUPE_SET2_EVICT1=146,
    GPUPE_SET2_EVICT2=147,
    GPUPE_SET2_EVICT3=148,
    GPUPE_SET2_EVICT4=149,
    GPUPE_SET2_EVICT5=150,
    GPUPE_SET2_EVICT6=151,
    GPUPE_SET2_EVICT7=152,
    GPUPE_SET2_EVICT8=153,
    GPUPE_SET2_EVICT9=154,
    GPUPE_SET2_EVICT10=155,
    GPUPE_SET2_EVICT11=156,
    GPUPE_SET2_EVICT12=157,
    GPUPE_SET2_EVICT13=158,
    GPUPE_SET2_EVICT14=159,
    GPUPE_SET2_EVICT15=160,
    GPUPE_SET2_EVICT16=161,
    GPUPE_SET3_EVICT1=162,
    GPUPE_SET3_EVICT2=163,
    GPUPE_SET3_EVICT3=164,
    GPUPE_SET3_EVICT4=165,
    GPUPE_SET3_EVICT5=166,
    GPUPE_SET3_EVICT6=167,
    GPUPE_SET3_EVICT7=168,
    GPUPE_SET3_EVICT8=169,
    GPUPE_SET3_EVICT9=170,
    GPUPE_SET3_EVICT10=171,
    GPUPE_SET3_EVICT11=172,
    GPUPE_SET3_EVICT12=173,
    GPUPE_SET3_EVICT13=174,
    GPUPE_SET3_EVICT14=175,
    GPUPE_SET3_EVICT15=176,
    GPUPE_SET3_EVICT16=177,
    GPUPE_FF_EMPTY=178,
    GPUPE_FF_LT_HALF_FULL=179,
    GPUPE_FF_HALF_FULL=180,
    GPUPE_FF_FULL=181,
    GPUPE_FF_XFC=182,
    GPUPE_FF_STALLED=183,
    GPUPE_FG_MASKS=184,
    GPUPE_FG_LEFT_MASKS=185,
    GPUPE_FG_LEFT_MASK_STALLED=186,
    GPUPE_FG_LEFT_NOT_DONE_STALL=187,
    GPUPE_FG_LEFT_FG_STALL=188,
    GPUPE_FG_LEFT_SECTORS=189,
    GPUPE_FG_RIGHT_MASKS=190,
    GPUPE_FG_RIGHT_MASK_STALLED=191,
    GPUPE_FG_RIGHT_NOT_DONE_STALL=192,
    GPUPE_FG_RIGHT_FG_STALL=193,
    GPUPE_FG_RIGHT_SECTORS=194,
    GPUPE_FG0_REQUESTS=195,
    GPUPE_FG0_STALLED=196,
    GPUPE_FG1_REQUESTS=197,
    GPUPE_FG1_STALLED=198,
    GPUPE_MEM_REQ512=199,
    GPUPE_MEM_REQ_SENT=200,
    GPUPE_MEM_AGP_READ_REQ=201,
    GPUPE_MEM_LOCAL_READ_REQ=202,
    GPUPE_TC0_MH_STALLED=203,
    GPUPE_TC1_MH_STALLED=204
};

enum _XPRIVILEGE_TYPE
{
    XPRIVILEGE_MULTIPLAYER_SESSIONS=254,
    XPRIVILEGE_COMMUNICATIONS=252,
    XPRIVILEGE_COMMUNICATIONS_FRIENDS_ONLY=251,
    XPRIVILEGE_PROFILE_VIEWING=249,
    XPRIVILEGE_PROFILE_VIEWING_FRIENDS_ONLY=248,
    XPRIVILEGE_USER_CREATED_CONTENT=247,
    XPRIVILEGE_USER_CREATED_CONTENT_FRIENDS_ONLY=246,
    XPRIVILEGE_PURCHASE_CONTENT=245,
    XPRIVILEGE_PRESENCE=244,
    XPRIVILEGE_PRESENCE_FRIENDS_ONLY=243,
    XPRIVILEGE_TRADE_CONTENT=238,
    XPRIVILEGE_VIDEO_COMMUNICATIONS=235,
    XPRIVILEGE_VIDEO_COMMUNICATIONS_FRIENDS_ONLY=234
};

enum _D3DRESOURCETYPE
{
    D3DRTYPE_NONE=0,
    D3DRTYPE_VERTEXBUFFER=1,
    D3DRTYPE_INDEXBUFFER=2,
    D3DRTYPE_TEXTURE=3,
    D3DRTYPE_SURFACE=4,
    D3DRTYPE_VERTEXDECLARATION=5,
    D3DRTYPE_VERTEXSHADER=6,
    D3DRTYPE_PIXELSHADER=7,
    D3DRTYPE_CONSTANTBUFFER=8,
    D3DRTYPE_COMMANDBUFFER=9,
    D3DRTYPE_VOLUME=16,
    D3DRTYPE_VOLUMETEXTURE=17,
    D3DRTYPE_CUBETEXTURE=18,
    D3DRTYPE_ARRAYTEXTURE=19,
    D3DRTYPE_LINETEXTURE=20,
    D3DRTYPE_FORCE_DWORD=2147483647
};

enum _D3DXEVENT_TYPE
{
    D3DXEVENT_TRACKSPEED=0,
    D3DXEVENT_TRACKWEIGHT=1,
    D3DXEVENT_TRACKPOSITION=2,
    D3DXEVENT_TRACKENABLE=3,
    D3DXEVENT_PRIORITYBLEND=4,
    D3DXEVENT_FORCE_DWORD=2147483647
};

enum GPUCOMMANDOP
{
    GPUCOMMANDOP_NOP=16,
    GPUCOMMANDOP_REG_RMW=33,
    GPUCOMMANDOP_DRAW=34,
    GPUCOMMANDOP_VIZ_QUERY=35,
    GPUCOMMANDOP_SET_STATE=37,
    GPUCOMMANDOP_WAIT_FOR_IDLE=38,
    GPUCOMMANDOP_LOAD_SHADER=39,
    GPUCOMMANDOP_LOAD_SHADER_IMMEDIATE=43,
    GPUCOMMANDOP_SET_CONSTANT=45,
    GPUCOMMANDOP_LOAD_ALU_CONSTANT=47,
    GPUCOMMANDOP_DRAW_IMMEDIATE=54,
    GPUCOMMANDOP_MPEG_INDEX=58,
    GPUCOMMANDOP_INVALIDATE_STATE=59,
    GPUCOMMANDOP_WAIT_REG_MEM=60,
    GPUCOMMANDOP_MEM_WRITE=61,
    GPUCOMMANDOP_REG_TO_MEM=62,
    GPUCOMMANDOP_INDIRECT_BUFFER=63,
    GPUCOMMANDOP_COND_WRITE=69,
    GPUCOMMANDOP_EVENT_WRITE=70,
    GPUCOMMANDOP_ME_INIT=72,
    GPUCOMMANDOP_FIX_2_FLT_REG=77,
    GPUCOMMANDOP_MEM_WRITE_COUNTER=79,
    GPUCOMMANDOP_WAIT_REG_EQ=82,
    GPUCOMMANDOP_WAIT_REG_GTE=83,
    GPUCOMMANDOP_CPU_INTERRUPT=84,
    GPUCOMMANDOP_EVENT_WRITE_SHADER=88,
    GPUCOMMANDOP_EVENT_WRITE_CACHE_FLUSH=89,
    GPUCOMMANDOP_EVENT_WRITE_SCREEN_EXTENT=90,
    GPUCOMMANDOP_EVENT_WRITE_ZPASS_DONE=91,
    GPUCOMMANDOP_CONTEXT_UPDATE=94,
    GPUCOMMANDOP_SET_BIN_MASK_LO=96,
    GPUCOMMANDOP_SET_BIN_MASK_HI=97,
    GPUCOMMANDOP_SET_BIN_SELECT_LO=98,
    GPUCOMMANDOP_SET_BIN_SELECT_HI=99
};

enum _D3DTEXTUREOP
{
    D3DTOP_DISABLE=1,
    D3DTOP_SELECTARG1=2,
    D3DTOP_SELECTARG2=3,
    D3DTOP_MODULATE=4,
    D3DTOP_MODULATE2X=5,
    D3DTOP_MODULATE4X=6,
    D3DTOP_ADD=7,
    D3DTOP_ADDSIGNED=8,
    D3DTOP_ADDSIGNED2X=9,
    D3DTOP_SUBTRACT=10,
    D3DTOP_ADDSMOOTH=11,
    D3DTOP_BLENDDIFFUSEALPHA=12,
    D3DTOP_BLENDTEXTUREALPHA=13,
    D3DTOP_BLENDFACTORALPHA=14,
    D3DTOP_BLENDTEXTUREALPHAPM=15,
    D3DTOP_BLENDCURRENTALPHA=16,
    D3DTOP_PREMODULATE=17,
    D3DTOP_MODULATEALPHA_ADDCOLOR=18,
    D3DTOP_MODULATECOLOR_ADDALPHA=19,
    D3DTOP_MODULATEINVALPHA_ADDCOLOR=20,
    D3DTOP_MODULATEINVCOLOR_ADDALPHA=21,
    D3DTOP_BUMPENVMAP=22,
    D3DTOP_BUMPENVMAPLUMINANCE=23,
    D3DTOP_DOTPRODUCT3=24,
    D3DTOP_MULTIPLYADD=25,
    D3DTOP_LERP=26,
    D3DTOP_MAX=27,
    D3DTOP_FORCE_DWORD=2147483647
};

enum _D3DXTRANSITION_TYPE
{
    D3DXTRANSITION_LINEAR=0,
    D3DXTRANSITION_EASEINEASEOUT=1,
    D3DXTRANSITION_FORCE_DWORD=2147483647
};

enum _D3DCUBEMAP_FACES
{
    D3DCUBEMAP_FACE_POSITIVE_X=0,
    D3DCUBEMAP_FACE_NEGATIVE_X=1,
    D3DCUBEMAP_FACE_POSITIVE_Y=2,
    D3DCUBEMAP_FACE_NEGATIVE_Y=3,
    D3DCUBEMAP_FACE_POSITIVE_Z=4,
    D3DCUBEMAP_FACE_NEGATIVE_Z=5,
    D3DCUBEMAP_FACE_FORCE_DWORD=2147483647
};

enum GPULOADTYPE
{
    GPULOADTYPE_VERTEX=0,
    GPULOADTYPE_PIXEL=1,
    GPULOADTYPE_SHARED=2
};

enum GPUHIZFUNC
{
    GPUHIZFUNC_LESS_EQUAL=0,
    GPUHIZFUNC_GREATER_EQUAL=1
};

enum _GET_FILEEX_INFO_LEVELS
{
    GetFileExInfoStandard=0,
    GetFileExMaxInfoLevel=1
};

enum GPUHISTENCILFUNC
{
    GPUHISTENCILFUNC_EQUAL=0,
    GPUHISTENCILFUNC_NOT_EQUAL=1
};

enum GPUEDRAMMODE
{
    GPUEDRAMMODE_NOP=0,
    GPUEDRAMMODE_COLOR_DEPTH=4,
    GPUEDRAMMODE_DOUBLE_DEPTH=5,
    GPUEDRAMMODE_COPY=6
};

enum _D3DXREGISTER_SET
{
    D3DXRS_BOOL=0,
    D3DXRS_INT4=1,
    D3DXRS_FLOAT4=2,
    D3DXRS_SAMPLER=3,
    D3DXRS_FORCE_DWORD=2147483647
};

enum _D3DVERTEXBLENDFLAGS
{
    D3DVBF_DISABLE=0,
    D3DVBF_1WEIGHTS=1,
    D3DVBF_2WEIGHTS=2,
    D3DVBF_3WEIGHTS=3,
    D3DVBF_TWEENING=255,
    D3DVBF_0WEIGHTS=256,
    D3DVBF_FORCE_DWORD=2147483647
};

enum tagSTGTY
{
    STGTY_STORAGE=1,
    STGTY_STREAM=2,
    STGTY_LOCKBYTES=3,
    STGTY_PROPERTY=4
};

enum GPUCLIPPLANEMODE
{
    GPUCLIPPLANEMODE_CULL_CENTER_NO_BIAS=0,
    GPUCLIPPLANEMODE_CULL_CENTER_RADIUS_BIAS=1,
    GPUCLIPPLANEMODE_CULL_CENTER_RADIUS_BIAS_EXPAND=2,
    GPUCLIPPLANEMODE_ALWAYS_EXPAND=3
};

enum _D3DXPARAMETER_CLASS
{
    D3DXPC_SCALAR=0,
    D3DXPC_VECTOR=1,
    D3DXPC_MATRIX_ROWS=2,
    D3DXPC_MATRIX_COLUMNS=3,
    D3DXPC_OBJECT=4,
    D3DXPC_STRUCT=5,
    D3DXPC_FORCE_DWORD=2147483647
};

enum tagSTREAM_SEEK
{
    STREAM_SEEK_SET=0,
    STREAM_SEEK_CUR=1,
    STREAM_SEEK_END=2
};

enum GPUSAMPLECONTROL
{
    GPUSAMPLECONTROL_CENTROIDS_ONLY=0,
    GPUSAMPLECONTROL_CENTERS_ONLY=1,
    GPUSAMPLECONTROL_CENTROIDS_AND_CENTERS=2
};

enum _D3DTEXTURETRANSFORMFLAGS
{
    D3DTTFF_DISABLE=0,
    D3DTTFF_COUNT1=1,
    D3DTTFF_COUNT2=2,
    D3DTTFF_COUNT3=3,
    D3DTTFF_COUNT4=4,
    D3DTTFF_PROJECTED=256,
    D3DTTFF_FORCE_DWORD=2147483647
};

enum tagLOCKTYPE
{
    LOCK_WRITE=1,
    LOCK_EXCLUSIVE=2,
    LOCK_ONLYONCE=4
};

enum GPUPATHSELECT
{
    GPUPATHSELECT_VERTEX_REUSE=0,
    GPUPATHSELECT_TESS_ENABLE=1,
    GPUPATHSELECT_PASSTHRU=2
};

enum _D3DXPARAMETER_TYPE
{
    D3DXPT_VOID=0,
    D3DXPT_BOOL=1,
    D3DXPT_INT=2,
    D3DXPT_FLOAT=3,
    D3DXPT_STRING=4,
    D3DXPT_TEXTURE=5,
    D3DXPT_TEXTURE1D=6,
    D3DXPT_TEXTURE2D=7,
    D3DXPT_TEXTURE3D=8,
    D3DXPT_TEXTURECUBE=9,
    D3DXPT_SAMPLER=10,
    D3DXPT_SAMPLER1D=11,
    D3DXPT_SAMPLER2D=12,
    D3DXPT_SAMPLER3D=13,
    D3DXPT_SAMPLERCUBE=14,
    D3DXPT_PIXELSHADER=15,
    D3DXPT_VERTEXSHADER=16,
    D3DXPT_PIXELFRAGMENT=17,
    D3DXPT_VERTEXFRAGMENT=18,
    D3DXPT_FORCE_DWORD=2147483647
};

enum GPUTESSMODE
{
    GPUTESSMODE_DISCRETE=0,
    GPUTESSMODE_CONTINUOUS=1,
    GPUTESSMODE_ADAPTIVE=2
};

enum GPUPERFEVENT_TP
{
    GPUPE_POINT_QUADS=0,
    GPUPE_BILIN_QUADS=1,
    GPUPE_ANISO_QUADS=2,
    GPUPE_MIP_QUADS=3,
    GPUPE_VOL_QUADS=4,
    GPUPE_MIP_VOL_QUADS=5,
    GPUPE_MIP_ANISO_QUADS=6,
    GPUPE_VOL_ANISO_QUADS=7,
    GPUPE_ANISO_2_1_QUADS=8,
    GPUPE_ANISO_4_1_QUADS=9,
    GPUPE_ANISO_6_1_QUADS=10,
    GPUPE_ANISO_8_1_QUADS=11,
    GPUPE_ANISO_10_1_QUADS=12,
    GPUPE_ANISO_12_1_QUADS=13,
    GPUPE_ANISO_14_1_QUADS=14,
    GPUPE_ANISO_16_1_QUADS=15,
    GPUPE_MIP_VOL_ANISO_QUADS=16,
    GPUPE_ALIGN_2_QUADS=17,
    GPUPE_ALIGN_4_QUADS=18,
    GPUPE_PIX_0_QUAD=19,
    GPUPE_PIX_1_QUAD=20,
    GPUPE_PIX_2_QUAD=21,
    GPUPE_PIX_3_QUAD=22,
    GPUPE_PIX_4_QUAD=23,
    GPUPE_TP_MIPMAP_LOD0=24,
    GPUPE_TP_MIPMAP_LOD1=25,
    GPUPE_TP_MIPMAP_LOD2=26,
    GPUPE_TP_MIPMAP_LOD3=27,
    GPUPE_TP_MIPMAP_LOD4=28,
    GPUPE_TP_MIPMAP_LOD5=29,
    GPUPE_TP_MIPMAP_LOD6=30,
    GPUPE_TP_MIPMAP_LOD7=31,
    GPUPE_TP_MIPMAP_LOD8=32,
    GPUPE_TP_MIPMAP_LOD9=33,
    GPUPE_TP_MIPMAP_LOD10=34,
    GPUPE_TP_MIPMAP_LOD11=35,
    GPUPE_TP_MIPMAP_LOD12=36,
    GPUPE_TP_MIPMAP_LOD13=37,
    GPUPE_TP_MIPMAP_LOD14=38
};

enum GPUPIXCENTER
{
    GPUPIXCENTER_ZERO=0,
    GPUPIXCENTER_HALF=1
};

enum GPUROUNDMODE
{
    GPUROUNDMODE_TRUNCATE=0,
    GPUROUNDMODE_ROUND=1,
    GPUROUNDMODE_ROUND_TO_EVEN=2,
    GPUROUNDMODE_ROUND_TO_ODD=3
};

enum GPUQUANTMODE
{
    GPUQUANTMODE_16TH=0,
    GPUQUANTMODE_8TH=1,
    GPUQUANTMODE_4TH=2,
    GPUQUANTMODE_HALF=3,
    GPUQUANTMODE_ONE=4
};

enum GPUCOPYSRCSELECT
{
    GPUCOPYSRCSELECT_RENDER_TARGET_0=0,
    GPUCOPYSRCSELECT_RENDER_TARGET_1=1,
    GPUCOPYSRCSELECT_RENDER_TARGET_2=2,
    GPUCOPYSRCSELECT_RENDER_TARGET_3=3,
    GPUCOPYSRCSELECT_DEPTH_STENCIL=4
};

enum GPUCOPYSAMPLESELECT
{
    GPUCOPYSAMPLESELECT_SAMPLE_0=0,
    GPUCOPYSAMPLESELECT_SAMPLE_1=1,
    GPUCOPYSAMPLESELECT_SAMPLE_2=2,
    GPUCOPYSAMPLESELECT_SAMPLE_3=3,
    GPUCOPYSAMPLESELECT_SAMPLES_0_1=4,
    GPUCOPYSAMPLESELECT_SAMPLES_2_3=5,
    GPUCOPYSAMPLESELECT_SAMPLES_0_1_2_3=6
};

enum GPUCOPYCOMMAND
{
    GPUCOPYCOMMAND_RAW=0,
    GPUCOPYCOMMAND_CONVERT=1,
    GPUCOPYCOMMAND_1_1_1_1=2,
    GPUCOPYCOMMAND_NULL=3
};

enum GPUPERFEVENT_SX
{
    GPUPE_SX_SC_QUADS=0,
    GPUPE_SX_SC_QUAD_FIFO_FULL=1,
    GPUPE_SX_EXPORT_VECTORS=2,
    GPUPE_SX_DUMMY_QUADS=3,
    GPUPE_SX_ALPHA_FAIL=4,
    GPUPE_SX_RB_QUAD_BUSY=5,
    GPUPE_SX_RB_COLOR_BUSY=6,
    GPUPE_SX_RB_QUAD_STALL=7,
    GPUPE_SX_RB_COLOR_STALL=8
};

enum GPUVSEXPORTMODE
{
    GPUVSEXPORTMODE_POSITION_ONLY=0,
    GPUVSEXPORTMODE_SPRITE=2,
    GPUVSEXPORTMODE_EDGE=3,
    GPUVSEXPORTMODE_KILL=4,
    GPUVSEXPORTMODE_SPRITE_KILL=5,
    GPUVSEXPORTMODE_EDGE_KILL=6,
    GPUVSEXPORTMODE_MULTIPASS=7
};

enum _FILE_INFO_BY_HANDLE_CLASS
{
    FileBasicInfo=0,
    FileStandardInfo=1,
    FileNameInfo=2,
    FileRenameInfo=3,
    FileDispositionInfo=4,
    FileAllocationInfo=5,
    FileEndOfFileInfo=6,
    FileStreamInfo=7,
    FileCompressionInfo=8,
    FileAttributeTagInfo=9,
    FileIdBothDirectoryInfo=10,
    FileIdBothDirectoryRestartInfo=11,
    FileIoPriorityHintInfo=12,
    MaximumFileInfoByHandleClass=13
};

enum GPUSAMPLES
{
    GPUSAMPLES_1X=0,
    GPUSAMPLES_2X=1,
    GPUSAMPLES_4X=2
};

enum GPUPERFEVENT_BC
{
    GPUPE_BC_CNTX0_BUSY=0,
    GPUPE_BC_CNTX17_BUSY=1,
    GPUPE_BC_RQ_STALLED=2,
    GPUPE_BC_AZ_STALLED=3,
    GPUPE_BC_MH_CPY_STALLED=4,
    GPUPE_BC_MH_EXP_STALLED=5,
    GPUPE_BC_SC_STARVED=6,
    GPUPE_BC_SX_STARVED=7,
    GPUPE_BC_ACC_COUNT=8,
    GPUPE_BC_DRAW_COUNT=9,
    GPUPE_BC_ACC2_COUNT=10,
    GPUPE_BC_DRAW2_COUNT=11,
    GPUPE_BC_SETZ_COUNT=12,
    GPUPE_BC_READ_COUNT=13,
    GPUPE_BC_READ_ACC_COUNT=14,
    GPUPE_BC_STATE_COUNT=15,
    GPUPE_BC_STATE2_COUNT=16,
    GPUPE_BC_COPY_WRITE_COUNT=17,
    GPUPE_BC_EXPORT_COUNT=18
};

enum GPUEXECINSTRUCTIONTYPE
{
    GPUEXECINSTRUCTIONTYPE_ALU=0,
    GPUEXECINSTRUCTIONTYPE_FETCH=1
};

enum _D3DFILLMODE
{
    D3DFILL_POINT=1,
    D3DFILL_WIREFRAME=37,
    D3DFILL_SOLID=0,
    D3DFILL_FORCE_DWORD=2147483647
};

enum GPUEXECSERIALIZEMODE
{
    GPUEXECSERIALIZEMODE_UNSERIALIZED=0,
    GPUEXECSERIALIZEMODE_SERIALIZED=1
};

enum GPUEXECFETCHCACHETYPE
{
    GPUEXECFETCHCACHETYPE_TEXTURE=0,
    GPUEXECFETCHCACHETYPE_VERTEX=1
};

enum _D3DBLEND
{
    D3DBLEND_ZERO=0,
    D3DBLEND_ONE=1,
    D3DBLEND_SRCCOLOR=4,
    D3DBLEND_INVSRCCOLOR=5,
    D3DBLEND_SRCALPHA=6,
    D3DBLEND_INVSRCALPHA=7,
    D3DBLEND_DESTCOLOR=8,
    D3DBLEND_INVDESTCOLOR=9,
    D3DBLEND_DESTALPHA=10,
    D3DBLEND_INVDESTALPHA=11,
    D3DBLEND_BLENDFACTOR=12,
    D3DBLEND_INVBLENDFACTOR=13,
    D3DBLEND_CONSTANTALPHA=14,
    D3DBLEND_INVCONSTANTALPHA=15,
    D3DBLEND_SRCALPHASAT=16,
    D3DBLEND_FORCE_DWORD=2147483647
};

enum GPUALLOCBUFFERSELECT
{
    GPUALLOCBUFFERSELECT_POSITION=1,
    GPUALLOCBUFFERSELECT_INTERPOLATORS=2,
    GPUALLOCBUFFERSELECT_COLORS=2,
    GPUALLOCBUFFERSELECT_EXPORT=3
};

enum GPUPERFEVENT_MC
{
    GPUPE_RANK_BANK0_ACCESSES=0,
    GPUPE_RANK_BANK1_ACCESSES=1,
    GPUPE_RANK_BANK2_ACCESSES=2,
    GPUPE_RANK_BANK3_ACCESSES=3,
    GPUPE_RANK_BANK4_ACCESSES=4,
    GPUPE_RANK_BANK5_ACCESSES=5,
    GPUPE_RANK_BANK6_ACCESSES=6,
    GPUPE_RANK_BANK7_ACCESSES=7,
    GPUPE_RANK_BANK8_ACCESSES=8,
    GPUPE_RANK_BANK9_ACCESSES=9,
    GPUPE_RANK_BANK10_ACCESSES=10,
    GPUPE_RANK_BANK11_ACCESSES=11,
    GPUPE_RANK_BANK12_ACCESSES=12,
    GPUPE_RANK_BANK13_ACCESSES=13,
    GPUPE_RANK_BANK14_ACCESSES=14,
    GPUPE_RANK_BANK15_ACCESSES=15,
    GPUPE_READ_2_WRITE=16,
    GPUPE_WRITE_2_READ=17,
    GPUPE_NEW_PAGE_ACCESSES=18,
    GPUPE_TOTAL_ACCESSES=19,
    GPUPE_READ_ACCESSES=20,
    GPUPE_ACCESS_PRESENT_NO_ISSUE_CLKS=21,
    GPUPE_CMD_PRESENT_NO_XFER_CLKS=22,
    GPUPE_URGENT_DC_ACCESSES=23,
    GPUPE_URGENT_SB_ACCESSES=24,
    GPUPE_URGENT_BIU_ACCESSES=25,
    GPUPE_NEW_BIUF_ACCESSES=26,
    GPUPE_NEW_CP_ACCESSES=27,
    GPUPE_NEW_TC_ACCESSES=28,
    GPUPE_NEW_VC_ACCESSES=29,
    GPUPE_NEW_BC_CP_ACCESSES=30,
    GPUPE_NEW_BC_EX_ACCESSES=31,
    GPUPE_NEW_VGT_ACCESSES=32,
    GPUPE_NEW_DC_ACCESSES=33,
    GPUPE_NEW_SB_ACCESSES=34,
    GPUPE_NEW_BIUS_ACCESSES=35,
    GPUPE_BIUS_READ_ACCESSES=36,
    GPUPE_SB_READ_ACCESSES=37,
    GPUPE_CP_READ_ACCESSES=38,
    GPUPE_NTH_SMPG_ACCESS_IS_BIUF=39,
    GPUPE_NTH_SMPG_ACCESS_IS_CP=40,
    GPUPE_NTH_SMPG_ACCESS_IS_TC=41,
    GPUPE_NTH_SMPG_ACCESS_IS_VC=42,
    GPUPE_NTH_SMPG_ACCESS_IS_BC_CP=43,
    GPUPE_NTH_SMPG_ACCESS_IS_BC_EX=44,
    GPUPE_NTH_SMPG_ACCESS_IS_VGT=45,
    GPUPE_NTH_SMPG_ACCESS_IS_DC=46,
    GPUPE_NTH_SMPG_ACCESS_IS_SB=47,
    GPUPE_NTH_SMPG_ACCESS_IS_BIUS=48,
    GPUPE_N_VALID_ENTRY_IN_TEXTURE_CAM_CLKS=49,
    GPUPE_N_VALID_ENTRY_IN_VC_CAM_CLKS=50,
    GPUPE_N_VALID_ENTRY_IN_BIUS_CAM_CLKS=51,
    GPUPE_N_SB_BUF_USED_CLKS=52,
    GPUPE_N_TC_BUF_USED_CLKS=53,
    GPUPE_N_VC_BUF_USED_CLKS=54,
    GPUPE_N_DC_BUF_USED_CLKS=55,
    GPUPE_N_VGT_BUF_USED_CLK=56,
    GPUPE_N_CP_BUF_USED_CLKS=57
};

enum GPUSCREENEXTENTS
{
    GPUSCREENEXTENTS_ALLTILES=0,
    GPUSCREENEXTENTS_NONCULLED=1,
    GPUSCREENEXTENTS_PRIMEXTENTS=2
};

enum GPUINITIATOR
{
    GPUINITIATOR_VS_DEALLOC=0,
    GPUINITIATOR_PS_DEALLOC=1,
    GPUINITIATOR_VS_DONE_WRITE_BACK=2,
    GPUINITIATOR_PS_DONE_WRITE_BACK=3,
    GPUINITIATOR_CACHE_FLUSH_WRITE_BACK=4,
    GPUINITIATOR_CONTEXT_DONE=5,
    GPUINITIATOR_CACHE_FLUSH=6,
    GPUINITIATOR_VIZQUERY_START=7,
    GPUINITIATOR_VIZQUERY_END=8,
    GPUINITIATOR_SC_WAIT_WC=9,
    GPUINITIATOR_MPASS_PS_CP_REFETCH=10,
    GPUINITIATOR_MPASS_PS_RST_START=11,
    GPUINITIATOR_MPASS_PS_INCR_START=12,
    GPUINITIATOR_RST_PIX_CNT=13,
    GPUINITIATOR_RST_VTX_CNT=14,
    GPUINITIATOR_TILE_FLUSH=15,
    GPUINITIATOR_CACHE_FLUSH_AND_INV_WRITE_BACK_EVENT=20,
    GPUINITIATOR_ZPASS_DONE=21,
    GPUINITIATOR_CACHE_FLUSH_AND_INV_EVENT=22,
    GPUINITIATOR_PERFCOUNTER_START=23,
    GPUINITIATOR_PERFCOUNTER_STOP=24,
    GPUINITIATOR_SCREEN_EXT_INIT=25,
    GPUINITIATOR_SCREEN_EXT_RPT=26,
    GPUINITIATOR_VS_FETCH_DONE_WRITE_BACK=27
};

enum _D3DBLENDOP
{
    D3DBLENDOP_ADD=0,
    D3DBLENDOP_SUBTRACT=1,
    D3DBLENDOP_MIN=2,
    D3DBLENDOP_MAX=3,
    D3DBLENDOP_REVSUBTRACT=4,
    D3DBLENDOP_FORCE_DWORD=2147483647
};

enum _D3DTEXTUREADDRESS
{
    D3DTADDRESS_WRAP=0,
    D3DTADDRESS_MIRROR=1,
    D3DTADDRESS_CLAMP=2,
    D3DTADDRESS_MIRRORONCE=3,
    D3DTADDRESS_BORDER_HALF=4,
    D3DTADDRESS_MIRRORONCE_BORDER_HALF=5,
    D3DTADDRESS_BORDER=6,
    D3DTADDRESS_MIRRORONCE_BORDER=7,
    D3DTADDRESS_FORCE_DWORD=2147483647
};

enum _D3DCULL
{
    D3DCULL_NONE=0,
    D3DCULL_CW=2,
    D3DCULL_CCW=6,
    D3DCULL_FORCE_DWORD=2147483647
};

enum _XSTORAGE_FACILITY
{
    XSTORAGE_FACILITY_GAME_CLIP=1,
    XSTORAGE_FACILITY_PER_TITLE=2,
    XSTORAGE_FACILITY_PER_USER_TITLE=3
};

enum GPUSYNCFUNCTION
{
    GPUSYNCFUNCTION_NEVER=0,
    GPUSYNCFUNCTION_LESS=1,
    GPUSYNCFUNCTION_LEQUAL=2,
    GPUSYNCFUNCTION_EQUAL=3,
    GPUSYNCFUNCTION_NOTEQUAL=4,
    GPUSYNCFUNCTION_GEQUAL=5,
    GPUSYNCFUNCTION_GREATER=6,
    GPUSYNCFUNCTION_ALWAYS=7
};

enum _D3DCMPFUNC
{
    D3DCMP_NEVER=0,
    D3DCMP_LESS=1,
    D3DCMP_EQUAL=2,
    D3DCMP_LESSEQUAL=3,
    D3DCMP_GREATER=4,
    D3DCMP_NOTEQUAL=5,
    D3DCMP_GREATEREQUAL=6,
    D3DCMP_ALWAYS=7,
    D3DCMP_FORCE_DWORD=2147483647
};

enum GPUSYNCSPACE
{
    GPUSYNCSPACE_REGISTER=0,
    GPUSYNCSPACE_MEMORY=1
};

enum _XPROFILE_GAMERCARD_ZONE_OPTIONS
{
    XPROFILE_GAMERCARD_ZONE_XBOX_1=0,
    XPROFILE_GAMERCARD_ZONE_RR=1,
    XPROFILE_GAMERCARD_ZONE_PRO=2,
    XPROFILE_GAMERCARD_ZONE_FAMILY=3,
    XPROFILE_GAMERCARD_ZONE_UNDERGROUND=4
};

enum GPUCONSTANTID
{
    GPUCONSTANTID_ALU=0,
    GPUCONSTANTID_FETCH=1,
    GPUCONSTANTID_BOOLEAN=2,
    GPUCONSTANTID_INTEGER=3,
    GPUCONSTANTID_REGISTER=4
};

enum _D3DSTENCILOP
{
    D3DSTENCILOP_KEEP=0,
    D3DSTENCILOP_ZERO=1,
    D3DSTENCILOP_REPLACE=2,
    D3DSTENCILOP_INCRSAT=3,
    D3DSTENCILOP_DECRSAT=4,
    D3DSTENCILOP_INVERT=5,
    D3DSTENCILOP_INCR=6,
    D3DSTENCILOP_DECR=7,
    D3DSTENCILOP_FORCE_DWORD=2147483647
};

enum _XPROFILE_GAMER_DIFFICULTY_OPTIONS
{
    XPROFILE_GAMER_DIFFICULTY_NORMAL=0,
    XPROFILE_GAMER_DIFFICULTY_EASY=1,
    XPROFILE_GAMER_DIFFICULTY_HARD=2
};

enum GPUINDEXSELECT
{
    GPUINDEXSELECT_DMA=0,
    GPUINDEXSELECT_IMMEDIATE=1,
    GPUINDEXSELECT_AUTO=2
};

enum _XPROFILE_CONTROL_SENSITIVITY_OPTIONS
{
    XPROFILE_CONTROL_SENSITIVITY_MEDIUM=0,
    XPROFILE_CONTROL_SENSITIVITY_LOW=1,
    XPROFILE_CONTROL_SENSITIVITY_HIGH=2
};

enum _D3DZBUFFERTYPE
{
    D3DZB_FALSE=0,
    D3DZB_TRUE=1,
    D3DZB_FORCE_DWORD=2147483647
};

enum GPUINDEXTYPE
{
    GPUINDEXTYPE_16BIT=0,
    GPUINDEXTYPE_32BIT=1
};

enum _XPROFILE_PREFERRED_COLOR_OPTIONS
{
    XPROFILE_PREFERRED_COLOR_NONE=0,
    XPROFILE_PREFERRED_COLOR_BLACK=1,
    XPROFILE_PREFERRED_COLOR_WHITE=2,
    XPROFILE_PREFERRED_COLOR_YELLOW=3,
    XPROFILE_PREFERRED_COLOR_ORANGE=4,
    XPROFILE_PREFERRED_COLOR_PINK=5,
    XPROFILE_PREFERRED_COLOR_RED=6,
    XPROFILE_PREFERRED_COLOR_PURPLE=7,
    XPROFILE_PREFERRED_COLOR_BLUE=8,
    XPROFILE_PREFERRED_COLOR_GREEN=9,
    XPROFILE_PREFERRED_COLOR_BROWN=10,
    XPROFILE_PREFERRED_COLOR_SILVER=11
};

enum GPUPERFEVENT_MH
{
    GPUPE_CP_READ_MEMORY=0,
    GPUPE_CP_READ_PGLB=1,
    GPUPE_CP_WRITE_MEMORY=2,
    GPUPE_CP_WRITE_SNOOPED=3,
    GPUPE_CP_WRITE_WRITEBACK=4,
    GPUPE_MH_CP_RTR=5,
    GPUPE_VGT_READ_MEMORY=6,
    GPUPE_VGT_READ_PGLB=7,
    GPUPE_MH_VGT_RTR=8,
    GPUPE_IOC_READ=9,
    GPUPE_IOC_WRITE=10,
    GPUPE_IOC_READ_BYTE_COUNT=11,
    GPUPE_IOC_WRITE_BYTE_COUNT=12,
    GPUPE_IOC_URGENT=13,
    GPUPE_MH_IOC_RTR=14,
    GPUPE_TC0_READ=15,
    GPUPE_MH_TC0_RTR=16,
    GPUPE_TC1_READ=17,
    GPUPE_MH_TC1_RTR=18,
    GPUPE_VC0_READ_MEMORY=19,
    GPUPE_VC0_READ_PGLB=20,
    GPUPE_MH_VC0_RTR=21,
    GPUPE_VC1_READ_MEMORY=22,
    GPUPE_VC1_READ_PGLB=23,
    GPUPE_MH_VC1_RTR=24,
    GPUPE_BC0_CP_WRITE=25,
    GPUPE_BC0_EX_WRITE=26,
    GPUPE_MH_BC0_RTR=27,
    GPUPE_BC1_CP_WRITE=28,
    GPUPE_BC1_EX_WRITE=29,
    GPUPE_MH_BC1_RTR=30,
    GPUPE_DC_GRAPHICS_REQ=31,
    GPUPE_DC_OVERLAY_REQ=32,
    GPUPE_DC_URGENT=33,
    GPUPE_PGLB_BIU_REQ=34,
    GPUPE_BIU_PGL_READ_DATA=35,
    GPUPE_PGL_MHS_READ_DATA=36,
    GPUPE_MH_MC0_READ_REQS=37,
    GPUPE_MH_MC0_WRITE_REQS=38,
    GPUPE_MH_MC1_READ_REQS=39,
    GPUPE_MH_MC1_WRITE_REQS=40,
    GPUPE_MC0_MH_READ_DATA=41,
    GPUPE_MC1_MH_READ_DATA=42,
    GPUPE_MH_CP_SEND=43,
    GPUPE_MH_VGT_SEND=44,
    GPUPE_MH_IOC_SEND=45,
    GPUPE_MH_TC0_SEND=46,
    GPUPE_MH_TC1_SEND=47,
    GPUPE_MH_VC0_SEND=48,
    GPUPE_MH_VC1_SEND=49,
    GPUPE_MH_DC_SEND=50,
    GPUPE_DC0_INFLIGHT_FULL=51,
    GPUPE_DC1_INFLIGHT_FULL=52,
    GPUPE_VC0_INFLIGHT_FULL=53,
    GPUPE_VC1_INFLIGHT_FULL=54,
    GPUPE_TC0_INFLIGHT_FULL=55,
    GPUPE_TC1_INFLIGHT_FULL=56,
    GPUPE_CP0_INFLIGHT_FULL=57,
    GPUPE_CP1_INFLIGHT_FULL=58,
    GPUPE_VGT0_INFLIGHT_FULL=59,
    GPUPE_VGT1_INFLIGHT_FULL=60,
    GPUPE_SB0_INFLIGHT_FULL=61,
    GPUPE_SB1_INFLIGHT_FULL=62,
    GPUPE_VCPGL_INFLIGHT_FULL=63,
    GPUPE_CPPGL_INFLIGHT_FULL=64,
    GPUPE_VGTPGL_INFLIGHT_FULL=65,
    GPUPE_MC0_DC_Q_FULL=66,
    GPUPE_MC0_VC_Q_FULL=67,
    GPUPE_MC0_TC_Q_FULL=68,
    GPUPE_MC0_CP_Q_FULL=69,
    GPUPE_MC0_SB_Q_FULL=70,
    GPUPE_MC0_VGT_Q_FULL=71,
    GPUPE_MC0_BCCP_Q_FULL=72,
    GPUPE_MC0_BCEX_Q_FULL=73,
    GPUPE_MC1_DC_Q_FULL=74,
    GPUPE_MC1_VC_Q_FULL=75,
    GPUPE_MC1_TC_Q_FULL=76,
    GPUPE_MC1_CP_Q_FULL=77,
    GPUPE_MC1_SB_Q_FULL=78,
    GPUPE_MC1_VGT_Q_FULL=79,
    GPUPE_MC1_BCCP_Q_FULL=80,
    GPUPE_MC1_BCEX_Q_FULL=81,
    GPUPE_CP_PGL_CACHE_HIT=82,
    GPUPE_VGT_PGL_CACHE_HIT=83,
    GPUPE_VC_PGL_CACHE_HIT=84,
    GPUPE_CP_PGL_FULL=85,
    GPUPE_VGT_PGL_FULL=86,
    GPUPE_VC0_PGL_FULL=87,
    GPUPE_VC1_PGL_FULL=88,
    GPUPE_MC0_WDB_FULL=89,
    GPUPE_MC0_TAGBUF_FULL=90,
    GPUPE_MC1_WDB_FULL=91,
    GPUPE_MC1_TAGBUF_FULL=92,
    GPUPE_PGL_TAGBUF_FULL=93,
    GPUPE_CP_WRITENOTIFY=94,
    GPUPE_BC_WRITENOTIFY=95,
    GPUPE_IOC_SYNC=96,
    GPUPE_PGL_BIU_LATENCY=97,
    GPUPE_MH_MC0_LATENCY=98,
    GPUPE_MH_MC0_DC_LATENCY=99,
    GPUPE_MH_MC0_VC_LATENCY=100,
    GPUPE_MH_MC0_TC_LATENCY=101,
    GPUPE_MH_MC0_CP_LATENCY=102,
    GPUPE_MH_MC0_SB_LATENCY=103,
    GPUPE_MH_MC0_VGT_LATENCY=104,
    GPUPE_MH_MC1_LATENCY=105,
    GPUPE_MH_MC1_DC_LATENCY=106,
    GPUPE_MH_MC1_VC_LATENCY=107,
    GPUPE_MH_MC1_TC_LATENCY=108,
    GPUPE_MH_MC1_CP_LATENCY=109,
    GPUPE_MH_MC1_SB_LATENCY=110,
    GPUPE_MH_MC1_VGT_LATENCY=111,
    GPUPE_MH_PGL_LATENCY=112,
    GPUPE_MH_PGL_CP_LATENCY=113,
    GPUPE_MH_PGL_VC_LATENCY=114,
    GPUPE_MH_PGL_VGT_LATENCY=115,
    GPUPE_TC0_RDY_AND_NOROOM=116,
    GPUPE_TC1_RDY_AND_NOROOM=117,
    GPUPE_IOC_RDY_AND_NOROOM=118
};

enum GPUDESTBASE7
{
    GPUDESTBASE7_CLIPPLANE_DISABLED=0,
    GPUDESTBASE7_CLIPPLANE_ENABLED=4096
};

enum _D3DTESSELLATIONMODE
{
    D3DTM_DISCRETE=0,
    D3DTM_CONTINUOUS=1,
    D3DTM_PEREDGE=2,
    D3DTM_FORCE_DWORD=2147483647
};

enum _D3DPRIMITIVETYPE
{
    D3DPT_POINTLIST=1,
    D3DPT_LINELIST=2,
    D3DPT_LINESTRIP=3,
    D3DPT_TRIANGLELIST=4,
    D3DPT_TRIANGLEFAN=5,
    D3DPT_TRIANGLESTRIP=6,
    D3DPT_RECTLIST=8,
    D3DPT_QUADLIST=13,
    D3DPT_FORCE_DWORD=2147483647
};

enum _XPROFILE_ACTION_AUTO_AIM_OPTIONS
{
    XPROFILE_ACTION_AUTO_AIM_OFF=0,
    XPROFILE_ACTION_AUTO_AIM_ON=1
};

enum _XPROFILE_ACTION_AUTO_CENTER_OPTIONS
{
    XPROFILE_ACTION_AUTO_CENTER_OFF=0,
    XPROFILE_ACTION_AUTO_CENTER_ON=1
};

enum _D3DTESSPRIMITIVETYPE
{
    D3DTPT_LINELIST=2,
    D3DTPT_LINESTRIP=3,
    D3DTPT_TRIANGLELIST=4,
    D3DTPT_TRIANGLEFAN=5,
    D3DTPT_TRIANGLESTRIP=6,
    D3DTPT_QUADLIST=13,
    D3DTPT_LINEPATCH=16,
    D3DTPT_TRIPATCH=17,
    D3DTPT_QUADPATCH=18,
    D3DTPT_FORCE_DWORD=2147483647
};

enum _XPROFILE_ACTION_MOVEMENT_CONTROL_OPTIONS
{
    XPROFILE_ACTION_MOVEMENT_CONTROL_L_THUMBSTICK=0,
    XPROFILE_ACTION_MOVEMENT_CONTROL_R_THUMBSTICK=1
};

enum _XPROFILE_RACE_TRANSMISSION_OPTIONS
{
    XPROFILE_RACE_TRANSMISSION_AUTO=0,
    XPROFILE_RACE_TRANSMISSION_MANUAL=1
};

enum _XPROFILE_RACE_CAMERA_LOCATION_OPTIONS
{
    XPROFILE_RACE_CAMERA_LOCATION_BEHIND=0,
    XPROFILE_RACE_CAMERA_LOCATION_IN_FRONT=1,
    XPROFILE_RACE_CAMERA_LOCATION_INSIDE=2
};

enum _SID_NAME_USE
{
    SidTypeUser=1,
    SidTypeGroup=2,
    SidTypeDomain=3,
    SidTypeAlias=4,
    SidTypeWellKnownGroup=5,
    SidTypeDeletedAccount=6,
    SidTypeInvalid=7,
    SidTypeUnknown=8,
    SidTypeComputer=9
};

enum _XPROFILE_RACE_BRAKE_CONTROL_OPTIONS
{
    XPROFILE_RACE_BRAKE_CONTROL_TRIGGER=0,
    XPROFILE_RACE_BRAKE_CONTROL_BUTTON=1
};

enum _D3DQUERYTYPE
{
    D3DQUERYTYPE_VCACHE=4,
    D3DQUERYTYPE_RESOURCEMANAGER=5,
    D3DQUERYTYPE_VERTEXSTATS=6,
    D3DQUERYTYPE_EVENT=8,
    D3DQUERYTYPE_OCCLUSION=9,
    D3DQUERYTYPE_SCREENEXTENT=10
};

enum _XPROFILE_RACE_ACCELERATOR_CONTROL_OPTIONS
{
    XPROFILE_RACE_ACCELERATOR_CONTROL_TRIGGER=0,
    XPROFILE_RACE_ACCELERATOR_CONTROL_BUTTON=1
};

enum _XPROFILE_GAMER_YAXIS_INVERSION_OPTIONS
{
    XPROFILE_YAXIS_INVERSION_OFF=0,
    XPROFILE_YAXIS_INVERSION_ON=1
};

enum _D3DHISTENCILCMPFUNC
{
    D3DHSCMP_EQUAL=0,
    D3DHSCMP_NOTEQUAL=1,
    D3DHSCMP_FORCE_DWORD=2147483647
};

enum _XPROFILE_CONTROLLER_VIBRATION_OPTIONS
{
    XPROFILE_CONTROLLER_VIBRATION_OFF=0,
    XPROFILE_CONTROLLER_VIBRATION_ON=3
};

enum GPUPERFEVENT_CP
{
    GPUPE_CP_COUNT=0,
    GPUPE_CP_RBIU_STALL=1,
    GPUPE_CP_RBIU_TAF=2,
    GPUPE_CP_PFP_STALL=3,
    GPUPE_CP_RESERVED0=4,
    GPUPE_CP_RESERVED1=5,
    GPUPE_CP_NRT_RCIU_STALL=6,
    GPUPE_CP_Reserved2=7,
    GPUPE_CP_NRT_MIU_STALL=8,
    GPUPE_CP_CSF_PFP_I1_FULL=9,
    GPUPE_CP_CSF_PFP_I2_FULL=10,
    GPUPE_CP_CSF_PFP_REQ_FULL=11,
    GPUPE_CP_RESERVED3=12,
    GPUPE_CP_RING_ROQ_FULL=13,
    GPUPE_CP_I1_ROQ_FULL=14,
    GPUPE_CP_I2_ROQ_FULL=15,
    GPUPE_CP_ST_ROQ_FULL=16,
    GPUPE_CP_RTST_ROQ_FULL=17,
    GPUPE_CP_MIU_TAG_MEM_FULL=18,
    GPUPE_CP_MIU_WRITECLEAN=19,
    GPUPE_CP_RESERVED4=20,
    GPUPE_CP_RESERVED5=21,
    GPUPE_CP_NRT_WRITE_STALL=22,
    GPUPE_CP_NRT_READ_STALL=23,
    GPUPE_CP_WC_FIFO_FULL=24,
    GPUPE_CP_VTX_DEALLOC_FIFO_FULL=25,
    GPUPE_CP_PIX_DEALLOC_FIFO_FULL=26,
    GPUPE_CP_VTX_EVENT_FIFO_FULL=27,
    GPUPE_CP_PIX_EVENT_FIFO_FULL=28,
    GPUPE_CP_CF_EVENT_FIFO_FULL=29,
    GPUPE_CP_ME_RB_STARVED=30,
    GPUPE_CP_ME_I1_STARVED=31,
    GPUPE_CP_ME_I2_STARVED=32,
    GPUPE_CP_ME_ST_STARVED=33,
    GPUPE_CP_RESERVED6=34,
    GPUPE_CP_RESERVED7=35,
    GPUPE_CP_RESERVED8=36,
    GPUPE_CP_RESERVED9=37,
    GPUPE_CP_RESERVED10=38,
    GPUPE_CP_RESERVED11=39,
    GPUPE_RCIU_RBBM_DWORD_SENT=40,
    GPUPE_ME_PARSER_BUSY_CLOCKS=41,
    GPUPE_ME_WAIT_CONTEXT_AVAIL=42,
    GPUPE_PFP_TYPE0_PACKET=43,
    GPUPE_PFP_TYPE3_PACKET=44,
    GPUPE_CSF_RB_WPTR_NEQ_RPTR=45,
    GPUPE_CSF_I1_SIZE_NEQ_ZERO=46,
    GPUPE_CSF_I2_SIZE_NEQ_ZERO=47,
    GPUPE_CSF_RB_I1_I2_FETCHING=48,
    GPUPE_CP_RESERVED12=49,
    GPUPE_CP_RESERVED13=50,
    GPUPE_CP_RESERVED14=51,
    GPUPE_CP_RESERVED15=52,
    GPUPE_CP_RESERVED16=53,
    GPUPE_CP_RESERVED17=54,
    GPUPE_CP_RESERVED18=55,
    GPUPE_CP_RESERVED19=56,
    GPUPE_CP_RESERVED20=57,
    GPUPE_CP_RESERVED21=58,
    GPUPE_CP_RESERVED22=59,
    GPUPE_CP_RESERVED23=60,
    GPUPE_CP_RESERVED24=61,
    GPUPE_CP_RESERVED25=62,
    GPUPE_CP_RESERVED26=63
};

enum _D3DHIZENABLEMODE
{
    D3DHIZ_DISABLE=0,
    D3DHIZ_ENABLE=1,
    D3DHIZ_AUTOMATIC=2,
    D3DHIZ_FORCE_DWORD=2147483647
};

enum _XPROFILE_VOICE_THRU_SPEAKERS_OPTIONS
{
    XPROFILE_VOICE_THRU_SPEAKERS_OFF=0,
    XPROFILE_VOICE_THRU_SPEAKERS_ON=1,
    XPROFILE_VOICE_THRU_SPEAKERS_BOTH=2
};

enum _D3DRENDERSTATETYPE
{
    D3DRS_ZENABLE=40,
    D3DRS_ZFUNC=44,
    D3DRS_ZWRITEENABLE=48,
    D3DRS_FILLMODE=52,
    D3DRS_CULLMODE=56,
    D3DRS_ALPHABLENDENABLE=60,
    D3DRS_SEPARATEALPHABLENDENABLE=64,
    D3DRS_BLENDFACTOR=68,
    D3DRS_SRCBLEND=72,
    D3DRS_DESTBLEND=76,
    D3DRS_BLENDOP=80,
    D3DRS_SRCBLENDALPHA=84,
    D3DRS_DESTBLENDALPHA=88,
    D3DRS_BLENDOPALPHA=92,
    D3DRS_ALPHATESTENABLE=96,
    D3DRS_ALPHAREF=100,
    D3DRS_ALPHAFUNC=104,
    D3DRS_STENCILENABLE=108,
    D3DRS_TWOSIDEDSTENCILMODE=112,
    D3DRS_STENCILFAIL=116,
    D3DRS_STENCILZFAIL=120,
    D3DRS_STENCILPASS=124,
    D3DRS_STENCILFUNC=128,
    D3DRS_STENCILREF=132,
    D3DRS_STENCILMASK=136,
    D3DRS_STENCILWRITEMASK=140,
    D3DRS_CCW_STENCILFAIL=144,
    D3DRS_CCW_STENCILZFAIL=148,
    D3DRS_CCW_STENCILPASS=152,
    D3DRS_CCW_STENCILFUNC=156,
    D3DRS_CCW_STENCILREF=160,
    D3DRS_CCW_STENCILMASK=164,
    D3DRS_CCW_STENCILWRITEMASK=168,
    D3DRS_CLIPPLANEENABLE=172,
    D3DRS_POINTSIZE=176,
    D3DRS_POINTSIZE_MIN=180,
    D3DRS_POINTSPRITEENABLE=184,
    D3DRS_POINTSIZE_MAX=188,
    D3DRS_MULTISAMPLEANTIALIAS=192,
    D3DRS_MULTISAMPLEMASK=196,
    D3DRS_SCISSORTESTENABLE=200,
    D3DRS_SLOPESCALEDEPTHBIAS=204,
    D3DRS_DEPTHBIAS=208,
    D3DRS_COLORWRITEENABLE=212,
    D3DRS_COLORWRITEENABLE1=216,
    D3DRS_COLORWRITEENABLE2=220,
    D3DRS_COLORWRITEENABLE3=224,
    D3DRS_TESSELLATIONMODE=228,
    D3DRS_MINTESSELLATIONLEVEL=232,
    D3DRS_MAXTESSELLATIONLEVEL=236,
    D3DRS_WRAP0=240,
    D3DRS_WRAP1=244,
    D3DRS_WRAP2=248,
    D3DRS_WRAP3=252,
    D3DRS_WRAP4=256,
    D3DRS_WRAP5=260,
    D3DRS_WRAP6=264,
    D3DRS_WRAP7=268,
    D3DRS_WRAP8=272,
    D3DRS_WRAP9=276,
    D3DRS_WRAP10=280,
    D3DRS_WRAP11=284,
    D3DRS_WRAP12=288,
    D3DRS_WRAP13=292,
    D3DRS_WRAP14=296,
    D3DRS_WRAP15=300,
    D3DRS_VIEWPORTENABLE=304,
    D3DRS_HIGHPRECISIONBLENDENABLE=308,
    D3DRS_HIGHPRECISIONBLENDENABLE1=312,
    D3DRS_HIGHPRECISIONBLENDENABLE2=316,
    D3DRS_HIGHPRECISIONBLENDENABLE3=320,
    D3DRS_HALFPIXELOFFSET=324,
    D3DRS_PRIMITIVERESETENABLE=328,
    D3DRS_PRIMITIVERESETINDEX=332,
    D3DRS_ALPHATOMASKENABLE=336,
    D3DRS_ALPHATOMASKOFFSETS=340,
    D3DRS_GUARDBAND_X=344,
    D3DRS_GUARDBAND_Y=348,
    D3DRS_DISCARDBAND_X=352,
    D3DRS_DISCARDBAND_Y=356,
    D3DRS_HISTENCILENABLE=360,
    D3DRS_HISTENCILWRITEENABLE=364,
    D3DRS_HISTENCILFUNC=368,
    D3DRS_HISTENCILREF=372,
    D3DRS_PRESENTINTERVAL=376,
    D3DRS_PRESENTIMMEDIATETHRESHOLD=380,
    D3DRS_HIZENABLE=384,
    D3DRS_HIZWRITEENABLE=388,
    D3DRS_LASTPIXEL=392,
    D3DRS_LINEWIDTH=396,
    D3DRS_BUFFER2FRAMES=400,
    D3DRS_MAX=404,
    D3DRS_FORCE_DWORD=2147483647
};

enum _XUSER_PROFILE_SOURCE
{
    XSOURCE_NO_VALUE=0,
    XSOURCE_DEFAULT=1,
    XSOURCE_TITLE=2,
    XSOURCE_PERMISSION_DENIED=3
};

enum _D3DSCREENEXTENTQUERYMODE
{
    D3DSEQM_CULLED=0,
    D3DSEQM_NONCULLED=1,
    D3DSEQM_PRECLIP=2
};

enum _D3DXINCLUDE_TYPE
{
    D3DXINC_LOCAL=0,
    D3DXINC_SYSTEM=1,
    D3DXINC_FORCE_DWORD=2147483647
};

enum _D3DBLOCKTYPE
{
    D3DBLOCKTYPE_NONE=0,
    D3DBLOCKTYPE_PRIMARY_OVERRUN=1,
    D3DBLOCKTYPE_SECONDARY_OVERRUN=2,
    D3DBLOCKTYPE_SWAP_THROTTLE=3,
    D3DBLOCKTYPE_BLOCK_UNTIL_IDLE=4,
    D3DBLOCKTYPE_BLOCK_UNTIL_NOT_BUSY=5,
    D3DBLOCKTYPE_BLOCK_ON_FENCE=6,
    D3DBLOCKTYPE_VERTEX_SHADER_RELEASE=7,
    D3DBLOCKTYPE_PIXEL_SHADER_RELEASE=8,
    D3DBLOCKTYPE_VERTEX_BUFFER_RELEASE=9,
    D3DBLOCKTYPE_VERTEX_BUFFER_LOCK=10,
    D3DBLOCKTYPE_INDEX_BUFFER_RELEASE=11,
    D3DBLOCKTYPE_INDEX_BUFFER_LOCK=12,
    D3DBLOCKTYPE_TEXTURE_RELEASE=13,
    D3DBLOCKTYPE_TEXTURE_LOCK=14,
    D3DBLOCKTYPE_COMMAND_BUFFER_RELEASE=15,
    D3DBLOCKTYPE_COMMAND_BUFFER_LOCK=16,
    D3DBLOCKTYPE_CONSTANT_BUFFER_RELEASE=17,
    D3DBLOCKTYPE_CONSTANT_BUFFER_LOCK=18,
    D3DBLOCKTYPE_MAX=19
};

enum _D3DCOUNTER
{
    D3DCOUNTER_FRAMETIME=0,
    D3DCOUNTER_FRAMESPERSECOND=1,
    D3DCOUNTER_FRAMECOUNT=2,
    D3DCOUNTER_FRAME_BLOCKED_PERCENT=3,
    D3DCOUNTER_FRAME_THROTTLED_PERCENT=4,
    D3DCOUNTER_FRAME_ACTIVE_PERCENT=5,
    D3DCOUNTER_XAM_GPU_PERCENT=6,
    D3DCOUNTER_FRAME_GPU_IDLE_PERCENT=7,
    D3DCOUNTER_PRIMITIVES_CULLED_PERCENT=8,
    D3DCOUNTER_PRIMITIVES_CLIPPED_PERCENT=9,
    D3DCOUNTER_PRIMITIVES_VISIBLE_PERCENT=10,
    D3DCOUNTER_BANDWIDTH_SYSTEM=11,
    D3DCOUNTER_BANDWIDTH_INDICES=12,
    D3DCOUNTER_BANDWIDTH_TEXTURE=13,
    D3DCOUNTER_BANDWIDTH_VERTEX=14,
    D3DCOUNTER_BANDWIDTH_RESOLVE=15,
    D3DCOUNTER_BANDWIDTH_MEMEXPORT=16,
    D3DCOUNTER_XAM_COMMAND_BUFFER_SIZE=17,
    D3DCOUNTER_FRAME_GPU_WASTED_PERCENT=18,
    D3DCOUNTER_MAX=19
};

enum _D3DXPATCHMESHTYPE
{
    D3DXPATCHMESH_RECT=1,
    D3DXPATCHMESH_TRI=2,
    D3DXPATCHMESH_NPATCH=3,
    D3DXPATCHMESH_FORCE_DWORD=2147483647
};

enum GPUPERFEVENT_RBBM
{
    GPUPE_RBBM_COUNT=0,
    GPUPE_RBBM_NRT_BUSY=1,
    GPUPE_RBBM_BC_CNTX0_BUSY=2,
    GPUPE_RBBM_BC_CNTX17_BUSY=3,
    GPUPE_RBBM_SQ_CNTX0_BUSY=4,
    GPUPE_RBBM_SQ_CNTX17_BUSY=5,
    GPUPE_RBBM_VGT_BUSY=6,
    GPUPE_RBBM_VGT_NODMA_BUSY=7,
    GPUPE_RBBM_PA_BUSY=8,
    GPUPE_RBBM_SC_CNTX0_BUSY=9,
    GPUPE_RBBM_SC_CNTX17_BUSY=10,
    GPUPE_RBBM_TPC_BUSY=11,
    GPUPE_RBBM_TC_BUSY=12,
    GPUPE_RBBM_SX_BUSY=13,
    GPUPE_RESERVED1=14,
    GPUPE_RBBM_CP_COHER_BUSY=15,
    GPUPE_RBBM_CP_NRT_BUSY=16,
    GPUPE_RESERVED2=17,
    GPUPE_RBBM_CP_DMA_BUSY=18,
    GPUPE_RESERVED3=19,
    GPUPE_RESERVED4=20,
    GPUPE_RESERVED5=21,
    GPUPE_RBBM_DMA_IDLE_STALL=22,
    GPUPE_RESERVED6=23,
    GPUPE_RESERVED7=24,
    GPUPE_RBBM_GFX_IDLE_STALL=25,
    GPUPE_RBBM_GFX_IDLEC_STALL=26,
    GPUPE_RBBM_INTERRUPT=27
};

enum _D3DXMESH
{
    D3DXMESH_32BIT=1,
    D3DXMESH_DONOTCLIP=2,
    D3DXMESH_POINTS=4,
    D3DXMESH_RTPATCHES=8,
    D3DXMESH_NPATCHES=16384,
    D3DXMESH_VB_SYSTEMMEM=16,
    D3DXMESH_VB_MANAGED=32,
    D3DXMESH_VB_WRITEONLY=64,
    D3DXMESH_VB_DYNAMIC=128,
    D3DXMESH_VB_SOFTWAREPROCESSING=32768,
    D3DXMESH_IB_SYSTEMMEM=256,
    D3DXMESH_IB_MANAGED=512,
    D3DXMESH_IB_WRITEONLY=1024,
    D3DXMESH_IB_DYNAMIC=2048,
    D3DXMESH_IB_SOFTWAREPROCESSING=65536,
    D3DXMESH_VB_SHARE=4096,
    D3DXMESH_USEHWONLY=8192,
    D3DXMESH_SYSTEMMEM=272,
    D3DXMESH_MANAGED=544,
    D3DXMESH_WRITEONLY=1088,
    D3DXMESH_DYNAMIC=2176,
    D3DXMESH_SOFTWAREPROCESSING=98304,
    D3DXMESH_VALIDBITS=118783,
    D3DXMESH_VALIDCLONEBITS=122879,
    D3DXMESH_VALIDBLENDEDBITS=126975
};

enum GPUPERFEVENT_BIF
{
    GPUPE_0=0,
    GPUPE_1=1,
    GPUPE_2=2,
    GPUPE_3=3,
    GPUPE_4=4,
    GPUPE_5=5
};

enum DCPERFEVENT
{
    GPUPE_DMIF_PER_DCREQ_EVENT=0,
    GPUPE_DMIF_PER_DCGRPH_REQ_EVENT=1,
    GPUPE_DMIF_PER_DCOVL_REQ_EVENT=2,
    GPUPE_DMIF_PER_DCREQ_SIZE_EVENT=3,
    GPUPE_DMIF_PER_DCGRPH_REQ_SIZE_EVENT=4,
    GPUPE_DMIF_PER_DCOVL_REQ_SIZE_EVENT=5,
    GPUPE_DMIF_PER_DCSURFACE_UPDATE_EVENT=6,
    GPUPE_DMIF_PER_DC_MH_REQ_EVENT=7,
    GPUPE_DMIF_PER_DC_MH_D1GRPH_REQ_EVENT=8,
    GPUPE_DMIF_PER_DC_MH_D1OVL_REQ_EVENT=9,
    GPUPE_DMIF_PER_DC_MH_REQ_SIZE_EVENT=10,
    GPUPE_DMIF_PER_DC_MH_D1GRPH_REQ_SIZE_EVENT=11,
    GPUPE_DMIF_PER_DC_MH_D1OVL_REQ_SIZE_EVENT=12,
    GPUPE_DMIF_PER_DC_MH_SURFACE_UPDATE_EVENT=13,
    GPUPE_DMIF_PER_MH_DC_RTR_EVENT=14,
    GPUPE_DMIF_PER_CMD_PROC_WAIT_RTR_STATE_EVENT=15,
    GPUPE_DMIF_PER_CMD_PROC_IDLE_STATE_EVENT=16,
    GPUPE_DMIF_PER_DC_MH_URGENT_EVENT=17,
    GPUPE_DMIF_PER_MH_DC_SEND_EVENT=18,
    GPUPE_DMIF_PER_MH_DC_SEND_D1GRPH_EVENT=19,
    GPUPE_DMIF_PER_MH_DC_SEND_D1OVL_EVENT=20,
    GPUPE_DMIF_PER_DC_MH_RTR_EVENT=21,
    GPUPE_DMIF_PER_DMIF_BUSY_EVENT=22,
    GPUPE_DMIF_PER_DMIF_BUSY_MH_DC_SEND_EVENT=23,
    GPUPE_DMIF_PER_DMIF_BUSY_DC_MH_RTR_EVENT=24,
    GPUPE_DMIF_PER_DMIF_DCSEND_EVENT=25,
    GPUPE_DMIF_PER_DMIF_DCNOT_RTS_EVENT=26,
    GPUPE_DMIF_PER_DCDMIF_NOT_RTR_EVENT=27,
    GPUPE_DCP_PER_LUT_HOST_RW_EVENT=28,
    GPUPE_DCP_PER_LUT_RW_BY_HOST_EVENT=29,
    GPUPE_DCP_PER_RTR_LOW_BY_LUT_HOST_RW_EVENT=30,
    GPUPE_DCCG_PER_SCLK_R_RBBMIF_CLOCK_ON_EVENT=31,
    GPUPE_DCCG_PER_SCLK_R_DISCLOCK_ON_EVENT=32,
    GPUPE_DCCG_PER_SCLK_G_SCL_CLOCK_ON_EVENT=33,
    GPUPE_DCCG_PER_SCLK_G_DCCLOCK_ON_EVENT=34,
    GPUPE_DCCG_PER_PCLK_CRTC_CLOCK_ON_EVENT=35,
    GPUPE_DCCG_PER_DVOACLK_C_CLOCK_ON_EVENT=36,
    GPUPE_DCCG_PER_DVOACLK_D_CLOCK_ON_EVENT=37,
    GPUPE_CRTC1_PER_START_LINE_EVENT=38,
    GPUPE_CRTC1_PER_HSYNC_A_EVENT=39,
    GPUPE_CRTC1_PER_VSYNC_A_EVENT=40,
    GPUPE_CRTC1_PER_H_DATA_ACTIVE_EVENT=41,
    GPUPE_CRTC1_PER_V_DATA_ACTIVE_EVENT=42,
    GPUPE_CRTC1_PER_DATA_ACTIVE_EVENT=43,
    GPUPE_CRTC1_PER_H_BLANK_EVENT=44,
    GPUPE_CRTC1_PER_V_BLANK_EVENT=45,
    GPUPE_CRTC1_PER_BLANK_EVENT=46,
    GPUPE_CRTC1_PER_INTERLACE_SELECT_EVENT=47,
    GPUPE_CRTC1_PER_STEREO_SELECT_EVENT=48,
    GPUPE_SCL1_PER_HOST_CONFLICT_EVENT=49,
    GPUPE_SCL1_PER_ADVANCE_FILTER_POS_EVENT=50,
    GPUPE_SCL1_PER_TAINC_EVENT=51,
    GPUPE_SCL1_PER_REQUEST_EOL_EVENT=52,
    GPUPE_SCL1_PER_V_COEF_PRELOAD_EVENT=53,
    GPUPE_SCL1_PER_EOL_EVENT=54,
    GPUPE_SCL1_PER_SOF_EVENT=55,
    GPUPE_LB_PER_DISP1_RESET_REQ_EVENT=56,
    GPUPE_LB_PER_DISP1_REQ_SEND_EVENT=57,
    GPUPE_LB_PER_DISP1_REQ_UNDERFLOW_EVENT=58,
    GPUPE_LB_PER_DISP1_DATA_UNDERFLOW_EVENT=59,
    GPUPE_LB_PER_DISP1_URGENT_EVENT=60,
    GPUPE_LB_PER_DISP1_VBLANK_STAT_EVENT=61,
    GPUPE_LB_PER_DISP1_VLINE_STAT_EVENT=62,
    GPUPE_DOUT_PER_SCL_DISP1_MODE_CHANGE_INTERRUPT_EVENT=63,
    GPUPE_DOUT_PER_LB_D1_VLINE_INTERRUPT_EVENT=64,
    GPUPE_DOUT_PER_LB_D1_VBLANK_INTERRUPT_EVENT=65,
    GPUPE_DOUT_PER_DISTIMER_INTERRUPT_EVENT=66,
    GPUPE_LOGIC1_EVENT=256
};

enum XMSG_FLAGS
{
    XMSG_FLAG_DISABLE_EDIT_RECIPIENTS=1
};

enum _D3DXSHCOMPRESSQUALITYTYPE
{
    D3DXSHCQUAL_FASTLOWQUALITY=1,
    D3DXSHCQUAL_SLOWHIGHQUALITY=2,
    D3DXSHCQUAL_FORCE_DWORD=2147483647
};

enum XCUSTOMACTION_FLAGS
{
    XCUSTOMACTION_FLAG_CLOSES_GUIDE=1,
    XCUSTOMACTION_FLAG_DELETES_MESSAGE=2
};

enum GPUPERFEVENT_SQ
{
    GPUPE_SQ_PIXEL_VECTORS_SUB=0,
    GPUPE_SQ_VERTEX_VECTORS_SUB=1,
    GPUPE_SQ_ALU0_ACTIVE_VTX_SIMD0=2,
    GPUPE_SQ_ALU1_ACTIVE_VTX_SIMD0=3,
    GPUPE_SQ_ALU0_ACTIVE_PIX_SIMD0=4,
    GPUPE_SQ_ALU1_ACTIVE_PIX_SIMD0=5,
    GPUPE_SQ_ALU0_ACTIVE_VTX_SIMD1=6,
    GPUPE_SQ_ALU1_ACTIVE_VTX_SIMD1=7,
    GPUPE_SQ_ALU0_ACTIVE_PIX_SIMD1=8,
    GPUPE_SQ_ALU1_ACTIVE_PIX_SIMD1=9,
    GPUPE_SQ_EXPORT_CYCLES=10,
    GPUPE_SQ_ALU_CST_WRITTEN=11,
    GPUPE_SQ_TEX_CST_WRITTEN=12,
    GPUPE_SQ_ALU_CST_STALL=13,
    GPUPE_SQ_ALU_TEX_STALL=14,
    GPUPE_SQ_INST_WRITTEN=15,
    GPUPE_SQ_BOOLEAN_WRITTEN=16,
    GPUPE_SQ_LOOPS_WRITTEN=17,
    GPUPE_SQ_PIXEL_SWAP_IN=18,
    GPUPE_SQ_PIXEL_SWAP_OUT=19,
    GPUPE_SQ_VERTEX_SWAP_IN=20,
    GPUPE_SQ_VERTEX_SWAP_OUT=21,
    GPUPE_SQ_ALU_VTX_INST_ISSUED=22,
    GPUPE_SQ_TEX_VTX_INST_ISSUED=23,
    GPUPE_SQ_VC_VTX_INST_ISSUED=24,
    GPUPE_SQ_CF_VTX_INST_ISSUED=25,
    GPUPE_SQ_ALU_PIX_INST_ISSUED=26,
    GPUPE_SQ_TEX_PIX_INST_ISSUED=27,
    GPUPE_SQ_VC_PIX_INST_ISSUED=28,
    GPUPE_SQ_CF_PIX_INST_ISSUED=29,
    GPUPE_SQ_ALU0_FIFO_EMPTY_SIMD0=30,
    GPUPE_SQ_ALU1_FIFO_EMPTY_SIMD0=31,
    GPUPE_SQ_ALU0_FIFO_EMPTY_SIMD1=32,
    GPUPE_SQ_ALU1_FIFO_EMPTY_SIMD1=33,
    GPUPE_SQ_ALU_NOPS=34,
    GPUPE_SQ_PRED_SKIP=35,
    GPUPE_SQ_SYNC_ALU_STALL_SIMD0_VTX=36,
    GPUPE_SQ_SYNC_ALU_STALL_SIMD1_VTX=37,
    GPUPE_SQ_SYNC_TEX_STALL_VTX=38,
    GPUPE_SQ_SYNC_VC_STALL_VTX=39,
    GPUPE_SQ_CONSTANTS_USED_SIMD0=40,
    GPUPE_SQ_CONSTANTS_SENT_SP_SIMD0=41,
    GPUPE_SQ_GPR_STALL_VTX=42,
    GPUPE_SQ_GPR_STALL_PIX=43,
    GPUPE_SQ_VTX_RS_STALL=44,
    GPUPE_SQ_PIX_RS_STALL=45,
    GPUPE_SQ_SX_PC_FULL=46,
    GPUPE_SQ_SX_EXP_BUFF_FULL=47,
    GPUPE_SQ_SX_POS_BUFF_FULL=48,
    GPUPE_SQ_INTERP_QUADS=49,
    GPUPE_SQ_INTERP_ACTIVE=50,
    GPUPE_SQ_IN_PIXEL_STALL=51,
    GPUPE_SQ_IN_VTX_STALL=52,
    GPUPE_SQ_VTX_CNT=53,
    GPUPE_SQ_VTX_16_VECTOR=54,
    GPUPE_SQ_VTX_32_VECTOR=55,
    GPUPE_SQ_VTX_48_VECTOR=56,
    GPUPE_SQ_PIXEL_16_VECTOR=57,
    GPUPE_SQ_PIXEL_32_VECTOR=58,
    GPUPE_SQ_PIXEL_48_VECTOR=59,
    GPUPE_SQ_CONSTANTS_USED_SIMD1=60,
    GPUPE_SQ_CONSTANTS_SENT_SP_SIMD1=61,
    GPUPE_SQ_SX_MEM_EXP_FULL=62,
    GPUPE_SQ_ALU0_ACTIVE_VTX_SIMD2=63,
    GPUPE_SQ_ALU1_ACTIVE_VTX_SIMD2=64,
    GPUPE_SQ_ALU0_ACTIVE_PIX_SIMD2=65,
    GPUPE_SQ_ALU1_ACTIVE_PIX_SIMD2=66,
    GPUPE_SQ_ALU0_ACTIVE_VTX_SIMD3=67,
    GPUPE_SQ_ALU1_ACTIVE_VTX_SIMD3=68,
    GPUPE_SQ_ALU0_ACTIVE_PIX_SIMD3=69,
    GPUPE_SQ_ALU1_ACTIVE_PIX_SIMD3=70,
    GPUPE_SQ_ALU0_FIFO_EMPTY_SIMD2=71,
    GPUPE_SQ_ALU1_FIFO_EMPTY_SIMD2=72,
    GPUPE_SQ_ALU0_FIFO_EMPTY_SIMD3=73,
    GPUPE_SQ_ALU1_FIFO_EMPTY_SIMD3=74,
    GPUPE_SQ_SYNC_ALU_STALL_SIMD2_VTX=75,
    GPUPE_SQ_SYNC_ALU_STALL_SIMD3_VTX=76,
    GPUPE_SQ_SYNC_ALU_STALL_SIMD0_PIX=77,
    GPUPE_SQ_SYNC_ALU_STALL_SIMD1_PIX=78,
    GPUPE_SQ_SYNC_ALU_STALL_SIMD2_PIX=79,
    GPUPE_SQ_SYNC_ALU_STALL_SIMD3_PIX=80,
    GPUPE_SQ_SYNC_TEX_STALL_PIX=81,
    GPUPE_SQ_SYNC_VC_STALL_PIX=82,
    GPUPE_SQ_CONSTANTS_USED_SIMD2=83,
    GPUPE_SQ_CONSTANTS_SENT_SP_SIMD2=84,
    GPUPE_SQ_CONSTANTS_USED_SIMD3=85,
    GPUPE_SQ_CONSTANTS_SENT_SP_SIMD3=86,
    GPUPE_SQ_ALU0_FIFO_FULL_SIMD0=87,
    GPUPE_SQ_ALU1_FIFO_FULL_SIMD0=88,
    GPUPE_SQ_ALU0_FIFO_FULL_SIMD1=89,
    GPUPE_SQ_ALU1_FIFO_FULL_SIMD1=90,
    GPUPE_SQ_ALU0_FIFO_FULL_SIMD2=91,
    GPUPE_SQ_ALU1_FIFO_FULL_SIMD2=92,
    GPUPE_SQ_ALU0_FIFO_FULL_SIMD3=93,
    GPUPE_SQ_ALU1_FIFO_FULL_SIMD3=94,
    GPUPE_VC_PERF_STATIC=95,
    GPUPE_VC_PERF_STALLED=96,
    GPUPE_VC_PERF_STARVED=97,
    GPUPE_VC_PERF_SEND=98,
    GPUPE_VC_PERF_ACTUAL_STARVED=99,
    GPUPE_PIXEL_THREAD_0_ACTIVE=100,
    GPUPE_VERTEX_THREAD_0_ACTIVE=101,
    GPUPE_PIXEL_THREAD_0_NUMBER=102,
    GPUPE_VERTEX_THREAD_0_NUMBER=103,
    GPUPE_VERTEX_EVENT_NUMBER=104,
    GPUPE_PIXEL_EVENT_NUMBER=105
};

enum _D3DXPATCHMESH
{
    D3DXPATCHMESH_DEFAULT=0
};

enum _D3DXMESHSIMP
{
    D3DXMESHSIMP_VERTEX=1,
    D3DXMESHSIMP_FACE=2,
    D3DXMESHSIMP_VALIDBITS=3
};

enum _D3DSAMPLERSTATETYPE
{
    D3DSAMP_ADDRESSU=0,
    D3DSAMP_ADDRESSV=4,
    D3DSAMP_ADDRESSW=8,
    D3DSAMP_BORDERCOLOR=12,
    D3DSAMP_MAGFILTER=16,
    D3DSAMP_MINFILTER=20,
    D3DSAMP_MIPFILTER=24,
    D3DSAMP_MIPMAPLODBIAS=28,
    D3DSAMP_MAXMIPLEVEL=32,
    D3DSAMP_MAXANISOTROPY=36,
    D3DSAMP_MAGFILTERZ=40,
    D3DSAMP_MINFILTERZ=44,
    D3DSAMP_SEPARATEZFILTERENABLE=48,
    D3DSAMP_MINMIPLEVEL=52,
    D3DSAMP_TRILINEARTHRESHOLD=56,
    D3DSAMP_ANISOTROPYBIAS=60,
    D3DSAMP_HGRADIENTEXPBIAS=64,
    D3DSAMP_VGRADIENTEXPBIAS=68,
    D3DSAMP_WHITEBORDERCOLORW=72,
    D3DSAMP_POINTBORDERENABLE=76,
    D3DSAMP_MAX=80,
    D3DSAMP_FORCE_DWORD=2147483647
};

enum _MAX_FVF_DECL_SIZE
{
    MAX_FVF_DECL_SIZE=65
};

enum _XSESSION_STATE
{
    XSESSION_STATE_LOBBY=0,
    XSESSION_STATE_REGISTRATION=1,
    XSESSION_STATE_INGAME=2,
    XSESSION_STATE_REPORTING=3,
    XSESSION_STATE_DELETED=4
};

enum _D3DTEXTUREFILTERTYPE
{
    D3DTEXF_NONE=2,
    D3DTEXF_POINT=0,
    D3DTEXF_LINEAR=1,
    D3DTEXF_ANISOTROPIC=4,
    D3DTEXF_FORCE_DWORD=2147483647
};

enum _D3DTRILINEARTHRESHOLD
{
    D3DTRILINEAR_IMMEDIATE=0,
    D3DTRILINEAR_ONESIXTH=1,
    D3DTRILINEAR_ONEFOURTH=2,
    D3DTRILINEAR_THREEEIGHTHS=3,
    D3DTRILINEAR_FORCE_DWORD=2147483647
};

enum _D3DDECLUSAGE
{
    D3DDECLUSAGE_POSITION=0,
    D3DDECLUSAGE_BLENDWEIGHT=1,
    D3DDECLUSAGE_BLENDINDICES=2,
    D3DDECLUSAGE_NORMAL=3,
    D3DDECLUSAGE_PSIZE=4,
    D3DDECLUSAGE_TEXCOORD=5,
    D3DDECLUSAGE_TANGENT=6,
    D3DDECLUSAGE_BINORMAL=7,
    D3DDECLUSAGE_TESSFACTOR=8,
    D3DDECLUSAGE_COLOR=10,
    D3DDECLUSAGE_FOG=11,
    D3DDECLUSAGE_DEPTH=12,
    D3DDECLUSAGE_SAMPLE=13
};

enum _D3DTAG
{
    D3DTAG_VERTEXSHADERCONSTANTS=16384,
    D3DTAG_PIXELSHADERCONSTANTS=81920,
    D3DTAG_FETCHCONSTANTS=204832,
    D3DTAG_VERTEXFETCHCONSTANTS=198202,
    D3DTAG_TEXTUREFETCHCONSTANTS=203296,
    D3DTAG_SHADERFLAGS=132139,
    D3DTAG_PIXELSHADER=131371,
    D3DTAG_VERTEXSHADER=131372,
    D3DTAG_ZPASSEDRAMMODE=131373,
    D3DTAG_HIZENABLE=131374,
    D3DTAG_MISCCONSTANTS=262663,
    D3DTAG_FLOWCONSTANTS=262407,
    D3DTAG_RESERVED0=262408,
    D3DTAG_DESTINATIONPACKET=135174,
    D3DTAG_SURFACEINFO=131334,
    D3DTAG_COLOR0INFO=131335,
    D3DTAG_DEPTHINFO=131336,
    D3DTAG_COLOR1INFO=131337,
    D3DTAG_COLOR2INFO=131338,
    D3DTAG_COLOR3INFO=131339,
    D3DTAG_COHERDESTBASE0=131340,
    D3DTAG_COHERDESTBASE1=131341,
    D3DTAG_COHERDESTBASE2=131342,
    D3DTAG_COHERDESTBASE3=131343,
    D3DTAG_COHERDESTBASE4=131344,
    D3DTAG_COHERDESTBASE5=131345,
    D3DTAG_COHERDESTBASE6=131346,
    D3DTAG_COHERDESTBASE7=131347,
    D3DTAG_SCREENSCISSORTL=131348,
    D3DTAG_SCREENSCISSORBR=131349,
    D3DTAG_WINDOWPACKET=262927,
    D3DTAG_WINDOWOFFSET=262415,
    D3DTAG_WINDOWSCISSORTL=262416,
    D3DTAG_WINDOWSCISSORBR=262417,
    D3DTAG_VALUESPACKET=136470,
    D3DTAG_MAXVTXINDX=131350,
    D3DTAG_MINVTXINDX=131351,
    D3DTAG_INDXOFFSET=131352,
    D3DTAG_MULTIPRIMIBRESETINDX=131353,
    D3DTAG_COLORMASK=131354,
    D3DTAG_BLENDRED=131355,
    D3DTAG_BLENDGREEN=131356,
    D3DTAG_BLENDBLUE=131357,
    D3DTAG_BLENDALPHA=131358,
    D3DTAG_UNUSED_VALUES0=131359,
    D3DTAG_UNUSED_VALUES1=131360,
    D3DTAG_UNUSED_VALUES2=131361,
    D3DTAG_STENCILREFMASKBF=131362,
    D3DTAG_STENCILREFMASK=131363,
    D3DTAG_ALPHAREF=131364,
    D3DTAG_VPORTXSCALE=131365,
    D3DTAG_VPORTXOFFSET=131366,
    D3DTAG_VPORTYSCALE=131367,
    D3DTAG_VPORTYOFFSET=131368,
    D3DTAG_VPORTZSCALE=131369,
    D3DTAG_VPORTZOFFSET=131370,
    D3DTAG_BLENDFACTOR=132123,
    D3DTAG_STENCILREFMASKS=131618,
    D3DTAG_PROGRAMPACKET=132399,
    D3DTAG_PROGRAMCONTROL=131375,
    D3DTAG_CONTEXTMISC=131376,
    D3DTAG_INTERPOLATORCONTROL=131377,
    D3DTAG_WRAPPING0=131378,
    D3DTAG_WRAPPING1=131379,
    D3DTAG_CONTROLPACKET=134196,
    D3DTAG_DEPTHCONTROL=131380,
    D3DTAG_BLENDCONTROL0=131381,
    D3DTAG_COLORCONTROL=131382,
    D3DTAG_HICONTROL=131383,
    D3DTAG_CLIPCONTROL=131384,
    D3DTAG_MODECONTROL=131385,
    D3DTAG_VTECONTROL=131386,
    D3DTAG_UNUSED_CONTROL0=131387,
    D3DTAG_EDRAMMODECONTROL=131388,
    D3DTAG_BLENDCONTROL1=131389,
    D3DTAG_BLENDCONTROL2=131390,
    D3DTAG_BLENDCONTROL3=131391,
    D3DTAG_TESSELLATORPACKET=201993,
    D3DTAG_POINTSIZE=196873,
    D3DTAG_POINTMINMAX=196874,
    D3DTAG_LINECONTROL=196875,
    D3DTAG_LINESTIPPLE=196876,
    D3DTAG_OUTPUTPATHCONTROL=196877,
    D3DTAG_HOSCONTROL=196878,
    D3DTAG_HOSMAXTESSLEVEL=196879,
    D3DTAG_HOSMINTESSLEVEL=196880,
    D3DTAG_HOSREUSEDEPTH=196881,
    D3DTAG_GROUPPRIMTYPE=196882,
    D3DTAG_GROUPFIRSTDECR=196883,
    D3DTAG_GROUPDECR=196884,
    D3DTAG_GROUPVECT0CONTROL=196885,
    D3DTAG_GROUPVECT1CONTROL=196886,
    D3DTAG_GROUPVECT0FMTCONTROL=196887,
    D3DTAG_GROUPVECT1FMTCONTROL=196888,
    D3DTAG_UNUSED_TESSELLATOR0=196889,
    D3DTAG_UNUSED_TESSELLATOR1=196890,
    D3DTAG_MPASSPSCONTROL=196891,
    D3DTAG_VIZQUERY=196892,
    D3DTAG_ENHANCE=196893,
    D3DTAG_MISCPACKET=271898,
    D3DTAG_SCLINECONTROL=262426,
    D3DTAG_AACONFIG=262427,
    D3DTAG_VTXCONTROL=262428,
    D3DTAG_GBVERTCLIPADJ=262429,
    D3DTAG_GBVERTDISCADJ=262430,
    D3DTAG_GBHORZCLIPADJ=262431,
    D3DTAG_GBHORZDISCADJ=262432,
    D3DTAG_VSCONST=262433,
    D3DTAG_PSCONST=262434,
    D3DTAG_DEBUGMISC0=262435,
    D3DTAG_DEBUGMISC1=262436,
    D3DTAG_UNUSED_MISC0=262437,
    D3DTAG_UNUSED_MISC1=262438,
    D3DTAG_UNUSED_MISC2=262439,
    D3DTAG_UNUSED_MISC3=262440,
    D3DTAG_UNUSED_MISC4=262441,
    D3DTAG_UNUSED_MISC5=262442,
    D3DTAG_UNUSED_MISC6=262443,
    D3DTAG_AAMASK=262444,
    D3DTAG_UNUSED_MISC7=262445,
    D3DTAG_UNUSED_MISC8=262446,
    D3DTAG_UNUSED_MISC9=262447,
    D3DTAG_VERTEXREUSEBLOCKCONTROL=262448,
    D3DTAG_OUTDEALLOCCONTROL=262449,
    D3DTAG_COPYCONTROL=262450,
    D3DTAG_COPYDESTBASE=262451,
    D3DTAG_COPYDESTPITCH=262452,
    D3DTAG_COPYDESTINFO=262453,
    D3DTAG_HICLEAR=262454,
    D3DTAG_DEPTHCLEAR=262455,
    D3DTAG_COLORCLEAR=262456,
    D3DTAG_COLORCLEARLO=262457,
    D3DTAG_COPYFUNC=262458,
    D3DTAG_COPYREF=262459,
    D3DTAG_COPYMASK=262460,
    D3DTAG_COPYSURFACESLICE=262461,
    D3DTAG_SAMPLECOUNTCONTROL=262462,
    D3DTAG_SAMPLECOUNTADDRESS=262463,
    D3DTAG_POINTPACKET=264210,
    D3DTAG_POLYOFFSETFRONTSCALE=262418,
    D3DTAG_POLYOFFSETFRONTOFFSET=262419,
    D3DTAG_POLYOFFSETBACKSCALE=262420,
    D3DTAG_POLYOFFSETBACKOFFSET=262421,
    D3DTAG_POINTXRAD=262422,
    D3DTAG_POINTYRAD=262423,
    D3DTAG_POINTCONSTANTSIZE=262424,
    D3DTAG_POINTCULLRAD=262425,
    D3DTAG_CLIPPLANES=263689,
    D3DTAG_CLIPPLANE0=262409,
    D3DTAG_CLIPPLANE1=262410,
    D3DTAG_CLIPPLANE2=262411,
    D3DTAG_CLIPPLANE3=262412,
    D3DTAG_CLIPPLANE4=262413,
    D3DTAG_CLIPPLANE5=262414,
    D3DTAG_TERMINATOR=262415
};

enum _D3DXEFFECTDEFAULTTYPE
{
    D3DXEDT_STRING=1,
    D3DXEDT_FLOATS=2,
    D3DXEDT_DWORD=3,
    D3DXEDT_FORCEDWORD=2147483647
};

enum _ACL_INFORMATION_CLASS
{
    AclRevisionInformation=1,
    AclSizeInformation=2
};

enum BIUPERFEVENT
{
    BIUPE_RECV_REQUESTS=0,
    BIUPE_RECV_RESPONSES=1,
    BIUPE_IOC_READS=2,
    BIUPE_IOC_WRITES=3,
    BIUPE_MEM_READS=4,
    BIUPE_MEM_WRITES=5,
    BIUPE_FSB_SYNCS=6,
    BIUPE_EIEIOS=7,
    BIUPE_EOIS=8,
    BIUPE_FLUSH_ACKS=9,
    BIUPE_REQUEST_READ_DATA_BYTES_8_BYTE_AND_LESS_TRANSFERS_DEPENDENT_ON_SECONDARY_CONTROL_REGISTER=10,
    BIUPE_REQUEST_READ_DATA_BYTES_16_BYTE_AND_MORE_TRANSFERS_DEPENDENT_ON_SECONDARY_CONTROL_REGISTER=11,
    BIUPE_REQUEST_WRITE_DATA_BYTES_8_BYTE_AND_LESS_TRANSFERS_DEPENDENT_ON_SECONDARY_CONTROL_REGISTER=12,
    BIUPE_REQUEST_WRITE_DATA_BYTES_16_BYTE_AND_MORE_TRANSFER_DEPENDENT_ON_SECONDARY_CONTROL_REGISTER=13,
    BIUPE_RESERVED0=14,
    BIUPE_XMIT_REQUESTS=15,
    BIUPE_XMIT_RESPONSES=16,
    BIUPE_READ128S=17,
    BIUPE_FLUSH_REQ_READS=18,
    BIUPE_FLUSH_REQ_WRITES=19,
    BIUPE_CPUWB=20,
    BIUPE_INTERRUPTS=21,
    BIUPE_RESPONSES_MC0=22,
    BIUPE_RESPONSES_MC1=23,
    BIUPE_RESPONSES_IOC_MST=24,
    BIUPE_MC0_RESPONSE_READ_DATA_BYTES_8_BYTE_AND_LESS_TRANSFERS_DEPENDENT_ON_SECONDARY_CONTROL_REGISTER_=25,
    BIUPE_MC0_RESPONSE_READ_DATA_BYTES_16_BYTE_AND_MORE_TRANSFERS_DEPENDENT_ON_SECONDARY_CONTROL_REGISTER_=26,
    BIUPE_MC1_RESPONSE_READ_DATA_BYTES_8_BYTE_AND_LESS_TRANSFERS_DEPENDENT_ON_SECONDARY_CONTROL_REGISTER_=27,
    BIUPE_MC1_RESPONSE_READ_DATA_BYTES_16_BYTE_AND_MORE_TRANSFERS_DEPENDENT_ON_SECONDARY_CONTROL_REGISTER_=28,
    BIUPE_IOC_MST_RESPONSE_READ_DATA_BYTES_8_BYTE_AND_LESS_TRANSFERS_DEPENDENT_ON_SECONDARY_CONTROL_REGISTER_=29,
    BIUPE_IOC_MST_RESPONSE_READ_DATA_BYTES_16_BYTE_AND_MORE_TRANSFERS_DEPENDENT_ON_SECONDARY_CONTROL_REGISTER_=30,
    BIUPE_RESERVED1A=31,
    BIUPE_RESERVED2A=32,
    BIUPE_RESERVED3A=33,
    BIUPE_RESERVED4A=34,
    BIUPE_RESERVED5A=35,
    BIUPE_RESERVED6A=36,
    BIUPE_RESERVED7A=37,
    BIUPE_RESERVED8A=38,
    BIUPE_RESERVED9A=39,
    BIUPE_REQUESTS=40,
    BIUPE_IOC_MAST_READS=41,
    BIUPE_IOC_MAST_WRITES=42,
    BIUPE_IOC_MAST_EOIS=43,
    BIUPE_IOC_MAST_REQUEST_READ_DATA_BYTES_8_BYTE_AND_LESS_TRANSFERS_DEPENDENT_ON_SECONDARY_CONTROL_REGISTER=44,
    BIUPE_IOC_MAST_REQUEST_READ_DATA_BYTES_16_BYTE_AND_MORE_TRANSFERS_DEPENDENT_ON_SECONDARY_CONTROL_REGISTER=45,
    BIUPE_IOC_MAST_REQUEST_WRITE_DATA_BYTES_8_BYTE_AND_LESS_TRANSFERS_DEPENDENT_ON_SECONDARY_CONTROL_REGISTER=46,
    BIUPE_IOC_MAST_REQUEST_WRITE_DATA_BYTES_16_BYTE_AND_MORE_TRANSFER_DEPENDENT_ON_SECONDARY_CONTROL_REGISTER=47,
    BIUPE_RESERVED10=48,
    BIUPE_RESERVED11=49,
    BIUPE_IOC_SLV_REQUESTS=50,
    BIUPE_IOC_SLV_SNOOP_READS=51,
    BIUPE_IOC_SLV_SNOOP_WRITES=52,
    BIUPE_IOC_SLV_INTERRUPTS=53,
    BIUPE_IOC_SLV_SYNCS=54,
    BIUPE_IOC_SLV_SNOOP_READS_NS=55,
    BIUPE_IOC_SLV_SNOOP_WRITES_NS=56,
    BIUPE_IOC_SLV_CPUWBS=57,
    BIUPE_IOC_SLV_REQUEST_READ_DATA_BYTES_DIVIDED_BY_4_DEPENDENT_ON_SECONDARY_CONTROL_REGISTER_=58,
    BIUPE_IOC_SLV_REQUEST_WRITE_DATA_BYTES_DIVIDED_BY_4_DEPENDENT_ON_SECONDARY_CONTROL_REGISTER_=59,
    BIUPE_IOC_SLV_RESPONSES_BEATS_=60,
    BIUPE_IOC_SLV_RESP_READ_DATA_BYTES_DIVIDED_BY_4_=61,
    BIUPE_IOC_SLV_SYNCCLEANS=62,
    BIUPE_RESERVED12=63,
    BIUPE_RESERVED13=64,
    BIUPE_RESERVED14=65,
    BIUPE_RESERVED15=66,
    BIUPE_RESERVED16=67,
    BIUPE_RESERVED17=68,
    BIUPE_RESERVED18=69,
    BIUPE_MC_0_FAST_PATH_CPU_READS=70,
    BIUPE_MC_0_ORDERED_CPU_PATH_READS=71,
    BIUPE_MC_0_ORDERED_CPU_PATH_WRITES=72,
    BIUPE_MC_0_ORDERED_IOC_PATH_READS=73,
    BIUPE_MC_0_ORDERED_IOC_PATH_WRITES=74,
    BIUPE_MC_0_SYNC_A=75,
    BIUPE_MC_0_SYNC_B=76,
    BIUPE_RESERVED19=77,
    BIUPE_RESERVED20=78,
    BIUPE_RESERVED21=79,
    BIUPE_MC_1_FAST_PATH_CPU_READS=80,
    BIUPE_MC_1_ORDERED_CPU_PATH_READS=81,
    BIUPE_MC_1_ORDERED_CPU_PATH_WRITES=82,
    BIUPE_MC_1_ORDERED_IOC_PATH_READS=83,
    BIUPE_MC_1_ORDERED_IOC_PATH_WRITES=84,
    BIUPE_MC_1_SYNC_A=85,
    BIUPE_MC_1_SYNC_B=86,
    BIUPE_MCQF_NEARFULL=100,
    BIUPE_MCQDF_NEARFULL=101,
    BIUPE_IMQF_NEARFULL=102,
    BIUPE_PSF_NEARFULL=103,
    BIUPE_M0SF_NEARFULL=104,
    BIUPE_M1SF_NEARFULL=105,
    BIUPE_IMSF_NEARFULL=106,
    BIUPE_IMSDF_NEARFULL=107,
    BIUPE_ISQF_NEARFULL=108,
    BIUPE_ISSF_NEARFULL=109,
    BIUPE_ISYF_NEARFULL=110,
    BIUPE_CPYF_NEARFULL=111,
    BIUPE_PQF_NEARFULL=112,
    BIUPE_TOTAL_MEMORY_LATENCY_FAST_READS_MUST_BE_DIVIDED_BY_MEM_READ_REQUESTS_FOR_AVERAGE_LATENCY=140,
    BIUPE_TOTAL_MEMORY_LATENCY_ORDERED_CPU_READS_MUST_BE_DIVIDED_BY_MEM_READ_REQUESTS_FOR_AVERAGE_LATENCY=141,
    BIUPE_TOTAL_MEMORY_LATENCY_ORDERED_IOC_READS_MUST_BE_DIVIDED_BY_MEM_READ_REQUESTS_FOR_AVERAGE_LATENCY=142,
    BIUPE_TOTAL_FLUSH_LATENCY_FOR_SNOOP_READS_MUST_BE_DIVIED_BY_FLUSH_REQUESTS_FOR_AVERAGE_LATENCY=143,
    BIUPE_TOTAL_FLUSH_LATENCY_FOR_SNOOP_WRITES_MUST_BE_DIVIED_BY_FLUSH_REQUESTS_FOR_AVERAGE_LATENCY=144,
    BIUPE_SNOOP_COMPLETION_BUFFER_FULL=145,
    BIUPE_RESERVED62=146,
    BIUPE_RESERVED63=147,
    BIUPE_RESERVED64=148,
    BIUPE_RESERVED65=149,
    BIUPE_MC0_SLOW_CREDIT_COUNT_IS_ZERO=150,
    BIUPE_MC1_SLOW_CREDIT_COUNT_IS_ZERO=151,
    BIUPE_MC0_FAST_CREDIT_COUNT_IS_ZERO=152,
    BIUPE_MC1_FAST_CREDIT_COUNT_IS_ZERO=153,
    BIUPE_RESERVED66=154,
    BIUPE_RESERVED67=155,
    BIUPE_FSB_SLV_REQ_STALL_FOR_COMMAND_CREDITS=156,
    BIUPE_FSB_SLV_REQ_STALL_FOR_DATA_CREDITS=157,
    BIUPE_FSB_PG_REQ_STALL_FOR_CMD_CREDITS=158,
    BIUPE_SCLK_COUNTS_SCLKS_IN_THE_MCLK_DOMAIN_=200,
    BIUPE_IOC_MASTER_REQ_STALL_BIU_HAS_DATA_BUT_IOC_NOT_READY_SCLK_DOMAIN_=201,
    BIUPE_IOC_SLAVE_RSP_STALL_SCLK_DOMAIN_=202,
    BIUPE_INCREMENT_BY_0_DISABLE_COUNT=252,
    BIUPE_INCREMENT_BY_1_USED_TO_COUNT_CLOCKS=253,
    BIUPE_INCREMENT_BY_63_USED_FOR_SIMULATION_TO_RAPIDLY_INCREMENT_COUNTER=254,
    BIUPE_OTHERS=255
};

enum _D3DDECLMETHOD
{
    D3DDECLMETHOD_DEFAULT=0,
    D3DDECLMETHOD_PARTIALU=1,
    D3DDECLMETHOD_PARTIALV=2,
    D3DDECLMETHOD_CROSSUV=3,
    D3DDECLMETHOD_UV=4,
    D3DDECLMETHOD_LOOKUP=5,
    D3DDECLMETHOD_LOOKUPPRESAMPLED=6
};

enum XPLAYERLIST_BUTTON_TYPE
{
    XPLAYERLIST_BUTTON_TYPE_TITLECUSTOM=0,
    XPLAYERLIST_BUTTON_TYPE_PLAYERREVIEW=1,
    XPLAYERLIST_BUTTON_TYPE_GAMEINVITE=2,
    XPLAYERLIST_BUTTON_TYPE_MESSAGE=3,
    XPLAYERLIST_BUTTON_TYPE_FRIENDREQUEST=4
};

enum _D3DDECLTYPE
{
    D3DDECLTYPE_FLOAT1=2917284,
    D3DDECLTYPE_FLOAT2=2892709,
    D3DDECLTYPE_FLOAT3=2761657,
    D3DDECLTYPE_FLOAT4=1713062,
    D3DDECLTYPE_INT1=2917281,
    D3DDECLTYPE_INT2=2892706,
    D3DDECLTYPE_INT4=1713059,
    D3DDECLTYPE_UINT1=2917025,
    D3DDECLTYPE_UINT2=2892450,
    D3DDECLTYPE_UINT4=1712803,
    D3DDECLTYPE_INT1N=2916769,
    D3DDECLTYPE_INT2N=2892194,
    D3DDECLTYPE_INT4N=1712547,
    D3DDECLTYPE_UINT1N=2916513,
    D3DDECLTYPE_UINT2N=2891938,
    D3DDECLTYPE_UINT4N=1712291,
    D3DDECLTYPE_D3DCOLOR=1583238,
    D3DDECLTYPE_UBYTE4=1712774,
    D3DDECLTYPE_BYTE4=1713030,
    D3DDECLTYPE_UBYTE4N=1712262,
    D3DDECLTYPE_BYTE4N=1712518,
    D3DDECLTYPE_SHORT2=2892633,
    D3DDECLTYPE_SHORT4=1712986,
    D3DDECLTYPE_USHORT2=2892377,
    D3DDECLTYPE_USHORT4=1712730,
    D3DDECLTYPE_SHORT2N=2892121,
    D3DDECLTYPE_SHORT4N=1712474,
    D3DDECLTYPE_USHORT2N=2891865,
    D3DDECLTYPE_USHORT4N=1712218,
    D3DDECLTYPE_UDEC3=2761351,
    D3DDECLTYPE_DEC3=2761607,
    D3DDECLTYPE_UDEC3N=2760839,
    D3DDECLTYPE_DEC3N=2761095,
    D3DDECLTYPE_UDEC4=1712775,
    D3DDECLTYPE_DEC4=1713031,
    D3DDECLTYPE_UDEC4N=1712263,
    D3DDECLTYPE_DEC4N=1712519,
    D3DDECLTYPE_UHEND3=2761360,
    D3DDECLTYPE_HEND3=2761616,
    D3DDECLTYPE_UHEND3N=2760848,
    D3DDECLTYPE_HEND3N=2761104,
    D3DDECLTYPE_UDHEN3=2761361,
    D3DDECLTYPE_DHEN3=2761617,
    D3DDECLTYPE_UDHEN3N=2760849,
    D3DDECLTYPE_DHEN3N=2761105,
    D3DDECLTYPE_FLOAT16_2=2892639,
    D3DDECLTYPE_FLOAT16_4=1712992,
    D3DDECLTYPE_UNUSED=-1
};

enum XPLAYERLIST_FLAGS
{
    XPLAYERLIST_FLAG_CUSTOMTEXT=1
};

enum XMARKETPLACE_OFFERING_TYPE
{
    XMARKETPLACE_OFFERING_TYPE_CONTENT=2,
    XMARKETPLACE_OFFERING_TYPE_GAME_DEMO=32,
    XMARKETPLACE_OFFERING_TYPE_GAME_TRAILER=64,
    XMARKETPLACE_OFFERING_TYPE_THEME=128,
    XMARKETPLACE_OFFERING_TYPE_TILE=2048,
    XMARKETPLACE_OFFERING_TYPE_ARCADE=8192,
    XMARKETPLACE_OFFERING_TYPE_VIDEO=16384,
    XMARKETPLACE_OFFERING_TYPE_CONSUMABLE=65536
};

enum _D3DXWELDEPSILONSFLAGS
{
    D3DXWELDEPSILONS_WELDALL=1,
    D3DXWELDEPSILONS_WELDPARTIALMATCHES=2,
    D3DXWELDEPSILONS_DONOTREMOVEVERTICES=4,
    D3DXWELDEPSILONS_DONOTSPLIT=8,
    D3DXWELDEPSILONS_VALIDBITS=15
};

enum _XSHOWMARKETPLACEUI_ENTRYPOINTS
{
    XSHOWMARKETPLACEUI_ENTRYPOINT_CONTENTLIST=0,
    XSHOWMARKETPLACEUI_ENTRYPOINT_CONTENTITEM=1,
    XSHOWMARKETPLACEUI_ENTRYPOINT_MEMBERSHIPLIST=2,
    XSHOWMARKETPLACEUI_ENTRYPOINT_MEMBERSHIPITEM=3,
    XSHOWMARKETPLACEUI_ENTRYPOINT_CONTENTLIST_BACKGROUND=4,
    XSHOWMARKETPLACEUI_ENTRYPOINT_CONTENTITEM_BACKGROUND=5,
    XSHOWMARKETPLACEUI_ENTRYPOINT_MAX=6
};

enum GPUPERFEVENT_VGT
{
    GPUPE_VGT_SQ_EVENT_WINDOW_ACTIVE=0,
    GPUPE_VGT_SQ_SEND=1,
    GPUPE_VGT_SQ_STALLED=2,
    GPUPE_VGT_SQ_STARVED_BUSY=3,
    GPUPE_VGT_SQ_STARVED_IDLE=4,
    GPUPE_VGT_SQ_STATIC=5,
    GPUPE_VGT_PA_EVENT_WINDOW_ACTIVE=6,
    GPUPE_VGT_PA_CLIP_V_SEND=7,
    GPUPE_VGT_PA_CLIP_V_STALLED=8,
    GPUPE_VGT_PA_CLIP_V_STARVED_BUSY=9,
    GPUPE_VGT_PA_CLIP_V_STARVED_IDLE=10,
    GPUPE_VGT_PA_CLIP_V_STATIC=11,
    GPUPE_VGT_PA_CLIP_P_SEND=12,
    GPUPE_VGT_PA_CLIP_P_STALLED=13,
    GPUPE_VGT_PA_CLIP_P_STARVED_BUSY=14,
    GPUPE_VGT_PA_CLIP_P_STARVED_IDLE=15,
    GPUPE_VGT_PA_CLIP_P_STATIC=16,
    GPUPE_VGT_PA_CLIP_S_SEND=17,
    GPUPE_VGT_PA_CLIP_S_STALLED=18,
    GPUPE_VGT_PA_CLIP_S_STARVED_BUSY=19,
    GPUPE_VGT_PA_CLIP_S_STARVED_IDLE=20,
    GPUPE_VGT_PA_CLIP_S_STATIC=21,
    GPUPE_RBIU_FIFOS_EVENT_WINDOW_ACTIVE=22,
    GPUPE_RBIU_IMMED_DATA_FIFO_STARVED=23,
    GPUPE_RBIU_IMMED_DATA_FIFO_STALLED=24,
    GPUPE_RBIU_DMA_REQUEST_FIFO_STARVED=25,
    GPUPE_RBIU_DMA_REQUEST_FIFO_STALLED=26,
    GPUPE_RBIU_DRAW_INITIATOR_FIFO_STARVED=27,
    GPUPE_RBIU_DRAW_INITIATOR_FIFO_STALLED=28,
    GPUPE_SPARE29=29,
    GPUPE_SPARE30=30,
    GPUPE_SPARE31=31,
    GPUPE_SPARE32=32,
    GPUPE_SPARE33=33,
    GPUPE_SPARE34=34,
    GPUPE_SPARE35=35,
    GPUPE_SPARE36=36,
    GPUPE_SPARE37=37,
    GPUPE_SPARE38=38,
    GPUPE_SPARE39=39,
    GPUPE_TE_SU_IN_VALID=40,
    GPUPE_TE_SU_IN_READ=41,
    GPUPE_TE_SU_IN_PRIM=42,
    GPUPE_TE_SU_IN_EOP=43,
    GPUPE_TE_SU_IN_NULL_PRIM=44,
    GPUPE_TE_WK_IN_VALID=45,
    GPUPE_TE_WK_IN_READ=46,
    GPUPE_TE_OUT_PRIM_VALID=47,
    GPUPE_TE_OUT_PRIM_READ=48
};

enum _AUDIT_EVENT_TYPE
{
    AuditEventObjectAccess=0,
    AuditEventDirectoryServiceAccess=1
};

enum _XSHOWMARKETPLACEDOWNLOADITEMSUI_ENTRYPOINTS
{
    XSHOWMARKETPLACEDOWNLOADITEMS_ENTRYPOINT_FREEITEMS=1000,
    XSHOWMARKETPLACEDOWNLOADITEMS_ENTRYPOINT_PAIDITEMS=1001,
    XSHOWMARKETPLACEDOWNLOADITEMS_ENTRYPOINT_MAX=1002
};

enum _D3DXERR
{
    D3DXERR_CANNOTMODIFYINDEXBUFFER=-2005529772,
    D3DXERR_INVALIDMESH=-2005529771,
    D3DXERR_CANNOTATTRSORT=-2005529770,
    D3DXERR_SKINNINGNOTSUPPORTED=-2005529769,
    D3DXERR_TOOMANYINFLUENCES=-2005529768,
    D3DXERR_INVALIDDATA=-2005529767,
    D3DXERR_LOADEDMESHASNODATA=-2005529766,
    D3DXERR_DUPLICATENAMEDFRAGMENT=-2005529765,
    D3DXERR_MICROCODEEMPTY=-2005529752,
    D3DXERR_MICROCODETOOBIG=-2005529751,
    D3DXERR_MICROCODEUNSUPPORTEDTARGET=-2005529750,
    D3DXERR_MICROCODEOPTIMIZERFAILED=-2005529749,
    D3DXERR_MICROCODETOOMANYLEVELS=-2005529748,
    D3DXERR_MICROCODETOOMANYREGS=-2005529747,
    D3DXERR_MICROCODETOOMANYCONSTS=-2005529746,
    D3DXERR_MICROCODETOOMANYRSINSTS=-2005529745,
    D3DXERR_MICROCODETOOMANYTEXINSTS=-2005529744,
    D3DXERR_MICROCODETOOMANYALUINSTS=-2005529743,
    D3DXERR_MICROCODETOOMANYCFINSTS=-2005529742,
    D3DXERR_MICROCODETOOMANYTOTALINSTS=-2005529741,
    D3DXERR_MICROCODETOOMANYCOMPILERLITERALS=-2005529740,
    D3DXERR_MICROCODE_DEFB_CONSTANT_OUT_OF_RANGE=-2005529739,
    D3DXERR_MICROCODE_DEFI_CONSTANT_OUT_OF_RANGE=-2005529738,
    D3DXERR_MICROCODE_DEF_CONSTANT_OUT_OF_RANGE=-2005529737,
    D3DXERR_MICROCODE_DEFB_CONSTANT_OUT_OF_ALPHA_PIXEL_SHADER_RANGE=-2005529736,
    D3DXERR_MICROCODE_DEFI_CONSTANT_OUT_OF_ALPHA_PIXEL_SHADER_RANGE=-2005529735,
    D3DXERR_MICROCODE_DEF_CONSTANT_OUT_OF_ALPHA_PIXEL_SHADER_RANGE=-2005529734,
    D3DXERR_MICROCODE_DEFB_CONSTANT_OUT_OF_ALPHA_VERTEX_SHADER_RANGE=-2005529733,
    D3DXERR_MICROCODE_DEFI_CONSTANT_OUT_OF_ALPHA_VERTEX_SHADER_RANGE=-2005529732,
    D3DXERR_MICROCODE_DEF_CONSTANT_OUT_OF_ALPHA_VERTEX_SHADER_RANGE=-2005529731,
    D3DXERR_MICROCODE_DUPLICATE_DEFB_CONSTANT=-2005529730,
    D3DXERR_MICROCODE_DUPLICATE_DEFI_CONSTANT=-2005529729,
    D3DXERR_MICROCODE_DUPLICATE_DEF_CONSTANT=-2005529728
};

enum _D3DSHADER_INSTRUCTION_OPCODE_TYPE
{
    D3DSIO_NOP=0,
    D3DSIO_MOV=1,
    D3DSIO_ADD=2,
    D3DSIO_SUB=3,
    D3DSIO_MAD=4,
    D3DSIO_MUL=5,
    D3DSIO_RCP=6,
    D3DSIO_RSQ=7,
    D3DSIO_DP3=8,
    D3DSIO_DP4=9,
    D3DSIO_MIN=10,
    D3DSIO_MAX=11,
    D3DSIO_SLT=12,
    D3DSIO_SGE=13,
    D3DSIO_EXP=14,
    D3DSIO_LOG=15,
    D3DSIO_LIT=16,
    D3DSIO_DST=17,
    D3DSIO_LRP=18,
    D3DSIO_FRC=19,
    D3DSIO_M4x4=20,
    D3DSIO_M4x3=21,
    D3DSIO_M3x4=22,
    D3DSIO_M3x3=23,
    D3DSIO_M3x2=24,
    D3DSIO_CALL=25,
    D3DSIO_CALLNZ=26,
    D3DSIO_LOOP=27,
    D3DSIO_RET=28,
    D3DSIO_ENDLOOP=29,
    D3DSIO_LABEL=30,
    D3DSIO_DCL=31,
    D3DSIO_POW=32,
    D3DSIO_CRS=33,
    D3DSIO_SGN=34,
    D3DSIO_ABS=35,
    D3DSIO_NRM=36,
    D3DSIO_SINCOS=37,
    D3DSIO_REP=38,
    D3DSIO_ENDREP=39,
    D3DSIO_IF=40,
    D3DSIO_IFC=41,
    D3DSIO_ELSE=42,
    D3DSIO_ENDIF=43,
    D3DSIO_BREAK=44,
    D3DSIO_BREAKC=45,
    D3DSIO_MOVA=46,
    D3DSIO_DEFB=47,
    D3DSIO_DEFI=48,
    D3DSIO_TEXCOORD=64,
    D3DSIO_TEXKILL=65,
    D3DSIO_TEX=66,
    D3DSIO_TEXBEM=67,
    D3DSIO_TEXBEML=68,
    D3DSIO_TEXREG2AR=69,
    D3DSIO_TEXREG2GB=70,
    D3DSIO_TEXM3x2PAD=71,
    D3DSIO_TEXM3x2TEX=72,
    D3DSIO_TEXM3x3PAD=73,
    D3DSIO_TEXM3x3TEX=74,
    D3DSIO_RESERVED0=75,
    D3DSIO_TEXM3x3SPEC=76,
    D3DSIO_TEXM3x3VSPEC=77,
    D3DSIO_EXPP=78,
    D3DSIO_LOGP=79,
    D3DSIO_CND=80,
    D3DSIO_DEF=81,
    D3DSIO_TEXREG2RGB=82,
    D3DSIO_TEXDP3TEX=83,
    D3DSIO_TEXM3x2DEPTH=84,
    D3DSIO_TEXDP3=85,
    D3DSIO_TEXM3x3=86,
    D3DSIO_TEXDEPTH=87,
    D3DSIO_CMP=88,
    D3DSIO_BEM=89,
    D3DSIO_DP2ADD=90,
    D3DSIO_DSX=91,
    D3DSIO_DSY=92,
    D3DSIO_TEXLDD=93,
    D3DSIO_SETP=94,
    D3DSIO_TEXLDL=95,
    D3DSIO_BREAKP=96,
    D3DSIO_PHASE=65533,
    D3DSIO_COMMENT=65534,
    D3DSIO_END=65535,
    D3DSIO_FORCE_DWORD=2147483647
};

enum _SECURITY_IMPERSONATION_LEVEL
{
    SecurityAnonymous=0,
    SecurityIdentification=1,
    SecurityImpersonation=2,
    SecurityDelegation=3
};

enum _TOKEN_TYPE
{
    TokenPrimary=1,
    TokenImpersonation=2
};

enum _XBACKGROUND_DOWNLOAD_MODE
{
    XBACKGROUND_DOWNLOAD_MODE_ALWAYS_ALLOW=1,
    XBACKGROUND_DOWNLOAD_MODE_AUTO=2
};

enum _TOKEN_INFORMATION_CLASS
{
    TokenUser=1,
    TokenGroups=2,
    TokenPrivileges=3,
    TokenOwner=4,
    TokenPrimaryGroup=5,
    TokenDefaultDacl=6,
    TokenSource=7,
    TokenType=8,
    TokenImpersonationLevel=9,
    TokenStatistics=10,
    TokenRestrictedSids=11,
    TokenSessionId=12
};

enum GPUENDIAN
{
    GPUENDIAN_NONE=0,
    GPUENDIAN_8IN16=1,
    GPUENDIAN_8IN32=2,
    GPUENDIAN_16IN32=3
};

enum GPUPERFEVENT_VC
{
    GPUPE_RG_VERTICES=0,
    GPUPE_RG_CLAMPED=1,
    GPUPE_RG_L2_REQUEST=2,
    GPUPE_RG_L1_REQUEST=3,
    GPUPE_RG_MEGAFETCH=4,
    GPUPE_RG_END_OF_GROUP=5,
    GPUPE_RG_CONFLICT=6,
    GPUPE_RG_DWORDS_REQUESTED=7,
    GPUPE_RG_SPARE0=8,
    GPUPE_RG_SPARE1=9,
    GPUPE_CC_STALLS=10,
    GPUPE_CC_HITS=11,
    GPUPE_CC_MISSES=12,
    GPUPE_CC_SECTOR_MISSES=13,
    GPUPE_CC_L2B_STALLS=14,
    GPUPE_CC_MI_STALLS=15,
    GPUPE_CC_MULTICYCLE_STALLS=16,
    GPUPE_CC_EVEN_ALLOC_STALLS=17,
    GPUPE_CC_ODD_ALLOC_STALLS=18,
    GPUPE_CC_EVEN_BUSY_STALLS=19,
    GPUPE_CC_ODD_BUSY_STALLS=20,
    GPUPE_CC_IN_FIFO_EMPTY=21,
    GPUPE_CC_IN_FIFO_FULL=22,
    GPUPE_CC_FREEZE=23,
    GPUPE_CC_SPARE0=24,
    GPUPE_CC_SPARE1=25,
    GPUPE_CC_SPARE2=26,
    GPUPE_CC_SPARE3=27,
    GPUPE_CC_SPARE4=28,
    GPUPE_CC_SPARE5=29,
    GPUPE_MI_REQUESTS_TO_MH=30,
    GPUPE_MI_AGP_REQUESTS=31,
    GPUPE_MI_LATENCY_BITS_4_0=32,
    GPUPE_MI_LATENCY_BITS_9_5=33,
    GPUPE_MI_LATENCY_BITS_14_10=34,
    GPUPE_MI_LATENCY_BITS_17_15=35,
    GPUPE_MI_INPUT_FIFOS_FULL=36,
    GPUPE_MI_INPUT_FIFOS_0_FULL=37,
    GPUPE_MI_INPUT_FIFOS_1_FULL=38,
    GPUPE_MI_SPARE1=39,
    GPUPE_RP_SP_DATA_VALID=40,
    GPUPE_RP_STALLED=41,
    GPUPE_RP_SPARE0=42,
    GPUPE_RP_SPARE1=43,
    GPUPE_RP_SPARE2=44,
    GPUPE_RP_SPARE3=45,
    GPUPE_RP_SPARE4=46,
    GPUPE_RP_SPARE5=47,
    GPUPE_RP_SPARE6=48,
    GPUPE_RP_SPARE7=49,
    GPUPE_DC_NUM_VALIDS=50,
    GPUPE_DC_SPARE0=51,
    GPUPE_DC_SPARE1=52,
    GPUPE_DC_SPARE2=53,
    GPUPE_DC_SPARE3=54,
    GPUPE_DC_SPARE4=55,
    GPUPE_DC_SPARE5=56,
    GPUPE_DC_SPARE6=57,
    GPUPE_DC_SPARE7=58,
    GPUPE_DC_SPARE8=59,
    GPUPE_SQ_VC_SEND=60,
    GPUPE_VC_STARVED_IDLE=61,
    GPUPE_VC_BUSY=62,
    GPUPE_VC_IDLE=63,
    GPUPE_VC_SPARE0=64,
    GPUPE_VC_SPARE1=65,
    GPUPE_VC_SPARE2=66,
    GPUPE_VC_SPARE3=67,
    GPUPE_VC_SPARE4=68,
    GPUPE_VC_SPARE5=69
};

enum GPUENDIAN128
{
    GPUENDIAN128_NONE=0,
    GPUENDIAN128_8IN16=1,
    GPUENDIAN128_8IN32=2,
    GPUENDIAN128_16IN32=3,
    GPUENDIAN128_8IN64=4,
    GPUENDIAN128_8IN128=5
};

enum vc_attributes::YesNoMaybe
{
    No=268369921,
    Maybe=268369936,
    Yes=268370176
};

enum vc_attributes::AccessType
{
    NoAccess=0,
    Read=1,
    Write=2,
    ReadWrite=3
};

enum GPUCOLORARRAY
{
    GPUCOLORARRAY_2D_COLOR=0,
    GPUCOLORARRAY_3D_SLICE_COLOR=1
};

enum XGENDIANTYPE
{
    XGENDIAN_NONE=0,
    XGENDIAN_8IN16=131073,
    XGENDIAN_8IN32=262145,
    XGENDIAN_16IN32=262146,
    XGENDIAN_8IN64=524289,
    XGENDIAN_16IN64=524290,
    XGENDIAN_32IN64=524292,
    XGENDIAN_8IN128=1048577,
    XGENDIAN_16IN128=1048578,
    XGENDIAN_32IN128=1048580,
    XGENDIAN_64IN128=1048584
};

enum GPUDEPTHARRAY
{
    GPUDEPTHARRAY_2D_ALT_DEPTH=0,
    GPUDEPTHARRAY_2D_DEPTH=1
};

enum GPUCOLORFORMAT
{
    GPUCOLORFORMAT_8=2,
    GPUCOLORFORMAT_1_5_5_5=3,
    GPUCOLORFORMAT_5_6_5=4,
    GPUCOLORFORMAT_6_5_5=5,
    GPUCOLORFORMAT_8_8_8_8=6,
    GPUCOLORFORMAT_2_10_10_10=7,
    GPUCOLORFORMAT_8_A=8,
    GPUCOLORFORMAT_8_B=9,
    GPUCOLORFORMAT_8_8=10,
    GPUCOLORFORMAT_8_8_8_8_A=14,
    GPUCOLORFORMAT_4_4_4_4=15,
    GPUCOLORFORMAT_10_11_11=16,
    GPUCOLORFORMAT_11_11_10=17,
    GPUCOLORFORMAT_16=24,
    GPUCOLORFORMAT_16_16=25,
    GPUCOLORFORMAT_16_16_16_16=26,
    GPUCOLORFORMAT_16_FLOAT=30,
    GPUCOLORFORMAT_16_16_FLOAT=31,
    GPUCOLORFORMAT_16_16_16_16_FLOAT=32,
    GPUCOLORFORMAT_32_FLOAT=36,
    GPUCOLORFORMAT_32_32_FLOAT=37,
    GPUCOLORFORMAT_32_32_32_32_FLOAT=38,
    GPUCOLORFORMAT_2_10_10_10_FLOAT=62
};

enum IOCPERFEVENT
{
    IOCPE_PERF_CYCLES_WAITING_FOR_REGISTER_BUS=0,
    IOCPE_PERF_CYCLES_WAITING_FOR_BIU_SLV_REQ=1,
    IOCPE_PERF_CYCLES_WAITING_FOR_BIU_MST_CPL=2,
    IOCPE_PERF_CYCLES_WAITING_FOR_BSB_MST_REQ=3,
    IOCPE_PERF_CYCLES_WAITING_FOR_MH_SLV_REQ=4,
    IOCPE_PERF_BSB_SLV_REQ_TOTAL_REQUESTS=5,
    IOCPE_PERF_BSB_SLV_REQ_TOTAL_READS=6,
    IOCPE_PERF_BSB_SLV_REQ_TOTAL_WRITES=7,
    IOCPE_PERF_BSB_SLV_REQ_SNOOPED_READS=8,
    IOCPE_PERF_BSB_SLV_REQ_SNOOPED_WRITES=9,
    IOCPE_PERF_BSB_SLV_REQ_NON_SNOOPED_READS=10,
    IOCPE_PERF_BSB_SLV_REQ_NON_SNOOPED_WRITES=11,
    IOCPE_PERF_BSB_SLV_REQ_INTERRUPTS=12,
    IOCPE_PERF_BSB_SLV_REQ_TOTAL_REQUESTS_DWORDS=13,
    IOCPE_PERF_BSB_SLV_REQ_TOTAL_READS_DWORDS=14,
    IOCPE_PERF_BSB_SLV_REQ_TOTAL_WRITES_DWORDS=15,
    IOCPE_PERF_BSB_SLV_REQ_SNOOPED_READS_DWORDS=16,
    IOCPE_PERF_BSB_SLV_REQ_SNOOPED_WRITES_DWORDS=17,
    IOCPE_PERF_BSB_SLV_REQ_NON_SNOOPED_READS_DWORDS=18,
    IOCPE_PERF_BSB_SLV_REQ_NON_SNOOPED_WRITES_DWORDS=19,
    IOCPE_PERF_BSB_SLV_READ_LATENCY_CYCLES=20,
    IOCPE_PERF_BSB_SLV_CPL_TOTAL_READ_COMPLETIONS=21,
    IOCPE_PERF_BSB_SLV_CPL_SNOOPED_READ_COMPLETIONS=22,
    IOCPE_PERF_BSB_SLV_CPL_NON_SNOOPED_READ_COMPLETIONS=23,
    IOCPE_PERF_BSB_SLV_CPL_TOTAL_READ_COMPLETIONS_DWORDS=24,
    IOCPE_PERF_BSB_SLV_CPL_SNOOPED_READ_COMPLETIONS_DWORDS=25,
    IOCPE_PERF_BSB_SLV_CPL_NON_SNOOPED_READ_COMPLETIONS_DWORDS=26,
    IOCPE_PERF_BSB_SLV_CPL_URS=27,
    IOCPE_PERF_BIF_SLV_REQ_TOTAL_REQUESTS=28,
    IOCPE_PERF_BIF_SLV_REQ_TOTAL_CP_WRITEBACKS=29,
    IOCPE_PERF_BIF_SLV_REQ_TOTAL_SNOOPED_WRITES=30,
    IOCPE_PERF_BSB_MST_REQ_TOTAL_REQUESTS=31,
    IOCPE_PERF_BSB_MST_REQ_TOTAL_READS=32,
    IOCPE_PERF_BSB_MST_REQ_TOTAL_WRITES=33,
    IOCPE_PERF_BSB_MST_REQ_TOTAL_REQUESTS_DWORDS=34,
    IOCPE_PERF_BSB_MST_REQ_TOTAL_READS_DWORDS=35,
    IOCPE_PERF_BSB_MST_REQ_TOTAL_WRITES_DWORDS=36,
    IOCPE_PERF_BSB_MST_CPL_TOTAL_COMPLETIONS=37,
    IOCPE_PERF_BSB_MST_CPL_TOTAL_COMPLETIONS_DWORDS=38,
    IOCPE_PERF_REG_BUS_REQ_TOTAL_REQUESTS=39,
    IOCPE_PERF_REG_BUS_REQ_TOTAL_READS=40,
    IOCPE_PERF_REG_BUS_REQ_TOTAL_WRITES=41,
    IOCPE_PERF_REG_BUS_CPL_READ_COMPLETIONS=42,
    IOCPE_PERF_TOTAL_SYNCS_ISSUED=43,
    IOCPE_PERF_BIU_SYNCS_ISSUED=44,
    IOCPE_PERF_MH_SYNCS_ISSUED=45,
    IOCPE_PERF_TOTAL_SYNCS_RECEIVED=46,
    IOCPE_PERF_BIU_SYNCS_RECEIVED=47,
    IOCPE_PERF_MH_SYNCS_RECEIVED=48,
    IOCPE_PERF_FIFO_BSB_MST_REQ_FULL=49,
    IOCPE_PERF_FIFO_BSB_MST_REQ_EMPTY=50,
    IOCPE_PERF_FIFO_SYNC_FULL=51,
    IOCPE_PERF_FIFO_SYNC_EMPTY=52,
    IOCPE_PERF_FIFO_INTERRUPT_FULL=53,
    IOCPE_PERF_FIFO_INTERRUPT_EMPTY=54,
    IOCPE_PERF_FIFO_REG_FULL=55,
    IOCPE_PERF_FIFO_REG_EMPTY=56,
    IOCPE_PERF_FIFO_BIU_SLV_CPL_NEARFULL=57,
    IOCPE_PERF_FIFO_BIU_SLV_CPL_EMPTY=58,
    IOCPE_PERF_FIFO_MH_SLV_CPL_FULL=59,
    IOCPE_PERF_FIFO_MH_SLV_CPL_EMPTY=60,
    IOCPE_PERF_FIFO_BSB_SLV_REQ_NEARFULL=61,
    IOCPE_PERF_FIFO_BSB_SLV_REQ_EMPTY=62,
    IOCPE_PERF_FIFO_BSB_MST_CPL_NEARFULL=63,
    IOCPE_PERF_FIFO_BSB_MST_CPL_EMPTY=64,
    IOCPE_PERF_FIFO_BIU_MST_REQ_NEARFULL=65,
    IOCPE_PERF_FIFO_BIU_MST_REQ_EMPTY=66,
    IOCPE_PERF_FIFO_BIF_SLV_REQ_NEARFULL=67,
    IOCPE_PERF_FIFO_BIF_SLV_REQ_EMPTY=68,
    IOCPE_PERF_FIFO_READ_LATENCY_FULL=69,
    IOCPE_PERF_FIFO_READ_LATENCY_EMPTY=70,
    IOCPE_PERF_NUMBER_OF_SYSTEM_CLOCKS=71,
    IOCPE_PERF_ZERO_COUNT=72,
    IOCPE_PERF_SIXTY_THREE_COUNT=73,
    IOCPE_PERF_BIU_SPARE=74,
    IOCPE_PERF_BSB_SLV_REQ_MESSAGES=75,
    IOCPE_PERF_BSB_MST_REQ_CONFIG_READS=76,
    IOCPE_PERF_BSB_MST_REQ_CONFIG_WRITES=77,
    IOCPE_PERF_BSB_MST_REQ_POSTED_WRITES=78,
    IOCPE_PERF_BSB_MST_REQ_POSTED_WRITES_DWORDS=79,
    IOCPE_PERF_BSB_MST_CPL_NON_POSTED_WRITES=80,
    IOCPE_PERF_CYCLES_WAITING_FOR_INT_SYNC=81,
    IOCPE_PERF_CYCLES_WAITING_FOR_INT_SYNC_SNOOP_PATH=82,
    IOCPE_PERF_CYCLES_WAITING_FOR_INT_SYNC_NON_SNOOP_PATH=83,
    IOCPE_PERF_CYCLES_WAITING_FOR_INT_SYNC_BOTH_PATHS=84,
    IOCPE_PERF_CYCLES_WAITING_FOR_MST_RD_CPL_SYNC=85,
    IOCPE_PERF_CYCLES_WAITING_FOR_MST_RD_CPL_SYNC_SNOOP_PATH=86,
    IOCPE_PERF_CYCLES_WAITING_FOR_MST_RD_CPL_SYNC_NON_SNOOP_PATH=87,
    IOCPE_PERF_CYCLES_WAITING_FOR_MST_RD_CPL_SYNC_BOTH_PATHS=88,
    IOCPE_PERF_CYCLES_WAITING_FOR_NSR_PASS_SW=89,
    IOCPE_PERF_CYCLES_WAITING_FOR_SR_PASS_NSW=90,
    IOCPE_PERF_CYCLES_WAITING_FOR_NSW_PASS_SW=91,
    IOCPE_PERF_CYCLES_WAITING_FOR_SW_PASS_NSW=92,
    IOCPE_PERF_FIFO_MST_CPL_SYNC_TYPE_FIFO_FULL=93,
    IOCPE_PERF_FIFO_MST_CPL_SYNC_TYPE_FIFO_EMPTY=94,
    IOCPE_PERF_FIFO_BSB_SNOOP_SLV_REQ_FULL=95,
    IOCPE_PERF_FIFO_BSB_SNOOP_SLV_REQ_EMPTY=96,
    IOCPE_PERF_FIFO_BSB_SNOOP_SLV_REQ_DATA_FULL=97,
    IOCPE_PERF_FIFO_BSB_SNOOP_SLV_REQ_DATA_EMPTY=98,
    IOCPE_PERF_FIFO_READ_LATENCY_BAD_REQ_FULL=99,
    IOCPE_PERF_FIFO_READ_LATENCY_BAD_REQ_EMPTY=100,
    IOCPE_PERF_FIFO_READ_LATENCY_NON_SNOOP_CAM_ADDRESS_FULL=101,
    IOCPE_PERF_FIFO_READ_LATENCY_NON_SNOOP_CAM_ADDRESS_EMPTY=102
};

enum _XALLOC_ALLOCATOR_IDS
{
    eXALLOCAllocatorId_GameMin=0,
    eXALLOCAllocatorId_GameMax=127,
    eXALLOCAllocatorId_MsReservedMin=128,
    eXALLOCAllocatorId_D3D=128,
    eXALLOCAllocatorId_D3DX=129,
    eXALLOCAllocatorId_XAUDIO=130,
    eXALLOCAllocatorId_XAPI=131,
    eXALLOCAllocatorId_XACT=132,
    eXALLOCAllocatorId_XBOXKERNEL=133,
    eXALLOCAllocatorId_XBDM=134,
    eXALLOCAllocatorId_XGRAPHICS=135,
    eXALLOCAllocatorId_XONLINE=136,
    eXALLOCAllocatorId_XVOICE=137,
    eXALLOCAllocatorId_XHV=138,
    eXALLOCAllocatorId_USB=139,
    eXALLOCAllocatorId_XMV=140,
    eXALLOCAllocatorId_SHADERCOMPILER=141,
    eXALLOCAllocatorId_XUI=142,
    eXALLOCAllocatorId_XASYNC=143,
    eXALLOCAllocatorId_XCAM=144,
    eXALLOCAllocatorId_XVIS=145,
    eXALLOCAllocatorId_XIME=146,
    eXALLOCAllocatorId_XFILECACHE=147,
    eXALLOCAllocatorId_XRN=148,
    eXALLOCAllocatorID_XMCORE=149,
    eXALLOCAllocatorID_XMASSIVE=150,
    eXALLOCAllocatorId_XAUDIO2=151,
    eXALLOCAllocatorId_XAVATAR=152,
    eXALLOCAllocatorId_XLSP=153,
    eXALLOCAllocatorId_D3DAlloc=154,
    eXALLOCAllocatorId_MsReservedMax=191,
    eXALLOCAllocatorId_MiddlewareReservedMin=192,
    eXALLOCAllocatorId_MiddlewareReservedMax=255
};

enum _D3DXIMAGE_FILEFORMAT
{
    D3DXIFF_BMP=0,
    D3DXIFF_JPG=1,
    D3DXIFF_TGA=2,
    D3DXIFF_PNG=3,
    D3DXIFF_DDS=4,
    D3DXIFF_PPM=5,
    D3DXIFF_DIB=6,
    D3DXIFF_HDR=7,
    D3DXIFF_PFM=8,
    D3DXIFF_FORCE_DWORD=2147483647
};

enum GPUTEXTUREFORMAT
{
    GPUTEXTUREFORMAT_1_REVERSE=0,
    GPUTEXTUREFORMAT_1=1,
    GPUTEXTUREFORMAT_8=2,
    GPUTEXTUREFORMAT_1_5_5_5=3,
    GPUTEXTUREFORMAT_5_6_5=4,
    GPUTEXTUREFORMAT_6_5_5=5,
    GPUTEXTUREFORMAT_8_8_8_8=6,
    GPUTEXTUREFORMAT_2_10_10_10=7,
    GPUTEXTUREFORMAT_8_A=8,
    GPUTEXTUREFORMAT_8_B=9,
    GPUTEXTUREFORMAT_8_8=10,
    GPUTEXTUREFORMAT_Cr_Y1_Cb_Y0_REP=11,
    GPUTEXTUREFORMAT_Y1_Cr_Y0_Cb_REP=12,
    GPUTEXTUREFORMAT_16_16_EDRAM=13,
    GPUTEXTUREFORMAT_8_8_8_8_A=14,
    GPUTEXTUREFORMAT_4_4_4_4=15,
    GPUTEXTUREFORMAT_10_11_11=16,
    GPUTEXTUREFORMAT_11_11_10=17,
    GPUTEXTUREFORMAT_DXT1=18,
    GPUTEXTUREFORMAT_DXT2_3=19,
    GPUTEXTUREFORMAT_DXT4_5=20,
    GPUTEXTUREFORMAT_16_16_16_16_EDRAM=21,
    GPUTEXTUREFORMAT_24_8=22,
    GPUTEXTUREFORMAT_24_8_FLOAT=23,
    GPUTEXTUREFORMAT_16=24,
    GPUTEXTUREFORMAT_16_16=25,
    GPUTEXTUREFORMAT_16_16_16_16=26,
    GPUTEXTUREFORMAT_16_EXPAND=27,
    GPUTEXTUREFORMAT_16_16_EXPAND=28,
    GPUTEXTUREFORMAT_16_16_16_16_EXPAND=29,
    GPUTEXTUREFORMAT_16_FLOAT=30,
    GPUTEXTUREFORMAT_16_16_FLOAT=31,
    GPUTEXTUREFORMAT_16_16_16_16_FLOAT=32,
    GPUTEXTUREFORMAT_32=33,
    GPUTEXTUREFORMAT_32_32=34,
    GPUTEXTUREFORMAT_32_32_32_32=35,
    GPUTEXTUREFORMAT_32_FLOAT=36,
    GPUTEXTUREFORMAT_32_32_FLOAT=37,
    GPUTEXTUREFORMAT_32_32_32_32_FLOAT=38,
    GPUTEXTUREFORMAT_32_AS_8=39,
    GPUTEXTUREFORMAT_32_AS_8_8=40,
    GPUTEXTUREFORMAT_16_MPEG=41,
    GPUTEXTUREFORMAT_16_16_MPEG=42,
    GPUTEXTUREFORMAT_8_INTERLACED=43,
    GPUTEXTUREFORMAT_32_AS_8_INTERLACED=44,
    GPUTEXTUREFORMAT_32_AS_8_8_INTERLACED=45,
    GPUTEXTUREFORMAT_16_INTERLACED=46,
    GPUTEXTUREFORMAT_16_MPEG_INTERLACED=47,
    GPUTEXTUREFORMAT_16_16_MPEG_INTERLACED=48,
    GPUTEXTUREFORMAT_DXN=49,
    GPUTEXTUREFORMAT_8_8_8_8_AS_16_16_16_16=50,
    GPUTEXTUREFORMAT_DXT1_AS_16_16_16_16=51,
    GPUTEXTUREFORMAT_DXT2_3_AS_16_16_16_16=52,
    GPUTEXTUREFORMAT_DXT4_5_AS_16_16_16_16=53,
    GPUTEXTUREFORMAT_2_10_10_10_AS_16_16_16_16=54,
    GPUTEXTUREFORMAT_10_11_11_AS_16_16_16_16=55,
    GPUTEXTUREFORMAT_11_11_10_AS_16_16_16_16=56,
    GPUTEXTUREFORMAT_32_32_32_FLOAT=57,
    GPUTEXTUREFORMAT_DXT3A=58,
    GPUTEXTUREFORMAT_DXT5A=59,
    GPUTEXTUREFORMAT_CTX1=60,
    GPUTEXTUREFORMAT_DXT3A_AS_1_1_1_1=61,
    GPUTEXTUREFORMAT_8_8_8_8_GAMMA_EDRAM=62,
    GPUTEXTUREFORMAT_2_10_10_10_FLOAT_EDRAM=63
};

enum _D3DFHZS_FLUSHTYPE
{
    D3DFHZS_ASYNCHRONOUS=0,
    D3DFHZS_SYNCHRONOUS=1
};

enum _D3DSHADER_COMPARISON
{
    D3DSPC_RESERVED0=0,
    D3DSPC_GT=1,
    D3DSPC_EQ=2,
    D3DSPC_GE=3,
    D3DSPC_LT=4,
    D3DSPC_NE=5,
    D3DSPC_LE=6,
    D3DSPC_RESERVED1=7
};

enum D3D::MIPPACKINGTYPE
{
    MIPPACKING_DISABLED=0,
    MIPPACKING_ENABLED=1,
    MIPPACKING_DEFAULT=2
};

enum GPUPERFEVENT_PA_SU
{
    GPUPE_PERF_PAPC_PASX_REQ=0,
    GPUPE_PERF_PAPC_PASX_DISABLE_PIPE=1,
    GPUPE_PERF_PAPC_PASX_FIRST_VECTOR=2,
    GPUPE_PERF_PAPC_PASX_SECOND_VECTOR=3,
    GPUPE_PERF_PAPC_PASX_FIRST_DEAD=4,
    GPUPE_PERF_PAPC_PASX_SECOND_DEAD=5,
    GPUPE_PERF_PAPC_PASX_VTX_KILL_DISCARD=6,
    GPUPE_PERF_PAPC_PASX_VTX_NAN_DISCARD=7,
    GPUPE_PERF_PAPC_PA_INPUT_PRIM=8,
    GPUPE_PERF_PAPC_PA_INPUT_NULL_PRIM=9,
    GPUPE_PERF_PAPC_PA_INPUT_EVENT_FLAG=10,
    GPUPE_PERF_PAPC_PA_INPUT_FIRST_PRIM_SLOT=11,
    GPUPE_PERF_PAPC_PA_INPUT_END_OF_PACKET=12,
    GPUPE_PERF_PAPC_CLPR_CULL_PRIM=13,
    GPUPE_PERF_PAPC_CLPR_VVUCP_CULL_PRIM=14,
    GPUPE_PERF_PAPC_CLPR_VV_CULL_PRIM=15,
    GPUPE_PERF_PAPC_CLPR_UCP_CULL_PRIM=16,
    GPUPE_PERF_PAPC_CLPR_VTX_KILL_CULL_PRIM=17,
    GPUPE_PERF_PAPC_CLPR_VTX_NAN_CULL_PRIM=18,
    GPUPE_PERF_PAPC_CLPR_CULL_TO_NULL_PRIM=19,
    GPUPE_PERF_PAPC_CLPR_VVUCP_CLIP_PRIM=20,
    GPUPE_PERF_PAPC_CLPR_VV_CLIP_PRIM=21,
    GPUPE_PERF_PAPC_CLPR_UCP_CLIP_PRIM=22,
    GPUPE_PERF_PAPC_CLPR_POINT_CLIP_CANDIDATE=23,
    GPUPE_PERF_PAPC_CLPR_CLIP_PLANE_CNT_1=24,
    GPUPE_PERF_PAPC_CLPR_CLIP_PLANE_CNT_2=25,
    GPUPE_PERF_PAPC_CLPR_CLIP_PLANE_CNT_3=26,
    GPUPE_PERF_PAPC_CLPR_CLIP_PLANE_CNT_4=27,
    GPUPE_PERF_PAPC_CLPR_CLIP_PLANE_CNT_5_8=28,
    GPUPE_PERF_PAPC_CLPR_CLIP_PLANE_CNT_9_12=29,
    GPUPE_PERF_PAPC_CLPR_CLIP_PLANE_NEAR=30,
    GPUPE_PERF_PAPC_CLPR_CLIP_PLANE_FAR=31,
    GPUPE_PERF_PAPC_CLPR_CLIP_PLANE_LEFT=32,
    GPUPE_PERF_PAPC_CLPR_CLIP_PLANE_RIGHT=33,
    GPUPE_PERF_PAPC_CLPR_CLIP_PLANE_TOP=34,
    GPUPE_PERF_PAPC_CLPR_CLIP_PLANE_BOTTOM=35,
    GPUPE_PERF_PAPC_CLSM_NULL_PRIM=36,
    GPUPE_PERF_PAPC_CLSM_TOTALLY_VISIBLE_PRIM=37,
    GPUPE_PERF_PAPC_CLSM_CLIP_PRIM=38,
    GPUPE_PERF_PAPC_CLSM_CULL_TO_NULL_PRIM=39,
    GPUPE_PERF_PAPC_CLSM_OUT_PRIM_CNT_1=40,
    GPUPE_PERF_PAPC_CLSM_OUT_PRIM_CNT_2=41,
    GPUPE_PERF_PAPC_CLSM_OUT_PRIM_CNT_3=42,
    GPUPE_PERF_PAPC_CLSM_OUT_PRIM_CNT_4=43,
    GPUPE_PERF_PAPC_CLSM_OUT_PRIM_CNT_5_8=44,
    GPUPE_PERF_PAPC_CLSM_OUT_PRIM_CNT_9_13=45,
    GPUPE_PERF_PAPC_CLSM_NON_TRIVIAL_CULL=46,
    GPUPE_PERF_PAPC_SU_INPUT_PRIM=47,
    GPUPE_PERF_PAPC_SU_INPUT_CLIP_PRIM=48,
    GPUPE_PERF_PAPC_SU_INPUT_NULL_PRIM=49,
    GPUPE_PERF_PAPC_SU_ZERO_AREA_CULL_PRIM=50,
    GPUPE_PERF_PAPC_SU_BACK_FACE_CULL_PRIM=51,
    GPUPE_PERF_PAPC_SU_FRONT_FACE_CULL_PRIM=52,
    GPUPE_PERF_PAPC_SU_POLYMODE_FACE_CULL=53,
    GPUPE_PERF_PAPC_SU_POLYMODE_BACK_CULL=54,
    GPUPE_PERF_PAPC_SU_POLYMODE_FRONT_CULL=55,
    GPUPE_PERF_PAPC_SU_POLYMODE_INVALID_FILL=56,
    GPUPE_PERF_PAPC_SU_OUTPUT_PRIM=57,
    GPUPE_PERF_PAPC_SU_OUTPUT_CLIP_PRIM=58,
    GPUPE_PERF_PAPC_SU_OUTPUT_NULL_PRIM=59,
    GPUPE_PERF_PAPC_SU_OUTPUT_EVENT_FLAG=60,
    GPUPE_PERF_PAPC_SU_OUTPUT_FIRST_PRIM_SLOT=61,
    GPUPE_PERF_PAPC_SU_OUTPUT_END_OF_PACKET=62,
    GPUPE_PERF_PAPC_SU_OUTPUT_POLYMODE_FACE=63,
    GPUPE_PERF_PAPC_SU_OUTPUT_POLYMODE_BACK=64,
    GPUPE_PERF_PAPC_SU_OUTPUT_POLYMODE_FRONT=65,
    GPUPE_PERF_PAPC_SU_OUT_CLIP_POLYMODE_FACE=66,
    GPUPE_PERF_PAPC_SU_OUT_CLIP_POLYMODE_BACK=67,
    GPUPE_PERF_PAPC_SU_OUT_CLIP_POLYMODE_FRONT=68,
    GPUPE_PERF_PAPC_PASX_REQ_IDLE=69,
    GPUPE_PERF_PAPC_PASX_REQ_BUSY=70,
    GPUPE_PERF_PAPC_PASX_REQ_STALLED=71,
    GPUPE_PERF_PAPC_PASX_REC_IDLE=72,
    GPUPE_PERF_PAPC_PASX_REC_BUSY=73,
    GPUPE_PERF_PAPC_PASX_REC_STARVED_SX=74,
    GPUPE_PERF_PAPC_PASX_REC_STALLED=75,
    GPUPE_PERF_PAPC_PASX_REC_STALLED_POS_MEM=76,
    GPUPE_PERF_PAPC_PASX_REC_STALLED_CCGSM_IN=77,
    GPUPE_PERF_PAPC_CCGSM_IDLE=78,
    GPUPE_PERF_PAPC_CCGSM_BUSY=79,
    GPUPE_PERF_PAPC_CCGSM_STALLED=80,
    GPUPE_PERF_PAPC_CLPRIM_IDLE=81,
    GPUPE_PERF_PAPC_CLPRIM_BUSY=82,
    GPUPE_PERF_PAPC_CLPRIM_STALLED=83,
    GPUPE_PERF_PAPC_CLPRIM_STARVED_CCGSM=84,
    GPUPE_PERF_PAPC_CLIPSM_IDLE=85,
    GPUPE_PERF_PAPC_CLIPSM_BUSY=86,
    GPUPE_PERF_PAPC_CLIPSM_WAIT_CLIP_VERT_ENGH=87,
    GPUPE_PERF_PAPC_CLIPSM_WAIT_HIGH_PRI_SEQ=88,
    GPUPE_PERF_PAPC_CLIPSM_WAIT_CLIPGA=89,
    GPUPE_PERF_PAPC_CLIPSM_WAIT_AVAIL_VTE_CLIP=90,
    GPUPE_PERF_PAPC_CLIPSM_WAIT_CLIP_OUTSM=91,
    GPUPE_PERF_PAPC_CLIPGA_IDLE=92,
    GPUPE_PERF_PAPC_CLIPGA_BUSY=93,
    GPUPE_PERF_PAPC_CLIPGA_STARVED_VTE_CLIP=94,
    GPUPE_PERF_PAPC_CLIPGA_STALLED=95,
    GPUPE_PERF_PAPC_CLIP_IDLE=96,
    GPUPE_PERF_PAPC_CLIP_BUSY=97,
    GPUPE_PERF_PAPC_SU_IDLE=98,
    GPUPE_PERF_PAPC_SU_BUSY=99,
    GPUPE_PERF_PAPC_SU_STARVED_CLIP=100,
    GPUPE_PERF_PAPC_SU_STALLED_SC=101
};

enum _D3DSAMPLER_TEXTURE_TYPE
{
    D3DSTT_UNKNOWN=0,
    D3DSTT_2D=268435456,
    D3DSTT_CUBE=402653184,
    D3DSTT_VOLUME=536870912,
    D3DSTT_FORCE_DWORD=2147483647
};

enum _D3DSHADER_PARAM_REGISTER_TYPE
{
    D3DSPR_TEMP=0,
    D3DSPR_INPUT=1,
    D3DSPR_CONST=2,
    D3DSPR_ADDR=3,
    D3DSPR_TEXTURE=3,
    D3DSPR_RASTOUT=4,
    D3DSPR_ATTROUT=5,
    D3DSPR_TEXCRDOUT=6,
    D3DSPR_OUTPUT=6,
    D3DSPR_CONSTINT=7,
    D3DSPR_COLOROUT=8,
    D3DSPR_DEPTHOUT=9,
    D3DSPR_SAMPLER=10,
    D3DSPR_CONST2=11,
    D3DSPR_CONST3=12,
    D3DSPR_CONST4=13,
    D3DSPR_CONSTBOOL=14,
    D3DSPR_LOOP=15,
    D3DSPR_TEMPFLOAT16=16,
    D3DSPR_MISCTYPE=17,
    D3DSPR_LABEL=18,
    D3DSPR_PREDICATE=19,
    D3DSPR_FORCE_DWORD=2147483647
};

enum __VECTOR_PACK_TYPES
{
    VPACK_D3DCOLOR=0,
    VPACK_NORMSHORT2=1,
    VPACK_NORMPACKED32=2,
    VPACK_FLOAT16_2=3,
    VPACK_NORMSHORT4=4,
    VPACK_FLOAT16_4=5,
    VPACK_NORMPACKED64=6
};

enum GPUREGISTER
{
    GPUREG_WAITUNTIL=1480,
    GPUREG_COHERSIZEHOST=2607,
    GPUREG_COHERBASEHOST=2608,
    GPUREG_COHERSTATUSHOST=2609,
    GPUREG_CPUINTERRUPTACK=1118,
    GPUREG_CALLBACKADDRESS=1404,
    GPUREG_GPRMANAGEMENT=3328,
    GPUREG_INSTSTOREMANAGEMENT=3330,
    GPUREG_INVALIDATECONSTANTS=3332,
    GPUREG_BCCONTROL=3841,
    GPUREG_DESTINATIONPACKET=8192,
    GPUREG_PACKET0=8192,
    GPUREG_SURFACEINFO=8192,
    GPUREG_COLOR0INFO=8193,
    GPUREG_DEPTHINFO=8194,
    GPUREG_COLOR1INFO=8195,
    GPUREG_COLOR2INFO=8196,
    GPUREG_COLOR3INFO=8197,
    GPUREG_COHERDESTBASE0=8198,
    GPUREG_COHERDESTBASE1=8199,
    GPUREG_COHERDESTBASE2=8200,
    GPUREG_COHERDESTBASE3=8201,
    GPUREG_COHERDESTBASE4=8202,
    GPUREG_COHERDESTBASE5=8203,
    GPUREG_COHERDESTBASE6=8204,
    GPUREG_COHERDESTBASE7=8205,
    GPUREG_SCREENSCISSORTL=8206,
    GPUREG_SCREENSCISSORBR=8207,
    GPUREG_WINDOWPACKET=8320,
    GPUREG_PACKET1=8320,
    GPUREG_WINDOWOFFSET=8320,
    GPUREG_WINDOWSCISSORTL=8321,
    GPUREG_WINDOWSCISSORBR=8322,
    GPUREG_VALUESPACKET=8448,
    GPUREG_PACKET2=8448,
    GPUREG_MAXVTXINDX=8448,
    GPUREG_MINVTXINDX=8449,
    GPUREG_INDXOFFSET=8450,
    GPUREG_MULTIPRIMIBRESETINDX=8451,
    GPUREG_COLORMASK=8452,
    GPUREG_BLENDRED=8453,
    GPUREG_BLENDGREEN=8454,
    GPUREG_BLENDBLUE=8455,
    GPUREG_BLENDALPHA=8456,
    GPUREG_UNUSED0=8457,
    GPUREG_UNUSED1=8458,
    GPUREG_UNUSED2=8459,
    GPUREG_STENCILREFMASKBF=8460,
    GPUREG_STENCILREFMASK=8461,
    GPUREG_ALPHAREF=8462,
    GPUREG_VPORTXSCALE=8463,
    GPUREG_VPORTXOFFSET=8464,
    GPUREG_VPORTYSCALE=8465,
    GPUREG_VPORTYOFFSET=8466,
    GPUREG_VPORTZSCALE=8467,
    GPUREG_VPORTZOFFSET=8468,
    GPUREG_PROGRAMPACKET=8576,
    GPUREG_PACKET3=8576,
    GPUREG_PROGRAMCONTROL=8576,
    GPUREG_CONTEXTMISC=8577,
    GPUREG_INTERPOLATORCONTROL=8578,
    GPUREG_WRAPPING0=8579,
    GPUREG_WRAPPING1=8580,
    GPUREG_CONTROLPACKET=8704,
    GPUREG_PACKET4=8704,
    GPUREG_DEPTHCONTROL=8704,
    GPUREG_BLENDCONTROL0=8705,
    GPUREG_COLORCONTROL=8706,
    GPUREG_HICONTROL=8707,
    GPUREG_CLIPCONTROL=8708,
    GPUREG_MODECONTROL=8709,
    GPUREG_VTECONTROL=8710,
    GPUREG_UNUSED3=8711,
    GPUREG_EDRAMMODECONTROL=8712,
    GPUREG_BLENDCONTROL1=8713,
    GPUREG_BLENDCONTROL2=8714,
    GPUREG_BLENDCONTROL3=8715,
    GPUREG_TESSELLATORPACKET=8832,
    GPUREG_PACKET5=8832,
    GPUREG_POINTSIZE=8832,
    GPUREG_POINTMINMAX=8833,
    GPUREG_LINECONTROL=8834,
    GPUREG_UNUSED4=8835,
    GPUREG_OUTPUTPATHCONTROL=8836,
    GPUREG_HOSCONTROL=8837,
    GPUREG_HOSMAXTESSLEVEL=8838,
    GPUREG_HOSMINTESSLEVEL=8839,
    GPUREG_HOSREUSEDEPTH=8840,
    GPUREG_GROUPPRIMTYPE=8841,
    GPUREG_GROUPFIRSTDECR=8842,
    GPUREG_GROUPDECR=8843,
    GPUREG_GROUPVECT0CONTROL=8844,
    GPUREG_GROUPVECT1CONTROL=8845,
    GPUREG_GROUPVECT0FMTCONTROL=8846,
    GPUREG_GROUPVECT1FMTCONTROL=8847,
    GPUREG_UNUSED5=8848,
    GPUREG_UNUSED6=8849,
    GPUREG_MPASSPSCONTROL=8850,
    GPUREG_VIZQUERY=8851,
    GPUREG_ENHANCE=8852,
    GPUREG_MISCPACKET=8960,
    GPUREG_PACKET6=8960,
    GPUREG_SCLINECONTROL=8960,
    GPUREG_AACONFIG=8961,
    GPUREG_VTXCONTROL=8962,
    GPUREG_GBVERTCLIPADJ=8963,
    GPUREG_GBVERTDISCADJ=8964,
    GPUREG_GBHORZCLIPADJ=8965,
    GPUREG_GBHORZDISCADJ=8966,
    GPUREG_VSCONST=8967,
    GPUREG_PSCONST=8968,
    GPUREG_DEBUGMISC0=8969,
    GPUREG_DEBUGMISC1=8970,
    GPUREG_UNUSED7=8971,
    GPUREG_UNUSED8=8972,
    GPUREG_UNUSED9=8973,
    GPUREG_UNUSED10=8974,
    GPUREG_UNUSED11=8975,
    GPUREG_UNUSED12=8976,
    GPUREG_UNUSED13=8977,
    GPUREG_AAMASK=8978,
    GPUREG_UNUSED14=8979,
    GPUREG_UNUSED15=8980,
    GPUREG_UNUSED16=8981,
    GPUREG_VERTEXREUSEBLOCKCONTROL=8982,
    GPUREG_OUTDEALLOCCONTROL=8983,
    GPUREG_COPYCONTROL=8984,
    GPUREG_COPYDESTBASE=8985,
    GPUREG_COPYDESTPITCH=8986,
    GPUREG_COPYDESTINFO=8987,
    GPUREG_HICLEAR=8988,
    GPUREG_DEPTHCLEAR=8989,
    GPUREG_COLORCLEAR=8990,
    GPUREG_COLORCLEARLO=8991,
    GPUREG_COPYFUNC=8992,
    GPUREG_COPYREF=8993,
    GPUREG_COPYMASK=8994,
    GPUREG_COPYSURFACESLICE=8995,
    GPUREG_SAMPLECOUNTCONTROL=8996,
    GPUREG_SAMPLECOUNTADDRESS=8997,
    GPUREG_POINTPACKET=9088,
    GPUREG_PACKET7=9088,
    GPUREG_POLYOFFSETFRONTSCALE=9088,
    GPUREG_POLYOFFSETFRONTOFFSET=9089,
    GPUREG_POLYOFFSETBACKSCALE=9090,
    GPUREG_POLYOFFSETBACKOFFSET=9091,
    GPUREG_POINTXRAD=9092,
    GPUREG_POINTYRAD=9093,
    GPUREG_POINTCONSTANTSIZE=9094,
    GPUREG_POINTCULLRAD=9095,
    GPUREG_CLIPPLANE0=9096,
    GPUREG_CLIPPLANE1=9100,
    GPUREG_CLIPPLANE2=9104,
    GPUREG_CLIPPLANE3=9108,
    GPUREG_CLIPPLANE4=9112,
    GPUREG_CLIPPLANE5=9116,
    GPUREG_ALUCONSTANTS=16384,
    GPUREG_FETCHCONSTANTS=18432,
    GPUREG_FLOWCONSTANTS=18688,
    GPUREG_BOOLEANCONSTANTS=18688,
    GPUREG_INTEGERCONSTANTS=18696,
    GPUREG_FLUSHFETCHCONSTANTS=20480
};

enum __VECTOR_PACK_MASK
{
    VPACK_32=1,
    VPACK_64LO=2,
    VPACK_64HI=3
};

enum _XSECURITY_STATUS_CHECKS
{
    XSECURITY_STATUS_ANY=0,
    XSECURITY_STATUS_VERSION_CHECK=1,
    XSECURITY_STATUS_MAXIMUM=2
};

enum _D3DSHADER_MISCTYPE_OFFSETS
{
    D3DSMO_POSITION=0,
    D3DSMO_FACE=1
};

enum GPUVERTEXFORMAT
{
    GPUVERTEXFORMAT_8_8_8_8=6,
    GPUVERTEXFORMAT_2_10_10_10=7,
    GPUVERTEXFORMAT_10_11_11=16,
    GPUVERTEXFORMAT_11_11_10=17,
    GPUVERTEXFORMAT_16_16=25,
    GPUVERTEXFORMAT_16_16_16_16=26,
    GPUVERTEXFORMAT_16_16_FLOAT=31,
    GPUVERTEXFORMAT_16_16_16_16_FLOAT=32,
    GPUVERTEXFORMAT_32=33,
    GPUVERTEXFORMAT_32_32=34,
    GPUVERTEXFORMAT_32_32_32_32=35,
    GPUVERTEXFORMAT_32_FLOAT=36,
    GPUVERTEXFORMAT_32_32_FLOAT=37,
    GPUVERTEXFORMAT_32_32_32_32_FLOAT=38,
    GPUVERTEXFORMAT_32_32_32_FLOAT=57
};

enum _D3DVS_RASTOUT_OFFSETS
{
    D3DSRO_POSITION=0,
    D3DSRO_FOG=1,
    D3DSRO_POINT_SIZE=2,
    D3DSRO_FORCE_DWORD=2147483647
};

enum _D3DVS_ADDRESSMODE_TYPE
{
    D3DVS_ADDRMODE_ABSOLUTE=0,
    D3DVS_ADDRMODE_RELATIVE=8192,
    D3DVS_ADDRMODE_FORCE_DWORD=2147483647
};

enum _D3DSHADER_ADDRESSMODE_TYPE
{
    D3DSHADER_ADDRMODE_ABSOLUTE=0,
    D3DSHADER_ADDRMODE_RELATIVE=8192,
    D3DSHADER_ADDRMODE_FORCE_DWORD=2147483647
};

enum GPUEDRAMCOLORFORMAT
{
    GPUEDRAMCOLORFORMAT_8_8_8_8=0,
    GPUEDRAMCOLORFORMAT_8_8_8_8_GAMMA=1,
    GPUEDRAMCOLORFORMAT_2_10_10_10=2,
    GPUEDRAMCOLORFORMAT_2_10_10_10_FLOAT=3,
    GPUEDRAMCOLORFORMAT_16_16=4,
    GPUEDRAMCOLORFORMAT_16_16_16_16=5,
    GPUEDRAMCOLORFORMAT_16_16_FLOAT=6,
    GPUEDRAMCOLORFORMAT_16_16_16_16_FLOAT=7,
    GPUEDRAMCOLORFORMAT_2_10_10_10_AS_10_10_10_10=10,
    GPUEDRAMCOLORFORMAT_2_10_10_10_FLOAT_AS_16_16_16_16=12,
    GPUEDRAMCOLORFORMAT_32_FLOAT=14,
    GPUEDRAMCOLORFORMAT_32_32_FLOAT=15
};

enum _D3DSHADER_PARAM_SRCMOD_TYPE
{
    D3DSPSM_NONE=0,
    D3DSPSM_NEG=16777216,
    D3DSPSM_BIAS=33554432,
    D3DSPSM_BIASNEG=50331648,
    D3DSPSM_SIGN=67108864,
    D3DSPSM_SIGNNEG=83886080,
    D3DSPSM_COMP=100663296,
    D3DSPSM_X2=117440512,
    D3DSPSM_X2NEG=134217728,
    D3DSPSM_DZ=150994944,
    D3DSPSM_DW=167772160,
    D3DSPSM_ABS=184549376,
    D3DSPSM_ABSNEG=201326592,
    D3DSPSM_NOT=218103808,
    D3DSPSM_FORCE_DWORD=2147483647
};

enum GPUPERFREGISTER
{
    GPUPERFREG_PA_SU_PERFCOUNTER0_SELECT=3208,
    GPUPERFREG_PA_SU_PERFCOUNTER1_SELECT=3209,
    GPUPERFREG_PA_SU_PERFCOUNTER2_SELECT=3210,
    GPUPERFREG_PA_SU_PERFCOUNTER3_SELECT=3211,
    GPUPERFREG_PA_SC_PERFCOUNTER0_SELECT=3224,
    GPUPERFREG_PA_SC_PERFCOUNTER1_SELECT=3225,
    GPUPERFREG_PA_SC_PERFCOUNTER2_SELECT=3226,
    GPUPERFREG_PA_SC_PERFCOUNTER3_SELECT=3227,
    GPUPERFREG_VGT_PERFCOUNTER0_SELECT=3144,
    GPUPERFREG_VGT_PERFCOUNTER1_SELECT=3145,
    GPUPERFREG_VGT_PERFCOUNTER2_SELECT=3146,
    GPUPERFREG_VGT_PERFCOUNTER3_SELECT=3147,
    GPUPERFREG_TCR_PERFCOUNTER0_SELECT=3589,
    GPUPERFREG_TCR_PERFCOUNTER1_SELECT=3592,
    GPUPERFREG_TP0_PERFCOUNTER0_SELECT=3615,
    GPUPERFREG_TP0_PERFCOUNTER1_SELECT=3618,
    GPUPERFREG_TP1_PERFCOUNTER0_SELECT=3624,
    GPUPERFREG_TP1_PERFCOUNTER1_SELECT=3627,
    GPUPERFREG_TP2_PERFCOUNTER0_SELECT=3633,
    GPUPERFREG_TP2_PERFCOUNTER1_SELECT=3636,
    GPUPERFREG_TP3_PERFCOUNTER0_SELECT=3642,
    GPUPERFREG_TP3_PERFCOUNTER1_SELECT=3645,
    GPUPERFREG_TCM_PERFCOUNTER0_SELECT=3668,
    GPUPERFREG_TCM_PERFCOUNTER1_SELECT=3671,
    GPUPERFREG_TCF_PERFCOUNTER0_SELECT=3674,
    GPUPERFREG_TCF_PERFCOUNTER1_SELECT=3677,
    GPUPERFREG_TCF_PERFCOUNTER2_SELECT=3680,
    GPUPERFREG_TCF_PERFCOUNTER3_SELECT=3683,
    GPUPERFREG_TCF_PERFCOUNTER4_SELECT=3686,
    GPUPERFREG_TCF_PERFCOUNTER5_SELECT=3689,
    GPUPERFREG_TCF_PERFCOUNTER6_SELECT=3692,
    GPUPERFREG_TCF_PERFCOUNTER7_SELECT=3695,
    GPUPERFREG_TCF_PERFCOUNTER8_SELECT=3698,
    GPUPERFREG_TCF_PERFCOUNTER9_SELECT=3701,
    GPUPERFREG_TCF_PERFCOUNTER10_SELECT=3704,
    GPUPERFREG_TCF_PERFCOUNTER11_SELECT=3707,
    GPUPERFREG_VC_PERFCOUNTER0_SELECT=3656,
    GPUPERFREG_VC_PERFCOUNTER1_SELECT=3659,
    GPUPERFREG_VC_PERFCOUNTER2_SELECT=3662,
    GPUPERFREG_VC_PERFCOUNTER3_SELECT=3665,
    GPUPERFREG_SQ_PERFCOUNTER0_SELECT=3528,
    GPUPERFREG_SQ_PERFCOUNTER1_SELECT=3529,
    GPUPERFREG_SQ_PERFCOUNTER2_SELECT=3530,
    GPUPERFREG_SQ_PERFCOUNTER3_SELECT=3531,
    GPUPERFREG_SX_PERFCOUNTER0_SELECT=3540,
    GPUPERFREG_MC0_PERFCOUNTER0_SELECT=2069,
    GPUPERFREG_MC1_PERFCOUNTER0_SELECT=2133,
    GPUPERFREG_MH_PERFCOUNTER0_SELECT=2584,
    GPUPERFREG_MH_PERFCOUNTER1_SELECT=2587,
    GPUPERFREG_MH_PERFCOUNTER2_SELECT=2590,
    GPUPERFREG_BIF_PERFCOUNTER0_SELECT=72,
    GPUPERFREG_HZ_PERFCOUNTER0_SELECT=4100,
    GPUPERFREG_HZ_PERFCOUNTER1_SELECT=4103,
    GPUPERFREG_BC_PERFCOUNTER0_SELECT=3844,
    GPUPERFREG_BC_PERFCOUNTER1_SELECT=3845,
    GPUPERFREG_BC_PERFCOUNTER2_SELECT=3846,
    GPUPERFREG_BC_PERFCOUNTER3_SELECT=3847,
    GPUPERFREG_RBBM_PERFCOUNTER0_SELECT=917,
    GPUPERFREG_RBBM_PERFCOUNTER1_SELECT=918,
    GPUPERFREG_CP_PERFCOUNTER0_SELECT=486,
    GPUPERFREG_PA_SU_PERFCOUNTER0_LOW=3212,
    GPUPERFREG_PA_SU_PERFCOUNTER0_HI=3213,
    GPUPERFREG_PA_SU_PERFCOUNTER1_LOW=3214,
    GPUPERFREG_PA_SU_PERFCOUNTER1_HI=3215,
    GPUPERFREG_PA_SU_PERFCOUNTER2_LOW=3216,
    GPUPERFREG_PA_SU_PERFCOUNTER2_HI=3217,
    GPUPERFREG_PA_SU_PERFCOUNTER3_LOW=3218,
    GPUPERFREG_PA_SU_PERFCOUNTER3_HI=3219,
    GPUPERFREG_PA_SC_PERFCOUNTER0_LOW=3228,
    GPUPERFREG_PA_SC_PERFCOUNTER0_HI=3229,
    GPUPERFREG_PA_SC_PERFCOUNTER1_LOW=3230,
    GPUPERFREG_PA_SC_PERFCOUNTER1_HI=3231,
    GPUPERFREG_PA_SC_PERFCOUNTER2_LOW=3232,
    GPUPERFREG_PA_SC_PERFCOUNTER2_HI=3233,
    GPUPERFREG_PA_SC_PERFCOUNTER3_LOW=3234,
    GPUPERFREG_PA_SC_PERFCOUNTER3_HI=3235,
    GPUPERFREG_VGT_PERFCOUNTER0_LOW=3148,
    GPUPERFREG_VGT_PERFCOUNTER0_HI=3149,
    GPUPERFREG_VGT_PERFCOUNTER1_LOW=3150,
    GPUPERFREG_VGT_PERFCOUNTER1_HI=3151,
    GPUPERFREG_VGT_PERFCOUNTER2_LOW=3152,
    GPUPERFREG_VGT_PERFCOUNTER2_HI=3153,
    GPUPERFREG_VGT_PERFCOUNTER3_LOW=3154,
    GPUPERFREG_VGT_PERFCOUNTER3_HI=3155,
    GPUPERFREG_TCR_PERFCOUNTER0_LOW=3591,
    GPUPERFREG_TCR_PERFCOUNTER0_HI=3590,
    GPUPERFREG_TCR_PERFCOUNTER1_LOW=3594,
    GPUPERFREG_TCR_PERFCOUNTER1_HI=3593,
    GPUPERFREG_TP0_PERFCOUNTER0_LOW=3617,
    GPUPERFREG_TP0_PERFCOUNTER0_HI=3616,
    GPUPERFREG_TP0_PERFCOUNTER1_LOW=3620,
    GPUPERFREG_TP0_PERFCOUNTER1_HI=3619,
    GPUPERFREG_TP1_PERFCOUNTER0_LOW=3626,
    GPUPERFREG_TP1_PERFCOUNTER0_HI=3625,
    GPUPERFREG_TP1_PERFCOUNTER1_LOW=3629,
    GPUPERFREG_TP1_PERFCOUNTER1_HI=3628,
    GPUPERFREG_TP2_PERFCOUNTER0_LOW=3635,
    GPUPERFREG_TP2_PERFCOUNTER0_HI=3634,
    GPUPERFREG_TP2_PERFCOUNTER1_LOW=3638,
    GPUPERFREG_TP2_PERFCOUNTER1_HI=3637,
    GPUPERFREG_TP3_PERFCOUNTER0_LOW=3644,
    GPUPERFREG_TP3_PERFCOUNTER0_HI=3643,
    GPUPERFREG_TP3_PERFCOUNTER1_LOW=3647,
    GPUPERFREG_TP3_PERFCOUNTER1_HI=3646,
    GPUPERFREG_TCM_PERFCOUNTER0_LOW=3670,
    GPUPERFREG_TCM_PERFCOUNTER0_HI=3669,
    GPUPERFREG_TCM_PERFCOUNTER1_LOW=3673,
    GPUPERFREG_TCM_PERFCOUNTER1_HI=3672,
    GPUPERFREG_TCF_PERFCOUNTER0_LOW=3676,
    GPUPERFREG_TCF_PERFCOUNTER0_HI=3675,
    GPUPERFREG_TCF_PERFCOUNTER1_LOW=3679,
    GPUPERFREG_TCF_PERFCOUNTER1_HI=3678,
    GPUPERFREG_TCF_PERFCOUNTER2_LOW=3682,
    GPUPERFREG_TCF_PERFCOUNTER2_HI=3681,
    GPUPERFREG_TCF_PERFCOUNTER3_LOW=3685,
    GPUPERFREG_TCF_PERFCOUNTER3_HI=3684,
    GPUPERFREG_TCF_PERFCOUNTER4_LOW=3688,
    GPUPERFREG_TCF_PERFCOUNTER4_HI=3687,
    GPUPERFREG_TCF_PERFCOUNTER5_LOW=3691,
    GPUPERFREG_TCF_PERFCOUNTER5_HI=3690,
    GPUPERFREG_TCF_PERFCOUNTER6_LOW=3694,
    GPUPERFREG_TCF_PERFCOUNTER6_HI=3693,
    GPUPERFREG_TCF_PERFCOUNTER7_LOW=3697,
    GPUPERFREG_TCF_PERFCOUNTER7_HI=3696,
    GPUPERFREG_TCF_PERFCOUNTER8_LOW=3700,
    GPUPERFREG_TCF_PERFCOUNTER8_HI=3699,
    GPUPERFREG_TCF_PERFCOUNTER9_LOW=3703,
    GPUPERFREG_TCF_PERFCOUNTER9_HI=3702,
    GPUPERFREG_TCF_PERFCOUNTER10_LOW=3706,
    GPUPERFREG_TCF_PERFCOUNTER10_HI=3705,
    GPUPERFREG_TCF_PERFCOUNTER11_LOW=3709,
    GPUPERFREG_TCF_PERFCOUNTER11_HI=3708,
    GPUPERFREG_VC_PERFCOUNTER0_LOW=3658,
    GPUPERFREG_VC_PERFCOUNTER0_HI=3657,
    GPUPERFREG_VC_PERFCOUNTER1_LOW=3661,
    GPUPERFREG_VC_PERFCOUNTER1_HI=3660,
    GPUPERFREG_VC_PERFCOUNTER2_LOW=3664,
    GPUPERFREG_VC_PERFCOUNTER2_HI=3663,
    GPUPERFREG_VC_PERFCOUNTER3_LOW=3667,
    GPUPERFREG_VC_PERFCOUNTER3_HI=3666,
    GPUPERFREG_SQ_PERFCOUNTER0_LOW=3532,
    GPUPERFREG_SQ_PERFCOUNTER0_HI=3533,
    GPUPERFREG_SQ_PERFCOUNTER1_LOW=3534,
    GPUPERFREG_SQ_PERFCOUNTER1_HI=3535,
    GPUPERFREG_SQ_PERFCOUNTER2_LOW=3536,
    GPUPERFREG_SQ_PERFCOUNTER2_HI=3537,
    GPUPERFREG_SQ_PERFCOUNTER3_LOW=3538,
    GPUPERFREG_SQ_PERFCOUNTER3_HI=3539,
    GPUPERFREG_SX_PERFCOUNTER0_LOW=3544,
    GPUPERFREG_SX_PERFCOUNTER0_HI=3545,
    GPUPERFREG_MC0_PERFCOUNTER0_LOW=2071,
    GPUPERFREG_MC0_PERFCOUNTER0_HI=2070,
    GPUPERFREG_MC1_PERFCOUNTER0_LOW=2135,
    GPUPERFREG_MC1_PERFCOUNTER0_HI=2134,
    GPUPERFREG_MH_PERFCOUNTER0_LOW=2586,
    GPUPERFREG_MH_PERFCOUNTER0_HI=2585,
    GPUPERFREG_MH_PERFCOUNTER1_LOW=2589,
    GPUPERFREG_MH_PERFCOUNTER1_HI=2588,
    GPUPERFREG_MH_PERFCOUNTER2_LOW=2592,
    GPUPERFREG_MH_PERFCOUNTER2_HI=2591,
    GPUPERFREG_BIF_PERFCOUNTER0_LOW=74,
    GPUPERFREG_BIF_PERFCOUNTER0_HI=73,
    GPUPERFREG_HZ_PERFCOUNTER0_LOW=4102,
    GPUPERFREG_HZ_PERFCOUNTER0_HI=4101,
    GPUPERFREG_HZ_PERFCOUNTER1_LOW=4105,
    GPUPERFREG_HZ_PERFCOUNTER1_HI=4104,
    GPUPERFREG_BC_PERFCOUNTER0_LOW=3848,
    GPUPERFREG_BC_PERFCOUNTER0_HI=3849,
    GPUPERFREG_BC_PERFCOUNTER1_LOW=3850,
    GPUPERFREG_BC_PERFCOUNTER1_HI=3851,
    GPUPERFREG_BC_PERFCOUNTER2_LOW=3852,
    GPUPERFREG_BC_PERFCOUNTER2_HI=3853,
    GPUPERFREG_BC_PERFCOUNTER3_LOW=3854,
    GPUPERFREG_BC_PERFCOUNTER3_HI=3855,
    GPUPERFREG_RBBM_PERFCOUNTER0_LOW=919,
    GPUPERFREG_RBBM_PERFCOUNTER0_HI=920,
    GPUPERFREG_RBBM_PERFCOUNTER1_LOW=921,
    GPUPERFREG_RBBM_PERFCOUNTER1_HI=922,
    GPUPERFREG_CP_PERFCOUNTER0_LOW=487,
    GPUPERFREG_CP_PERFCOUNTER0_HI=488,
    GPUPERFREG_CP_PERFMON_CNTL=501,
    GPUPERFREG_VGT_EVENT_INITIATOR=8697
};

enum XONLINE_NAT_TYPE
{
    XONLINE_NAT_OPEN=1,
    XONLINE_NAT_MODERATE=2,
    XONLINE_NAT_STRICT=3
};

enum _XMEMCODEC_TYPE
{
    XMEMCODEC_DEFAULT=0,
    XMEMCODEC_LZX=1
};

enum GPUEDRAMDEPTHFORMAT
{
    GPUEDRAMDEPTHFORMAT_24_8=0,
    GPUEDRAMDEPTHFORMAT_24_8_FLOAT=1
};

enum _D3DSVERROR_TYPE
{
    D3DSVE_GENERIC_ERROR=0,
    D3DSVE_INSTRUCTION_WARNING=1,
    D3DSVE_INSTRUCTION_ERROR=2,
    D3DSVE_ELEMENT_WARNING=3,
    D3DSVE_ELEMENT_ERROR=4,
    D3DSVE_GLOBAL_WARNING=5,
    D3DSVE_GLOBAL_ERROR=6,
    D3DSVE_GENERIC_WARNING=7
};

enum GPUSIGN
{
    GPUSIGN_UNSIGNED=0,
    GPUSIGN_SIGNED=1,
    GPUSIGN_BIAS=2,
    GPUSIGN_GAMMA=3
};

enum GPUSWIZZLE
{
    GPUSWIZZLE_X=0,
    GPUSWIZZLE_Y=1,
    GPUSWIZZLE_Z=2,
    GPUSWIZZLE_W=3,
    GPUSWIZZLE_0=4,
    GPUSWIZZLE_1=5,
    GPUSWIZZLE_KEEP=7
};

enum _D3DBASISTYPE
{
    D3DBASIS_BEZIER=0,
    D3DBASIS_BSPLINE=1,
    D3DBASIS_CATMULL_ROM=2,
    D3DBASIS_FORCE_DWORD=2147483647
};

enum GPUNUMFORMAT
{
    GPUNUMFORMAT_FRACTION=0,
    GPUNUMFORMAT_INTEGER=1
};

enum _D3DDEGREETYPE
{
    D3DDEGREE_LINEAR=1,
    D3DDEGREE_QUADRATIC=2,
    D3DDEGREE_CUBIC=3,
    D3DDEGREE_QUINTIC=5,
    D3DDEGREE_FORCE_DWORD=2147483647
};

enum GPUCONSTANTTYPE
{
    GPUCONSTANTTYPE_INVALID_TEXTURE=0,
    GPUCONSTANTTYPE_INVALID_VERTEX=1,
    GPUCONSTANTTYPE_TEXTURE=2,
    GPUCONSTANTTYPE_VERTEX=3
};

enum _D3DPATCHEDGESTYLE
{
    D3DPATCHEDGE_DISCRETE=0,
    D3DPATCHEDGE_CONTINUOUS=1,
    D3DPATCHEDGE_FORCE_DWORD=2147483647
};

enum _D3DXMESHDATATYPE
{
    D3DXMESHTYPE_MESH=1,
    D3DXMESHTYPE_PMESH=2,
    D3DXMESHTYPE_PATCHMESH=3,
    D3DXMESHTYPE_FORCE_DWORD=2147483647
};

enum GPUCLAMP
{
    GPUCLAMP_WRAP=0,
    GPUCLAMP_MIRROR=1,
    GPUCLAMP_CLAMP_TO_LAST=2,
    GPUCLAMP_MIRROR_ONCE_TO_LAST=3,
    GPUCLAMP_CLAMP_HALFWAY=4,
    GPUCLAMP_MIRROR_ONCE_HALFWAY=5,
    GPUCLAMP_CLAMP_TO_BORDER=6,
    GPUCLAMP_MIRROR_TO_BORDER=7
};

enum _D3DSTATEBLOCKTYPE
{
    D3DSBT_ALL=1,
    D3DSBT_PIXELSTATE=2,
    D3DSBT_VERTEXSTATE=3,
    D3DSBT_FORCE_DWORD=2147483647
};

enum _D3DDEVTYPE
{
    D3DDEVTYPE_HAL=1,
    D3DDEVTYPE_COMMAND_BUFFER=2,
    D3DDEVTYPE_FORCE_DWORD=2147483647
};

enum GPUPERFEVENT_PA_SC
{
    GPUPE_SC_SR_WINDOW_VALID=0,
    GPUPE_SC_CW_WINDOW_VALID=1,
    GPUPE_SC_QM_WINDOW_VALID=2,
    GPUPE_SC_QPP_WINDOW_VALID=3,
    GPUPE_SC_ITER_WINDOW_VALID=4,
    GPUPE_SC_STARVED_BY_PA=5,
    GPUPE_SC_STARVED_BY_RCC=6,
    GPUPE_SC_STALLED_BY_PRIM_FF=7,
    GPUPE_SC_STALLED_BY_RCC=8,
    GPUPE_SC_STALLED_BY_BC=9,
    GPUPE_SC_STALLED_BY_SX=10,
    GPUPE_SC_STALLED_BY_SX0=11,
    GPUPE_SC_STALLED_BY_SX1=12,
    GPUPE_SC_STALLED_BY_SQ=13,
    GPUPE_SC_STALLED_BY_SP=14,
    GPUPE_SC_WAIT_FOR_R1=15,
    GPUPE_SC_SCISSOR_DISCARD=16,
    GPUPE_SC_BB_DISCARD=17,
    GPUPE_SC_SUPERT_PRIM_DISCARD=18,
    GPUPE_SC_RT_PRIM=19,
    GPUPE_SC_TILE_VALID=20,
    GPUPE_SC_TILE_PER_PRIM_H0=21,
    GPUPE_SC_TILE_PER_PRIM_H1=22,
    GPUPE_SC_TILE_PER_PRIM_H2=23,
    GPUPE_SC_TILE_PER_PRIM_H3=24,
    GPUPE_SC_TILE_PER_PRIM_H4=25,
    GPUPE_SC_TILE_PER_PRIM_H5=26,
    GPUPE_SC_TILE_PER_PRIM_H6=27,
    GPUPE_SC_TILE_PER_PRIM_H7=28,
    GPUPE_SC_TILE_PER_PRIM_H8=29,
    GPUPE_SC_TILE_PER_PRIM_H9=30,
    GPUPE_SC_TILE_PER_PRIM_H10=31,
    GPUPE_SC_TILE_PER_PRIM_H11=32,
    GPUPE_SC_TILE_PER_PRIM_H12=33,
    GPUPE_SC_TILE_PER_PRIM_H13=34,
    GPUPE_SC_TILE_PER_PRIM_H14=35,
    GPUPE_SC_TILE_PER_PRIM_H15=36,
    GPUPE_SC_TILE_PER_PRIM_H16=37,
    GPUPE_SC_SUPERT_TILE_DISCARD=38,
    GPUPE_SC_QM_NUM_QUADS=39,
    GPUPE_SC_QM_MASK_H0=40,
    GPUPE_SC_QM_MASK_H1=41,
    GPUPE_SC_QM_MASK_H2=42,
    GPUPE_SC_QM_MASK_H3=43,
    GPUPE_SC_QM_MASK_H4=44,
    GPUPE_SC_QM_MASK_H5=45,
    GPUPE_SC_QM_MASK_H6=46,
    GPUPE_SC_QM_MASK_H7=47,
    GPUPE_SC_QM_MASK_H8=48,
    GPUPE_SC_QM_MASK_H9=49,
    GPUPE_SC_QM_MASK_H10=50,
    GPUPE_SC_QM_MASK_H11=51,
    GPUPE_SC_QM_MASK_H12=52,
    GPUPE_SC_QM_MASK_H13=53,
    GPUPE_SC_QM_MASK_H14=54,
    GPUPE_SC_QM_MASK_H15=55,
    GPUPE_SC_QM_MASK_H16=56,
    GPUPE_SC_QM_COVERED_H0=57,
    GPUPE_SC_QM_COVERED_H1=58,
    GPUPE_SC_QM_COVERED_H2=59,
    GPUPE_SC_QM_COVERED_H3=60,
    GPUPE_SC_QM_COVERED_H4=61,
    GPUPE_SC_QM_COVERED_H5=62,
    GPUPE_SC_QM_COVERED_H6=63,
    GPUPE_SC_QM_COVERED_H7=64,
    GPUPE_SC_QM_COVERED_H8=65,
    GPUPE_SC_QM_COVERED_H9=66,
    GPUPE_SC_QM_COVERED_H10=67,
    GPUPE_SC_QM_COVERED_H11=68,
    GPUPE_SC_QM_COVERED_H12=69,
    GPUPE_SC_QM_COVERED_H13=70,
    GPUPE_SC_QM_COVERED_H14=71,
    GPUPE_SC_QM_COVERED_H15=72,
    GPUPE_SC_QM_COVERED_H16=73,
    GPUPE_SC_HIER_NUM_QUADS=74,
    GPUPE_SC_HIER_MASK_H0=75,
    GPUPE_SC_HIER_MASK_H1=76,
    GPUPE_SC_HIER_MASK_H2=77,
    GPUPE_SC_HIER_MASK_H3=78,
    GPUPE_SC_HIER_MASK_H4=79,
    GPUPE_SC_HIER_MASK_H5=80,
    GPUPE_SC_HIER_MASK_H6=81,
    GPUPE_SC_HIER_MASK_H7=82,
    GPUPE_SC_HIER_MASK_H8=83,
    GPUPE_SC_HIER_MASK_H9=84,
    GPUPE_SC_HIER_MASK_H10=85,
    GPUPE_SC_HIER_MASK_H11=86,
    GPUPE_SC_HIER_MASK_H12=87,
    GPUPE_SC_HIER_MASK_H13=88,
    GPUPE_SC_HIER_MASK_H14=89,
    GPUPE_SC_HIER_MASK_H15=90,
    GPUPE_SC_HIER_MASK_H16=91,
    GPUPE_SC_DET_NUM_QUADS=92,
    GPUPE_SC_PKR_QD_PER_ROW_H1=93,
    GPUPE_SC_PKR_QD_PER_ROW_H2=94,
    GPUPE_SC_PKR_QD_PER_ROW_H3=95,
    GPUPE_SC_PKR_QD_PER_ROW_H4=96,
    GPUPE_SC_PKR_END_OF_VECTOR=97,
    GPUPE_SC_PKR_ONE_CLK=98,
    GPUPE_SC_QD_WITH_1_PIX=99,
    GPUPE_SC_QD_WITH_2_PIX=100,
    GPUPE_SC_QD_WITH_3_PIX=101,
    GPUPE_SC_QD_WITH_4_PIX=102,
    GPUPE_SC_SR_WINDOW_VALID_BUSY=103,
    GPUPE_SC_CW_WINDOW_VALID_BUSY=104,
    GPUPE_SC_QM_WINDOW_VALID_BUSY=105,
    GPUPE_SC_QPP_WINDOW_VALID_BUSY=106,
    GPUPE_SC_ITER_WINDOW_VALID_BUSY=107
};

enum GPUDIMENSION
{
    GPUDIMENSION_1D=0,
    GPUDIMENSION_2D=1,
    GPUDIMENSION_3D=2,
    GPUDIMENSION_CUBEMAP=3
};

enum _XAMUSER_SIGNIN_STATE
{
    eXamUserSigninState_NotSignedIn=0,
    eXamUserSigninState_SignedInLocally=1,
    eXamUserSigninState_SignedInToLive=2
};

enum _D3DMULTISAMPLE_TYPE
{
    D3DMULTISAMPLE_NONE=0,
    D3DMULTISAMPLE_2_SAMPLES=1,
    D3DMULTISAMPLE_4_SAMPLES=2,
    D3DMULTISAMPLE_FORCE_DWORD=2147483647
};

enum GPUREQUESTSIZE
{
    GPUREQUESTSIZE_256BIT=0,
    GPUREQUESTSIZE_512BIT=1
};

enum _D3DFORMAT
{
    D3DFMT_DXT1=438305106,
    D3DFMT_LIN_DXT1=438304850,
    D3DFMT_DXT2=438305107,
    D3DFMT_LIN_DXT2=438304851,
    D3DFMT_DXT3=438305107,
    D3DFMT_LIN_DXT3=438304851,
    D3DFMT_DXT3A=438305146,
    D3DFMT_LIN_DXT3A=438304890,
    D3DFMT_DXT3A_1111=438305149,
    D3DFMT_LIN_DXT3A_1111=438304893,
    D3DFMT_DXT4=438305108,
    D3DFMT_LIN_DXT4=438304852,
    D3DFMT_DXT5=438305108,
    D3DFMT_LIN_DXT5=438304852,
    D3DFMT_DXT5A=438305147,
    D3DFMT_LIN_DXT5A=438304891,
    D3DFMT_DXN=438305137,
    D3DFMT_LIN_DXN=438304881,
    D3DFMT_CTX1=438305148,
    D3DFMT_LIN_CTX1=438304892,
    D3DFMT_A8=76546306,
    D3DFMT_LIN_A8=76546050,
    D3DFMT_L8=671088898,
    D3DFMT_LIN_L8=671088642,
    D3DFMT_R5G6B5=673710404,
    D3DFMT_LIN_R5G6B5=673710148,
    D3DFMT_R6G5B5=673710405,
    D3DFMT_LIN_R6G5B5=673710149,
    D3DFMT_L6V5U5=706743109,
    D3DFMT_LIN_L6V5U5=706742853,
    D3DFMT_X1R5G5B5=673710403,
    D3DFMT_LIN_X1R5G5B5=673710147,
    D3DFMT_A1R5G5B5=405274947,
    D3DFMT_LIN_A1R5G5B5=405274691,
    D3DFMT_A4R4G4B4=405274959,
    D3DFMT_LIN_A4R4G4B4=405274703,
    D3DFMT_X4R4G4B4=673710415,
    D3DFMT_LIN_X4R4G4B4=673710159,
    D3DFMT_Q4W4V4U4=438348623,
    D3DFMT_LIN_Q4W4V4U4=438348367,
    D3DFMT_A8L8=134218058,
    D3DFMT_LIN_A8L8=134217802,
    D3DFMT_G8R8=757072202,
    D3DFMT_LIN_G8R8=757071946,
    D3DFMT_V8U8=757115722,
    D3DFMT_LIN_V8U8=757115466,
    D3DFMT_D16=438436184,
    D3DFMT_LIN_D16=438435928,
    D3DFMT_L16=671088984,
    D3DFMT_LIN_L16=671088728,
    D3DFMT_R16F=765635422,
    D3DFMT_LIN_R16F=765635166,
    D3DFMT_R16F_EXPAND=765635419,
    D3DFMT_LIN_R16F_EXPAND=765635163,
    D3DFMT_UYVY=438305100,
    D3DFMT_LIN_UYVY=438304844,
    D3DFMT_LE_UYVY=438305036,
    D3DFMT_LE_LIN_UYVY=438304780,
    D3DFMT_G8R8_G8B8=405274956,
    D3DFMT_LIN_G8R8_G8B8=405274700,
    D3DFMT_R8G8_B8G8=405274955,
    D3DFMT_LIN_R8G8_B8G8=405274699,
    D3DFMT_YUY2=438305099,
    D3DFMT_LIN_YUY2=438304843,
    D3DFMT_LE_YUY2=438305035,
    D3DFMT_LE_LIN_YUY2=438304779,
    D3DFMT_A8R8G8B8=405275014,
    D3DFMT_LIN_A8R8G8B8=405274758,
    D3DFMT_X8R8G8B8=673710470,
    D3DFMT_LIN_X8R8G8B8=673710214,
    D3DFMT_A8B8G8R8=438305158,
    D3DFMT_LIN_A8B8G8R8=438304902,
    D3DFMT_X8B8G8R8=706740614,
    D3DFMT_LIN_X8B8G8R8=706740358,
    D3DFMT_X8L8V8U8=706743174,
    D3DFMT_LIN_X8L8V8U8=706742918,
    D3DFMT_Q8W8V8U8=438348678,
    D3DFMT_LIN_Q8W8V8U8=438348422,
    D3DFMT_A2R10G10B10=405275062,
    D3DFMT_LIN_A2R10G10B10=405274806,
    D3DFMT_X2R10G10B10=673710518,
    D3DFMT_LIN_X2R10G10B10=673710262,
    D3DFMT_A2B10G10R10=438305206,
    D3DFMT_LIN_A2B10G10R10=438304950,
    D3DFMT_A2W10V10U10=438315958,
    D3DFMT_LIN_A2W10V10U10=438315702,
    D3DFMT_A16L16=134218137,
    D3DFMT_LIN_A16L16=134217881,
    D3DFMT_G16R16=757072281,
    D3DFMT_LIN_G16R16=757072025,
    D3DFMT_V16U16=757115801,
    D3DFMT_LIN_V16U16=757115545,
    D3DFMT_R10G11B11=673710519,
    D3DFMT_LIN_R10G11B11=673710263,
    D3DFMT_R11G11B10=673710520,
    D3DFMT_LIN_R11G11B10=673710264,
    D3DFMT_W10V11U11=706784183,
    D3DFMT_LIN_W10V11U11=706783927,
    D3DFMT_W11V11U10=706784184,
    D3DFMT_LIN_W11V11U10=706783928,
    D3DFMT_G16R16F=757246879,
    D3DFMT_LIN_G16R16F=757246623,
    D3DFMT_G16R16F_EXPAND=757246876,
    D3DFMT_LIN_G16R16F_EXPAND=757246620,
    D3DFMT_L32=671089057,
    D3DFMT_LIN_L32=671088801,
    D3DFMT_R32F=765635492,
    D3DFMT_LIN_R32F=765635236,
    D3DFMT_D24S8=757072278,
    D3DFMT_LIN_D24S8=757072022,
    D3DFMT_D24X8=765460886,
    D3DFMT_LIN_D24X8=765460630,
    D3DFMT_D24FS8=438436247,
    D3DFMT_LIN_D24FS8=438435991,
    D3DFMT_D32=438436257,
    D3DFMT_LIN_D32=438436001,
    D3DFMT_A16B16G16R16=438305114,
    D3DFMT_LIN_A16B16G16R16=438304858,
    D3DFMT_Q16W16V16U16=438348634,
    D3DFMT_LIN_Q16W16V16U16=438348378,
    D3DFMT_A16B16G16R16F=438479712,
    D3DFMT_LIN_A16B16G16R16F=438479456,
    D3DFMT_A16B16G16R16F_EXPAND=438479709,
    D3DFMT_LIN_A16B16G16R16F_EXPAND=438479453,
    D3DFMT_A32L32=134218146,
    D3DFMT_LIN_A32L32=134217890,
    D3DFMT_G32R32=757072290,
    D3DFMT_LIN_G32R32=757072034,
    D3DFMT_V32U32=757115810,
    D3DFMT_LIN_V32U32=757115554,
    D3DFMT_G32R32F=757246885,
    D3DFMT_LIN_G32R32F=757246629,
    D3DFMT_A32B32G32R32=438305187,
    D3DFMT_LIN_A32B32G32R32=438304931,
    D3DFMT_Q32W32V32U32=438348707,
    D3DFMT_LIN_Q32W32V32U32=438348451,
    D3DFMT_A32B32G32R32F=438479782,
    D3DFMT_LIN_A32B32G32R32F=438479526,
    D3DFMT_A2B10G10R10F_EDRAM=438436287,
    D3DFMT_G16R16_EDRAM=757115789,
    D3DFMT_A16B16G16R16_EDRAM=438348629,
    D3DFMT_LE_X8R8G8B8=673710342,
    D3DFMT_LE_A8R8G8B8=405274886,
    D3DFMT_LE_X2R10G10B10=673710390,
    D3DFMT_LE_A2R10G10B10=405274934,
    D3DFMT_INDEX16=1,
    D3DFMT_INDEX32=6,
    D3DFMT_LE_INDEX16=0,
    D3DFMT_LE_INDEX32=4,
    D3DFMT_VERTEXDATA=8,
    D3DFMT_UNKNOWN=-1,
    D3DFMT_FORCE_DWORD=2147483647
};

enum GPUCLAMPPOLICY
{
    GPUCLAMPPOLICY_D3D=0,
    GPUCLAMPPOLICY_OGL=1
};

enum GPUMINMAGFILTER
{
    GPUMINMAGFILTER_POINT=0,
    GPUMINMAGFILTER_LINEAR=1,
    GPUMINMAGFILTER_KEEP=3
};

enum GPUMIPFILTER
{
    GPUMIPFILTER_POINT=0,
    GPUMIPFILTER_LINEAR=1,
    GPUMIPFILTER_BASEMAP=2,
    GPUMIPFILTER_KEEP=3
};

enum GPUANISOFILTER
{
    GPUANISOFILTER_DISABLED=0,
    GPUANISOFILTER_MAX1TO1=1,
    GPUANISOFILTER_MAX2TO1=2,
    GPUANISOFILTER_MAX4TO1=3,
    GPUANISOFILTER_MAX8TO1=4,
    GPUANISOFILTER_MAX16TO1=5,
    GPUANISOFILTER_KEEP=7
};

enum GPUBORDERCOLOR
{
    GPUBORDERCOLOR_ABGR_BLACK=0,
    GPUBORDERCOLOR_ABGR_WHITE=1,
    GPUBORDERCOLOR_ACBYCR_BLACK=2,
    GPUBORDERCOLOR_ACBCRY_BLACK=3
};

enum GPUTRICLAMP
{
    GPUTRICLAMP_NORMAL=0,
    GPUTRICLAMP_ONE_SIXTH=1,
    GPUTRICLAMP_ONE_FOURTH=2,
    GPUTRICLAMP_THREE_EIGHTHS=3
};

enum GPUADDRESSCLAMP
{
    GPUADDRESSCLAMP_CLAMP_TO_LAST=0,
    GPUADDRESSCLAMP_CLAMP_TO_CONSTANT=1
};

enum GPUSURFACENUMBER
{
    GPUSURFACENUMBER_UREPEAT=0,
    GPUSURFACENUMBER_SREPEAT=1,
    GPUSURFACENUMBER_UINTEGER=2,
    GPUSURFACENUMBER_SINTEGER=3,
    GPUSURFACENUMBER_FLOAT=7
};

enum GPUSURFACESWAP
{
    SURFACESWAP_LOW_RED=0,
    SURFACESWAP_LOW_BLUE=1
};

enum GPUPRIMTYPE
{
    GPUPRIMTYPE_NONE=0,
    GPUPRIMTYPE_POINTLIST=1,
    GPUPRIMTYPE_LINELIST=2,
    GPUPRIMTYPE_LINESTRIP=3,
    GPUPRIMTYPE_TRILIST=4,
    GPUPRIMTYPE_TRIFAN=5,
    GPUPRIMTYPE_TRISTRIP=6,
    GPUPRIMTYPE_TRI_WITH_WFLAGS=7,
    GPUPRIMTYPE_RECTLIST=8,
    GPUPRIMTYPE_LINELOOP=12,
    GPUPRIMTYPE_QUADLIST=13,
    GPUPRIMTYPE_QUADSTRIP=14,
    GPUPRIMTYPE_POLYGON=15,
    GPUPRIMTYPE_2D_COPY_RECT_LIST_V0=16,
    GPUPRIMTYPE_2D_COPY_RECT_LIST_V1=17,
    GPUPRIMTYPE_2D_COPY_RECT_LIST_V2=18,
    GPUPRIMTYPE_2D_COPY_RECT_LIST_V3=19,
    GPUPRIMTYPE_2D_FILL_RECT_LIST=20,
    GPUPRIMTYPE_2D_LINE_STRIP=21,
    GPUPRIMTYPE_2D_TRI_STRIP=22
};

enum _EXCEPTION_DISPOSITION
{
    ExceptionContinueExecution=0,
    ExceptionContinueSearch=1,
    ExceptionNestedException=2,
    ExceptionCollidedUnwind=3
};

enum GPUGROUPPRIMTYPE
{
    GPUGROUPPRIMTYPE_3D_POINT=0,
    GPUGROUPPRIMTYPE_3D_LINE=1,
    GPUGROUPPRIMTYPE_3D_TRI=2,
    GPUGROUPPRIMTYPE_3D_RECT=3,
    GPUGROUPPRIMTYPE_3D_QUAD=4,
    GPUGROUPPRIMTYPE_2D_COPY_RECT_V0=5,
    GPUGROUPPRIMTYPE_2D_COPY_RECT_V1=6,
    GPUGROUPPRIMTYPE_2D_COPY_RECT_V2=7,
    GPUGROUPPRIMTYPE_2D_COPY_RECT_V3=8,
    GPUGROUPPRIMTYPE_2D_FILL_RECT=9,
    GPUGROUPPRIMTYPE_2D_LINE=10,
    GPUGROUPPRIMTYPE_2D_TRI=11,
    GPUGROUPPRIMTYPE_PRIM_INDEX_LINE=12,
    GPUGROUPPRIMTYPE_PRIM_INDEX_TRI=13,
    GPUGROUPPRIMTYPE_PRIM_INDEX_QUAD=14
};

enum IMPORT_OBJECT_TYPE
{
    IMPORT_OBJECT_CODE=0,
    IMPORT_OBJECT_DATA=1,
    IMPORT_OBJECT_CONST=2
};

enum IMPORT_OBJECT_NAME_TYPE
{
    IMPORT_OBJECT_ORDINAL=0,
    IMPORT_OBJECT_NAME=1,
    IMPORT_OBJECT_NAME_NO_PREFIX=2,
    IMPORT_OBJECT_NAME_UNDECORATE=3
};

enum GPUGROUPPRIMORDER
{
    GPUGROUPPRIMORDER_LIST=0,
    GPUGROUPPRIMORDER_STRIP=1,
    GPUGROUPPRIMORDER_FAN=2,
    GPUGROUPPRIMORDER_LOOP=3,
    GPUGROUPPRIMORDER_POLYGON=4
};

enum GPUGROUPCONV
{
    GPUGROUPCONV_INDEX_16=0,
    GPUGROUPCONV_INDEX_32=1,
    GPUGROUPCONV_UINT_16=2,
    GPUGROUPCONV_UINT_32=3,
    GPUGROUPCONV_SINT_16=4,
    GPUGROUPCONV_SINT_32=5,
    GPUGROUPCONV_FLOAT_32=6,
    GPUGROUPCONV_AUTO_PRIM=7,
    GPUGROUPCONV_FIX_1_23_TO_FLOAT=8
};

enum GPUPERFEVENT_HZ
{
    GPUPE_WRC_1VAL_QUADS=0,
    GPUPE_WRC_2VAL_QUADS=1,
    GPUPE_WRC_3VAL_QUADS=2,
    GPUPE_WRC_4VAL_QUADS=3,
    GPUPE_HZ_WR_BUSY=4,
    GPUPE_HZ_SPARE0=5,
    GPUPE_RDC_TILE_HIT=6,
    GPUPE_RDC_STAGE3_STALL=7,
    GPUPE_HZ_SPARE1=8,
    GPUPE_HZ_SPARE2=9,
    GPUPE_QUADS_KEPT=10,
    GPUPE_QUADS_ZCULL=11,
    GPUPE_QUADS_SCULL=12,
    GPUPE_QUADS_SZCULL=13,
    GPUPE_HZ_RE_BUSY=14,
    GPUPE_BC_SCLK_COUNT=15,
    GPUPE_BC_HZ_VALID0=16,
    GPUPE_BC_HZ_VALID1=17,
    GPUPE_BC_HZ_VALID2=18,
    GPUPE_BC_HZ_VALID3=19,
    GPUPE_SC_SCLK_COUNT=20,
    GPUPE_SC_HZ_COARSE_SND=21,
    GPUPE_HZ_SC_COARSE_HLD=22,
    GPUPE_HZ_SC_HIER_SND=23,
    GPUPE_SC_HZ_HIER_HLD=24,
    GPUPE_HZ_BC_TILE_SND=25,
    GPUPE_BC_HZ_TILE_HLD=26,
    GPUPE_SC_STALL_HZ=27,
    GPUPE_BC_STALL_HZ=28,
    GPUPE_EVENT_STALL=29,
    GPUPE_SC_STARVE_HZ_BUSY=30,
    GPUPE_SC_STARVE_HZ_IDLE=31
};

enum GPUCMPFUNC
{
    GPUCMP_NEVER=0,
    GPUCMP_LESS=1,
    GPUCMP_EQUAL=2,
    GPUCMP_LESS_EQUAL=3,
    GPUCMP_GREATER=4,
    GPUCMP_NOT_EQUAL=5,
    GPUCMP_GREATER_EQUAL=6,
    GPUCMP_ALWAYS=7
};

enum _D3DXCALLBACK_SEARCH_FLAGS
{
    D3DXCALLBACK_SEARCH_EXCLUDING_INITIAL_POSITION=1,
    D3DXCALLBACK_SEARCH_BEHIND_INITIAL_POSITION=2,
    D3DXCALLBACK_SEARCH_FORCE_DWORD=2147483647
};

enum GPUSTENCILOP
{
    GPUSTENCILOP_KEEP=0,
    GPUSTENCILOP_ZERO=1,
    GPUSTENCILOP_REPLACE=2,
    GPUSTENCILOP_INCRSAT=3,
    GPUSTENCILOP_DECRSAT=4,
    GPUSTENCILOP_INVERT=5,
    GPUSTENCILOP_INCR=6,
    GPUSTENCILOP_DECR=7
};

enum _D3DXMESHOPT
{
    D3DXMESHOPT_COMPACT=16777216,
    D3DXMESHOPT_ATTRSORT=33554432,
    D3DXMESHOPT_VERTEXCACHE=67108864,
    D3DXMESHOPT_STRIPREORDER=134217728,
    D3DXMESHOPT_IGNOREVERTS=268435456,
    D3DXMESHOPT_DONOTSPLIT=536870912,
    D3DXMESHOPT_DEVICEINDEPENDENT=4194304,
    D3DXMESHOPT_VALIDBITS=1061163008,
    D3DXMESHOPTINT_ALREADYATTRSORTED=1073741824,
    D3DXMESHOPTINT_INVERTFACEREMAP=-2147483648,
    D3DXMESHOPTINT_PMESHSAVE=8388608,
    D3DXMESHOPTINT_VALIDBITS=-4190208
};

enum BIUPERFREGISTER
{
    BIUPERFREG_BIU_PERFCOUNTER0_SELECT=4227137,
    BIUPERFREG_BIU_PERFCOUNTER1_SELECT=4227140,
    BIUPERFREG_BIU_PERFCOUNTER2_SELECT=4227143,
    BIUPERFREG_BIU_PERFCOUNTER3_SELECT=4227146,
    BIUPERFREG_BIU_PERFCOUNTER0_LOW=4227139,
    BIUPERFREG_BIU_PERFCOUNTER0_HI=4227138,
    BIUPERFREG_BIU_PERFCOUNTER1_LOW=4227142,
    BIUPERFREG_BIU_PERFCOUNTER1_HI=4227141,
    BIUPERFREG_BIU_PERFCOUNTER2_LOW=4227145,
    BIUPERFREG_BIU_PERFCOUNTER2_HI=4227144,
    BIUPERFREG_BIU_PERFCOUNTER3_LOW=4227148,
    BIUPERFREG_BIU_PERFCOUNTER3_HI=4227147,
    BIUPERFREG_BIU_PERFMON_CNTL=4227136
};

enum GPUBLEND
{
    GPUBLEND_ZERO=0,
    GPUBLEND_ONE=1,
    GPUBLEND_SRCCOLOR=4,
    GPUBLEND_INVSRCCOLOR=5,
    GPUBLEND_SRCALPHA=6,
    GPUBLEND_INVSRCALPHA=7,
    GPUBLEND_DESTCOLOR=8,
    GPUBLEND_INVDESTCOLOR=9,
    GPUBLEND_DESTALPHA=10,
    GPUBLEND_INVDESTALPHA=11,
    GPUBLEND_BLENDFACTOR=12,
    GPUBLEND_INVBLENDFACTOR=13,
    GPUBLEND_CONSTANTALPHA=14,
    GPUBLEND_INVCONSTANTALPHA=15,
    GPUBLEND_SRCALPHASAT=16
};

enum GPUPERFEVENT_TCR
{
    GPUPE_DGMMPD_IPMUX0_STALL=0,
    GPUPE_DGMMPD_IPMUX1_STALL=1,
    GPUPE_DGMMPD_IPMUX2_STALL=2,
    GPUPE_DGMMPD_IPMUX3_STALL=3,
    GPUPE_DGMMPD_IPMUX_ALL_STALL=4,
    GPUPE_OPMUX0_L2_WRITES=5,
    GPUPE_OPMUX1_L2_WRITES=6,
    GPUPE_OPMUX2_L2_WRITES=7,
    GPUPE_OPMUX3_L2_WRITES=8
};

enum DCPERFREGISTER
{
    DCPERFREG_DC_PERFCOUNTER0_SELECT=8136,
    DCPERFREG_DC_PERFCOUNTER1_SELECT=8139,
    DCPERFREG_DC_PERFCOUNTER0_LOW=8138,
    DCPERFREG_DC_PERFCOUNTER0_HI=8137,
    DCPERFREG_DC_PERFCOUNTER1_LOW=8141,
    DCPERFREG_DC_PERFCOUNTER1_HI=8140
};

enum GPUPERFEVENT_TCM
{
    GPUPE_QUAD0_RD_LAT_FIFO_EMPTY=0,
    GPUPE_QUAD0_RD_LAT_FIFO_16TH_FULL=1,
    GPUPE_QUAD0_RD_LAT_FIFO_8TH_FULL=2,
    GPUPE_QUAD0_RD_LAT_FIFO_4TH_FULL=3,
    GPUPE_QUAD0_RD_LAT_FIFO_HALF_FULL=4,
    GPUPE_QUAD0_RD_LAT_FIFO_FULL=5,
    GPUPE_QUAD0_RD_LAT_FIFO_LT_16TH_FULL=6,
    GPUPE_QUAD1_RD_LAT_FIFO_EMPTY=7,
    GPUPE_QUAD1_RD_LAT_FIFO_16TH_FULL=8,
    GPUPE_QUAD1_RD_LAT_FIFO_8TH_FULL=9,
    GPUPE_QUAD1_RD_LAT_FIFO_4TH_FULL=10,
    GPUPE_QUAD1_RD_LAT_FIFO_HALF_FULL=11,
    GPUPE_QUAD1_RD_LAT_FIFO_FULL=12,
    GPUPE_QUAD1_RD_LAT_FIFO_LT_16TH_FULL=13,
    GPUPE_QUAD2_RD_LAT_FIFO_EMPTY=14,
    GPUPE_QUAD2_RD_LAT_FIFO_16TH_FULL=15,
    GPUPE_QUAD2_RD_LAT_FIFO_8TH_FULL=16,
    GPUPE_QUAD2_RD_LAT_FIFO_4TH_FULL=17,
    GPUPE_QUAD2_RD_LAT_FIFO_HALF_FULL=18,
    GPUPE_QUAD2_RD_LAT_FIFO_FULL=19,
    GPUPE_QUAD2_RD_LAT_FIFO_LT_16TH_FULL=20,
    GPUPE_QUAD3_RD_LAT_FIFO_EMPTY=21,
    GPUPE_QUAD3_RD_LAT_FIFO_16TH_FULL=22,
    GPUPE_QUAD3_RD_LAT_FIFO_8TH_FULL=23,
    GPUPE_QUAD3_RD_LAT_FIFO_4TH_FULL=24,
    GPUPE_QUAD3_RD_LAT_FIFO_HALF_FULL=25,
    GPUPE_QUAD3_RD_LAT_FIFO_FULL=26,
    GPUPE_QUAD3_RD_LAT_FIFO_LT_16TH_FULL=27,
    GPUPE_READ_STARVED_QUAD0=28,
    GPUPE_READ_STARVED_QUAD1=29,
    GPUPE_READ_STARVED_QUAD2=30,
    GPUPE_READ_STARVED_QUAD3=31,
    GPUPE_READ_STARVED=32,
    GPUPE_READ_STALLED_QUAD0=33,
    GPUPE_READ_STALLED_QUAD1=34,
    GPUPE_READ_STALLED_QUAD2=35,
    GPUPE_READ_STALLED_QUAD3=36,
    GPUPE_READ_STALLED=37,
    GPUPE_VALID_READ_QUAD0=38,
    GPUPE_VALID_READ_QUAD1=39,
    GPUPE_VALID_READ_QUAD2=40,
    GPUPE_VALID_READ_QUAD3=41,
    GPUPE_TC_TP_STARVED_QUAD0=42,
    GPUPE_TC_TP_STARVED_QUAD1=43,
    GPUPE_TC_TP_STARVED_QUAD2=44,
    GPUPE_TC_TP_STARVED_QUAD3=45,
    GPUPE_TC_TP_STARVED=46
};

enum GPUBLENDOP
{
    GPUBLENDOP_ADD=0,
    GPUBLENDOP_SUBTRACT=1,
    GPUBLENDOP_MIN=2,
    GPUBLENDOP_MAX=3,
    GPUBLENDOP_REVSUBTRACT=4
};

enum IOCPERFREGISTER
{
    IOCPERFREG_IOC_PERFCOUNTER0_SELECT=4259969,
    IOCPERFREG_IOC_PERFCOUNTER1_SELECT=4259972,
    IOCPERFREG_IOC_PERFCOUNTER2_SELECT=4259975,
    IOCPERFREG_IOC_PERFCOUNTER3_SELECT=4259978,
    IOCPERFREG_IOC_PERFCOUNTER0_LOW=4259971,
    IOCPERFREG_IOC_PERFCOUNTER0_HI=4259970,
    IOCPERFREG_IOC_PERFCOUNTER1_LOW=4259974,
    IOCPERFREG_IOC_PERFCOUNTER1_HI=4259973,
    IOCPERFREG_IOC_PERFCOUNTER2_LOW=4259977,
    IOCPERFREG_IOC_PERFCOUNTER2_HI=4259976,
    IOCPERFREG_IOC_PERFCOUNTER3_LOW=4259980,
    IOCPERFREG_IOC_PERFCOUNTER3_HI=4259979,
    IOCPERFREG_IOC_PERFMON_CNTL=4259968
};

enum GPUCULL
{
    GPUCULL_NONE_FRONTFACE_CCW=0,
    GPUCULL_FRONT_FRONTFACE_CCW=1,
    GPUCULL_BACK_FRONTFACE_CCW=2,
    GPUCULL_NONE_FRONTFACE_CW=4,
    GPUCULL_FRONT_FRONTFACE_CW=5,
    GPUCULL_BACK_FRONTFACE_CW=6
};

enum _D3DXPLAYBACK_TYPE
{
    D3DXPLAY_LOOP=0,
    D3DXPLAY_ONCE=1,
    D3DXPLAY_PINGPONG=2,
    D3DXPLAY_FORCE_DWORD=2147483647
};

enum GPUFILLMODE
{
    GPUFILL_POINT=0,
    GPUFILL_WIREFRAME=1,
    GPUFILL_SOLID=2
};

enum GPUVERTEXSIGN
{
    GPUVERTEXSIGN_UNSIGNED=0,
    GPUVERTEXSIGN_SIGNED=1
};

enum GPUVERTEXFETCHOP
{
    GPUVERTEXFETCHOP_FETCH_VERTEX=0
};

enum XGUCODESHADERVERSION
{
    XGUCODESHADERVERSION_PIXEL=0,
    XGUCODESHADERVERSION_VERTEX=1
};

enum GPUTEXTUREFETCHOP
{
    GPUTEXTUREFETCHOP_FETCH_TEXTURE_MAP=1,
    GPUTEXTUREFETCHOP_GET_BORDER_COLOR_FRACTION=16,
    GPUTEXTUREFETCHOP_GET_COMPUTED_TEX_LOD=17,
    GPUTEXTUREFETCHOP_GET_GRADIENTS=18,
    GPUTEXTUREFETCHOP_GET_WEIGHTS=19,
    GPUTEXTUREFETCHOP_SET_TEX_LOD=24,
    GPUTEXTUREFETCHOP_SET_GRADIENTS_H=25,
    GPUTEXTUREFETCHOP_SET_GRADIENTS_V=26
};

enum _D3DSWAPEFFECT
{
    D3DSWAPEFFECT_DISCARD=1,
    D3DSWAPEFFECT_FLIP=2,
    D3DSWAPEFFECT_COPY=3,
    D3DSWAPEFFECT_FORCE_DWORD=2147483647
};

enum GPUFLOWOP
{
    GPUFLOWOP_NOP=0,
    GPUFLOWOP_EXEC=1,
    GPUFLOWOP_EXEC_END=2,
    GPUFLOWOP_COND_EXEC=3,
    GPUFLOWOP_COND_EXEC_END=4,
    GPUFLOWOP_COND_EXEC_PRED=5,
    GPUFLOWOP_COND_EXEC_PRED_END=6,
    GPUFLOWOP_LOOP_START=7,
    GPUFLOWOP_LOOP_END=8,
    GPUFLOWOP_COND_CALL=9,
    GPUFLOWOP_RETURN=10,
    GPUFLOWOP_COND_JUMP=11,
    GPUFLOWOP_ALLOC=12,
    GPUFLOWOP_COND_EXEC_PRED_CLEAN=13,
    GPUFLOWOP_COND_EXEC_PRED_CLEAN_END=14,
    GPUFLOWOP_VFETCH_END=15
};

enum _D3DXCOMPRESSION_FLAGS
{
    D3DXCOMPRESS_DEFAULT=0,
    D3DXCOMPRESS_FORCE_DWORD=2147483647
};

enum GPUALUSCALAROP
{
    GPUALUSCALAROP_ADD=0,
    GPUALUSCALAROP_ADDPREV=1,
    GPUALUSCALAROP_MUL=2,
    GPUALUSCALAROP_MULPREV=3,
    GPUALUSCALAROP_MULPREV2=4,
    GPUALUSCALAROP_MAX=5,
    GPUALUSCALAROP_MIN=6,
    GPUALUSCALAROP_SEQ=7,
    GPUALUSCALAROP_SGT=8,
    GPUALUSCALAROP_SGE=9,
    GPUALUSCALAROP_SNE=10,
    GPUALUSCALAROP_FRC=11,
    GPUALUSCALAROP_TRUNC=12,
    GPUALUSCALAROP_FLOOR=13,
    GPUALUSCALAROP_EXP=14,
    GPUALUSCALAROP_LOGC=15,
    GPUALUSCALAROP_LOG=16,
    GPUALUSCALAROP_RCPC=17,
    GPUALUSCALAROP_RCPF=18,
    GPUALUSCALAROP_RCP=19,
    GPUALUSCALAROP_RSQC=20,
    GPUALUSCALAROP_RSQF=21,
    GPUALUSCALAROP_RSQ=22,
    GPUALUSCALAROP_MAXA=23,
    GPUALUSCALAROP_MAXAF=24,
    GPUALUSCALAROP_SUB=25,
    GPUALUSCALAROP_SUBPREV=26,
    GPUALUSCALAROP_SETPEQ=27,
    GPUALUSCALAROP_SETPNE=28,
    GPUALUSCALAROP_SETPGT=29,
    GPUALUSCALAROP_SETPGE=30,
    GPUALUSCALAROP_SETPINV=31,
    GPUALUSCALAROP_SETPPOP=32,
    GPUALUSCALAROP_SETPCLR=33,
    GPUALUSCALAROP_SETPRSTR=34,
    GPUALUSCALAROP_KILLEQ=35,
    GPUALUSCALAROP_KILLGT=36,
    GPUALUSCALAROP_KILLGE=37,
    GPUALUSCALAROP_KILLNE=38,
    GPUALUSCALAROP_KILLONE=39,
    GPUALUSCALAROP_SQRT=40,
    GPUALUSCALAROP_MULC0=42,
    GPUALUSCALAROP_MULC1=43,
    GPUALUSCALAROP_ADDC0=44,
    GPUALUSCALAROP_ADDC1=45,
    GPUALUSCALAROP_SUBC0=46,
    GPUALUSCALAROP_SUBC1=47,
    GPUALUSCALAROP_SIN=48,
    GPUALUSCALAROP_COS=49,
    GPUALUSCALAROP_RETAINPREV=50
};

enum _D3DGPUMAJORVERSION
{
    D3DGPUMAJORVERSION_BETAPREVIEW=2,
    D3DGPUMAJORVERSION_FINAL=3
};

enum _D3DCOLORSPACE
{
    D3DCOLORSPACE_RGB=0,
    D3DCOLORSPACE_YCbCr601=1,
    D3DCOLORSPACE_YCbCr709=2,
    D3DCOLORSPACE_FORCE_DWORD=2147483647
};

enum GPUALUVECTOROP
{
    GPUALUVECTOROP_ADD=0,
    GPUALUVECTOROP_MUL=1,
    GPUALUVECTOROP_MAX=2,
    GPUALUVECTOROP_MIN=3,
    GPUALUVECTOROP_SEQ=4,
    GPUALUVECTOROP_SGT=5,
    GPUALUVECTOROP_SGE=6,
    GPUALUVECTOROP_SNE=7,
    GPUALUVECTOROP_FRC=8,
    GPUALUVECTOROP_TRUNC=9,
    GPUALUVECTOROP_FLOOR=10,
    GPUALUVECTOROP_MAD=11,
    GPUALUVECTOROP_CNDEQ=12,
    GPUALUVECTOROP_CNDGE=13,
    GPUALUVECTOROP_CNDGT=14,
    GPUALUVECTOROP_DP4=15,
    GPUALUVECTOROP_DP3=16,
    GPUALUVECTOROP_DP2ADD=17,
    GPUALUVECTOROP_CUBE=18,
    GPUALUVECTOROP_MAX4=19,
    GPUALUVECTOROP_SETPEQP=20,
    GPUALUVECTOROP_SETPNEP=21,
    GPUALUVECTOROP_SETPGTP=22,
    GPUALUVECTOROP_SETPGEP=23,
    GPUALUVECTOROP_KILLEQ=24,
    GPUALUVECTOROP_KILLGT=25,
    GPUALUVECTOROP_KILLGE=26,
    GPUALUVECTOROP_KILLNE=27,
    GPUALUVECTOROP_DST=28,
    GPUALUVECTOROP_MAXA=29
};

enum _D3DLIGHTTYPE
{
    D3DLIGHT_POINT=1,
    D3DLIGHT_SPOT=2,
    D3DLIGHT_DIRECTIONAL=3,
    D3DLIGHT_FORCE_DWORD=2147483647
};

enum GPUALUSRCSELECT
{
    GPUALUSRCSELECT_C=0,
    GPUALUSRCSELECT_R=1
};

enum _D3DHIZFUNC
{
    D3DHIZFUNC_DEFAULT=0,
    D3DHIZFUNC_LESS_EQUAL=1,
    D3DHIZFUNC_GREATER_EQUAL=2,
    D3DHIZFUNC_FORCE_DWORD=2147483647
};

enum GPUEXPORTREGISTER_PS
{
    GPUEXPORTREGISTER_PS_COLOR_0=0,
    GPUEXPORTREGISTER_PS_COLOR_1=1,
    GPUEXPORTREGISTER_PS_COLOR_2=2,
    GPUEXPORTREGISTER_PS_COLOR_3=3,
    GPUEXPORTREGISTER_PS_EXPORT_ADDRESS=32,
    GPUEXPORTREGISTER_PS_EXPORT_DATA_0=33,
    GPUEXPORTREGISTER_PS_EXPORT_DATA_1=34,
    GPUEXPORTREGISTER_PS_EXPORT_DATA_2=35,
    GPUEXPORTREGISTER_PS_EXPORT_DATA_3=36,
    GPUEXPORTREGISTER_PS_EXPORT_DATA_4=37,
    GPUEXPORTREGISTER_PS_DEPTH=61
};

enum _D3DFOGMODE
{
    D3DFOG_NONE=0,
    D3DFOG_EXP=1,
    D3DFOG_EXP2=2,
    D3DFOG_LINEAR=3,
    D3DFOG_FORCE_DWORD=2147483647
};

enum GPUEXPORTREGISTER_VS
{
    GPUEXPORTREGISTER_VS_INTERPOLATOR_0=0,
    GPUEXPORTREGISTER_VS_INTERPOLATOR_1=1,
    GPUEXPORTREGISTER_VS_INTERPOLATOR_2=2,
    GPUEXPORTREGISTER_VS_INTERPOLATOR_3=3,
    GPUEXPORTREGISTER_VS_INTERPOLATOR_4=4,
    GPUEXPORTREGISTER_VS_INTERPOLATOR_5=5,
    GPUEXPORTREGISTER_VS_INTERPOLATOR_6=6,
    GPUEXPORTREGISTER_VS_INTERPOLATOR_7=7,
    GPUEXPORTREGISTER_VS_INTERPOLATOR_8=8,
    GPUEXPORTREGISTER_VS_INTERPOLATOR_9=9,
    GPUEXPORTREGISTER_VS_INTERPOLATOR_10=10,
    GPUEXPORTREGISTER_VS_INTERPOLATOR_11=11,
    GPUEXPORTREGISTER_VS_INTERPOLATOR_12=12,
    GPUEXPORTREGISTER_VS_INTERPOLATOR_13=13,
    GPUEXPORTREGISTER_VS_INTERPOLATOR_14=14,
    GPUEXPORTREGISTER_VS_INTERPOLATOR_15=15,
    GPUEXPORTREGISTER_VS_EXPORT_ADDRESS=32,
    GPUEXPORTREGISTER_VS_EXPORT_DATA_0=33,
    GPUEXPORTREGISTER_VS_EXPORT_DATA_1=34,
    GPUEXPORTREGISTER_VS_EXPORT_DATA_2=35,
    GPUEXPORTREGISTER_VS_EXPORT_DATA_3=36,
    GPUEXPORTREGISTER_VS_EXPORT_DATA_4=37,
    GPUEXPORTREGISTER_VS_POSITION=62,
    GPUEXPORTREGISTER_VS_SPRITE_EDGE_KILL=63
};

enum _D3DTRANSFORMSTATETYPE
{
    D3DTS_WORLD=0,
    D3DTS_VIEW=1,
    D3DTS_PROJECTION=2,
    D3DTS_TEXTURE0=3,
    D3DTS_TEXTURE1=4,
    D3DTS_TEXTURE2=5,
    D3DTS_TEXTURE3=6,
    D3DTS_TEXTURE4=7,
    D3DTS_TEXTURE5=8,
    D3DTS_TEXTURE6=9,
    D3DTS_TEXTURE7=10,
    D3DTS_MAX=11,
    D3DTS_FORCE_DWORD=2147483647
};

enum _XUSER_SIGNIN_STATE
{
    eXUserSigninState_NotSignedIn=0,
    eXUserSigninState_SignedInLocally=1,
    eXUserSigninState_SignedInToLive=2
};

enum _D3DMATERIALCOLORSOURCE
{
    D3DMCS_MATERIAL=0,
    D3DMCS_COLOR1=1,
    D3DMCS_COLOR2=2,
    D3DMCS_FORCE_DWORD=2147483647
};

enum _D3DXPRIORITY_TYPE
{
    D3DXPRIORITY_LOW=0,
    D3DXPRIORITY_HIGH=1,
    D3DXPRIORITY_FORCE_DWORD=2147483647
};

enum _D3DTEXTURESTAGESTATETYPE
{
    D3DTSS_COLOROP=1,
    D3DTSS_COLORARG1=2,
    D3DTSS_COLORARG2=3,
    D3DTSS_ALPHAOP=4,
    D3DTSS_ALPHAARG1=5,
    D3DTSS_ALPHAARG2=6,
    D3DTSS_BUMPENVMAT00=7,
    D3DTSS_BUMPENVMAT01=8,
    D3DTSS_BUMPENVMAT10=9,
    D3DTSS_BUMPENVMAT11=10,
    D3DTSS_TEXCOORDINDEX=11,
    D3DTSS_BUMPENVLSCALE=22,
    D3DTSS_BUMPENVLOFFSET=23,
    D3DTSS_TEXTURETRANSFORMFLAGS=24,
    D3DTSS_COLORARG0=26,
    D3DTSS_ALPHAARG0=27,
    D3DTSS_RESULTARG=28,
    D3DTSS_CONSTANT=32,
    D3DTSS_MAX=33,
    D3DTSS_FORCE_DWORD=2147483647
};

enum _D3DBACKBUFFER_TYPE
{
    D3DBACKBUFFER_TYPE_MONO=0,
    D3DBACKBUFFER_TYPE_LEFT=1,
    D3DBACKBUFFER_TYPE_RIGHT=2,
    D3DBACKBUFFER_TYPE_FORCE_DWORD=2147483647
};

union GPUCOMMAND_CONTEXT_UPDATE// Size=0x4 (Id=232)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long Unused:32;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x20
    };
    unsigned long dword[1];// Offset=0x0 Size=0x4
};

struct _IMAGE_IA64_RUNTIME_FUNCTION_ENTRY// Size=0xc (Id=233)
{
    unsigned long BeginAddress;// Offset=0x0 Size=0x4
    unsigned long EndAddress;// Offset=0x4 Size=0x4
    unsigned long UnwindInfoAddress;// Offset=0x8 Size=0x4
};

struct _PROCESS_HEAP_ENTRY// Size=0x1c (Id=234)
{
    void * lpData;// Offset=0x0 Size=0x4
    unsigned long cbData;// Offset=0x4 Size=0x4
    unsigned char cbOverhead;// Offset=0x8 Size=0x1
    unsigned char iRegionIndex;// Offset=0x9 Size=0x1
    unsigned short wFlags;// Offset=0xa Size=0x2
    union // Size=0x10 (Id=0)
    {
        struct _PROCESS_HEAP_ENTRY::_unnamed_236::<unnamed-type-Block> Block;// Offset=0xc Size=0x10
        struct _PROCESS_HEAP_ENTRY::_unnamed_235::<unnamed-type-Region> Region;// Offset=0xc Size=0x10
    };
};

struct _PROCESS_HEAP_ENTRY::_unnamed_235::<unnamed-type-Region>// Size=0x10 (Id=235)
{
    unsigned long dwCommittedSize;// Offset=0x0 Size=0x4
    unsigned long dwUnCommittedSize;// Offset=0x4 Size=0x4
    void * lpFirstBlock;// Offset=0x8 Size=0x4
    void * lpLastBlock;// Offset=0xc Size=0x4
};

struct _PROCESS_HEAP_ENTRY::_unnamed_236::<unnamed-type-Block>// Size=0x10 (Id=236)
{
    void * hMem;// Offset=0x0 Size=0x4
    unsigned long dwReserved[3];// Offset=0x4 Size=0xc
};

struct _D3DCOLORVALUE// Size=0x10 (Id=237)
{
    float r;// Offset=0x0 Size=0x4
    float g;// Offset=0x4 Size=0x4
    float b;// Offset=0x8 Size=0x4
    float a;// Offset=0xc Size=0x4
};

struct D3DXFLOAT16// Size=0x2 (Id=238)
{
    void D3DXFLOAT16(struct D3DXFLOAT16 & );
    void D3DXFLOAT16(float );
    void D3DXFLOAT16();
    float operator float();
    int operator==(struct D3DXFLOAT16 & );
    int operator!=(struct D3DXFLOAT16 & );
    unsigned short value;// Offset=0x0 Size=0x2
};

struct D3DXCOLOR// Size=0x10 (Id=239)
{
    void D3DXCOLOR(float ,float ,float ,float );
    void D3DXCOLOR(struct _D3DCOLORVALUE & );
    void D3DXCOLOR(struct D3DXFLOAT16 * );
    void D3DXCOLOR(float * );
    void D3DXCOLOR(unsigned long );
    void D3DXCOLOR();
    unsigned long operator unsigned long();
    float * operator float *();
    float * operator const float *();
    struct _D3DCOLORVALUE * operator struct _D3DCOLORVALUE *();
    struct _D3DCOLORVALUE * operator const struct _D3DCOLORVALUE *();
    struct _D3DCOLORVALUE & operator struct _D3DCOLORVALUE &();
    struct _D3DCOLORVALUE & operator const struct _D3DCOLORVALUE &();
    struct D3DXCOLOR & operator=(struct D3DXCOLOR & );
    struct D3DXCOLOR & operator+=(struct D3DXCOLOR & );
    struct D3DXCOLOR & operator-=(struct D3DXCOLOR & );
    struct D3DXCOLOR & operator*=(float );
    struct D3DXCOLOR & operator/=(float );
    struct D3DXCOLOR operator+(struct D3DXCOLOR & );
    struct D3DXCOLOR operator+();
    struct D3DXCOLOR operator-(struct D3DXCOLOR & );
    struct D3DXCOLOR operator-();
    struct D3DXCOLOR operator*(float );
    struct D3DXCOLOR operator/(float );
    int operator==(struct D3DXCOLOR & );
    int operator!=(struct D3DXCOLOR & );
    float r;// Offset=0x0 Size=0x4
    float g;// Offset=0x4 Size=0x4
    float b;// Offset=0x8 Size=0x4
    float a;// Offset=0xc Size=0x4
};

struct D3DXCOLOR// Size=0x10 (Id=240)
{
    void D3DXCOLOR(float ,float ,float ,float );
    void D3DXCOLOR(struct _D3DCOLORVALUE & );
    void D3DXCOLOR(struct D3DXFLOAT16 * );
    void D3DXCOLOR(float * );
    void D3DXCOLOR(unsigned long );
    void D3DXCOLOR();
    unsigned long operator unsigned long();
    float * operator float *();
    float * operator const float *();
    struct _D3DCOLORVALUE * operator struct _D3DCOLORVALUE *();
    struct _D3DCOLORVALUE * operator const struct _D3DCOLORVALUE *();
    struct _D3DCOLORVALUE & operator struct _D3DCOLORVALUE &();
    struct _D3DCOLORVALUE & operator const struct _D3DCOLORVALUE &();
    struct D3DXCOLOR & operator=(struct D3DXCOLOR & );
    struct D3DXCOLOR & operator+=(struct D3DXCOLOR & );
    struct D3DXCOLOR & operator-=(struct D3DXCOLOR & );
    struct D3DXCOLOR & operator*=(float );
    struct D3DXCOLOR & operator/=(float );
    struct D3DXCOLOR operator+(struct D3DXCOLOR & );
    struct D3DXCOLOR operator+();
    struct D3DXCOLOR operator-(struct D3DXCOLOR & );
    struct D3DXCOLOR operator-();
    struct D3DXCOLOR operator*(float );
    struct D3DXCOLOR operator/(float );
    int operator==(struct D3DXCOLOR & );
    int operator!=(struct D3DXCOLOR & );
    float r;// Offset=0x0 Size=0x4
    float g;// Offset=0x4 Size=0x4
    float b;// Offset=0x8 Size=0x4
    float a;// Offset=0xc Size=0x4
};

struct _GUID// Size=0x10 (Id=241)
{
    unsigned long Data1;// Offset=0x0 Size=0x4
    unsigned short Data2;// Offset=0x4 Size=0x2
    unsigned short Data3;// Offset=0x6 Size=0x2
    unsigned char Data4[8];// Offset=0x8 Size=0x8
};

struct _SID_AND_ATTRIBUTES// Size=0x8 (Id=242)
{
    void * Sid;// Offset=0x0 Size=0x4
    unsigned long Attributes;// Offset=0x4 Size=0x4
};

struct _D3DXSHADER_WRITEINFO// Size=0xc (Id=243)
{
    unsigned long Instruction;// Offset=0x0 Size=0x4
    unsigned short Component[4];// Offset=0x4 Size=0x8
};

struct _XINPUT_ACCELERATION// Size=0xc (Id=244)
{
    float XAxis;// Offset=0x0 Size=0x4
    float YAxis;// Offset=0x4 Size=0x4
    float ZAxis;// Offset=0x8 Size=0x4
};

struct _EXCEPTION_RECORD// Size=0x50 (Id=245)
{
    unsigned long ExceptionCode;// Offset=0x0 Size=0x4
    unsigned long ExceptionFlags;// Offset=0x4 Size=0x4
    struct _EXCEPTION_RECORD * ExceptionRecord;// Offset=0x8 Size=0x4
    void * ExceptionAddress;// Offset=0xc Size=0x4
    unsigned long NumberParameters;// Offset=0x10 Size=0x4
    unsigned long ExceptionInformation[15];// Offset=0x14 Size=0x3c
};

union GPUALU_INSTRUCTION// Size=0xc (Id=246)
{
    struct // Size=0xc (Id=0)
    {
        unsigned long VectorDest:6;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x6
        unsigned long VectorDestRelative:1;// Offset=0x0 Size=0x4 BitOffset=0x6 BitSize=0x1
        unsigned long AbsConstants:1;// Offset=0x0 Size=0x4 BitOffset=0x7 BitSize=0x1
        unsigned long ScalarDest:6;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x6
        unsigned long ScalarDestRelative:1;// Offset=0x0 Size=0x4 BitOffset=0xe BitSize=0x1
        unsigned long ResultExport:1;// Offset=0x0 Size=0x4 BitOffset=0xf BitSize=0x1
        unsigned long VectorMask:4;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x4
        unsigned long ScalarMask:4;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0x4
        unsigned long VectorSaturate:1;// Offset=0x0 Size=0x4 BitOffset=0x18 BitSize=0x1
        unsigned long ScalarSaturate:1;// Offset=0x0 Size=0x4 BitOffset=0x19 BitSize=0x1
        unsigned long ScalarOp:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
        unsigned long SrcCSwizzle:8;// Offset=0x4 Size=0x4 BitOffset=0x0 BitSize=0x8
        unsigned long SrcBSwizzle:8;// Offset=0x4 Size=0x4 BitOffset=0x8 BitSize=0x8
        unsigned long SrcASwizzle:8;// Offset=0x4 Size=0x4 BitOffset=0x10 BitSize=0x8
        unsigned long SrcCNegate:1;// Offset=0x4 Size=0x4 BitOffset=0x18 BitSize=0x1
        unsigned long SrcBNegate:1;// Offset=0x4 Size=0x4 BitOffset=0x19 BitSize=0x1
        unsigned long SrcANegate:1;// Offset=0x4 Size=0x4 BitOffset=0x1a BitSize=0x1
        unsigned long PredicationCondition:1;// Offset=0x4 Size=0x4 BitOffset=0x1b BitSize=0x1
        unsigned long Predicated:1;// Offset=0x4 Size=0x4 BitOffset=0x1c BitSize=0x1
        unsigned long RelativeAddress:1;// Offset=0x4 Size=0x4 BitOffset=0x1d BitSize=0x1
        unsigned long Constant1Relative:1;// Offset=0x4 Size=0x4 BitOffset=0x1e BitSize=0x1
        unsigned long Constant0Relative:1;// Offset=0x4 Size=0x4 BitOffset=0x1f BitSize=0x1
        unsigned long SrcCRegConst:8;// Offset=0x8 Size=0x4 BitOffset=0x0 BitSize=0x8
        unsigned long SrcBRegConst:8;// Offset=0x8 Size=0x4 BitOffset=0x8 BitSize=0x8
        unsigned long SrcARegConst:8;// Offset=0x8 Size=0x4 BitOffset=0x10 BitSize=0x8
        unsigned long VectorOp:5;// Offset=0x8 Size=0x4 BitOffset=0x18 BitSize=0x5
        unsigned long SrcCSelect:1;// Offset=0x8 Size=0x4 BitOffset=0x1d BitSize=0x1
        unsigned long SrcBSelect:1;// Offset=0x8 Size=0x4 BitOffset=0x1e BitSize=0x1
        unsigned long SrcASelect:1;// Offset=0x8 Size=0x4 BitOffset=0x1f BitSize=0x1
    };
    unsigned long dword[3];// Offset=0x0 Size=0xc
};

struct _XMBYTE4// Size=0x4 (Id=247)
{
    union // Size=0x4 (Id=0)
    {
        char x;// Offset=0x0 Size=0x1
        char y;// Offset=0x1 Size=0x1
        char z;// Offset=0x2 Size=0x1
        char w;// Offset=0x3 Size=0x1
        unsigned int v;// Offset=0x0 Size=0x4
    };
    void _XMBYTE4(float * );
    void _XMBYTE4(float ,float ,float ,float );
    void _XMBYTE4(char * );
    void _XMBYTE4(unsigned int );
    void _XMBYTE4(char ,char ,char ,char );
    void _XMBYTE4();
    struct _XMBYTE4 & operator=(struct _XMBYTE4 & );
};

struct _XMBYTE4// Size=0x4 (Id=248)
{
    union // Size=0x4 (Id=0)
    {
        char x;// Offset=0x0 Size=0x1
        char y;// Offset=0x1 Size=0x1
        char z;// Offset=0x2 Size=0x1
        char w;// Offset=0x3 Size=0x1
        unsigned int v;// Offset=0x0 Size=0x4
    };
    void _XMBYTE4(float * );
    void _XMBYTE4(float ,float ,float ,float );
    void _XMBYTE4(char * );
    void _XMBYTE4(unsigned int );
    void _XMBYTE4(char ,char ,char ,char );
    void _XMBYTE4();
    struct _XMBYTE4 & operator=(struct _XMBYTE4 & );
};

struct _XSESSION_SEARCHRESULT// Size=0x5c (Id=249)
{
    struct _XSESSION_INFO info;// Offset=0x0 Size=0x3c
    unsigned long dwOpenPublicSlots;// Offset=0x3c Size=0x4
    unsigned long dwOpenPrivateSlots;// Offset=0x40 Size=0x4
    unsigned long dwFilledPublicSlots;// Offset=0x44 Size=0x4
    unsigned long dwFilledPrivateSlots;// Offset=0x48 Size=0x4
    unsigned long cProperties;// Offset=0x4c Size=0x4
    unsigned long cContexts;// Offset=0x50 Size=0x4
    struct _XUSER_PROPERTY * pProperties;// Offset=0x54 Size=0x4
    struct _XUSER_CONTEXT * pContexts;// Offset=0x58 Size=0x4
};

struct D3DVertexDeclaration : public D3DResource// Size=0x18 (Id=250)
{
    HRESULT GetDeclaration(struct _D3DVERTEXELEMENT9 * ,unsigned int * );
};

struct _D3DVECTOR// Size=0xc (Id=251)
{
    float x;// Offset=0x0 Size=0x4
    float y;// Offset=0x4 Size=0x4
    float z;// Offset=0x8 Size=0x4
};

struct D3DXVECTOR3 : public _D3DVECTOR// Size=0xc (Id=252)
{
    void D3DXVECTOR3(float ,float ,float );
    void D3DXVECTOR3(struct D3DXFLOAT16 * );
    void D3DXVECTOR3(struct _D3DVECTOR & );
    void D3DXVECTOR3(float * );
    void D3DXVECTOR3();
    float * operator float *();
    float * operator const float *();
    struct D3DXVECTOR3 & operator=(struct D3DXVECTOR3 & );
    struct D3DXVECTOR3 & operator+=(struct D3DXVECTOR3 & );
    struct D3DXVECTOR3 & operator-=(struct D3DXVECTOR3 & );
    struct D3DXVECTOR3 & operator*=(float );
    struct D3DXVECTOR3 & operator/=(float );
    struct D3DXVECTOR3 operator+(struct D3DXVECTOR3 & );
    struct D3DXVECTOR3 operator+();
    struct D3DXVECTOR3 operator-(struct D3DXVECTOR3 & );
    struct D3DXVECTOR3 operator-();
    struct D3DXVECTOR3 operator*(float );
    struct D3DXVECTOR3 operator/(float );
    int operator==(struct D3DXVECTOR3 & );
    int operator!=(struct D3DXVECTOR3 & );
};

struct D3DXVECTOR3 : public _D3DVECTOR// Size=0xc (Id=253)
{
    void D3DXVECTOR3(float ,float ,float );
    void D3DXVECTOR3(struct D3DXFLOAT16 * );
    void D3DXVECTOR3(struct _D3DVECTOR & );
    void D3DXVECTOR3(float * );
    void D3DXVECTOR3();
    float * operator float *();
    float * operator const float *();
    struct D3DXVECTOR3 & operator=(struct D3DXVECTOR3 & );
    struct D3DXVECTOR3 & operator+=(struct D3DXVECTOR3 & );
    struct D3DXVECTOR3 & operator-=(struct D3DXVECTOR3 & );
    struct D3DXVECTOR3 & operator*=(float );
    struct D3DXVECTOR3 & operator/=(float );
    struct D3DXVECTOR3 operator+(struct D3DXVECTOR3 & );
    struct D3DXVECTOR3 operator+();
    struct D3DXVECTOR3 operator-(struct D3DXVECTOR3 & );
    struct D3DXVECTOR3 operator-();
    struct D3DXVECTOR3 operator*(float );
    struct D3DXVECTOR3 operator/(float );
    int operator==(struct D3DXVECTOR3 & );
    int operator!=(struct D3DXVECTOR3 & );
};

struct _TOKEN_CONTROL// Size=0x28 (Id=254)
{
    struct _LUID TokenId;// Offset=0x0 Size=0x8
    struct _LUID AuthenticationId;// Offset=0x8 Size=0x8
    struct _LUID ModifiedId;// Offset=0x10 Size=0x8
    struct _TOKEN_SOURCE TokenSource;// Offset=0x18 Size=0x10
};

struct _s__CatchableType// Size=0x1c (Id=255)
{
    unsigned int properties;// Offset=0x0 Size=0x4
    struct _TypeDescriptor * pType;// Offset=0x4 Size=0x4
    struct _PMD thisDisplacement;// Offset=0x8 Size=0xc
    int sizeOrOffset;// Offset=0x14 Size=0x4
    void  ( * copyFunction)();// Offset=0x18 Size=0x4
};

struct _s__CatchableTypeArray// Size=0x4 (Id=256)
{
    int nCatchableTypes;// Offset=0x0 Size=0x4
    struct _s__CatchableType * arrayOfCatchableTypes[0];
};

struct _D3DSURFACE_DESC// Size=0x20 (Id=257)
{
    enum _D3DFORMAT Format;// Offset=0x0 Size=0x4
    enum _D3DRESOURCETYPE Type;// Offset=0x4 Size=0x4
    unsigned long Usage;// Offset=0x8 Size=0x4
    unsigned long Pool;// Offset=0xc Size=0x4
    enum _D3DMULTISAMPLE_TYPE MultiSampleType;// Offset=0x10 Size=0x4
    unsigned long MultiSampleQuality;// Offset=0x14 Size=0x4
    unsigned int Width;// Offset=0x18 Size=0x4
    unsigned int Height;// Offset=0x1c Size=0x4
};

struct _RECTL// Size=0x10 (Id=258)
{
    long left;// Offset=0x0 Size=0x4
    long top;// Offset=0x4 Size=0x4
    long right;// Offset=0x8 Size=0x4
    long bottom;// Offset=0xc Size=0x4
};

struct _XGUCODE_PASS_DESCRIPTION// Size=0x10 (Id=259)
{
    union GPU_PROGRAMCONTROL ProgramControl;// Offset=0x0 Size=0x4
    union GPU_CONTEXTMISC ContextMisc;// Offset=0x4 Size=0x4
    unsigned long PhysicalMicrocodeOffset;// Offset=0x8 Size=0x4
    unsigned long PhysicalMicrocodeSize;// Offset=0xc Size=0x4
};

struct _D3DLOCKED_RECT// Size=0x8 (Id=260)
{
    int Pitch;// Offset=0x0 Size=0x4
    void * pBits;// Offset=0x4 Size=0x4
};

struct _ACE_HEADER// Size=0x4 (Id=261)
{
    unsigned char AceType;// Offset=0x0 Size=0x1
    unsigned char AceFlags;// Offset=0x1 Size=0x1
    unsigned short AceSize;// Offset=0x2 Size=0x2
};

struct HGLRC__// Size=0x4 (Id=262)
{
    int unused;// Offset=0x0 Size=0x4
};

struct fd_set// Size=0x104 (Id=263)
{
    unsigned int fd_count;// Offset=0x0 Size=0x4
    unsigned int fd_array[64];// Offset=0x4 Size=0x100
};

union GPU_WRAPPING1// Size=0x4 (Id=264)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long Wrap0:4;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x4
        unsigned long Wrap1:4;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x4
        unsigned long Wrap2:4;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x4
        unsigned long Wrap3:4;// Offset=0x0 Size=0x4 BitOffset=0xc BitSize=0x4
        unsigned long Wrap4:4;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x4
        unsigned long Wrap5:4;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0x4
        unsigned long Wrap6:4;// Offset=0x0 Size=0x4 BitOffset=0x18 BitSize=0x4
        unsigned long Wrap7:4;// Offset=0x0 Size=0x4 BitOffset=0x1c BitSize=0x4
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

struct _XMHALF4// Size=0x8 (Id=265)
{
    unsigned short x;// Offset=0x0 Size=0x2
    unsigned short y;// Offset=0x2 Size=0x2
    unsigned short z;// Offset=0x4 Size=0x2
    unsigned short w;// Offset=0x6 Size=0x2
    void _XMHALF4(float * );
    void _XMHALF4(float ,float ,float ,float );
    void _XMHALF4(unsigned short * );
    void _XMHALF4(unsigned short ,unsigned short ,unsigned short ,unsigned short );
    void _XMHALF4();
    struct _XMHALF4 & operator=(struct _XMHALF4 & );
};

struct _XMHALF4// Size=0x8 (Id=266)
{
    unsigned short x;// Offset=0x0 Size=0x2
    unsigned short y;// Offset=0x2 Size=0x2
    unsigned short z;// Offset=0x4 Size=0x2
    unsigned short w;// Offset=0x6 Size=0x2
    void _XMHALF4(float * );
    void _XMHALF4(float ,float ,float ,float );
    void _XMHALF4(unsigned short * );
    void _XMHALF4(unsigned short ,unsigned short ,unsigned short ,unsigned short );
    void _XMHALF4();
    struct _XMHALF4 & operator=(struct _XMHALF4 & );
};

struct D3DBaseTexture : public D3DResource// Size=0x34 (Id=267)
{
    unsigned long GetLevelCount();
    HRESULT GetTailDesc(struct _D3DMIPTAIL_DESC * );
    HRESULT LockTail(unsigned int ,struct _D3DLOCKED_TAIL * ,unsigned long );
    HRESULT AsyncLockTail(unsigned long long ,unsigned int ,struct _D3DLOCKED_TAIL * ,unsigned long );
    HRESULT UnlockTail(unsigned int );
    unsigned char __align0[24];// Offset=0x0 Size=0x18
    unsigned long MipFlush;// Offset=0x18 Size=0x4
    union GPUTEXTURE_FETCH_CONSTANT Format;// Offset=0x1c Size=0x18
};

struct _XMUDHEN3// Size=0x4 (Id=268)
{
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            unsigned int x:10;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xa
            unsigned int y:11;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0xb
            unsigned int z:11;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0xb
        };
        unsigned int v;// Offset=0x0 Size=0x4
    };
    void _XMUDHEN3(float * );
    void _XMUDHEN3(float ,float ,float );
    void _XMUDHEN3(unsigned int );
    void _XMUDHEN3();
    unsigned int operator unsigned int();
    struct _XMUDHEN3 & operator=(const unsigned int );
    struct _XMUDHEN3 & operator=(struct _XMUDHEN3 & );
};

struct _XMUDHEN3// Size=0x4 (Id=269)
{
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            unsigned int x:10;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xa
            unsigned int y:11;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0xb
            unsigned int z:11;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0xb
        };
        unsigned int v;// Offset=0x0 Size=0x4
    };
    void _XMUDHEN3(float * );
    void _XMUDHEN3(float ,float ,float );
    void _XMUDHEN3(unsigned int );
    void _XMUDHEN3();
    unsigned int operator unsigned int();
    struct _XMUDHEN3 & operator=(const unsigned int );
    struct _XMUDHEN3 & operator=(struct _XMUDHEN3 & );
};

struct _D3DXSHADER_TYPEINFO// Size=0x10 (Id=270)
{
    unsigned short Class;// Offset=0x0 Size=0x2
    unsigned short Type;// Offset=0x2 Size=0x2
    unsigned short Rows;// Offset=0x4 Size=0x2
    unsigned short Columns;// Offset=0x6 Size=0x2
    unsigned short Elements;// Offset=0x8 Size=0x2
    unsigned short StructMembers;// Offset=0xa Size=0x2
    unsigned long StructMemberInfo;// Offset=0xc Size=0x4
};

struct _XMDHEN3// Size=0x4 (Id=271)
{
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            int x:10;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xa
            int y:11;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0xb
            int z:11;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0xb
        };
        unsigned int v;// Offset=0x0 Size=0x4
    };
    void _XMDHEN3(float * );
    void _XMDHEN3(float ,float ,float );
    void _XMDHEN3(unsigned int );
    void _XMDHEN3();
    unsigned int operator unsigned int();
    struct _XMDHEN3 & operator=(const unsigned int );
    struct _XMDHEN3 & operator=(struct _XMDHEN3 & );
};

struct _XMDHEN3// Size=0x4 (Id=272)
{
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            int x:10;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xa
            int y:11;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0xb
            int z:11;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0xb
        };
        unsigned int v;// Offset=0x0 Size=0x4
    };
    void _XMDHEN3(float * );
    void _XMDHEN3(float ,float ,float );
    void _XMDHEN3(unsigned int );
    void _XMDHEN3();
    unsigned int operator unsigned int();
    struct _XMDHEN3 & operator=(const unsigned int );
    struct _XMDHEN3 & operator=(struct _XMDHEN3 & );
};

struct _XMUDEC4// Size=0x4 (Id=273)
{
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            unsigned int x:10;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xa
            unsigned int y:10;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0xa
            unsigned int z:10;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0xa
            unsigned int w:2;// Offset=0x0 Size=0x4 BitOffset=0x1e BitSize=0x2
        };
        unsigned int v;// Offset=0x0 Size=0x4
    };
    void _XMUDEC4(float * );
    void _XMUDEC4(float ,float ,float ,float );
    void _XMUDEC4(unsigned int );
    void _XMUDEC4();
    unsigned int operator unsigned int();
    struct _XMUDEC4 & operator=(const unsigned int );
    struct _XMUDEC4 & operator=(struct _XMUDEC4 & );
};

struct _XMUDEC4// Size=0x4 (Id=274)
{
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            unsigned int x:10;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xa
            unsigned int y:10;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0xa
            unsigned int z:10;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0xa
            unsigned int w:2;// Offset=0x0 Size=0x4 BitOffset=0x1e BitSize=0x2
        };
        unsigned int v;// Offset=0x0 Size=0x4
    };
    void _XMUDEC4(float * );
    void _XMUDEC4(float ,float ,float ,float );
    void _XMUDEC4(unsigned int );
    void _XMUDEC4();
    unsigned int operator unsigned int();
    struct _XMUDEC4 & operator=(const unsigned int );
    struct _XMUDEC4 & operator=(struct _XMUDEC4 & );
};

struct _XSTORAGE_ENUMERATE_RESULTS// Size=0xc (Id=275)
{
    unsigned long dwTotalNumItems;// Offset=0x0 Size=0x4
    unsigned long dwNumItemsReturned;// Offset=0x4 Size=0x4
    struct _XSTORAGE_FILE_INFO * pItems;// Offset=0x8 Size=0x4
};

struct _XMEMCODEC_PARAMETERS_LZX// Size=0xc (Id=276)
{
    unsigned long Flags;// Offset=0x0 Size=0x4
    unsigned long WindowSize;// Offset=0x4 Size=0x4
    unsigned long CompressionPartitionSize;// Offset=0x8 Size=0x4
};

struct _D3DXFRAGMENT_DESC// Size=0x8 (Id=277)
{
    char * Name;// Offset=0x0 Size=0x4
    unsigned long Target;// Offset=0x4 Size=0x4
};

struct _FLOAT128// Size=0x10 (Id=278)
{
    long long LowPart;// Offset=0x0 Size=0x8
    long long HighPart;// Offset=0x8 Size=0x8
};

struct HKL__// Size=0x4 (Id=279)
{
    int unused;// Offset=0x0 Size=0x4
};

struct _XMUDHENN3// Size=0x4 (Id=280)
{
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            unsigned int x:10;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xa
            unsigned int y:11;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0xb
            unsigned int z:11;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0xb
        };
        unsigned int v;// Offset=0x0 Size=0x4
    };
    void _XMUDHENN3(float * );
    void _XMUDHENN3(float ,float ,float );
    void _XMUDHENN3(unsigned int );
    void _XMUDHENN3();
    unsigned int operator unsigned int();
    struct _XMUDHENN3 & operator=(const unsigned int );
    struct _XMUDHENN3 & operator=(struct _XMUDHENN3 & );
};

struct _XMUDHENN3// Size=0x4 (Id=281)
{
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            unsigned int x:10;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xa
            unsigned int y:11;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0xb
            unsigned int z:11;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0xb
        };
        unsigned int v;// Offset=0x0 Size=0x4
    };
    void _XMUDHENN3(float * );
    void _XMUDHENN3(float ,float ,float );
    void _XMUDHENN3(unsigned int );
    void _XMUDHENN3();
    unsigned int operator unsigned int();
    struct _XMUDHENN3 & operator=(const unsigned int );
    struct _XMUDHENN3 & operator=(struct _XMUDHENN3 & );
};

struct _XSTORAGE_FACILITY_INFO_GAME_CLIP// Size=0x4 (Id=282)
{
    unsigned long dwLeaderboardID;// Offset=0x0 Size=0x4
};

struct _D3DPRESENT_PARAMETERS_// Size=0x7c (Id=283)
{
    unsigned int BackBufferWidth;// Offset=0x0 Size=0x4
    unsigned int BackBufferHeight;// Offset=0x4 Size=0x4
    enum _D3DFORMAT BackBufferFormat;// Offset=0x8 Size=0x4
    unsigned int BackBufferCount;// Offset=0xc Size=0x4
    enum _D3DMULTISAMPLE_TYPE MultiSampleType;// Offset=0x10 Size=0x4
    unsigned long MultiSampleQuality;// Offset=0x14 Size=0x4
    enum _D3DSWAPEFFECT SwapEffect;// Offset=0x18 Size=0x4
    struct HWND__ * hDeviceWindow;// Offset=0x1c Size=0x4
    int Windowed;// Offset=0x20 Size=0x4
    int EnableAutoDepthStencil;// Offset=0x24 Size=0x4
    enum _D3DFORMAT AutoDepthStencilFormat;// Offset=0x28 Size=0x4
    unsigned long Flags;// Offset=0x2c Size=0x4
    unsigned int FullScreen_RefreshRateInHz;// Offset=0x30 Size=0x4
    unsigned int PresentationInterval;// Offset=0x34 Size=0x4
    int DisableAutoBackBuffer;// Offset=0x38 Size=0x4
    int DisableAutoFrontBuffer;// Offset=0x3c Size=0x4
    enum _D3DFORMAT FrontBufferFormat;// Offset=0x40 Size=0x4
    enum _D3DCOLORSPACE FrontBufferColorSpace;// Offset=0x44 Size=0x4
    struct _D3DRING_BUFFER_PARAMETERS RingBufferParameters;// Offset=0x48 Size=0x18
    struct _D3DVIDEO_SCALER_PARAMETERS VideoScalerParameters;// Offset=0x60 Size=0x1c
};

struct _POINTL// Size=0x8 (Id=284)
{
    long x;// Offset=0x0 Size=0x4
    long y;// Offset=0x4 Size=0x4
};

struct _XGCPUSHADERCONTEXT// Size=0x60c0 (Id=285)
{
    struct __vector4 v[16][14];// Offset=0x0 Size=0xe00
    struct __vector4 o[16][14];// Offset=0xe00 Size=0xe00
    struct __vector4 r[32][14];// Offset=0x1c00 Size=0x1c00
    struct __vector4 c[256];// Offset=0x3800 Size=0x1000
    struct __vector4 p[14];// Offset=0x4800 Size=0xe0
    struct __vector4 xBranchMask;// Offset=0x48e0 Size=0x10
    struct __vector4 xBreakMask;// Offset=0x48f0 Size=0x10
    struct __vector4 xUR0;// Offset=0x4900 Size=0x10
    struct __vector4 xUR1;// Offset=0x4910 Size=0x10
    struct __vector4 xUR2;// Offset=0x4920 Size=0x10
    struct __vector4 xUR3;// Offset=0x4930 Size=0x10
    struct __vector4 xSR0[14];// Offset=0x4940 Size=0xe0
    struct __vector4 xSR1[14];// Offset=0x4a20 Size=0xe0
    struct __vector4 xSR2[14];// Offset=0x4b00 Size=0xe0
    struct __vector4 xSR3[14];// Offset=0x4be0 Size=0xe0
    struct __vector4 xCR0;// Offset=0x4cc0 Size=0x10
    struct __vector4 xCR1;// Offset=0x4cd0 Size=0x10
    struct __vector4 xBranchMaskStack[32];// Offset=0x4ce0 Size=0x200
    int i[32][4];// Offset=0x4ee0 Size=0x200
    short a[14][4];// Offset=0x50e0 Size=0x70
    int xLoopCounterStack[32];// Offset=0x5150 Size=0x80
    int xLoopRepeatStack[32];// Offset=0x51d0 Size=0x80
    unsigned int xBranchMaskStackIndex;// Offset=0x5250 Size=0x4
    unsigned int xLoopCounterStackIndex;// Offset=0x5254 Size=0x4
    unsigned int xLoopRepeatStackIndex;// Offset=0x5258 Size=0x4
    int l;// Offset=0x525c Size=0x4
    int xLoopRepeat;// Offset=0x5260 Size=0x4
    unsigned int xCondition;// Offset=0x5264 Size=0x4
    unsigned long long b;// Offset=0x5268 Size=0x8
    unsigned int VertexCount;// Offset=0x5270 Size=0x4
    unsigned int PrefetchCount;// Offset=0x5274 Size=0x4
    int InvalidateCache;// Offset=0x5278 Size=0x4
    struct _XGCPUSHADERVERTEXSTREAM PrefetchStream[8];// Offset=0x527c Size=0x40
    struct _XGCPUSHADERVERTEXSTREAM InputStream[16][14];// Offset=0x52bc Size=0x700
    struct _XGCPUSHADERVERTEXSTREAM OutputStream[16][14];// Offset=0x59bc Size=0x700
};

struct _D3DXMACRO// Size=0x8 (Id=286)
{
    char * Name;// Offset=0x0 Size=0x4
    char * Definition;// Offset=0x4 Size=0x4
};

struct _D3DXSHADER_STRUCTMEMBERINFO// Size=0x8 (Id=287)
{
    unsigned long Name;// Offset=0x0 Size=0x4
    unsigned long TypeInfo;// Offset=0x4 Size=0x4
};

struct _IMAGE_OPTIONAL_HEADER64// Size=0xf0 (Id=288)
{
    unsigned short Magic;// Offset=0x0 Size=0x2
    unsigned char MajorLinkerVersion;// Offset=0x2 Size=0x1
    unsigned char MinorLinkerVersion;// Offset=0x3 Size=0x1
    unsigned long SizeOfCode;// Offset=0x4 Size=0x4
    unsigned long SizeOfInitializedData;// Offset=0x8 Size=0x4
    unsigned long SizeOfUninitializedData;// Offset=0xc Size=0x4
    unsigned long AddressOfEntryPoint;// Offset=0x10 Size=0x4
    unsigned long BaseOfCode;// Offset=0x14 Size=0x4
    unsigned long long ImageBase;// Offset=0x18 Size=0x8
    unsigned long SectionAlignment;// Offset=0x20 Size=0x4
    unsigned long FileAlignment;// Offset=0x24 Size=0x4
    unsigned short MajorOperatingSystemVersion;// Offset=0x28 Size=0x2
    unsigned short MinorOperatingSystemVersion;// Offset=0x2a Size=0x2
    unsigned short MajorImageVersion;// Offset=0x2c Size=0x2
    unsigned short MinorImageVersion;// Offset=0x2e Size=0x2
    unsigned short MajorSubsystemVersion;// Offset=0x30 Size=0x2
    unsigned short MinorSubsystemVersion;// Offset=0x32 Size=0x2
    unsigned long Win32VersionValue;// Offset=0x34 Size=0x4
    unsigned long SizeOfImage;// Offset=0x38 Size=0x4
    unsigned long SizeOfHeaders;// Offset=0x3c Size=0x4
    unsigned long CheckSum;// Offset=0x40 Size=0x4
    unsigned short Subsystem;// Offset=0x44 Size=0x2
    unsigned short DllCharacteristics;// Offset=0x46 Size=0x2
    unsigned long long SizeOfStackReserve;// Offset=0x48 Size=0x8
    unsigned long long SizeOfStackCommit;// Offset=0x50 Size=0x8
    unsigned long long SizeOfHeapReserve;// Offset=0x58 Size=0x8
    unsigned long long SizeOfHeapCommit;// Offset=0x60 Size=0x8
    unsigned long LoaderFlags;// Offset=0x68 Size=0x4
    unsigned long NumberOfRvaAndSizes;// Offset=0x6c Size=0x4
    struct _IMAGE_DATA_DIRECTORY DataDirectory[16];// Offset=0x70 Size=0x80
};

union GPUPERFCOUNTER_CNTL// Size=0x4 (Id=289)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long State:4;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x4
        unsigned long EnableMode:2;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x2
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

struct _D3DXEFFECT_DESC// Size=0x10 (Id=290)
{
    char * Creator;// Offset=0x0 Size=0x4
    unsigned int Parameters;// Offset=0x4 Size=0x4
    unsigned int Techniques;// Offset=0x8 Size=0x4
    unsigned int Functions;// Offset=0xc Size=0x4
};

struct _s__RTTIClassHierarchyDescriptor// Size=0x10 (Id=291)
{
    unsigned long signature;// Offset=0x0 Size=0x4
    unsigned long attributes;// Offset=0x4 Size=0x4
    unsigned long numBaseClasses;// Offset=0x8 Size=0x4
    struct _s__RTTIBaseClassArray * pBaseClassArray;// Offset=0xc Size=0x4
};

struct _s__RTTICompleteObjectLocator// Size=0x14 (Id=292)
{
    unsigned long signature;// Offset=0x0 Size=0x4
    unsigned long offset;// Offset=0x4 Size=0x4
    unsigned long cdOffset;// Offset=0x8 Size=0x4
    struct _TypeDescriptor * pTypeDescriptor;// Offset=0xc Size=0x4
    struct _s__RTTIClassHierarchyDescriptor * pClassDescriptor;// Offset=0x10 Size=0x4
};

union _IMAGE_AUX_SYMBOL// Size=0x12 (Id=293)
{
    union // Size=0x12 (Id=0)
    {
        struct <unnamed-type-Sym>// Size=0x12 (Id=11347)
        {
            unsigned long TagIndex;// Offset=0x0 Size=0x4
            union <unnamed-type-Misc>// Size=0x4 (Id=11349)
            {
                struct <unnamed-type-LnSz>// Size=0x4 (Id=11350)
                {
                    unsigned short Linenumber;// Offset=0x0 Size=0x2
                    unsigned short Size;// Offset=0x2 Size=0x2
                };
                struct _IMAGE_AUX_SYMBOL::<unnamed-type-Sym>::<unnamed-type-Misc>::<unnamed-type-LnSz> LnSz;// Offset=0x0 Size=0x4
                unsigned long TotalSize;// Offset=0x0 Size=0x4
            };
            union _IMAGE_AUX_SYMBOL::<unnamed-type-Sym>::<unnamed-type-Misc> Misc;// Offset=0x4 Size=0x4
            union <unnamed-type-FcnAry>// Size=0x8 (Id=11356)
            {
                struct <unnamed-type-Function>// Size=0x8 (Id=11357)
                {
                    unsigned long PointerToLinenumber;// Offset=0x0 Size=0x4
                    unsigned long PointerToNextFunction;// Offset=0x4 Size=0x4
                };
                struct _IMAGE_AUX_SYMBOL::<unnamed-type-Sym>::<unnamed-type-FcnAry>::<unnamed-type-Function> Function;// Offset=0x0 Size=0x8
                struct <unnamed-type-Array>// Size=0x8 (Id=11361)
                {
                    unsigned short Dimension[4];// Offset=0x0 Size=0x8
                };
                struct _IMAGE_AUX_SYMBOL::<unnamed-type-Sym>::<unnamed-type-FcnAry>::<unnamed-type-Array> Array;// Offset=0x0 Size=0x8
            };
            union _IMAGE_AUX_SYMBOL::<unnamed-type-Sym>::<unnamed-type-FcnAry> FcnAry;// Offset=0x8 Size=0x8
            unsigned short TvIndex;// Offset=0x10 Size=0x2
        };
        struct _IMAGE_AUX_SYMBOL::<unnamed-type-Sym> Sym;// Offset=0x0 Size=0x12
        struct <unnamed-type-File>// Size=0x12 (Id=11367)
        {
            unsigned char Name[18];// Offset=0x0 Size=0x12
        };
        struct _IMAGE_AUX_SYMBOL::<unnamed-type-File> File;// Offset=0x0 Size=0x12
        struct <unnamed-type-Section>// Size=0x10 (Id=11371)
        {
            unsigned long Length;// Offset=0x0 Size=0x4
            unsigned short NumberOfRelocations;// Offset=0x4 Size=0x2
            unsigned short NumberOfLinenumbers;// Offset=0x6 Size=0x2
            unsigned long CheckSum;// Offset=0x8 Size=0x4
            short Number;// Offset=0xc Size=0x2
            unsigned char Selection;// Offset=0xe Size=0x1
        };
        struct _IMAGE_AUX_SYMBOL::<unnamed-type-Section> Section;// Offset=0x0 Size=0x10
    };
};

struct _BY_HANDLE_FILE_INFORMATION// Size=0x34 (Id=294)
{
    unsigned long dwFileAttributes;// Offset=0x0 Size=0x4
    struct _FILETIME ftCreationTime;// Offset=0x4 Size=0x8
    struct _FILETIME ftLastAccessTime;// Offset=0xc Size=0x8
    struct _FILETIME ftLastWriteTime;// Offset=0x14 Size=0x8
    unsigned long dwVolumeSerialNumber;// Offset=0x1c Size=0x4
    unsigned long nFileSizeHigh;// Offset=0x20 Size=0x4
    unsigned long nFileSizeLow;// Offset=0x24 Size=0x4
    unsigned long nNumberOfLinks;// Offset=0x28 Size=0x4
    unsigned long nFileIndexHigh;// Offset=0x2c Size=0x4
    unsigned long nFileIndexLow;// Offset=0x30 Size=0x4
};

struct __vector4// Size=0x10 (Id=295)
{
    union // Size=0x10 (Id=0)
    {
        float x;// Offset=0x0 Size=0x4
        float y;// Offset=0x4 Size=0x4
        float z;// Offset=0x8 Size=0x4
        float w;// Offset=0xc Size=0x4
        float v[4];// Offset=0x0 Size=0x10
        unsigned int u[4];// Offset=0x0 Size=0x10
    };
};

struct _XMSHORT4// Size=0x8 (Id=296)
{
    short x;// Offset=0x0 Size=0x2
    short y;// Offset=0x2 Size=0x2
    short z;// Offset=0x4 Size=0x2
    short w;// Offset=0x6 Size=0x2
    void _XMSHORT4(float * );
    void _XMSHORT4(float ,float ,float ,float );
    void _XMSHORT4(short * );
    void _XMSHORT4(short ,short ,short ,short );
    void _XMSHORT4();
    struct _XMSHORT4 & operator=(struct _XMSHORT4 & );
};

struct _XMSHORT4// Size=0x8 (Id=297)
{
    short x;// Offset=0x0 Size=0x2
    short y;// Offset=0x2 Size=0x2
    short z;// Offset=0x4 Size=0x2
    short w;// Offset=0x6 Size=0x2
    void _XMSHORT4(float * );
    void _XMSHORT4(float ,float ,float ,float );
    void _XMSHORT4(short * );
    void _XMSHORT4(short ,short ,short ,short );
    void _XMSHORT4();
    struct _XMSHORT4 & operator=(struct _XMSHORT4 & );
};

struct ID3DXAnimationCallbackHandler// Size=0x4 (Id=298)
{
    HRESULT HandleCallback(unsigned int ,void * );
    void ID3DXAnimationCallbackHandler(struct ID3DXAnimationCallbackHandler & );
    void ID3DXAnimationCallbackHandler();
    struct ID3DXAnimationCallbackHandler & operator=(struct ID3DXAnimationCallbackHandler & );
};

struct ID3DXAnimationCallbackHandler// Size=0x4 (Id=299)
{
    HRESULT HandleCallback(unsigned int ,void * );
    void ID3DXAnimationCallbackHandler(struct ID3DXAnimationCallbackHandler & );
    void ID3DXAnimationCallbackHandler();
    struct ID3DXAnimationCallbackHandler & operator=(struct ID3DXAnimationCallbackHandler & );
};

struct XMVECTORU8// Size=0x10 (Id=300)
{
    union // Size=0x10 (Id=0)
    {
        unsigned char u[16];// Offset=0x0 Size=0x10
        struct __vector4 v;// Offset=0x0 Size=0x10
    };
    struct __vector4 operator struct __vector4();
};

struct XMVECTORU8// Size=0x10 (Id=301)
{
    union // Size=0x10 (Id=0)
    {
        unsigned char u[16];// Offset=0x0 Size=0x10
        struct __vector4 v;// Offset=0x0 Size=0x10
    };
    struct __vector4 operator struct __vector4();
};

struct _XMHENDN3// Size=0x4 (Id=302)
{
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            int x:11;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xb
            int y:11;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0xb
            int z:10;// Offset=0x0 Size=0x4 BitOffset=0x16 BitSize=0xa
        };
        unsigned int v;// Offset=0x0 Size=0x4
    };
    void _XMHENDN3(float * );
    void _XMHENDN3(float ,float ,float );
    void _XMHENDN3(unsigned int );
    void _XMHENDN3();
    unsigned int operator unsigned int();
    struct _XMHENDN3 & operator=(const unsigned int );
    struct _XMHENDN3 & operator=(struct _XMHENDN3 & );
};

struct _XMHENDN3// Size=0x4 (Id=303)
{
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            int x:11;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xb
            int y:11;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0xb
            int z:10;// Offset=0x0 Size=0x4 BitOffset=0x16 BitSize=0xa
        };
        unsigned int v;// Offset=0x0 Size=0x4
    };
    void _XMHENDN3(float * );
    void _XMHENDN3(float ,float ,float );
    void _XMHENDN3(unsigned int );
    void _XMHENDN3();
    unsigned int operator unsigned int();
    struct _XMHENDN3 & operator=(const unsigned int );
    struct _XMHENDN3 & operator=(struct _XMHENDN3 & );
};

struct _XSESSION_INFO// Size=0x3c (Id=304)
{
    struct XNKID sessionID;// Offset=0x0 Size=0x8
    struct XNADDR hostAddress;// Offset=0x8 Size=0x24
    struct XNKEY keyExchangeKey;// Offset=0x2c Size=0x10
};

struct _XMXICO4// Size=0x8 (Id=305)
{
    union // Size=0x8 (Id=0)
    {
        struct // Size=0x8 (Id=0)
        {
            long long x:20;// Offset=0x0 Size=0x8 BitOffset=0x0 BitSize=0x14
            long long y:20;// Offset=0x0 Size=0x8 BitOffset=0x14 BitSize=0x14
            long long z:20;// Offset=0x0 Size=0x8 BitOffset=0x28 BitSize=0x14
            unsigned long long w:4;// Offset=0x0 Size=0x8 BitOffset=0x3c BitSize=0x4
        };
        unsigned long long v;// Offset=0x0 Size=0x8
    };
    void _XMXICO4(float * );
    void _XMXICO4(float ,float ,float ,float );
    void _XMXICO4(unsigned long long );
    void _XMXICO4();
    unsigned long long operator unsigned __int64();
    struct _XMXICO4 & operator=(const unsigned long long );
    struct _XMXICO4 & operator=(struct _XMXICO4 & );
};

struct _XMXICO4// Size=0x8 (Id=306)
{
    union // Size=0x8 (Id=0)
    {
        struct // Size=0x8 (Id=0)
        {
            long long x:20;// Offset=0x0 Size=0x8 BitOffset=0x0 BitSize=0x14
            long long y:20;// Offset=0x0 Size=0x8 BitOffset=0x14 BitSize=0x14
            long long z:20;// Offset=0x0 Size=0x8 BitOffset=0x28 BitSize=0x14
            unsigned long long w:4;// Offset=0x0 Size=0x8 BitOffset=0x3c BitSize=0x4
        };
        unsigned long long v;// Offset=0x0 Size=0x8
    };
    void _XMXICO4(float * );
    void _XMXICO4(float ,float ,float ,float );
    void _XMXICO4(unsigned long long );
    void _XMXICO4();
    unsigned long long operator unsigned __int64();
    struct _XMXICO4 & operator=(const unsigned long long );
    struct _XMXICO4 & operator=(struct _XMXICO4 & );
};

struct sockaddr// Size=0x10 (Id=307)
{
    unsigned short sa_family;// Offset=0x0 Size=0x2
    char sa_data[14];// Offset=0x2 Size=0xe
};

struct localeinfo_struct// Size=0x8 (Id=308)
{
    struct threadlocaleinfostruct * locinfo;// Offset=0x0 Size=0x4
    struct threadmbcinfostruct * mbcinfo;// Offset=0x4 Size=0x4
};

struct _IMAGE_RESOURCE_DIRECTORY_ENTRY// Size=0x8 (Id=309)
{
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            unsigned long NameOffset:31;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x1f
            unsigned long NameIsString:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        };
        unsigned long Name;// Offset=0x0 Size=0x4
        unsigned short Id;// Offset=0x0 Size=0x2
        unsigned char __align0[2];// Offset=0x2 Size=0x2
    };
    union // Size=0x4 (Id=0)
    {
        unsigned long OffsetToData;// Offset=0x4 Size=0x4
        struct // Size=0x4 (Id=0)
        {
            unsigned long OffsetToDirectory:31;// Offset=0x4 Size=0x4 BitOffset=0x1 BitSize=0x1f
            unsigned long DataIsDirectory:1;// Offset=0x4 Size=0x4 BitOffset=0x0 BitSize=0x1
        };
    };
};

struct __vector4// Size=0x10 (Id=310)
{
    union // Size=0x10 (Id=0)
    {
        float x;// Offset=0x0 Size=0x4
        float y;// Offset=0x4 Size=0x4
        float z;// Offset=0x8 Size=0x4
        float w;// Offset=0xc Size=0x4
        float v[4];// Offset=0x0 Size=0x10
        unsigned int u[4];// Offset=0x0 Size=0x10
    };
};

struct _XMMATRIX// Size=0x40 (Id=311)
{
    union // Size=0x40 (Id=0)
    {
        struct __vector4 r[4];// Offset=0x0 Size=0x40
        float _11;// Offset=0x0 Size=0x4
        float _12;// Offset=0x4 Size=0x4
        float _13;// Offset=0x8 Size=0x4
        float _14;// Offset=0xc Size=0x4
        float _21;// Offset=0x10 Size=0x4
        float _22;// Offset=0x14 Size=0x4
        float _23;// Offset=0x18 Size=0x4
        float _24;// Offset=0x1c Size=0x4
        float _31;// Offset=0x20 Size=0x4
        float _32;// Offset=0x24 Size=0x4
        float _33;// Offset=0x28 Size=0x4
        float _34;// Offset=0x2c Size=0x4
        float _41;// Offset=0x30 Size=0x4
        float _42;// Offset=0x34 Size=0x4
        float _43;// Offset=0x38 Size=0x4
        float _44;// Offset=0x3c Size=0x4
        float m[4][4];// Offset=0x0 Size=0x40
    };
    void _XMMATRIX(float * );
    void _XMMATRIX(float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float );
    void _XMMATRIX(const struct __vector4 ,const struct __vector4 ,const struct __vector4 ,const struct __vector4 );
    void _XMMATRIX();
    float & operator()(unsigned int ,unsigned int );
    float operator()(unsigned int ,unsigned int );
    struct _XMMATRIX & operator=(struct _XMMATRIX & );
    struct _XMMATRIX & operator*=(struct _XMMATRIX & );
    struct _XMMATRIX operator*(struct _XMMATRIX & );
};

struct _XMMATRIX// Size=0x40 (Id=312)
{
    union // Size=0x40 (Id=0)
    {
        struct __vector4 r[4];// Offset=0x0 Size=0x40
        float _11;// Offset=0x0 Size=0x4
        float _12;// Offset=0x4 Size=0x4
        float _13;// Offset=0x8 Size=0x4
        float _14;// Offset=0xc Size=0x4
        float _21;// Offset=0x10 Size=0x4
        float _22;// Offset=0x14 Size=0x4
        float _23;// Offset=0x18 Size=0x4
        float _24;// Offset=0x1c Size=0x4
        float _31;// Offset=0x20 Size=0x4
        float _32;// Offset=0x24 Size=0x4
        float _33;// Offset=0x28 Size=0x4
        float _34;// Offset=0x2c Size=0x4
        float _41;// Offset=0x30 Size=0x4
        float _42;// Offset=0x34 Size=0x4
        float _43;// Offset=0x38 Size=0x4
        float _44;// Offset=0x3c Size=0x4
        float m[4][4];// Offset=0x0 Size=0x40
    };
    void _XMMATRIX(float * );
    void _XMMATRIX(float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float );
    void _XMMATRIX(const struct __vector4 ,const struct __vector4 ,const struct __vector4 ,const struct __vector4 );
    void _XMMATRIX();
    float & operator()(unsigned int ,unsigned int );
    float operator()(unsigned int ,unsigned int );
    struct _XMMATRIX & operator=(struct _XMMATRIX & );
    struct _XMMATRIX & operator*=(struct _XMMATRIX & );
    struct _XMMATRIX operator*(struct _XMMATRIX & );
};

struct _XMFLOAT4// Size=0x10 (Id=313)
{
    float x;// Offset=0x0 Size=0x4
    float y;// Offset=0x4 Size=0x4
    float z;// Offset=0x8 Size=0x4
    float w;// Offset=0xc Size=0x4
    void _XMFLOAT4(float * );
    void _XMFLOAT4(float ,float ,float ,float );
    void _XMFLOAT4();
    struct _XMFLOAT4 & operator=(struct _XMFLOAT4 & );
};

struct _XMFLOAT4// Size=0x10 (Id=314)
{
    float x;// Offset=0x0 Size=0x4
    float y;// Offset=0x4 Size=0x4
    float z;// Offset=0x8 Size=0x4
    float w;// Offset=0xc Size=0x4
    void _XMFLOAT4(float * );
    void _XMFLOAT4(float ,float ,float ,float );
    void _XMFLOAT4();
    struct _XMFLOAT4 & operator=(struct _XMFLOAT4 & );
};

struct _IMAGE_NT_HEADERS// Size=0xf8 (Id=315)
{
    unsigned long Signature;// Offset=0x0 Size=0x4
    struct _IMAGE_FILE_HEADER FileHeader;// Offset=0x4 Size=0x14
    struct _IMAGE_OPTIONAL_HEADER OptionalHeader;// Offset=0x18 Size=0xe0
};

struct _D3DXEFFECTDEFAULT// Size=0x10 (Id=316)
{
    char * pParamName;// Offset=0x0 Size=0x4
    enum _D3DXEFFECTDEFAULTTYPE Type;// Offset=0x4 Size=0x4
    unsigned long NumBytes;// Offset=0x8 Size=0x4
    void * pValue;// Offset=0xc Size=0x4
};

struct XNQOSLISTENSTATS// Size=0x1c (Id=317)
{
    unsigned long dwSizeOfStruct;// Offset=0x0 Size=0x4
    unsigned long dwNumDataRequestsReceived;// Offset=0x4 Size=0x4
    unsigned long dwNumProbesReceived;// Offset=0x8 Size=0x4
    unsigned long dwNumSlotsFullDiscards;// Offset=0xc Size=0x4
    unsigned long dwNumDataRepliesSent;// Offset=0x10 Size=0x4
    unsigned long dwNumDataReplyBytesSent;// Offset=0x14 Size=0x4
    unsigned long dwNumProbeRepliesSent;// Offset=0x18 Size=0x4
};

struct _D3DXCONSTANT_DESC// Size=0x30 (Id=318)
{
    char * Name;// Offset=0x0 Size=0x4
    enum _D3DXREGISTER_SET RegisterSet;// Offset=0x4 Size=0x4
    unsigned int RegisterIndex;// Offset=0x8 Size=0x4
    unsigned int RegisterCount;// Offset=0xc Size=0x4
    enum _D3DXPARAMETER_CLASS Class;// Offset=0x10 Size=0x4
    enum _D3DXPARAMETER_TYPE Type;// Offset=0x14 Size=0x4
    unsigned int Rows;// Offset=0x18 Size=0x4
    unsigned int Columns;// Offset=0x1c Size=0x4
    unsigned int Elements;// Offset=0x20 Size=0x4
    unsigned int StructMembers;// Offset=0x24 Size=0x4
    unsigned int Bytes;// Offset=0x28 Size=0x4
    void * DefaultValue;// Offset=0x2c Size=0x4
};

struct _D3DMATRIX// Size=0x40 (Id=319)
{
    union // Size=0x40 (Id=0)
    {
        float _11;// Offset=0x0 Size=0x4
        float _12;// Offset=0x4 Size=0x4
        float _13;// Offset=0x8 Size=0x4
        float _14;// Offset=0xc Size=0x4
        float _21;// Offset=0x10 Size=0x4
        float _22;// Offset=0x14 Size=0x4
        float _23;// Offset=0x18 Size=0x4
        float _24;// Offset=0x1c Size=0x4
        float _31;// Offset=0x20 Size=0x4
        float _32;// Offset=0x24 Size=0x4
        float _33;// Offset=0x28 Size=0x4
        float _34;// Offset=0x2c Size=0x4
        float _41;// Offset=0x30 Size=0x4
        float _42;// Offset=0x34 Size=0x4
        float _43;// Offset=0x38 Size=0x4
        float _44;// Offset=0x3c Size=0x4
        float m[4][4];// Offset=0x0 Size=0x40
    };
};

struct _CONTEXT// Size=0xa40 (Id=320)
{
    unsigned long ContextFlags;// Offset=0x0 Size=0x4
    unsigned long Msr;// Offset=0x4 Size=0x4
    unsigned long Iar;// Offset=0x8 Size=0x4
    unsigned long Lr;// Offset=0xc Size=0x4
    unsigned long long Ctr;// Offset=0x10 Size=0x8
    unsigned long long Gpr0;// Offset=0x18 Size=0x8
    unsigned long long Gpr1;// Offset=0x20 Size=0x8
    unsigned long long Gpr2;// Offset=0x28 Size=0x8
    unsigned long long Gpr3;// Offset=0x30 Size=0x8
    unsigned long long Gpr4;// Offset=0x38 Size=0x8
    unsigned long long Gpr5;// Offset=0x40 Size=0x8
    unsigned long long Gpr6;// Offset=0x48 Size=0x8
    unsigned long long Gpr7;// Offset=0x50 Size=0x8
    unsigned long long Gpr8;// Offset=0x58 Size=0x8
    unsigned long long Gpr9;// Offset=0x60 Size=0x8
    unsigned long long Gpr10;// Offset=0x68 Size=0x8
    unsigned long long Gpr11;// Offset=0x70 Size=0x8
    unsigned long long Gpr12;// Offset=0x78 Size=0x8
    unsigned long long Gpr13;// Offset=0x80 Size=0x8
    unsigned long long Gpr14;// Offset=0x88 Size=0x8
    unsigned long long Gpr15;// Offset=0x90 Size=0x8
    unsigned long long Gpr16;// Offset=0x98 Size=0x8
    unsigned long long Gpr17;// Offset=0xa0 Size=0x8
    unsigned long long Gpr18;// Offset=0xa8 Size=0x8
    unsigned long long Gpr19;// Offset=0xb0 Size=0x8
    unsigned long long Gpr20;// Offset=0xb8 Size=0x8
    unsigned long long Gpr21;// Offset=0xc0 Size=0x8
    unsigned long long Gpr22;// Offset=0xc8 Size=0x8
    unsigned long long Gpr23;// Offset=0xd0 Size=0x8
    unsigned long long Gpr24;// Offset=0xd8 Size=0x8
    unsigned long long Gpr25;// Offset=0xe0 Size=0x8
    unsigned long long Gpr26;// Offset=0xe8 Size=0x8
    unsigned long long Gpr27;// Offset=0xf0 Size=0x8
    unsigned long long Gpr28;// Offset=0xf8 Size=0x8
    unsigned long long Gpr29;// Offset=0x100 Size=0x8
    unsigned long long Gpr30;// Offset=0x108 Size=0x8
    unsigned long long Gpr31;// Offset=0x110 Size=0x8
    unsigned long Cr;// Offset=0x118 Size=0x4
    unsigned long Xer;// Offset=0x11c Size=0x4
    float Fpscr;// Offset=0x120 Size=0x8
    float Fpr0;// Offset=0x128 Size=0x8
    float Fpr1;// Offset=0x130 Size=0x8
    float Fpr2;// Offset=0x138 Size=0x8
    float Fpr3;// Offset=0x140 Size=0x8
    float Fpr4;// Offset=0x148 Size=0x8
    float Fpr5;// Offset=0x150 Size=0x8
    float Fpr6;// Offset=0x158 Size=0x8
    float Fpr7;// Offset=0x160 Size=0x8
    float Fpr8;// Offset=0x168 Size=0x8
    float Fpr9;// Offset=0x170 Size=0x8
    float Fpr10;// Offset=0x178 Size=0x8
    float Fpr11;// Offset=0x180 Size=0x8
    float Fpr12;// Offset=0x188 Size=0x8
    float Fpr13;// Offset=0x190 Size=0x8
    float Fpr14;// Offset=0x198 Size=0x8
    float Fpr15;// Offset=0x1a0 Size=0x8
    float Fpr16;// Offset=0x1a8 Size=0x8
    float Fpr17;// Offset=0x1b0 Size=0x8
    float Fpr18;// Offset=0x1b8 Size=0x8
    float Fpr19;// Offset=0x1c0 Size=0x8
    float Fpr20;// Offset=0x1c8 Size=0x8
    float Fpr21;// Offset=0x1d0 Size=0x8
    float Fpr22;// Offset=0x1d8 Size=0x8
    float Fpr23;// Offset=0x1e0 Size=0x8
    float Fpr24;// Offset=0x1e8 Size=0x8
    float Fpr25;// Offset=0x1f0 Size=0x8
    float Fpr26;// Offset=0x1f8 Size=0x8
    float Fpr27;// Offset=0x200 Size=0x8
    float Fpr28;// Offset=0x208 Size=0x8
    float Fpr29;// Offset=0x210 Size=0x8
    float Fpr30;// Offset=0x218 Size=0x8
    float Fpr31;// Offset=0x220 Size=0x8
    unsigned long UserModeControl;// Offset=0x228 Size=0x4
    unsigned long Fill;// Offset=0x22c Size=0x4
    float Vscr[4];// Offset=0x230 Size=0x10
    float Vr0[4];// Offset=0x240 Size=0x10
    float Vr1[4];// Offset=0x250 Size=0x10
    float Vr2[4];// Offset=0x260 Size=0x10
    float Vr3[4];// Offset=0x270 Size=0x10
    float Vr4[4];// Offset=0x280 Size=0x10
    float Vr5[4];// Offset=0x290 Size=0x10
    float Vr6[4];// Offset=0x2a0 Size=0x10
    float Vr7[4];// Offset=0x2b0 Size=0x10
    float Vr8[4];// Offset=0x2c0 Size=0x10
    float Vr9[4];// Offset=0x2d0 Size=0x10
    float Vr10[4];// Offset=0x2e0 Size=0x10
    float Vr11[4];// Offset=0x2f0 Size=0x10
    float Vr12[4];// Offset=0x300 Size=0x10
    float Vr13[4];// Offset=0x310 Size=0x10
    float Vr14[4];// Offset=0x320 Size=0x10
    float Vr15[4];// Offset=0x330 Size=0x10
    float Vr16[4];// Offset=0x340 Size=0x10
    float Vr17[4];// Offset=0x350 Size=0x10
    float Vr18[4];// Offset=0x360 Size=0x10
    float Vr19[4];// Offset=0x370 Size=0x10
    float Vr20[4];// Offset=0x380 Size=0x10
    float Vr21[4];// Offset=0x390 Size=0x10
    float Vr22[4];// Offset=0x3a0 Size=0x10
    float Vr23[4];// Offset=0x3b0 Size=0x10
    float Vr24[4];// Offset=0x3c0 Size=0x10
    float Vr25[4];// Offset=0x3d0 Size=0x10
    float Vr26[4];// Offset=0x3e0 Size=0x10
    float Vr27[4];// Offset=0x3f0 Size=0x10
    float Vr28[4];// Offset=0x400 Size=0x10
    float Vr29[4];// Offset=0x410 Size=0x10
    float Vr30[4];// Offset=0x420 Size=0x10
    float Vr31[4];// Offset=0x430 Size=0x10
    float Vr32[4];// Offset=0x440 Size=0x10
    float Vr33[4];// Offset=0x450 Size=0x10
    float Vr34[4];// Offset=0x460 Size=0x10
    float Vr35[4];// Offset=0x470 Size=0x10
    float Vr36[4];// Offset=0x480 Size=0x10
    float Vr37[4];// Offset=0x490 Size=0x10
    float Vr38[4];// Offset=0x4a0 Size=0x10
    float Vr39[4];// Offset=0x4b0 Size=0x10
    float Vr40[4];// Offset=0x4c0 Size=0x10
    float Vr41[4];// Offset=0x4d0 Size=0x10
    float Vr42[4];// Offset=0x4e0 Size=0x10
    float Vr43[4];// Offset=0x4f0 Size=0x10
    float Vr44[4];// Offset=0x500 Size=0x10
    float Vr45[4];// Offset=0x510 Size=0x10
    float Vr46[4];// Offset=0x520 Size=0x10
    float Vr47[4];// Offset=0x530 Size=0x10
    float Vr48[4];// Offset=0x540 Size=0x10
    float Vr49[4];// Offset=0x550 Size=0x10
    float Vr50[4];// Offset=0x560 Size=0x10
    float Vr51[4];// Offset=0x570 Size=0x10
    float Vr52[4];// Offset=0x580 Size=0x10
    float Vr53[4];// Offset=0x590 Size=0x10
    float Vr54[4];// Offset=0x5a0 Size=0x10
    float Vr55[4];// Offset=0x5b0 Size=0x10
    float Vr56[4];// Offset=0x5c0 Size=0x10
    float Vr57[4];// Offset=0x5d0 Size=0x10
    float Vr58[4];// Offset=0x5e0 Size=0x10
    float Vr59[4];// Offset=0x5f0 Size=0x10
    float Vr60[4];// Offset=0x600 Size=0x10
    float Vr61[4];// Offset=0x610 Size=0x10
    float Vr62[4];// Offset=0x620 Size=0x10
    float Vr63[4];// Offset=0x630 Size=0x10
    float Vr64[4];// Offset=0x640 Size=0x10
    float Vr65[4];// Offset=0x650 Size=0x10
    float Vr66[4];// Offset=0x660 Size=0x10
    float Vr67[4];// Offset=0x670 Size=0x10
    float Vr68[4];// Offset=0x680 Size=0x10
    float Vr69[4];// Offset=0x690 Size=0x10
    float Vr70[4];// Offset=0x6a0 Size=0x10
    float Vr71[4];// Offset=0x6b0 Size=0x10
    float Vr72[4];// Offset=0x6c0 Size=0x10
    float Vr73[4];// Offset=0x6d0 Size=0x10
    float Vr74[4];// Offset=0x6e0 Size=0x10
    float Vr75[4];// Offset=0x6f0 Size=0x10
    float Vr76[4];// Offset=0x700 Size=0x10
    float Vr77[4];// Offset=0x710 Size=0x10
    float Vr78[4];// Offset=0x720 Size=0x10
    float Vr79[4];// Offset=0x730 Size=0x10
    float Vr80[4];// Offset=0x740 Size=0x10
    float Vr81[4];// Offset=0x750 Size=0x10
    float Vr82[4];// Offset=0x760 Size=0x10
    float Vr83[4];// Offset=0x770 Size=0x10
    float Vr84[4];// Offset=0x780 Size=0x10
    float Vr85[4];// Offset=0x790 Size=0x10
    float Vr86[4];// Offset=0x7a0 Size=0x10
    float Vr87[4];// Offset=0x7b0 Size=0x10
    float Vr88[4];// Offset=0x7c0 Size=0x10
    float Vr89[4];// Offset=0x7d0 Size=0x10
    float Vr90[4];// Offset=0x7e0 Size=0x10
    float Vr91[4];// Offset=0x7f0 Size=0x10
    float Vr92[4];// Offset=0x800 Size=0x10
    float Vr93[4];// Offset=0x810 Size=0x10
    float Vr94[4];// Offset=0x820 Size=0x10
    float Vr95[4];// Offset=0x830 Size=0x10
    float Vr96[4];// Offset=0x840 Size=0x10
    float Vr97[4];// Offset=0x850 Size=0x10
    float Vr98[4];// Offset=0x860 Size=0x10
    float Vr99[4];// Offset=0x870 Size=0x10
    float Vr100[4];// Offset=0x880 Size=0x10
    float Vr101[4];// Offset=0x890 Size=0x10
    float Vr102[4];// Offset=0x8a0 Size=0x10
    float Vr103[4];// Offset=0x8b0 Size=0x10
    float Vr104[4];// Offset=0x8c0 Size=0x10
    float Vr105[4];// Offset=0x8d0 Size=0x10
    float Vr106[4];// Offset=0x8e0 Size=0x10
    float Vr107[4];// Offset=0x8f0 Size=0x10
    float Vr108[4];// Offset=0x900 Size=0x10
    float Vr109[4];// Offset=0x910 Size=0x10
    float Vr110[4];// Offset=0x920 Size=0x10
    float Vr111[4];// Offset=0x930 Size=0x10
    float Vr112[4];// Offset=0x940 Size=0x10
    float Vr113[4];// Offset=0x950 Size=0x10
    float Vr114[4];// Offset=0x960 Size=0x10
    float Vr115[4];// Offset=0x970 Size=0x10
    float Vr116[4];// Offset=0x980 Size=0x10
    float Vr117[4];// Offset=0x990 Size=0x10
    float Vr118[4];// Offset=0x9a0 Size=0x10
    float Vr119[4];// Offset=0x9b0 Size=0x10
    float Vr120[4];// Offset=0x9c0 Size=0x10
    float Vr121[4];// Offset=0x9d0 Size=0x10
    float Vr122[4];// Offset=0x9e0 Size=0x10
    float Vr123[4];// Offset=0x9f0 Size=0x10
    float Vr124[4];// Offset=0xa00 Size=0x10
    float Vr125[4];// Offset=0xa10 Size=0x10
    float Vr126[4];// Offset=0xa20 Size=0x10
    float Vr127[4];// Offset=0xa30 Size=0x10
};

struct _D3DADAPTER_IDENTIFIER9// Size=0x450 (Id=321)
{
    char Driver[512];// Offset=0x0 Size=0x200
    char Description[512];// Offset=0x200 Size=0x200
    char DeviceName[32];// Offset=0x400 Size=0x20
    union _LARGE_INTEGER DriverVersion;// Offset=0x420 Size=0x8
    unsigned long VendorId;// Offset=0x428 Size=0x4
    unsigned long DeviceId;// Offset=0x42c Size=0x4
    unsigned long SubSysId;// Offset=0x430 Size=0x4
    unsigned long Revision;// Offset=0x434 Size=0x4
    struct _GUID DeviceIdentifier;// Offset=0x438 Size=0x10
    unsigned long WHQLLevel;// Offset=0x448 Size=0x4
};

struct _XUSER_ESTIMATE_RANK_RESULTS// Size=0x8 (Id=322)
{
    unsigned long dwNumRanks;// Offset=0x0 Size=0x4
    unsigned long * pdwRanks;// Offset=0x4 Size=0x4
};

struct _STRING_DATA// Size=0x6 (Id=323)
{
    unsigned short wStringSize;// Offset=0x0 Size=0x2
    wchar_t * pszString;// Offset=0x2 Size=0x4
};

struct _TOKEN_DEFAULT_DACL// Size=0x4 (Id=324)
{
    struct _ACL * DefaultDacl;// Offset=0x0 Size=0x4
};

union GPU_COPYDESTPITCH// Size=0x4 (Id=325)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long CopyDestPitch:14;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xe
        unsigned long CopyDestHeight:14;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0xe
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

struct _D3DXCONSTANTTABLE_DESC// Size=0xc (Id=326)
{
    char * Creator;// Offset=0x0 Size=0x4
    unsigned long Version;// Offset=0x4 Size=0x4
    unsigned int Constants;// Offset=0x8 Size=0x4
};

struct _ACCESS_ALLOWED_OBJECT_ACE// Size=0x30 (Id=327)
{
    struct _ACE_HEADER Header;// Offset=0x0 Size=0x4
    unsigned long Mask;// Offset=0x4 Size=0x4
    unsigned long Flags;// Offset=0x8 Size=0x4
    struct _GUID ObjectType;// Offset=0xc Size=0x10
    struct _GUID InheritedObjectType;// Offset=0x1c Size=0x10
    unsigned long SidStart;// Offset=0x2c Size=0x4
};

struct _D3DLOCKED_BOX// Size=0xc (Id=328)
{
    int RowPitch;// Offset=0x0 Size=0x4
    int SlicePitch;// Offset=0x4 Size=0x4
    void * pBits;// Offset=0x8 Size=0x4
};

struct LIST_ENTRY32// Size=0x8 (Id=329)
{
    unsigned long Flink;// Offset=0x0 Size=0x4
    unsigned long Blink;// Offset=0x4 Size=0x4
};

struct _IMAGE_FUNCTION_ENTRY64// Size=0x18 (Id=330)
{
    unsigned long long StartingAddress;// Offset=0x0 Size=0x8
    unsigned long long EndingAddress;// Offset=0x8 Size=0x8
    union // Size=0x8 (Id=0)
    {
        unsigned long long EndOfPrologue;// Offset=0x10 Size=0x8
        unsigned long long UnwindInfoAddress;// Offset=0x10 Size=0x8
    };
};

struct _QUOTA_LIMITS// Size=0x20 (Id=331)
{
    unsigned long PagedPoolLimit;// Offset=0x0 Size=0x4
    unsigned long NonPagedPoolLimit;// Offset=0x4 Size=0x4
    unsigned long MinimumWorkingSetSize;// Offset=0x8 Size=0x4
    unsigned long MaximumWorkingSetSize;// Offset=0xc Size=0x4
    unsigned long PagefileLimit;// Offset=0x10 Size=0x4
    unsigned char __align0[4];// Offset=0x14 Size=0x4
    union _LARGE_INTEGER TimeLimit;// Offset=0x18 Size=0x8
};

union GPU_COPYFUNC// Size=0x4 (Id=332)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long CopyFuncRed:3;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x3
        unsigned long CopyFuncGreen:3;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x3
        unsigned long CopyFuncBlue:3;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x3
        unsigned long CopyFuncAlpha:3;// Offset=0x0 Size=0x4 BitOffset=0xc BitSize=0x3
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

union GPUCOMMAND_VIZ_QUERY// Size=0x4 (Id=333)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long Id:6;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x6
        unsigned long End:1;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x1
    };
    unsigned long dword[1];// Offset=0x0 Size=0x4
};

struct _XMDEC4// Size=0x4 (Id=334)
{
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            int x:10;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xa
            int y:10;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0xa
            int z:10;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0xa
            int w:2;// Offset=0x0 Size=0x4 BitOffset=0x1e BitSize=0x2
        };
        unsigned int v;// Offset=0x0 Size=0x4
    };
    void _XMDEC4(float * );
    void _XMDEC4(float ,float ,float ,float );
    void _XMDEC4(unsigned int );
    void _XMDEC4();
    unsigned int operator unsigned int();
    struct _XMDEC4 & operator=(const unsigned int );
    struct _XMDEC4 & operator=(struct _XMDEC4 & );
};

struct _XMDEC4// Size=0x4 (Id=335)
{
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            int x:10;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xa
            int y:10;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0xa
            int z:10;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0xa
            int w:2;// Offset=0x0 Size=0x4 BitOffset=0x1e BitSize=0x2
        };
        unsigned int v;// Offset=0x0 Size=0x4
    };
    void _XMDEC4(float * );
    void _XMDEC4(float ,float ,float ,float );
    void _XMDEC4(unsigned int );
    void _XMDEC4();
    unsigned int operator unsigned int();
    struct _XMDEC4 & operator=(const unsigned int );
    struct _XMDEC4 & operator=(struct _XMDEC4 & );
};

struct _IMAGE_SYMBOL// Size=0x12 (Id=336)
{
    union _unnamed_1928 N;// Offset=0x0 Size=0x8
    unsigned long Value;// Offset=0x8 Size=0x4
    short SectionNumber;// Offset=0xc Size=0x2
    unsigned short Type;// Offset=0xe Size=0x2
    unsigned char StorageClass;// Offset=0x10 Size=0x1
    unsigned char NumberOfAuxSymbols;// Offset=0x11 Size=0x1
};

struct _D3DXPATCHINFO// Size=0xc (Id=337)
{
    enum _D3DXPATCHMESHTYPE PatchType;// Offset=0x0 Size=0x4
    enum _D3DDEGREETYPE Degree;// Offset=0x4 Size=0x4
    enum _D3DBASISTYPE Basis;// Offset=0x8 Size=0x4
};

struct _XMARKETPLACE_CONTENTOFFER_INFO// Size=0x68 (Id=338)
{
    unsigned long long qwOfferID;// Offset=0x0 Size=0x8
    unsigned long long qwPreviewOfferID;// Offset=0x8 Size=0x8
    unsigned long dwOfferNameLength;// Offset=0x10 Size=0x4
    wchar_t * wszOfferName;// Offset=0x14 Size=0x4
    unsigned long dwOfferType;// Offset=0x18 Size=0x4
    unsigned char contentId[20];// Offset=0x1c Size=0x14
    int fIsUnrestrictedLicense;// Offset=0x30 Size=0x4
    unsigned long dwLicenseMask;// Offset=0x34 Size=0x4
    unsigned long dwTitleID;// Offset=0x38 Size=0x4
    unsigned long dwContentCategory;// Offset=0x3c Size=0x4
    unsigned long dwTitleNameLength;// Offset=0x40 Size=0x4
    wchar_t * wszTitleName;// Offset=0x44 Size=0x4
    int fUserHasPurchased;// Offset=0x48 Size=0x4
    unsigned long dwPackageSize;// Offset=0x4c Size=0x4
    unsigned long dwInstallSize;// Offset=0x50 Size=0x4
    unsigned long dwSellTextLength;// Offset=0x54 Size=0x4
    wchar_t * wszSellText;// Offset=0x58 Size=0x4
    unsigned long dwAssetID;// Offset=0x5c Size=0x4
    unsigned long dwPurchaseQuantity;// Offset=0x60 Size=0x4
    unsigned long dwPointsPrice;// Offset=0x64 Size=0x4
};

struct _XMXDEC4// Size=0x4 (Id=339)
{
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            int x:10;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xa
            int y:10;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0xa
            int z:10;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0xa
            unsigned int w:2;// Offset=0x0 Size=0x4 BitOffset=0x1e BitSize=0x2
        };
        unsigned int v;// Offset=0x0 Size=0x4
    };
    void _XMXDEC4(float * );
    void _XMXDEC4(float ,float ,float ,float );
    void _XMXDEC4(unsigned int );
    void _XMXDEC4();
    unsigned int operator unsigned int();
    struct _XMXDEC4 & operator=(const unsigned int );
    struct _XMXDEC4 & operator=(struct _XMXDEC4 & );
};

struct _XMXDEC4// Size=0x4 (Id=340)
{
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            int x:10;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xa
            int y:10;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0xa
            int z:10;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0xa
            unsigned int w:2;// Offset=0x0 Size=0x4 BitOffset=0x1e BitSize=0x2
        };
        unsigned int v;// Offset=0x0 Size=0x4
    };
    void _XMXDEC4(float * );
    void _XMXDEC4(float ,float ,float ,float );
    void _XMXDEC4(unsigned int );
    void _XMXDEC4();
    unsigned int operator unsigned int();
    struct _XMXDEC4 & operator=(const unsigned int );
    struct _XMXDEC4 & operator=(struct _XMXDEC4 & );
};

struct _XOFFERING_CONTENTAVAILABLE_RESULT// Size=0x8 (Id=341)
{
    unsigned long dwNewOffers;// Offset=0x0 Size=0x4
    unsigned long dwTotalOffers;// Offset=0x4 Size=0x4
};

struct _MESSAGE_RESOURCE_BLOCK// Size=0xc (Id=342)
{
    unsigned long LowId;// Offset=0x0 Size=0x4
    unsigned long HighId;// Offset=0x4 Size=0x4
    unsigned long OffsetToEntries;// Offset=0x8 Size=0x4
};

union GPU_SCLINECONTROL// Size=0x4 (Id=343)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long BresControl:8;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x8
        unsigned long UseBresControl:1;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x1
        unsigned long ExpandLineWidth:1;// Offset=0x0 Size=0x4 BitOffset=0x9 BitSize=0x1
        unsigned long LastPixel:1;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0x1
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

struct _D3DMIPTAIL_DESC// Size=0x24 (Id=344)
{
    enum _D3DFORMAT Format;// Offset=0x0 Size=0x4
    enum _D3DRESOURCETYPE Type;// Offset=0x4 Size=0x4
    unsigned long Usage;// Offset=0x8 Size=0x4
    unsigned long Pool;// Offset=0xc Size=0x4
    unsigned int Width;// Offset=0x10 Size=0x4
    unsigned int Height;// Offset=0x14 Size=0x4
    unsigned int Depth;// Offset=0x18 Size=0x4
    unsigned int BaseLevel;// Offset=0x1c Size=0x4
    unsigned int Size;// Offset=0x20 Size=0x4
};

struct _MEMORY_BASIC_INFORMATION// Size=0x1c (Id=345)
{
    void * BaseAddress;// Offset=0x0 Size=0x4
    void * AllocationBase;// Offset=0x4 Size=0x4
    unsigned long AllocationProtect;// Offset=0x8 Size=0x4
    unsigned long RegionSize;// Offset=0xc Size=0x4
    unsigned long State;// Offset=0x10 Size=0x4
    unsigned long Protect;// Offset=0x14 Size=0x4
    unsigned long Type;// Offset=0x18 Size=0x4
};

struct sockaddr_in// Size=0x10 (Id=346)
{
    short sin_family;// Offset=0x0 Size=0x2
    unsigned short sin_port;// Offset=0x2 Size=0x2
    struct in_addr sin_addr;// Offset=0x4 Size=0x4
    char sin_zero[8];// Offset=0x8 Size=0x8
};

struct _TOKEN_SOURCE// Size=0x10 (Id=347)
{
    char SourceName[8];// Offset=0x0 Size=0x8
    struct _LUID SourceIdentifier;// Offset=0x8 Size=0x8
};

struct _GUID// Size=0x10 (Id=348)
{
    unsigned long Data1;// Offset=0x0 Size=0x4
    unsigned short Data2;// Offset=0x4 Size=0x2
    unsigned short Data3;// Offset=0x6 Size=0x2
    unsigned char Data4[8];// Offset=0x8 Size=0x8
};

struct _D3DVERTEXELEMENT9// Size=0xc (Id=349)
{
    unsigned short Stream;// Offset=0x0 Size=0x2
    unsigned short Offset;// Offset=0x2 Size=0x2
    unsigned long Type;// Offset=0x4 Size=0x4
    unsigned char Method;// Offset=0x8 Size=0x1
    unsigned char Usage;// Offset=0x9 Size=0x1
    unsigned char UsageIndex;// Offset=0xa Size=0x1
};

struct ID3DXBaseMesh : public IUnknown// Size=0x4 (Id=350)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    HRESULT DrawSubset(unsigned long );
    unsigned long GetNumFaces();
    unsigned long GetNumVertices();
    unsigned long GetFVF();
    HRESULT GetDeclaration(struct _D3DVERTEXELEMENT9 * );
    unsigned long GetNumBytesPerVertex();
    unsigned long GetOptions();
    HRESULT GetDevice(struct D3DDevice ** );
    HRESULT CloneMeshFVF(unsigned long ,unsigned long ,struct D3DDevice * ,struct ID3DXMesh ** );
    HRESULT CloneMesh(unsigned long ,struct _D3DVERTEXELEMENT9 * ,struct D3DDevice * ,struct ID3DXMesh ** );
    HRESULT GetVertexBuffer(struct D3DVertexBuffer ** );
    HRESULT GetIndexBuffer(struct D3DIndexBuffer ** );
    HRESULT LockVertexBuffer(unsigned long ,void ** );
    HRESULT UnlockVertexBuffer();
    HRESULT LockIndexBuffer(unsigned long ,void ** );
    HRESULT UnlockIndexBuffer();
    HRESULT GetAttributeTable(struct _D3DXATTRIBUTERANGE * ,unsigned long * );
    HRESULT ConvertPointRepsToAdjacency(unsigned long * ,unsigned long * );
    HRESULT ConvertAdjacencyToPointReps(unsigned long * ,unsigned long * );
    HRESULT GenerateAdjacency(float ,unsigned long * );
    HRESULT UpdateSemantics(struct _D3DVERTEXELEMENT9 * );
    void ID3DXBaseMesh(struct ID3DXBaseMesh & );
    void ID3DXBaseMesh();
    struct ID3DXBaseMesh & operator=(struct ID3DXBaseMesh & );
};

struct ID3DXBaseMesh : public IUnknown// Size=0x4 (Id=351)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    HRESULT DrawSubset(unsigned long );
    unsigned long GetNumFaces();
    unsigned long GetNumVertices();
    unsigned long GetFVF();
    HRESULT GetDeclaration(struct _D3DVERTEXELEMENT9 * );
    unsigned long GetNumBytesPerVertex();
    unsigned long GetOptions();
    HRESULT GetDevice(struct D3DDevice ** );
    HRESULT CloneMeshFVF(unsigned long ,unsigned long ,struct D3DDevice * ,struct ID3DXMesh ** );
    HRESULT CloneMesh(unsigned long ,struct _D3DVERTEXELEMENT9 * ,struct D3DDevice * ,struct ID3DXMesh ** );
    HRESULT GetVertexBuffer(struct D3DVertexBuffer ** );
    HRESULT GetIndexBuffer(struct D3DIndexBuffer ** );
    HRESULT LockVertexBuffer(unsigned long ,void ** );
    HRESULT UnlockVertexBuffer();
    HRESULT LockIndexBuffer(unsigned long ,void ** );
    HRESULT UnlockIndexBuffer();
    HRESULT GetAttributeTable(struct _D3DXATTRIBUTERANGE * ,unsigned long * );
    HRESULT ConvertPointRepsToAdjacency(unsigned long * ,unsigned long * );
    HRESULT ConvertAdjacencyToPointReps(unsigned long * ,unsigned long * );
    HRESULT GenerateAdjacency(float ,unsigned long * );
    HRESULT UpdateSemantics(struct _D3DVERTEXELEMENT9 * );
    void ID3DXBaseMesh(struct ID3DXBaseMesh & );
    void ID3DXBaseMesh();
    struct ID3DXBaseMesh & operator=(struct ID3DXBaseMesh & );
};

struct _D3DMATERIAL9// Size=0x44 (Id=352)
{
    struct _D3DCOLORVALUE Diffuse;// Offset=0x0 Size=0x10
    struct _D3DCOLORVALUE Ambient;// Offset=0x10 Size=0x10
    struct _D3DCOLORVALUE Specular;// Offset=0x20 Size=0x10
    struct _D3DCOLORVALUE Emissive;// Offset=0x30 Size=0x10
    float Power;// Offset=0x40 Size=0x4
};

struct _D3DXATTRIBUTERANGE// Size=0x14 (Id=353)
{
    unsigned long AttribId;// Offset=0x0 Size=0x4
    unsigned long FaceStart;// Offset=0x4 Size=0x4
    unsigned long FaceCount;// Offset=0x8 Size=0x4
    unsigned long VertexStart;// Offset=0xc Size=0x4
    unsigned long VertexCount;// Offset=0x10 Size=0x4
};

struct ID3DXMesh : public ID3DXBaseMesh// Size=0x4 (Id=354)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    HRESULT DrawSubset(unsigned long );
    unsigned long GetNumFaces();
    unsigned long GetNumVertices();
    unsigned long GetFVF();
    HRESULT GetDeclaration(struct _D3DVERTEXELEMENT9 * );
    unsigned long GetNumBytesPerVertex();
    unsigned long GetOptions();
    HRESULT GetDevice(struct D3DDevice ** );
    HRESULT CloneMeshFVF(unsigned long ,unsigned long ,struct D3DDevice * ,struct ID3DXMesh ** );
    HRESULT CloneMesh(unsigned long ,struct _D3DVERTEXELEMENT9 * ,struct D3DDevice * ,struct ID3DXMesh ** );
    HRESULT GetVertexBuffer(struct D3DVertexBuffer ** );
    HRESULT GetIndexBuffer(struct D3DIndexBuffer ** );
    HRESULT LockVertexBuffer(unsigned long ,void ** );
    HRESULT UnlockVertexBuffer();
    HRESULT LockIndexBuffer(unsigned long ,void ** );
    HRESULT UnlockIndexBuffer();
    HRESULT GetAttributeTable(struct _D3DXATTRIBUTERANGE * ,unsigned long * );
    HRESULT ConvertPointRepsToAdjacency(unsigned long * ,unsigned long * );
    HRESULT ConvertAdjacencyToPointReps(unsigned long * ,unsigned long * );
    HRESULT GenerateAdjacency(float ,unsigned long * );
    HRESULT UpdateSemantics(struct _D3DVERTEXELEMENT9 * );
    HRESULT LockAttributeBuffer(unsigned long ,unsigned long ** );
    HRESULT UnlockAttributeBuffer();
    HRESULT Optimize(unsigned long ,unsigned long * ,unsigned long * ,unsigned long * ,struct ID3DXBuffer ** ,struct ID3DXMesh ** );
    HRESULT OptimizeInplace(unsigned long ,unsigned long * ,unsigned long * ,unsigned long * ,struct ID3DXBuffer ** );
    HRESULT SetAttributeTable(struct _D3DXATTRIBUTERANGE * ,unsigned long );
    void ID3DXMesh(struct ID3DXMesh & );
    void ID3DXMesh();
    struct ID3DXMesh & operator=(struct ID3DXMesh & );
};

struct ID3DXMesh : public ID3DXBaseMesh// Size=0x4 (Id=355)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    HRESULT DrawSubset(unsigned long );
    unsigned long GetNumFaces();
    unsigned long GetNumVertices();
    unsigned long GetFVF();
    HRESULT GetDeclaration(struct _D3DVERTEXELEMENT9 * );
    unsigned long GetNumBytesPerVertex();
    unsigned long GetOptions();
    HRESULT GetDevice(struct D3DDevice ** );
    HRESULT CloneMeshFVF(unsigned long ,unsigned long ,struct D3DDevice * ,struct ID3DXMesh ** );
    HRESULT CloneMesh(unsigned long ,struct _D3DVERTEXELEMENT9 * ,struct D3DDevice * ,struct ID3DXMesh ** );
    HRESULT GetVertexBuffer(struct D3DVertexBuffer ** );
    HRESULT GetIndexBuffer(struct D3DIndexBuffer ** );
    HRESULT LockVertexBuffer(unsigned long ,void ** );
    HRESULT UnlockVertexBuffer();
    HRESULT LockIndexBuffer(unsigned long ,void ** );
    HRESULT UnlockIndexBuffer();
    HRESULT GetAttributeTable(struct _D3DXATTRIBUTERANGE * ,unsigned long * );
    HRESULT ConvertPointRepsToAdjacency(unsigned long * ,unsigned long * );
    HRESULT ConvertAdjacencyToPointReps(unsigned long * ,unsigned long * );
    HRESULT GenerateAdjacency(float ,unsigned long * );
    HRESULT UpdateSemantics(struct _D3DVERTEXELEMENT9 * );
    HRESULT LockAttributeBuffer(unsigned long ,unsigned long ** );
    HRESULT UnlockAttributeBuffer();
    HRESULT Optimize(unsigned long ,unsigned long * ,unsigned long * ,unsigned long * ,struct ID3DXBuffer ** ,struct ID3DXMesh ** );
    HRESULT OptimizeInplace(unsigned long ,unsigned long * ,unsigned long * ,unsigned long * ,struct ID3DXBuffer ** );
    HRESULT SetAttributeTable(struct _D3DXATTRIBUTERANGE * ,unsigned long );
    void ID3DXMesh(struct ID3DXMesh & );
    void ID3DXMesh();
    struct ID3DXMesh & operator=(struct ID3DXMesh & );
};

struct tagPOINTS// Size=0x4 (Id=356)
{
    short x;// Offset=0x0 Size=0x2
    short y;// Offset=0x2 Size=0x2
};

struct _XUSER_CONTEXT// Size=0x8 (Id=357)
{
    unsigned long dwContextId;// Offset=0x0 Size=0x4
    unsigned long dwValue;// Offset=0x4 Size=0x4
};

struct _D3DVERTEXBUFFER_DESC// Size=0x18 (Id=358)
{
    enum _D3DFORMAT Format;// Offset=0x0 Size=0x4
    enum _D3DRESOURCETYPE Type;// Offset=0x4 Size=0x4
    unsigned long Usage;// Offset=0x8 Size=0x4
    unsigned long Pool;// Offset=0xc Size=0x4
    unsigned int Size;// Offset=0x10 Size=0x4
    unsigned long FVF;// Offset=0x14 Size=0x4
};

struct D3DXVECTOR2// Size=0x8 (Id=359)
{
    void D3DXVECTOR2(float ,float );
    void D3DXVECTOR2(struct D3DXFLOAT16 * );
    void D3DXVECTOR2(float * );
    void D3DXVECTOR2();
    float * operator float *();
    float * operator const float *();
    struct D3DXVECTOR2 & operator=(struct D3DXVECTOR2 & );
    struct D3DXVECTOR2 & operator+=(struct D3DXVECTOR2 & );
    struct D3DXVECTOR2 & operator-=(struct D3DXVECTOR2 & );
    struct D3DXVECTOR2 & operator*=(float );
    struct D3DXVECTOR2 & operator/=(float );
    struct D3DXVECTOR2 operator+(struct D3DXVECTOR2 & );
    struct D3DXVECTOR2 operator+();
    struct D3DXVECTOR2 operator-(struct D3DXVECTOR2 & );
    struct D3DXVECTOR2 operator-();
    struct D3DXVECTOR2 operator*(float );
    struct D3DXVECTOR2 operator/(float );
    int operator==(struct D3DXVECTOR2 & );
    int operator!=(struct D3DXVECTOR2 & );
    float x;// Offset=0x0 Size=0x4
    float y;// Offset=0x4 Size=0x4
};

struct D3DXVECTOR2// Size=0x8 (Id=360)
{
    void D3DXVECTOR2(float ,float );
    void D3DXVECTOR2(struct D3DXFLOAT16 * );
    void D3DXVECTOR2(float * );
    void D3DXVECTOR2();
    float * operator float *();
    float * operator const float *();
    struct D3DXVECTOR2 & operator=(struct D3DXVECTOR2 & );
    struct D3DXVECTOR2 & operator+=(struct D3DXVECTOR2 & );
    struct D3DXVECTOR2 & operator-=(struct D3DXVECTOR2 & );
    struct D3DXVECTOR2 & operator*=(float );
    struct D3DXVECTOR2 & operator/=(float );
    struct D3DXVECTOR2 operator+(struct D3DXVECTOR2 & );
    struct D3DXVECTOR2 operator+();
    struct D3DXVECTOR2 operator-(struct D3DXVECTOR2 & );
    struct D3DXVECTOR2 operator-();
    struct D3DXVECTOR2 operator*(float );
    struct D3DXVECTOR2 operator/(float );
    int operator==(struct D3DXVECTOR2 & );
    int operator!=(struct D3DXVECTOR2 & );
    float x;// Offset=0x0 Size=0x4
    float y;// Offset=0x4 Size=0x4
};

struct _XINPUT_STATE// Size=0x10 (Id=361)
{
    unsigned long dwPacketNumber;// Offset=0x0 Size=0x4
    struct _XINPUT_GAMEPAD Gamepad;// Offset=0x4 Size=0xc
};

struct _XMUBYTEN4// Size=0x4 (Id=362)
{
    union // Size=0x4 (Id=0)
    {
        unsigned char x;// Offset=0x0 Size=0x1
        unsigned char y;// Offset=0x1 Size=0x1
        unsigned char z;// Offset=0x2 Size=0x1
        unsigned char w;// Offset=0x3 Size=0x1
        unsigned int v;// Offset=0x0 Size=0x4
    };
    void _XMUBYTEN4(float * );
    void _XMUBYTEN4(float ,float ,float ,float );
    void _XMUBYTEN4(unsigned char * );
    void _XMUBYTEN4(unsigned int );
    void _XMUBYTEN4(unsigned char ,unsigned char ,unsigned char ,unsigned char );
    void _XMUBYTEN4();
    struct _XMUBYTEN4 & operator=(struct _XMUBYTEN4 & );
};

struct _XMUBYTEN4// Size=0x4 (Id=363)
{
    union // Size=0x4 (Id=0)
    {
        unsigned char x;// Offset=0x0 Size=0x1
        unsigned char y;// Offset=0x1 Size=0x1
        unsigned char z;// Offset=0x2 Size=0x1
        unsigned char w;// Offset=0x3 Size=0x1
        unsigned int v;// Offset=0x0 Size=0x4
    };
    void _XMUBYTEN4(float * );
    void _XMUBYTEN4(float ,float ,float ,float );
    void _XMUBYTEN4(unsigned char * );
    void _XMUBYTEN4(unsigned int );
    void _XMUBYTEN4(unsigned char ,unsigned char ,unsigned char ,unsigned char );
    void _XMUBYTEN4();
    struct _XMUBYTEN4 & operator=(struct _XMUBYTEN4 & );
};

struct _SINGLE_LIST_ENTRY// Size=0x4 (Id=364)
{
    struct _SINGLE_LIST_ENTRY * Next;// Offset=0x0 Size=0x4
};

struct _SYSTEM_ALARM_OBJECT_ACE// Size=0x30 (Id=365)
{
    struct _ACE_HEADER Header;// Offset=0x0 Size=0x4
    unsigned long Mask;// Offset=0x4 Size=0x4
    unsigned long Flags;// Offset=0x8 Size=0x4
    struct _GUID ObjectType;// Offset=0xc Size=0x10
    struct _GUID InheritedObjectType;// Offset=0x1c Size=0x10
    unsigned long SidStart;// Offset=0x2c Size=0x4
};

struct _D3DRESOLVE_PARAMETERS// Size=0xc (Id=366)
{
    enum _D3DFORMAT ColorFormat;// Offset=0x0 Size=0x4
    int ColorExpBias;// Offset=0x4 Size=0x4
    enum _D3DFORMAT DepthFormat;// Offset=0x8 Size=0x4
};

struct _XMUICO4// Size=0x8 (Id=367)
{
    union // Size=0x8 (Id=0)
    {
        struct // Size=0x8 (Id=0)
        {
            unsigned long long x:20;// Offset=0x0 Size=0x8 BitOffset=0x0 BitSize=0x14
            unsigned long long y:20;// Offset=0x0 Size=0x8 BitOffset=0x14 BitSize=0x14
            unsigned long long z:20;// Offset=0x0 Size=0x8 BitOffset=0x28 BitSize=0x14
            unsigned long long w:4;// Offset=0x0 Size=0x8 BitOffset=0x3c BitSize=0x4
        };
        unsigned long long v;// Offset=0x0 Size=0x8
    };
    void _XMUICO4(float * );
    void _XMUICO4(float ,float ,float ,float );
    void _XMUICO4(unsigned long long );
    void _XMUICO4();
    unsigned long long operator unsigned __int64();
    struct _XMUICO4 & operator=(const unsigned long long );
    struct _XMUICO4 & operator=(struct _XMUICO4 & );
};

struct _XMUICO4// Size=0x8 (Id=368)
{
    union // Size=0x8 (Id=0)
    {
        struct // Size=0x8 (Id=0)
        {
            unsigned long long x:20;// Offset=0x0 Size=0x8 BitOffset=0x0 BitSize=0x14
            unsigned long long y:20;// Offset=0x0 Size=0x8 BitOffset=0x14 BitSize=0x14
            unsigned long long z:20;// Offset=0x0 Size=0x8 BitOffset=0x28 BitSize=0x14
            unsigned long long w:4;// Offset=0x0 Size=0x8 BitOffset=0x3c BitSize=0x4
        };
        unsigned long long v;// Offset=0x0 Size=0x8
    };
    void _XMUICO4(float * );
    void _XMUICO4(float ,float ,float ,float );
    void _XMUICO4(unsigned long long );
    void _XMUICO4();
    unsigned long long operator unsigned __int64();
    struct _XMUICO4 & operator=(const unsigned long long );
    struct _XMUICO4 & operator=(struct _XMUICO4 & );
};

struct _WIN32_FIND_DATAW// Size=0x250 (Id=369)
{
    unsigned long dwFileAttributes;// Offset=0x0 Size=0x4
    struct _FILETIME ftCreationTime;// Offset=0x4 Size=0x8
    struct _FILETIME ftLastAccessTime;// Offset=0xc Size=0x8
    struct _FILETIME ftLastWriteTime;// Offset=0x14 Size=0x8
    unsigned long nFileSizeHigh;// Offset=0x1c Size=0x4
    unsigned long nFileSizeLow;// Offset=0x20 Size=0x4
    unsigned long dwReserved0;// Offset=0x24 Size=0x4
    unsigned long dwReserved1;// Offset=0x28 Size=0x4
    wchar_t cFileName[260];// Offset=0x2c Size=0x208
    wchar_t cAlternateFileName[14];// Offset=0x234 Size=0x1c
};

struct _FILETIME// Size=0x8 (Id=370)
{
    unsigned long dwHighDateTime;// Offset=0x0 Size=0x4
    unsigned long dwLowDateTime;// Offset=0x4 Size=0x4
};

struct _XDEVICE_DATA// Size=0x50 (Id=371)
{
    unsigned long DeviceID;// Offset=0x0 Size=0x4
    unsigned long DeviceType;// Offset=0x4 Size=0x4
    unsigned long long ulDeviceBytes;// Offset=0x8 Size=0x8
    unsigned long long ulDeviceFreeBytes;// Offset=0x10 Size=0x8
    wchar_t wszFriendlyName[27];// Offset=0x18 Size=0x36
};

struct _XGMIPTAIL_DESC// Size=0x40 (Id=372)
{
    enum _D3DRESOURCETYPE ResourceType;// Offset=0x0 Size=0x4
    unsigned int Width;// Offset=0x4 Size=0x4
    unsigned int Height;// Offset=0x8 Size=0x4
    unsigned int Depth;// Offset=0xc Size=0x4
    enum _D3DFORMAT Format;// Offset=0x10 Size=0x4
    unsigned int RowPitch;// Offset=0x14 Size=0x4
    unsigned int SlicePitch;// Offset=0x18 Size=0x4
    unsigned int BitsPerPixel;// Offset=0x1c Size=0x4
    unsigned int WidthInBlocks;// Offset=0x20 Size=0x4
    unsigned int HeightInBlocks;// Offset=0x24 Size=0x4
    unsigned int DepthInBlocks;// Offset=0x28 Size=0x4
    unsigned int BytesPerBlock;// Offset=0x2c Size=0x4
    int ExpBias;// Offset=0x30 Size=0x4
    unsigned long Flags;// Offset=0x34 Size=0x4
    unsigned int BaseLevel;// Offset=0x38 Size=0x4
    unsigned int Size;// Offset=0x3c Size=0x4
};

struct _IMAGE_ROM_HEADERS// Size=0x4c (Id=373)
{
    struct _IMAGE_FILE_HEADER FileHeader;// Offset=0x0 Size=0x14
    struct _IMAGE_ROM_OPTIONAL_HEADER OptionalHeader;// Offset=0x14 Size=0x38
};

struct _IMAGE_DEBUG_DIRECTORY// Size=0x1c (Id=374)
{
    unsigned long Characteristics;// Offset=0x0 Size=0x4
    unsigned long TimeDateStamp;// Offset=0x4 Size=0x4
    unsigned short MajorVersion;// Offset=0x8 Size=0x2
    unsigned short MinorVersion;// Offset=0xa Size=0x2
    unsigned long Type;// Offset=0xc Size=0x4
    unsigned long SizeOfData;// Offset=0x10 Size=0x4
    unsigned long AddressOfRawData;// Offset=0x14 Size=0x4
    unsigned long PointerToRawData;// Offset=0x18 Size=0x4
};

struct _D3DXMATERIAL// Size=0x48 (Id=375)
{
    struct _D3DMATERIAL9 MatD3D;// Offset=0x0 Size=0x44
    char * pTextureFilename;// Offset=0x44 Size=0x4
};

struct _TOKEN_USER// Size=0x8 (Id=376)
{
    struct _SID_AND_ATTRIBUTES User;// Offset=0x0 Size=0x8
};

struct D3DIndexBuffer : public D3DResource// Size=0x20 (Id=377)
{
    HRESULT Lock(unsigned int ,unsigned int ,void ** ,unsigned long );
    HRESULT AsyncLock(unsigned long long ,unsigned int ,unsigned int ,void ** ,unsigned long );
    HRESULT Unlock();
    HRESULT GetDesc(struct _D3DINDEXBUFFER_DESC * );
    unsigned char __align0[24];// Offset=0x0 Size=0x18
    unsigned long Address;// Offset=0x18 Size=0x4
    unsigned long Size;// Offset=0x1c Size=0x4
};

struct D3DXVECTOR4// Size=0x10 (Id=378)
{
    void D3DXVECTOR4(float ,float ,float ,float );
    void D3DXVECTOR4(struct D3DXFLOAT16 * );
    void D3DXVECTOR4(float * );
    void D3DXVECTOR4();
    float * operator float *();
    float * operator const float *();
    struct D3DXVECTOR4 & operator=(struct D3DXVECTOR4 & );
    struct D3DXVECTOR4 & operator+=(struct D3DXVECTOR4 & );
    struct D3DXVECTOR4 & operator-=(struct D3DXVECTOR4 & );
    struct D3DXVECTOR4 & operator*=(float );
    struct D3DXVECTOR4 & operator/=(float );
    struct D3DXVECTOR4 operator+(struct D3DXVECTOR4 & );
    struct D3DXVECTOR4 operator+();
    struct D3DXVECTOR4 operator-(struct D3DXVECTOR4 & );
    struct D3DXVECTOR4 operator-();
    struct D3DXVECTOR4 operator*(float );
    struct D3DXVECTOR4 operator/(float );
    int operator==(struct D3DXVECTOR4 & );
    int operator!=(struct D3DXVECTOR4 & );
    float x;// Offset=0x0 Size=0x4
    float y;// Offset=0x4 Size=0x4
    float z;// Offset=0x8 Size=0x4
    float w;// Offset=0xc Size=0x4
};

struct D3DXMATRIX : public _D3DMATRIX// Size=0x40 (Id=379)
{
    void D3DXMATRIX(float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float );
    void D3DXMATRIX(struct D3DXFLOAT16 * );
    void D3DXMATRIX(struct _D3DMATRIX & );
    void D3DXMATRIX(float * );
    void D3DXMATRIX();
    float operator()(unsigned int ,unsigned int );
    float & operator()(unsigned int ,unsigned int );
    float * operator float *();
    float * operator const float *();
    struct D3DXMATRIX & operator=(struct D3DXMATRIX & );
    struct D3DXMATRIX & operator*=(float );
    struct D3DXMATRIX & operator*=(struct D3DXMATRIX & );
    struct D3DXMATRIX & operator+=(struct D3DXMATRIX & );
    struct D3DXMATRIX & operator-=(struct D3DXMATRIX & );
    struct D3DXMATRIX & operator/=(float );
    struct D3DXMATRIX operator+(struct D3DXMATRIX & );
    struct D3DXMATRIX operator+();
    struct D3DXMATRIX operator-(struct D3DXMATRIX & );
    struct D3DXMATRIX operator-();
    struct D3DXMATRIX operator*(float );
    struct D3DXMATRIX operator*(struct D3DXMATRIX & );
    struct D3DXMATRIX operator/(float );
    int operator==(struct D3DXMATRIX & );
    int operator!=(struct D3DXMATRIX & );
};

struct ID3DXEffectCompiler : public ID3DXBaseEffect// Size=0x4 (Id=380)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    HRESULT GetDesc(struct _D3DXEFFECT_DESC * );
    HRESULT GetParameterDesc(unsigned int ,struct _D3DXPARAMETER_DESC * );
    HRESULT GetTechniqueDesc(unsigned int ,struct _D3DXTECHNIQUE_DESC * );
    HRESULT GetPassDesc(unsigned int ,struct _D3DXPASS_DESC * );
    HRESULT GetFunctionDesc(unsigned int ,struct _D3DXFUNCTION_DESC * );
    unsigned int GetParameter(unsigned int ,unsigned int );
    unsigned int GetParameterByName(unsigned int ,char * );
    unsigned int GetParameterBySemantic(unsigned int ,char * );
    unsigned int GetParameterElement(unsigned int ,unsigned int );
    unsigned int GetTechnique(unsigned int );
    unsigned int GetTechniqueByName(char * );
    unsigned int GetPass(unsigned int ,unsigned int );
    unsigned int GetPassByName(unsigned int ,char * );
    unsigned int GetFunction(unsigned int );
    unsigned int GetFunctionByName(char * );
    unsigned int GetAnnotation(unsigned int ,unsigned int );
    unsigned int GetAnnotationByName(unsigned int ,char * );
    HRESULT SetValue(unsigned int ,void * ,unsigned int );
    HRESULT GetValue(unsigned int ,void * ,unsigned int );
    HRESULT SetBool(unsigned int ,int );
    HRESULT GetBool(unsigned int ,int * );
    HRESULT SetBoolArray(unsigned int ,int * ,unsigned int );
    HRESULT GetBoolArray(unsigned int ,int * ,unsigned int );
    HRESULT SetInt(unsigned int ,int );
    HRESULT GetInt(unsigned int ,int * );
    HRESULT SetIntArray(unsigned int ,int * ,unsigned int );
    HRESULT GetIntArray(unsigned int ,int * ,unsigned int );
    HRESULT SetFloat(unsigned int ,float );
    HRESULT GetFloat(unsigned int ,float * );
    HRESULT SetFloatArray(unsigned int ,float * ,unsigned int );
    HRESULT GetFloatArray(unsigned int ,float * ,unsigned int );
    HRESULT SetVector(unsigned int ,struct D3DXVECTOR4 * );
    HRESULT GetVector(unsigned int ,struct D3DXVECTOR4 * );
    HRESULT SetVectorArray(unsigned int ,struct D3DXVECTOR4 * ,unsigned int );
    HRESULT GetVectorArray(unsigned int ,struct D3DXVECTOR4 * ,unsigned int );
    HRESULT SetMatrix(unsigned int ,struct D3DXMATRIX * );
    HRESULT GetMatrix(unsigned int ,struct D3DXMATRIX * );
    HRESULT SetMatrixArray(unsigned int ,struct D3DXMATRIX * ,unsigned int );
    HRESULT GetMatrixArray(unsigned int ,struct D3DXMATRIX * ,unsigned int );
    HRESULT SetMatrixPointerArray(unsigned int ,struct D3DXMATRIX ** ,unsigned int );
    HRESULT GetMatrixPointerArray(unsigned int ,struct D3DXMATRIX ** ,unsigned int );
    HRESULT SetMatrixTranspose(unsigned int ,struct D3DXMATRIX * );
    HRESULT GetMatrixTranspose(unsigned int ,struct D3DXMATRIX * );
    HRESULT SetMatrixTransposeArray(unsigned int ,struct D3DXMATRIX * ,unsigned int );
    HRESULT GetMatrixTransposeArray(unsigned int ,struct D3DXMATRIX * ,unsigned int );
    HRESULT SetMatrixTransposePointerArray(unsigned int ,struct D3DXMATRIX ** ,unsigned int );
    HRESULT GetMatrixTransposePointerArray(unsigned int ,struct D3DXMATRIX ** ,unsigned int );
    HRESULT SetString(unsigned int ,char * );
    HRESULT GetString(unsigned int ,char ** );
    HRESULT SetTexture(unsigned int ,struct D3DBaseTexture * );
    HRESULT GetTexture(unsigned int ,struct D3DBaseTexture ** );
    HRESULT SetPixelShader(unsigned int ,struct D3DPixelShader * );
    HRESULT GetPixelShader(unsigned int ,struct D3DPixelShader ** );
    HRESULT SetVertexShader(unsigned int ,struct D3DVertexShader * );
    HRESULT GetVertexShader(unsigned int ,struct D3DVertexShader ** );
    HRESULT SetArrayRange(unsigned int ,unsigned int ,unsigned int );
    HRESULT SetLiteral(unsigned int ,int );
    HRESULT GetLiteral(unsigned int ,int * );
    HRESULT CompileEffect(unsigned long ,struct ID3DXBuffer ** ,struct ID3DXBuffer ** );
    HRESULT CompileShader(unsigned int ,char * ,unsigned long ,struct ID3DXBuffer ** ,struct ID3DXBuffer ** ,struct ID3DXConstantTable ** );
    void ID3DXEffectCompiler(struct ID3DXEffectCompiler & );
    void ID3DXEffectCompiler();
    struct ID3DXEffectCompiler & operator=(struct ID3DXEffectCompiler & );
};

struct ID3DXEffectCompiler : public ID3DXBaseEffect// Size=0x4 (Id=381)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    HRESULT GetDesc(struct _D3DXEFFECT_DESC * );
    HRESULT GetParameterDesc(unsigned int ,struct _D3DXPARAMETER_DESC * );
    HRESULT GetTechniqueDesc(unsigned int ,struct _D3DXTECHNIQUE_DESC * );
    HRESULT GetPassDesc(unsigned int ,struct _D3DXPASS_DESC * );
    HRESULT GetFunctionDesc(unsigned int ,struct _D3DXFUNCTION_DESC * );
    unsigned int GetParameter(unsigned int ,unsigned int );
    unsigned int GetParameterByName(unsigned int ,char * );
    unsigned int GetParameterBySemantic(unsigned int ,char * );
    unsigned int GetParameterElement(unsigned int ,unsigned int );
    unsigned int GetTechnique(unsigned int );
    unsigned int GetTechniqueByName(char * );
    unsigned int GetPass(unsigned int ,unsigned int );
    unsigned int GetPassByName(unsigned int ,char * );
    unsigned int GetFunction(unsigned int );
    unsigned int GetFunctionByName(char * );
    unsigned int GetAnnotation(unsigned int ,unsigned int );
    unsigned int GetAnnotationByName(unsigned int ,char * );
    HRESULT SetValue(unsigned int ,void * ,unsigned int );
    HRESULT GetValue(unsigned int ,void * ,unsigned int );
    HRESULT SetBool(unsigned int ,int );
    HRESULT GetBool(unsigned int ,int * );
    HRESULT SetBoolArray(unsigned int ,int * ,unsigned int );
    HRESULT GetBoolArray(unsigned int ,int * ,unsigned int );
    HRESULT SetInt(unsigned int ,int );
    HRESULT GetInt(unsigned int ,int * );
    HRESULT SetIntArray(unsigned int ,int * ,unsigned int );
    HRESULT GetIntArray(unsigned int ,int * ,unsigned int );
    HRESULT SetFloat(unsigned int ,float );
    HRESULT GetFloat(unsigned int ,float * );
    HRESULT SetFloatArray(unsigned int ,float * ,unsigned int );
    HRESULT GetFloatArray(unsigned int ,float * ,unsigned int );
    HRESULT SetVector(unsigned int ,struct D3DXVECTOR4 * );
    HRESULT GetVector(unsigned int ,struct D3DXVECTOR4 * );
    HRESULT SetVectorArray(unsigned int ,struct D3DXVECTOR4 * ,unsigned int );
    HRESULT GetVectorArray(unsigned int ,struct D3DXVECTOR4 * ,unsigned int );
    HRESULT SetMatrix(unsigned int ,struct D3DXMATRIX * );
    HRESULT GetMatrix(unsigned int ,struct D3DXMATRIX * );
    HRESULT SetMatrixArray(unsigned int ,struct D3DXMATRIX * ,unsigned int );
    HRESULT GetMatrixArray(unsigned int ,struct D3DXMATRIX * ,unsigned int );
    HRESULT SetMatrixPointerArray(unsigned int ,struct D3DXMATRIX ** ,unsigned int );
    HRESULT GetMatrixPointerArray(unsigned int ,struct D3DXMATRIX ** ,unsigned int );
    HRESULT SetMatrixTranspose(unsigned int ,struct D3DXMATRIX * );
    HRESULT GetMatrixTranspose(unsigned int ,struct D3DXMATRIX * );
    HRESULT SetMatrixTransposeArray(unsigned int ,struct D3DXMATRIX * ,unsigned int );
    HRESULT GetMatrixTransposeArray(unsigned int ,struct D3DXMATRIX * ,unsigned int );
    HRESULT SetMatrixTransposePointerArray(unsigned int ,struct D3DXMATRIX ** ,unsigned int );
    HRESULT GetMatrixTransposePointerArray(unsigned int ,struct D3DXMATRIX ** ,unsigned int );
    HRESULT SetString(unsigned int ,char * );
    HRESULT GetString(unsigned int ,char ** );
    HRESULT SetTexture(unsigned int ,struct D3DBaseTexture * );
    HRESULT GetTexture(unsigned int ,struct D3DBaseTexture ** );
    HRESULT SetPixelShader(unsigned int ,struct D3DPixelShader * );
    HRESULT GetPixelShader(unsigned int ,struct D3DPixelShader ** );
    HRESULT SetVertexShader(unsigned int ,struct D3DVertexShader * );
    HRESULT GetVertexShader(unsigned int ,struct D3DVertexShader ** );
    HRESULT SetArrayRange(unsigned int ,unsigned int ,unsigned int );
    HRESULT SetLiteral(unsigned int ,int );
    HRESULT GetLiteral(unsigned int ,int * );
    HRESULT CompileEffect(unsigned long ,struct ID3DXBuffer ** ,struct ID3DXBuffer ** );
    HRESULT CompileShader(unsigned int ,char * ,unsigned long ,struct ID3DXBuffer ** ,struct ID3DXBuffer ** ,struct ID3DXConstantTable ** );
    void ID3DXEffectCompiler(struct ID3DXEffectCompiler & );
    void ID3DXEffectCompiler();
    struct ID3DXEffectCompiler & operator=(struct ID3DXEffectCompiler & );
};

struct _D3DXSHPRTSPLITMESHCLUSTERDATA// Size=0x18 (Id=382)
{
    unsigned int uVertStart;// Offset=0x0 Size=0x4
    unsigned int uVertLength;// Offset=0x4 Size=0x4
    unsigned int uFaceStart;// Offset=0x8 Size=0x4
    unsigned int uFaceLength;// Offset=0xc Size=0x4
    unsigned int uClusterStart;// Offset=0x10 Size=0x4
    unsigned int uClusterLength;// Offset=0x14 Size=0x4
};

struct _ACCESS_DENIED_ACE// Size=0xc (Id=383)
{
    struct _ACE_HEADER Header;// Offset=0x0 Size=0x4
    unsigned long Mask;// Offset=0x4 Size=0x4
    unsigned long SidStart;// Offset=0x8 Size=0x4
};

struct _XINPUT_GAMEPAD// Size=0xc (Id=384)
{
    unsigned short wButtons;// Offset=0x0 Size=0x2
    unsigned char bLeftTrigger;// Offset=0x2 Size=0x1
    unsigned char bRightTrigger;// Offset=0x3 Size=0x1
    short sThumbLX;// Offset=0x4 Size=0x2
    short sThumbLY;// Offset=0x6 Size=0x2
    short sThumbRX;// Offset=0x8 Size=0x2
    short sThumbRY;// Offset=0xa Size=0x2
};

struct _IMAGE_LINENUMBER// Size=0x6 (Id=385)
{
    union // Size=0x4 (Id=0)
    {
        union <unnamed-type-Type>// Size=0x4 (Id=12491)
        {
            unsigned long SymbolTableIndex;// Offset=0x0 Size=0x4
            unsigned long VirtualAddress;// Offset=0x0 Size=0x4
        };
        union _IMAGE_LINENUMBER::<unnamed-type-Type> Type;// Offset=0x0 Size=0x4
    };
    unsigned short Linenumber;// Offset=0x4 Size=0x2
};

struct XACHIEVEMENT_DETAILS// Size=0x24 (Id=386)
{
    unsigned long dwId;// Offset=0x0 Size=0x4
    wchar_t * pwszLabel;// Offset=0x4 Size=0x4
    wchar_t * pwszDescription;// Offset=0x8 Size=0x4
    wchar_t * pwszUnachieved;// Offset=0xc Size=0x4
    unsigned long dwImageId;// Offset=0x10 Size=0x4
    unsigned long dwCred;// Offset=0x14 Size=0x4
    struct _FILETIME ftAchieved;// Offset=0x18 Size=0x8
    unsigned long dwFlags;// Offset=0x20 Size=0x4
};

struct IUnknown// Size=0x4 (Id=387)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    void IUnknown(struct IUnknown & );
    void IUnknown();
    struct IUnknown & operator=(struct IUnknown & );
};

struct IUnknown// Size=0x4 (Id=388)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    void IUnknown(struct IUnknown & );
    void IUnknown();
    struct IUnknown & operator=(struct IUnknown & );
};

struct HENHMETAFILE__// Size=0x4 (Id=389)
{
    int unused;// Offset=0x0 Size=0x4
};

struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY// Size=0x14 (Id=390)
{
    unsigned long BeginAddress;// Offset=0x0 Size=0x4
    unsigned long EndAddress;// Offset=0x4 Size=0x4
    unsigned long ExceptionHandler;// Offset=0x8 Size=0x4
    unsigned long HandlerData;// Offset=0xc Size=0x4
    unsigned long PrologEndAddress;// Offset=0x10 Size=0x4
};

struct XGCpuShaderDevice// Size=0x60c0 (Id=391)
{
    unsigned long AddRef();
    unsigned long Release();
    void SetVertexShader(struct XGCpuVertexShader * );
    void GetVertexShader(struct XGCpuVertexShader ** );
    void SetVertexDeclaration(struct D3DVertexDeclaration * );
    void GetVertexDeclaration(struct D3DVertexDeclaration ** );
    void SetVertexDeclarationDest(struct D3DVertexDeclaration * );
    void GetVertexDeclarationDest(struct D3DVertexDeclaration ** );
    void SetFVF(unsigned long );
    void GetFVF(unsigned long * );
    void SetFVFDest(unsigned long );
    void GetFVFDest(unsigned long * );
    void SetStreamSource(unsigned int ,struct D3DVertexBuffer * ,unsigned int ,unsigned int );
    void GetStreamSource(unsigned int ,struct D3DVertexBuffer ** ,unsigned int * ,unsigned int * );
    void SetStreamDest(unsigned int ,struct D3DVertexBuffer * ,unsigned int ,unsigned int );
    void GetStreamDest(unsigned int ,struct D3DVertexBuffer ** ,unsigned int * ,unsigned int * );
    void SetVertexShaderConstantB(unsigned int ,int * ,unsigned int );
    void SetVertexShaderConstantF(unsigned int ,float * ,unsigned long );
    void SetVertexShaderConstantI(unsigned int ,int * ,unsigned long );
    void GetVertexShaderConstantB(unsigned int ,int * ,unsigned long );
    void GetVertexShaderConstantF(unsigned int ,float * ,unsigned long );
    void GetVertexShaderConstantI(unsigned int ,int * ,unsigned long );
    void ProcessVertices(unsigned int ,unsigned int ,unsigned int ,unsigned long );
    struct _XGCPUSHADERCONTEXT ShaderContext;// Offset=0x0 Size=0x60c0
};

struct _XINPUT_KEYSTROKE// Size=0x8 (Id=392)
{
    unsigned short VirtualKey;// Offset=0x0 Size=0x2
    wchar_t Unicode;// Offset=0x2 Size=0x2
    unsigned short Flags;// Offset=0x4 Size=0x2
    unsigned char UserIndex;// Offset=0x6 Size=0x1
    unsigned char HidCode;// Offset=0x7 Size=0x1
};

struct _XSWAPDISC_ERROR_TEXT// Size=0xc (Id=393)
{
    wchar_t * wszTitle;// Offset=0x0 Size=0x4
    wchar_t * wszText;// Offset=0x4 Size=0x4
    wchar_t * wszButton;// Offset=0x8 Size=0x4
};

struct XTITLE_SERVER_INFO// Size=0xd0 (Id=394)
{
    struct in_addr inaServer;// Offset=0x0 Size=0x4
    unsigned long dwFlags;// Offset=0x4 Size=0x4
    char szServerInfo[200];// Offset=0x8 Size=0xc8
};

struct _XMFLOAT2// Size=0x8 (Id=395)
{
    float x;// Offset=0x0 Size=0x4
    float y;// Offset=0x4 Size=0x4
    void _XMFLOAT2(float * );
    void _XMFLOAT2(float ,float );
    void _XMFLOAT2();
    struct _XMFLOAT2 & operator=(struct _XMFLOAT2 & );
};

struct _XMFLOAT2// Size=0x8 (Id=396)
{
    float x;// Offset=0x0 Size=0x4
    float y;// Offset=0x4 Size=0x4
    void _XMFLOAT2(float * );
    void _XMFLOAT2(float ,float );
    void _XMFLOAT2();
    struct _XMFLOAT2 & operator=(struct _XMFLOAT2 & );
};

struct _XONLINE_SERVICE_INFO// Size=0xc (Id=397)
{
    unsigned long dwServiceID;// Offset=0x0 Size=0x4
    struct in_addr serviceIP;// Offset=0x4 Size=0x4
    unsigned short wServicePort;// Offset=0x8 Size=0x2
    unsigned short wReserved;// Offset=0xa Size=0x2
};

struct _D3DXIMAGE_INFO// Size=0x1c (Id=398)
{
    unsigned int Width;// Offset=0x0 Size=0x4
    unsigned int Height;// Offset=0x4 Size=0x4
    unsigned int Depth;// Offset=0x8 Size=0x4
    unsigned int MipLevels;// Offset=0xc Size=0x4
    enum _D3DFORMAT Format;// Offset=0x10 Size=0x4
    enum _D3DRESOURCETYPE ResourceType;// Offset=0x14 Size=0x4
    enum _D3DXIMAGE_FILEFORMAT ImageFileFormat;// Offset=0x18 Size=0x4
};

struct _XOVERLAPPED// Size=0x1c (Id=399)
{
    unsigned long InternalLow;// Offset=0x0 Size=0x4
    unsigned long InternalHigh;// Offset=0x4 Size=0x4
    unsigned long InternalContext;// Offset=0x8 Size=0x4
    void * hEvent;// Offset=0xc Size=0x4
    void  ( * pCompletionRoutine)(unsigned long ,unsigned long ,struct _XOVERLAPPED * );// Offset=0x10 Size=0x4
    unsigned long dwCompletionContext;// Offset=0x14 Size=0x4
    unsigned long dwExtendedError;// Offset=0x18 Size=0x4
};

struct XNADDR// Size=0x24 (Id=400)
{
    struct in_addr ina;// Offset=0x0 Size=0x4
    struct in_addr inaOnline;// Offset=0x4 Size=0x4
    unsigned short wPortOnline;// Offset=0x8 Size=0x2
    unsigned char abEnet[6];// Offset=0xa Size=0x6
    unsigned char abOnline[20];// Offset=0x10 Size=0x14
};

struct _XSESSION_REGISTRATION_RESULTS// Size=0x8 (Id=401)
{
    unsigned long wNumRegistrants;// Offset=0x0 Size=0x4
    struct _XSESSION_REGISTRANT * rgRegistrants;// Offset=0x4 Size=0x4
};

struct _D3DTRIPATCH_INFO// Size=0x10 (Id=402)
{
    unsigned int StartVertexOffset;// Offset=0x0 Size=0x4
    unsigned int NumVertices;// Offset=0x4 Size=0x4
    enum _D3DBASISTYPE Basis;// Offset=0x8 Size=0x4
    enum _D3DDEGREETYPE Degree;// Offset=0xc Size=0x4
};

struct _XMFLOAT4X4// Size=0x40 (Id=403)
{
    union // Size=0x40 (Id=0)
    {
        float _11;// Offset=0x0 Size=0x4
        float _12;// Offset=0x4 Size=0x4
        float _13;// Offset=0x8 Size=0x4
        float _14;// Offset=0xc Size=0x4
        float _21;// Offset=0x10 Size=0x4
        float _22;// Offset=0x14 Size=0x4
        float _23;// Offset=0x18 Size=0x4
        float _24;// Offset=0x1c Size=0x4
        float _31;// Offset=0x20 Size=0x4
        float _32;// Offset=0x24 Size=0x4
        float _33;// Offset=0x28 Size=0x4
        float _34;// Offset=0x2c Size=0x4
        float _41;// Offset=0x30 Size=0x4
        float _42;// Offset=0x34 Size=0x4
        float _43;// Offset=0x38 Size=0x4
        float _44;// Offset=0x3c Size=0x4
        float m[4][4];// Offset=0x0 Size=0x40
    };
    void _XMFLOAT4X4(float * );
    void _XMFLOAT4X4(float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float );
    void _XMFLOAT4X4();
    float & operator()(unsigned int ,unsigned int );
    float operator()(unsigned int ,unsigned int );
    struct _XMFLOAT4X4 & operator=(struct _XMFLOAT4X4 & );
};

struct _XMFLOAT4X4// Size=0x40 (Id=404)
{
    union // Size=0x40 (Id=0)
    {
        float _11;// Offset=0x0 Size=0x4
        float _12;// Offset=0x4 Size=0x4
        float _13;// Offset=0x8 Size=0x4
        float _14;// Offset=0xc Size=0x4
        float _21;// Offset=0x10 Size=0x4
        float _22;// Offset=0x14 Size=0x4
        float _23;// Offset=0x18 Size=0x4
        float _24;// Offset=0x1c Size=0x4
        float _31;// Offset=0x20 Size=0x4
        float _32;// Offset=0x24 Size=0x4
        float _33;// Offset=0x28 Size=0x4
        float _34;// Offset=0x2c Size=0x4
        float _41;// Offset=0x30 Size=0x4
        float _42;// Offset=0x34 Size=0x4
        float _43;// Offset=0x38 Size=0x4
        float _44;// Offset=0x3c Size=0x4
        float m[4][4];// Offset=0x0 Size=0x40
    };
    void _XMFLOAT4X4(float * );
    void _XMFLOAT4X4(float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float );
    void _XMFLOAT4X4();
    float & operator()(unsigned int ,unsigned int );
    float operator()(unsigned int ,unsigned int );
    struct _XMFLOAT4X4 & operator=(struct _XMFLOAT4X4 & );
};

struct _XSESSION_LOCAL_DETAILS// Size=0x80 (Id=405)
{
    unsigned long dwUserIndexHost;// Offset=0x0 Size=0x4
    unsigned long dwGameType;// Offset=0x4 Size=0x4
    unsigned long dwGameMode;// Offset=0x8 Size=0x4
    unsigned long dwFlags;// Offset=0xc Size=0x4
    unsigned long dwMaxPublicSlots;// Offset=0x10 Size=0x4
    unsigned long dwMaxPrivateSlots;// Offset=0x14 Size=0x4
    unsigned long dwAvailablePublicSlots;// Offset=0x18 Size=0x4
    unsigned long dwAvailablePrivateSlots;// Offset=0x1c Size=0x4
    unsigned long dwActualMemberCount;// Offset=0x20 Size=0x4
    unsigned long dwReturnedMemberCount;// Offset=0x24 Size=0x4
    enum _XSESSION_STATE eState;// Offset=0x28 Size=0x4
    unsigned char __align0[4];// Offset=0x2c Size=0x4
    unsigned long long qwNonce;// Offset=0x30 Size=0x8
    struct _XSESSION_INFO sessionInfo;// Offset=0x38 Size=0x3c
    struct XNKID xnkidArbitration;// Offset=0x74 Size=0x8
    struct _XSESSION_MEMBER * pSessionMembers;// Offset=0x7c Size=0x4
};

struct _XMCOLOR// Size=0x4 (Id=406)
{
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            unsigned int b:8;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x8
            unsigned int g:8;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x8
            unsigned int r:8;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x8
            unsigned int a:8;// Offset=0x0 Size=0x4 BitOffset=0x18 BitSize=0x8
        };
        unsigned int c;// Offset=0x0 Size=0x4
    };
    void _XMCOLOR(float * );
    void _XMCOLOR(float ,float ,float ,float );
    void _XMCOLOR(unsigned int );
    void _XMCOLOR();
    unsigned int operator unsigned int();
    struct _XMCOLOR & operator=(const unsigned int );
    struct _XMCOLOR & operator=(struct _XMCOLOR & );
};

struct _XMCOLOR// Size=0x4 (Id=407)
{
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            unsigned int b:8;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x8
            unsigned int g:8;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x8
            unsigned int r:8;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x8
            unsigned int a:8;// Offset=0x0 Size=0x4 BitOffset=0x18 BitSize=0x8
        };
        unsigned int c;// Offset=0x0 Size=0x4
    };
    void _XMCOLOR(float * );
    void _XMCOLOR(float ,float ,float ,float );
    void _XMCOLOR(unsigned int );
    void _XMCOLOR();
    unsigned int operator unsigned int();
    struct _XMCOLOR & operator=(const unsigned int );
    struct _XMCOLOR & operator=(struct _XMCOLOR & );
};

struct ID3DXFileData : public IUnknown// Size=0x4 (Id=408)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    HRESULT GetEnum(struct ID3DXFileEnumObject ** );
    HRESULT GetName(char * ,unsigned long * );
    HRESULT GetId(struct _GUID * );
    HRESULT Lock(unsigned long * ,void ** );
    HRESULT Unlock();
    HRESULT GetType(struct _GUID * );
    HRESULT IsReference();
    HRESULT GetChildren(unsigned long * );
    HRESULT GetChild(unsigned long ,struct ID3DXFileData ** );
    void ID3DXFileData(struct ID3DXFileData & );
    void ID3DXFileData();
    struct ID3DXFileData & operator=(struct ID3DXFileData & );
};

struct ID3DXFileData : public IUnknown// Size=0x4 (Id=409)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    HRESULT GetEnum(struct ID3DXFileEnumObject ** );
    HRESULT GetName(char * ,unsigned long * );
    HRESULT GetId(struct _GUID * );
    HRESULT Lock(unsigned long * ,void ** );
    HRESULT Unlock();
    HRESULT GetType(struct _GUID * );
    HRESULT IsReference();
    HRESULT GetChildren(unsigned long * );
    HRESULT GetChild(unsigned long ,struct ID3DXFileData ** );
    void ID3DXFileData(struct ID3DXFileData & );
    void ID3DXFileData();
    struct ID3DXFileData & operator=(struct ID3DXFileData & );
};

union GPU_MPASSPSCONTROL// Size=0x4 (Id=410)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long MPassPixVecPerPass:20;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x14
        unsigned long MPassPsEnable:1;// Offset=0x0 Size=0x4 BitOffset=0x1f BitSize=0x1
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

struct _RECTL// Size=0x10 (Id=411)
{
    long left;// Offset=0x0 Size=0x4
    long top;// Offset=0x4 Size=0x4
    long right;// Offset=0x8 Size=0x4
    long bottom;// Offset=0xc Size=0x4
};

union GPU_SURFACEINFO// Size=0x4 (Id=412)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long SurfacePitch:14;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xe
        unsigned long MsaaSamples:2;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x2
        unsigned long HiZPitch:14;// Offset=0x0 Size=0x4 BitOffset=0x12 BitSize=0xe
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

struct _XGUCODE_DESCRIPTION// Size=0x28 (Id=413)
{
    int IsPixelShader;// Offset=0x0 Size=0x4
    unsigned long PassCount;// Offset=0x4 Size=0x4
    struct _XGUCODE_PASS_DESCRIPTION Pass[2];// Offset=0x8 Size=0x20
};

struct GPUTEXTURESIZE_2D// Size=0x4 (Id=414)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long Width:13;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xd
        unsigned long Height:13;// Offset=0x0 Size=0x4 BitOffset=0xd BitSize=0xd
    };
};

struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY// Size=0x8 (Id=415)
{
    unsigned long FuncStart;// Offset=0x0 Size=0x4
    struct // Size=0x4 (Id=0)
    {
        unsigned long PrologLen:8;// Offset=0x4 Size=0x4 BitOffset=0x18 BitSize=0x8
        unsigned long FuncLen:22;// Offset=0x4 Size=0x4 BitOffset=0x2 BitSize=0x16
        unsigned long ThirtyTwoBit:1;// Offset=0x4 Size=0x4 BitOffset=0x1 BitSize=0x1
        unsigned long ExceptionFlag:1;// Offset=0x4 Size=0x4 BitOffset=0x0 BitSize=0x1
    };
};

union GPUFLOW_COND_EXEC_PREDS// Size=0x8 (Id=416)
{
    struct // Size=0x8 (Id=0)
    {
        unsigned long Address:12;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xc
        unsigned long Count:3;// Offset=0x0 Size=0x4 BitOffset=0xc BitSize=0x3
        unsigned long Yield:1;// Offset=0x0 Size=0x4 BitOffset=0xf BitSize=0x1
        unsigned long TypeAndSerialize:12;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0xc
        unsigned long VertexCacheLow:4;// Offset=0x0 Size=0x4 BitOffset=0x1c BitSize=0x4
        unsigned long VertexCacheHigh:2;// Offset=0x4 Size=0x4 BitOffset=0x0 BitSize=0x2
        unsigned long PredicateClean:1;// Offset=0x4 Size=0x4 BitOffset=0x9 BitSize=0x1
        unsigned long Condition:1;// Offset=0x4 Size=0x4 BitOffset=0xa BitSize=0x1
        unsigned long AbsoluteAddressing:1;// Offset=0x4 Size=0x4 BitOffset=0xb BitSize=0x1
        unsigned long Op:4;// Offset=0x4 Size=0x4 BitOffset=0xc BitSize=0x4
    };
};

struct GPU_TESSELLATORPACKET// Size=0x54 (Id=417)
{
    union GPU_POINTSIZE PointSize;// Offset=0x0 Size=0x4
    union GPU_POINTMINMAX PointMinMax;// Offset=0x4 Size=0x4
    union GPU_LINECONTROL LineControl;// Offset=0x8 Size=0x4
    unsigned long Unused1;// Offset=0xc Size=0x4
    union GPU_OUTPUTPATHCONTROL OutputPathControl;// Offset=0x10 Size=0x4
    union GPU_HOSCONTROL HosControl;// Offset=0x14 Size=0x4
    float HosMaxTessLevel;// Offset=0x18 Size=0x4
    float HosMinTessLevel;// Offset=0x1c Size=0x4
    unsigned long HosReuseDepth;// Offset=0x20 Size=0x4
    union GPU_GROUPPRIMTYPE GroupPrimType;// Offset=0x24 Size=0x4
    unsigned long GroupFirstDecr;// Offset=0x28 Size=0x4
    unsigned long GroupDecr;// Offset=0x2c Size=0x4
    union GPU_GROUPVECTCONTROL GroupVect0Control;// Offset=0x30 Size=0x4
    union GPU_GROUPVECTCONTROL GroupVect1Control;// Offset=0x34 Size=0x4
    union GPU_GROUPVECTFMTCONTROL GroupVect0FmtControl;// Offset=0x38 Size=0x4
    union GPU_GROUPVECTFMTCONTROL GroupVect1FmtControl;// Offset=0x3c Size=0x4
    unsigned long Unused2[2];// Offset=0x40 Size=0x8
    union GPU_MPASSPSCONTROL MPassPsControl;// Offset=0x48 Size=0x4
    union GPU_VIZQUERY VizQuery;// Offset=0x4c Size=0x4
    union GPU_ENHANCE Enhance;// Offset=0x50 Size=0x4
};

struct GPU_DESTINATIONPACKET// Size=0x40 (Id=418)
{
    union GPU_SURFACEINFO SurfaceInfo;// Offset=0x0 Size=0x4
    union GPU_COLORINFO Color0Info;// Offset=0x4 Size=0x4
    union GPU_DEPTHINFO DepthInfo;// Offset=0x8 Size=0x4
    union GPU_COLORINFO Color1Info;// Offset=0xc Size=0x4
    union GPU_COLORINFO Color2Info;// Offset=0x10 Size=0x4
    union GPU_COLORINFO Color3Info;// Offset=0x14 Size=0x4
    unsigned long CoherDestBase0;// Offset=0x18 Size=0x4
    unsigned long CoherDestBase1;// Offset=0x1c Size=0x4
    unsigned long CoherDestBase2;// Offset=0x20 Size=0x4
    unsigned long CoherDestBase3;// Offset=0x24 Size=0x4
    unsigned long CoherDestBase4;// Offset=0x28 Size=0x4
    unsigned long CoherDestBase5;// Offset=0x2c Size=0x4
    unsigned long CoherDestBase6;// Offset=0x30 Size=0x4
    unsigned long CoherDestBase7;// Offset=0x34 Size=0x4
    union GPU_POINT ScreenScissorTL;// Offset=0x38 Size=0x4
    union GPU_POINT ScreenScissorBR;// Offset=0x3c Size=0x4
};

struct _GET_USER_INFO_RESPONSE// Size=0x3c (Id=419)
{
    unsigned short wFirstNameLength;// Offset=0x0 Size=0x2
    wchar_t * wszFirstName;// Offset=0x2 Size=0x4
    unsigned short wLastNameLength;// Offset=0x6 Size=0x2
    wchar_t * wszLastName;// Offset=0x8 Size=0x4
    struct _ADDRESS_INFO addressInfo;// Offset=0xc Size=0x24
    unsigned short wEmailLength;// Offset=0x30 Size=0x2
    wchar_t * wszEmail;// Offset=0x32 Size=0x4
    unsigned short wLanguageId;// Offset=0x36 Size=0x2
    unsigned char bCountryId;// Offset=0x38 Size=0x1
    unsigned char bMsftOptIn;// Offset=0x39 Size=0x1
    unsigned char bParterOptIn;// Offset=0x3a Size=0x1
    unsigned char bAge;// Offset=0x3b Size=0x1
};

struct ANON_OBJECT_HEADER// Size=0x20 (Id=420)
{
    unsigned short Sig1;// Offset=0x0 Size=0x2
    unsigned short Sig2;// Offset=0x2 Size=0x2
    unsigned short Version;// Offset=0x4 Size=0x2
    unsigned short Machine;// Offset=0x6 Size=0x2
    unsigned long TimeDateStamp;// Offset=0x8 Size=0x4
    struct _GUID ClassID;// Offset=0xc Size=0x10
    unsigned long SizeOfData;// Offset=0x1c Size=0x4
};

struct _XGMICROCODESHADERPARTS// Size=0x10 (Id=421)
{
    void * pCachedPart;// Offset=0x0 Size=0x4
    unsigned long cbCachedPartSize;// Offset=0x4 Size=0x4
    void * pPhysicalPart;// Offset=0x8 Size=0x4
    unsigned long cbPhysicalPartSize;// Offset=0xc Size=0x4
};

struct GPU_CONTROLPACKET// Size=0x30 (Id=422)
{
    union GPU_DEPTHCONTROL DepthControl;// Offset=0x0 Size=0x4
    union GPU_BLENDCONTROL BlendControl0;// Offset=0x4 Size=0x4
    union GPU_COLORCONTROL ColorControl;// Offset=0x8 Size=0x4
    union GPU_HICONTROL HiControl;// Offset=0xc Size=0x4
    union GPU_CLIPCONTROL ClipControl;// Offset=0x10 Size=0x4
    union GPU_MODECONTROL ModeControl;// Offset=0x14 Size=0x4
    union GPU_VTECONTROL VteControl;// Offset=0x18 Size=0x4
    unsigned long Unused;// Offset=0x1c Size=0x4
    union GPU_EDRAMMODECONTROL EdramModeControl;// Offset=0x20 Size=0x4
    union GPU_BLENDCONTROL BlendControl1;// Offset=0x24 Size=0x4
    union GPU_BLENDCONTROL BlendControl2;// Offset=0x28 Size=0x4
    union GPU_BLENDCONTROL BlendControl3;// Offset=0x2c Size=0x4
};

struct _XMXICON4// Size=0x8 (Id=423)
{
    union // Size=0x8 (Id=0)
    {
        struct // Size=0x8 (Id=0)
        {
            long long x:20;// Offset=0x0 Size=0x8 BitOffset=0x0 BitSize=0x14
            long long y:20;// Offset=0x0 Size=0x8 BitOffset=0x14 BitSize=0x14
            long long z:20;// Offset=0x0 Size=0x8 BitOffset=0x28 BitSize=0x14
            unsigned long long w:4;// Offset=0x0 Size=0x8 BitOffset=0x3c BitSize=0x4
        };
        unsigned long long v;// Offset=0x0 Size=0x8
    };
    void _XMXICON4(float * );
    void _XMXICON4(float ,float ,float ,float );
    void _XMXICON4(unsigned long long );
    void _XMXICON4();
    unsigned long long operator unsigned __int64();
    struct _XMXICON4 & operator=(const unsigned long long );
    struct _XMXICON4 & operator=(struct _XMXICON4 & );
};

struct _XMXICON4// Size=0x8 (Id=424)
{
    union // Size=0x8 (Id=0)
    {
        struct // Size=0x8 (Id=0)
        {
            long long x:20;// Offset=0x0 Size=0x8 BitOffset=0x0 BitSize=0x14
            long long y:20;// Offset=0x0 Size=0x8 BitOffset=0x14 BitSize=0x14
            long long z:20;// Offset=0x0 Size=0x8 BitOffset=0x28 BitSize=0x14
            unsigned long long w:4;// Offset=0x0 Size=0x8 BitOffset=0x3c BitSize=0x4
        };
        unsigned long long v;// Offset=0x0 Size=0x8
    };
    void _XMXICON4(float * );
    void _XMXICON4(float ,float ,float ,float );
    void _XMXICON4(unsigned long long );
    void _XMXICON4();
    unsigned long long operator unsigned __int64();
    struct _XMXICON4 & operator=(const unsigned long long );
    struct _XMXICON4 & operator=(struct _XMXICON4 & );
};

struct _D3DXSHADER_INSTRUCTIONINFO// Size=0x8 (Id=425)
{
    unsigned short Line;// Offset=0x0 Size=0x2
    unsigned short File;// Offset=0x2 Size=0x2
    unsigned long Offset;// Offset=0x4 Size=0x4
};

struct _D3DXEVENT_DESC// Size=0x28 (Id=426)
{
    enum _D3DXEVENT_TYPE Type;// Offset=0x0 Size=0x4
    unsigned int Track;// Offset=0x4 Size=0x4
    float StartTime;// Offset=0x8 Size=0x8
    float Duration;// Offset=0x10 Size=0x8
    enum _D3DXTRANSITION_TYPE Transition;// Offset=0x18 Size=0x4
    unsigned char __align0[4];// Offset=0x1c Size=0x4
    union // Size=0x28 (Id=0)
    {
        float Weight;// Offset=0x20 Size=0x4
        float Speed;// Offset=0x20 Size=0x4
        float Position;// Offset=0x20 Size=0x8
        int Enable;// Offset=0x20 Size=0x4
    };
};

struct _SID_IDENTIFIER_AUTHORITY// Size=0x6 (Id=427)
{
    unsigned char Value[6];// Offset=0x0 Size=0x6
};

struct _XUSER_DATA// Size=0x10 (Id=428)
{
    unsigned char type;// Offset=0x0 Size=0x1
    unsigned char __align0[7];// Offset=0x1 Size=0x7
    union // Size=0x10 (Id=0)
    {
        long nData;// Offset=0x8 Size=0x4
        long long i64Data;// Offset=0x8 Size=0x8
        float dblData;// Offset=0x8 Size=0x8
        struct _XUSER_DATA::_unnamed_430::<unnamed-type-string> string;// Offset=0x8 Size=0x8
        float fData;// Offset=0x8 Size=0x4
        struct _XUSER_DATA::_unnamed_429::<unnamed-type-binary> binary;// Offset=0x8 Size=0x8
        struct _FILETIME ftData;// Offset=0x8 Size=0x8
    };
};

struct _XUSER_DATA::_unnamed_429::<unnamed-type-binary>// Size=0x8 (Id=429)
{
    unsigned long cbData;// Offset=0x0 Size=0x4
    unsigned char * pbData;// Offset=0x4 Size=0x4
};

struct _XUSER_DATA::_unnamed_430::<unnamed-type-string>// Size=0x8 (Id=430)
{
    unsigned long cbData;// Offset=0x0 Size=0x4
    wchar_t * pwszData;// Offset=0x4 Size=0x4
};

struct GPU_MISCPACKET// Size=0x98 (Id=431)
{
    union GPU_SCLINECONTROL ScLineControl;// Offset=0x0 Size=0x4
    union GPU_AACONFIG AaConfig;// Offset=0x4 Size=0x4
    union GPU_VTXCONTROL VtxControl;// Offset=0x8 Size=0x4
    float GbVertClipAdj;// Offset=0xc Size=0x4
    float GbVertDiscAdj;// Offset=0x10 Size=0x4
    float GbHorzClipAdj;// Offset=0x14 Size=0x4
    float GbHorzDiscAdj;// Offset=0x18 Size=0x4
    union GPU_CONST VsConst;// Offset=0x1c Size=0x4
    union GPU_CONST PsConst;// Offset=0x20 Size=0x4
    union GPU_DEBUGMISC0 DebugMisc0;// Offset=0x24 Size=0x4
    union GPU_DEBUGMISC1 DebugMisc1;// Offset=0x28 Size=0x4
    unsigned long Unused1[5];// Offset=0x2c Size=0x14
    unsigned long Unused2[2];// Offset=0x40 Size=0x8
    unsigned long AaMask;// Offset=0x48 Size=0x4
    unsigned long Unused3[3];// Offset=0x4c Size=0xc
    union GPU_VERTEXREUSEBLOCKCONTROL VertexReuseBlockControl;// Offset=0x58 Size=0x4
    union GPU_OUTDEALLOCCONTROL OutDeallocControl;// Offset=0x5c Size=0x4
    union GPU_COPYCONTROL CopyControl;// Offset=0x60 Size=0x4
    unsigned long CopyDestBase;// Offset=0x64 Size=0x4
    union GPU_COPYDESTPITCH CopyDestPitch;// Offset=0x68 Size=0x4
    union GPU_COPYDESTINFO CopyDestInfo;// Offset=0x6c Size=0x4
    unsigned long HiClear;// Offset=0x70 Size=0x4
    unsigned long DepthClear;// Offset=0x74 Size=0x4
    unsigned long ColorClear;// Offset=0x78 Size=0x4
    unsigned long ColorClearLo;// Offset=0x7c Size=0x4
    union GPU_COPYFUNC CopyFunc;// Offset=0x80 Size=0x4
    union GPU_COPYREF CopyRef;// Offset=0x84 Size=0x4
    union GPU_COPYMASK CopyMask;// Offset=0x88 Size=0x4
    unsigned long CopySurfaceSlice;// Offset=0x8c Size=0x4
    union GPU_SAMPLECOUNTCONTROL SampleCountControl;// Offset=0x90 Size=0x4
    unsigned long SampleCountAddress;// Offset=0x94 Size=0x4
};

struct _D3DXMESHDATA// Size=0x8 (Id=432)
{
    enum _D3DXMESHDATATYPE Type;// Offset=0x0 Size=0x4
    union // Size=0x8 (Id=0)
    {
        struct ID3DXMesh * pMesh;// Offset=0x4 Size=0x4
        struct ID3DXPMesh * pPMesh;// Offset=0x4 Size=0x4
        struct ID3DXPatchMesh * pPatchMesh;// Offset=0x4 Size=0x4
    };
};

struct _D3DBOX// Size=0x18 (Id=433)
{
    unsigned int Left;// Offset=0x0 Size=0x4
    unsigned int Top;// Offset=0x4 Size=0x4
    unsigned int Right;// Offset=0x8 Size=0x4
    unsigned int Bottom;// Offset=0xc Size=0x4
    unsigned int Front;// Offset=0x10 Size=0x4
    unsigned int Back;// Offset=0x14 Size=0x4
};

struct D3DVolume : public D3DResource// Size=0x20 (Id=434)
{
    HRESULT GetContainer(struct _GUID & ,void ** );
    HRESULT GetDesc(struct _D3DVOLUME_DESC * );
    HRESULT LockBox(struct _D3DLOCKED_BOX * ,struct _D3DBOX * ,unsigned long );
    HRESULT AsyncLockBox(unsigned long long ,struct _D3DLOCKED_BOX * ,struct _D3DBOX * ,unsigned long );
    HRESULT UnlockBox();
    unsigned char __align0[24];// Offset=0x0 Size=0x18
    struct D3DBaseTexture * Parent;// Offset=0x18 Size=0x4
    struct // Size=0x4 (Id=0)
    {
        unsigned long MipLevel:4;// Offset=0x1c Size=0x4 BitOffset=0x1c BitSize=0x4
        unsigned long ArrayIndex:6;// Offset=0x1c Size=0x4 BitOffset=0x16 BitSize=0x6
    };
};

union GPUCOMMAND_LOAD_ALU_CONSTANT// Size=0xc (Id=435)
{
    struct // Size=0xc (Id=0)
    {
        unsigned long Address:30;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x1e
        unsigned long Offset:11;// Offset=0x4 Size=0x4 BitOffset=0x0 BitSize=0xb
        unsigned long Size:12;// Offset=0x8 Size=0x4 BitOffset=0x0 BitSize=0xc
    };
    unsigned long dword[3];// Offset=0x0 Size=0xc
};

struct _XGMCT_COMPRESSION_PARAMS// Size=0x20 (Id=436)
{
    float Quality;// Offset=0x0 Size=0x4
    unsigned int LinearThreshold;// Offset=0x4 Size=0x4
    float AlphaRef;// Offset=0x8 Size=0x4
    int Level;// Offset=0xc Size=0x4
    struct _XGPOINT3D TrainingSampleSpread;// Offset=0x10 Size=0xc
    float AlphaQuality;// Offset=0x1c Size=0x4
};

struct _IMAGE_VXD_HEADER// Size=0xc4 (Id=437)
{
    unsigned short e32_magic;// Offset=0x0 Size=0x2
    unsigned char e32_border;// Offset=0x2 Size=0x1
    unsigned char e32_worder;// Offset=0x3 Size=0x1
    unsigned long e32_level;// Offset=0x4 Size=0x4
    unsigned short e32_cpu;// Offset=0x8 Size=0x2
    unsigned short e32_os;// Offset=0xa Size=0x2
    unsigned long e32_ver;// Offset=0xc Size=0x4
    unsigned long e32_mflags;// Offset=0x10 Size=0x4
    unsigned long e32_mpages;// Offset=0x14 Size=0x4
    unsigned long e32_startobj;// Offset=0x18 Size=0x4
    unsigned long e32_eip;// Offset=0x1c Size=0x4
    unsigned long e32_stackobj;// Offset=0x20 Size=0x4
    unsigned long e32_esp;// Offset=0x24 Size=0x4
    unsigned long e32_pagesize;// Offset=0x28 Size=0x4
    unsigned long e32_lastpagesize;// Offset=0x2c Size=0x4
    unsigned long e32_fixupsize;// Offset=0x30 Size=0x4
    unsigned long e32_fixupsum;// Offset=0x34 Size=0x4
    unsigned long e32_ldrsize;// Offset=0x38 Size=0x4
    unsigned long e32_ldrsum;// Offset=0x3c Size=0x4
    unsigned long e32_objtab;// Offset=0x40 Size=0x4
    unsigned long e32_objcnt;// Offset=0x44 Size=0x4
    unsigned long e32_objmap;// Offset=0x48 Size=0x4
    unsigned long e32_itermap;// Offset=0x4c Size=0x4
    unsigned long e32_rsrctab;// Offset=0x50 Size=0x4
    unsigned long e32_rsrccnt;// Offset=0x54 Size=0x4
    unsigned long e32_restab;// Offset=0x58 Size=0x4
    unsigned long e32_enttab;// Offset=0x5c Size=0x4
    unsigned long e32_dirtab;// Offset=0x60 Size=0x4
    unsigned long e32_dircnt;// Offset=0x64 Size=0x4
    unsigned long e32_fpagetab;// Offset=0x68 Size=0x4
    unsigned long e32_frectab;// Offset=0x6c Size=0x4
    unsigned long e32_impmod;// Offset=0x70 Size=0x4
    unsigned long e32_impmodcnt;// Offset=0x74 Size=0x4
    unsigned long e32_impproc;// Offset=0x78 Size=0x4
    unsigned long e32_pagesum;// Offset=0x7c Size=0x4
    unsigned long e32_datapage;// Offset=0x80 Size=0x4
    unsigned long e32_preload;// Offset=0x84 Size=0x4
    unsigned long e32_nrestab;// Offset=0x88 Size=0x4
    unsigned long e32_cbnrestab;// Offset=0x8c Size=0x4
    unsigned long e32_nressum;// Offset=0x90 Size=0x4
    unsigned long e32_autodata;// Offset=0x94 Size=0x4
    unsigned long e32_debuginfo;// Offset=0x98 Size=0x4
    unsigned long e32_debuglen;// Offset=0x9c Size=0x4
    unsigned long e32_instpreload;// Offset=0xa0 Size=0x4
    unsigned long e32_instdemand;// Offset=0xa4 Size=0x4
    unsigned long e32_heapsize;// Offset=0xa8 Size=0x4
    unsigned char e32_res3[12];// Offset=0xac Size=0xc
    unsigned long e32_winresoff;// Offset=0xb8 Size=0x4
    unsigned long e32_winreslen;// Offset=0xbc Size=0x4
    unsigned short e32_devid;// Offset=0xc0 Size=0x2
    unsigned short e32_ddkver;// Offset=0xc2 Size=0x2
};

struct _D3DXSHPRTBUFFER_DESC// Size=0x14 (Id=438)
{
    unsigned int NumSamples;// Offset=0x0 Size=0x4
    unsigned int Order;// Offset=0x4 Size=0x4
    unsigned int NumChannels;// Offset=0x8 Size=0x4
    unsigned int Width;// Offset=0xc Size=0x4
    unsigned int Height;// Offset=0x10 Size=0x4
};

struct _D3DXPARAMETER_DESC// Size=0x2c (Id=439)
{
    char * Name;// Offset=0x0 Size=0x4
    char * Semantic;// Offset=0x4 Size=0x4
    enum _D3DXPARAMETER_CLASS Class;// Offset=0x8 Size=0x4
    enum _D3DXPARAMETER_TYPE Type;// Offset=0xc Size=0x4
    unsigned int Rows;// Offset=0x10 Size=0x4
    unsigned int Columns;// Offset=0x14 Size=0x4
    unsigned int Elements;// Offset=0x18 Size=0x4
    unsigned int Annotations;// Offset=0x1c Size=0x4
    unsigned int StructMembers;// Offset=0x20 Size=0x4
    unsigned long Flags;// Offset=0x24 Size=0x4
    unsigned int Bytes;// Offset=0x28 Size=0x4
};

struct _WIN32_FILE_ATTRIBUTE_DATA// Size=0x24 (Id=440)
{
    unsigned long dwFileAttributes;// Offset=0x0 Size=0x4
    struct _FILETIME ftCreationTime;// Offset=0x4 Size=0x8
    struct _FILETIME ftLastAccessTime;// Offset=0xc Size=0x8
    struct _FILETIME ftLastWriteTime;// Offset=0x14 Size=0x8
    unsigned long nFileSizeHigh;// Offset=0x1c Size=0x4
    unsigned long nFileSizeLow;// Offset=0x20 Size=0x4
};

struct XPLAYERLIST_BUTTON// Size=0x34 (Id=441)
{
    unsigned long dwType;// Offset=0x0 Size=0x4
    wchar_t wszCustomText[23];// Offset=0x4 Size=0x2e
};

union GPU_GROUPVECTFMTCONTROL// Size=0x4 (Id=442)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long XConv:4;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x4
        unsigned long XOffset:4;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x4
        unsigned long YConv:4;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x4
        unsigned long YOffset:4;// Offset=0x0 Size=0x4 BitOffset=0xc BitSize=0x4
        unsigned long ZConv:4;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x4
        unsigned long ZOffset:4;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0x4
        unsigned long WConv:4;// Offset=0x0 Size=0x4 BitOffset=0x18 BitSize=0x4
        unsigned long WOffset:4;// Offset=0x0 Size=0x4 BitOffset=0x1c BitSize=0x4
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

struct _IMAGE_OPTIONAL_HEADER// Size=0xe0 (Id=443)
{
    unsigned short Magic;// Offset=0x0 Size=0x2
    unsigned char MajorLinkerVersion;// Offset=0x2 Size=0x1
    unsigned char MinorLinkerVersion;// Offset=0x3 Size=0x1
    unsigned long SizeOfCode;// Offset=0x4 Size=0x4
    unsigned long SizeOfInitializedData;// Offset=0x8 Size=0x4
    unsigned long SizeOfUninitializedData;// Offset=0xc Size=0x4
    unsigned long AddressOfEntryPoint;// Offset=0x10 Size=0x4
    unsigned long BaseOfCode;// Offset=0x14 Size=0x4
    unsigned long BaseOfData;// Offset=0x18 Size=0x4
    unsigned long ImageBase;// Offset=0x1c Size=0x4
    unsigned long SectionAlignment;// Offset=0x20 Size=0x4
    unsigned long FileAlignment;// Offset=0x24 Size=0x4
    unsigned short MajorOperatingSystemVersion;// Offset=0x28 Size=0x2
    unsigned short MinorOperatingSystemVersion;// Offset=0x2a Size=0x2
    unsigned short MajorImageVersion;// Offset=0x2c Size=0x2
    unsigned short MinorImageVersion;// Offset=0x2e Size=0x2
    unsigned short MajorSubsystemVersion;// Offset=0x30 Size=0x2
    unsigned short MinorSubsystemVersion;// Offset=0x32 Size=0x2
    unsigned long Win32VersionValue;// Offset=0x34 Size=0x4
    unsigned long SizeOfImage;// Offset=0x38 Size=0x4
    unsigned long SizeOfHeaders;// Offset=0x3c Size=0x4
    unsigned long CheckSum;// Offset=0x40 Size=0x4
    unsigned short Subsystem;// Offset=0x44 Size=0x2
    unsigned short DllCharacteristics;// Offset=0x46 Size=0x2
    unsigned long SizeOfStackReserve;// Offset=0x48 Size=0x4
    unsigned long SizeOfStackCommit;// Offset=0x4c Size=0x4
    unsigned long SizeOfHeapReserve;// Offset=0x50 Size=0x4
    unsigned long SizeOfHeapCommit;// Offset=0x54 Size=0x4
    unsigned long LoaderFlags;// Offset=0x58 Size=0x4
    unsigned long NumberOfRvaAndSizes;// Offset=0x5c Size=0x4
    struct _IMAGE_DATA_DIRECTORY DataDirectory[16];// Offset=0x60 Size=0x80
};

struct _IMAGE_COFF_SYMBOLS_HEADER// Size=0x20 (Id=444)
{
    unsigned long NumberOfSymbols;// Offset=0x0 Size=0x4
    unsigned long LvaToFirstSymbol;// Offset=0x4 Size=0x4
    unsigned long NumberOfLinenumbers;// Offset=0x8 Size=0x4
    unsigned long LvaToFirstLinenumber;// Offset=0xc Size=0x4
    unsigned long RvaToFirstByteOfCode;// Offset=0x10 Size=0x4
    unsigned long RvaToLastByteOfCode;// Offset=0x14 Size=0x4
    unsigned long RvaToFirstByteOfData;// Offset=0x18 Size=0x4
    unsigned long RvaToLastByteOfData;// Offset=0x1c Size=0x4
};

struct _IMAGE_SYMBOL// Size=0x12 (Id=445)
{
    union // Size=0x8 (Id=0)
    {
        union <unnamed-type-N>// Size=0x8 (Id=13075)
        {
            unsigned char ShortName[8];// Offset=0x0 Size=0x8
            struct <unnamed-type-Name>// Size=0x8 (Id=13077)
            {
                unsigned long Short;// Offset=0x0 Size=0x4
                unsigned long Long;// Offset=0x4 Size=0x4
            };
            struct _IMAGE_SYMBOL::<unnamed-type-N>::<unnamed-type-Name> Name;// Offset=0x0 Size=0x8
            unsigned long LongName[2];// Offset=0x0 Size=0x8
        };
        union _IMAGE_SYMBOL::<unnamed-type-N> N;// Offset=0x0 Size=0x8
    };
    unsigned long Value;// Offset=0x8 Size=0x4
    short SectionNumber;// Offset=0xc Size=0x2
    unsigned short Type;// Offset=0xe Size=0x2
    unsigned char StorageClass;// Offset=0x10 Size=0x1
    unsigned char NumberOfAuxSymbols;// Offset=0x11 Size=0x1
};

struct _D3DXWELDEPSILONS// Size=0x44 (Id=446)
{
    float Position;// Offset=0x0 Size=0x4
    float BlendWeights;// Offset=0x4 Size=0x4
    float Normal;// Offset=0x8 Size=0x4
    float PSize;// Offset=0xc Size=0x4
    float Specular;// Offset=0x10 Size=0x4
    float Diffuse;// Offset=0x14 Size=0x4
    float Texcoord[8];// Offset=0x18 Size=0x20
    float Tangent;// Offset=0x38 Size=0x4
    float Binormal;// Offset=0x3c Size=0x4
    float TessFactor;// Offset=0x40 Size=0x4
};

struct _D3DPWLGAMMA// Size=0x600 (Id=447)
{
    struct _D3DPWLGAMMAENTRY red[128];// Offset=0x0 Size=0x200
    struct _D3DPWLGAMMAENTRY green[128];// Offset=0x200 Size=0x200
    struct _D3DPWLGAMMAENTRY blue[128];// Offset=0x400 Size=0x200
};

struct _XMDECN4// Size=0x4 (Id=448)
{
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            int x:10;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xa
            int y:10;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0xa
            int z:10;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0xa
            int w:2;// Offset=0x0 Size=0x4 BitOffset=0x1e BitSize=0x2
        };
        unsigned int v;// Offset=0x0 Size=0x4
    };
    void _XMDECN4(float * );
    void _XMDECN4(float ,float ,float ,float );
    void _XMDECN4(unsigned int );
    void _XMDECN4();
    unsigned int operator unsigned int();
    struct _XMDECN4 & operator=(const unsigned int );
    struct _XMDECN4 & operator=(struct _XMDECN4 & );
};

struct _XMDECN4// Size=0x4 (Id=449)
{
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            int x:10;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xa
            int y:10;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0xa
            int z:10;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0xa
            int w:2;// Offset=0x0 Size=0x4 BitOffset=0x1e BitSize=0x2
        };
        unsigned int v;// Offset=0x0 Size=0x4
    };
    void _XMDECN4(float * );
    void _XMDECN4(float ,float ,float ,float );
    void _XMDECN4(unsigned int );
    void _XMDECN4();
    unsigned int operator unsigned int();
    struct _XMDECN4 & operator=(const unsigned int );
    struct _XMDECN4 & operator=(struct _XMDECN4 & );
};

struct _WSABUF// Size=0x8 (Id=450)
{
    unsigned long len;// Offset=0x0 Size=0x4
    char * buf;// Offset=0x4 Size=0x4
};

struct _XUSER_READ_PROFILE_SETTING_RESULT// Size=0x8 (Id=451)
{
    unsigned long dwSettingsLen;// Offset=0x0 Size=0x4
    struct _XUSER_PROFILE_SETTING * pSettings;// Offset=0x4 Size=0x4
};

union GPUVERTEX_FETCH_CONSTANT// Size=0x8 (Id=452)
{
    struct // Size=0x8 (Id=0)
    {
        unsigned long Type:2;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x2
        unsigned long BaseAddress:30;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x1e
        unsigned long Endian:2;// Offset=0x4 Size=0x4 BitOffset=0x0 BitSize=0x2
        unsigned long Size:24;// Offset=0x4 Size=0x4 BitOffset=0x2 BitSize=0x18
        unsigned long AddressClamp:1;// Offset=0x4 Size=0x4 BitOffset=0x1a BitSize=0x1
        unsigned long RequestSize:2;// Offset=0x4 Size=0x4 BitOffset=0x1c BitSize=0x2
        unsigned long ClampDisable:2;// Offset=0x4 Size=0x4 BitOffset=0x1e BitSize=0x2
    };
    unsigned long dword[2];// Offset=0x0 Size=0x8
};

struct _XINPUT_VIBRATION// Size=0x4 (Id=453)
{
    unsigned short wLeftMotorSpeed;// Offset=0x0 Size=0x2
    unsigned short wRightMotorSpeed;// Offset=0x2 Size=0x2
};

struct _XSESSION_REGISTRANT// Size=0x18 (Id=454)
{
    unsigned long long qwMachineID;// Offset=0x0 Size=0x8
    unsigned long bTrustworthiness;// Offset=0x8 Size=0x4
    unsigned long bNumUsers;// Offset=0xc Size=0x4
    unsigned long long * rgUsers;// Offset=0x10 Size=0x4
};

struct _XSESSION_MEMBER// Size=0x10 (Id=455)
{
    unsigned long long xuidOnline;// Offset=0x0 Size=0x8
    unsigned long dwUserIndex;// Offset=0x8 Size=0x4
    unsigned long dwFlags;// Offset=0xc Size=0x4
};

struct _ACCESS_ALLOWED_ACE// Size=0xc (Id=456)
{
    struct _ACE_HEADER Header;// Offset=0x0 Size=0x4
    unsigned long Mask;// Offset=0x4 Size=0x4
    unsigned long SidStart;// Offset=0x8 Size=0x4
};

union GPU_COLORMASK// Size=0x4 (Id=457)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long Write0:4;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x4
        unsigned long Write1:4;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x4
        unsigned long Write2:4;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x4
        unsigned long Write3:4;// Offset=0x0 Size=0x4 BitOffset=0xc BitSize=0x4
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

struct IDirectXFile : public IUnknown// Size=0x4 (Id=458)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    HRESULT CreateEnumObject(void * ,unsigned long ,struct IDirectXFileEnumObject ** );
    HRESULT CreateSaveObject(char * ,unsigned long ,struct IDirectXFileSaveObject ** );
    HRESULT RegisterTemplates(void * ,unsigned long );
    void IDirectXFile(struct IDirectXFile & );
    void IDirectXFile();
    struct IDirectXFile & operator=(struct IDirectXFile & );
};

struct IDirectXFile : public IUnknown// Size=0x4 (Id=459)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    HRESULT CreateEnumObject(void * ,unsigned long ,struct IDirectXFileEnumObject ** );
    HRESULT CreateSaveObject(char * ,unsigned long ,struct IDirectXFileSaveObject ** );
    HRESULT RegisterTemplates(void * ,unsigned long );
    void IDirectXFile(struct IDirectXFile & );
    void IDirectXFile();
    struct IDirectXFile & operator=(struct IDirectXFile & );
};

struct _XINVITE_INFO// Size=0x54 (Id=460)
{
    unsigned long long xuidInvitee;// Offset=0x0 Size=0x8
    unsigned long long xuidInviter;// Offset=0x8 Size=0x8
    unsigned long dwTitleID;// Offset=0x10 Size=0x4
    struct _XSESSION_INFO hostInfo;// Offset=0x14 Size=0x3c
    int fFromGameInvite;// Offset=0x50 Size=0x4
};

struct _D3DVIDEO_SCALER_PARAMETERS// Size=0x1c (Id=461)
{
    struct _D3DRECT ScalerSourceRect;// Offset=0x0 Size=0x10
    unsigned long ScaledOutputWidth;// Offset=0x10 Size=0x4
    unsigned long ScaledOutputHeight;// Offset=0x14 Size=0x4
    unsigned long FilterProfile;// Offset=0x18 Size=0x4
};

struct vc_attributes::PreBoundAttribute// Size=0x4 (Id=462)
{
    void PreBoundAttribute();
    unsigned int Deref;// Offset=0x0 Size=0x4
};

union GPUTEXTURE_FETCH_CONSTANT// Size=0x18 (Id=463)
{
    struct // Size=0x8 (Id=0)
    {
        unsigned long Type:2;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x2
        unsigned long SignX:2;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x2
        unsigned long SignY:2;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x2
        unsigned long SignZ:2;// Offset=0x0 Size=0x4 BitOffset=0x6 BitSize=0x2
        unsigned long SignW:2;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x2
        unsigned long ClampX:3;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0x3
        unsigned long ClampY:3;// Offset=0x0 Size=0x4 BitOffset=0xd BitSize=0x3
        unsigned long ClampZ:3;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x3
        unsigned long Pitch:9;// Offset=0x0 Size=0x4 BitOffset=0x16 BitSize=0x9
        unsigned long Tiled:1;// Offset=0x0 Size=0x4 BitOffset=0x1f BitSize=0x1
        unsigned long DataFormat:6;// Offset=0x4 Size=0x4 BitOffset=0x0 BitSize=0x6
        unsigned long Endian:2;// Offset=0x4 Size=0x4 BitOffset=0x6 BitSize=0x2
        unsigned long RequestSize:2;// Offset=0x4 Size=0x4 BitOffset=0x8 BitSize=0x2
        unsigned long Stacked:1;// Offset=0x4 Size=0x4 BitOffset=0xa BitSize=0x1
        unsigned long ClampPolicy:1;// Offset=0x4 Size=0x4 BitOffset=0xb BitSize=0x1
        unsigned long BaseAddress:20;// Offset=0x4 Size=0x4 BitOffset=0xc BitSize=0x14
    };
    union GPUTEXTURE_FETCH_CONSTANT::_unnamed_1102::<unnamed-type-Size> Size;// Offset=0x8 Size=0x4
    struct // Size=0xc (Id=0)
    {
        unsigned long NumFormat:1;// Offset=0xc Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long SwizzleX:3;// Offset=0xc Size=0x4 BitOffset=0x1 BitSize=0x3
        unsigned long SwizzleY:3;// Offset=0xc Size=0x4 BitOffset=0x4 BitSize=0x3
        unsigned long SwizzleZ:3;// Offset=0xc Size=0x4 BitOffset=0x7 BitSize=0x3
        unsigned long SwizzleW:3;// Offset=0xc Size=0x4 BitOffset=0xa BitSize=0x3
        int ExpAdjust:6;// Offset=0xc Size=0x4 BitOffset=0xd BitSize=0x6
        unsigned long MagFilter:2;// Offset=0xc Size=0x4 BitOffset=0x13 BitSize=0x2
        unsigned long MinFilter:2;// Offset=0xc Size=0x4 BitOffset=0x15 BitSize=0x2
        unsigned long MipFilter:2;// Offset=0xc Size=0x4 BitOffset=0x17 BitSize=0x2
        unsigned long AnisoFilter:3;// Offset=0xc Size=0x4 BitOffset=0x19 BitSize=0x3
        unsigned long BorderSize:1;// Offset=0xc Size=0x4 BitOffset=0x1f BitSize=0x1
        unsigned long VolMagFilter:1;// Offset=0x10 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long VolMinFilter:1;// Offset=0x10 Size=0x4 BitOffset=0x1 BitSize=0x1
        unsigned long MinMipLevel:4;// Offset=0x10 Size=0x4 BitOffset=0x2 BitSize=0x4
        unsigned long MaxMipLevel:4;// Offset=0x10 Size=0x4 BitOffset=0x6 BitSize=0x4
        unsigned long MagAnisoWalk:1;// Offset=0x10 Size=0x4 BitOffset=0xa BitSize=0x1
        unsigned long MinAnisoWalk:1;// Offset=0x10 Size=0x4 BitOffset=0xb BitSize=0x1
        int LODBias:10;// Offset=0x10 Size=0x4 BitOffset=0xc BitSize=0xa
        int GradExpAdjustH:5;// Offset=0x10 Size=0x4 BitOffset=0x16 BitSize=0x5
        int GradExpAdjustV:5;// Offset=0x10 Size=0x4 BitOffset=0x1b BitSize=0x5
        unsigned long BorderColor:2;// Offset=0x14 Size=0x4 BitOffset=0x0 BitSize=0x2
        unsigned long ForceBCWToMax:1;// Offset=0x14 Size=0x4 BitOffset=0x2 BitSize=0x1
        unsigned long TriClamp:2;// Offset=0x14 Size=0x4 BitOffset=0x3 BitSize=0x2
        int AnisoBias:4;// Offset=0x14 Size=0x4 BitOffset=0x5 BitSize=0x4
        unsigned long Dimension:2;// Offset=0x14 Size=0x4 BitOffset=0x9 BitSize=0x2
        unsigned long PackedMips:1;// Offset=0x14 Size=0x4 BitOffset=0xb BitSize=0x1
        unsigned long MipAddress:20;// Offset=0x14 Size=0x4 BitOffset=0xc BitSize=0x14
    };
    unsigned long dword[6];// Offset=0x0 Size=0x18
};

union GPUCOMMAND_WAIT_REG_EQ// Size=0x10 (Id=464)
{
    struct // Size=0x10 (Id=0)
    {
        unsigned long Register:15;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xf
        unsigned long Reference:32;// Offset=0x4 Size=0x4 BitOffset=0x0 BitSize=0x20
        unsigned long Mask:32;// Offset=0x8 Size=0x4 BitOffset=0x0 BitSize=0x20
        unsigned long WaitInterval:16;// Offset=0xc Size=0x4 BitOffset=0x0 BitSize=0x10
    };
    unsigned long dword[4];// Offset=0x0 Size=0x10
};

struct _IMAGE_THUNK_DATA32// Size=0x4 (Id=465)
{
    union // Size=0x4 (Id=0)
    {
        union <unnamed-type-u1>// Size=0x4 (Id=13243)
        {
            unsigned long ForwarderString;// Offset=0x0 Size=0x4
            unsigned long Function;// Offset=0x0 Size=0x4
            unsigned long Ordinal;// Offset=0x0 Size=0x4
            unsigned long AddressOfData;// Offset=0x0 Size=0x4
        };
        union _IMAGE_THUNK_DATA32::<unnamed-type-u1> u1;// Offset=0x0 Size=0x4
    };
};

struct _XTDECODER_PARAMETERS// Size=0x24 (Id=466)
{
    enum _XMEMCODEC_TYPE CodecType;// Offset=0x0 Size=0x4
    void * pCodecParams;// Offset=0x4 Size=0x4
    unsigned long Flags;// Offset=0x8 Size=0x4
    unsigned long HardwareThread;// Offset=0xc Size=0x4
    int ThreadPriority;// Offset=0x10 Size=0x4
    unsigned long SegmentSizeLimit;// Offset=0x14 Size=0x4
    unsigned long PendingReadLimit;// Offset=0x18 Size=0x4
    unsigned long OpenFileLimit;// Offset=0x1c Size=0x4
    unsigned long TranslationCacheSize;// Offset=0x20 Size=0x4
};

union GPU_WRAPPING0// Size=0x4 (Id=467)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long Wrap8:4;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x4
        unsigned long Wrap9:4;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x4
        unsigned long Wrap10:4;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x4
        unsigned long Wrap11:4;// Offset=0x0 Size=0x4 BitOffset=0xc BitSize=0x4
        unsigned long Wrap12:4;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x4
        unsigned long Wrap13:4;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0x4
        unsigned long Wrap14:4;// Offset=0x0 Size=0x4 BitOffset=0x18 BitSize=0x4
        unsigned long Wrap15:4;// Offset=0x0 Size=0x4 BitOffset=0x1c BitSize=0x4
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

struct _D3DCLIPSTATUS9// Size=0x8 (Id=468)
{
    unsigned long ClipUnion;// Offset=0x0 Size=0x4
    unsigned long ClipIntersection;// Offset=0x4 Size=0x4
};

struct _D3DXTECHNIQUE_DESC// Size=0xc (Id=469)
{
    char * Name;// Offset=0x0 Size=0x4
    unsigned int Passes;// Offset=0x4 Size=0x4
    unsigned int Annotations;// Offset=0x8 Size=0x4
};

union GPUCOMMAND_REG_TO_MEM// Size=0x8 (Id=470)
{
    struct // Size=0x8 (Id=0)
    {
        unsigned long Register:15;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xf
        unsigned long Endian:2;// Offset=0x4 Size=0x4 BitOffset=0x0 BitSize=0x2
        unsigned long Address:30;// Offset=0x4 Size=0x4 BitOffset=0x2 BitSize=0x1e
    };
    unsigned long dword[2];// Offset=0x0 Size=0x8
};

struct IDirectXFileEnumObject : public IUnknown// Size=0x4 (Id=471)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    HRESULT GetNextDataObject(struct IDirectXFileData ** );
    HRESULT GetDataObjectById(struct _GUID & ,struct IDirectXFileData ** );
    HRESULT GetDataObjectByName(char * ,struct IDirectXFileData ** );
    void IDirectXFileEnumObject(struct IDirectXFileEnumObject & );
    void IDirectXFileEnumObject();
    struct IDirectXFileEnumObject & operator=(struct IDirectXFileEnumObject & );
};

struct IDirectXFileEnumObject : public IUnknown// Size=0x4 (Id=472)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    HRESULT GetNextDataObject(struct IDirectXFileData ** );
    HRESULT GetDataObjectById(struct _GUID & ,struct IDirectXFileData ** );
    HRESULT GetDataObjectByName(char * ,struct IDirectXFileData ** );
    void IDirectXFileEnumObject(struct IDirectXFileEnumObject & );
    void IDirectXFileEnumObject();
    struct IDirectXFileEnumObject & operator=(struct IDirectXFileEnumObject & );
};

struct ID3DXEffect : public ID3DXBaseEffect// Size=0x4 (Id=473)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    HRESULT GetDesc(struct _D3DXEFFECT_DESC * );
    HRESULT GetParameterDesc(unsigned int ,struct _D3DXPARAMETER_DESC * );
    HRESULT GetTechniqueDesc(unsigned int ,struct _D3DXTECHNIQUE_DESC * );
    HRESULT GetPassDesc(unsigned int ,struct _D3DXPASS_DESC * );
    HRESULT GetFunctionDesc(unsigned int ,struct _D3DXFUNCTION_DESC * );
    unsigned int GetParameter(unsigned int ,unsigned int );
    unsigned int GetParameterByName(unsigned int ,char * );
    unsigned int GetParameterBySemantic(unsigned int ,char * );
    unsigned int GetParameterElement(unsigned int ,unsigned int );
    unsigned int GetTechnique(unsigned int );
    unsigned int GetTechniqueByName(char * );
    unsigned int GetPass(unsigned int ,unsigned int );
    unsigned int GetPassByName(unsigned int ,char * );
    unsigned int GetFunction(unsigned int );
    unsigned int GetFunctionByName(char * );
    unsigned int GetAnnotation(unsigned int ,unsigned int );
    unsigned int GetAnnotationByName(unsigned int ,char * );
    HRESULT SetValue(unsigned int ,void * ,unsigned int );
    HRESULT GetValue(unsigned int ,void * ,unsigned int );
    HRESULT SetBool(unsigned int ,int );
    HRESULT GetBool(unsigned int ,int * );
    HRESULT SetBoolArray(unsigned int ,int * ,unsigned int );
    HRESULT GetBoolArray(unsigned int ,int * ,unsigned int );
    HRESULT SetInt(unsigned int ,int );
    HRESULT GetInt(unsigned int ,int * );
    HRESULT SetIntArray(unsigned int ,int * ,unsigned int );
    HRESULT GetIntArray(unsigned int ,int * ,unsigned int );
    HRESULT SetFloat(unsigned int ,float );
    HRESULT GetFloat(unsigned int ,float * );
    HRESULT SetFloatArray(unsigned int ,float * ,unsigned int );
    HRESULT GetFloatArray(unsigned int ,float * ,unsigned int );
    HRESULT SetVector(unsigned int ,struct D3DXVECTOR4 * );
    HRESULT GetVector(unsigned int ,struct D3DXVECTOR4 * );
    HRESULT SetVectorArray(unsigned int ,struct D3DXVECTOR4 * ,unsigned int );
    HRESULT GetVectorArray(unsigned int ,struct D3DXVECTOR4 * ,unsigned int );
    HRESULT SetMatrix(unsigned int ,struct D3DXMATRIX * );
    HRESULT GetMatrix(unsigned int ,struct D3DXMATRIX * );
    HRESULT SetMatrixArray(unsigned int ,struct D3DXMATRIX * ,unsigned int );
    HRESULT GetMatrixArray(unsigned int ,struct D3DXMATRIX * ,unsigned int );
    HRESULT SetMatrixPointerArray(unsigned int ,struct D3DXMATRIX ** ,unsigned int );
    HRESULT GetMatrixPointerArray(unsigned int ,struct D3DXMATRIX ** ,unsigned int );
    HRESULT SetMatrixTranspose(unsigned int ,struct D3DXMATRIX * );
    HRESULT GetMatrixTranspose(unsigned int ,struct D3DXMATRIX * );
    HRESULT SetMatrixTransposeArray(unsigned int ,struct D3DXMATRIX * ,unsigned int );
    HRESULT GetMatrixTransposeArray(unsigned int ,struct D3DXMATRIX * ,unsigned int );
    HRESULT SetMatrixTransposePointerArray(unsigned int ,struct D3DXMATRIX ** ,unsigned int );
    HRESULT GetMatrixTransposePointerArray(unsigned int ,struct D3DXMATRIX ** ,unsigned int );
    HRESULT SetString(unsigned int ,char * );
    HRESULT GetString(unsigned int ,char ** );
    HRESULT SetTexture(unsigned int ,struct D3DBaseTexture * );
    HRESULT GetTexture(unsigned int ,struct D3DBaseTexture ** );
    HRESULT SetPixelShader(unsigned int ,struct D3DPixelShader * );
    HRESULT GetPixelShader(unsigned int ,struct D3DPixelShader ** );
    HRESULT SetVertexShader(unsigned int ,struct D3DVertexShader * );
    HRESULT GetVertexShader(unsigned int ,struct D3DVertexShader ** );
    HRESULT SetArrayRange(unsigned int ,unsigned int ,unsigned int );
    HRESULT GetPool(struct ID3DXEffectPool ** );
    HRESULT SetTechnique(unsigned int );
    unsigned int GetCurrentTechnique();
    HRESULT ValidateTechnique(unsigned int );
    HRESULT FindNextValidTechnique(unsigned int ,unsigned int * );
    int IsParameterUsed(unsigned int ,unsigned int );
    HRESULT Begin(unsigned int * ,unsigned long );
    HRESULT BeginPass(unsigned int );
    HRESULT CommitChanges();
    HRESULT EndPass();
    HRESULT End();
    HRESULT GetDevice(struct D3DDevice ** );
    HRESULT OnLostDevice();
    HRESULT OnResetDevice();
    HRESULT SetStateManager(struct ID3DXEffectStateManager * );
    HRESULT GetStateManager(struct ID3DXEffectStateManager ** );
    HRESULT BeginParameterBlock();
    unsigned int EndParameterBlock();
    HRESULT ApplyParameterBlock(unsigned int );
    HRESULT CloneEffect(struct D3DDevice * ,struct ID3DXEffect ** );
    void ID3DXEffect(struct ID3DXEffect & );
    void ID3DXEffect();
    struct ID3DXEffect & operator=(struct ID3DXEffect & );
};

struct ID3DXEffect : public ID3DXBaseEffect// Size=0x4 (Id=474)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    HRESULT GetDesc(struct _D3DXEFFECT_DESC * );
    HRESULT GetParameterDesc(unsigned int ,struct _D3DXPARAMETER_DESC * );
    HRESULT GetTechniqueDesc(unsigned int ,struct _D3DXTECHNIQUE_DESC * );
    HRESULT GetPassDesc(unsigned int ,struct _D3DXPASS_DESC * );
    HRESULT GetFunctionDesc(unsigned int ,struct _D3DXFUNCTION_DESC * );
    unsigned int GetParameter(unsigned int ,unsigned int );
    unsigned int GetParameterByName(unsigned int ,char * );
    unsigned int GetParameterBySemantic(unsigned int ,char * );
    unsigned int GetParameterElement(unsigned int ,unsigned int );
    unsigned int GetTechnique(unsigned int );
    unsigned int GetTechniqueByName(char * );
    unsigned int GetPass(unsigned int ,unsigned int );
    unsigned int GetPassByName(unsigned int ,char * );
    unsigned int GetFunction(unsigned int );
    unsigned int GetFunctionByName(char * );
    unsigned int GetAnnotation(unsigned int ,unsigned int );
    unsigned int GetAnnotationByName(unsigned int ,char * );
    HRESULT SetValue(unsigned int ,void * ,unsigned int );
    HRESULT GetValue(unsigned int ,void * ,unsigned int );
    HRESULT SetBool(unsigned int ,int );
    HRESULT GetBool(unsigned int ,int * );
    HRESULT SetBoolArray(unsigned int ,int * ,unsigned int );
    HRESULT GetBoolArray(unsigned int ,int * ,unsigned int );
    HRESULT SetInt(unsigned int ,int );
    HRESULT GetInt(unsigned int ,int * );
    HRESULT SetIntArray(unsigned int ,int * ,unsigned int );
    HRESULT GetIntArray(unsigned int ,int * ,unsigned int );
    HRESULT SetFloat(unsigned int ,float );
    HRESULT GetFloat(unsigned int ,float * );
    HRESULT SetFloatArray(unsigned int ,float * ,unsigned int );
    HRESULT GetFloatArray(unsigned int ,float * ,unsigned int );
    HRESULT SetVector(unsigned int ,struct D3DXVECTOR4 * );
    HRESULT GetVector(unsigned int ,struct D3DXVECTOR4 * );
    HRESULT SetVectorArray(unsigned int ,struct D3DXVECTOR4 * ,unsigned int );
    HRESULT GetVectorArray(unsigned int ,struct D3DXVECTOR4 * ,unsigned int );
    HRESULT SetMatrix(unsigned int ,struct D3DXMATRIX * );
    HRESULT GetMatrix(unsigned int ,struct D3DXMATRIX * );
    HRESULT SetMatrixArray(unsigned int ,struct D3DXMATRIX * ,unsigned int );
    HRESULT GetMatrixArray(unsigned int ,struct D3DXMATRIX * ,unsigned int );
    HRESULT SetMatrixPointerArray(unsigned int ,struct D3DXMATRIX ** ,unsigned int );
    HRESULT GetMatrixPointerArray(unsigned int ,struct D3DXMATRIX ** ,unsigned int );
    HRESULT SetMatrixTranspose(unsigned int ,struct D3DXMATRIX * );
    HRESULT GetMatrixTranspose(unsigned int ,struct D3DXMATRIX * );
    HRESULT SetMatrixTransposeArray(unsigned int ,struct D3DXMATRIX * ,unsigned int );
    HRESULT GetMatrixTransposeArray(unsigned int ,struct D3DXMATRIX * ,unsigned int );
    HRESULT SetMatrixTransposePointerArray(unsigned int ,struct D3DXMATRIX ** ,unsigned int );
    HRESULT GetMatrixTransposePointerArray(unsigned int ,struct D3DXMATRIX ** ,unsigned int );
    HRESULT SetString(unsigned int ,char * );
    HRESULT GetString(unsigned int ,char ** );
    HRESULT SetTexture(unsigned int ,struct D3DBaseTexture * );
    HRESULT GetTexture(unsigned int ,struct D3DBaseTexture ** );
    HRESULT SetPixelShader(unsigned int ,struct D3DPixelShader * );
    HRESULT GetPixelShader(unsigned int ,struct D3DPixelShader ** );
    HRESULT SetVertexShader(unsigned int ,struct D3DVertexShader * );
    HRESULT GetVertexShader(unsigned int ,struct D3DVertexShader ** );
    HRESULT SetArrayRange(unsigned int ,unsigned int ,unsigned int );
    HRESULT GetPool(struct ID3DXEffectPool ** );
    HRESULT SetTechnique(unsigned int );
    unsigned int GetCurrentTechnique();
    HRESULT ValidateTechnique(unsigned int );
    HRESULT FindNextValidTechnique(unsigned int ,unsigned int * );
    int IsParameterUsed(unsigned int ,unsigned int );
    HRESULT Begin(unsigned int * ,unsigned long );
    HRESULT BeginPass(unsigned int );
    HRESULT CommitChanges();
    HRESULT EndPass();
    HRESULT End();
    HRESULT GetDevice(struct D3DDevice ** );
    HRESULT OnLostDevice();
    HRESULT OnResetDevice();
    HRESULT SetStateManager(struct ID3DXEffectStateManager * );
    HRESULT GetStateManager(struct ID3DXEffectStateManager ** );
    HRESULT BeginParameterBlock();
    unsigned int EndParameterBlock();
    HRESULT ApplyParameterBlock(unsigned int );
    HRESULT CloneEffect(struct D3DDevice * ,struct ID3DXEffect ** );
    void ID3DXEffect(struct ID3DXEffect & );
    void ID3DXEffect();
    struct ID3DXEffect & operator=(struct ID3DXEffect & );
};

struct _XSTORAGE_FILE_INFO// Size=0x41 (Id=475)
{
    unsigned long dwTitleID;// Offset=0x0 Size=0x4
    unsigned long dwTitleVersion;// Offset=0x4 Size=0x4
    unsigned long long qwOwnerPUID;// Offset=0x8 Size=0x8
    unsigned char bCountryID;// Offset=0x10 Size=0x1
    unsigned long long qwReserved;// Offset=0x11 Size=0x8
    unsigned long dwContentType;// Offset=0x19 Size=0x4
    unsigned long dwStorageSize;// Offset=0x1d Size=0x4
    unsigned long dwInstalledSize;// Offset=0x21 Size=0x4
    struct _FILETIME ftCreated;// Offset=0x25 Size=0x8
    struct _FILETIME ftLastModified;// Offset=0x2d Size=0x8
    unsigned short wAttributesSize;// Offset=0x35 Size=0x2
    unsigned short cchPathName;// Offset=0x37 Size=0x2
    wchar_t * pwszPathName;// Offset=0x39 Size=0x4
    unsigned char * pbAttributes;// Offset=0x3d Size=0x4
};

struct _IMAGE_BASE_RELOCATION// Size=0x8 (Id=476)
{
    unsigned long VirtualAddress;// Offset=0x0 Size=0x4
    unsigned long SizeOfBlock;// Offset=0x4 Size=0x4
};

union GPU_BCCONTROL// Size=0x4 (Id=477)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long BankActToActSClk:6;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x6
        unsigned long DisableFragCombine:1;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x1
        unsigned long DisableReOrder:1;// Offset=0x0 Size=0x4 BitOffset=0x9 BitSize=0x1
        unsigned long HzFudgeShift:2;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0x2
        unsigned long ScreenExtMethod:2;// Offset=0x0 Size=0x4 BitOffset=0xc BitSize=0x2
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

struct WSAData// Size=0x190 (Id=478)
{
    unsigned short wVersion;// Offset=0x0 Size=0x2
    unsigned short wHighVersion;// Offset=0x2 Size=0x2
    char szDescription[257];// Offset=0x4 Size=0x101
    char szSystemStatus[129];// Offset=0x105 Size=0x81
    unsigned short iMaxSockets;// Offset=0x186 Size=0x2
    unsigned short iMaxUdpDg;// Offset=0x188 Size=0x2
    unsigned char __align0[2];// Offset=0x18a Size=0x2
    char * lpVendorInfo;// Offset=0x18c Size=0x4
};

union GPUCOMMAND_MPEG_INDEX// Size=0x8 (Id=479)
{
    struct // Size=0x8 (Id=0)
    {
        unsigned long PrimType:6;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x6
        unsigned long SrcSelect:2;// Offset=0x0 Size=0x4 BitOffset=0x6 BitSize=0x2
        unsigned long MajorMode:3;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x3
        unsigned long IndexType:1;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x1
        unsigned long NotEndOfPacket:1;// Offset=0x0 Size=0x4 BitOffset=0xc BitSize=0x1
        unsigned long NumIndices:16;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x10
        unsigned long NumBaseIndices:14;// Offset=0x4 Size=0x4 BitOffset=0x0 BitSize=0xe
    };
    unsigned long Index32[0];
    unsigned long dword[2];// Offset=0x0 Size=0x8
};

struct HWINEVENTHOOK__// Size=0x4 (Id=480)
{
    int unused;// Offset=0x0 Size=0x4
};

struct _D3DVOLUME_DESC// Size=0x1c (Id=481)
{
    enum _D3DFORMAT Format;// Offset=0x0 Size=0x4
    enum _D3DRESOURCETYPE Type;// Offset=0x4 Size=0x4
    unsigned long Usage;// Offset=0x8 Size=0x4
    unsigned long Pool;// Offset=0xc Size=0x4
    unsigned int Width;// Offset=0x10 Size=0x4
    unsigned int Height;// Offset=0x14 Size=0x4
    unsigned int Depth;// Offset=0x18 Size=0x4
};

struct threadlocaleinfostruct// Size=0xd8 (Id=482)
{
    union // Size=0x48 (Id=0)
    {
        int refcount;// Offset=0x0 Size=0x4
        unsigned int lc_codepage;// Offset=0x4 Size=0x4
        unsigned int lc_collate_cp;// Offset=0x8 Size=0x4
        unsigned long lc_handle[6];// Offset=0xc Size=0x18
        struct tagLC_ID lc_id[6];// Offset=0x24 Size=0x24
        struct <unnamed-type-lc_category>// Size=0x10 (Id=13498)
        {
            char * locale;// Offset=0x0 Size=0x4
            wchar_t * wlocale;// Offset=0x4 Size=0x4
            int * refcount;// Offset=0x8 Size=0x4
            int * wrefcount;// Offset=0xc Size=0x4
        };
        unsigned char __align0[56];// Offset=0x10 Size=0x38
    };
    struct threadlocaleinfostruct::<unnamed-type-lc_category> lc_category[6];// Offset=0x48 Size=0x60
    int lc_clike;// Offset=0xa8 Size=0x4
    int mb_cur_max;// Offset=0xac Size=0x4
    int * lconv_intl_refcount;// Offset=0xb0 Size=0x4
    int * lconv_num_refcount;// Offset=0xb4 Size=0x4
    int * lconv_mon_refcount;// Offset=0xb8 Size=0x4
    struct lconv * lconv;// Offset=0xbc Size=0x4
    int * ctype1_refcount;// Offset=0xc0 Size=0x4
    unsigned short * ctype1;// Offset=0xc4 Size=0x4
    unsigned short * pctype;// Offset=0xc8 Size=0x4
    unsigned char * pclmap;// Offset=0xcc Size=0x4
    unsigned char * pcumap;// Offset=0xd0 Size=0x4
    struct __lc_time_data * lc_time_curr;// Offset=0xd4 Size=0x4
};

struct _MESSAGE_RESOURCE_ENTRY// Size=0x6 (Id=483)
{
    unsigned short Length;// Offset=0x0 Size=0x2
    unsigned short Flags;// Offset=0x2 Size=0x2
    unsigned char Text[1];// Offset=0x4 Size=0x1
};

struct _D3DXMESHDATA// Size=0x8 (Id=484)
{
    enum _D3DXMESHDATATYPE Type;// Offset=0x0 Size=0x4
    union // Size=0x8 (Id=0)
    {
        struct ID3DXMesh * pMesh;// Offset=0x4 Size=0x4
        struct ID3DXPMesh * pPMesh;// Offset=0x4 Size=0x4
        struct ID3DXPatchMesh * pPatchMesh;// Offset=0x4 Size=0x4
    };
};

struct _D3DXMATERIAL// Size=0x48 (Id=485)
{
    struct _D3DMATERIAL9 MatD3D;// Offset=0x0 Size=0x44
    char * pTextureFilename;// Offset=0x44 Size=0x4
};

struct _D3DXEFFECTINSTANCE// Size=0xc (Id=486)
{
    char * pEffectFilename;// Offset=0x0 Size=0x4
    unsigned long NumDefaults;// Offset=0x4 Size=0x4
    struct _D3DXEFFECTDEFAULT * pDefaults;// Offset=0x8 Size=0x4
};

struct ID3DXAllocateHierarchy// Size=0x4 (Id=487)
{
    HRESULT CreateFrame(char * ,struct _D3DXFRAME ** );
    HRESULT CreateMeshContainer(char * ,struct _D3DXMESHDATA * ,struct _D3DXMATERIAL * ,struct _D3DXEFFECTINSTANCE * ,unsigned long ,unsigned long * ,struct ID3DXSkinInfo * ,struct _D3DXMESHCONTAINER ** );
    HRESULT DestroyFrame(struct _D3DXFRAME * );
    HRESULT DestroyMeshContainer(struct _D3DXMESHCONTAINER * );
    void ID3DXAllocateHierarchy(struct ID3DXAllocateHierarchy & );
    void ID3DXAllocateHierarchy();
    struct ID3DXAllocateHierarchy & operator=(struct ID3DXAllocateHierarchy & );
};

struct ID3DXAllocateHierarchy// Size=0x4 (Id=488)
{
    HRESULT CreateFrame(char * ,struct _D3DXFRAME ** );
    HRESULT CreateMeshContainer(char * ,struct _D3DXMESHDATA * ,struct _D3DXMATERIAL * ,struct _D3DXEFFECTINSTANCE * ,unsigned long ,unsigned long * ,struct ID3DXSkinInfo * ,struct _D3DXMESHCONTAINER ** );
    HRESULT DestroyFrame(struct _D3DXFRAME * );
    HRESULT DestroyMeshContainer(struct _D3DXMESHCONTAINER * );
    void ID3DXAllocateHierarchy(struct ID3DXAllocateHierarchy & );
    void ID3DXAllocateHierarchy();
    struct ID3DXAllocateHierarchy & operator=(struct ID3DXAllocateHierarchy & );
};

struct _LONGDOUBLE// Size=0x8 (Id=489)
{
    float x;// Offset=0x0 Size=0x8
};

struct _D3DPOINT// Size=0x8 (Id=490)
{
    long x;// Offset=0x0 Size=0x4
    long y;// Offset=0x4 Size=0x4
};

struct _XMHALF2// Size=0x4 (Id=491)
{
    unsigned short x;// Offset=0x0 Size=0x2
    unsigned short y;// Offset=0x2 Size=0x2
    void _XMHALF2(float * );
    void _XMHALF2(float ,float );
    void _XMHALF2(unsigned short * );
    void _XMHALF2(unsigned short ,unsigned short );
    void _XMHALF2();
    struct _XMHALF2 & operator=(struct _XMHALF2 & );
};

struct _XMHALF2// Size=0x4 (Id=492)
{
    unsigned short x;// Offset=0x0 Size=0x2
    unsigned short y;// Offset=0x2 Size=0x2
    void _XMHALF2(float * );
    void _XMHALF2(float ,float );
    void _XMHALF2(unsigned short * );
    void _XMHALF2(unsigned short ,unsigned short );
    void _XMHALF2();
    struct _XMHALF2 & operator=(struct _XMHALF2 & );
};

union _IMAGE_THUNK_DATA32::<unnamed-type-u1>// Size=0x4 (Id=493)
{
    unsigned long ForwarderString;// Offset=0x0 Size=0x4
    unsigned long Function;// Offset=0x0 Size=0x4
    unsigned long Ordinal;// Offset=0x0 Size=0x4
    unsigned long AddressOfData;// Offset=0x0 Size=0x4
};

struct _XVIDEO_MODE// Size=0x30 (Id=494)
{
    unsigned long dwDisplayWidth;// Offset=0x0 Size=0x4
    unsigned long dwDisplayHeight;// Offset=0x4 Size=0x4
    int fIsInterlaced;// Offset=0x8 Size=0x4
    int fIsWideScreen;// Offset=0xc Size=0x4
    int fIsHiDef;// Offset=0x10 Size=0x4
    float RefreshRate;// Offset=0x14 Size=0x4
    unsigned long VideoStandard;// Offset=0x18 Size=0x4
    unsigned long Reserved[5];// Offset=0x1c Size=0x14
};

struct GPUTEXTURESIZE_STACK// Size=0x4 (Id=495)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long Width:13;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xd
        unsigned long Height:13;// Offset=0x0 Size=0x4 BitOffset=0xd BitSize=0xd
        unsigned long Depth:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _XSTORAGE_DOWNLOAD_TO_MEMORY_RESULTS// Size=0x14 (Id=496)
{
    unsigned long dwBytesTotal;// Offset=0x0 Size=0x4
    unsigned long long xuidOwner;// Offset=0x4 Size=0x8
    struct _FILETIME ftCreated;// Offset=0xc Size=0x8
};

struct _XMFLOAT3// Size=0xc (Id=497)
{
    float x;// Offset=0x0 Size=0x4
    float y;// Offset=0x4 Size=0x4
    float z;// Offset=0x8 Size=0x4
    void _XMFLOAT3(float * );
    void _XMFLOAT3(float ,float ,float );
    void _XMFLOAT3();
    struct _XMFLOAT3 & operator=(struct _XMFLOAT3 & );
};

struct _XMFLOAT3// Size=0xc (Id=498)
{
    float x;// Offset=0x0 Size=0x4
    float y;// Offset=0x4 Size=0x4
    float z;// Offset=0x8 Size=0x4
    void _XMFLOAT3(float * );
    void _XMFLOAT3(float ,float ,float );
    void _XMFLOAT3();
    struct _XMFLOAT3 & operator=(struct _XMFLOAT3 & );
};

struct _D3DXSHADER_FILEINFO// Size=0x4 (Id=499)
{
    unsigned long Name;// Offset=0x0 Size=0x4
};

struct _ImageArchitectureEntry// Size=0x8 (Id=500)
{
    unsigned long FixupInstRVA;// Offset=0x0 Size=0x4
    unsigned long NewInst;// Offset=0x4 Size=0x4
};

struct IMPORT_OBJECT_HEADER// Size=0x14 (Id=501)
{
    unsigned short Sig1;// Offset=0x0 Size=0x2
    unsigned short Sig2;// Offset=0x2 Size=0x2
    unsigned short Version;// Offset=0x4 Size=0x2
    unsigned short Machine;// Offset=0x6 Size=0x2
    unsigned long TimeDateStamp;// Offset=0x8 Size=0x4
    unsigned long SizeOfData;// Offset=0xc Size=0x4
    union // Size=0x2 (Id=0)
    {
        unsigned short Ordinal;// Offset=0x10 Size=0x2
        unsigned short Hint;// Offset=0x10 Size=0x2
    };
    struct // Size=0x2 (Id=0)
    {
        unsigned short Type:2;// Offset=0x12 Size=0x2 BitOffset=0xe BitSize=0x2
        unsigned short NameType:3;// Offset=0x12 Size=0x2 BitOffset=0xb BitSize=0x3
        unsigned short Reserved:11;// Offset=0x12 Size=0x2 BitOffset=0x0 BitSize=0xb
    };
};

struct _XMUHEND3// Size=0x4 (Id=502)
{
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            unsigned int x:11;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xb
            unsigned int y:11;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0xb
            unsigned int z:10;// Offset=0x0 Size=0x4 BitOffset=0x16 BitSize=0xa
        };
        unsigned int v;// Offset=0x0 Size=0x4
    };
    void _XMUHEND3(float * );
    void _XMUHEND3(float ,float ,float );
    void _XMUHEND3(unsigned int );
    void _XMUHEND3();
    unsigned int operator unsigned int();
    struct _XMUHEND3 & operator=(const unsigned int );
    struct _XMUHEND3 & operator=(struct _XMUHEND3 & );
};

struct _XMUHEND3// Size=0x4 (Id=503)
{
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            unsigned int x:11;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xb
            unsigned int y:11;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0xb
            unsigned int z:10;// Offset=0x0 Size=0x4 BitOffset=0x16 BitSize=0xa
        };
        unsigned int v;// Offset=0x0 Size=0x4
    };
    void _XMUHEND3(float * );
    void _XMUHEND3(float ,float ,float );
    void _XMUHEND3(unsigned int );
    void _XMUHEND3();
    unsigned int operator unsigned int();
    struct _XMUHEND3 & operator=(const unsigned int );
    struct _XMUHEND3 & operator=(struct _XMUHEND3 & );
};

union GPU_COHERSTATUS// Size=0x4 (Id=504)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long MatchingContexts:8;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x8
        unsigned long CopyDestBaseEnable:1;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x1
        unsigned long DestBase0Enable:1;// Offset=0x0 Size=0x4 BitOffset=0x9 BitSize=0x1
        unsigned long DestBase1Enable:1;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0x1
        unsigned long DestBase2Enable:1;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x1
        unsigned long DestBase3Enable:1;// Offset=0x0 Size=0x4 BitOffset=0xc BitSize=0x1
        unsigned long DestBase4Enable:1;// Offset=0x0 Size=0x4 BitOffset=0xd BitSize=0x1
        unsigned long DestBase5Enable:1;// Offset=0x0 Size=0x4 BitOffset=0xe BitSize=0x1
        unsigned long DestBase6Enable:1;// Offset=0x0 Size=0x4 BitOffset=0xf BitSize=0x1
        unsigned long DestBase7Enable:1;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x1
        unsigned long VcActionEnable:1;// Offset=0x0 Size=0x4 BitOffset=0x18 BitSize=0x1
        unsigned long TcActionEnable:1;// Offset=0x0 Size=0x4 BitOffset=0x19 BitSize=0x1
        unsigned long PglbActionEnable:1;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x1
        unsigned long Status:1;// Offset=0x0 Size=0x4 BitOffset=0x1f BitSize=0x1
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

struct _D3DXSHPRTCOMPBUFFER_DESC// Size=0x18 (Id=505)
{
    unsigned int SampleSize;// Offset=0x0 Size=0x4
    unsigned int NumSamples;// Offset=0x4 Size=0x4
    unsigned int NumClusters;// Offset=0x8 Size=0x4
    unsigned int NumPCA;// Offset=0xc Size=0x4
    unsigned int Order;// Offset=0x10 Size=0x4
    unsigned int NumChannels;// Offset=0x14 Size=0x4
};

struct _D3DDISPLAYMODE// Size=0x10 (Id=506)
{
    unsigned int Width;// Offset=0x0 Size=0x4
    unsigned int Height;// Offset=0x4 Size=0x4
    unsigned int RefreshRate;// Offset=0x8 Size=0x4
    enum _D3DFORMAT Format;// Offset=0xc Size=0x4
};

union GPUFLOW_COND_JUMP// Size=0x8 (Id=507)
{
    struct // Size=0x8 (Id=0)
    {
        unsigned long JumpAddress:13;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xd
        unsigned long Force:1;// Offset=0x0 Size=0x4 BitOffset=0xd BitSize=0x1
        unsigned long Predicated:1;// Offset=0x0 Size=0x4 BitOffset=0xe BitSize=0x1
        unsigned long ForwardOnly:1;// Offset=0x4 Size=0x4 BitOffset=0x1 BitSize=0x1
        unsigned long BooleanAddress:8;// Offset=0x4 Size=0x4 BitOffset=0x2 BitSize=0x8
        unsigned long Condition:1;// Offset=0x4 Size=0x4 BitOffset=0xa BitSize=0x1
        unsigned long AbsoluteAddressing:1;// Offset=0x4 Size=0x4 BitOffset=0xb BitSize=0x1
        unsigned long Op:4;// Offset=0x4 Size=0x4 BitOffset=0xc BitSize=0x4
    };
};

struct D3DXVECTOR4_16F// Size=0x8 (Id=508)
{
    void D3DXVECTOR4_16F(struct D3DXVECTOR4_16F & );
    void D3DXVECTOR4_16F(struct D3DXFLOAT16 & ,struct D3DXFLOAT16 & ,struct D3DXFLOAT16 & ,struct D3DXFLOAT16 & );
    void D3DXVECTOR4_16F(struct D3DXFLOAT16 * );
    void D3DXVECTOR4_16F(float * );
    void D3DXVECTOR4_16F();
    struct D3DXFLOAT16 * operator struct D3DXFLOAT16 *();
    struct D3DXFLOAT16 * operator const struct D3DXFLOAT16 *();
    struct D3DXVECTOR4_16F & operator=(struct D3DXVECTOR4_16F & );
    int operator==(struct D3DXVECTOR4_16F & );
    int operator!=(struct D3DXVECTOR4_16F & );
    struct D3DXFLOAT16 x;// Offset=0x0 Size=0x2
    struct D3DXFLOAT16 y;// Offset=0x2 Size=0x2
    struct D3DXFLOAT16 z;// Offset=0x4 Size=0x2
    struct D3DXFLOAT16 w;// Offset=0x6 Size=0x2
};

struct D3DXVECTOR4_16F// Size=0x8 (Id=509)
{
    void D3DXVECTOR4_16F(struct D3DXVECTOR4_16F & );
    void D3DXVECTOR4_16F(struct D3DXFLOAT16 & ,struct D3DXFLOAT16 & ,struct D3DXFLOAT16 & ,struct D3DXFLOAT16 & );
    void D3DXVECTOR4_16F(struct D3DXFLOAT16 * );
    void D3DXVECTOR4_16F(float * );
    void D3DXVECTOR4_16F();
    struct D3DXFLOAT16 * operator struct D3DXFLOAT16 *();
    struct D3DXFLOAT16 * operator const struct D3DXFLOAT16 *();
    struct D3DXVECTOR4_16F & operator=(struct D3DXVECTOR4_16F & );
    int operator==(struct D3DXVECTOR4_16F & );
    int operator!=(struct D3DXVECTOR4_16F & );
    struct D3DXFLOAT16 x;// Offset=0x0 Size=0x2
    struct D3DXFLOAT16 y;// Offset=0x2 Size=0x2
    struct D3DXFLOAT16 z;// Offset=0x4 Size=0x2
    struct D3DXFLOAT16 w;// Offset=0x6 Size=0x2
};

struct _IMAGE_FILE_HEADER// Size=0x14 (Id=510)
{
    unsigned short Machine;// Offset=0x0 Size=0x2
    unsigned short NumberOfSections;// Offset=0x2 Size=0x2
    unsigned long TimeDateStamp;// Offset=0x4 Size=0x4
    unsigned long PointerToSymbolTable;// Offset=0x8 Size=0x4
    unsigned long NumberOfSymbols;// Offset=0xc Size=0x4
    unsigned short SizeOfOptionalHeader;// Offset=0x10 Size=0x2
    unsigned short Characteristics;// Offset=0x12 Size=0x2
};

struct _s__RTTIBaseClassArray// Size=0x4 (Id=511)
{
    struct _s__RTTIBaseClassDescriptor2 * arrayOfBaseClassDescriptors[0];
};

struct _s__RTTIClassHierarchyDescriptor// Size=0x10 (Id=512)
{
    unsigned long signature;// Offset=0x0 Size=0x4
    unsigned long attributes;// Offset=0x4 Size=0x4
    unsigned long numBaseClasses;// Offset=0x8 Size=0x4
    struct _s__RTTIBaseClassArray * pBaseClassArray;// Offset=0xc Size=0x4
};

struct HTASK__// Size=0x4 (Id=513)
{
    int unused;// Offset=0x0 Size=0x4
};

struct _XONLINE_FRIEND// Size=0xc4 (Id=514)
{
    unsigned long long xuid;// Offset=0x0 Size=0x8
    char szGamertag[16];// Offset=0x8 Size=0x10
    unsigned long dwFriendState;// Offset=0x18 Size=0x4
    struct XNKID sessionID;// Offset=0x1c Size=0x8
    unsigned long dwTitleID;// Offset=0x24 Size=0x4
    struct _FILETIME ftUserTime;// Offset=0x28 Size=0x8
    struct XNKID xnkidInvite;// Offset=0x30 Size=0x8
    struct _FILETIME gameinviteTime;// Offset=0x38 Size=0x8
    unsigned long cchRichPresence;// Offset=0x40 Size=0x4
    wchar_t wszRichPresence[64];// Offset=0x44 Size=0x80
};

union GPUCOMMAND_REG_RMW// Size=0xc (Id=515)
{
    struct // Size=0xc (Id=0)
    {
        unsigned long Register:13;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xd
        unsigned long OrImmediate:1;// Offset=0x0 Size=0x4 BitOffset=0x1e BitSize=0x1
        unsigned long AndImmediate:1;// Offset=0x0 Size=0x4 BitOffset=0x1f BitSize=0x1
        union // Size=0x4 (Id=0)
        {
            unsigned long AndMask:32;// Offset=0x4 Size=0x4 BitOffset=0x0 BitSize=0x20
            unsigned long AndRegister:13;// Offset=0x4 Size=0x4 BitOffset=0x0 BitSize=0xd
        };
        union // Size=0x4 (Id=0)
        {
            unsigned long OrMask:32;// Offset=0x8 Size=0x4 BitOffset=0x0 BitSize=0x20
            unsigned long OrRegister:13;// Offset=0x8 Size=0x4 BitOffset=0x0 BitSize=0xd
        };
    };
    unsigned long dword[3];// Offset=0x0 Size=0xc
};

struct _XGSHADER_FETCHCONSTANT_MASKS// Size=0x10 (Id=516)
{
    unsigned int u32TextureFetchConstants;// Offset=0x0 Size=0x4
    unsigned int u32VertexFetchConstants[3];// Offset=0x4 Size=0xc
};

struct HWINSTA__// Size=0x4 (Id=517)
{
    int unused;// Offset=0x0 Size=0x4
};

struct _XINPUT_CAPABILITIES// Size=0x14 (Id=518)
{
    unsigned char Type;// Offset=0x0 Size=0x1
    unsigned char SubType;// Offset=0x1 Size=0x1
    unsigned short Flags;// Offset=0x2 Size=0x2
    struct _XINPUT_GAMEPAD Gamepad;// Offset=0x4 Size=0xc
    struct _XINPUT_VIBRATION Vibration;// Offset=0x10 Size=0x4
};

struct D3DResource// Size=0x18 (Id=519)
{
    unsigned long AddRef();
    unsigned long Release();
    HRESULT GetDevice(struct D3DDevice ** );
    enum _D3DRESOURCETYPE GetType();
    int IsBusy();
    int IsSet(struct D3DDevice * );
    void BlockUntilNotBusy();
    void SetIdentifier(unsigned long );
    unsigned long GetIdentifier();
    unsigned long Common;// Offset=0x0 Size=0x4
    unsigned long ReferenceCount;// Offset=0x4 Size=0x4
    unsigned long Fence;// Offset=0x8 Size=0x4
    unsigned long ReadFence;// Offset=0xc Size=0x4
    unsigned long Identifier;// Offset=0x10 Size=0x4
    unsigned long BaseFlush;// Offset=0x14 Size=0x4
};

struct HMENU__// Size=0x4 (Id=520)
{
    int unused;// Offset=0x0 Size=0x4
};

struct _D3DXSHADER_COMPILE_PARAMETERSW// Size=0x44 (Id=521)
{
    unsigned long Flags;// Offset=0x0 Size=0x4
    unsigned long UPDBTimestamp;// Offset=0x4 Size=0x4
    wchar_t * UPDBPath;// Offset=0x8 Size=0x4
    struct ID3DXBuffer * pUPDBBuffer;// Offset=0xc Size=0x4
    unsigned long TempRegisterLimit;// Offset=0x10 Size=0x4
    void * pUPDBB;// Offset=0x14 Size=0x4
    char * CpuFunctionName;// Offset=0x18 Size=0x4
    int bXbox360ExtensionUsed;// Offset=0x1c Size=0x4
    unsigned long PixelShaderSamplerRegisterBase;// Offset=0x20 Size=0x4
    unsigned long PixelShaderSamplerRegisterCount;// Offset=0x24 Size=0x4
    unsigned long VertexShaderSamplerRegisterBase;// Offset=0x28 Size=0x4
    unsigned long VertexShaderSamplerRegisterCount;// Offset=0x2c Size=0x4
    unsigned long PixelShaderInstructionCount;// Offset=0x30 Size=0x4
    unsigned long VertexShaderInstructionCount;// Offset=0x34 Size=0x4
    unsigned short PixAssertAddressReg;// Offset=0x38 Size=0x2
    unsigned short PixDebugPrintAddressReg;// Offset=0x3a Size=0x2
    unsigned short PixDebugPrintSamplerReg;// Offset=0x3c Size=0x2
    unsigned short PixDebugPrintEnableReg;// Offset=0x3e Size=0x2
    unsigned short PixDiagnosticIndexReg;// Offset=0x40 Size=0x2
};

union DCPERFCOUNTER_CNTL// Size=0x4 (Id=522)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long State:4;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x4
        unsigned long EnableMode:2;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x2
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

struct _EXCEPTION_RECORD32// Size=0x50 (Id=523)
{
    unsigned long ExceptionCode;// Offset=0x0 Size=0x4
    unsigned long ExceptionFlags;// Offset=0x4 Size=0x4
    unsigned long ExceptionRecord;// Offset=0x8 Size=0x4
    unsigned long ExceptionAddress;// Offset=0xc Size=0x4
    unsigned long NumberParameters;// Offset=0x10 Size=0x4
    unsigned long ExceptionInformation[15];// Offset=0x14 Size=0x3c
};

struct _IMAGE_RELOCATION// Size=0xa (Id=524)
{
    union // Size=0x4 (Id=0)
    {
        unsigned long VirtualAddress;// Offset=0x0 Size=0x4
        unsigned long RelocCount;// Offset=0x0 Size=0x4
    };
    unsigned long SymbolTableIndex;// Offset=0x4 Size=0x4
    unsigned short Type;// Offset=0x8 Size=0x2
};

struct D3DXQUATERNION// Size=0x10 (Id=525)
{
    void D3DXQUATERNION(float ,float ,float ,float );
    void D3DXQUATERNION(struct D3DXFLOAT16 * );
    void D3DXQUATERNION(float * );
    void D3DXQUATERNION();
    float * operator float *();
    float * operator const float *();
    struct D3DXQUATERNION & operator=(struct D3DXQUATERNION & );
    struct D3DXQUATERNION & operator+=(struct D3DXQUATERNION & );
    struct D3DXQUATERNION & operator-=(struct D3DXQUATERNION & );
    struct D3DXQUATERNION & operator*=(float );
    struct D3DXQUATERNION & operator*=(struct D3DXQUATERNION & );
    struct D3DXQUATERNION & operator/=(float );
    struct D3DXQUATERNION operator+(struct D3DXQUATERNION & );
    struct D3DXQUATERNION operator+();
    struct D3DXQUATERNION operator-(struct D3DXQUATERNION & );
    struct D3DXQUATERNION operator-();
    struct D3DXQUATERNION operator*(float );
    struct D3DXQUATERNION operator*(struct D3DXQUATERNION & );
    struct D3DXQUATERNION operator/(float );
    int operator==(struct D3DXQUATERNION & );
    int operator!=(struct D3DXQUATERNION & );
    float x;// Offset=0x0 Size=0x4
    float y;// Offset=0x4 Size=0x4
    float z;// Offset=0x8 Size=0x4
    float w;// Offset=0xc Size=0x4
};

struct D3DXQUATERNION// Size=0x10 (Id=526)
{
    void D3DXQUATERNION(float ,float ,float ,float );
    void D3DXQUATERNION(struct D3DXFLOAT16 * );
    void D3DXQUATERNION(float * );
    void D3DXQUATERNION();
    float * operator float *();
    float * operator const float *();
    struct D3DXQUATERNION & operator=(struct D3DXQUATERNION & );
    struct D3DXQUATERNION & operator+=(struct D3DXQUATERNION & );
    struct D3DXQUATERNION & operator-=(struct D3DXQUATERNION & );
    struct D3DXQUATERNION & operator*=(float );
    struct D3DXQUATERNION & operator*=(struct D3DXQUATERNION & );
    struct D3DXQUATERNION & operator/=(float );
    struct D3DXQUATERNION operator+(struct D3DXQUATERNION & );
    struct D3DXQUATERNION operator+();
    struct D3DXQUATERNION operator-(struct D3DXQUATERNION & );
    struct D3DXQUATERNION operator-();
    struct D3DXQUATERNION operator*(float );
    struct D3DXQUATERNION operator*(struct D3DXQUATERNION & );
    struct D3DXQUATERNION operator/(float );
    int operator==(struct D3DXQUATERNION & );
    int operator!=(struct D3DXQUATERNION & );
    float x;// Offset=0x0 Size=0x4
    float y;// Offset=0x4 Size=0x4
    float z;// Offset=0x8 Size=0x4
    float w;// Offset=0xc Size=0x4
};

struct _s__RTTIBaseClassDescriptor2// Size=0x1c (Id=527)
{
    struct _TypeDescriptor * pTypeDescriptor;// Offset=0x0 Size=0x4
    unsigned long numContainedBases;// Offset=0x4 Size=0x4
    struct _PMD where;// Offset=0x8 Size=0xc
    unsigned long attributes;// Offset=0x14 Size=0x4
    struct _s__RTTIClassHierarchyDescriptor * pClassDescriptor;// Offset=0x18 Size=0x4
};

struct ID3DXSPMesh : public IUnknown// Size=0x4 (Id=528)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    unsigned long GetNumFaces();
    unsigned long GetNumVertices();
    unsigned long GetFVF();
    HRESULT GetDeclaration(struct _D3DVERTEXELEMENT9 * );
    unsigned long GetOptions();
    HRESULT GetDevice(struct D3DDevice ** );
    HRESULT CloneMeshFVF(unsigned long ,unsigned long ,struct D3DDevice * ,unsigned long * ,unsigned long * ,struct ID3DXMesh ** );
    HRESULT CloneMesh(unsigned long ,struct _D3DVERTEXELEMENT9 * ,struct D3DDevice * ,unsigned long * ,unsigned long * ,struct ID3DXMesh ** );
    HRESULT ClonePMeshFVF(unsigned long ,unsigned long ,struct D3DDevice * ,unsigned long * ,float * ,struct ID3DXPMesh ** );
    HRESULT ClonePMesh(unsigned long ,struct _D3DVERTEXELEMENT9 * ,struct D3DDevice * ,unsigned long * ,float * ,struct ID3DXPMesh ** );
    HRESULT ReduceFaces(unsigned long );
    HRESULT ReduceVertices(unsigned long );
    unsigned long GetMaxFaces();
    unsigned long GetMaxVertices();
    HRESULT GetVertexAttributeWeights(struct _D3DXATTRIBUTEWEIGHTS * );
    HRESULT GetVertexWeights(float * );
    void ID3DXSPMesh(struct ID3DXSPMesh & );
    void ID3DXSPMesh();
    struct ID3DXSPMesh & operator=(struct ID3DXSPMesh & );
};

struct ID3DXSPMesh : public IUnknown// Size=0x4 (Id=529)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    unsigned long GetNumFaces();
    unsigned long GetNumVertices();
    unsigned long GetFVF();
    HRESULT GetDeclaration(struct _D3DVERTEXELEMENT9 * );
    unsigned long GetOptions();
    HRESULT GetDevice(struct D3DDevice ** );
    HRESULT CloneMeshFVF(unsigned long ,unsigned long ,struct D3DDevice * ,unsigned long * ,unsigned long * ,struct ID3DXMesh ** );
    HRESULT CloneMesh(unsigned long ,struct _D3DVERTEXELEMENT9 * ,struct D3DDevice * ,unsigned long * ,unsigned long * ,struct ID3DXMesh ** );
    HRESULT ClonePMeshFVF(unsigned long ,unsigned long ,struct D3DDevice * ,unsigned long * ,float * ,struct ID3DXPMesh ** );
    HRESULT ClonePMesh(unsigned long ,struct _D3DVERTEXELEMENT9 * ,struct D3DDevice * ,unsigned long * ,float * ,struct ID3DXPMesh ** );
    HRESULT ReduceFaces(unsigned long );
    HRESULT ReduceVertices(unsigned long );
    unsigned long GetMaxFaces();
    unsigned long GetMaxVertices();
    HRESULT GetVertexAttributeWeights(struct _D3DXATTRIBUTEWEIGHTS * );
    HRESULT GetVertexWeights(float * );
    void ID3DXSPMesh(struct ID3DXSPMesh & );
    void ID3DXSPMesh();
    struct ID3DXSPMesh & operator=(struct ID3DXSPMesh & );
};

struct _D3DXSHPRTSPLITMESHVERTDATA// Size=0xc (Id=530)
{
    unsigned int uVertRemap;// Offset=0x0 Size=0x4
    unsigned int uSubCluster;// Offset=0x4 Size=0x4
    unsigned char ucVertStatus;// Offset=0x8 Size=0x1
};

union IOCPERFCOUNTER_CNTL// Size=0x4 (Id=531)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long State:4;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x4
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

struct XNKID// Size=0x8 (Id=532)
{
    unsigned char ab[8];// Offset=0x0 Size=0x8
};

struct _LIST_ENTRY// Size=0x8 (Id=533)
{
    struct _LIST_ENTRY * Flink;// Offset=0x0 Size=0x4
    struct _LIST_ENTRY * Blink;// Offset=0x4 Size=0x4
};

struct ID3DXFile : public IUnknown// Size=0x4 (Id=534)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    HRESULT CreateEnumObject(void * ,unsigned long ,struct ID3DXFileEnumObject ** );
    HRESULT CreateSaveObject(void * ,unsigned long ,unsigned long ,struct ID3DXFileSaveObject ** );
    HRESULT RegisterTemplates(void * ,unsigned long );
    HRESULT RegisterEnumTemplates(struct ID3DXFileEnumObject * );
    void ID3DXFile(struct ID3DXFile & );
    void ID3DXFile();
    struct ID3DXFile & operator=(struct ID3DXFile & );
};

struct ID3DXFile : public IUnknown// Size=0x4 (Id=535)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    HRESULT CreateEnumObject(void * ,unsigned long ,struct ID3DXFileEnumObject ** );
    HRESULT CreateSaveObject(void * ,unsigned long ,unsigned long ,struct ID3DXFileSaveObject ** );
    HRESULT RegisterTemplates(void * ,unsigned long );
    HRESULT RegisterEnumTemplates(struct ID3DXFileEnumObject * );
    void ID3DXFile(struct ID3DXFile & );
    void ID3DXFile();
    struct ID3DXFile & operator=(struct ID3DXFile & );
};

union GPU_MEMEXPORT_STREAM_CONSTANT// Size=0x10 (Id=536)
{
    struct // Size=0x10 (Id=0)
    {
        unsigned long BaseAddress:30;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1e
        unsigned long _01:2;// Offset=0x0 Size=0x4 BitOffset=0x1e BitSize=0x2
        unsigned long _4B000000:32;// Offset=0x4 Size=0x4 BitOffset=0x0 BitSize=0x20
        unsigned long EndianSwap:3;// Offset=0x8 Size=0x4 BitOffset=0x0 BitSize=0x3
        unsigned long Format:6;// Offset=0x8 Size=0x4 BitOffset=0x8 BitSize=0x6
        unsigned long NumericType:3;// Offset=0x8 Size=0x4 BitOffset=0x10 BitSize=0x3
        unsigned long ComponentSwap:1;// Offset=0x8 Size=0x4 BitOffset=0x13 BitSize=0x1
        unsigned long _4B0:12;// Offset=0x8 Size=0x4 BitOffset=0x14 BitSize=0xc
        unsigned long StreamMaxIndex:23;// Offset=0xc Size=0x4 BitOffset=0x0 BitSize=0x17
        unsigned long _96:9;// Offset=0xc Size=0x4 BitOffset=0x17 BitSize=0x9
    };
    unsigned long dword[4];// Offset=0x0 Size=0x10
    float c[4];// Offset=0x0 Size=0x10
};

union GPUCOMMAND_EVENT_WRITE_CACHE_FLUSH// Size=0xc (Id=537)
{
    struct // Size=0xc (Id=0)
    {
        unsigned long Initiator:6;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x6
        unsigned long UseCounter:1;// Offset=0x0 Size=0x4 BitOffset=0x1f BitSize=0x1
        unsigned long Endian:2;// Offset=0x4 Size=0x4 BitOffset=0x0 BitSize=0x2
        unsigned long Address:30;// Offset=0x4 Size=0x4 BitOffset=0x2 BitSize=0x1e
        unsigned long Data:32;// Offset=0x8 Size=0x4 BitOffset=0x0 BitSize=0x20
    };
    unsigned long dword[3];// Offset=0x0 Size=0xc
};

struct _IMAGE_SEPARATE_DEBUG_HEADER// Size=0x30 (Id=538)
{
    unsigned short Signature;// Offset=0x0 Size=0x2
    unsigned short Flags;// Offset=0x2 Size=0x2
    unsigned short Machine;// Offset=0x4 Size=0x2
    unsigned short Characteristics;// Offset=0x6 Size=0x2
    unsigned long TimeDateStamp;// Offset=0x8 Size=0x4
    unsigned long CheckSum;// Offset=0xc Size=0x4
    unsigned long ImageBase;// Offset=0x10 Size=0x4
    unsigned long SizeOfImage;// Offset=0x14 Size=0x4
    unsigned long NumberOfSections;// Offset=0x18 Size=0x4
    unsigned long ExportedNamesSize;// Offset=0x1c Size=0x4
    unsigned long DebugDirectorySize;// Offset=0x20 Size=0x4
    unsigned long SectionAlignment;// Offset=0x24 Size=0x4
    unsigned long Reserved[2];// Offset=0x28 Size=0x8
};

struct _SYSTEMTIME// Size=0x10 (Id=539)
{
    unsigned short wYear;// Offset=0x0 Size=0x2
    unsigned short wMonth;// Offset=0x2 Size=0x2
    unsigned short wDayOfWeek;// Offset=0x4 Size=0x2
    unsigned short wDay;// Offset=0x6 Size=0x2
    unsigned short wHour;// Offset=0x8 Size=0x2
    unsigned short wMinute;// Offset=0xa Size=0x2
    unsigned short wSecond;// Offset=0xc Size=0x2
    unsigned short wMilliseconds;// Offset=0xe Size=0x2
};

struct _D3DSURFACE_PARAMETERS// Size=0x10 (Id=540)
{
    unsigned long Base;// Offset=0x0 Size=0x4
    unsigned long HierarchicalZBase;// Offset=0x4 Size=0x4
    int ColorExpBias;// Offset=0x8 Size=0x4
    enum _D3DHIZFUNC HiZFunc;// Offset=0xc Size=0x4
};

struct _XMXDECN4// Size=0x4 (Id=541)
{
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            int x:10;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xa
            int y:10;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0xa
            int z:10;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0xa
            unsigned int w:2;// Offset=0x0 Size=0x4 BitOffset=0x1e BitSize=0x2
        };
        unsigned int v;// Offset=0x0 Size=0x4
    };
    void _XMXDECN4(float * );
    void _XMXDECN4(float ,float ,float ,float );
    void _XMXDECN4(unsigned int );
    void _XMXDECN4();
    unsigned int operator unsigned int();
    struct _XMXDECN4 & operator=(const unsigned int );
    struct _XMXDECN4 & operator=(struct _XMXDECN4 & );
};

struct _XMXDECN4// Size=0x4 (Id=542)
{
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            int x:10;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xa
            int y:10;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0xa
            int z:10;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0xa
            unsigned int w:2;// Offset=0x0 Size=0x4 BitOffset=0x1e BitSize=0x2
        };
        unsigned int v;// Offset=0x0 Size=0x4
    };
    void _XMXDECN4(float * );
    void _XMXDECN4(float ,float ,float ,float );
    void _XMXDECN4(unsigned int );
    void _XMXDECN4();
    unsigned int operator unsigned int();
    struct _XMXDECN4 & operator=(const unsigned int );
    struct _XMXDECN4 & operator=(struct _XMXDECN4 & );
};

struct _EXCEPTION_POINTERS// Size=0x8 (Id=543)
{
    struct _EXCEPTION_RECORD * ExceptionRecord;// Offset=0x0 Size=0x4
    struct _CONTEXT * ContextRecord;// Offset=0x4 Size=0x4
};

struct _D3DVECTOR// Size=0xc (Id=544)
{
    float x;// Offset=0x0 Size=0x4
    float y;// Offset=0x4 Size=0x4
    float z;// Offset=0x8 Size=0x4
};

struct HMONITOR__// Size=0x4 (Id=545)
{
    int unused;// Offset=0x0 Size=0x4
};

struct _XMUDECN4// Size=0x4 (Id=546)
{
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            unsigned int x:10;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xa
            unsigned int y:10;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0xa
            unsigned int z:10;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0xa
            unsigned int w:2;// Offset=0x0 Size=0x4 BitOffset=0x1e BitSize=0x2
        };
        unsigned int v;// Offset=0x0 Size=0x4
    };
    void _XMUDECN4(float * );
    void _XMUDECN4(float ,float ,float ,float );
    void _XMUDECN4(unsigned int );
    void _XMUDECN4();
    unsigned int operator unsigned int();
    struct _XMUDECN4 & operator=(const unsigned int );
    struct _XMUDECN4 & operator=(struct _XMUDECN4 & );
};

struct _XMUDECN4// Size=0x4 (Id=547)
{
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            unsigned int x:10;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xa
            unsigned int y:10;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0xa
            unsigned int z:10;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0xa
            unsigned int w:2;// Offset=0x0 Size=0x4 BitOffset=0x1e BitSize=0x2
        };
        unsigned int v;// Offset=0x0 Size=0x4
    };
    void _XMUDECN4(float * );
    void _XMUDECN4(float ,float ,float ,float );
    void _XMUDECN4(unsigned int );
    void _XMUDECN4();
    unsigned int operator unsigned int();
    struct _XMUDECN4 & operator=(const unsigned int );
    struct _XMUDECN4 & operator=(struct _XMUDECN4 & );
};

struct _XUSER_RANK_REQUEST// Size=0xc (Id=548)
{
    unsigned long dwViewId;// Offset=0x0 Size=0x4
    long long i64Rating;// Offset=0x4 Size=0x8
};

struct _XUSER_STATS_COLUMN// Size=0x18 (Id=549)
{
    unsigned short wColumnId;// Offset=0x0 Size=0x2
    unsigned char __align0[6];// Offset=0x2 Size=0x6
    struct _XUSER_DATA Value;// Offset=0x8 Size=0x10
};

struct tagRECT// Size=0x10 (Id=550)
{
    long left;// Offset=0x0 Size=0x4
    long top;// Offset=0x4 Size=0x4
    long right;// Offset=0x8 Size=0x4
    long bottom;// Offset=0xc Size=0x4
};

struct D3DSurface : public D3DResource// Size=0x30 (Id=551)
{
    HRESULT GetContainer(struct _GUID & ,void ** );
    HRESULT GetDesc(struct _D3DSURFACE_DESC * );
    HRESULT LockRect(struct _D3DLOCKED_RECT * ,struct tagRECT * ,unsigned long );
    HRESULT AsyncLockRect(unsigned long long ,struct _D3DLOCKED_RECT * ,struct tagRECT * ,unsigned long );
    HRESULT UnlockRect();
    unsigned char __align0[24];// Offset=0x0 Size=0x18
    union // Size=0x30 (Id=0)
    {
        union GPU_SURFACEINFO SurfaceInfo;// Offset=0x18 Size=0x4
        union // Size=0x4 (Id=0)
        {
            union GPU_DEPTHINFO DepthInfo;// Offset=0x1c Size=0x4
            union GPU_COLORINFO ColorInfo;// Offset=0x1c Size=0x4
        };
        union GPU_HICONTROL HiControl;// Offset=0x20 Size=0x4
        struct // Size=0x4 (Id=0)
        {
            unsigned long Width:14;// Offset=0x24 Size=0x4 BitOffset=0x12 BitSize=0xe
            unsigned long Height:15;// Offset=0x24 Size=0x4 BitOffset=0x3 BitSize=0xf
        };
        enum _D3DFORMAT Format;// Offset=0x28 Size=0x4
        unsigned long Size;// Offset=0x2c Size=0x4
        struct D3DBaseTexture * Parent;// Offset=0x18 Size=0x4
        struct // Size=0x4 (Id=0)
        {
            unsigned long MipLevel:4;// Offset=0x1c Size=0x4 BitOffset=0x1c BitSize=0x4
            unsigned long ArrayIndex:6;// Offset=0x1c Size=0x4 BitOffset=0x16 BitSize=0x6
        };
    };
};

struct _MEMORYSTATUS// Size=0x20 (Id=552)
{
    unsigned long dwLength;// Offset=0x0 Size=0x4
    unsigned long dwMemoryLoad;// Offset=0x4 Size=0x4
    unsigned long dwTotalPhys;// Offset=0x8 Size=0x4
    unsigned long dwAvailPhys;// Offset=0xc Size=0x4
    unsigned long dwTotalPageFile;// Offset=0x10 Size=0x4
    unsigned long dwAvailPageFile;// Offset=0x14 Size=0x4
    unsigned long dwTotalVirtual;// Offset=0x18 Size=0x4
    unsigned long dwAvailVirtual;// Offset=0x1c Size=0x4
};

struct IDirectXFileSaveObject : public IUnknown// Size=0x4 (Id=553)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    HRESULT SaveTemplates(unsigned long ,struct _GUID ** );
    HRESULT CreateDataObject(struct _GUID & ,char * ,struct _GUID * ,unsigned long ,void * ,struct IDirectXFileData ** );
    HRESULT SaveData(struct IDirectXFileData * );
    void IDirectXFileSaveObject(struct IDirectXFileSaveObject & );
    void IDirectXFileSaveObject();
    struct IDirectXFileSaveObject & operator=(struct IDirectXFileSaveObject & );
};

struct IDirectXFileSaveObject : public IUnknown// Size=0x4 (Id=554)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    HRESULT SaveTemplates(unsigned long ,struct _GUID ** );
    HRESULT CreateDataObject(struct _GUID & ,char * ,struct _GUID * ,unsigned long ,void * ,struct IDirectXFileData ** );
    HRESULT SaveData(struct IDirectXFileData * );
    void IDirectXFileSaveObject(struct IDirectXFileSaveObject & );
    void IDirectXFileSaveObject();
    struct IDirectXFileSaveObject & operator=(struct IDirectXFileSaveObject & );
};

struct XNQOSINFO// Size=0x18 (Id=555)
{
    unsigned char bFlags;// Offset=0x0 Size=0x1
    unsigned char bReserved;// Offset=0x1 Size=0x1
    unsigned short cProbesXmit;// Offset=0x2 Size=0x2
    unsigned short cProbesRecv;// Offset=0x4 Size=0x2
    unsigned short cbData;// Offset=0x6 Size=0x2
    unsigned char * pbData;// Offset=0x8 Size=0x4
    unsigned short wRttMinInMsecs;// Offset=0xc Size=0x2
    unsigned short wRttMedInMsecs;// Offset=0xe Size=0x2
    unsigned long dwUpBitsPerSec;// Offset=0x10 Size=0x4
    unsigned long dwDnBitsPerSec;// Offset=0x14 Size=0x4
};

struct _XCONTENT_DATA// Size=0x134 (Id=556)
{
    unsigned long DeviceID;// Offset=0x0 Size=0x4
    unsigned long dwContentType;// Offset=0x4 Size=0x4
    wchar_t szDisplayName[128];// Offset=0x8 Size=0x100
    char szFileName[42];// Offset=0x108 Size=0x2a
};

struct _IMAGE_ARCHIVE_MEMBER_HEADER// Size=0x3c (Id=557)
{
    unsigned char Name[16];// Offset=0x0 Size=0x10
    unsigned char Date[12];// Offset=0x10 Size=0xc
    unsigned char UserID[6];// Offset=0x1c Size=0x6
    unsigned char GroupID[6];// Offset=0x22 Size=0x6
    unsigned char Mode[8];// Offset=0x28 Size=0x8
    unsigned char Size[10];// Offset=0x30 Size=0xa
    unsigned char EndHeader[2];// Offset=0x3a Size=0x2
};

struct _XTHREAD_NOTIFICATION// Size=0xc (Id=558)
{
    struct _LIST_ENTRY ListEntry;// Offset=0x0 Size=0x8
    void  ( * pfnNotifyRoutine)(int );// Offset=0x8 Size=0x4
};

union GPU_SAMPLECOUNTCONTROL// Size=0x4 (Id=559)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long ResetSampleCount:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long CopySampleCount:1;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x1
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

struct _XMSHORTN2// Size=0x4 (Id=560)
{
    short x;// Offset=0x0 Size=0x2
    short y;// Offset=0x2 Size=0x2
    void _XMSHORTN2(float * );
    void _XMSHORTN2(float ,float );
    void _XMSHORTN2(short * );
    void _XMSHORTN2(short ,short );
    void _XMSHORTN2();
    struct _XMSHORTN2 & operator=(struct _XMSHORTN2 & );
};

struct _XMSHORTN2// Size=0x4 (Id=561)
{
    short x;// Offset=0x0 Size=0x2
    short y;// Offset=0x2 Size=0x2
    void _XMSHORTN2(float * );
    void _XMSHORTN2(float ,float );
    void _XMSHORTN2(short * );
    void _XMSHORTN2(short ,short );
    void _XMSHORTN2();
    struct _XMSHORTN2 & operator=(struct _XMSHORTN2 & );
};

struct _LD_DEMO// Size=0x10c (Id=562)
{
    unsigned long dwID;// Offset=0x0 Size=0x4
    unsigned long dwRunmode;// Offset=0x4 Size=0x4
    unsigned long dwTimeout;// Offset=0x8 Size=0x4
    char szLauncherXEX[128];// Offset=0xc Size=0x80
    char szLaunchedXEX[128];// Offset=0x8c Size=0x80
};

struct _IMAGE_EXPORT_DIRECTORY// Size=0x28 (Id=563)
{
    unsigned long Characteristics;// Offset=0x0 Size=0x4
    unsigned long TimeDateStamp;// Offset=0x4 Size=0x4
    unsigned short MajorVersion;// Offset=0x8 Size=0x2
    unsigned short MinorVersion;// Offset=0xa Size=0x2
    unsigned long Name;// Offset=0xc Size=0x4
    unsigned long Base;// Offset=0x10 Size=0x4
    unsigned long NumberOfFunctions;// Offset=0x14 Size=0x4
    unsigned long NumberOfNames;// Offset=0x18 Size=0x4
    unsigned long AddressOfFunctions;// Offset=0x1c Size=0x4
    unsigned long AddressOfNames;// Offset=0x20 Size=0x4
    unsigned long AddressOfNameOrdinals;// Offset=0x24 Size=0x4
};

struct _D3DGPUVERSION// Size=0x8 (Id=564)
{
    enum _D3DGPUMAJORVERSION MajorVersion;// Offset=0x0 Size=0x4
    unsigned short MinorVersion;// Offset=0x4 Size=0x2
};

union GPUPERFCOUNTER_VALUE// Size=0x8 (Id=565)
{
    struct // Size=0x8 (Id=0)
    {
        unsigned long Low:32;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x20
        unsigned long High:16;// Offset=0x4 Size=0x4 BitOffset=0x0 BitSize=0x10
    };
    union _ULARGE_INTEGER qword;// Offset=0x0 Size=0x8
};

struct IDirectXFileData : public IDirectXFileObject// Size=0x4 (Id=566)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    HRESULT GetName(char * ,unsigned long * );
    HRESULT GetId(struct _GUID * );
    HRESULT GetData(char * ,unsigned long * ,void ** );
    HRESULT GetType(struct _GUID ** );
    HRESULT GetNextObject(struct IDirectXFileObject ** );
    HRESULT AddDataObject(struct IDirectXFileData * );
    HRESULT AddDataReference(char * ,struct _GUID * );
    HRESULT AddBinaryObject(char * ,struct _GUID * ,char * ,void * ,unsigned long );
    void IDirectXFileData(struct IDirectXFileData & );
    void IDirectXFileData();
    struct IDirectXFileData & operator=(struct IDirectXFileData & );
};

struct IDirectXFileData : public IDirectXFileObject// Size=0x4 (Id=567)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    HRESULT GetName(char * ,unsigned long * );
    HRESULT GetId(struct _GUID * );
    HRESULT GetData(char * ,unsigned long * ,void ** );
    HRESULT GetType(struct _GUID ** );
    HRESULT GetNextObject(struct IDirectXFileObject ** );
    HRESULT AddDataObject(struct IDirectXFileData * );
    HRESULT AddDataReference(char * ,struct _GUID * );
    HRESULT AddBinaryObject(char * ,struct _GUID * ,char * ,void * ,unsigned long );
    void IDirectXFileData(struct IDirectXFileData & );
    void IDirectXFileData();
    struct IDirectXFileData & operator=(struct IDirectXFileData & );
};

struct _D3DXKEY_VECTOR3// Size=0x10 (Id=568)
{
    float Time;// Offset=0x0 Size=0x4
    struct D3DXVECTOR3 Value;// Offset=0x4 Size=0xc
    void _D3DXKEY_VECTOR3();
    struct _D3DXKEY_VECTOR3 & operator=(struct _D3DXKEY_VECTOR3 & );
};

struct _D3DXKEY_VECTOR3// Size=0x10 (Id=569)
{
    float Time;// Offset=0x0 Size=0x4
    struct D3DXVECTOR3 Value;// Offset=0x4 Size=0xc
    void _D3DXKEY_VECTOR3();
    struct _D3DXKEY_VECTOR3 & operator=(struct _D3DXKEY_VECTOR3 & );
};

struct _XCONTENT_CROSS_TITLE_DATA// Size=0x138 (Id=570)
{
    unsigned long DeviceID;// Offset=0x0 Size=0x4
    unsigned long dwContentType;// Offset=0x4 Size=0x4
    wchar_t szDisplayName[128];// Offset=0x8 Size=0x100
    char szFileName[42];// Offset=0x108 Size=0x2a
    unsigned char __align0[2];// Offset=0x132 Size=0x2
    unsigned long dwTitleId;// Offset=0x134 Size=0x4
};

struct _D3DXSHMATERIAL// Size=0x3c (Id=571)
{
    struct _D3DCOLORVALUE Diffuse;// Offset=0x0 Size=0x10
    int bMirror;// Offset=0x10 Size=0x4
    int bSubSurf;// Offset=0x14 Size=0x4
    float RelativeIndexOfRefraction;// Offset=0x18 Size=0x4
    struct _D3DCOLORVALUE Absorption;// Offset=0x1c Size=0x10
    struct _D3DCOLORVALUE ReducedScattering;// Offset=0x2c Size=0x10
};

struct _XUSER_PROFILE_SETTING// Size=0x28 (Id=572)
{
    union // Size=0x4 (Id=0)
    {
        enum _XUSER_PROFILE_SOURCE source;// Offset=0x0 Size=0x4
        union <unnamed-type-user>// Size=0x8 (Id=14180)
        {
            unsigned long dwUserIndex;// Offset=0x0 Size=0x4
            unsigned long long xuid;// Offset=0x0 Size=0x8
        };
    };
    union _XUSER_PROFILE_SETTING::<unnamed-type-user> user;// Offset=0x8 Size=0x8
    unsigned long dwSettingId;// Offset=0x10 Size=0x4
    unsigned char __align0[4];// Offset=0x14 Size=0x4
    struct _XUSER_DATA data;// Offset=0x18 Size=0x10
};

union _XUSER_PROFILE_SETTING::<unnamed-type-user>// Size=0x8 (Id=573)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long long xuid;// Offset=0x0 Size=0x8
};

struct _ACL// Size=0x8 (Id=574)
{
    unsigned char AclRevision;// Offset=0x0 Size=0x1
    unsigned char Sbz1;// Offset=0x1 Size=0x1
    unsigned short AclSize;// Offset=0x2 Size=0x2
    unsigned short AceCount;// Offset=0x4 Size=0x2
    unsigned short Sbz2;// Offset=0x6 Size=0x2
};

struct IMAGE_LOAD_CONFIG_DIRECTORY32// Size=0x40 (Id=575)
{
    unsigned long Characteristics;// Offset=0x0 Size=0x4
    unsigned long TimeDateStamp;// Offset=0x4 Size=0x4
    unsigned short MajorVersion;// Offset=0x8 Size=0x2
    unsigned short MinorVersion;// Offset=0xa Size=0x2
    unsigned long GlobalFlagsClear;// Offset=0xc Size=0x4
    unsigned long GlobalFlagsSet;// Offset=0x10 Size=0x4
    unsigned long CriticalSectionDefaultTimeout;// Offset=0x14 Size=0x4
    unsigned long DeCommitFreeBlockThreshold;// Offset=0x18 Size=0x4
    unsigned long DeCommitTotalFreeThreshold;// Offset=0x1c Size=0x4
    unsigned long LockPrefixTable;// Offset=0x20 Size=0x4
    unsigned long MaximumAllocationSize;// Offset=0x24 Size=0x4
    unsigned long VirtualMemoryThreshold;// Offset=0x28 Size=0x4
    unsigned long ProcessHeapFlags;// Offset=0x2c Size=0x4
    unsigned long ProcessAffinityMask;// Offset=0x30 Size=0x4
    unsigned short CSDVersion;// Offset=0x34 Size=0x2
    unsigned short Reserved1;// Offset=0x36 Size=0x2
    unsigned long EditList;// Offset=0x38 Size=0x4
    unsigned long Reserved[1];// Offset=0x3c Size=0x4
};

union GPUFLOW_LOOP_START// Size=0x8 (Id=576)
{
    struct // Size=0x8 (Id=0)
    {
        unsigned long JumpAddress:13;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xd
        unsigned long Repeat:1;// Offset=0x0 Size=0x4 BitOffset=0xd BitSize=0x1
        unsigned long LoopID:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long AbsoluteAddressing:1;// Offset=0x4 Size=0x4 BitOffset=0xb BitSize=0x1
        unsigned long Op:4;// Offset=0x4 Size=0x4 BitOffset=0xc BitSize=0x4
    };
};

struct _XMDHENN3// Size=0x4 (Id=577)
{
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            int x:10;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xa
            int y:11;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0xb
            int z:11;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0xb
        };
        unsigned int v;// Offset=0x0 Size=0x4
    };
    void _XMDHENN3(float * );
    void _XMDHENN3(float ,float ,float );
    void _XMDHENN3(unsigned int );
    void _XMDHENN3();
    unsigned int operator unsigned int();
    struct _XMDHENN3 & operator=(const unsigned int );
    struct _XMDHENN3 & operator=(struct _XMDHENN3 & );
};

struct _XMDHENN3// Size=0x4 (Id=578)
{
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            int x:10;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xa
            int y:11;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0xb
            int z:11;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0xb
        };
        unsigned int v;// Offset=0x0 Size=0x4
    };
    void _XMDHENN3(float * );
    void _XMDHENN3(float ,float ,float );
    void _XMDHENN3(unsigned int );
    void _XMDHENN3();
    unsigned int operator unsigned int();
    struct _XMDHENN3 & operator=(const unsigned int );
    struct _XMDHENN3 & operator=(struct _XMDHENN3 & );
};

union _FILE_SEGMENT_ELEMENT// Size=0x4 (Id=579)
{
    void * Buffer;// Offset=0x0 Size=0x4
    unsigned long Alignment;// Offset=0x0 Size=0x4
};

struct _div_t// Size=0x8 (Id=580)
{
    int quot;// Offset=0x0 Size=0x4
    int rem;// Offset=0x4 Size=0x4
};

union GPU_COLORINFO// Size=0x4 (Id=581)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long ColorBase:12;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xc
        unsigned long ColorFormat:4;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x4
        unsigned long ColorExpBias:6;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0x6
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

struct _D3DSWAPDATA// Size=0x18 (Id=582)
{
    unsigned long Flags;// Offset=0x0 Size=0x4
    unsigned long Swap;// Offset=0x4 Size=0x4
    unsigned long LastVBlank;// Offset=0x8 Size=0x4
    unsigned long LastSwapVBlank;// Offset=0xc Size=0x4
    unsigned long PercentScanned;// Offset=0x10 Size=0x4
    unsigned long SwapVBlank;// Offset=0x14 Size=0x4
};

struct _D3DXATTRIBUTEWEIGHTS// Size=0x3c (Id=583)
{
    float Position;// Offset=0x0 Size=0x4
    float Boundary;// Offset=0x4 Size=0x4
    float Normal;// Offset=0x8 Size=0x4
    float Diffuse;// Offset=0xc Size=0x4
    float Specular;// Offset=0x10 Size=0x4
    float Texcoord[8];// Offset=0x14 Size=0x20
    float Tangent;// Offset=0x34 Size=0x4
    float Binormal;// Offset=0x38 Size=0x4
};

struct in_addr// Size=0x4 (Id=584)
{
    union // Size=0x4 (Id=0)
    {
        union <unnamed-type-S_un>// Size=0x4 (Id=14256)
        {
            struct <unnamed-type-S_un_b>// Size=0x4 (Id=14257)
            {
                unsigned char s_b1;// Offset=0x0 Size=0x1
                unsigned char s_b2;// Offset=0x1 Size=0x1
                unsigned char s_b3;// Offset=0x2 Size=0x1
                unsigned char s_b4;// Offset=0x3 Size=0x1
            };
            struct in_addr::<unnamed-type-S_un>::<unnamed-type-S_un_b> S_un_b;// Offset=0x0 Size=0x4
            struct <unnamed-type-S_un_w>// Size=0x4 (Id=14263)
            {
                unsigned short s_w1;// Offset=0x0 Size=0x2
                unsigned short s_w2;// Offset=0x2 Size=0x2
            };
            struct in_addr::<unnamed-type-S_un>::<unnamed-type-S_un_w> S_un_w;// Offset=0x0 Size=0x4
            unsigned long S_addr;// Offset=0x0 Size=0x4
        };
        union in_addr::<unnamed-type-S_un> S_un;// Offset=0x0 Size=0x4
    };
};

union GPUFETCH_CONSTANT// Size=0x18 (Id=585)
{
    union GPUTEXTURE_FETCH_CONSTANT Texture;// Offset=0x0 Size=0x18
    union GPUVERTEX_FETCH_CONSTANT Vertex[3];// Offset=0x0 Size=0x18
};

struct _SECURITY_DESCRIPTOR_RELATIVE// Size=0x14 (Id=586)
{
    unsigned char Revision;// Offset=0x0 Size=0x1
    unsigned char Sbz1;// Offset=0x1 Size=0x1
    unsigned short Control;// Offset=0x2 Size=0x2
    unsigned long Owner;// Offset=0x4 Size=0x4
    unsigned long Group;// Offset=0x8 Size=0x4
    unsigned long Sacl;// Offset=0xc Size=0x4
    unsigned long Dacl;// Offset=0x10 Size=0x4
};

struct _FILE_ALLOCATION_INFO// Size=0x8 (Id=587)
{
    union _LARGE_INTEGER AllocationSize;// Offset=0x0 Size=0x8
};

struct _XMARKETPLACE_ASSET// Size=0x8 (Id=588)
{
    unsigned long dwAssetID;// Offset=0x0 Size=0x4
    unsigned long dwQuantity;// Offset=0x4 Size=0x4
};

union GPU_AACONFIG// Size=0x4 (Id=589)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long MsaaNumSamples:3;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x3
        unsigned long MaxSampleDist:4;// Offset=0x0 Size=0x4 BitOffset=0xd BitSize=0x4
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

struct _D3DLOCKED_TAIL// Size=0xc (Id=590)
{
    int RowPitch;// Offset=0x0 Size=0x4
    int SlicePitch;// Offset=0x4 Size=0x4
    void * pBits;// Offset=0x8 Size=0x4
};

struct _TOKEN_STATISTICS// Size=0x38 (Id=591)
{
    struct _LUID TokenId;// Offset=0x0 Size=0x8
    struct _LUID AuthenticationId;// Offset=0x8 Size=0x8
    union _LARGE_INTEGER ExpirationTime;// Offset=0x10 Size=0x8
    enum _TOKEN_TYPE TokenType;// Offset=0x18 Size=0x4
    enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;// Offset=0x1c Size=0x4
    unsigned long DynamicCharged;// Offset=0x20 Size=0x4
    unsigned long DynamicAvailable;// Offset=0x24 Size=0x4
    unsigned long GroupCount;// Offset=0x28 Size=0x4
    unsigned long PrivilegeCount;// Offset=0x2c Size=0x4
    struct _LUID ModifiedId;// Offset=0x30 Size=0x8
};

struct _XMARKETPLACE_ASSET_ENUMERATE_REPLY// Size=0x118 (Id=592)
{
    unsigned char signature[256];// Offset=0x0 Size=0x100
    struct _XMARKETPLACE_ASSET_PACKAGE assetPackage;// Offset=0x100 Size=0x18
};

struct vc_attributes::SuccessAttribute// Size=0x4 (Id=593)
{
    void SuccessAttribute();
    wchar_t * Condition;// Offset=0x0 Size=0x4
};

struct _D3DXEFFECTINSTANCE// Size=0xc (Id=594)
{
    char * pEffectFilename;// Offset=0x0 Size=0x4
    unsigned long NumDefaults;// Offset=0x4 Size=0x4
    struct _D3DXEFFECTDEFAULT * pDefaults;// Offset=0x8 Size=0x4
};

struct _PRIVILEGE_SET// Size=0x14 (Id=595)
{
    unsigned long PrivilegeCount;// Offset=0x0 Size=0x4
    unsigned long Control;// Offset=0x4 Size=0x4
    struct _LUID_AND_ATTRIBUTES Privilege[1];// Offset=0x8 Size=0xc
};

struct HWND__// Size=0x4 (Id=596)
{
    int unused;// Offset=0x0 Size=0x4
};

union GPU_POINTSIZE// Size=0x4 (Id=597)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long Height:16;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x10
        unsigned long Width:16;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x10
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

struct _D3DDEVICE_CREATION_PARAMETERS// Size=0x10 (Id=598)
{
    unsigned int AdapterOrdinal;// Offset=0x0 Size=0x4
    enum _D3DDEVTYPE DeviceType;// Offset=0x4 Size=0x4
    struct HWND__ * hFocusWindow;// Offset=0x8 Size=0x4
    unsigned long BehaviorFlags;// Offset=0xc Size=0x4
};

union DCPERFCOUNTER_VALUE// Size=0x8 (Id=599)
{
    struct // Size=0x8 (Id=0)
    {
        unsigned long Low:32;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x20
        unsigned long High:16;// Offset=0x4 Size=0x4 BitOffset=0x0 BitSize=0x10
    };
    union _ULARGE_INTEGER qword;// Offset=0x0 Size=0x8
};

union BIUPERFCOUNTER_CNTL// Size=0x4 (Id=600)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long State:3;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x3
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

struct tagPALETTEENTRY// Size=0x4 (Id=601)
{
    unsigned char peRed;// Offset=0x0 Size=0x1
    unsigned char peGreen;// Offset=0x1 Size=0x1
    unsigned char peBlue;// Offset=0x2 Size=0x1
    unsigned char peFlags;// Offset=0x3 Size=0x1
};

struct _s__CatchableType// Size=0x1c (Id=602)
{
    unsigned int properties;// Offset=0x0 Size=0x4
    struct _TypeDescriptor * pType;// Offset=0x4 Size=0x4
    struct _PMD thisDisplacement;// Offset=0x8 Size=0xc
    int sizeOrOffset;// Offset=0x14 Size=0x4
    void  ( * copyFunction)();// Offset=0x18 Size=0x4
};

struct ID3DXMatrixStack : public IUnknown// Size=0x4 (Id=603)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    HRESULT Pop();
    HRESULT Push();
    HRESULT LoadIdentity();
    HRESULT LoadMatrix(struct D3DXMATRIX * );
    HRESULT MultMatrix(struct D3DXMATRIX * );
    HRESULT MultMatrixLocal(struct D3DXMATRIX * );
    HRESULT RotateAxis(struct D3DXVECTOR3 * ,float );
    HRESULT RotateAxisLocal(struct D3DXVECTOR3 * ,float );
    HRESULT RotateYawPitchRoll(float ,float ,float );
    HRESULT RotateYawPitchRollLocal(float ,float ,float );
    HRESULT Scale(float ,float ,float );
    HRESULT ScaleLocal(float ,float ,float );
    HRESULT Translate(float ,float ,float );
    HRESULT TranslateLocal(float ,float ,float );
    struct D3DXMATRIX * GetTop();
    void ID3DXMatrixStack(struct ID3DXMatrixStack & );
    void ID3DXMatrixStack();
    struct ID3DXMatrixStack & operator=(struct ID3DXMatrixStack & );
};

struct ID3DXMatrixStack : public IUnknown// Size=0x4 (Id=604)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    HRESULT Pop();
    HRESULT Push();
    HRESULT LoadIdentity();
    HRESULT LoadMatrix(struct D3DXMATRIX * );
    HRESULT MultMatrix(struct D3DXMATRIX * );
    HRESULT MultMatrixLocal(struct D3DXMATRIX * );
    HRESULT RotateAxis(struct D3DXVECTOR3 * ,float );
    HRESULT RotateAxisLocal(struct D3DXVECTOR3 * ,float );
    HRESULT RotateYawPitchRoll(float ,float ,float );
    HRESULT RotateYawPitchRollLocal(float ,float ,float );
    HRESULT Scale(float ,float ,float );
    HRESULT ScaleLocal(float ,float ,float );
    HRESULT Translate(float ,float ,float );
    HRESULT TranslateLocal(float ,float ,float );
    struct D3DXMATRIX * GetTop();
    void ID3DXMatrixStack(struct ID3DXMatrixStack & );
    void ID3DXMatrixStack();
    struct ID3DXMatrixStack & operator=(struct ID3DXMatrixStack & );
};

struct ID3DXCompressedAnimationSet : public ID3DXAnimationSet// Size=0x4 (Id=605)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    char * GetName();
    float GetPeriod();
    float GetPeriodicPosition(float );
    unsigned int GetNumAnimations();
    HRESULT GetAnimationNameByIndex(unsigned int ,char ** );
    HRESULT GetAnimationIndexByName(char * ,unsigned int * );
    HRESULT GetSRT(float ,unsigned int ,struct D3DXVECTOR3 * ,struct D3DXQUATERNION * ,struct D3DXVECTOR3 * );
    HRESULT GetCallback(float ,unsigned long ,float * ,void ** );
    enum _D3DXPLAYBACK_TYPE GetPlaybackType();
    float GetSourceTicksPerSecond();
    HRESULT GetCompressedData(struct ID3DXBuffer ** );
    unsigned int GetNumCallbackKeys();
    HRESULT GetCallbackKeys(struct _D3DXKEY_CALLBACK * );
    void ID3DXCompressedAnimationSet(struct ID3DXCompressedAnimationSet & );
    void ID3DXCompressedAnimationSet();
    struct ID3DXCompressedAnimationSet & operator=(struct ID3DXCompressedAnimationSet & );
};

struct ID3DXCompressedAnimationSet : public ID3DXAnimationSet// Size=0x4 (Id=606)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    char * GetName();
    float GetPeriod();
    float GetPeriodicPosition(float );
    unsigned int GetNumAnimations();
    HRESULT GetAnimationNameByIndex(unsigned int ,char ** );
    HRESULT GetAnimationIndexByName(char * ,unsigned int * );
    HRESULT GetSRT(float ,unsigned int ,struct D3DXVECTOR3 * ,struct D3DXQUATERNION * ,struct D3DXVECTOR3 * );
    HRESULT GetCallback(float ,unsigned long ,float * ,void ** );
    enum _D3DXPLAYBACK_TYPE GetPlaybackType();
    float GetSourceTicksPerSecond();
    HRESULT GetCompressedData(struct ID3DXBuffer ** );
    unsigned int GetNumCallbackKeys();
    HRESULT GetCallbackKeys(struct _D3DXKEY_CALLBACK * );
    void ID3DXCompressedAnimationSet(struct ID3DXCompressedAnimationSet & );
    void ID3DXCompressedAnimationSet();
    struct ID3DXCompressedAnimationSet & operator=(struct ID3DXCompressedAnimationSet & );
};

struct _XGLAYOUT_REGION// Size=0x8 (Id=607)
{
    unsigned int StartOffset;// Offset=0x0 Size=0x4
    unsigned int EndOffset;// Offset=0x4 Size=0x4
};

struct _D3DConstants// Size=0x23a0 (Id=608)
{
    union // Size=0x300 (Id=0)
    {
        union GPUFETCH_CONSTANT Fetch[32];// Offset=0x0 Size=0x300
        union GPUTEXTURE_FETCH_CONSTANT TextureFetch[26];// Offset=0x0 Size=0x270
        union GPUVERTEX_FETCH_CONSTANT VertexFetch[18];// Offset=0x270 Size=0x90
    };
    union // Size=0x2000 (Id=0)
    {
        struct __vector4 Alu[512];// Offset=0x300 Size=0x2000
        struct __vector4 VertexShaderF[256];// Offset=0x300 Size=0x1000
        struct __vector4 PixelShaderF[256];// Offset=0x1300 Size=0x1000
    };
    union // Size=0xa0 (Id=0)
    {
        unsigned long Flow[40];// Offset=0x2300 Size=0xa0
        unsigned long VertexShaderB[4];// Offset=0x2300 Size=0x10
    };
    unsigned long PixelShaderB[4];// Offset=0x2310 Size=0x10
    unsigned long VertexShaderI[16];// Offset=0x2320 Size=0x40
    unsigned long PixelShaderI[16];// Offset=0x2360 Size=0x40
};

struct XNetStartupParams// Size=0xd (Id=609)
{
    unsigned char cfgSizeOfStruct;// Offset=0x0 Size=0x1
    unsigned char cfgFlags;// Offset=0x1 Size=0x1
    unsigned char cfgSockMaxDgramSockets;// Offset=0x2 Size=0x1
    unsigned char cfgSockMaxStreamSockets;// Offset=0x3 Size=0x1
    unsigned char cfgSockDefaultRecvBufsizeInK;// Offset=0x4 Size=0x1
    unsigned char cfgSockDefaultSendBufsizeInK;// Offset=0x5 Size=0x1
    unsigned char cfgKeyRegMax;// Offset=0x6 Size=0x1
    unsigned char cfgSecRegMax;// Offset=0x7 Size=0x1
    unsigned char cfgQosDataLimitDiv4;// Offset=0x8 Size=0x1
    unsigned char cfgQosProbeTimeoutInSeconds;// Offset=0x9 Size=0x1
    unsigned char cfgQosProbeRetries;// Offset=0xa Size=0x1
    unsigned char cfgQosSrvMaxSimultaneousResponses;// Offset=0xb Size=0x1
    unsigned char cfgQosPairWaitTimeInSeconds;// Offset=0xc Size=0x1
};

struct _IMAGE_RESOURCE_DATA_ENTRY// Size=0x10 (Id=610)
{
    unsigned long OffsetToData;// Offset=0x0 Size=0x4
    unsigned long Size;// Offset=0x4 Size=0x4
    unsigned long CodePage;// Offset=0x8 Size=0x4
    unsigned long Reserved;// Offset=0xc Size=0x4
};

struct GPU_PROGRAMPACKET// Size=0x14 (Id=611)
{
    union GPU_PROGRAMCONTROL ProgramControl;// Offset=0x0 Size=0x4
    union GPU_CONTEXTMISC ContextMisc;// Offset=0x4 Size=0x4
    union GPU_INTERPOLATORCONTROL InterpolatorControl;// Offset=0x8 Size=0x4
    union GPU_WRAPPING0 Wrapping0;// Offset=0xc Size=0x4
    union GPU_WRAPPING1 Wrapping1;// Offset=0x10 Size=0x4
};

union _LARGE_INTEGER// Size=0x8 (Id=612)
{
    long HighPart;// Offset=0x0 Size=0x4
    unsigned long LowPart;// Offset=0x4 Size=0x4
    struct <unnamed-type-u>// Size=0x8 (Id=14445)
    {
        long HighPart;// Offset=0x0 Size=0x4
        unsigned long LowPart;// Offset=0x4 Size=0x4
    };
    struct _LARGE_INTEGER::<unnamed-type-u> u;// Offset=0x0 Size=0x8
    long long QuadPart;// Offset=0x0 Size=0x8
};

struct _LARGE_INTEGER::<unnamed-type-u>// Size=0x8 (Id=613)
{
    long HighPart;// Offset=0x0 Size=0x4
    unsigned long LowPart;// Offset=0x4 Size=0x4
};

union GPUCOMMAND_EVENT_WRITE_ZPASS_DONE// Size=0x4 (Id=614)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long Initiator:6;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x6
    };
    unsigned long dword[1];// Offset=0x0 Size=0x4
};

struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY// Size=0x28 (Id=615)
{
    unsigned long long BeginAddress;// Offset=0x0 Size=0x8
    unsigned long long EndAddress;// Offset=0x8 Size=0x8
    unsigned long long ExceptionHandler;// Offset=0x10 Size=0x8
    unsigned long long HandlerData;// Offset=0x18 Size=0x8
    unsigned long long PrologEndAddress;// Offset=0x20 Size=0x8
};

union GPUPERFCOUNTER_SELECT// Size=0x4 (Id=616)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long Select:8;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x8
        unsigned long N:8;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x8
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

union GPUFLOW_LOOP_END// Size=0x8 (Id=617)
{
    struct // Size=0x8 (Id=0)
    {
        unsigned long JumpAddress:13;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xd
        unsigned long LoopID:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long PredicateBreak:1;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x1
        unsigned long Condition:1;// Offset=0x4 Size=0x4 BitOffset=0xa BitSize=0x1
        unsigned long AbsoluteAddressing:1;// Offset=0x4 Size=0x4 BitOffset=0xb BitSize=0x1
        unsigned long Op:4;// Offset=0x4 Size=0x4 BitOffset=0xc BitSize=0x4
    };
};

struct ID3DXBuffer : public IUnknown// Size=0x4 (Id=618)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    void * GetBufferPointer();
    unsigned long GetBufferSize();
    void ID3DXBuffer(struct ID3DXBuffer & );
    void ID3DXBuffer();
    struct ID3DXBuffer & operator=(struct ID3DXBuffer & );
};

struct ID3DXBuffer : public IUnknown// Size=0x4 (Id=619)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    void * GetBufferPointer();
    unsigned long GetBufferSize();
    void ID3DXBuffer(struct ID3DXBuffer & );
    void ID3DXBuffer();
    struct ID3DXBuffer & operator=(struct ID3DXBuffer & );
};

union _ULARGE_INTEGER// Size=0x8 (Id=620)
{
    unsigned long HighPart;// Offset=0x0 Size=0x4
    unsigned long LowPart;// Offset=0x4 Size=0x4
    struct <unnamed-type-u>// Size=0x8 (Id=14485)
    {
        unsigned long HighPart;// Offset=0x0 Size=0x4
        unsigned long LowPart;// Offset=0x4 Size=0x4
    };
    struct _ULARGE_INTEGER::<unnamed-type-u> u;// Offset=0x0 Size=0x8
    unsigned long long QuadPart;// Offset=0x0 Size=0x8
};

struct _ULARGE_INTEGER::<unnamed-type-u>// Size=0x8 (Id=621)
{
    unsigned long HighPart;// Offset=0x0 Size=0x4
    unsigned long LowPart;// Offset=0x4 Size=0x4
};

struct _XHASH_STATE// Size=0x58 (Id=622)
{
    unsigned char Internal[88];// Offset=0x0 Size=0x58
};

struct _MESSAGEBOX_RESULT// Size=0x8 (Id=623)
{
    union // Size=0x4 (Id=0)
    {
        unsigned long dwButtonPressed;// Offset=0x0 Size=0x4
        unsigned short rgwPasscode[4];// Offset=0x0 Size=0x8
    };
};

struct ISequentialStream// Size=0x4 (Id=624)
{
    struct ISequentialStreamVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct ISequentialStream : public IUnknown// Size=0x4 (Id=625)
{
    HRESULT Read(void * ,unsigned long ,unsigned long * );
    HRESULT Write(void * ,unsigned long ,unsigned long * );
    void ISequentialStream(struct ISequentialStream & );
    void ISequentialStream();
    struct ISequentialStream & operator=(struct ISequentialStream & );
};

struct _XGIDEALSHADERCOST// Size=0x54 (Id=626)
{
    float MinAlu;// Offset=0x0 Size=0x4
    float MaxAlu;// Offset=0x4 Size=0x4
    float Interpolator;// Offset=0x8 Size=0x4
    float MinTexture;// Offset=0xc Size=0x4
    float MaxTexture;// Offset=0x10 Size=0x4
    float MinVertex;// Offset=0x14 Size=0x4
    float MaxVertex;// Offset=0x18 Size=0x4
    float Sequencer;// Offset=0x1c Size=0x4
    float MinOverall;// Offset=0x20 Size=0x4
    float MaxOverall;// Offset=0x24 Size=0x4
    int bHasHitUnknownControlFlow;// Offset=0x28 Size=0x4
    int bHasHitChangeableControlFlow;// Offset=0x2c Size=0x4
    int bHasHitPredicatedJump;// Offset=0x30 Size=0x4
    int bHasHitPredicatedEndloop;// Offset=0x34 Size=0x4
    int bHasHitUnknownFetchConstant;// Offset=0x38 Size=0x4
    int bHasHitUnpatchedVfetch;// Offset=0x3c Size=0x4
    int MaxTempReg;// Offset=0x40 Size=0x4
    float AvgTcInstructions;// Offset=0x44 Size=0x4
    float AvgTcAndTcCfInstructions;// Offset=0x48 Size=0x4
    float AvgVcInstructions;// Offset=0x4c Size=0x4
    float AvgVcAndVcCfInstructions;// Offset=0x50 Size=0x4
};

struct XMVECTORF32// Size=0x10 (Id=627)
{
    union // Size=0x10 (Id=0)
    {
        float f[4];// Offset=0x0 Size=0x10
        struct __vector4 v;// Offset=0x0 Size=0x10
    };
    struct __vector4 operator struct __vector4();
};

struct XMVECTORF32// Size=0x10 (Id=628)
{
    union // Size=0x10 (Id=0)
    {
        float f[4];// Offset=0x0 Size=0x10
        struct __vector4 v;// Offset=0x0 Size=0x10
    };
    struct __vector4 operator struct __vector4();
};

struct _D3DCAPS9// Size=0x130 (Id=629)
{
    enum _D3DDEVTYPE DeviceType;// Offset=0x0 Size=0x4
    unsigned int AdapterOrdinal;// Offset=0x4 Size=0x4
    unsigned long Caps;// Offset=0x8 Size=0x4
    unsigned long Caps2;// Offset=0xc Size=0x4
    unsigned long Caps3;// Offset=0x10 Size=0x4
    unsigned long PresentationIntervals;// Offset=0x14 Size=0x4
    unsigned long CursorCaps;// Offset=0x18 Size=0x4
    unsigned long DevCaps;// Offset=0x1c Size=0x4
    unsigned long PrimitiveMiscCaps;// Offset=0x20 Size=0x4
    unsigned long RasterCaps;// Offset=0x24 Size=0x4
    unsigned long ZCmpCaps;// Offset=0x28 Size=0x4
    unsigned long SrcBlendCaps;// Offset=0x2c Size=0x4
    unsigned long DestBlendCaps;// Offset=0x30 Size=0x4
    unsigned long AlphaCmpCaps;// Offset=0x34 Size=0x4
    unsigned long ShadeCaps;// Offset=0x38 Size=0x4
    unsigned long TextureCaps;// Offset=0x3c Size=0x4
    unsigned long TextureFilterCaps;// Offset=0x40 Size=0x4
    unsigned long CubeTextureFilterCaps;// Offset=0x44 Size=0x4
    unsigned long VolumeTextureFilterCaps;// Offset=0x48 Size=0x4
    unsigned long TextureAddressCaps;// Offset=0x4c Size=0x4
    unsigned long VolumeTextureAddressCaps;// Offset=0x50 Size=0x4
    unsigned long LineCaps;// Offset=0x54 Size=0x4
    unsigned long MaxTextureWidth;// Offset=0x58 Size=0x4
    unsigned long MaxTextureHeight;// Offset=0x5c Size=0x4
    unsigned long MaxVolumeExtent;// Offset=0x60 Size=0x4
    unsigned long MaxTextureRepeat;// Offset=0x64 Size=0x4
    unsigned long MaxTextureAspectRatio;// Offset=0x68 Size=0x4
    unsigned long MaxAnisotropy;// Offset=0x6c Size=0x4
    float MaxVertexW;// Offset=0x70 Size=0x4
    float GuardBandLeft;// Offset=0x74 Size=0x4
    float GuardBandTop;// Offset=0x78 Size=0x4
    float GuardBandRight;// Offset=0x7c Size=0x4
    float GuardBandBottom;// Offset=0x80 Size=0x4
    float ExtentsAdjust;// Offset=0x84 Size=0x4
    unsigned long StencilCaps;// Offset=0x88 Size=0x4
    unsigned long FVFCaps;// Offset=0x8c Size=0x4
    unsigned long TextureOpCaps;// Offset=0x90 Size=0x4
    unsigned long MaxTextureBlendStages;// Offset=0x94 Size=0x4
    unsigned long MaxSimultaneousTextures;// Offset=0x98 Size=0x4
    unsigned long VertexProcessingCaps;// Offset=0x9c Size=0x4
    unsigned long MaxActiveLights;// Offset=0xa0 Size=0x4
    unsigned long MaxUserClipPlanes;// Offset=0xa4 Size=0x4
    unsigned long MaxVertexBlendMatrices;// Offset=0xa8 Size=0x4
    unsigned long MaxVertexBlendMatrixIndex;// Offset=0xac Size=0x4
    float MaxPointSize;// Offset=0xb0 Size=0x4
    unsigned long MaxPrimitiveCount;// Offset=0xb4 Size=0x4
    unsigned long MaxVertexIndex;// Offset=0xb8 Size=0x4
    unsigned long MaxStreams;// Offset=0xbc Size=0x4
    unsigned long MaxStreamStride;// Offset=0xc0 Size=0x4
    unsigned long VertexShaderVersion;// Offset=0xc4 Size=0x4
    unsigned long MaxVertexShaderConst;// Offset=0xc8 Size=0x4
    unsigned long PixelShaderVersion;// Offset=0xcc Size=0x4
    float PixelShader1xMaxValue;// Offset=0xd0 Size=0x4
    unsigned long DevCaps2;// Offset=0xd4 Size=0x4
    float MaxNpatchTessellationLevel;// Offset=0xd8 Size=0x4
    unsigned long Reserved5;// Offset=0xdc Size=0x4
    unsigned int MasterAdapterOrdinal;// Offset=0xe0 Size=0x4
    unsigned int AdapterOrdinalInGroup;// Offset=0xe4 Size=0x4
    unsigned int NumberOfAdaptersInGroup;// Offset=0xe8 Size=0x4
    unsigned long DeclTypes;// Offset=0xec Size=0x4
    unsigned long NumSimultaneousRTs;// Offset=0xf0 Size=0x4
    unsigned long StretchRectFilterCaps;// Offset=0xf4 Size=0x4
    struct _D3DVSHADERCAPS2_0 VS20Caps;// Offset=0xf8 Size=0x10
    struct _D3DPSHADERCAPS2_0 PS20Caps;// Offset=0x108 Size=0x14
    unsigned long VertexTextureFilterCaps;// Offset=0x11c Size=0x4
    unsigned long MaxVShaderInstructionsExecuted;// Offset=0x120 Size=0x4
    unsigned long MaxPShaderInstructionsExecuted;// Offset=0x124 Size=0x4
    unsigned long MaxVertexShader30InstructionSlots;// Offset=0x128 Size=0x4
    unsigned long MaxPixelShader30InstructionSlots;// Offset=0x12c Size=0x4
};

struct _SYSTEM_ALARM_ACE// Size=0xc (Id=630)
{
    struct _ACE_HEADER Header;// Offset=0x0 Size=0x4
    unsigned long Mask;// Offset=0x4 Size=0x4
    unsigned long SidStart;// Offset=0x8 Size=0x4
};

struct IMAGE_LOAD_CONFIG_DIRECTORY64// Size=0x48 (Id=631)
{
    unsigned long Characteristics;// Offset=0x0 Size=0x4
    unsigned long TimeDateStamp;// Offset=0x4 Size=0x4
    unsigned short MajorVersion;// Offset=0x8 Size=0x2
    unsigned short MinorVersion;// Offset=0xa Size=0x2
    unsigned long GlobalFlagsClear;// Offset=0xc Size=0x4
    unsigned long GlobalFlagsSet;// Offset=0x10 Size=0x4
    unsigned long CriticalSectionDefaultTimeout;// Offset=0x14 Size=0x4
    unsigned long DeCommitFreeBlockThreshold;// Offset=0x18 Size=0x4
    unsigned long DeCommitTotalFreeThreshold;// Offset=0x1c Size=0x4
    unsigned long long LockPrefixTable;// Offset=0x20 Size=0x8
    unsigned long MaximumAllocationSize;// Offset=0x28 Size=0x4
    unsigned long VirtualMemoryThreshold;// Offset=0x2c Size=0x4
    unsigned long ProcessHeapFlags;// Offset=0x30 Size=0x4
    unsigned long ProcessAffinityMask;// Offset=0x34 Size=0x4
    unsigned short CSDVersion;// Offset=0x38 Size=0x2
    unsigned short Reserved1;// Offset=0x3a Size=0x2
    unsigned long long EditList;// Offset=0x3c Size=0x8
    unsigned long Reserved[1];// Offset=0x44 Size=0x4
};

struct _D3DSCREENEXTENTSTATS// Size=0x18 (Id=632)
{
    unsigned long MinX;// Offset=0x0 Size=0x4
    unsigned long MaxX;// Offset=0x4 Size=0x4
    unsigned long MinY;// Offset=0x8 Size=0x4
    unsigned long MaxY;// Offset=0xc Size=0x4
    float MinZ;// Offset=0x10 Size=0x4
    float MaxZ;// Offset=0x14 Size=0x4
};

struct _XUSER_SIGNIN_INFO// Size=0x28 (Id=633)
{
    unsigned long long xuid;// Offset=0x0 Size=0x8
    unsigned long dwInfoFlags;// Offset=0x8 Size=0x4
    enum _XUSER_SIGNIN_STATE UserSigninState;// Offset=0xc Size=0x4
    unsigned long dwGuestNumber;// Offset=0x10 Size=0x4
    unsigned long dwSponsorUserIndex;// Offset=0x14 Size=0x4
    char szUserName[16];// Offset=0x18 Size=0x10
};

union GPU_VERTEXREUSEBLOCKCONTROL// Size=0x4 (Id=634)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long VtxReuseDepth:8;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x8
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

struct XNDNS// Size=0x28 (Id=635)
{
    int iStatus;// Offset=0x0 Size=0x4
    unsigned int cina;// Offset=0x4 Size=0x4
    struct in_addr aina[8];// Offset=0x8 Size=0x20
};

struct _IMAGE_BOUND_FORWARDER_REF// Size=0x8 (Id=636)
{
    unsigned long TimeDateStamp;// Offset=0x0 Size=0x4
    unsigned short OffsetModuleName;// Offset=0x4 Size=0x2
    unsigned short Reserved;// Offset=0x6 Size=0x2
};

struct _D3DXSHADER_VARIABLEINFO// Size=0x14 (Id=637)
{
    unsigned long Scope;// Offset=0x0 Size=0x4
    unsigned long Name;// Offset=0x4 Size=0x4
    unsigned long TypeInfo;// Offset=0x8 Size=0x4
    unsigned long Writes;// Offset=0xc Size=0x4
    unsigned long WriteInfo;// Offset=0x10 Size=0x4
};

struct ID3DXFileEnumObject : public IUnknown// Size=0x4 (Id=638)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    HRESULT GetFile(struct ID3DXFile ** );
    HRESULT GetChildren(unsigned long * );
    HRESULT GetChild(unsigned long ,struct ID3DXFileData ** );
    HRESULT GetDataObjectById(struct _GUID & ,struct ID3DXFileData ** );
    HRESULT GetDataObjectByName(char * ,struct ID3DXFileData ** );
    void ID3DXFileEnumObject(struct ID3DXFileEnumObject & );
    void ID3DXFileEnumObject();
    struct ID3DXFileEnumObject & operator=(struct ID3DXFileEnumObject & );
};

struct ID3DXFileEnumObject : public IUnknown// Size=0x4 (Id=639)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    HRESULT GetFile(struct ID3DXFile ** );
    HRESULT GetChildren(unsigned long * );
    HRESULT GetChild(unsigned long ,struct ID3DXFileData ** );
    HRESULT GetDataObjectById(struct _GUID & ,struct ID3DXFileData ** );
    HRESULT GetDataObjectByName(char * ,struct ID3DXFileData ** );
    void ID3DXFileEnumObject(struct ID3DXFileEnumObject & );
    void ID3DXFileEnumObject();
    struct ID3DXFileEnumObject & operator=(struct ID3DXFileEnumObject & );
};

union GPU_GROUPVECTCONTROL// Size=0x4 (Id=640)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long CompXEnable:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long CompYEnable:1;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x1
        unsigned long CompZEnable:1;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x1
        unsigned long CompWEnable:1;// Offset=0x0 Size=0x4 BitOffset=0x3 BitSize=0x1
        unsigned long Stride:8;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x8
        unsigned long Shift:8;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x8
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

union GPUCOMMAND_DRAW_AUTO// Size=0x8 (Id=641)
{
    struct // Size=0x8 (Id=0)
    {
        unsigned long VizQueryId:6;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x6
        unsigned long UseVizQuery:1;// Offset=0x0 Size=0x4 BitOffset=0x6 BitSize=0x1
        unsigned long PrimType:6;// Offset=0x4 Size=0x4 BitOffset=0x0 BitSize=0x6
        unsigned long SrcSelect:2;// Offset=0x4 Size=0x4 BitOffset=0x6 BitSize=0x2
        unsigned long MajorMode:3;// Offset=0x4 Size=0x4 BitOffset=0x8 BitSize=0x3
        unsigned long IndexSize:1;// Offset=0x4 Size=0x4 BitOffset=0xb BitSize=0x1
        unsigned long NotEndOfPacket:1;// Offset=0x4 Size=0x4 BitOffset=0xc BitSize=0x1
        unsigned long NumIndices:16;// Offset=0x4 Size=0x4 BitOffset=0x10 BitSize=0x10
    };
    unsigned long dword[2];// Offset=0x0 Size=0x8
};

struct _TOKEN_OWNER// Size=0x4 (Id=642)
{
    void * Owner;// Offset=0x0 Size=0x4
};

struct _XCOMPRESS_FILE_HEADER_LZXNATIVE// Size=0x30 (Id=643)
{
    struct _XCOMPRESS_FILE_HEADER Common;// Offset=0x0 Size=0x8
    unsigned long ContextFlags;// Offset=0x8 Size=0x4
    struct _XMEMCODEC_PARAMETERS_LZX CodecParams;// Offset=0xc Size=0xc
    unsigned long UncompressedSizeHigh;// Offset=0x18 Size=0x4
    unsigned long UncompressedSizeLow;// Offset=0x1c Size=0x4
    unsigned long CompressedSizeHigh;// Offset=0x20 Size=0x4
    unsigned long CompressedSizeLow;// Offset=0x24 Size=0x4
    unsigned long UncompressedBlockSize;// Offset=0x28 Size=0x4
    unsigned long CompressedBlockSizeMax;// Offset=0x2c Size=0x4
};

union GPU_GROUPPRIMTYPE// Size=0x4 (Id=644)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long GroupPrimType:4;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x4
        unsigned long GroupRetainOrder:1;// Offset=0x0 Size=0x4 BitOffset=0xe BitSize=0x1
        unsigned long GroupRetainQuads:1;// Offset=0x0 Size=0x4 BitOffset=0xf BitSize=0x1
        unsigned long GroupPrimOrder:3;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x3
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

struct tagLC_ID// Size=0x6 (Id=645)
{
    unsigned short wLanguage;// Offset=0x0 Size=0x2
    unsigned short wCountry;// Offset=0x2 Size=0x2
    unsigned short wCodePage;// Offset=0x4 Size=0x2
};

struct _ACCESS_DENIED_OBJECT_ACE// Size=0x30 (Id=646)
{
    struct _ACE_HEADER Header;// Offset=0x0 Size=0x4
    unsigned long Mask;// Offset=0x4 Size=0x4
    unsigned long Flags;// Offset=0x8 Size=0x4
    struct _GUID ObjectType;// Offset=0xc Size=0x10
    struct _GUID InheritedObjectType;// Offset=0x1c Size=0x10
    unsigned long SidStart;// Offset=0x2c Size=0x4
};

struct _IMAGE_DOS_HEADER// Size=0x40 (Id=647)
{
    unsigned short e_magic;// Offset=0x0 Size=0x2
    unsigned short e_cblp;// Offset=0x2 Size=0x2
    unsigned short e_cp;// Offset=0x4 Size=0x2
    unsigned short e_crlc;// Offset=0x6 Size=0x2
    unsigned short e_cparhdr;// Offset=0x8 Size=0x2
    unsigned short e_minalloc;// Offset=0xa Size=0x2
    unsigned short e_maxalloc;// Offset=0xc Size=0x2
    unsigned short e_ss;// Offset=0xe Size=0x2
    unsigned short e_sp;// Offset=0x10 Size=0x2
    unsigned short e_csum;// Offset=0x12 Size=0x2
    unsigned short e_ip;// Offset=0x14 Size=0x2
    unsigned short e_cs;// Offset=0x16 Size=0x2
    unsigned short e_lfarlc;// Offset=0x18 Size=0x2
    unsigned short e_ovno;// Offset=0x1a Size=0x2
    unsigned short e_res[4];// Offset=0x1c Size=0x8
    unsigned short e_oemid;// Offset=0x24 Size=0x2
    unsigned short e_oeminfo;// Offset=0x26 Size=0x2
    unsigned short e_res2[10];// Offset=0x28 Size=0x14
    long e_lfanew;// Offset=0x3c Size=0x4
};

struct _FILE_DISPOSITION_INFO// Size=0x1 (Id=648)
{
    unsigned char DeleteFileA;// Offset=0x0 Size=0x1
};

struct tagPOINT// Size=0x8 (Id=649)
{
    long x;// Offset=0x0 Size=0x4
    long y;// Offset=0x4 Size=0x4
};

struct _D3DVIEWPORTF9// Size=0x1c (Id=650)
{
    float X;// Offset=0x0 Size=0x4
    float Y;// Offset=0x4 Size=0x4
    float Width;// Offset=0x8 Size=0x4
    float Height;// Offset=0xc Size=0x4
    float MinZ;// Offset=0x10 Size=0x4
    float MaxZ;// Offset=0x14 Size=0x4
    unsigned long Flags;// Offset=0x18 Size=0x4
};

struct _D3DXPASS_DESC// Size=0x10 (Id=651)
{
    char * Name;// Offset=0x0 Size=0x4
    unsigned int Annotations;// Offset=0x4 Size=0x4
    unsigned long * pVertexShaderFunction;// Offset=0x8 Size=0x4
    unsigned long * pPixelShaderFunction;// Offset=0xc Size=0x4
};

struct _D3DCOLORVALUE// Size=0x10 (Id=652)
{
    float r;// Offset=0x0 Size=0x4
    float g;// Offset=0x4 Size=0x4
    float b;// Offset=0x8 Size=0x4
    float a;// Offset=0xc Size=0x4
};

struct ID3DXEffectPool : public IUnknown// Size=0x4 (Id=653)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    void ID3DXEffectPool(struct ID3DXEffectPool & );
    void ID3DXEffectPool();
    struct ID3DXEffectPool & operator=(struct ID3DXEffectPool & );
};

struct ID3DXEffectPool : public IUnknown// Size=0x4 (Id=654)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    void ID3DXEffectPool(struct ID3DXEffectPool & );
    void ID3DXEffectPool();
    struct ID3DXEffectPool & operator=(struct ID3DXEffectPool & );
};

struct _XMUBYTE4// Size=0x4 (Id=655)
{
    union // Size=0x4 (Id=0)
    {
        unsigned char x;// Offset=0x0 Size=0x1
        unsigned char y;// Offset=0x1 Size=0x1
        unsigned char z;// Offset=0x2 Size=0x1
        unsigned char w;// Offset=0x3 Size=0x1
        unsigned int v;// Offset=0x0 Size=0x4
    };
    void _XMUBYTE4(float * );
    void _XMUBYTE4(float ,float ,float ,float );
    void _XMUBYTE4(unsigned char * );
    void _XMUBYTE4(unsigned int );
    void _XMUBYTE4(unsigned char ,unsigned char ,unsigned char ,unsigned char );
    void _XMUBYTE4();
    struct _XMUBYTE4 & operator=(struct _XMUBYTE4 & );
};

struct _XMUBYTE4// Size=0x4 (Id=656)
{
    union // Size=0x4 (Id=0)
    {
        unsigned char x;// Offset=0x0 Size=0x1
        unsigned char y;// Offset=0x1 Size=0x1
        unsigned char z;// Offset=0x2 Size=0x1
        unsigned char w;// Offset=0x3 Size=0x1
        unsigned int v;// Offset=0x0 Size=0x4
    };
    void _XMUBYTE4(float * );
    void _XMUBYTE4(float ,float ,float ,float );
    void _XMUBYTE4(unsigned char * );
    void _XMUBYTE4(unsigned int );
    void _XMUBYTE4(unsigned char ,unsigned char ,unsigned char ,unsigned char );
    void _XMUBYTE4();
    struct _XMUBYTE4 & operator=(struct _XMUBYTE4 & );
};

struct _XONLINE_PRESENCE// Size=0xa4 (Id=657)
{
    unsigned long long xuid;// Offset=0x0 Size=0x8
    unsigned long dwState;// Offset=0x8 Size=0x4
    struct XNKID sessionID;// Offset=0xc Size=0x8
    unsigned long dwTitleID;// Offset=0x14 Size=0x4
    struct _FILETIME ftUserTime;// Offset=0x18 Size=0x8
    unsigned long cchRichPresence;// Offset=0x20 Size=0x4
    wchar_t wszRichPresence[64];// Offset=0x24 Size=0x80
};

struct _DXFILELOADRESOURCE// Size=0xc (Id=658)
{
    struct HINSTANCE__ * hModule;// Offset=0x0 Size=0x4
    char * lpName;// Offset=0x4 Size=0x4
    char * lpType;// Offset=0x8 Size=0x4
};

struct _IMAGE_DEBUG_MISC// Size=0x10 (Id=659)
{
    unsigned long DataType;// Offset=0x0 Size=0x4
    unsigned long Length;// Offset=0x4 Size=0x4
    unsigned char Unicode;// Offset=0x8 Size=0x1
    unsigned char Reserved[3];// Offset=0x9 Size=0x3
    unsigned char Data[1];// Offset=0xc Size=0x1
};

struct _D3DXKEY_QUATERNION// Size=0x14 (Id=660)
{
    float Time;// Offset=0x0 Size=0x4
    struct D3DXQUATERNION Value;// Offset=0x4 Size=0x10
    void _D3DXKEY_QUATERNION();
    struct _D3DXKEY_QUATERNION & operator=(struct _D3DXKEY_QUATERNION & );
};

struct _D3DXKEY_QUATERNION// Size=0x14 (Id=661)
{
    float Time;// Offset=0x0 Size=0x4
    struct D3DXQUATERNION Value;// Offset=0x4 Size=0x10
    void _D3DXKEY_QUATERNION();
    struct _D3DXKEY_QUATERNION & operator=(struct _D3DXKEY_QUATERNION & );
};

struct _ADDRESS_INFO// Size=0x24 (Id=662)
{
    unsigned short wStreet1Length;// Offset=0x0 Size=0x2
    wchar_t * wszStreet1;// Offset=0x2 Size=0x4
    unsigned short wStreet2Length;// Offset=0x6 Size=0x2
    wchar_t * wszStreet2;// Offset=0x8 Size=0x4
    unsigned short wCityLength;// Offset=0xc Size=0x2
    wchar_t * wszCity;// Offset=0xe Size=0x4
    unsigned short wDistrictLength;// Offset=0x12 Size=0x2
    wchar_t * wszDistrict;// Offset=0x14 Size=0x4
    unsigned short wStateLength;// Offset=0x18 Size=0x2
    wchar_t * wszState;// Offset=0x1a Size=0x4
    unsigned short wPostalCodeLength;// Offset=0x1e Size=0x2
    wchar_t * wszPostalCode;// Offset=0x20 Size=0x4
};

struct _FPO_DATA// Size=0x10 (Id=663)
{
    unsigned long ulOffStart;// Offset=0x0 Size=0x4
    unsigned long cbProcSize;// Offset=0x4 Size=0x4
    unsigned long cdwLocals;// Offset=0x8 Size=0x4
    unsigned short cdwParams;// Offset=0xc Size=0x2
    struct // Size=0x2 (Id=0)
    {
        unsigned short cbProlog:8;// Offset=0xe Size=0x2 BitOffset=0x8 BitSize=0x8
        unsigned short cbRegs:3;// Offset=0xe Size=0x2 BitOffset=0x5 BitSize=0x3
        unsigned short fHasSEH:1;// Offset=0xe Size=0x2 BitOffset=0x4 BitSize=0x1
        unsigned short fUseBP:1;// Offset=0xe Size=0x2 BitOffset=0x3 BitSize=0x1
        unsigned short reserved:1;// Offset=0xe Size=0x2 BitOffset=0x2 BitSize=0x1
        unsigned short cbFrame:2;// Offset=0xe Size=0x2 BitOffset=0x0 BitSize=0x2
    };
};

struct _D3DGAMMARAMP// Size=0x600 (Id=664)
{
    unsigned short red[256];// Offset=0x0 Size=0x200
    unsigned short green[256];// Offset=0x200 Size=0x200
    unsigned short blue[256];// Offset=0x400 Size=0x200
};

struct ID3DXAnimationController : public IUnknown// Size=0x4 (Id=665)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    unsigned int GetMaxNumAnimationOutputs();
    unsigned int GetMaxNumAnimationSets();
    unsigned int GetMaxNumTracks();
    unsigned int GetMaxNumEvents();
    HRESULT RegisterAnimationOutput(char * ,struct D3DXMATRIX * ,struct D3DXVECTOR3 * ,struct D3DXQUATERNION * ,struct D3DXVECTOR3 * );
    HRESULT RegisterAnimationSet(struct ID3DXAnimationSet * );
    HRESULT UnregisterAnimationSet(struct ID3DXAnimationSet * );
    unsigned int GetNumAnimationSets();
    HRESULT GetAnimationSet(unsigned int ,struct ID3DXAnimationSet ** );
    HRESULT AdvanceTime(float ,struct ID3DXAnimationCallbackHandler * );
    HRESULT ResetTime();
    float GetTime();
    HRESULT SetTrackAnimationSet(unsigned int ,struct ID3DXAnimationSet * );
    HRESULT GetTrackAnimationSet(unsigned int ,struct ID3DXAnimationSet ** );
    HRESULT SetTrackPriority(unsigned int ,enum _D3DXPRIORITY_TYPE );
    HRESULT SetTrackSpeed(unsigned int ,float );
    HRESULT SetTrackWeight(unsigned int ,float );
    HRESULT SetTrackPosition(unsigned int ,float );
    HRESULT SetTrackEnable(unsigned int ,int );
    HRESULT SetTrackDesc(unsigned int ,struct _D3DXTRACK_DESC * );
    HRESULT GetTrackDesc(unsigned int ,struct _D3DXTRACK_DESC * );
    HRESULT SetPriorityBlend(float );
    float GetPriorityBlend();
    unsigned long KeyTrackSpeed(unsigned int ,float ,float ,float ,enum _D3DXTRANSITION_TYPE );
    unsigned long KeyTrackWeight(unsigned int ,float ,float ,float ,enum _D3DXTRANSITION_TYPE );
    unsigned long KeyTrackPosition(unsigned int ,float ,float );
    unsigned long KeyTrackEnable(unsigned int ,int ,float );
    unsigned long KeyPriorityBlend(float ,float ,float ,enum _D3DXTRANSITION_TYPE );
    HRESULT UnkeyEvent(unsigned long );
    HRESULT UnkeyAllTrackEvents(unsigned int );
    HRESULT UnkeyAllPriorityBlends();
    unsigned long GetCurrentTrackEvent(unsigned int ,enum _D3DXEVENT_TYPE );
    unsigned long GetCurrentPriorityBlend();
    unsigned long GetUpcomingTrackEvent(unsigned int ,unsigned long );
    unsigned long GetUpcomingPriorityBlend(unsigned long );
    HRESULT ValidateEvent(unsigned long );
    HRESULT GetEventDesc(unsigned long ,struct _D3DXEVENT_DESC * );
    HRESULT CloneAnimationController(unsigned int ,unsigned int ,unsigned int ,unsigned int ,struct ID3DXAnimationController ** );
    void ID3DXAnimationController(struct ID3DXAnimationController & );
    void ID3DXAnimationController();
    struct ID3DXAnimationController & operator=(struct ID3DXAnimationController & );
};

struct ID3DXAnimationController : public IUnknown// Size=0x4 (Id=666)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    unsigned int GetMaxNumAnimationOutputs();
    unsigned int GetMaxNumAnimationSets();
    unsigned int GetMaxNumTracks();
    unsigned int GetMaxNumEvents();
    HRESULT RegisterAnimationOutput(char * ,struct D3DXMATRIX * ,struct D3DXVECTOR3 * ,struct D3DXQUATERNION * ,struct D3DXVECTOR3 * );
    HRESULT RegisterAnimationSet(struct ID3DXAnimationSet * );
    HRESULT UnregisterAnimationSet(struct ID3DXAnimationSet * );
    unsigned int GetNumAnimationSets();
    HRESULT GetAnimationSet(unsigned int ,struct ID3DXAnimationSet ** );
    HRESULT AdvanceTime(float ,struct ID3DXAnimationCallbackHandler * );
    HRESULT ResetTime();
    float GetTime();
    HRESULT SetTrackAnimationSet(unsigned int ,struct ID3DXAnimationSet * );
    HRESULT GetTrackAnimationSet(unsigned int ,struct ID3DXAnimationSet ** );
    HRESULT SetTrackPriority(unsigned int ,enum _D3DXPRIORITY_TYPE );
    HRESULT SetTrackSpeed(unsigned int ,float );
    HRESULT SetTrackWeight(unsigned int ,float );
    HRESULT SetTrackPosition(unsigned int ,float );
    HRESULT SetTrackEnable(unsigned int ,int );
    HRESULT SetTrackDesc(unsigned int ,struct _D3DXTRACK_DESC * );
    HRESULT GetTrackDesc(unsigned int ,struct _D3DXTRACK_DESC * );
    HRESULT SetPriorityBlend(float );
    float GetPriorityBlend();
    unsigned long KeyTrackSpeed(unsigned int ,float ,float ,float ,enum _D3DXTRANSITION_TYPE );
    unsigned long KeyTrackWeight(unsigned int ,float ,float ,float ,enum _D3DXTRANSITION_TYPE );
    unsigned long KeyTrackPosition(unsigned int ,float ,float );
    unsigned long KeyTrackEnable(unsigned int ,int ,float );
    unsigned long KeyPriorityBlend(float ,float ,float ,enum _D3DXTRANSITION_TYPE );
    HRESULT UnkeyEvent(unsigned long );
    HRESULT UnkeyAllTrackEvents(unsigned int );
    HRESULT UnkeyAllPriorityBlends();
    unsigned long GetCurrentTrackEvent(unsigned int ,enum _D3DXEVENT_TYPE );
    unsigned long GetCurrentPriorityBlend();
    unsigned long GetUpcomingTrackEvent(unsigned int ,unsigned long );
    unsigned long GetUpcomingPriorityBlend(unsigned long );
    HRESULT ValidateEvent(unsigned long );
    HRESULT GetEventDesc(unsigned long ,struct _D3DXEVENT_DESC * );
    HRESULT CloneAnimationController(unsigned int ,unsigned int ,unsigned int ,unsigned int ,struct ID3DXAnimationController ** );
    void ID3DXAnimationController(struct ID3DXAnimationController & );
    void ID3DXAnimationController();
    struct ID3DXAnimationController & operator=(struct ID3DXAnimationController & );
};

struct D3DVertexShader : public D3DResource// Size=0x18 (Id=667)
{
    HRESULT GetFunction(void * ,unsigned int * );
    HRESULT Bind(unsigned long ,struct D3DVertexDeclaration * ,unsigned long * ,struct D3DPixelShader * );
    int IsBound();
};

struct _XSESSION_VIEW_PROPERTIES// Size=0xc (Id=668)
{
    unsigned long dwViewId;// Offset=0x0 Size=0x4
    unsigned long dwNumProperties;// Offset=0x4 Size=0x4
    struct _XUSER_PROPERTY * pProperties;// Offset=0x8 Size=0x4
};

struct _XCOMPRESS_BLOCK_HEADER_LZXNATIVE// Size=0x4 (Id=669)
{
    unsigned long CompressedBlockSize;// Offset=0x0 Size=0x4
    unsigned char pCompressedData[0];
};

struct _RTL_CRITICAL_SECTION// Size=0x1c (Id=670)
{
    union // Size=0x10 (Id=0)
    {
        union <unnamed-type-Synchronization>// Size=0x10 (Id=14934)
        {
            unsigned long RawEvent[4];// Offset=0x0 Size=0x10
        };
        union _RTL_CRITICAL_SECTION::<unnamed-type-Synchronization> Synchronization;// Offset=0x0 Size=0x10
    };
    long LockCount;// Offset=0x10 Size=0x4
    long RecursionCount;// Offset=0x14 Size=0x4
    void * OwningThread;// Offset=0x18 Size=0x4
};

struct _D3DPSHADERCAPS2_0// Size=0x14 (Id=671)
{
    unsigned long Caps;// Offset=0x0 Size=0x4
    int DynamicFlowControlDepth;// Offset=0x4 Size=0x4
    int NumTemps;// Offset=0x8 Size=0x4
    int StaticFlowControlDepth;// Offset=0xc Size=0x4
    int NumInstructionSlots;// Offset=0x10 Size=0x4
};

union in_addr::<unnamed-type-S_un>// Size=0x4 (Id=672)
{
    struct <unnamed-type-S_un_b>// Size=0x4 (Id=14257)
    {
        unsigned char s_b1;// Offset=0x0 Size=0x1
        unsigned char s_b2;// Offset=0x1 Size=0x1
        unsigned char s_b3;// Offset=0x2 Size=0x1
        unsigned char s_b4;// Offset=0x3 Size=0x1
    };
    struct in_addr::<unnamed-type-S_un>::<unnamed-type-S_un_b> S_un_b;// Offset=0x0 Size=0x4
    struct <unnamed-type-S_un_w>// Size=0x4 (Id=14263)
    {
        unsigned short s_w1;// Offset=0x0 Size=0x2
        unsigned short s_w2;// Offset=0x2 Size=0x2
    };
    struct in_addr::<unnamed-type-S_un>::<unnamed-type-S_un_w> S_un_w;// Offset=0x0 Size=0x4
    unsigned long S_addr;// Offset=0x0 Size=0x4
};

struct in_addr::<unnamed-type-S_un>::<unnamed-type-S_un_w>// Size=0x4 (Id=673)
{
    unsigned short s_w1;// Offset=0x0 Size=0x2
    unsigned short s_w2;// Offset=0x2 Size=0x2
};

struct in_addr::<unnamed-type-S_un>::<unnamed-type-S_un_b>// Size=0x4 (Id=674)
{
    unsigned char s_b1;// Offset=0x0 Size=0x1
    unsigned char s_b2;// Offset=0x1 Size=0x1
    unsigned char s_b3;// Offset=0x2 Size=0x1
    unsigned char s_b4;// Offset=0x3 Size=0x1
};

union GPUFLOW_EXEC// Size=0x8 (Id=675)
{
    struct // Size=0x8 (Id=0)
    {
        unsigned long Address:12;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xc
        unsigned long Count:3;// Offset=0x0 Size=0x4 BitOffset=0xc BitSize=0x3
        unsigned long Yield:1;// Offset=0x0 Size=0x4 BitOffset=0xf BitSize=0x1
        unsigned long TypeAndSerialize:12;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0xc
        unsigned long VertexCacheLow:4;// Offset=0x0 Size=0x4 BitOffset=0x1c BitSize=0x4
        unsigned long VertexCacheHigh:2;// Offset=0x4 Size=0x4 BitOffset=0x0 BitSize=0x2
        unsigned long PredicateClean:1;// Offset=0x4 Size=0x4 BitOffset=0x9 BitSize=0x1
        unsigned long AbsoluteAddressing:1;// Offset=0x4 Size=0x4 BitOffset=0xb BitSize=0x1
        unsigned long Op:4;// Offset=0x4 Size=0x4 BitOffset=0xc BitSize=0x4
    };
};

struct _D3DLIGHT9// Size=0x68 (Id=676)
{
    enum _D3DLIGHTTYPE Type;// Offset=0x0 Size=0x4
    struct _D3DCOLORVALUE Diffuse;// Offset=0x4 Size=0x10
    struct _D3DCOLORVALUE Specular;// Offset=0x14 Size=0x10
    struct _D3DCOLORVALUE Ambient;// Offset=0x24 Size=0x10
    struct _D3DVECTOR Position;// Offset=0x34 Size=0xc
    struct _D3DVECTOR Direction;// Offset=0x40 Size=0xc
    float Range;// Offset=0x4c Size=0x4
    float Falloff;// Offset=0x50 Size=0x4
    float Attenuation0;// Offset=0x54 Size=0x4
    float Attenuation1;// Offset=0x58 Size=0x4
    float Attenuation2;// Offset=0x5c Size=0x4
    float Theta;// Offset=0x60 Size=0x4
    float Phi;// Offset=0x64 Size=0x4
};

struct _D3DBOX// Size=0x18 (Id=677)
{
    unsigned int Left;// Offset=0x0 Size=0x4
    unsigned int Top;// Offset=0x4 Size=0x4
    unsigned int Right;// Offset=0x8 Size=0x4
    unsigned int Bottom;// Offset=0xc Size=0x4
    unsigned int Front;// Offset=0x10 Size=0x4
    unsigned int Back;// Offset=0x14 Size=0x4
};

union GPUCOMMAND_INDIRECT_BUFFER// Size=0x8 (Id=678)
{
    struct // Size=0x8 (Id=0)
    {
        unsigned long Address:32;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x20
        unsigned long Size:20;// Offset=0x4 Size=0x4 BitOffset=0x0 BitSize=0x14
        unsigned long MultiPass:1;// Offset=0x4 Size=0x4 BitOffset=0x1f BitSize=0x1
    };
    unsigned long dword[2];// Offset=0x0 Size=0x8
};

struct _s__CatchableTypeArray// Size=0x4 (Id=679)
{
    int nCatchableTypes;// Offset=0x0 Size=0x4
    struct _s__CatchableType * arrayOfCatchableTypes[0];
};

struct _s__ThrowInfo// Size=0x10 (Id=680)
{
    unsigned int attributes;// Offset=0x0 Size=0x4
    void  ( * pmfnUnwind)();// Offset=0x4 Size=0x4
    int  ( * pForwardCompat)(<btNoType> );// Offset=0x8 Size=0x4
    struct _s__CatchableTypeArray * pCatchableTypeArray;// Offset=0xc Size=0x4
};

union GPU_CONST// Size=0x4 (Id=681)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long Base:9;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x9
        unsigned long Size:9;// Offset=0x0 Size=0x4 BitOffset=0xc BitSize=0x9
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

struct D3DVolumeTexture : public D3DBaseTexture// Size=0x34 (Id=682)
{
    HRESULT GetLevelDesc(unsigned int ,struct _D3DVOLUME_DESC * );
    HRESULT GetVolumeLevel(unsigned int ,struct D3DVolume ** );
    HRESULT LockBox(unsigned int ,struct _D3DLOCKED_BOX * ,struct _D3DBOX * ,unsigned long );
    HRESULT AsyncLockBox(unsigned long long ,unsigned int ,struct _D3DLOCKED_BOX * ,struct _D3DBOX * ,unsigned long );
    HRESULT UnlockBox(unsigned int );
    HRESULT LockTail(struct _D3DLOCKED_TAIL * ,unsigned long );
    HRESULT AsyncLockTail(unsigned long long ,struct _D3DLOCKED_TAIL * ,unsigned long );
    HRESULT UnlockTail();
};

struct GPU_VALUESPACKET// Size=0x54 (Id=683)
{
    unsigned long MaxVtxIndx;// Offset=0x0 Size=0x4
    unsigned long MinVtxIndx;// Offset=0x4 Size=0x4
    unsigned long IndxOffset;// Offset=0x8 Size=0x4
    unsigned long MultiPrimIbResetIndx;// Offset=0xc Size=0x4
    union GPU_COLORMASK ColorMask;// Offset=0x10 Size=0x4
    float BlendRed;// Offset=0x14 Size=0x4
    float BlendGreen;// Offset=0x18 Size=0x4
    float BlendBlue;// Offset=0x1c Size=0x4
    float BlendAlpha;// Offset=0x20 Size=0x4
    unsigned long Unused[3];// Offset=0x24 Size=0xc
    union GPU_STENCILREFMASK StencilRefMaskBF;// Offset=0x30 Size=0x4
    union GPU_STENCILREFMASK StencilRefMask;// Offset=0x34 Size=0x4
    float AlphaRef;// Offset=0x38 Size=0x4
    float VportXScale;// Offset=0x3c Size=0x4
    float VportXOffset;// Offset=0x40 Size=0x4
    float VportYScale;// Offset=0x44 Size=0x4
    float VportYOffset;// Offset=0x48 Size=0x4
    float VportZScale;// Offset=0x4c Size=0x4
    float VportZOffset;// Offset=0x50 Size=0x4
};

struct _XINPUT_KEYBOARDSTATE// Size=0x14 (Id=684)
{
    unsigned char bModifiers;// Offset=0x0 Size=0x1
    unsigned char bReserved;// Offset=0x1 Size=0x1
    unsigned char HidCodes[6];// Offset=0x2 Size=0x6
    unsigned short VKCodes[6];// Offset=0x8 Size=0xc
};

union GPUTEXTURE_FETCH_INSTRUCTION// Size=0xc (Id=685)
{
    struct // Size=0xc (Id=0)
    {
        unsigned long Op:5;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x5
        unsigned long SrcGPR:6;// Offset=0x0 Size=0x4 BitOffset=0x5 BitSize=0x6
        unsigned long SrcLoopIndexRelative:1;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x1
        unsigned long DestGPR:6;// Offset=0x0 Size=0x4 BitOffset=0xc BitSize=0x6
        unsigned long DestLoopIndexRelative:1;// Offset=0x0 Size=0x4 BitOffset=0x12 BitSize=0x1
        unsigned long FetchValidOnly:1;// Offset=0x0 Size=0x4 BitOffset=0x13 BitSize=0x1
        unsigned long ConstIndex:5;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0x5
        unsigned long UnnormalizedTextureCoords:1;// Offset=0x0 Size=0x4 BitOffset=0x19 BitSize=0x1
        unsigned long SrcSelectX:2;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x2
        unsigned long SrcSelectY:2;// Offset=0x0 Size=0x4 BitOffset=0x1c BitSize=0x2
        unsigned long SrcSelectZ:2;// Offset=0x0 Size=0x4 BitOffset=0x1e BitSize=0x2
        unsigned long SwizzleX:3;// Offset=0x4 Size=0x4 BitOffset=0x0 BitSize=0x3
        unsigned long SwizzleY:3;// Offset=0x4 Size=0x4 BitOffset=0x3 BitSize=0x3
        unsigned long SwizzleZ:3;// Offset=0x4 Size=0x4 BitOffset=0x6 BitSize=0x3
        unsigned long SwizzleW:3;// Offset=0x4 Size=0x4 BitOffset=0x9 BitSize=0x3
        unsigned long MagFilter:2;// Offset=0x4 Size=0x4 BitOffset=0xc BitSize=0x2
        unsigned long MinFilter:2;// Offset=0x4 Size=0x4 BitOffset=0xe BitSize=0x2
        unsigned long MipFilter:2;// Offset=0x4 Size=0x4 BitOffset=0x10 BitSize=0x2
        unsigned long AnisoFilter:3;// Offset=0x4 Size=0x4 BitOffset=0x12 BitSize=0x3
        unsigned long VolMagFilter:2;// Offset=0x4 Size=0x4 BitOffset=0x18 BitSize=0x2
        unsigned long VolMinFilter:2;// Offset=0x4 Size=0x4 BitOffset=0x1a BitSize=0x2
        unsigned long UseComputedLOD:1;// Offset=0x4 Size=0x4 BitOffset=0x1c BitSize=0x1
        unsigned long UseRegisterLOD:1;// Offset=0x4 Size=0x4 BitOffset=0x1d BitSize=0x1
        unsigned long Predicated:1;// Offset=0x4 Size=0x4 BitOffset=0x1f BitSize=0x1
        unsigned long UseRegisterGradients:1;// Offset=0x8 Size=0x4 BitOffset=0x0 BitSize=0x1
        int LODBias:7;// Offset=0x8 Size=0x4 BitOffset=0x2 BitSize=0x7
        unsigned long Dimension:2;// Offset=0x8 Size=0x4 BitOffset=0xe BitSize=0x2
        int OffsetX:5;// Offset=0x8 Size=0x4 BitOffset=0x10 BitSize=0x5
        int OffsetY:5;// Offset=0x8 Size=0x4 BitOffset=0x15 BitSize=0x5
        int OffsetZ:5;// Offset=0x8 Size=0x4 BitOffset=0x1a BitSize=0x5
        unsigned long PredicationCondition:1;// Offset=0x8 Size=0x4 BitOffset=0x1f BitSize=0x1
    };
    unsigned long dword[3];// Offset=0x0 Size=0xc
};

struct _complex// Size=0x10 (Id=686)
{
    float x;// Offset=0x0 Size=0x8
    float y;// Offset=0x8 Size=0x8
};

struct _SYSTEM_AUDIT_ACE// Size=0xc (Id=687)
{
    struct _ACE_HEADER Header;// Offset=0x0 Size=0x4
    unsigned long Mask;// Offset=0x4 Size=0x4
    unsigned long SidStart;// Offset=0x8 Size=0x4
};

union GPUCOMMAND_WAIT_FOR_IDLE// Size=0x4 (Id=688)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long Unused:32;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x20
    };
    unsigned long dword[1];// Offset=0x0 Size=0x4
};

struct _D3DVBLANKDATA// Size=0xc (Id=689)
{
    unsigned long VBlank;// Offset=0x0 Size=0x4
    unsigned long Swap;// Offset=0x4 Size=0x4
    unsigned long Flags;// Offset=0x8 Size=0x4
};

struct HACCEL__// Size=0x4 (Id=690)
{
    int unused;// Offset=0x0 Size=0x4
};

struct _XMUHENDN3// Size=0x4 (Id=691)
{
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            unsigned int x:11;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xb
            unsigned int y:11;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0xb
            unsigned int z:10;// Offset=0x0 Size=0x4 BitOffset=0x16 BitSize=0xa
        };
        unsigned int v;// Offset=0x0 Size=0x4
    };
    void _XMUHENDN3(float * );
    void _XMUHENDN3(float ,float ,float );
    void _XMUHENDN3(unsigned int );
    void _XMUHENDN3();
    unsigned int operator unsigned int();
    struct _XMUHENDN3 & operator=(const unsigned int );
    struct _XMUHENDN3 & operator=(struct _XMUHENDN3 & );
};

struct _XMUHENDN3// Size=0x4 (Id=692)
{
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            unsigned int x:11;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xb
            unsigned int y:11;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0xb
            unsigned int z:10;// Offset=0x0 Size=0x4 BitOffset=0x16 BitSize=0xa
        };
        unsigned int v;// Offset=0x0 Size=0x4
    };
    void _XMUHENDN3(float * );
    void _XMUHENDN3(float ,float ,float );
    void _XMUHENDN3(unsigned int );
    void _XMUHENDN3();
    unsigned int operator unsigned int();
    struct _XMUHENDN3 & operator=(const unsigned int );
    struct _XMUHENDN3 & operator=(struct _XMUHENDN3 & );
};

struct _exception// Size=0x20 (Id=693)
{
    int type;// Offset=0x0 Size=0x4
    char * name;// Offset=0x4 Size=0x4
    float arg1;// Offset=0x8 Size=0x8
    float arg2;// Offset=0x10 Size=0x8
    float retval;// Offset=0x18 Size=0x8
};

struct GPUFLOW_CONSTANTS// Size=0xa0 (Id=694)
{
    union // Size=0xa0 (Id=0)
    {
        unsigned long FlowConstant[40];// Offset=0x0 Size=0xa0
        unsigned long BooleanConstant[8];// Offset=0x0 Size=0x20
        unsigned long IntegerConstant[32];// Offset=0x20 Size=0x80
    };
};

struct D3DCubeTexture : public D3DBaseTexture// Size=0x34 (Id=695)
{
    HRESULT GetLevelDesc(unsigned int ,struct _D3DSURFACE_DESC * );
    HRESULT GetCubeMapSurface(enum _D3DCUBEMAP_FACES ,unsigned int ,struct D3DSurface ** );
    HRESULT LockRect(enum _D3DCUBEMAP_FACES ,unsigned int ,struct _D3DLOCKED_RECT * ,struct tagRECT * ,unsigned long );
    HRESULT AsyncLockRect(unsigned long long ,enum _D3DCUBEMAP_FACES ,unsigned int ,struct _D3DLOCKED_RECT * ,struct tagRECT * ,unsigned long );
    HRESULT UnlockRect(enum _D3DCUBEMAP_FACES ,unsigned int );
    HRESULT LockTail(enum _D3DCUBEMAP_FACES ,struct _D3DLOCKED_TAIL * ,unsigned long );
    HRESULT AsyncLockTail(unsigned long long ,enum _D3DCUBEMAP_FACES ,struct _D3DLOCKED_TAIL * ,unsigned long );
    HRESULT UnlockTail(enum _D3DCUBEMAP_FACES );
};

union GPU_DEBUGMISC0// Size=0x4 (Id=696)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long DbProgOn:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long DbProbBreak:1;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x1
        unsigned long DbProbAddr:11;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0xb
        unsigned long DbProbCount:8;// Offset=0x0 Size=0x4 BitOffset=0x18 BitSize=0x8
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

struct threadlocaleinfostruct::<unnamed-type-lc_category>// Size=0x10 (Id=697)
{
    char * locale;// Offset=0x0 Size=0x4
    wchar_t * wlocale;// Offset=0x4 Size=0x4
    int * refcount;// Offset=0x8 Size=0x4
    int * wrefcount;// Offset=0xc Size=0x4
};

struct XMVECTORI32// Size=0x10 (Id=698)
{
    union // Size=0x10 (Id=0)
    {
        int i[4];// Offset=0x0 Size=0x10
        struct __vector4 v;// Offset=0x0 Size=0x10
    };
    struct __vector4 operator struct __vector4();
};

struct XMVECTORI32// Size=0x10 (Id=699)
{
    union // Size=0x10 (Id=0)
    {
        int i[4];// Offset=0x0 Size=0x10
        struct __vector4 v;// Offset=0x0 Size=0x10
    };
    struct __vector4 operator struct __vector4();
};

struct _SYSTEM_AUDIT_OBJECT_ACE// Size=0x30 (Id=700)
{
    struct _ACE_HEADER Header;// Offset=0x0 Size=0x4
    unsigned long Mask;// Offset=0x4 Size=0x4
    unsigned long Flags;// Offset=0x8 Size=0x4
    struct _GUID ObjectType;// Offset=0xc Size=0x10
    struct _GUID InheritedObjectType;// Offset=0x1c Size=0x10
    unsigned long SidStart;// Offset=0x2c Size=0x4
};

struct _D3DRASTER_STATUS// Size=0x8 (Id=701)
{
    int InVBlank;// Offset=0x0 Size=0x4
    unsigned int ScanLine;// Offset=0x4 Size=0x4
};

union _SLIST_HEADER// Size=0x8 (Id=702)
{
    unsigned long long Alignment;// Offset=0x0 Size=0x8
    struct _SINGLE_LIST_ENTRY Next;// Offset=0x0 Size=0x4
    unsigned short Depth;// Offset=0x4 Size=0x2
    unsigned short Sequence;// Offset=0x6 Size=0x2
};

struct __vc_attributes::immediatebindAttribute// Size=0x1 (Id=703)
{
    void immediatebindAttribute();
};

struct __vc_attributes::inAttribute// Size=0x1 (Id=704)
{
    void inAttribute();
};

struct __vc_attributes::publicAttribute// Size=0x1 (Id=705)
{
    void publicAttribute();
};

struct __vc_attributes::size_isAttribute// Size=0x4 (Id=706)
{
    void size_isAttribute(char * );
    char * expression;// Offset=0x0 Size=0x4
};

struct __vc_attributes::exportAttribute// Size=0x1 (Id=707)
{
    void exportAttribute();
};

struct __vc_attributes::controlAttribute// Size=0x1 (Id=708)
{
    void controlAttribute();
};

struct __vc_attributes::helpstringcontextAttribute// Size=0x4 (Id=709)
{
    void helpstringcontextAttribute(int );
    int contextid;// Offset=0x0 Size=0x4
};

struct __vc_attributes::rangeAttribute// Size=0x8 (Id=710)
{
    void rangeAttribute(int ,int );
    int low_val;// Offset=0x0 Size=0x4
    int high_val;// Offset=0x4 Size=0x4
};

struct __vc_attributes::displaybindAttribute// Size=0x1 (Id=711)
{
    void displaybindAttribute();
};

struct __vc_attributes::hookAttribute// Size=0x10 (Id=712)
{
    void hookAttribute(char * ,char * ,char * ,char * );
    void hookAttribute(char * ,char * ,char * );
    void hookAttribute(char * ,char * );
    void hookAttribute();
    char * event;// Offset=0x0 Size=0x4
    char * source;// Offset=0x4 Size=0x4
    char * handler;// Offset=0x8 Size=0x4
    char * receiver;// Offset=0xc Size=0x4
};

struct __vc_attributes::uidefaultAttribute// Size=0x1 (Id=713)
{
    void uidefaultAttribute();
};

struct __vc_attributes::defaultbindAttribute// Size=0x1 (Id=714)
{
    void defaultbindAttribute();
};

struct __vc_attributes::outAttribute// Size=0x1 (Id=715)
{
    void outAttribute();
};

struct __vc_attributes::defaultvalueAttribute// Size=0x4 (Id=716)
{
    void defaultvalueAttribute(char * );
    char * value;// Offset=0x0 Size=0x4
};

struct __vc_attributes::pointer_defaultAttribute// Size=0x4 (Id=717)
{
    enum type_e
    {
        ptr=0,
        ref=1,
        unique=2
    };
    void pointer_defaultAttribute(enum __vc_attributes::pointer_defaultAttribute::type_e );
    enum __vc_attributes::pointer_defaultAttribute::type_e type;// Offset=0x0 Size=0x4
};

enum __vc_attributes::pointer_defaultAttribute::type_e
{
    ptr=0,
    ref=1,
    unique=2
};

struct __vc_attributes::uuidAttribute// Size=0x4 (Id=719)
{
    void uuidAttribute(char * );
    char * value;// Offset=0x0 Size=0x4
};

struct __vc_attributes::threadingAttribute// Size=0x4 (Id=720)
{
    enum threading_e
    {
        apartment=1,
        single=2,
        free=3,
        neutral=4,
        both=5
    };
    void threadingAttribute(enum __vc_attributes::threadingAttribute::threading_e );
    void threadingAttribute();
    enum __vc_attributes::threadingAttribute::threading_e value;// Offset=0x0 Size=0x4
};

enum __vc_attributes::threadingAttribute::threading_e
{
    apartment=1,
    single=2,
    free=3,
    neutral=4,
    both=5
};

struct __vc_attributes::localAttribute// Size=0x1 (Id=722)
{
    void localAttribute();
};

struct __vc_attributes::idAttribute// Size=0x4 (Id=723)
{
    void idAttribute(int );
    int id_num;// Offset=0x0 Size=0x4
};

struct __vc_attributes::nonbrowsableAttribute// Size=0x1 (Id=724)
{
    void nonbrowsableAttribute();
};

struct __vc_attributes::importlibAttribute// Size=0x4 (Id=725)
{
    void importlibAttribute(char * );
    char * tlb_file;// Offset=0x0 Size=0x4
};

struct __vc_attributes::call_asAttribute// Size=0x4 (Id=726)
{
    void call_asAttribute(void * );
    void * local_proc;// Offset=0x0 Size=0x4
};

struct __vc_attributes::dispinterfaceAttribute// Size=0x1 (Id=727)
{
    void dispinterfaceAttribute();
};

struct __vc_attributes::dualAttribute// Size=0x1 (Id=728)
{
    void dualAttribute();
};

struct __vc_attributes::switch_typeAttribute// Size=0x4 (Id=729)
{
    void switch_typeAttribute(char * );
    char * switch_type_specifier;// Offset=0x0 Size=0x4
};

struct __vc_attributes::idl_moduleAttribute// Size=0x20 (Id=730)
{
    void idl_moduleAttribute(char * ,char * ,char * ,char * ,char * ,int ,int ,bool ,bool );
    void idl_moduleAttribute();
    char * name;// Offset=0x0 Size=0x4
    char * dllname;// Offset=0x4 Size=0x4
    char * version;// Offset=0x8 Size=0x4
    char * uuid;// Offset=0xc Size=0x4
    char * helpstring;// Offset=0x10 Size=0x4
    int helpstringcontext;// Offset=0x14 Size=0x4
    int helpcontext;// Offset=0x18 Size=0x4
    bool hidden;// Offset=0x1c Size=0x1
    bool restricted;// Offset=0x1d Size=0x1
};

struct __vc_attributes::coclassAttribute// Size=0x1 (Id=731)
{
    void coclassAttribute();
};

struct __vc_attributes::defaultAttribute// Size=0x4 (Id=732)
{
    void defaultAttribute(char * );
    void defaultAttribute();
    char * value;// Offset=0x0 Size=0x4
};

struct __vc_attributes::requesteditAttribute// Size=0x1 (Id=733)
{
    void requesteditAttribute();
};

struct __vc_attributes::providerAttribute// Size=0xc (Id=734)
{
    void providerAttribute(char * ,char * ,int );
    void providerAttribute();
    char * name;// Offset=0x0 Size=0x4
    char * uuid;// Offset=0x4 Size=0x4
    int cookies;// Offset=0x8 Size=0x4
};

struct __vc_attributes::max_isAttribute// Size=0x4 (Id=735)
{
    void max_isAttribute(char * );
    char * expression;// Offset=0x0 Size=0x4
};

struct __vc_attributes::importAttribute// Size=0x4 (Id=736)
{
    void importAttribute(char * );
    char * idl_file;// Offset=0x0 Size=0x4
};

struct __vc_attributes::satypeAttribute// Size=0x4 (Id=737)
{
    void satypeAttribute(char * );
    void satypeAttribute();
    char * type;// Offset=0x0 Size=0x4
};

struct __vc_attributes::propgetAttribute// Size=0x1 (Id=738)
{
    void propgetAttribute();
};

struct __vc_attributes::propputAttribute// Size=0x1 (Id=739)
{
    void propputAttribute();
};

struct __vc_attributes::event_receiverAttribute// Size=0x8 (Id=740)
{
    enum type_e
    {
        native=0,
        com=1,
        managed=2
    };
    void event_receiverAttribute(enum __vc_attributes::event_receiverAttribute::type_e ,bool );
    void event_receiverAttribute(enum __vc_attributes::event_receiverAttribute::type_e );
    void event_receiverAttribute();
    enum __vc_attributes::event_receiverAttribute::type_e type;// Offset=0x0 Size=0x4
    bool layout_dependent;// Offset=0x4 Size=0x1
};

enum __vc_attributes::event_receiverAttribute::type_e
{
    native=0,
    com=1,
    managed=2
};

struct __vc_attributes::async_uuidAttribute// Size=0x4 (Id=742)
{
    void async_uuidAttribute(char * );
    char * uuid;// Offset=0x0 Size=0x4
};

struct __vc_attributes::idl_quoteAttribute// Size=0x4 (Id=743)
{
    void idl_quoteAttribute(char * );
    void idl_quoteAttribute();
    char * text;// Offset=0x0 Size=0x4
};

struct __vc_attributes::usesgetlasterrorAttribute// Size=0x1 (Id=744)
{
    void usesgetlasterrorAttribute();
};

struct __vc_attributes::unhookAttribute// Size=0x10 (Id=745)
{
    void unhookAttribute(char * ,char * ,char * ,char * );
    void unhookAttribute(char * ,char * ,char * );
    void unhookAttribute(char * ,char * );
    void unhookAttribute();
    char * event;// Offset=0x0 Size=0x4
    char * source;// Offset=0x4 Size=0x4
    char * handler;// Offset=0x8 Size=0x4
    char * receiver;// Offset=0xc Size=0x4
};

struct __vc_attributes::nonextensibleAttribute// Size=0x1 (Id=746)
{
    void nonextensibleAttribute();
};

struct __vc_attributes::objectAttribute// Size=0x1 (Id=747)
{
    void objectAttribute();
};

struct __vc_attributes::aggregatableAttribute// Size=0x4 (Id=748)
{
    enum type_e
    {
        never=0,
        allowed=1,
        always=2
    };
    void aggregatableAttribute(enum __vc_attributes::aggregatableAttribute::type_e );
    void aggregatableAttribute();
    enum __vc_attributes::aggregatableAttribute::type_e type;// Offset=0x0 Size=0x4
};

enum __vc_attributes::aggregatableAttribute::type_e
{
    never=0,
    allowed=1,
    always=2
};

struct __vc_attributes::iid_isAttribute// Size=0x4 (Id=750)
{
    void iid_isAttribute(char * );
    char * limited_expression;// Offset=0x0 Size=0x4
};

struct __vc_attributes::progidAttribute// Size=0x4 (Id=751)
{
    void progidAttribute(char * );
    char * name;// Offset=0x0 Size=0x4
};

struct __vc_attributes::readonlyAttribute// Size=0x1 (Id=752)
{
    void readonlyAttribute();
};

struct __vc_attributes::wire_marshalAttribute// Size=0x4 (Id=753)
{
    void wire_marshalAttribute(char * );
    char * wire_type;// Offset=0x0 Size=0x4
};

struct __vc_attributes::pragmaAttribute// Size=0x4 (Id=754)
{
    void pragmaAttribute(char * );
    char * token_sequence;// Offset=0x0 Size=0x4
};

struct __vc_attributes::propputrefAttribute// Size=0x1 (Id=755)
{
    void propputrefAttribute();
};

struct __vc_attributes::vi_progidAttribute// Size=0x4 (Id=756)
{
    void vi_progidAttribute(char * );
    char * value;// Offset=0x0 Size=0x4
};

struct __vc_attributes::odlAttribute// Size=0x1 (Id=757)
{
    void odlAttribute();
};

struct __vc_attributes::bindableAttribute// Size=0x1 (Id=758)
{
    void bindableAttribute();
};

struct __vc_attributes::oleautomationAttribute// Size=0x1 (Id=759)
{
    void oleautomationAttribute();
};

struct __vc_attributes::helpstringdllAttribute// Size=0x4 (Id=760)
{
    void helpstringdllAttribute(char * );
    char * dllname;// Offset=0x0 Size=0x4
};

struct __vc_attributes::defaultcollelemAttribute// Size=0x1 (Id=761)
{
    void defaultcollelemAttribute();
};

struct __vc_attributes::retvalAttribute// Size=0x1 (Id=762)
{
    void retvalAttribute();
};

struct __vc_attributes::length_isAttribute// Size=0x4 (Id=763)
{
    void length_isAttribute(char * );
    char * expression;// Offset=0x0 Size=0x4
};

struct __vc_attributes::atl::db_commandAttribute// Size=0x18 (Id=764)
{
    void db_commandAttribute(wchar_t * ,wchar_t * ,wchar_t * ,wchar_t * ,wchar_t * ,wchar_t * );
    void db_commandAttribute(wchar_t * );
    void db_commandAttribute(char * ,char * ,char * ,char * ,char * ,char * );
    void db_commandAttribute(char * );
    void db_commandAttribute();
    char * command;// Offset=0x0 Size=0x4
    char * name;// Offset=0x4 Size=0x4
    char * source_name;// Offset=0x8 Size=0x4
    char * hresult;// Offset=0xc Size=0x4
    char * bindings;// Offset=0x10 Size=0x4
    char * bulk_fetch;// Offset=0x14 Size=0x4
};

struct __vc_attributes::atl::db_sourceAttribute// Size=0xc (Id=765)
{
    void db_sourceAttribute(wchar_t * ,wchar_t * ,wchar_t * );
    void db_sourceAttribute(wchar_t * );
    void db_sourceAttribute(char * ,char * ,char * );
    void db_sourceAttribute(char * );
    void db_sourceAttribute();
    char * source;// Offset=0x0 Size=0x4
    char * name;// Offset=0x4 Size=0x4
    char * hresult;// Offset=0x8 Size=0x4
};

struct __vc_attributes::atl::db_columnAttribute// Size=0x18 (Id=766)
{
    void db_columnAttribute(char * ,char * ,char * ,char * ,char * ,char * );
    void db_columnAttribute(char * );
    void db_columnAttribute();
    char * ordinal;// Offset=0x0 Size=0x4
    char * dbtype;// Offset=0x4 Size=0x4
    char * precision;// Offset=0x8 Size=0x4
    char * scale;// Offset=0xc Size=0x4
    char * status;// Offset=0x10 Size=0x4
    char * length;// Offset=0x14 Size=0x4
};

struct __vc_attributes::atl::soap_namespaceAttribute// Size=0x4 (Id=767)
{
    void soap_namespaceAttribute(char * );
    void soap_namespaceAttribute();
    char * value;// Offset=0x0 Size=0x4
};

struct __vc_attributes::atl::db_tableAttribute// Size=0x14 (Id=768)
{
    void db_tableAttribute(wchar_t * ,wchar_t * ,wchar_t * ,wchar_t * ,wchar_t * );
    void db_tableAttribute(wchar_t * );
    void db_tableAttribute(char * ,char * ,char * ,char * ,char * );
    void db_tableAttribute(char * );
    void db_tableAttribute();
    char * table;// Offset=0x0 Size=0x4
    char * name;// Offset=0x4 Size=0x4
    char * source_name;// Offset=0x8 Size=0x4
    char * hresult;// Offset=0xc Size=0x4
    char * bulk_fetch;// Offset=0x10 Size=0x4
};

struct __vc_attributes::atl::implements_categoryAttribute// Size=0x4 (Id=769)
{
    void implements_categoryAttribute(char * );
    char * value;// Offset=0x0 Size=0x4
};

struct __vc_attributes::atl::aggregatesAttribute// Size=0x4 (Id=770)
{
    void aggregatesAttribute(char * );
    void aggregatesAttribute();
    char * clsid;// Offset=0x0 Size=0x4
};

struct __vc_attributes::atl::soap_headerAttribute// Size=0x8 (Id=771)
{
    void soap_headerAttribute(char * ,bool ,bool ,bool );
    void soap_headerAttribute(char * );
    void soap_headerAttribute();
    char * value;// Offset=0x0 Size=0x4
    bool required;// Offset=0x4 Size=0x1
    bool in;// Offset=0x5 Size=0x1
    bool out;// Offset=0x6 Size=0x1
};

struct __vc_attributes::atl::requires_categoryAttribute// Size=0x4 (Id=772)
{
    void requires_categoryAttribute(char * );
    char * value;// Offset=0x0 Size=0x4
};

struct __vc_attributes::atl::perf_objectAttribute// Size=0x20 (Id=773)
{
    void perf_objectAttribute(int ,int ,char * ,char * ,int ,bool ,char * ,int );
    void perf_objectAttribute();
    int name_res;// Offset=0x0 Size=0x4
    int help_res;// Offset=0x4 Size=0x4
    char * namestring;// Offset=0x8 Size=0x4
    char * helpstring;// Offset=0xc Size=0x4
    int detail;// Offset=0x10 Size=0x4
    bool no_instances;// Offset=0x14 Size=0x1
    unsigned char __align0[3];// Offset=0x15 Size=0x3
    char * class_;// Offset=0x18 Size=0x4
    int maxinstnamelen;// Offset=0x1c Size=0x4
};

struct __vc_attributes::atl::rdxAttribute// Size=0xc (Id=774)
{
    void rdxAttribute(char * ,char * ,char * );
    void rdxAttribute(char * ,char * );
    void rdxAttribute();
    char * key;// Offset=0x0 Size=0x4
    char * valuename;// Offset=0x4 Size=0x4
    char * regtype;// Offset=0x8 Size=0x4
};

struct __vc_attributes::atl::perfmonAttribute// Size=0x8 (Id=775)
{
    void perfmonAttribute(char * ,bool );
    void perfmonAttribute(char * );
    void perfmonAttribute();
    char * name;// Offset=0x0 Size=0x4
    bool register;// Offset=0x4 Size=0x1
};

struct __vc_attributes::atl::db_accessorAttribute// Size=0x8 (Id=776)
{
    void db_accessorAttribute(int ,bool );
    void db_accessorAttribute();
    int id;// Offset=0x0 Size=0x4
    bool auto_;// Offset=0x4 Size=0x1
};

struct __vc_attributes::atl::soap_handlerAttribute// Size=0x14 (Id=777)
{
    void soap_handlerAttribute(char * ,char * ,char * ,char * ,char * );
    void soap_handlerAttribute();
    char * name;// Offset=0x0 Size=0x4
    char * namespace;// Offset=0x4 Size=0x4
    char * protocol;// Offset=0x8 Size=0x4
    char * style;// Offset=0xc Size=0x4
    char * use;// Offset=0x10 Size=0x4
};

struct __vc_attributes::atl::support_error_infoAttribute// Size=0x4 (Id=778)
{
    void support_error_infoAttribute(char * );
    char * error_interface;// Offset=0x0 Size=0x4
};

struct __vc_attributes::atl::tag_nameAttribute// Size=0x8 (Id=779)
{
    void tag_nameAttribute(char * ,char * );
    void tag_nameAttribute(char * );
    void tag_nameAttribute();
    char * name;// Offset=0x0 Size=0x4
    char * parse_func;// Offset=0x4 Size=0x4
};

struct __vc_attributes::atl::com_interface_entryAttribute// Size=0x4 (Id=780)
{
    void com_interface_entryAttribute(char * );
    void com_interface_entryAttribute();
    char * value;// Offset=0x0 Size=0x4
};

struct __vc_attributes::atl::db_paramAttribute// Size=0x1c (Id=781)
{
    void db_paramAttribute(char * ,char * ,char * ,char * ,char * ,char * ,char * );
    void db_paramAttribute(char * );
    void db_paramAttribute();
    char * ordinal;// Offset=0x0 Size=0x4
    char * paramtype;// Offset=0x4 Size=0x4
    char * dbtype;// Offset=0x8 Size=0x4
    char * precision;// Offset=0xc Size=0x4
    char * scale;// Offset=0x10 Size=0x4
    char * status;// Offset=0x14 Size=0x4
    char * length;// Offset=0x18 Size=0x4
};

struct __vc_attributes::atl::perf_counterAttribute// Size=0x28 (Id=782)
{
    void perf_counterAttribute(char * ,char * ,int ,int ,int ,int ,bool ,int ,int ,char * );
    void perf_counterAttribute();
    char * namestring;// Offset=0x0 Size=0x4
    char * helpstring;// Offset=0x4 Size=0x4
    int name_res;// Offset=0x8 Size=0x4
    int help_res;// Offset=0xc Size=0x4
    int countertype;// Offset=0x10 Size=0x4
    int defscale;// Offset=0x14 Size=0x4
    bool default_counter;// Offset=0x18 Size=0x1
    unsigned char __align0[3];// Offset=0x19 Size=0x3
    int detail;// Offset=0x1c Size=0x4
    int max_counter_size;// Offset=0x20 Size=0x4
    char * countertype_string;// Offset=0x24 Size=0x4
};

struct __vc_attributes::atl::soap_methodAttribute// Size=0x4 (Id=783)
{
    void soap_methodAttribute(char * );
    void soap_methodAttribute();
    char * name;// Offset=0x0 Size=0x4
};

struct __vc_attributes::atl::request_handlerAttribute// Size=0x8 (Id=784)
{
    void request_handlerAttribute(char * ,char * );
    void request_handlerAttribute(char * );
    void request_handlerAttribute();
    char * name;// Offset=0x0 Size=0x4
    char * sdl;// Offset=0x4 Size=0x4
};

struct __vc_attributes::atl::synchronizeAttribute// Size=0x1 (Id=785)
{
    void synchronizeAttribute();
};

struct __vc_attributes::atl::registration_scriptAttribute// Size=0x4 (Id=786)
{
    void registration_scriptAttribute(char * );
    void registration_scriptAttribute();
    char * script;// Offset=0x0 Size=0x4
};

struct __vc_attributes::no_injected_textAttribute// Size=0x1 (Id=787)
{
    void no_injected_textAttribute(bool );
    void no_injected_textAttribute();
    bool value;// Offset=0x0 Size=0x1
};

struct __vc_attributes::caseAttribute// Size=0x4 (Id=788)
{
    void caseAttribute(int );
    int value;// Offset=0x0 Size=0x4
};

struct __vc_attributes::helpstringAttribute// Size=0x4 (Id=789)
{
    void helpstringAttribute(char * );
    char * help_text_string;// Offset=0x0 Size=0x4
};

struct __vc_attributes::entryAttribute// Size=0x4 (Id=790)
{
    void entryAttribute(char * );
    char * entry_id;// Offset=0x0 Size=0x4
};

struct __vc_attributes::defaultvtableAttribute// Size=0x4 (Id=791)
{
    void defaultvtableAttribute(char * );
    char * value;// Offset=0x0 Size=0x4
};

struct __vc_attributes::emitidlAttribute// Size=0x8 (Id=792)
{
    union // Size=0x4 (Id=0)
    {
        const int restricted;// Offset=0x0 Size=0x4
        const int forced;// Offset=0x0 Size=0x4
        const int push;// Offset=0x0 Size=0x4
        const int pop;// Offset=0x0 Size=0x4
        void emitidlAttribute(int ,bool );
        void emitidlAttribute(int );
        void emitidlAttribute();
        int value;// Offset=0x0 Size=0x4
    };
    bool defaultimports;// Offset=0x4 Size=0x1
};

struct __vc_attributes::stringAttribute// Size=0x1 (Id=793)
{
    void stringAttribute();
};

struct __vc_attributes::varargAttribute// Size=0x1 (Id=794)
{
    void varargAttribute();
};

struct __vc_attributes::event_sourceAttribute// Size=0xc (Id=795)
{
    enum type_e
    {
        native=0,
        com=1,
        managed=2
    };
    enum optimize_e
    {
        speed=0,
        size=1
    };
    void event_sourceAttribute(enum __vc_attributes::event_sourceAttribute::type_e );
    void event_sourceAttribute();
    enum __vc_attributes::event_sourceAttribute::type_e type;// Offset=0x0 Size=0x4
    enum __vc_attributes::event_sourceAttribute::optimize_e optimize;// Offset=0x4 Size=0x4
    bool decorate;// Offset=0x8 Size=0x1
};

enum __vc_attributes::event_sourceAttribute::optimize_e
{
    speed=0,
    size=1
};

enum __vc_attributes::event_sourceAttribute::type_e
{
    native=0,
    com=1,
    managed=2
};

struct __vc_attributes::includeAttribute// Size=0x4 (Id=798)
{
    void includeAttribute(char * );
    char * include_file;// Offset=0x0 Size=0x4
};

struct __vc_attributes::implementsAttribute// Size=0x8 (Id=799)
{
    void implementsAttribute(char * );
    void implementsAttribute();
    char * interfaces;// Offset=0x0 Size=0x4
    char * dispinterfaces;// Offset=0x4 Size=0x4
};

struct __vc_attributes::moduleAttribute// Size=0x38 (Id=800)
{
    enum type_e
    {
        dll=1,
        exe=2,
        service=3,
        unspecified=4,
        EXE=2,
        SERVICE=3
    };
    void moduleAttribute(enum __vc_attributes::moduleAttribute::type_e ,char * ,char * ,char * ,int ,bool ,char * ,int ,char * ,char * ,int ,bool ,bool ,char * ,char * );
    void moduleAttribute(enum __vc_attributes::moduleAttribute::type_e );
    void moduleAttribute();
    enum __vc_attributes::moduleAttribute::type_e type;// Offset=0x0 Size=0x4
    char * name;// Offset=0x4 Size=0x4
    char * version;// Offset=0x8 Size=0x4
    char * uuid;// Offset=0xc Size=0x4
    int lcid;// Offset=0x10 Size=0x4
    bool control;// Offset=0x14 Size=0x1
    unsigned char __align0[3];// Offset=0x15 Size=0x3
    char * helpstring;// Offset=0x18 Size=0x4
    int helpstringcontext;// Offset=0x1c Size=0x4
    char * helpstringdll;// Offset=0x20 Size=0x4
    char * helpfile;// Offset=0x24 Size=0x4
    int helpcontext;// Offset=0x28 Size=0x4
    bool hidden;// Offset=0x2c Size=0x1
    bool restricted;// Offset=0x2d Size=0x1
    unsigned char __align1[2];// Offset=0x2e Size=0x2
    char * custom;// Offset=0x30 Size=0x4
    char * resource_name;// Offset=0x34 Size=0x4
};

enum __vc_attributes::moduleAttribute::type_e
{
    dll=1,
    exe=2,
    service=3,
    unspecified=4,
    EXE=2,
    SERVICE=3
};

struct __vc_attributes::last_isAttribute// Size=0x4 (Id=802)
{
    void last_isAttribute(char * );
    char * expression;// Offset=0x0 Size=0x4
};

struct __vc_attributes::ptrAttribute// Size=0x1 (Id=803)
{
    void ptrAttribute();
};

struct __vc_attributes::helper_attributes::v1_earlyAttribute// Size=0x1 (Id=804)
{
    void v1_earlyAttribute();
};

struct __vc_attributes::helper_attributes::source_annotation_attributeAttribute// Size=0x8 (Id=805)
{
    union // Size=0x4 (Id=0)
    {
        const int All;// Offset=0x0 Size=0x4
        const int Assembly;// Offset=0x0 Size=0x4
        const int Class;// Offset=0x0 Size=0x4
        const int Constructor;// Offset=0x0 Size=0x4
        const int Delegate;// Offset=0x0 Size=0x4
        const int Enum;// Offset=0x0 Size=0x4
        const int Event;// Offset=0x0 Size=0x4
        const int Field;// Offset=0x0 Size=0x4
        const int GenericParameter;// Offset=0x0 Size=0x4
        const int Interface;// Offset=0x0 Size=0x4
        const int Method;// Offset=0x0 Size=0x4
        const int Module;// Offset=0x0 Size=0x4
        const int Parameter;// Offset=0x0 Size=0x4
        const int Property;// Offset=0x0 Size=0x4
        const int ReturnValue;// Offset=0x0 Size=0x4
        const int Struct;// Offset=0x0 Size=0x4
        void source_annotation_attributeAttribute(int );
        void source_annotation_attributeAttribute();
        int ValidOn;// Offset=0x0 Size=0x4
    };
    bool AllowMultiple;// Offset=0x4 Size=0x1
};

struct __vc_attributes::helper_attributes::requires_valueAttribute// Size=0x1 (Id=806)
{
    void requires_valueAttribute();
};

struct __vc_attributes::helper_attributes::as_stringAttribute// Size=0x1 (Id=807)
{
    void as_stringAttribute();
};

struct __vc_attributes::helper_attributes::usageAttribute// Size=0x4 (Id=808)
{
    enum usage_e
    {
        eAnyUsage=0,
        eCoClassUsage=1,
        eCOMInterfaceUsage=2,
        eInterfaceUsage=6,
        eMemberUsage=8,
        eMethodUsage=16,
        eInterfaceMethodUsage=32,
        eInterfaceMemberUsage=64,
        eCoClassMemberUsage=128,
        eCoClassMethodUsage=256,
        eGlobalMethodUsage=768,
        eGlobalDataUsage=1024,
        eClassUsage=2048,
        eInterfaceParameterUsage=4096,
        eMethodParameterUsage=12288,
        eIDLModuleUsage=16384,
        eAnonymousUsage=32768,
        eTypedefUsage=65536,
        eUnionUsage=131072,
        eEnumUsage=262144,
        eDefineTagUsage=524288,
        eStructUsage=1048576,
        eLocalUsage=2097152,
        ePropertyUsage=4194304,
        eEventUsage=8388608,
        eTemplateUsage=16777216,
        eModuleUsage=16777216,
        eIllegalUsage=33554432,
        eAsynchronousUsage=67108864,
        eAnyIDLUsage=4161535
    };
    void usageAttribute(unsigned int );
    unsigned int value;// Offset=0x0 Size=0x4
};

enum __vc_attributes::helper_attributes::usageAttribute::usage_e
{
    eAnyUsage=0,
    eCoClassUsage=1,
    eCOMInterfaceUsage=2,
    eInterfaceUsage=6,
    eMemberUsage=8,
    eMethodUsage=16,
    eInterfaceMethodUsage=32,
    eInterfaceMemberUsage=64,
    eCoClassMemberUsage=128,
    eCoClassMethodUsage=256,
    eGlobalMethodUsage=768,
    eGlobalDataUsage=1024,
    eClassUsage=2048,
    eInterfaceParameterUsage=4096,
    eMethodParameterUsage=12288,
    eIDLModuleUsage=16384,
    eAnonymousUsage=32768,
    eTypedefUsage=65536,
    eUnionUsage=131072,
    eEnumUsage=262144,
    eDefineTagUsage=524288,
    eStructUsage=1048576,
    eLocalUsage=2097152,
    ePropertyUsage=4194304,
    eEventUsage=8388608,
    eTemplateUsage=16777216,
    eModuleUsage=16777216,
    eIllegalUsage=33554432,
    eAsynchronousUsage=67108864,
    eAnyIDLUsage=4161535
};

struct __vc_attributes::helper_attributes::multi_valueAttribute// Size=0x1 (Id=810)
{
    void multi_valueAttribute();
};

struct __vc_attributes::helper_attributes::repeatableAttribute// Size=0x1 (Id=811)
{
    void repeatableAttribute();
};

struct __vc_attributes::helper_attributes::notify_atlprovAttribute// Size=0x1 (Id=812)
{
    void notify_atlprovAttribute();
};

struct __vc_attributes::helper_attributes::attributeAttribute// Size=0x8 (Id=813)
{
    union // Size=0x4 (Id=0)
    {
        const int All;// Offset=0x0 Size=0x4
        const int Assembly;// Offset=0x0 Size=0x4
        const int Class;// Offset=0x0 Size=0x4
        const int Constructor;// Offset=0x0 Size=0x4
        const int Delegate;// Offset=0x0 Size=0x4
        const int Enum;// Offset=0x0 Size=0x4
        const int Event;// Offset=0x0 Size=0x4
        const int Field;// Offset=0x0 Size=0x4
        const int GenericParameter;// Offset=0x0 Size=0x4
        const int Interface;// Offset=0x0 Size=0x4
        const int Method;// Offset=0x0 Size=0x4
        const int Module;// Offset=0x0 Size=0x4
        const int Parameter;// Offset=0x0 Size=0x4
        const int Property;// Offset=0x0 Size=0x4
        const int ReturnValue;// Offset=0x0 Size=0x4
        const int Struct;// Offset=0x0 Size=0x4
        void attributeAttribute(int );
        void attributeAttribute();
        int ValidOn;// Offset=0x0 Size=0x4
    };
    bool AllowMultiple;// Offset=0x4 Size=0x1
    bool Inherited;// Offset=0x5 Size=0x1
};

struct __vc_attributes::helper_attributes::v1_alttypeAttribute// Size=0x4 (Id=814)
{
    enum type_e
    {
        eBoolean=0,
        eInteger=1,
        eFloat=2,
        eDouble=3
    };
    void v1_alttypeAttribute(enum __vc_attributes::helper_attributes::v1_alttypeAttribute::type_e );
    enum __vc_attributes::helper_attributes::v1_alttypeAttribute::type_e type;// Offset=0x0 Size=0x4
};

enum __vc_attributes::helper_attributes::v1_alttypeAttribute::type_e
{
    eBoolean=0,
    eInteger=1,
    eFloat=2,
    eDouble=3
};

struct __vc_attributes::helper_attributes::process_earlyAttribute// Size=0x1 (Id=816)
{
    void process_earlyAttribute();
};

struct __vc_attributes::helper_attributes::help_stringAttribute// Size=0x4 (Id=817)
{
    void help_stringAttribute(char * );
    char * value;// Offset=0x0 Size=0x4
};

struct __vc_attributes::helper_attributes::v1_nameAttribute// Size=0x4 (Id=818)
{
    void v1_nameAttribute(char * );
    char * name;// Offset=0x0 Size=0x4
};

struct __vc_attributes::helper_attributes::default_valueAttribute// Size=0x4 (Id=819)
{
    void default_valueAttribute(<btNoType> );
    void * value;// Offset=0x0 Size=0x4
};

struct __vc_attributes::first_isAttribute// Size=0x4 (Id=820)
{
    void first_isAttribute(char * );
    char * value;// Offset=0x0 Size=0x4
};

struct __vc_attributes::noncreatableAttribute// Size=0x1 (Id=821)
{
    void noncreatableAttribute();
};

struct __vc_attributes::appobjectAttribute// Size=0x1 (Id=822)
{
    void appobjectAttribute();
};

struct __vc_attributes::restrictedAttribute// Size=0x4 (Id=823)
{
    void restrictedAttribute(char * );
    void restrictedAttribute();
    char * value;// Offset=0x0 Size=0x4
};

struct __vc_attributes::importidlAttribute// Size=0x4 (Id=824)
{
    void importidlAttribute(char * );
    char * value;// Offset=0x0 Size=0x4
};

struct __vc_attributes::cpp_quoteAttribute// Size=0x4 (Id=825)
{
    void cpp_quoteAttribute(char * );
    char * string;// Offset=0x0 Size=0x4
};

struct __vc_attributes::v1_enumAttribute// Size=0x1 (Id=826)
{
    void v1_enumAttribute();
};

struct __vc_attributes::refAttribute// Size=0x1 (Id=827)
{
    void refAttribute();
};

struct __vc_attributes::licensedAttribute// Size=0x1 (Id=828)
{
    void licensedAttribute();
};

struct __vc_attributes::lcidAttribute// Size=0x1 (Id=829)
{
    void lcidAttribute();
};

struct __vc_attributes::versionAttribute// Size=0x4 (Id=830)
{
    void versionAttribute(char * );
    char * value;// Offset=0x0 Size=0x4
};

struct __vc_attributes::helpcontextAttribute// Size=0x4 (Id=831)
{
    void helpcontextAttribute(char * );
    char * helpcontext_value;// Offset=0x0 Size=0x4
};

struct __vc_attributes::helpfileAttribute// Size=0x4 (Id=832)
{
    void helpfileAttribute(char * );
    char * filename;// Offset=0x0 Size=0x4
};

struct __vc_attributes::sourceAttribute// Size=0x4 (Id=833)
{
    void sourceAttribute(char * );
    void sourceAttribute();
    char * value;// Offset=0x0 Size=0x4
};

struct __vc_attributes::transmit_asAttribute// Size=0x4 (Id=834)
{
    void transmit_asAttribute(char * );
    char * xmit_type;// Offset=0x0 Size=0x4
};

struct __vc_attributes::hiddenAttribute// Size=0x1 (Id=835)
{
    void hiddenAttribute();
};

struct __vc_attributes::library_blockAttribute// Size=0x1 (Id=836)
{
    void library_blockAttribute();
};

struct __vc_attributes::customAttribute// Size=0x4 (Id=837)
{
    void customAttribute(char * );
    char * value;// Offset=0x0 Size=0x4
};

struct __vc_attributes::switch_isAttribute// Size=0x4 (Id=838)
{
    void switch_isAttribute(char * );
    char * limited_expression;// Offset=0x0 Size=0x4
};

struct __vc_attributes::ms_unionAttribute// Size=0x1 (Id=839)
{
    void ms_unionAttribute();
};

struct __vc_attributes::uniqueAttribute// Size=0x1 (Id=840)
{
    void uniqueAttribute();
};

struct __vc_attributes::includelibAttribute// Size=0x4 (Id=841)
{
    void includelibAttribute(char * );
    char * value;// Offset=0x0 Size=0x4
};

struct __vc_attributes::optionalAttribute// Size=0x1 (Id=842)
{
    void optionalAttribute();
};

struct vc_attributes::PostRangeAttribute// Size=0xc (Id=843)
{
    void PostRangeAttribute();
    unsigned int Deref;// Offset=0x0 Size=0x4
    char * MinVal;// Offset=0x4 Size=0x4
    char * MaxVal;// Offset=0x8 Size=0x4
};

struct vc_attributes::PreAttribute// Size=0x54 (Id=844)
{
    void PreAttribute();
    unsigned int Deref;// Offset=0x0 Size=0x4
    enum vc_attributes::YesNoMaybe Valid;// Offset=0x4 Size=0x4
    enum vc_attributes::YesNoMaybe Null;// Offset=0x8 Size=0x4
    enum vc_attributes::YesNoMaybe Tainted;// Offset=0xc Size=0x4
    enum vc_attributes::AccessType Access;// Offset=0x10 Size=0x4
    unsigned int ValidElementsConst;// Offset=0x14 Size=0x4
    unsigned int ValidBytesConst;// Offset=0x18 Size=0x4
    wchar_t * ValidElements;// Offset=0x1c Size=0x4
    wchar_t * ValidBytes;// Offset=0x20 Size=0x4
    wchar_t * ValidElementsLength;// Offset=0x24 Size=0x4
    wchar_t * ValidBytesLength;// Offset=0x28 Size=0x4
    unsigned int WritableElementsConst;// Offset=0x2c Size=0x4
    unsigned int WritableBytesConst;// Offset=0x30 Size=0x4
    wchar_t * WritableElements;// Offset=0x34 Size=0x4
    wchar_t * WritableBytes;// Offset=0x38 Size=0x4
    wchar_t * WritableElementsLength;// Offset=0x3c Size=0x4
    wchar_t * WritableBytesLength;// Offset=0x40 Size=0x4
    unsigned int ElementSizeConst;// Offset=0x44 Size=0x4
    wchar_t * ElementSize;// Offset=0x48 Size=0x4
    enum vc_attributes::YesNoMaybe NullTerminated;// Offset=0x4c Size=0x4
    wchar_t * Condition;// Offset=0x50 Size=0x4
};

struct vc_attributes::InvalidCheckAttribute// Size=0x4 (Id=845)
{
    void InvalidCheckAttribute();
    long Value;// Offset=0x0 Size=0x4
};

struct vc_attributes::PostAttribute// Size=0x58 (Id=846)
{
    void PostAttribute();
    unsigned int Deref;// Offset=0x0 Size=0x4
    enum vc_attributes::YesNoMaybe Valid;// Offset=0x4 Size=0x4
    enum vc_attributes::YesNoMaybe Null;// Offset=0x8 Size=0x4
    enum vc_attributes::YesNoMaybe Tainted;// Offset=0xc Size=0x4
    enum vc_attributes::AccessType Access;// Offset=0x10 Size=0x4
    unsigned int ValidElementsConst;// Offset=0x14 Size=0x4
    unsigned int ValidBytesConst;// Offset=0x18 Size=0x4
    wchar_t * ValidElements;// Offset=0x1c Size=0x4
    wchar_t * ValidBytes;// Offset=0x20 Size=0x4
    wchar_t * ValidElementsLength;// Offset=0x24 Size=0x4
    wchar_t * ValidBytesLength;// Offset=0x28 Size=0x4
    unsigned int WritableElementsConst;// Offset=0x2c Size=0x4
    unsigned int WritableBytesConst;// Offset=0x30 Size=0x4
    wchar_t * WritableElements;// Offset=0x34 Size=0x4
    wchar_t * WritableBytes;// Offset=0x38 Size=0x4
    wchar_t * WritableElementsLength;// Offset=0x3c Size=0x4
    wchar_t * WritableBytesLength;// Offset=0x40 Size=0x4
    unsigned int ElementSizeConst;// Offset=0x44 Size=0x4
    wchar_t * ElementSize;// Offset=0x48 Size=0x4
    enum vc_attributes::YesNoMaybe NullTerminated;// Offset=0x4c Size=0x4
    enum vc_attributes::YesNoMaybe MustCheck;// Offset=0x50 Size=0x4
    wchar_t * Condition;// Offset=0x54 Size=0x4
};

struct vc_attributes::FormatStringAttribute// Size=0x8 (Id=847)
{
    void FormatStringAttribute();
    wchar_t * Style;// Offset=0x0 Size=0x4
    wchar_t * UnformattedAlternative;// Offset=0x4 Size=0x4
};

struct vc_attributes::PostBoundAttribute// Size=0x4 (Id=848)
{
    void PostBoundAttribute();
    unsigned int Deref;// Offset=0x0 Size=0x4
};

struct vc_attributes::PreRangeAttribute// Size=0xc (Id=849)
{
    void PreRangeAttribute();
    unsigned int Deref;// Offset=0x0 Size=0x4
    char * MinVal;// Offset=0x4 Size=0x4
    char * MaxVal;// Offset=0x8 Size=0x4
};

struct HKEY__// Size=0x4 (Id=850)
{
    int unused;// Offset=0x0 Size=0x4
};

struct _D3DXMESHCONTAINER// Size=0x24 (Id=851)
{
    char * Name;// Offset=0x0 Size=0x4
    struct _D3DXMESHDATA MeshData;// Offset=0x4 Size=0x8
    struct _D3DXMATERIAL * pMaterials;// Offset=0xc Size=0x4
    struct _D3DXEFFECTINSTANCE * pEffects;// Offset=0x10 Size=0x4
    unsigned long NumMaterials;// Offset=0x14 Size=0x4
    unsigned long * pAdjacency;// Offset=0x18 Size=0x4
    struct ID3DXSkinInfo * pSkinInfo;// Offset=0x1c Size=0x4
    struct _D3DXMESHCONTAINER * pNextMeshContainer;// Offset=0x20 Size=0x4
};

struct XUSER_ACHIEVEMENT// Size=0x8 (Id=852)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long dwAchievementId;// Offset=0x4 Size=0x4
};

struct _D3DSURFACES// Size=0x14 (Id=853)
{
    struct D3DSurface * pDepthStencilSurface;// Offset=0x0 Size=0x4
    struct D3DSurface * pRenderTarget[4];// Offset=0x4 Size=0x10
};

struct _D3DMATRIX// Size=0x40 (Id=854)
{
    union // Size=0x40 (Id=0)
    {
        float _11;// Offset=0x0 Size=0x4
        float _12;// Offset=0x4 Size=0x4
        float _13;// Offset=0x8 Size=0x4
        float _14;// Offset=0xc Size=0x4
        float _21;// Offset=0x10 Size=0x4
        float _22;// Offset=0x14 Size=0x4
        float _23;// Offset=0x18 Size=0x4
        float _24;// Offset=0x1c Size=0x4
        float _31;// Offset=0x20 Size=0x4
        float _32;// Offset=0x24 Size=0x4
        float _33;// Offset=0x28 Size=0x4
        float _34;// Offset=0x2c Size=0x4
        float _41;// Offset=0x30 Size=0x4
        float _42;// Offset=0x34 Size=0x4
        float _43;// Offset=0x38 Size=0x4
        float _44;// Offset=0x3c Size=0x4
        float m[4][4];// Offset=0x0 Size=0x40
    };
};

struct _D3DXMATRIXA16 : public D3DXMATRIX// Size=0x40 (Id=855)
{
    void _D3DXMATRIXA16(float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float );
    void _D3DXMATRIXA16(struct D3DXFLOAT16 * );
    void _D3DXMATRIXA16(struct _D3DMATRIX & );
    void _D3DXMATRIXA16(float * );
    void _D3DXMATRIXA16();
    void * operator new(unsigned int );
    void * operator new[](unsigned int );
    void operator delete(void * );
    void operator delete[](void * );
    struct _D3DXMATRIXA16 & operator=(struct _D3DXMATRIXA16 & );
    struct _D3DXMATRIXA16 & operator=(struct D3DXMATRIX & );
};

struct _D3DXMATRIXA16 : public D3DXMATRIX// Size=0x40 (Id=856)
{
    void _D3DXMATRIXA16(float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float );
    void _D3DXMATRIXA16(struct D3DXFLOAT16 * );
    void _D3DXMATRIXA16(struct _D3DMATRIX & );
    void _D3DXMATRIXA16(float * );
    void _D3DXMATRIXA16();
    void * operator new(unsigned int );
    void * operator new[](unsigned int );
    void operator delete(void * );
    void operator delete[](void * );
    struct _D3DXMATRIXA16 & operator=(struct _D3DXMATRIXA16 & );
    struct _D3DXMATRIXA16 & operator=(struct D3DXMATRIX & );
};

struct _WIN32_FIND_DATAA// Size=0x140 (Id=857)
{
    unsigned long dwFileAttributes;// Offset=0x0 Size=0x4
    struct _FILETIME ftCreationTime;// Offset=0x4 Size=0x8
    struct _FILETIME ftLastAccessTime;// Offset=0xc Size=0x8
    struct _FILETIME ftLastWriteTime;// Offset=0x14 Size=0x8
    unsigned long nFileSizeHigh;// Offset=0x1c Size=0x4
    unsigned long nFileSizeLow;// Offset=0x20 Size=0x4
    unsigned long dwReserved0;// Offset=0x24 Size=0x4
    unsigned long dwReserved1;// Offset=0x28 Size=0x4
    char cFileName[260];// Offset=0x2c Size=0x104
    char cAlternateFileName[14];// Offset=0x130 Size=0xe
};

struct XMSG_CUSTOMACTION// Size=0x274 (Id=858)
{
    union // Size=0x38 (Id=0)
    {
        unsigned long dwActionId;// Offset=0x0 Size=0x4
        wchar_t wszEnActionText[23];// Offset=0x4 Size=0x2e
        unsigned short wReserved;// Offset=0x32 Size=0x2
        unsigned long dwFlags;// Offset=0x34 Size=0x4
        struct <unnamed-type-rgTranslations>// Size=0x34 (Id=15920)
        {
            unsigned long dwLanguageId;// Offset=0x0 Size=0x4
            wchar_t wszActionText[23];// Offset=0x4 Size=0x2e
            unsigned short wReserved;// Offset=0x32 Size=0x2
        };
        unsigned char __align0[4];// Offset=0x34 Size=0x4
    };
    struct XMSG_CUSTOMACTION::<unnamed-type-rgTranslations> rgTranslations[11];// Offset=0x38 Size=0x23c
};

struct _D3DXSHADER_COMPILE_PARAMETERSA// Size=0x44 (Id=859)
{
    unsigned long Flags;// Offset=0x0 Size=0x4
    unsigned long UPDBTimestamp;// Offset=0x4 Size=0x4
    char * UPDBPath;// Offset=0x8 Size=0x4
    struct ID3DXBuffer * pUPDBBuffer;// Offset=0xc Size=0x4
    unsigned long TempRegisterLimit;// Offset=0x10 Size=0x4
    void * pUPDBB;// Offset=0x14 Size=0x4
    char * CpuFunctionName;// Offset=0x18 Size=0x4
    int bXbox360ExtensionUsed;// Offset=0x1c Size=0x4
    unsigned long PixelShaderSamplerRegisterBase;// Offset=0x20 Size=0x4
    unsigned long PixelShaderSamplerRegisterCount;// Offset=0x24 Size=0x4
    unsigned long VertexShaderSamplerRegisterBase;// Offset=0x28 Size=0x4
    unsigned long VertexShaderSamplerRegisterCount;// Offset=0x2c Size=0x4
    unsigned long PixelShaderInstructionCount;// Offset=0x30 Size=0x4
    unsigned long VertexShaderInstructionCount;// Offset=0x34 Size=0x4
    unsigned short PixAssertAddressReg;// Offset=0x38 Size=0x2
    unsigned short PixDebugPrintAddressReg;// Offset=0x3a Size=0x2
    unsigned short PixDebugPrintSamplerReg;// Offset=0x3c Size=0x2
    unsigned short PixDebugPrintEnableReg;// Offset=0x3e Size=0x2
    unsigned short PixDiagnosticIndexReg;// Offset=0x40 Size=0x2
};

struct HICON__// Size=0x4 (Id=860)
{
    int unused;// Offset=0x0 Size=0x4
};

struct _D3DXTARGET_DESC// Size=0xc (Id=861)
{
    char * Name;// Offset=0x0 Size=0x4
    unsigned long Version;// Offset=0x4 Size=0x4
    unsigned long API;// Offset=0x8 Size=0x4
};

struct _XUSER_PROPERTY// Size=0x18 (Id=862)
{
    unsigned long dwPropertyId;// Offset=0x0 Size=0x4
    unsigned char __align0[4];// Offset=0x4 Size=0x4
    struct _XUSER_DATA value;// Offset=0x8 Size=0x10
};

struct _IMAGE_FUNCTION_ENTRY// Size=0xc (Id=863)
{
    unsigned long StartingAddress;// Offset=0x0 Size=0x4
    unsigned long EndingAddress;// Offset=0x4 Size=0x4
    unsigned long EndOfPrologue;// Offset=0x8 Size=0x4
};

struct _D3DXSHADER_CONSTANTINFO// Size=0x14 (Id=864)
{
    unsigned long Name;// Offset=0x0 Size=0x4
    unsigned short RegisterSet;// Offset=0x4 Size=0x2
    unsigned short RegisterIndex;// Offset=0x6 Size=0x2
    unsigned short RegisterCount;// Offset=0x8 Size=0x2
    unsigned short Flags;// Offset=0xa Size=0x2
    unsigned long TypeInfo;// Offset=0xc Size=0x4
    unsigned long DefaultValue;// Offset=0x10 Size=0x4
};

struct _XSESSION_SEARCHRESULT_HEADER// Size=0x8 (Id=865)
{
    unsigned long dwSearchResults;// Offset=0x0 Size=0x4
    struct _XSESSION_SEARCHRESULT * pResults;// Offset=0x4 Size=0x4
};

union GPU_STENCILREFMASK// Size=0x4 (Id=866)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long Ref:8;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x8
        unsigned long Mask:8;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x8
        unsigned long WriteMask:8;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x8
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

struct ID3DXFileSaveData : public IUnknown// Size=0x4 (Id=867)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    HRESULT GetSave(struct ID3DXFileSaveObject ** );
    HRESULT GetName(char * ,unsigned long * );
    HRESULT GetId(struct _GUID * );
    HRESULT GetType(struct _GUID * );
    HRESULT AddDataObject(struct _GUID & ,char * ,struct _GUID * ,unsigned long ,void * ,struct ID3DXFileSaveData ** );
    HRESULT AddDataReference(char * ,struct _GUID * );
    void ID3DXFileSaveData(struct ID3DXFileSaveData & );
    void ID3DXFileSaveData();
    struct ID3DXFileSaveData & operator=(struct ID3DXFileSaveData & );
};

struct ID3DXFileSaveData : public IUnknown// Size=0x4 (Id=868)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    HRESULT GetSave(struct ID3DXFileSaveObject ** );
    HRESULT GetName(char * ,unsigned long * );
    HRESULT GetId(struct _GUID * );
    HRESULT GetType(struct _GUID * );
    HRESULT AddDataObject(struct _GUID & ,char * ,struct _GUID * ,unsigned long ,void * ,struct ID3DXFileSaveData ** );
    HRESULT AddDataReference(char * ,struct _GUID * );
    void ID3DXFileSaveData(struct ID3DXFileSaveData & );
    void ID3DXFileSaveData();
    struct ID3DXFileSaveData & operator=(struct ID3DXFileSaveData & );
};

struct _XMUSHORTN2// Size=0x4 (Id=869)
{
    unsigned short x;// Offset=0x0 Size=0x2
    unsigned short y;// Offset=0x2 Size=0x2
    void _XMUSHORTN2(float * );
    void _XMUSHORTN2(float ,float );
    void _XMUSHORTN2(unsigned short * );
    void _XMUSHORTN2(unsigned short ,unsigned short );
    void _XMUSHORTN2();
    struct _XMUSHORTN2 & operator=(struct _XMUSHORTN2 & );
};

struct _XMUSHORTN2// Size=0x4 (Id=870)
{
    unsigned short x;// Offset=0x0 Size=0x2
    unsigned short y;// Offset=0x2 Size=0x2
    void _XMUSHORTN2(float * );
    void _XMUSHORTN2(float ,float );
    void _XMUSHORTN2(unsigned short * );
    void _XMUSHORTN2(unsigned short ,unsigned short );
    void _XMUSHORTN2();
    struct _XMUSHORTN2 & operator=(struct _XMUSHORTN2 & );
};

struct _XMHEND3// Size=0x4 (Id=871)
{
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            int x:11;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xb
            int y:11;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0xb
            int z:10;// Offset=0x0 Size=0x4 BitOffset=0x16 BitSize=0xa
        };
        unsigned int v;// Offset=0x0 Size=0x4
    };
    void _XMHEND3(float * );
    void _XMHEND3(float ,float ,float );
    void _XMHEND3(unsigned int );
    void _XMHEND3();
    unsigned int operator unsigned int();
    struct _XMHEND3 & operator=(const unsigned int );
    struct _XMHEND3 & operator=(struct _XMHEND3 & );
};

struct _XMHEND3// Size=0x4 (Id=872)
{
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            int x:11;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xb
            int y:11;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0xb
            int z:10;// Offset=0x0 Size=0x4 BitOffset=0x16 BitSize=0xa
        };
        unsigned int v;// Offset=0x0 Size=0x4
    };
    void _XMHEND3(float * );
    void _XMHEND3(float ,float ,float );
    void _XMHEND3(unsigned int );
    void _XMHEND3();
    unsigned int operator unsigned int();
    struct _XMHEND3 & operator=(const unsigned int );
    struct _XMHEND3 & operator=(struct _XMHEND3 & );
};

struct _XUSER_STATS_ROW// Size=0x30 (Id=873)
{
    unsigned long long xuid;// Offset=0x0 Size=0x8
    unsigned long dwRank;// Offset=0x8 Size=0x4
    unsigned char __align0[4];// Offset=0xc Size=0x4
    long long i64Rating;// Offset=0x10 Size=0x8
    char szGamertag[16];// Offset=0x18 Size=0x10
    unsigned long dwNumColumns;// Offset=0x28 Size=0x4
    struct _XUSER_STATS_COLUMN * pColumns;// Offset=0x2c Size=0x4
};

struct XNKEY// Size=0x10 (Id=874)
{
    unsigned char ab[16];// Offset=0x0 Size=0x10
};

struct _IMAGE_SECTION_HEADER// Size=0x28 (Id=875)
{
    union // Size=0x8 (Id=0)
    {
        unsigned char Name[8];// Offset=0x0 Size=0x8
        union <unnamed-type-Misc>// Size=0x4 (Id=16040)
        {
            unsigned long PhysicalAddress;// Offset=0x0 Size=0x4
            unsigned long VirtualSize;// Offset=0x0 Size=0x4
        };
        unsigned char __align0[4];// Offset=0x4 Size=0x4
    };
    union _IMAGE_SECTION_HEADER::<unnamed-type-Misc> Misc;// Offset=0x8 Size=0x4
    unsigned long VirtualAddress;// Offset=0xc Size=0x4
    unsigned long SizeOfRawData;// Offset=0x10 Size=0x4
    unsigned long PointerToRawData;// Offset=0x14 Size=0x4
    unsigned long PointerToRelocations;// Offset=0x18 Size=0x4
    unsigned long PointerToLinenumbers;// Offset=0x1c Size=0x4
    unsigned short NumberOfRelocations;// Offset=0x20 Size=0x2
    unsigned short NumberOfLinenumbers;// Offset=0x22 Size=0x2
    unsigned long Characteristics;// Offset=0x24 Size=0x4
};

union _IMAGE_SECTION_HEADER::<unnamed-type-Misc>// Size=0x4 (Id=876)
{
    unsigned long PhysicalAddress;// Offset=0x0 Size=0x4
    unsigned long VirtualSize;// Offset=0x0 Size=0x4
};

struct _D3DXINTERSECTINFO// Size=0x10 (Id=877)
{
    unsigned long FaceIndex;// Offset=0x0 Size=0x4
    float U;// Offset=0x4 Size=0x4
    float V;// Offset=0x8 Size=0x4
    float Dist;// Offset=0xc Size=0x4
};

union GPUCOMMAND_CPU_INTERRUPT// Size=0x4 (Id=878)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long Cpu0:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long Cpu1:1;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x1
        unsigned long Cpu2:1;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x1
        unsigned long Cpu3:1;// Offset=0x0 Size=0x4 BitOffset=0x3 BitSize=0x1
        unsigned long Cpu4:1;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x1
        unsigned long Cpu5:1;// Offset=0x0 Size=0x4 BitOffset=0x5 BitSize=0x1
    };
    unsigned long dword[1];// Offset=0x0 Size=0x4
};

union GPU_HICONTROL// Size=0x4 (Id=879)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long HiZWriteEnable:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long HiZEnable:1;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x1
        unsigned long HiStencilWriteEnable:1;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x1
        unsigned long HiStencilEnable:1;// Offset=0x0 Size=0x4 BitOffset=0x3 BitSize=0x1
        unsigned long HiZFunc:1;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x1
        unsigned long HiStencilFunc:1;// Offset=0x0 Size=0x4 BitOffset=0x5 BitSize=0x1
        unsigned long HiStencilRef:8;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x8
        unsigned long HiBaseAddr:15;// Offset=0x0 Size=0x4 BitOffset=0x11 BitSize=0xf
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

struct ID3DXKeyframedAnimationSet : public ID3DXAnimationSet// Size=0x4 (Id=880)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    char * GetName();
    float GetPeriod();
    float GetPeriodicPosition(float );
    unsigned int GetNumAnimations();
    HRESULT GetAnimationNameByIndex(unsigned int ,char ** );
    HRESULT GetAnimationIndexByName(char * ,unsigned int * );
    HRESULT GetSRT(float ,unsigned int ,struct D3DXVECTOR3 * ,struct D3DXQUATERNION * ,struct D3DXVECTOR3 * );
    HRESULT GetCallback(float ,unsigned long ,float * ,void ** );
    enum _D3DXPLAYBACK_TYPE GetPlaybackType();
    float GetSourceTicksPerSecond();
    unsigned int GetNumScaleKeys(unsigned int );
    HRESULT GetScaleKeys(unsigned int ,struct _D3DXKEY_VECTOR3 * );
    unsigned int GetNumRotationKeys(unsigned int );
    HRESULT GetRotationKeys(unsigned int ,struct _D3DXKEY_QUATERNION * );
    unsigned int GetNumTranslationKeys(unsigned int );
    HRESULT GetTranslationKeys(unsigned int ,struct _D3DXKEY_VECTOR3 * );
    unsigned int GetNumCallbackKeys();
    HRESULT GetCallbackKeys(struct _D3DXKEY_CALLBACK * );
    HRESULT RegisterAnimationSRTKeys(char * ,unsigned int ,unsigned int ,unsigned int ,struct _D3DXKEY_VECTOR3 * ,struct _D3DXKEY_QUATERNION * ,struct _D3DXKEY_VECTOR3 * );
    HRESULT Compress(unsigned long ,float ,struct _D3DXFRAME * ,struct ID3DXBuffer ** );
    void ID3DXKeyframedAnimationSet(struct ID3DXKeyframedAnimationSet & );
    void ID3DXKeyframedAnimationSet();
    struct ID3DXKeyframedAnimationSet & operator=(struct ID3DXKeyframedAnimationSet & );
};

struct ID3DXKeyframedAnimationSet : public ID3DXAnimationSet// Size=0x4 (Id=881)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    char * GetName();
    float GetPeriod();
    float GetPeriodicPosition(float );
    unsigned int GetNumAnimations();
    HRESULT GetAnimationNameByIndex(unsigned int ,char ** );
    HRESULT GetAnimationIndexByName(char * ,unsigned int * );
    HRESULT GetSRT(float ,unsigned int ,struct D3DXVECTOR3 * ,struct D3DXQUATERNION * ,struct D3DXVECTOR3 * );
    HRESULT GetCallback(float ,unsigned long ,float * ,void ** );
    enum _D3DXPLAYBACK_TYPE GetPlaybackType();
    float GetSourceTicksPerSecond();
    unsigned int GetNumScaleKeys(unsigned int );
    HRESULT GetScaleKeys(unsigned int ,struct _D3DXKEY_VECTOR3 * );
    unsigned int GetNumRotationKeys(unsigned int );
    HRESULT GetRotationKeys(unsigned int ,struct _D3DXKEY_QUATERNION * );
    unsigned int GetNumTranslationKeys(unsigned int );
    HRESULT GetTranslationKeys(unsigned int ,struct _D3DXKEY_VECTOR3 * );
    unsigned int GetNumCallbackKeys();
    HRESULT GetCallbackKeys(struct _D3DXKEY_CALLBACK * );
    HRESULT RegisterAnimationSRTKeys(char * ,unsigned int ,unsigned int ,unsigned int ,struct _D3DXKEY_VECTOR3 * ,struct _D3DXKEY_QUATERNION * ,struct _D3DXKEY_VECTOR3 * );
    HRESULT Compress(unsigned long ,float ,struct _D3DXFRAME * ,struct ID3DXBuffer ** );
    void ID3DXKeyframedAnimationSet(struct ID3DXKeyframedAnimationSet & );
    void ID3DXKeyframedAnimationSet();
    struct ID3DXKeyframedAnimationSet & operator=(struct ID3DXKeyframedAnimationSet & );
};

class type_info// Size=0xc (Id=882)
{
    public void ~type_info();
    public bool operator==(class type_info & );
    public bool operator!=(class type_info & );
    public int before(class type_info & );
    public char * name(struct __type_info_node * );
    public char * raw_name();
    private unsigned char __align0[4];// Offset=0x0 Size=0x4
    private void * _m_data;// Offset=0x4 Size=0x4
    private char _m_d_name[1];// Offset=0x8 Size=0x1
    private void type_info(class type_info & );
    private class type_info & operator=(class type_info & );
    private char * _Name_base(class type_info * ,struct __type_info_node * );
    private void _Type_info_dtor(class type_info * );
    public void * __vecDelDtor(unsigned int );
};

struct tagSIZE// Size=0x8 (Id=883)
{
    long cx;// Offset=0x0 Size=0x4
    long cy;// Offset=0x4 Size=0x4
};

struct _XCOMPRESS_FILE_HEADER// Size=0x8 (Id=884)
{
    unsigned long Identifier;// Offset=0x0 Size=0x4
    unsigned short Version;// Offset=0x4 Size=0x2
    unsigned short Reserved;// Offset=0x6 Size=0x2
};

struct _D3DSWAP_STATUS// Size=0xc (Id=885)
{
    unsigned long Flags;// Offset=0x0 Size=0x4
    unsigned long Swap;// Offset=0x4 Size=0x4
    unsigned long EnqueuedCount;// Offset=0x8 Size=0x4
};

struct _STACK_FRAME_HEADER// Size=0x50 (Id=886)
{
    unsigned long BackChain;// Offset=0x0 Size=0x4
    unsigned long CompilerReserved;// Offset=0x4 Size=0x4
    unsigned long CalleeOwned1;// Offset=0x8 Size=0x4
    unsigned long CalleeOwned2;// Offset=0xc Size=0x4
    unsigned long long Parameter0;// Offset=0x10 Size=0x8
    unsigned long long Parameter1;// Offset=0x18 Size=0x8
    unsigned long long Parameter2;// Offset=0x20 Size=0x8
    unsigned long long Parameter3;// Offset=0x28 Size=0x8
    unsigned long long Parameter4;// Offset=0x30 Size=0x8
    unsigned long long Parameter5;// Offset=0x38 Size=0x8
    unsigned long long Parameter6;// Offset=0x40 Size=0x8
    unsigned long long Parameter7;// Offset=0x48 Size=0x8
};

union _RTL_CRITICAL_SECTION::<unnamed-type-Synchronization>// Size=0x10 (Id=887)
{
    unsigned long RawEvent[4];// Offset=0x0 Size=0x10
};

union GPU_GPRMANAGEMENT// Size=0x4 (Id=888)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long Dynamic:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long PixelSize:7;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x7
        unsigned long VertexSize:7;// Offset=0x0 Size=0x4 BitOffset=0xc BitSize=0x7
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

struct _ldiv_t// Size=0x8 (Id=889)
{
    long quot;// Offset=0x0 Size=0x4
    long rem;// Offset=0x4 Size=0x4
};

struct _XMFLOAT4X3// Size=0x30 (Id=890)
{
    union // Size=0x30 (Id=0)
    {
        float _11;// Offset=0x0 Size=0x4
        float _12;// Offset=0x4 Size=0x4
        float _13;// Offset=0x8 Size=0x4
        float _21;// Offset=0xc Size=0x4
        float _22;// Offset=0x10 Size=0x4
        float _23;// Offset=0x14 Size=0x4
        float _31;// Offset=0x18 Size=0x4
        float _32;// Offset=0x1c Size=0x4
        float _33;// Offset=0x20 Size=0x4
        float _41;// Offset=0x24 Size=0x4
        float _42;// Offset=0x28 Size=0x4
        float _43;// Offset=0x2c Size=0x4
        float m[4][3];// Offset=0x0 Size=0x30
    };
    void _XMFLOAT4X3(float * );
    void _XMFLOAT4X3(float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float );
    void _XMFLOAT4X3();
    float & operator()(unsigned int ,unsigned int );
    float operator()(unsigned int ,unsigned int );
    struct _XMFLOAT4X3 & operator=(struct _XMFLOAT4X3 & );
};

struct _XMFLOAT4X3// Size=0x30 (Id=891)
{
    union // Size=0x30 (Id=0)
    {
        float _11;// Offset=0x0 Size=0x4
        float _12;// Offset=0x4 Size=0x4
        float _13;// Offset=0x8 Size=0x4
        float _21;// Offset=0xc Size=0x4
        float _22;// Offset=0x10 Size=0x4
        float _23;// Offset=0x14 Size=0x4
        float _31;// Offset=0x18 Size=0x4
        float _32;// Offset=0x1c Size=0x4
        float _33;// Offset=0x20 Size=0x4
        float _41;// Offset=0x24 Size=0x4
        float _42;// Offset=0x28 Size=0x4
        float _43;// Offset=0x2c Size=0x4
        float m[4][3];// Offset=0x0 Size=0x30
    };
    void _XMFLOAT4X3(float * );
    void _XMFLOAT4X3(float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float );
    void _XMFLOAT4X3();
    float & operator()(unsigned int ,unsigned int );
    float operator()(unsigned int ,unsigned int );
    struct _XMFLOAT4X3 & operator=(struct _XMFLOAT4X3 & );
};

struct _D3DXF_FILELOADRESOURCE// Size=0xc (Id=892)
{
    struct HINSTANCE__ * hModule;// Offset=0x0 Size=0x4
    char * lpName;// Offset=0x4 Size=0x4
    char * lpType;// Offset=0x8 Size=0x4
};

struct _IMAGE_NT_HEADERS64// Size=0x108 (Id=893)
{
    unsigned long Signature;// Offset=0x0 Size=0x4
    struct _IMAGE_FILE_HEADER FileHeader;// Offset=0x4 Size=0x14
    struct _IMAGE_OPTIONAL_HEADER64 OptionalHeader;// Offset=0x18 Size=0xf0
};

struct _XUSER_STATS_SPEC// Size=0x88 (Id=894)
{
    unsigned long dwViewId;// Offset=0x0 Size=0x4
    unsigned long dwNumColumnIds;// Offset=0x4 Size=0x4
    unsigned short rgwColumnIds[64];// Offset=0x8 Size=0x80
};

struct _iobuf// Size=0x20 (Id=895)
{
    char * _ptr;// Offset=0x0 Size=0x4
    int _cnt;// Offset=0x4 Size=0x4
    char * _base;// Offset=0x8 Size=0x4
    int _flag;// Offset=0xc Size=0x4
    int _file;// Offset=0x10 Size=0x4
    int _charbuf;// Offset=0x14 Size=0x4
    int _bufsiz;// Offset=0x18 Size=0x4
    char * _tmpfname;// Offset=0x1c Size=0x4
};

struct _XGPOINT3D// Size=0xc (Id=896)
{
    long x;// Offset=0x0 Size=0x4
    long y;// Offset=0x4 Size=0x4
    long z;// Offset=0x8 Size=0x4
};

union GPU_INTERPOLATORCONTROL// Size=0x4 (Id=897)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long ParamShade:16;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x10
        unsigned long SamplingPattern:16;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x10
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

struct _D3DXATTRIBUTERANGE// Size=0x14 (Id=898)
{
    unsigned long AttribId;// Offset=0x0 Size=0x4
    unsigned long FaceStart;// Offset=0x4 Size=0x4
    unsigned long FaceCount;// Offset=0x8 Size=0x4
    unsigned long VertexStart;// Offset=0xc Size=0x4
    unsigned long VertexCount;// Offset=0x10 Size=0x4
};

union GPUCOMMAND_NOP// Size=0x4 (Id=899)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long Unused:32;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x20
    };
    unsigned long dword[1];// Offset=0x0 Size=0x4
};

union GPU_COPYMASK// Size=0x4 (Id=900)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long CopyMaskRed:8;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x8
        unsigned long CopyMaskGreen:8;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x8
        unsigned long CopyMaskBlue:8;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x8
        unsigned long CopyMaskAlpha:8;// Offset=0x0 Size=0x4 BitOffset=0x18 BitSize=0x8
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

struct ID3DXPMesh : public ID3DXBaseMesh// Size=0x4 (Id=901)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    HRESULT DrawSubset(unsigned long );
    unsigned long GetNumFaces();
    unsigned long GetNumVertices();
    unsigned long GetFVF();
    HRESULT GetDeclaration(struct _D3DVERTEXELEMENT9 * );
    unsigned long GetNumBytesPerVertex();
    unsigned long GetOptions();
    HRESULT GetDevice(struct D3DDevice ** );
    HRESULT CloneMeshFVF(unsigned long ,unsigned long ,struct D3DDevice * ,struct ID3DXMesh ** );
    HRESULT CloneMesh(unsigned long ,struct _D3DVERTEXELEMENT9 * ,struct D3DDevice * ,struct ID3DXMesh ** );
    HRESULT GetVertexBuffer(struct D3DVertexBuffer ** );
    HRESULT GetIndexBuffer(struct D3DIndexBuffer ** );
    HRESULT LockVertexBuffer(unsigned long ,void ** );
    HRESULT UnlockVertexBuffer();
    HRESULT LockIndexBuffer(unsigned long ,void ** );
    HRESULT UnlockIndexBuffer();
    HRESULT GetAttributeTable(struct _D3DXATTRIBUTERANGE * ,unsigned long * );
    HRESULT ConvertPointRepsToAdjacency(unsigned long * ,unsigned long * );
    HRESULT ConvertAdjacencyToPointReps(unsigned long * ,unsigned long * );
    HRESULT GenerateAdjacency(float ,unsigned long * );
    HRESULT UpdateSemantics(struct _D3DVERTEXELEMENT9 * );
    HRESULT ClonePMeshFVF(unsigned long ,unsigned long ,struct D3DDevice * ,struct ID3DXPMesh ** );
    HRESULT ClonePMesh(unsigned long ,struct _D3DVERTEXELEMENT9 * ,struct D3DDevice * ,struct ID3DXPMesh ** );
    HRESULT SetNumFaces(unsigned long );
    HRESULT SetNumVertices(unsigned long );
    unsigned long GetMaxFaces();
    unsigned long GetMinFaces();
    unsigned long GetMaxVertices();
    unsigned long GetMinVertices();
    HRESULT Save(struct IStream * ,struct _D3DXMATERIAL * ,struct _D3DXEFFECTINSTANCE * ,unsigned long );
    HRESULT Optimize(unsigned long ,unsigned long * ,unsigned long * ,struct ID3DXBuffer ** ,struct ID3DXMesh ** );
    HRESULT OptimizeBaseLOD(unsigned long ,unsigned long * );
    HRESULT TrimByFaces(unsigned long ,unsigned long ,unsigned long * ,unsigned long * );
    HRESULT TrimByVertices(unsigned long ,unsigned long ,unsigned long * ,unsigned long * );
    HRESULT GetAdjacency(unsigned long * );
    HRESULT GenerateVertexHistory(unsigned long * );
    void ID3DXPMesh(struct ID3DXPMesh & );
    void ID3DXPMesh();
    struct ID3DXPMesh & operator=(struct ID3DXPMesh & );
};

struct ID3DXPMesh : public ID3DXBaseMesh// Size=0x4 (Id=902)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    HRESULT DrawSubset(unsigned long );
    unsigned long GetNumFaces();
    unsigned long GetNumVertices();
    unsigned long GetFVF();
    HRESULT GetDeclaration(struct _D3DVERTEXELEMENT9 * );
    unsigned long GetNumBytesPerVertex();
    unsigned long GetOptions();
    HRESULT GetDevice(struct D3DDevice ** );
    HRESULT CloneMeshFVF(unsigned long ,unsigned long ,struct D3DDevice * ,struct ID3DXMesh ** );
    HRESULT CloneMesh(unsigned long ,struct _D3DVERTEXELEMENT9 * ,struct D3DDevice * ,struct ID3DXMesh ** );
    HRESULT GetVertexBuffer(struct D3DVertexBuffer ** );
    HRESULT GetIndexBuffer(struct D3DIndexBuffer ** );
    HRESULT LockVertexBuffer(unsigned long ,void ** );
    HRESULT UnlockVertexBuffer();
    HRESULT LockIndexBuffer(unsigned long ,void ** );
    HRESULT UnlockIndexBuffer();
    HRESULT GetAttributeTable(struct _D3DXATTRIBUTERANGE * ,unsigned long * );
    HRESULT ConvertPointRepsToAdjacency(unsigned long * ,unsigned long * );
    HRESULT ConvertAdjacencyToPointReps(unsigned long * ,unsigned long * );
    HRESULT GenerateAdjacency(float ,unsigned long * );
    HRESULT UpdateSemantics(struct _D3DVERTEXELEMENT9 * );
    HRESULT ClonePMeshFVF(unsigned long ,unsigned long ,struct D3DDevice * ,struct ID3DXPMesh ** );
    HRESULT ClonePMesh(unsigned long ,struct _D3DVERTEXELEMENT9 * ,struct D3DDevice * ,struct ID3DXPMesh ** );
    HRESULT SetNumFaces(unsigned long );
    HRESULT SetNumVertices(unsigned long );
    unsigned long GetMaxFaces();
    unsigned long GetMinFaces();
    unsigned long GetMaxVertices();
    unsigned long GetMinVertices();
    HRESULT Save(struct IStream * ,struct _D3DXMATERIAL * ,struct _D3DXEFFECTINSTANCE * ,unsigned long );
    HRESULT Optimize(unsigned long ,unsigned long * ,unsigned long * ,struct ID3DXBuffer ** ,struct ID3DXMesh ** );
    HRESULT OptimizeBaseLOD(unsigned long ,unsigned long * );
    HRESULT TrimByFaces(unsigned long ,unsigned long ,unsigned long * ,unsigned long * );
    HRESULT TrimByVertices(unsigned long ,unsigned long ,unsigned long * ,unsigned long * );
    HRESULT GetAdjacency(unsigned long * );
    HRESULT GenerateVertexHistory(unsigned long * );
    void ID3DXPMesh(struct ID3DXPMesh & );
    void ID3DXPMesh();
    struct ID3DXPMesh & operator=(struct ID3DXPMesh & );
};

union GPUCOMMAND_MEM_WRITE_COUNTER// Size=0x4 (Id=903)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long Endian:2;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x2
        unsigned long Address:30;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x1e
    };
    unsigned long dword[1];// Offset=0x0 Size=0x4
};

struct _XMSHORTN4// Size=0x8 (Id=904)
{
    short x;// Offset=0x0 Size=0x2
    short y;// Offset=0x2 Size=0x2
    short z;// Offset=0x4 Size=0x2
    short w;// Offset=0x6 Size=0x2
    void _XMSHORTN4(float * );
    void _XMSHORTN4(float ,float ,float ,float );
    void _XMSHORTN4(short * );
    void _XMSHORTN4(short ,short ,short ,short );
    void _XMSHORTN4();
    struct _XMSHORTN4 & operator=(struct _XMSHORTN4 & );
};

struct _XMSHORTN4// Size=0x8 (Id=905)
{
    short x;// Offset=0x0 Size=0x2
    short y;// Offset=0x2 Size=0x2
    short z;// Offset=0x4 Size=0x2
    short w;// Offset=0x6 Size=0x2
    void _XMSHORTN4(float * );
    void _XMSHORTN4(float ,float ,float ,float );
    void _XMSHORTN4(short * );
    void _XMSHORTN4(short ,short ,short ,short );
    void _XMSHORTN4();
    struct _XMSHORTN4 & operator=(struct _XMSHORTN4 & );
};

struct _XGPTC_COMPRESSION_PARAMS// Size=0x2c (Id=906)
{
    int Qs;// Offset=0x0 Size=0x4
    int Qa;// Offset=0x4 Size=0x4
    int ColorSpace;// Offset=0x8 Size=0x4
    int OneBitAlpha;// Offset=0xc Size=0x4
    int Ec;// Offset=0x10 Size=0x4
    int Eca;// Offset=0x14 Size=0x4
    int ChunkWidth;// Offset=0x18 Size=0x4
    int Bd;// Offset=0x1c Size=0x4
    int Npp;// Offset=0x20 Size=0x4
    char * pMeta;// Offset=0x24 Size=0x4
    char * pFrameMeta;// Offset=0x28 Size=0x4
};

struct _IMAGE_RELOCATION// Size=0xa (Id=907)
{
    union // Size=0x4 (Id=0)
    {
        unsigned long VirtualAddress;// Offset=0x0 Size=0x4
        unsigned long RelocCount;// Offset=0x0 Size=0x4
    };
    unsigned long SymbolTableIndex;// Offset=0x4 Size=0x4
    unsigned short Type;// Offset=0x8 Size=0x2
};

struct _SECURITY_DESCRIPTOR// Size=0x14 (Id=908)
{
    unsigned char Revision;// Offset=0x0 Size=0x1
    unsigned char Sbz1;// Offset=0x1 Size=0x1
    unsigned short Control;// Offset=0x2 Size=0x2
    void * Owner;// Offset=0x4 Size=0x4
    void * Group;// Offset=0x8 Size=0x4
    struct _ACL * Sacl;// Offset=0xc Size=0x4
    struct _ACL * Dacl;// Offset=0x10 Size=0x4
};

struct HRGN__// Size=0x4 (Id=909)
{
    int unused;// Offset=0x0 Size=0x4
};

struct _D3DXSHADER_CONSTANTTABLE// Size=0x1c (Id=910)
{
    unsigned long Size;// Offset=0x0 Size=0x4
    unsigned long Creator;// Offset=0x4 Size=0x4
    unsigned long Version;// Offset=0x8 Size=0x4
    unsigned long Constants;// Offset=0xc Size=0x4
    unsigned long ConstantInfo;// Offset=0x10 Size=0x4
    unsigned long Flags;// Offset=0x14 Size=0x4
    unsigned long Target;// Offset=0x18 Size=0x4
};

struct _IMAGE_RESOURCE_DIR_STRING_U// Size=0x4 (Id=911)
{
    unsigned short Length;// Offset=0x0 Size=0x2
    wchar_t NameString[1];// Offset=0x2 Size=0x2
};

struct GPUTEXTURESIZE_1D// Size=0x4 (Id=912)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long Width:24;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x18
    };
};

union GPUCOMMAND_INVALIDATE_STATE// Size=0x4 (Id=913)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long Destination:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long Window:1;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x1
        unsigned long Values:1;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x1
        unsigned long Program:1;// Offset=0x0 Size=0x4 BitOffset=0x3 BitSize=0x1
        unsigned long Control:1;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x1
        unsigned long Tessellator:1;// Offset=0x0 Size=0x4 BitOffset=0x5 BitSize=0x1
        unsigned long Misc:1;// Offset=0x0 Size=0x4 BitOffset=0x6 BitSize=0x1
        unsigned long Point:1;// Offset=0x0 Size=0x4 BitOffset=0x7 BitSize=0x1
        unsigned long VertexShader:1;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x1
        unsigned long PixelShader:1;// Offset=0x0 Size=0x4 BitOffset=0x9 BitSize=0x1
        unsigned long AluConstantBase:1;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0x1
        unsigned long FetchConstantBase:1;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x1
        unsigned long IncrementalRegisterBase:1;// Offset=0x0 Size=0x4 BitOffset=0xc BitSize=0x1
        unsigned long BooleanBase:1;// Offset=0x0 Size=0x4 BitOffset=0xd BitSize=0x1
        unsigned long IntegerBase:1;// Offset=0x0 Size=0x4 BitOffset=0xe BitSize=0x1
    };
    unsigned long dword[1];// Offset=0x0 Size=0x4
};

union GPU_OUTDEALLOCCONTROL// Size=0x4 (Id=914)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long DeallocDist:7;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x7
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

union GPU_COPYCONTROL// Size=0x4 (Id=915)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long CopySrcSelect:3;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x3
        unsigned long CopySampleSelect:3;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x3
        unsigned long ColorClearEnable:1;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x1
        unsigned long DepthClearEnable:1;// Offset=0x0 Size=0x4 BitOffset=0x9 BitSize=0x1
        unsigned long CopyCommand:2;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0x2
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

union GPU_ENHANCE// Size=0x4 (Id=916)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long Misc:16;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x10
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

union GPUCOMMAND_SET_BIN_MASK_LO// Size=0x4 (Id=917)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long Low:32;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x20
    };
    unsigned long dword[1];// Offset=0x0 Size=0x4
};

struct D3DArrayTexture : public D3DBaseTexture// Size=0x34 (Id=918)
{
    unsigned long GetArraySize();
    HRESULT GetLevelDesc(unsigned int ,struct _D3DSURFACE_DESC * );
    HRESULT GetArraySurface(unsigned int ,unsigned int ,struct D3DSurface ** );
    HRESULT LockRect(unsigned int ,unsigned int ,struct _D3DLOCKED_RECT * ,struct tagRECT * ,unsigned long );
    HRESULT AsyncLockRect(unsigned long long ,unsigned int ,unsigned int ,struct _D3DLOCKED_RECT * ,struct tagRECT * ,unsigned long );
    HRESULT UnlockRect(unsigned int ,unsigned int );
    HRESULT LockTail(unsigned int ,struct _D3DLOCKED_TAIL * ,unsigned long );
    HRESULT AsyncLockTail(unsigned long long ,unsigned int ,struct _D3DLOCKED_TAIL * ,unsigned long );
    HRESULT UnlockTail(unsigned int );
};

struct HPEN__// Size=0x4 (Id=919)
{
    int unused;// Offset=0x0 Size=0x4
};

struct _TOKEN_PRIMARY_GROUP// Size=0x4 (Id=920)
{
    void * PrimaryGroup;// Offset=0x0 Size=0x4
};

struct _SECURITY_QUALITY_OF_SERVICE// Size=0xc (Id=921)
{
    unsigned long Length;// Offset=0x0 Size=0x4
    enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;// Offset=0x4 Size=0x4
    unsigned char ContextTrackingMode;// Offset=0x8 Size=0x1
    unsigned char EffectiveOnly;// Offset=0x9 Size=0x1
};

struct _D3DRING_BUFFER_PARAMETERS// Size=0x18 (Id=922)
{
    unsigned long Flags;// Offset=0x0 Size=0x4
    unsigned long PrimarySize;// Offset=0x4 Size=0x4
    void * pPrimary;// Offset=0x8 Size=0x4
    unsigned long SecondarySize;// Offset=0xc Size=0x4
    void * pSecondary;// Offset=0x10 Size=0x4
    unsigned long SegmentCount;// Offset=0x14 Size=0x4
};

struct _IMAGE_AUX_SYMBOL::<unnamed-type-Section>// Size=0x10 (Id=923)
{
    unsigned long Length;// Offset=0x0 Size=0x4
    unsigned short NumberOfRelocations;// Offset=0x4 Size=0x2
    unsigned short NumberOfLinenumbers;// Offset=0x6 Size=0x2
    unsigned long CheckSum;// Offset=0x8 Size=0x4
    short Number;// Offset=0xc Size=0x2
    unsigned char Selection;// Offset=0xe Size=0x1
};

struct _IMAGE_AUX_SYMBOL::<unnamed-type-File>// Size=0x12 (Id=924)
{
    unsigned char Name[18];// Offset=0x0 Size=0x12
};

struct _IMAGE_AUX_SYMBOL::<unnamed-type-Sym>// Size=0x12 (Id=925)
{
    union // Size=0x8 (Id=0)
    {
        unsigned long TagIndex;// Offset=0x0 Size=0x4
        union <unnamed-type-Misc>// Size=0x4 (Id=11349)
        {
            struct <unnamed-type-LnSz>// Size=0x4 (Id=11350)
            {
                unsigned short Linenumber;// Offset=0x0 Size=0x2
                unsigned short Size;// Offset=0x2 Size=0x2
            };
            struct _IMAGE_AUX_SYMBOL::<unnamed-type-Sym>::<unnamed-type-Misc>::<unnamed-type-LnSz> LnSz;// Offset=0x0 Size=0x4
            unsigned long TotalSize;// Offset=0x0 Size=0x4
        };
        union _IMAGE_AUX_SYMBOL::<unnamed-type-Sym>::<unnamed-type-Misc> Misc;// Offset=0x4 Size=0x4
        union <unnamed-type-FcnAry>// Size=0x8 (Id=11356)
        {
            struct <unnamed-type-Function>// Size=0x8 (Id=11357)
            {
                unsigned long PointerToLinenumber;// Offset=0x0 Size=0x4
                unsigned long PointerToNextFunction;// Offset=0x4 Size=0x4
            };
            struct _IMAGE_AUX_SYMBOL::<unnamed-type-Sym>::<unnamed-type-FcnAry>::<unnamed-type-Function> Function;// Offset=0x0 Size=0x8
            struct <unnamed-type-Array>// Size=0x8 (Id=11361)
            {
                unsigned short Dimension[4];// Offset=0x0 Size=0x8
            };
            struct _IMAGE_AUX_SYMBOL::<unnamed-type-Sym>::<unnamed-type-FcnAry>::<unnamed-type-Array> Array;// Offset=0x0 Size=0x8
        };
    };
    union _IMAGE_AUX_SYMBOL::<unnamed-type-Sym>::<unnamed-type-FcnAry> FcnAry;// Offset=0x8 Size=0x8
    unsigned short TvIndex;// Offset=0x10 Size=0x2
};

union _IMAGE_AUX_SYMBOL::<unnamed-type-Sym>::<unnamed-type-FcnAry>// Size=0x8 (Id=926)
{
    struct <unnamed-type-Function>// Size=0x8 (Id=11357)
    {
        unsigned long PointerToLinenumber;// Offset=0x0 Size=0x4
        unsigned long PointerToNextFunction;// Offset=0x4 Size=0x4
    };
    struct _IMAGE_AUX_SYMBOL::<unnamed-type-Sym>::<unnamed-type-FcnAry>::<unnamed-type-Function> Function;// Offset=0x0 Size=0x8
    struct <unnamed-type-Array>// Size=0x8 (Id=11361)
    {
        unsigned short Dimension[4];// Offset=0x0 Size=0x8
    };
    struct _IMAGE_AUX_SYMBOL::<unnamed-type-Sym>::<unnamed-type-FcnAry>::<unnamed-type-Array> Array;// Offset=0x0 Size=0x8
};

struct _IMAGE_AUX_SYMBOL::<unnamed-type-Sym>::<unnamed-type-FcnAry>::<unnamed-type-Array>// Size=0x8 (Id=927)
{
    unsigned short Dimension[4];// Offset=0x0 Size=0x8
};

struct _IMAGE_AUX_SYMBOL::<unnamed-type-Sym>::<unnamed-type-FcnAry>::<unnamed-type-Function>// Size=0x8 (Id=928)
{
    unsigned long PointerToLinenumber;// Offset=0x0 Size=0x4
    unsigned long PointerToNextFunction;// Offset=0x4 Size=0x4
};

union _IMAGE_AUX_SYMBOL::<unnamed-type-Sym>::<unnamed-type-Misc>// Size=0x4 (Id=929)
{
    struct <unnamed-type-LnSz>// Size=0x4 (Id=11350)
    {
        unsigned short Linenumber;// Offset=0x0 Size=0x2
        unsigned short Size;// Offset=0x2 Size=0x2
    };
    struct _IMAGE_AUX_SYMBOL::<unnamed-type-Sym>::<unnamed-type-Misc>::<unnamed-type-LnSz> LnSz;// Offset=0x0 Size=0x4
    unsigned long TotalSize;// Offset=0x0 Size=0x4
};

struct _IMAGE_AUX_SYMBOL::<unnamed-type-Sym>::<unnamed-type-Misc>::<unnamed-type-LnSz>// Size=0x4 (Id=930)
{
    unsigned short Linenumber;// Offset=0x0 Size=0x2
    unsigned short Size;// Offset=0x2 Size=0x2
};

struct ID3DXLoadUserData// Size=0x4 (Id=931)
{
    HRESULT LoadTopLevelData(struct IDirectXFileData * );
    HRESULT LoadFrameChildData(struct _D3DXFRAME * ,struct IDirectXFileData * );
    HRESULT LoadMeshChildData(struct _D3DXMESHCONTAINER * ,struct IDirectXFileData * );
    void ID3DXLoadUserData(struct ID3DXLoadUserData & );
    void ID3DXLoadUserData();
    struct ID3DXLoadUserData & operator=(struct ID3DXLoadUserData & );
};

struct ID3DXLoadUserData// Size=0x4 (Id=932)
{
    HRESULT LoadTopLevelData(struct IDirectXFileData * );
    HRESULT LoadFrameChildData(struct _D3DXFRAME * ,struct IDirectXFileData * );
    HRESULT LoadMeshChildData(struct _D3DXMESHCONTAINER * ,struct IDirectXFileData * );
    void ID3DXLoadUserData(struct ID3DXLoadUserData & );
    void ID3DXLoadUserData();
    struct ID3DXLoadUserData & operator=(struct ID3DXLoadUserData & );
};

struct _IMAGE_RESOURCE_DIRECTORY_STRING// Size=0x4 (Id=933)
{
    unsigned short Length;// Offset=0x0 Size=0x2
    char NameString[1];// Offset=0x2 Size=0x1
};

struct _D3DXBONECOMBINATION// Size=0x18 (Id=934)
{
    unsigned long AttribId;// Offset=0x0 Size=0x4
    unsigned long FaceStart;// Offset=0x4 Size=0x4
    unsigned long FaceCount;// Offset=0x8 Size=0x4
    unsigned long VertexStart;// Offset=0xc Size=0x4
    unsigned long VertexCount;// Offset=0x10 Size=0x4
    unsigned long * BoneId;// Offset=0x14 Size=0x4
};

struct GPUFLOW_INSTRUCTION_PAIR// Size=0xc (Id=935)
{
    unsigned long dword[3];// Offset=0x0 Size=0xc
};

union GPU_BLENDCONTROL// Size=0x4 (Id=936)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long ColorSrcBlend:5;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x5
        unsigned long ColorBlendOp:3;// Offset=0x0 Size=0x4 BitOffset=0x5 BitSize=0x3
        unsigned long ColorDestBlend:5;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x5
        unsigned long AlphaSrcBlend:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long AlphaBlendOp:3;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x3
        unsigned long AlphaDestBlend:5;// Offset=0x0 Size=0x4 BitOffset=0x18 BitSize=0x5
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

struct _D3DTAGCOLLECTION// Size=0x28 (Id=937)
{
    unsigned long long m_Mask[5];// Offset=0x0 Size=0x28
};

struct D3DXVECTOR2_16F// Size=0x4 (Id=938)
{
    void D3DXVECTOR2_16F(struct D3DXVECTOR2_16F & );
    void D3DXVECTOR2_16F(struct D3DXFLOAT16 & ,struct D3DXFLOAT16 & );
    void D3DXVECTOR2_16F(struct D3DXFLOAT16 * );
    void D3DXVECTOR2_16F(float * );
    void D3DXVECTOR2_16F();
    struct D3DXFLOAT16 * operator struct D3DXFLOAT16 *();
    struct D3DXFLOAT16 * operator const struct D3DXFLOAT16 *();
    struct D3DXVECTOR2_16F & operator=(struct D3DXVECTOR2_16F & );
    int operator==(struct D3DXVECTOR2_16F & );
    int operator!=(struct D3DXVECTOR2_16F & );
    struct D3DXFLOAT16 x;// Offset=0x0 Size=0x2
    struct D3DXFLOAT16 y;// Offset=0x2 Size=0x2
};

struct D3DXVECTOR2_16F// Size=0x4 (Id=939)
{
    void D3DXVECTOR2_16F(struct D3DXVECTOR2_16F & );
    void D3DXVECTOR2_16F(struct D3DXFLOAT16 & ,struct D3DXFLOAT16 & );
    void D3DXVECTOR2_16F(struct D3DXFLOAT16 * );
    void D3DXVECTOR2_16F(float * );
    void D3DXVECTOR2_16F();
    struct D3DXFLOAT16 * operator struct D3DXFLOAT16 *();
    struct D3DXFLOAT16 * operator const struct D3DXFLOAT16 *();
    struct D3DXVECTOR2_16F & operator=(struct D3DXVECTOR2_16F & );
    int operator==(struct D3DXVECTOR2_16F & );
    int operator!=(struct D3DXVECTOR2_16F & );
    struct D3DXFLOAT16 x;// Offset=0x0 Size=0x2
    struct D3DXFLOAT16 y;// Offset=0x2 Size=0x2
};

struct XCUSTOMACTION// Size=0x34 (Id=940)
{
    unsigned short wActionId;// Offset=0x0 Size=0x2
    wchar_t wszActionText[23];// Offset=0x2 Size=0x2e
    unsigned long dwFlags;// Offset=0x30 Size=0x4
};

union GPUFLOW_INSTRUCTION// Size=0x8 (Id=941)
{
    unsigned char __align0[4];// Offset=0x0 Size=0x4
    struct // Size=0x4 (Id=0)
    {
        unsigned long Op:4;// Offset=0x4 Size=0x4 BitOffset=0xc BitSize=0x4
    };
    union GPUFLOW_EXEC Exec;// Offset=0x0 Size=0x8
    union GPUFLOW_COND_EXEC CondExec;// Offset=0x0 Size=0x8
    union GPUFLOW_COND_EXEC_PREDS CondExecPreds;// Offset=0x0 Size=0x8
    union GPUFLOW_LOOP_START LoopStart;// Offset=0x0 Size=0x8
    union GPUFLOW_LOOP_END LoopEnd;// Offset=0x0 Size=0x8
    union GPUFLOW_COND_CALL CondCall;// Offset=0x0 Size=0x8
    union GPUFLOW_RETURN Return;// Offset=0x0 Size=0x8
    union GPUFLOW_COND_JUMP CondJump;// Offset=0x0 Size=0x8
    union GPUFLOW_ALLOC Alloc;// Offset=0x0 Size=0x8
    unsigned long dword[2];// Offset=0x0 Size=0x8
};

struct _LUID// Size=0x8 (Id=942)
{
    unsigned long LowPart;// Offset=0x0 Size=0x4
    long HighPart;// Offset=0x4 Size=0x4
};

struct _XALLOC_ATTRIBUTES// Size=0x4 (Id=943)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long dwObjectType:13;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xd
        unsigned long dwHeapTracksAttributes:1;// Offset=0x0 Size=0x4 BitOffset=0xd BitSize=0x1
        unsigned long dwMustSucceed:1;// Offset=0x0 Size=0x4 BitOffset=0xe BitSize=0x1
        unsigned long dwFixedSize:1;// Offset=0x0 Size=0x4 BitOffset=0xf BitSize=0x1
        unsigned long dwAllocatorId:8;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x8
        unsigned long dwAlignment:4;// Offset=0x0 Size=0x4 BitOffset=0x18 BitSize=0x4
        unsigned long dwMemoryProtect:2;// Offset=0x0 Size=0x4 BitOffset=0x1c BitSize=0x2
        unsigned long dwZeroInitialize:1;// Offset=0x0 Size=0x4 BitOffset=0x1e BitSize=0x1
        unsigned long dwMemoryType:1;// Offset=0x0 Size=0x4 BitOffset=0x1f BitSize=0x1
    };
};

union GPU_HOSCONTROL// Size=0x4 (Id=944)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long TessMode:2;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x2
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

struct _D3DXFRAME// Size=0x50 (Id=945)
{
    char * Name;// Offset=0x0 Size=0x4
    struct D3DXMATRIX TransformationMatrix;// Offset=0x4 Size=0x40
    struct _D3DXMESHCONTAINER * pMeshContainer;// Offset=0x44 Size=0x4
    struct _D3DXFRAME * pFrameSibling;// Offset=0x48 Size=0x4
    struct _D3DXFRAME * pFrameFirstChild;// Offset=0x4c Size=0x4
    void _D3DXFRAME();
    struct _D3DXFRAME & operator=(struct _D3DXFRAME & );
};

struct _D3DXMESHCONTAINER// Size=0x24 (Id=946)
{
    char * Name;// Offset=0x0 Size=0x4
    struct _D3DXMESHDATA MeshData;// Offset=0x4 Size=0x8
    struct _D3DXMATERIAL * pMaterials;// Offset=0xc Size=0x4
    struct _D3DXEFFECTINSTANCE * pEffects;// Offset=0x10 Size=0x4
    unsigned long NumMaterials;// Offset=0x14 Size=0x4
    unsigned long * pAdjacency;// Offset=0x18 Size=0x4
    struct ID3DXSkinInfo * pSkinInfo;// Offset=0x1c Size=0x4
    struct _D3DXMESHCONTAINER * pNextMeshContainer;// Offset=0x20 Size=0x4
};

struct ID3DXSaveUserData// Size=0x4 (Id=947)
{
    HRESULT AddFrameChildData(struct _D3DXFRAME * ,struct IDirectXFileSaveObject * ,struct IDirectXFileData * );
    HRESULT AddMeshChildData(struct _D3DXMESHCONTAINER * ,struct IDirectXFileSaveObject * ,struct IDirectXFileData * );
    HRESULT AddTopLevelDataObjectsPre(struct IDirectXFileSaveObject * );
    HRESULT AddTopLevelDataObjectsPost(struct IDirectXFileSaveObject * );
    HRESULT RegisterTemplates(struct IDirectXFile * );
    HRESULT SaveTemplates(struct IDirectXFileSaveObject * );
    void ID3DXSaveUserData(struct ID3DXSaveUserData & );
    void ID3DXSaveUserData();
    struct ID3DXSaveUserData & operator=(struct ID3DXSaveUserData & );
};

struct ID3DXSaveUserData// Size=0x4 (Id=948)
{
    HRESULT AddFrameChildData(struct _D3DXFRAME * ,struct IDirectXFileSaveObject * ,struct IDirectXFileData * );
    HRESULT AddMeshChildData(struct _D3DXMESHCONTAINER * ,struct IDirectXFileSaveObject * ,struct IDirectXFileData * );
    HRESULT AddTopLevelDataObjectsPre(struct IDirectXFileSaveObject * );
    HRESULT AddTopLevelDataObjectsPost(struct IDirectXFileSaveObject * );
    HRESULT RegisterTemplates(struct IDirectXFile * );
    HRESULT SaveTemplates(struct IDirectXFileSaveObject * );
    void ID3DXSaveUserData(struct ID3DXSaveUserData & );
    void ID3DXSaveUserData();
    struct ID3DXSaveUserData & operator=(struct ID3DXSaveUserData & );
};

struct _XUSER_STATS_VIEW// Size=0x10 (Id=949)
{
    unsigned long dwViewId;// Offset=0x0 Size=0x4
    unsigned long dwTotalViewRows;// Offset=0x4 Size=0x4
    unsigned long dwNumRows;// Offset=0x8 Size=0x4
    struct _XUSER_STATS_ROW * pRows;// Offset=0xc Size=0x4
};

struct _D3DRECTPATCH_INFO// Size=0x1c (Id=950)
{
    unsigned int StartVertexOffsetWidth;// Offset=0x0 Size=0x4
    unsigned int StartVertexOffsetHeight;// Offset=0x4 Size=0x4
    unsigned int Width;// Offset=0x8 Size=0x4
    unsigned int Height;// Offset=0xc Size=0x4
    unsigned int Stride;// Offset=0x10 Size=0x4
    enum _D3DBASISTYPE Basis;// Offset=0x14 Size=0x4
    enum _D3DDEGREETYPE Degree;// Offset=0x18 Size=0x4
};

struct _D3DVERTEXELEMENT9// Size=0xc (Id=951)
{
    unsigned short Stream;// Offset=0x0 Size=0x2
    unsigned short Offset;// Offset=0x2 Size=0x2
    unsigned long Type;// Offset=0x4 Size=0x4
    unsigned char Method;// Offset=0x8 Size=0x1
    unsigned char Usage;// Offset=0x9 Size=0x1
    unsigned char UsageIndex;// Offset=0xa Size=0x1
};

struct ID3DXSkinInfo : public IUnknown// Size=0x4 (Id=952)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    HRESULT SetBoneInfluence(unsigned long ,unsigned long ,unsigned long * ,float * );
    unsigned long GetNumBoneInfluences(unsigned long );
    HRESULT GetBoneInfluence(unsigned long ,unsigned long * ,float * );
    HRESULT GetMaxVertexInfluences(unsigned long * );
    unsigned long GetNumBones();
    HRESULT GetMaxFaceInfluences(struct D3DIndexBuffer * ,unsigned long ,unsigned long * );
    HRESULT SetMinBoneInfluence(float );
    float GetMinBoneInfluence();
    HRESULT SetBoneName(unsigned long ,char * );
    char * GetBoneName(unsigned long );
    HRESULT SetBoneOffsetMatrix(unsigned long ,struct D3DXMATRIX * );
    struct D3DXMATRIX * GetBoneOffsetMatrix(unsigned long );
    HRESULT Clone(struct ID3DXSkinInfo ** );
    HRESULT Remap(unsigned long ,unsigned long * );
    HRESULT SetFVF(unsigned long );
    HRESULT SetDeclaration(struct _D3DVERTEXELEMENT9 * );
    unsigned long GetFVF();
    HRESULT GetDeclaration(struct _D3DVERTEXELEMENT9 * );
    HRESULT UpdateSkinnedMesh(struct D3DXMATRIX * ,struct D3DXMATRIX * ,void * ,void * );
    HRESULT ConvertToBlendedMesh(struct ID3DXMesh * ,unsigned long ,unsigned long * ,unsigned long * ,unsigned long * ,struct ID3DXBuffer ** ,unsigned long * ,unsigned long * ,struct ID3DXBuffer ** ,struct ID3DXMesh ** );
    HRESULT ConvertToIndexedBlendedMesh(struct ID3DXMesh * ,unsigned long ,unsigned long ,unsigned long * ,unsigned long * ,unsigned long * ,struct ID3DXBuffer ** ,unsigned long * ,unsigned long * ,struct ID3DXBuffer ** ,struct ID3DXMesh ** );
    void ID3DXSkinInfo(struct ID3DXSkinInfo & );
    void ID3DXSkinInfo();
    struct ID3DXSkinInfo & operator=(struct ID3DXSkinInfo & );
};

struct ID3DXSkinInfo : public IUnknown// Size=0x4 (Id=953)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    HRESULT SetBoneInfluence(unsigned long ,unsigned long ,unsigned long * ,float * );
    unsigned long GetNumBoneInfluences(unsigned long );
    HRESULT GetBoneInfluence(unsigned long ,unsigned long * ,float * );
    HRESULT GetMaxVertexInfluences(unsigned long * );
    unsigned long GetNumBones();
    HRESULT GetMaxFaceInfluences(struct D3DIndexBuffer * ,unsigned long ,unsigned long * );
    HRESULT SetMinBoneInfluence(float );
    float GetMinBoneInfluence();
    HRESULT SetBoneName(unsigned long ,char * );
    char * GetBoneName(unsigned long );
    HRESULT SetBoneOffsetMatrix(unsigned long ,struct D3DXMATRIX * );
    struct D3DXMATRIX * GetBoneOffsetMatrix(unsigned long );
    HRESULT Clone(struct ID3DXSkinInfo ** );
    HRESULT Remap(unsigned long ,unsigned long * );
    HRESULT SetFVF(unsigned long );
    HRESULT SetDeclaration(struct _D3DVERTEXELEMENT9 * );
    unsigned long GetFVF();
    HRESULT GetDeclaration(struct _D3DVERTEXELEMENT9 * );
    HRESULT UpdateSkinnedMesh(struct D3DXMATRIX * ,struct D3DXMATRIX * ,void * ,void * );
    HRESULT ConvertToBlendedMesh(struct ID3DXMesh * ,unsigned long ,unsigned long * ,unsigned long * ,unsigned long * ,struct ID3DXBuffer ** ,unsigned long * ,unsigned long * ,struct ID3DXBuffer ** ,struct ID3DXMesh ** );
    HRESULT ConvertToIndexedBlendedMesh(struct ID3DXMesh * ,unsigned long ,unsigned long ,unsigned long * ,unsigned long * ,unsigned long * ,struct ID3DXBuffer ** ,unsigned long * ,unsigned long * ,struct ID3DXBuffer ** ,struct ID3DXMesh ** );
    void ID3DXSkinInfo(struct ID3DXSkinInfo & );
    void ID3DXSkinInfo();
    struct ID3DXSkinInfo & operator=(struct ID3DXSkinInfo & );
};

struct _D3DXTRACK_DESC// Size=0x20 (Id=954)
{
    enum _D3DXPRIORITY_TYPE Priority;// Offset=0x0 Size=0x4
    float Weight;// Offset=0x4 Size=0x4
    float Speed;// Offset=0x8 Size=0x4
    unsigned char __align0[4];// Offset=0xc Size=0x4
    float Position;// Offset=0x10 Size=0x8
    int Enable;// Offset=0x18 Size=0x4
};

struct _GENERIC_MAPPING// Size=0x10 (Id=955)
{
    unsigned long GenericRead;// Offset=0x0 Size=0x4
    unsigned long GenericWrite;// Offset=0x4 Size=0x4
    unsigned long GenericExecute;// Offset=0x8 Size=0x4
    unsigned long GenericAll;// Offset=0xc Size=0x4
};

struct tagSTATSTG// Size=0x48 (Id=956)
{
    wchar_t * pwcsName;// Offset=0x0 Size=0x4
    unsigned long type;// Offset=0x4 Size=0x4
    union _ULARGE_INTEGER cbSize;// Offset=0x8 Size=0x8
    struct _FILETIME mtime;// Offset=0x10 Size=0x8
    struct _FILETIME ctime;// Offset=0x18 Size=0x8
    struct _FILETIME atime;// Offset=0x20 Size=0x8
    unsigned long grfMode;// Offset=0x28 Size=0x4
    unsigned long grfLocksSupported;// Offset=0x2c Size=0x4
    struct _GUID clsid;// Offset=0x30 Size=0x10
    unsigned long grfStateBits;// Offset=0x40 Size=0x4
    unsigned long reserved;// Offset=0x44 Size=0x4
};

struct _D3DPERFCOUNTER_VALUES// Size=0x1e0 (Id=957)
{
    union _ULARGE_INTEGER CP[1];// Offset=0x0 Size=0x8
    union _ULARGE_INTEGER RBBM[2];// Offset=0x8 Size=0x10
    union _ULARGE_INTEGER SQ[4];// Offset=0x18 Size=0x20
    union _ULARGE_INTEGER VGT[4];// Offset=0x38 Size=0x20
    union _ULARGE_INTEGER VC[4];// Offset=0x58 Size=0x20
    union _ULARGE_INTEGER PA_SU[4];// Offset=0x78 Size=0x20
    union _ULARGE_INTEGER PA_SC[4];// Offset=0x98 Size=0x20
    union _ULARGE_INTEGER HZ[2];// Offset=0xb8 Size=0x10
    union _ULARGE_INTEGER TCR[2];// Offset=0xc8 Size=0x10
    union _ULARGE_INTEGER TCM[2];// Offset=0xd8 Size=0x10
    union _ULARGE_INTEGER TCF[12];// Offset=0xe8 Size=0x60
    union _ULARGE_INTEGER TP0[2];// Offset=0x148 Size=0x10
    union _ULARGE_INTEGER TP1[2];// Offset=0x158 Size=0x10
    union _ULARGE_INTEGER TP2[2];// Offset=0x168 Size=0x10
    union _ULARGE_INTEGER TP3[2];// Offset=0x178 Size=0x10
    union _ULARGE_INTEGER SX[1];// Offset=0x188 Size=0x8
    union _ULARGE_INTEGER BC[4];// Offset=0x190 Size=0x20
    union _ULARGE_INTEGER MC0[1];// Offset=0x1b0 Size=0x8
    union _ULARGE_INTEGER MC1[1];// Offset=0x1b8 Size=0x8
    union _ULARGE_INTEGER MH[3];// Offset=0x1c0 Size=0x18
    union _ULARGE_INTEGER BIF[1];// Offset=0x1d8 Size=0x8
};

struct _TOKEN_PRIVILEGES// Size=0x10 (Id=958)
{
    unsigned long PrivilegeCount;// Offset=0x0 Size=0x4
    struct _LUID_AND_ATTRIBUTES Privileges[1];// Offset=0x4 Size=0xc
};

struct _STRING_VERIFY_RESPONSE// Size=0x6 (Id=959)
{
    unsigned short wNumStrings;// Offset=0x0 Size=0x2
    HRESULT * pStringResult;// Offset=0x2 Size=0x4
};

struct _D3DPWLGAMMAENTRY// Size=0x4 (Id=960)
{
    unsigned short Base;// Offset=0x0 Size=0x2
    unsigned short Delta;// Offset=0x2 Size=0x2
};

struct D3DXVECTOR4// Size=0x10 (Id=961)
{
    void D3DXVECTOR4(float ,float ,float ,float );
    void D3DXVECTOR4(struct D3DXFLOAT16 * );
    void D3DXVECTOR4(float * );
    void D3DXVECTOR4();
    float * operator float *();
    float * operator const float *();
    struct D3DXVECTOR4 & operator=(struct D3DXVECTOR4 & );
    struct D3DXVECTOR4 & operator+=(struct D3DXVECTOR4 & );
    struct D3DXVECTOR4 & operator-=(struct D3DXVECTOR4 & );
    struct D3DXVECTOR4 & operator*=(float );
    struct D3DXVECTOR4 & operator/=(float );
    struct D3DXVECTOR4 operator+(struct D3DXVECTOR4 & );
    struct D3DXVECTOR4 operator+();
    struct D3DXVECTOR4 operator-(struct D3DXVECTOR4 & );
    struct D3DXVECTOR4 operator-();
    struct D3DXVECTOR4 operator*(float );
    struct D3DXVECTOR4 operator/(float );
    int operator==(struct D3DXVECTOR4 & );
    int operator!=(struct D3DXVECTOR4 & );
    float x;// Offset=0x0 Size=0x4
    float y;// Offset=0x4 Size=0x4
    float z;// Offset=0x8 Size=0x4
    float w;// Offset=0xc Size=0x4
};

union GPUFLOW_COND_EXEC// Size=0x8 (Id=962)
{
    struct // Size=0x8 (Id=0)
    {
        unsigned long Address:12;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xc
        unsigned long Count:3;// Offset=0x0 Size=0x4 BitOffset=0xc BitSize=0x3
        unsigned long Yield:1;// Offset=0x0 Size=0x4 BitOffset=0xf BitSize=0x1
        unsigned long TypeAndSerialize:12;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0xc
        unsigned long VertexCacheLow:4;// Offset=0x0 Size=0x4 BitOffset=0x1c BitSize=0x4
        unsigned long VertexCacheHigh:2;// Offset=0x4 Size=0x4 BitOffset=0x0 BitSize=0x2
        unsigned long BooleanAddress:8;// Offset=0x4 Size=0x4 BitOffset=0x2 BitSize=0x8
        unsigned long Condition:1;// Offset=0x4 Size=0x4 BitOffset=0xa BitSize=0x1
        unsigned long AbsoluteAddressing:1;// Offset=0x4 Size=0x4 BitOffset=0xb BitSize=0x1
        unsigned long Op:4;// Offset=0x4 Size=0x4 BitOffset=0xc BitSize=0x4
    };
};

struct _IMAGE_OS2_HEADER// Size=0x40 (Id=963)
{
    unsigned short ne_magic;// Offset=0x0 Size=0x2
    char ne_ver;// Offset=0x2 Size=0x1
    char ne_rev;// Offset=0x3 Size=0x1
    unsigned short ne_enttab;// Offset=0x4 Size=0x2
    unsigned short ne_cbenttab;// Offset=0x6 Size=0x2
    long ne_crc;// Offset=0x8 Size=0x4
    unsigned short ne_flags;// Offset=0xc Size=0x2
    unsigned short ne_autodata;// Offset=0xe Size=0x2
    unsigned short ne_heap;// Offset=0x10 Size=0x2
    unsigned short ne_stack;// Offset=0x12 Size=0x2
    long ne_csip;// Offset=0x14 Size=0x4
    long ne_sssp;// Offset=0x18 Size=0x4
    unsigned short ne_cseg;// Offset=0x1c Size=0x2
    unsigned short ne_cmod;// Offset=0x1e Size=0x2
    unsigned short ne_cbnrestab;// Offset=0x20 Size=0x2
    unsigned short ne_segtab;// Offset=0x22 Size=0x2
    unsigned short ne_rsrctab;// Offset=0x24 Size=0x2
    unsigned short ne_restab;// Offset=0x26 Size=0x2
    unsigned short ne_modtab;// Offset=0x28 Size=0x2
    unsigned short ne_imptab;// Offset=0x2a Size=0x2
    long ne_nrestab;// Offset=0x2c Size=0x4
    unsigned short ne_cmovent;// Offset=0x30 Size=0x2
    unsigned short ne_align;// Offset=0x32 Size=0x2
    unsigned short ne_cres;// Offset=0x34 Size=0x2
    unsigned char ne_exetyp;// Offset=0x36 Size=0x1
    unsigned char ne_flagsothers;// Offset=0x37 Size=0x1
    unsigned short ne_pretthunks;// Offset=0x38 Size=0x2
    unsigned short ne_psegrefbytes;// Offset=0x3a Size=0x2
    unsigned short ne_swaparea;// Offset=0x3c Size=0x2
    unsigned short ne_expver;// Offset=0x3e Size=0x2
};

struct XMVECTORU32// Size=0x10 (Id=964)
{
    union // Size=0x10 (Id=0)
    {
        unsigned int u[4];// Offset=0x0 Size=0x10
        struct __vector4 v;// Offset=0x0 Size=0x10
    };
    struct __vector4 operator struct __vector4();
};

struct XMVECTORU32// Size=0x10 (Id=965)
{
    union // Size=0x10 (Id=0)
    {
        unsigned int u[4];// Offset=0x0 Size=0x10
        struct __vector4 v;// Offset=0x0 Size=0x10
    };
    struct __vector4 operator struct __vector4();
};

struct _IMAGE_IMPORT_DESCRIPTOR// Size=0x14 (Id=966)
{
    union // Size=0x4 (Id=0)
    {
        unsigned long Characteristics;// Offset=0x0 Size=0x4
        unsigned long OriginalFirstThunk;// Offset=0x0 Size=0x4
    };
    unsigned long TimeDateStamp;// Offset=0x4 Size=0x4
    unsigned long ForwarderChain;// Offset=0x8 Size=0x4
    unsigned long Name;// Offset=0xc Size=0x4
    unsigned long FirstThunk;// Offset=0x10 Size=0x4
};

struct _EXCEPTION_REGISTRATION_RECORD// Size=0x0 (Id=967)
{
};

struct _NT_TIB// Size=0x1c (Id=968)
{
    struct _EXCEPTION_REGISTRATION_RECORD * ExceptionList;// Offset=0x0 Size=0x4
    void * StackBase;// Offset=0x4 Size=0x4
    void * StackLimit;// Offset=0x8 Size=0x4
    void * SubSystemTib;// Offset=0xc Size=0x4
    union // Size=0x4 (Id=0)
    {
        void * FiberData;// Offset=0x10 Size=0x4
        unsigned long Version;// Offset=0x10 Size=0x4
    };
    void * ArbitraryUserPointer;// Offset=0x14 Size=0x4
    struct _NT_TIB * Self;// Offset=0x18 Size=0x4
};

struct _IMAGE_TLS_DIRECTORY32// Size=0x18 (Id=969)
{
    unsigned long StartAddressOfRawData;// Offset=0x0 Size=0x4
    unsigned long EndAddressOfRawData;// Offset=0x4 Size=0x4
    unsigned long AddressOfIndex;// Offset=0x8 Size=0x4
    unsigned long AddressOfCallBacks;// Offset=0xc Size=0x4
    unsigned long SizeOfZeroFill;// Offset=0x10 Size=0x4
    unsigned long Characteristics;// Offset=0x14 Size=0x4
};

union BIUPERFCOUNTER_VALUE// Size=0x8 (Id=970)
{
    struct // Size=0x8 (Id=0)
    {
        unsigned long Low:32;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x20
        unsigned long High:16;// Offset=0x4 Size=0x4 BitOffset=0x0 BitSize=0x10
    };
    union _ULARGE_INTEGER qword;// Offset=0x0 Size=0x8
};

struct ID3DXLine : public IUnknown// Size=0x4 (Id=971)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    HRESULT GetDevice(struct D3DDevice ** );
    HRESULT Begin();
    HRESULT Draw(struct D3DXVECTOR2 * ,unsigned long ,unsigned long );
    HRESULT DrawTransform(struct D3DXVECTOR3 * ,unsigned long ,struct D3DXMATRIX * ,unsigned long );
    HRESULT SetPattern(unsigned long );
    unsigned long GetPattern();
    HRESULT SetPatternScale(float );
    float GetPatternScale();
    HRESULT SetWidth(float );
    float GetWidth();
    HRESULT SetAntialias(int );
    int GetAntialias();
    HRESULT SetGLLines(int );
    int GetGLLines();
    HRESULT End();
    HRESULT OnLostDevice();
    HRESULT OnResetDevice();
    void ID3DXLine(struct ID3DXLine & );
    void ID3DXLine();
    struct ID3DXLine & operator=(struct ID3DXLine & );
};

struct ID3DXLine : public IUnknown// Size=0x4 (Id=972)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    HRESULT GetDevice(struct D3DDevice ** );
    HRESULT Begin();
    HRESULT Draw(struct D3DXVECTOR2 * ,unsigned long ,unsigned long );
    HRESULT DrawTransform(struct D3DXVECTOR3 * ,unsigned long ,struct D3DXMATRIX * ,unsigned long );
    HRESULT SetPattern(unsigned long );
    unsigned long GetPattern();
    HRESULT SetPatternScale(float );
    float GetPatternScale();
    HRESULT SetWidth(float );
    float GetWidth();
    HRESULT SetAntialias(int );
    int GetAntialias();
    HRESULT SetGLLines(int );
    int GetGLLines();
    HRESULT End();
    HRESULT OnLostDevice();
    HRESULT OnResetDevice();
    void ID3DXLine(struct ID3DXLine & );
    void ID3DXLine();
    struct ID3DXLine & operator=(struct ID3DXLine & );
};

struct _D3DPERFCOUNTER_EVENTS// Size=0xf0 (Id=973)
{
    enum GPUPERFEVENT_CP CP[1];// Offset=0x0 Size=0x4
    enum GPUPERFEVENT_RBBM RBBM[2];// Offset=0x4 Size=0x8
    enum GPUPERFEVENT_SQ SQ[4];// Offset=0xc Size=0x10
    enum GPUPERFEVENT_VGT VGT[4];// Offset=0x1c Size=0x10
    enum GPUPERFEVENT_VC VC[4];// Offset=0x2c Size=0x10
    enum GPUPERFEVENT_PA_SU PA_SU[4];// Offset=0x3c Size=0x10
    enum GPUPERFEVENT_PA_SC PA_SC[4];// Offset=0x4c Size=0x10
    enum GPUPERFEVENT_HZ HZ[2];// Offset=0x5c Size=0x8
    enum GPUPERFEVENT_TCR TCR[2];// Offset=0x64 Size=0x8
    enum GPUPERFEVENT_TCM TCM[2];// Offset=0x6c Size=0x8
    enum GPUPERFEVENT_TCF TCF[12];// Offset=0x74 Size=0x30
    enum GPUPERFEVENT_TP TP0[2];// Offset=0xa4 Size=0x8
    enum GPUPERFEVENT_TP TP1[2];// Offset=0xac Size=0x8
    enum GPUPERFEVENT_TP TP2[2];// Offset=0xb4 Size=0x8
    enum GPUPERFEVENT_TP TP3[2];// Offset=0xbc Size=0x8
    enum GPUPERFEVENT_SX SX[1];// Offset=0xc4 Size=0x4
    enum GPUPERFEVENT_BC BC[4];// Offset=0xc8 Size=0x10
    enum GPUPERFEVENT_MC MC0[1];// Offset=0xd8 Size=0x4
    enum GPUPERFEVENT_MC MC1[1];// Offset=0xdc Size=0x4
    enum GPUPERFEVENT_MH MH[3];// Offset=0xe0 Size=0xc
    enum GPUPERFEVENT_BIF BIF[1];// Offset=0xec Size=0x4
};

union GPUSHADER_INSTRUCTION// Size=0xc (Id=974)
{
    union GPUTEXTURE_FETCH_INSTRUCTION TextureFetch;// Offset=0x0 Size=0xc
    union GPUVERTEX_FETCH_INSTRUCTION VertexFetch;// Offset=0x0 Size=0xc
    union GPUFLOW_INSTRUCTION Flow0;// Offset=0x0 Size=0x8
    struct GPUFLOW_INSTRUCTION_PAIR FlowPair;// Offset=0x0 Size=0xc
    union GPUALU_INSTRUCTION Alu;// Offset=0x0 Size=0xc
};

struct _CRT_FLOAT// Size=0x4 (Id=975)
{
    float f;// Offset=0x0 Size=0x4
};

struct _D3DRECT// Size=0x10 (Id=976)
{
    long x1;// Offset=0x0 Size=0x4
    long y1;// Offset=0x4 Size=0x4
    long x2;// Offset=0x8 Size=0x4
    long y2;// Offset=0xc Size=0x4
};

struct _LDOUBLE// Size=0xa (Id=977)
{
    unsigned char ld[10];// Offset=0x0 Size=0xa
};

union GPUCOMMAND_DRAW_IMMEDIATE// Size=0x8 (Id=978)
{
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            unsigned long PrimType:6;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x6
            unsigned long SrcSelect:2;// Offset=0x0 Size=0x4 BitOffset=0x6 BitSize=0x2
            unsigned long MajorMode:3;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x3
            unsigned long IndexType:1;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x1
            unsigned long NotEndOfPacket:1;// Offset=0x0 Size=0x4 BitOffset=0xc BitSize=0x1
            unsigned long NumIndices:16;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x10
        };
        unsigned short Index16[0];
        unsigned long Index32[0];
        unsigned long dword[1];// Offset=0x0 Size=0x4
    };
};

union GPU_POINTMINMAX// Size=0x4 (Id=979)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long MinSize:16;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x10
        unsigned long MaxSize:16;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x10
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

struct _XMICON4// Size=0x8 (Id=980)
{
    union // Size=0x8 (Id=0)
    {
        struct // Size=0x8 (Id=0)
        {
            long long x:20;// Offset=0x0 Size=0x8 BitOffset=0x0 BitSize=0x14
            long long y:20;// Offset=0x0 Size=0x8 BitOffset=0x14 BitSize=0x14
            long long z:20;// Offset=0x0 Size=0x8 BitOffset=0x28 BitSize=0x14
            long long w:4;// Offset=0x0 Size=0x8 BitOffset=0x3c BitSize=0x4
        };
        unsigned long long v;// Offset=0x0 Size=0x8
    };
    void _XMICON4(float * );
    void _XMICON4(float ,float ,float ,float );
    void _XMICON4(unsigned long long );
    void _XMICON4();
    unsigned long long operator unsigned __int64();
    struct _XMICON4 & operator=(const unsigned long long );
    struct _XMICON4 & operator=(struct _XMICON4 & );
};

struct _XMICON4// Size=0x8 (Id=981)
{
    union // Size=0x8 (Id=0)
    {
        struct // Size=0x8 (Id=0)
        {
            long long x:20;// Offset=0x0 Size=0x8 BitOffset=0x0 BitSize=0x14
            long long y:20;// Offset=0x0 Size=0x8 BitOffset=0x14 BitSize=0x14
            long long z:20;// Offset=0x0 Size=0x8 BitOffset=0x28 BitSize=0x14
            long long w:4;// Offset=0x0 Size=0x8 BitOffset=0x3c BitSize=0x4
        };
        unsigned long long v;// Offset=0x0 Size=0x8
    };
    void _XMICON4(float * );
    void _XMICON4(float ,float ,float ,float );
    void _XMICON4(unsigned long long );
    void _XMICON4();
    unsigned long long operator unsigned __int64();
    struct _XMICON4 & operator=(const unsigned long long );
    struct _XMICON4 & operator=(struct _XMICON4 & );
};

struct ip_mreq// Size=0x8 (Id=982)
{
    struct in_addr imr_multiaddr;// Offset=0x0 Size=0x4
    struct in_addr imr_interface;// Offset=0x4 Size=0x4
};

union GPU_WAITUNTIL// Size=0x4 (Id=983)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long WaitCrtcPFlip:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long WaitReCrtcVLine:1;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x1
        unsigned long WaitFeCrtcVLine:1;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x1
        unsigned long WaitCrtcVLine:1;// Offset=0x0 Size=0x4 BitOffset=0x3 BitSize=0x1
        unsigned long WaitCpDmaIdle:1;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x1
        unsigned long WaitCmdFifo:1;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0x1
        unsigned long WaitOvFlip:1;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x1
        unsigned long WaitIdle:1;// Offset=0x0 Size=0x4 BitOffset=0xf BitSize=0x1
        unsigned long WaitIdleClean:1;// Offset=0x0 Size=0x4 BitOffset=0x11 BitSize=0x1
        unsigned long CmdFifoEntries:4;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0x4
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

struct _XMSHORT2// Size=0x4 (Id=984)
{
    short x;// Offset=0x0 Size=0x2
    short y;// Offset=0x2 Size=0x2
    void _XMSHORT2(float * );
    void _XMSHORT2(float ,float );
    void _XMSHORT2(short * );
    void _XMSHORT2(short ,short );
    void _XMSHORT2();
    struct _XMSHORT2 & operator=(struct _XMSHORT2 & );
};

struct _XMSHORT2// Size=0x4 (Id=985)
{
    short x;// Offset=0x0 Size=0x2
    short y;// Offset=0x2 Size=0x2
    void _XMSHORT2(float * );
    void _XMSHORT2(float ,float );
    void _XMSHORT2(short * );
    void _XMSHORT2(short ,short );
    void _XMSHORT2();
    struct _XMSHORT2 & operator=(struct _XMSHORT2 & );
};

struct _D3DVSHADERCAPS2_0// Size=0x10 (Id=986)
{
    unsigned long Caps;// Offset=0x0 Size=0x4
    int DynamicFlowControlDepth;// Offset=0x4 Size=0x4
    int NumTemps;// Offset=0x8 Size=0x4
    int StaticFlowControlDepth;// Offset=0xc Size=0x4
};

struct _EXCEPTION_RECORD64// Size=0x98 (Id=987)
{
    unsigned long ExceptionCode;// Offset=0x0 Size=0x4
    unsigned long ExceptionFlags;// Offset=0x4 Size=0x4
    unsigned long long ExceptionRecord;// Offset=0x8 Size=0x8
    unsigned long long ExceptionAddress;// Offset=0x10 Size=0x8
    unsigned long NumberParameters;// Offset=0x18 Size=0x4
    unsigned long __unusedAlignment;// Offset=0x1c Size=0x4
    unsigned long long ExceptionInformation[15];// Offset=0x20 Size=0x78
};

union GPUCOMMAND_WAIT_REG_MEM// Size=0x14 (Id=988)
{
    struct // Size=0x14 (Id=0)
    {
        unsigned long Function:3;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x3
        unsigned long MemSpace:1;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x1
        union // Size=0x8 (Id=0)
        {
            unsigned long Endian:2;// Offset=0x4 Size=0x4 BitOffset=0x0 BitSize=0x2
            unsigned long Address:30;// Offset=0x4 Size=0x4 BitOffset=0x2 BitSize=0x1e
            unsigned long Register:15;// Offset=0x4 Size=0x4 BitOffset=0x0 BitSize=0xf
        };
        unsigned long Reference:32;// Offset=0x8 Size=0x4 BitOffset=0x0 BitSize=0x20
        unsigned long Mask:32;// Offset=0xc Size=0x4 BitOffset=0x0 BitSize=0x20
        unsigned long WaitInterval:16;// Offset=0x10 Size=0x4 BitOffset=0x0 BitSize=0x10
    };
    unsigned long dword[5];// Offset=0x0 Size=0x14
};

struct _XGSHADER_CONSTANT_MASKS// Size=0x10 (Id=989)
{
    unsigned long long u64BitAluConstants;// Offset=0x0 Size=0x8
    unsigned long long u64BitFlowConstants;// Offset=0x8 Size=0x8
};

union GPUCOMMAND_LOAD_SHADER// Size=0x8 (Id=990)
{
    struct // Size=0x8 (Id=0)
    {
        unsigned long Type:2;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x2
        unsigned long Address:27;// Offset=0x0 Size=0x4 BitOffset=0x5 BitSize=0x1b
        unsigned long Size:14;// Offset=0x4 Size=0x4 BitOffset=0x0 BitSize=0xe
        unsigned long Start:12;// Offset=0x4 Size=0x4 BitOffset=0x10 BitSize=0xc
    };
    unsigned long dword[2];// Offset=0x0 Size=0x8
};

struct IDirectXFileDataReference : public IDirectXFileObject// Size=0x4 (Id=991)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    HRESULT GetName(char * ,unsigned long * );
    HRESULT GetId(struct _GUID * );
    HRESULT Resolve(struct IDirectXFileData ** );
    void IDirectXFileDataReference(struct IDirectXFileDataReference & );
    void IDirectXFileDataReference();
    struct IDirectXFileDataReference & operator=(struct IDirectXFileDataReference & );
};

struct IDirectXFileDataReference : public IDirectXFileObject// Size=0x4 (Id=992)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    HRESULT GetName(char * ,unsigned long * );
    HRESULT GetId(struct _GUID * );
    HRESULT Resolve(struct IDirectXFileData ** );
    void IDirectXFileDataReference(struct IDirectXFileDataReference & );
    void IDirectXFileDataReference();
    struct IDirectXFileDataReference & operator=(struct IDirectXFileDataReference & );
};

struct _LUID_AND_ATTRIBUTES// Size=0xc (Id=993)
{
    struct _LUID Luid;// Offset=0x0 Size=0x8
    unsigned long Attributes;// Offset=0x8 Size=0x4
};

struct _SID// Size=0xc (Id=994)
{
    unsigned char Revision;// Offset=0x0 Size=0x1
    unsigned char SubAuthorityCount;// Offset=0x1 Size=0x1
    struct _SID_IDENTIFIER_AUTHORITY IdentifierAuthority;// Offset=0x2 Size=0x6
    unsigned long SubAuthority[1];// Offset=0x8 Size=0x4
};

struct _OBJECT_TYPE_LIST// Size=0x8 (Id=995)
{
    unsigned short Level;// Offset=0x0 Size=0x2
    unsigned short Sbz;// Offset=0x2 Size=0x2
    struct _GUID * ObjectType;// Offset=0x4 Size=0x4
};

struct _TIME_ZONE_INFORMATION// Size=0xac (Id=996)
{
    long Bias;// Offset=0x0 Size=0x4
    wchar_t StandardName[32];// Offset=0x4 Size=0x40
    struct _SYSTEMTIME StandardDate;// Offset=0x44 Size=0x10
    long StandardBias;// Offset=0x54 Size=0x4
    wchar_t DaylightName[32];// Offset=0x58 Size=0x40
    struct _SYSTEMTIME DaylightDate;// Offset=0x98 Size=0x10
    long DaylightBias;// Offset=0xa8 Size=0x4
};

struct _D3DDEVINFO_VCACHE// Size=0x10 (Id=997)
{
    unsigned long Pattern;// Offset=0x0 Size=0x4
    unsigned long OptMethod;// Offset=0x4 Size=0x4
    unsigned long CacheSize;// Offset=0x8 Size=0x4
    unsigned long MagicNumber;// Offset=0xc Size=0x4
};

struct _D3DXKEY_CALLBACK// Size=0x8 (Id=998)
{
    float Time;// Offset=0x0 Size=0x4
    void * pCallbackData;// Offset=0x4 Size=0x4
};

union GPU_CPUINTERRUPTACK// Size=0x4 (Id=999)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long Cpu0Ack:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long Cpu1Ack:1;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x1
        unsigned long Cpu2Ack:1;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x1
        unsigned long Cpu3Ack:1;// Offset=0x0 Size=0x4 BitOffset=0x3 BitSize=0x1
        unsigned long Cpu4Ack:1;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x1
        unsigned long Cpu5Ack:1;// Offset=0x0 Size=0x4 BitOffset=0x5 BitSize=0x1
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

class D3DXps// Size=0x190 (Id=1000)
{
    private unsigned long m_Reserved[100];// Offset=0x0 Size=0x190
    public void D3DXps(struct D3DXpsThread * );
    public void ~D3DXps();
    public void * Allocate(unsigned long ,unsigned long );
    public void DrawVertices(enum _D3DPRIMITIVETYPE ,unsigned long ,void * );
    public void DrawIndexedVertices(enum _D3DPRIMITIVETYPE ,unsigned long ,void * ,enum _D3DFORMAT ,void * );
    public void KickOff();
    public int KickOffAndGet(unsigned long * );
    public void * __vecDelDtor(unsigned int );
};

struct _D3DGAMMARAMP// Size=0x600 (Id=1001)
{
    unsigned short red[256];// Offset=0x0 Size=0x200
    unsigned short green[256];// Offset=0x200 Size=0x200
    unsigned short blue[256];// Offset=0x400 Size=0x200
};

struct _D3DPWLGAMMA// Size=0x600 (Id=1002)
{
    struct _D3DPWLGAMMAENTRY red[128];// Offset=0x0 Size=0x200
    struct _D3DPWLGAMMAENTRY green[128];// Offset=0x200 Size=0x200
    struct _D3DPWLGAMMAENTRY blue[128];// Offset=0x400 Size=0x200
};

struct _D3DSURFACE_PARAMETERS// Size=0x10 (Id=1003)
{
    unsigned long Base;// Offset=0x0 Size=0x4
    unsigned long HierarchicalZBase;// Offset=0x4 Size=0x4
    int ColorExpBias;// Offset=0x8 Size=0x4
    enum _D3DHIZFUNC HiZFunc;// Offset=0xc Size=0x4
};

struct _D3DRECT// Size=0x10 (Id=1004)
{
    long x1;// Offset=0x0 Size=0x4
    long y1;// Offset=0x4 Size=0x4
    long x2;// Offset=0x8 Size=0x4
    long y2;// Offset=0xc Size=0x4
};

struct _D3DVIEWPORT9// Size=0x18 (Id=1005)
{
    unsigned long X;// Offset=0x0 Size=0x4
    unsigned long Y;// Offset=0x4 Size=0x4
    unsigned long Width;// Offset=0x8 Size=0x4
    unsigned long Height;// Offset=0xc Size=0x4
    float MinZ;// Offset=0x10 Size=0x4
    float MaxZ;// Offset=0x14 Size=0x4
};

struct _D3DPOINT// Size=0x8 (Id=1006)
{
    long x;// Offset=0x0 Size=0x4
    long y;// Offset=0x4 Size=0x4
};

struct _D3DRESOLVE_PARAMETERS// Size=0xc (Id=1007)
{
    enum _D3DFORMAT ColorFormat;// Offset=0x0 Size=0x4
    int ColorExpBias;// Offset=0x4 Size=0x4
    enum _D3DFORMAT DepthFormat;// Offset=0x8 Size=0x4
};

struct _D3DVIDEO_SCALER_PARAMETERS// Size=0x1c (Id=1008)
{
    struct _D3DRECT ScalerSourceRect;// Offset=0x0 Size=0x10
    unsigned long ScaledOutputWidth;// Offset=0x10 Size=0x4
    unsigned long ScaledOutputHeight;// Offset=0x14 Size=0x4
    unsigned long FilterProfile;// Offset=0x18 Size=0x4
};

struct _D3DRING_BUFFER_PARAMETERS// Size=0x18 (Id=1009)
{
    unsigned long Flags;// Offset=0x0 Size=0x4
    unsigned long PrimarySize;// Offset=0x4 Size=0x4
    void * pPrimary;// Offset=0x8 Size=0x4
    unsigned long SecondarySize;// Offset=0xc Size=0x4
    void * pSecondary;// Offset=0x10 Size=0x4
    unsigned long SegmentCount;// Offset=0x14 Size=0x4
};

struct _D3DPERFCOUNTER_EVENTS// Size=0xf0 (Id=1010)
{
    enum GPUPERFEVENT_CP CP[1];// Offset=0x0 Size=0x4
    enum GPUPERFEVENT_RBBM RBBM[2];// Offset=0x4 Size=0x8
    enum GPUPERFEVENT_SQ SQ[4];// Offset=0xc Size=0x10
    enum GPUPERFEVENT_VGT VGT[4];// Offset=0x1c Size=0x10
    enum GPUPERFEVENT_VC VC[4];// Offset=0x2c Size=0x10
    enum GPUPERFEVENT_PA_SU PA_SU[4];// Offset=0x3c Size=0x10
    enum GPUPERFEVENT_PA_SC PA_SC[4];// Offset=0x4c Size=0x10
    enum GPUPERFEVENT_HZ HZ[2];// Offset=0x5c Size=0x8
    enum GPUPERFEVENT_TCR TCR[2];// Offset=0x64 Size=0x8
    enum GPUPERFEVENT_TCM TCM[2];// Offset=0x6c Size=0x8
    enum GPUPERFEVENT_TCF TCF[12];// Offset=0x74 Size=0x30
    enum GPUPERFEVENT_TP TP0[2];// Offset=0xa4 Size=0x8
    enum GPUPERFEVENT_TP TP1[2];// Offset=0xac Size=0x8
    enum GPUPERFEVENT_TP TP2[2];// Offset=0xb4 Size=0x8
    enum GPUPERFEVENT_TP TP3[2];// Offset=0xbc Size=0x8
    enum GPUPERFEVENT_SX SX[1];// Offset=0xc4 Size=0x4
    enum GPUPERFEVENT_BC BC[4];// Offset=0xc8 Size=0x10
    enum GPUPERFEVENT_MC MC0[1];// Offset=0xd8 Size=0x4
    enum GPUPERFEVENT_MC MC1[1];// Offset=0xdc Size=0x4
    enum GPUPERFEVENT_MH MH[3];// Offset=0xe0 Size=0xc
    enum GPUPERFEVENT_BIF BIF[1];// Offset=0xec Size=0x4
};

struct _D3DSURFACES// Size=0x14 (Id=1011)
{
    struct D3DSurface * pDepthStencilSurface;// Offset=0x0 Size=0x4
    struct D3DSurface * pRenderTarget[4];// Offset=0x4 Size=0x10
};

struct _D3DTAGCOLLECTION// Size=0x28 (Id=1012)
{
    unsigned long long m_Mask[5];// Offset=0x0 Size=0x28
};

struct _D3DVIEWPORTF9// Size=0x1c (Id=1013)
{
    float X;// Offset=0x0 Size=0x4
    float Y;// Offset=0x4 Size=0x4
    float Width;// Offset=0x8 Size=0x4
    float Height;// Offset=0xc Size=0x4
    float MinZ;// Offset=0x10 Size=0x4
    float MaxZ;// Offset=0x14 Size=0x4
    unsigned long Flags;// Offset=0x18 Size=0x4
};

struct GPUFLOW_CONSTANTS// Size=0xa0 (Id=1014)
{
    union // Size=0xa0 (Id=0)
    {
        unsigned long FlowConstant[40];// Offset=0x0 Size=0xa0
        unsigned long BooleanConstant[8];// Offset=0x0 Size=0x20
        unsigned long IntegerConstant[32];// Offset=0x20 Size=0x80
    };
};

union GPU_COLORMASK// Size=0x4 (Id=1015)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long Write0:4;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x4
        unsigned long Write1:4;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x4
        unsigned long Write2:4;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x4
        unsigned long Write3:4;// Offset=0x0 Size=0x4 BitOffset=0xc BitSize=0x4
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

union GPU_BLENDCONTROL// Size=0x4 (Id=1016)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long ColorSrcBlend:5;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x5
        unsigned long ColorBlendOp:3;// Offset=0x0 Size=0x4 BitOffset=0x5 BitSize=0x3
        unsigned long ColorDestBlend:5;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x5
        unsigned long AlphaSrcBlend:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long AlphaBlendOp:3;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x3
        unsigned long AlphaDestBlend:5;// Offset=0x0 Size=0x4 BitOffset=0x18 BitSize=0x5
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

union GPU_COLORCONTROL// Size=0x4 (Id=1017)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long AlphaFunc:3;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x3
        unsigned long AlphaTestEnable:1;// Offset=0x0 Size=0x4 BitOffset=0x3 BitSize=0x1
        unsigned long AlphaToMaskEnable:1;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x1
        unsigned long AlphaToMaskOffset0:2;// Offset=0x0 Size=0x4 BitOffset=0x18 BitSize=0x2
        unsigned long AlphaToMaskOffset1:2;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x2
        unsigned long AlphaToMaskOffset2:2;// Offset=0x0 Size=0x4 BitOffset=0x1c BitSize=0x2
        unsigned long AlphaToMaskOffset3:2;// Offset=0x0 Size=0x4 BitOffset=0x1e BitSize=0x2
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

struct D3DDevice// Size=0x2a80 (Id=1018)
{
    unsigned long AddRef();
    unsigned long Release();
    HRESULT GetDirect3D(struct Direct3D ** );
    HRESULT GetDeviceCaps(struct _D3DCAPS9 * );
    HRESULT GetDisplayMode(unsigned int ,struct _D3DDISPLAYMODE * );
    HRESULT GetCreationParameters(struct _D3DDEVICE_CREATION_PARAMETERS * );
    HRESULT Reset(struct _D3DPRESENT_PARAMETERS_ * );
    HRESULT Present(struct tagRECT * ,struct tagRECT * ,void * ,void * );
    HRESULT GetRasterStatus(unsigned int ,struct _D3DRASTER_STATUS * );
    void SetGammaRamp(unsigned int ,unsigned long ,struct _D3DGAMMARAMP * );
    void GetGammaRamp(unsigned int ,struct _D3DGAMMARAMP * );
    void SetPWLGamma(unsigned long ,struct _D3DPWLGAMMA * );
    void GetPWLGamma(struct _D3DPWLGAMMA * );
    HRESULT CreateTexture(unsigned int ,unsigned int ,unsigned int ,unsigned long ,enum _D3DFORMAT ,unsigned long ,struct D3DTexture ** ,void ** );
    HRESULT CreateVolumeTexture(unsigned int ,unsigned int ,unsigned int ,unsigned int ,unsigned long ,enum _D3DFORMAT ,unsigned long ,struct D3DVolumeTexture ** ,void ** );
    HRESULT CreateCubeTexture(unsigned int ,unsigned int ,unsigned long ,enum _D3DFORMAT ,unsigned long ,struct D3DCubeTexture ** ,void ** );
    HRESULT CreateArrayTexture(unsigned int ,unsigned int ,unsigned int ,unsigned int ,unsigned long ,enum _D3DFORMAT ,unsigned long ,struct D3DArrayTexture ** ,void ** );
    HRESULT CreateLineTexture(unsigned int ,unsigned int ,unsigned long ,enum _D3DFORMAT ,unsigned long ,struct D3DLineTexture ** ,void ** );
    HRESULT CreateVertexBuffer(unsigned int ,unsigned long ,unsigned long ,unsigned long ,struct D3DVertexBuffer ** ,void ** );
    HRESULT CreateIndexBuffer(unsigned int ,unsigned long ,enum _D3DFORMAT ,unsigned long ,struct D3DIndexBuffer ** ,void ** );
    HRESULT CreateRenderTarget(unsigned int ,unsigned int ,enum _D3DFORMAT ,enum _D3DMULTISAMPLE_TYPE ,unsigned long ,int ,struct D3DSurface ** ,struct _D3DSURFACE_PARAMETERS * );
    HRESULT CreateDepthStencilSurface(unsigned int ,unsigned int ,enum _D3DFORMAT ,enum _D3DMULTISAMPLE_TYPE ,unsigned long ,int ,struct D3DSurface ** ,struct _D3DSURFACE_PARAMETERS * );
    HRESULT SetRenderTarget(unsigned long ,struct D3DSurface * );
    HRESULT GetRenderTarget(unsigned long ,struct D3DSurface ** );
    HRESULT SetDepthStencilSurface(struct D3DSurface * );
    HRESULT GetDepthStencilSurface(struct D3DSurface ** );
    HRESULT GetBackBuffer(unsigned int ,unsigned int ,unsigned int ,struct D3DSurface ** );
    HRESULT GetFrontBuffer(struct D3DTexture ** );
    HRESULT BeginScene();
    HRESULT EndScene();
    HRESULT Clear(unsigned long ,struct _D3DRECT * ,unsigned long ,unsigned long ,float ,unsigned long );
    HRESULT ClearF(unsigned long ,struct _D3DRECT * ,struct __vector4 * ,float ,unsigned long );
    HRESULT SetViewport(struct _D3DVIEWPORT9 * );
    HRESULT GetViewport(struct _D3DVIEWPORT9 * );
    HRESULT SetRenderState(enum _D3DRENDERSTATETYPE ,unsigned long );
    HRESULT SetRenderState_Inline(enum _D3DRENDERSTATETYPE ,unsigned long );
    HRESULT GetRenderState(enum _D3DRENDERSTATETYPE ,unsigned long * );
    HRESULT CreateStateBlock(enum _D3DSTATEBLOCKTYPE ,struct D3DStateBlock ** );
    HRESULT GetTexture(unsigned long ,struct D3DBaseTexture ** );
    HRESULT SetTexture(unsigned long ,struct D3DBaseTexture * );
    HRESULT GetSamplerState(unsigned long ,enum _D3DSAMPLERSTATETYPE ,unsigned long * );
    HRESULT SetSamplerState(unsigned long ,enum _D3DSAMPLERSTATETYPE ,unsigned long );
    HRESULT SetSamplerState_Inline(unsigned long ,enum _D3DSAMPLERSTATETYPE ,unsigned long );
    HRESULT DrawVertices(enum _D3DPRIMITIVETYPE ,unsigned int ,unsigned int );
    HRESULT DrawIndexedVertices(enum _D3DPRIMITIVETYPE ,int ,unsigned int ,unsigned int );
    HRESULT DrawVerticesUP(enum _D3DPRIMITIVETYPE ,unsigned int ,void * ,unsigned int );
    HRESULT DrawIndexedVerticesUP(enum _D3DPRIMITIVETYPE ,unsigned int ,unsigned int ,unsigned int ,void * ,enum _D3DFORMAT ,void * ,unsigned int );
    HRESULT DrawPrimitive(enum _D3DPRIMITIVETYPE ,unsigned int ,unsigned int );
    HRESULT DrawIndexedPrimitive(enum _D3DPRIMITIVETYPE ,int ,unsigned int ,unsigned int ,unsigned int ,unsigned int );
    HRESULT DrawPrimitiveUP(enum _D3DPRIMITIVETYPE ,unsigned int ,void * ,unsigned int );
    HRESULT DrawIndexedPrimitiveUP(enum _D3DPRIMITIVETYPE ,unsigned int ,unsigned int ,unsigned int ,void * ,enum _D3DFORMAT ,void * ,unsigned int );
    HRESULT SetFVF(unsigned long );
    HRESULT GetFVF(unsigned long * );
    HRESULT CreateVertexShader(unsigned long * ,struct D3DVertexShader ** );
    HRESULT SetVertexShader(struct D3DVertexShader * );
    HRESULT GetVertexShader(struct D3DVertexShader ** );
    HRESULT SetVertexShaderConstantB(unsigned int ,int * ,unsigned int );
    HRESULT SetVertexShaderConstantF(unsigned int ,float * ,unsigned long );
    HRESULT SetVertexShaderConstantI(unsigned int ,int * ,unsigned long );
    HRESULT GetVertexShaderConstantB(unsigned int ,int * ,unsigned long );
    HRESULT GetVertexShaderConstantF(unsigned int ,float * ,unsigned long );
    HRESULT GetVertexShaderConstantI(unsigned int ,int * ,unsigned long );
    HRESULT SetVertexShaderConstantF_NotInline(unsigned int ,float * ,unsigned long );
    HRESULT SetStreamSource(unsigned int ,struct D3DVertexBuffer * ,unsigned int ,unsigned int );
    HRESULT GetStreamSource(unsigned int ,struct D3DVertexBuffer ** ,unsigned int * ,unsigned int * );
    HRESULT SetIndices(struct D3DIndexBuffer * );
    HRESULT GetIndices(struct D3DIndexBuffer ** );
    HRESULT CreatePixelShader(unsigned long * ,struct D3DPixelShader ** );
    HRESULT SetPixelShader(struct D3DPixelShader * );
    HRESULT GetPixelShader(struct D3DPixelShader ** );
    HRESULT SetPixelShaderConstantB(unsigned int ,int * ,unsigned int );
    HRESULT SetPixelShaderConstantF(unsigned int ,float * ,unsigned long );
    HRESULT SetPixelShaderConstantI(unsigned int ,int * ,unsigned long );
    HRESULT GetPixelShaderConstantB(unsigned int ,int * ,unsigned long );
    HRESULT GetPixelShaderConstantF(unsigned int ,float * ,unsigned long );
    HRESULT GetPixelShaderConstantI(unsigned int ,int * ,unsigned long );
    HRESULT SetPixelShaderConstantF_NotInline(unsigned int ,float * ,unsigned long );
    HRESULT CreateVertexDeclaration(struct _D3DVERTEXELEMENT9 * ,struct D3DVertexDeclaration ** );
    HRESULT SetVertexDeclaration(struct D3DVertexDeclaration * );
    HRESULT GetVertexDeclaration(struct D3DVertexDeclaration ** );
    HRESULT SetScissorRect(struct tagRECT * );
    HRESULT GetScissorRect(struct tagRECT * );
    HRESULT SetClipPlane(unsigned long ,float * );
    HRESULT GetClipPlane(unsigned long ,float * );
    HRESULT CreateQuery(enum _D3DQUERYTYPE ,struct D3DQuery ** );
    HRESULT CreateQueryTiled(enum _D3DQUERYTYPE ,unsigned long ,struct D3DQuery ** );
    HRESULT Resolve(unsigned long ,struct _D3DRECT * ,struct D3DBaseTexture * ,struct _D3DPOINT * ,unsigned int ,unsigned int ,struct __vector4 * ,float ,unsigned long ,struct _D3DRESOLVE_PARAMETERS * );
    HRESULT AcquireThreadOwnership();
    HRESULT ReleaseThreadOwnership();
    HRESULT SetThreadOwnership(unsigned long );
    unsigned long QueryThreadOwnership();
    int IsBusy();
    HRESULT BlockUntilIdle();
    HRESULT InsertCallback(unsigned long ,void  ( * )(unsigned long ),unsigned long );
    HRESULT SetVerticalBlankCallback(void  ( * )(struct _D3DVBLANKDATA * ));
    HRESULT SetSwapCallback(void  ( * )(struct _D3DSWAPDATA * ));
    HRESULT SynchronizeToPresentationInterval();
    HRESULT Swap(struct D3DBaseTexture * ,struct _D3DVIDEO_SCALER_PARAMETERS * );
    HRESULT RenderSystemUI();
    HRESULT QueryBufferSpace(unsigned long * ,unsigned long * );
    HRESULT SetPredication(unsigned long );
    HRESULT SetPatchablePredication(unsigned long ,unsigned long );
    HRESULT BeginTiling(unsigned long ,unsigned long ,struct _D3DRECT * ,struct __vector4 * ,float ,unsigned long );
    HRESULT EndTiling(unsigned long ,struct _D3DRECT * ,struct D3DBaseTexture * ,struct __vector4 * ,float ,unsigned long ,struct _D3DRESOLVE_PARAMETERS * );
    HRESULT BeginZPass(unsigned long );
    HRESULT EndZPass();
    HRESULT InvokeRenderPass();
    HRESULT BeginExport(unsigned long ,struct D3DResource * ,unsigned long );
    HRESULT EndExport(unsigned long ,struct D3DResource * ,unsigned long );
    HRESULT DrawTessellatedPrimitive(enum _D3DTESSPRIMITIVETYPE ,unsigned int ,unsigned int );
    HRESULT DrawIndexedTessellatedPrimitive(enum _D3DTESSPRIMITIVETYPE ,int ,unsigned int ,unsigned int );
    HRESULT SetRingBufferParameters(struct _D3DRING_BUFFER_PARAMETERS * );
    HRESULT XpsBegin(unsigned long );
    HRESULT XpsEnd();
    HRESULT XpsSetCallback(void  ( * )(struct D3DXpsThread * ,void * ,void * ,unsigned long ),void * ,unsigned long );
    HRESULT XpsSubmit(unsigned long ,void * ,unsigned long );
    HRESULT XpsSetPredication(unsigned long );
    HRESULT XpsSetPredicationFromVisibility(void * );
    HRESULT XpsSetPredicationFromQuery(struct D3DQuery * );
    HRESULT BeginVertices(enum _D3DPRIMITIVETYPE ,unsigned int ,unsigned int ,void ** );
    HRESULT EndVertices();
    HRESULT BeginIndexedVertices(enum _D3DPRIMITIVETYPE ,int ,unsigned int ,unsigned int ,enum _D3DFORMAT ,unsigned int ,void ** ,void ** );
    HRESULT EndIndexedVertices();
    unsigned long InsertFence();
    HRESULT BlockOnFence(unsigned long );
    int IsFencePending(unsigned long );
    HRESULT SetBlendState(unsigned long ,struct _D3DBLENDSTATE );
    HRESULT GetBlendState(unsigned long ,struct _D3DBLENDSTATE * );
    HRESULT SetVertexFetchConstant(unsigned int ,struct D3DVertexBuffer * ,unsigned int );
    HRESULT SetTextureFetchConstant(unsigned int ,struct D3DBaseTexture * );
    float GetCounter(enum _D3DCOUNTER );
    HRESULT SetSafeLevel(unsigned long ,unsigned long );
    HRESULT GetSafeLevel(unsigned long * ,unsigned long * );
    HRESULT SetHangCallback(void  ( * )(char * ));
    HRESULT BeginConditionalSurvey(unsigned long ,unsigned long );
    HRESULT EndConditionalSurvey(unsigned long );
    HRESULT BeginConditionalRendering(unsigned long );
    HRESULT EndConditionalRendering();
    HRESULT PersistDisplay(struct D3DTexture * ,struct _D3DVIDEO_SCALER_PARAMETERS * );
    HRESULT GetPersistedTexture(struct D3DTexture ** );
    HRESULT Suspend();
    HRESULT Resume();
    HRESULT CreatePerfCounters(struct D3DPerfCounters ** ,unsigned int );
    HRESULT EnablePerfCounters(int );
    HRESULT SetPerfCounterEvents(struct _D3DPERFCOUNTER_EVENTS * ,unsigned long );
    HRESULT QueryPerfCounters(struct D3DPerfCounters * ,unsigned long );
    HRESULT SetShaderInstructionAllocation(unsigned long ,unsigned long ,unsigned long );
    HRESULT SetShaderGPRAllocation(unsigned long ,unsigned long ,unsigned long );
    HRESULT GetShaderGPRAllocation(unsigned long * ,unsigned long * ,unsigned long * );
    HRESULT SetScreenExtentQueryMode(enum _D3DSCREENEXTENTQUERYMODE );
    HRESULT GetScreenExtentQueryMode(enum _D3DSCREENEXTENTQUERYMODE * );
    HRESULT BeginPixelShaderConstantF1(unsigned int ,struct __vector4 ** ,unsigned int );
    HRESULT EndPixelShaderConstantF1();
    HRESULT BeginVertexShaderConstantF1(unsigned int ,struct __vector4 ** ,unsigned int );
    HRESULT EndVertexShaderConstantF1();
    HRESULT BeginPixelShaderConstantF4(unsigned int ,struct __vector4 ** ,struct __vector4 ** ,unsigned int );
    HRESULT EndPixelShaderConstantF4();
    HRESULT BeginVertexShaderConstantF4(unsigned int ,struct __vector4 ** ,struct __vector4 ** ,unsigned int );
    HRESULT EndVertexShaderConstantF4();
    unsigned long GetCurrentFence();
    HRESULT InvalidateGpuCache(void * ,unsigned long ,unsigned long );
    HRESULT InvalidateResourceGpuCache(struct D3DResource * ,unsigned long );
    HRESULT FlushHiZStencil(enum _D3DFHZS_FLUSHTYPE );
    HRESULT UnsetAll();
    unsigned long GetDeviceState();
    HRESULT SetBlockCallback(unsigned long ,void  ( * )(unsigned long ,enum _D3DBLOCKTYPE ,float ,unsigned long ));
    HRESULT SetSurfaces(struct _D3DSURFACES * ,unsigned long );
    HRESULT CreateConstantBuffer(unsigned int ,unsigned long ,struct D3DConstantBuffer ** );
    HRESULT CreateCommandBuffer(unsigned int ,unsigned long ,struct D3DCommandBuffer ** );
    HRESULT CreateGrowableCommandBuffer(unsigned long ,void *  ( * )(unsigned long ,unsigned long ,unsigned long * ,unsigned long ),void  ( * )(unsigned long ),void  ( * )(unsigned long ,unsigned long * ,unsigned long * ),unsigned long ,unsigned long ,struct D3DCommandBuffer ** );
    HRESULT BeginCommandBuffer(struct D3DCommandBuffer * ,unsigned long ,struct _D3DTAGCOLLECTION * ,struct _D3DTAGCOLLECTION * ,struct _D3DRECT * ,unsigned long );
    HRESULT EndCommandBuffer();
    HRESULT RunCommandBuffer(struct D3DCommandBuffer * ,unsigned long );
    HRESULT SetCommandBufferPredication(unsigned long ,unsigned long );
    unsigned long InsertMarker();
    HRESULT Nop(unsigned long );
    HRESULT QuerySwapStatus(struct _D3DSWAP_STATUS * );
    unsigned long PixBeginNamedEvent(unsigned long ,char * ,<btNoType> );
    unsigned long PixEndNamedEvent();
    void PixSetMarker(unsigned long ,char * ,<btNoType> );
    HRESULT SetViewportF(struct _D3DVIEWPORTF9 * );
    HRESULT GetViewportF(struct _D3DVIEWPORTF9 * );
    void * BeginVisibilitySurvey(unsigned long );
    HRESULT EndVisibilitySurvey(void * );
    HRESULT SetSwapMode(int );
    unsigned long long InsertBlockOnAsyncResources(unsigned long ,struct D3DResource ** ,unsigned long ,struct D3DResource ** ,unsigned long );
    HRESULT SignalAsyncResources(unsigned long long );
    void GpuOwn(enum _D3DTAG );
    void GpuOwnSubset(enum _D3DTAG ,unsigned long ,unsigned long );
    void GpuOwnVertexShaderConstantF(unsigned long ,unsigned long );
    void GpuOwnPixelShaderConstantF(unsigned long ,unsigned long );
    void GpuOwnShaders();
    void GpuDisown(enum _D3DTAG );
    void GpuDisownSubset(enum _D3DTAG ,unsigned long ,unsigned long );
    void GpuDisownVertexShaderConstantF(unsigned long ,unsigned long );
    void GpuDisownPixelShaderConstantF(unsigned long ,unsigned long );
    void GpuDisownShaders();
    void GpuDisownAll();
    void GpuLoadPixelShaderConstantF4(unsigned int ,unsigned long ,struct D3DConstantBuffer * ,unsigned long );
    void GpuLoadVertexShaderConstantF4(unsigned int ,unsigned long ,struct D3DConstantBuffer * ,unsigned long );
    void GpuLoadPixelShaderConstantF4Pointer(unsigned int ,void * ,unsigned long );
    void GpuLoadVertexShaderConstantF4Pointer(unsigned int ,void * ,unsigned long );
    HRESULT GpuBeginVertexShaderConstantF4(unsigned int ,struct __vector4 ** ,unsigned long );
    void GpuEndVertexShaderConstantF4();
    HRESULT GpuBeginPixelShaderConstantF4(unsigned int ,struct __vector4 ** ,unsigned long );
    void GpuEndPixelShaderConstantF4();
    void GpuLoadShaders(struct D3DVertexShader * ,struct D3DPixelShader * ,struct GPUFLOW_CONSTANTS * );
    void GpuLoadShadersFast(struct D3DVertexShader * ,struct D3DPixelShader * ,struct GPUFLOW_CONSTANTS * ,unsigned long );
    void GpuSetVertexFetchConstant(unsigned long ,struct D3DVertexBuffer * ,unsigned long ,struct D3DVertexBuffer * ,unsigned long ,struct D3DVertexBuffer * ,unsigned long );
    void GpuSetTextureFetchConstant(unsigned long ,struct D3DBaseTexture * );
    void GpuSetColorMask(union GPU_COLORMASK * );
    void GpuSetBlendFactor(struct _D3DCOLORVALUE * );
    void GpuSetAlphaRef(float );
    void GpuSetBlendControl(unsigned long ,union GPU_BLENDCONTROL * );
    void GpuSetColorControl(union GPU_COLORCONTROL * );
    struct _D3DTAGCOLLECTION m_Pending;// Offset=0x0 Size=0x28
    unsigned long long m_Predicated_PendingMask2;// Offset=0x28 Size=0x8
    unsigned long * m_pRing;// Offset=0x30 Size=0x4
    unsigned long * m_pRingLimit;// Offset=0x34 Size=0x4
    unsigned long * m_pRingGuarantee;// Offset=0x38 Size=0x4
    unsigned long m_ReferenceCount;// Offset=0x3c Size=0x4
    void  ( * m_SetRenderStateCall)[101];// Offset=0x40 Size=0x194
    void  ( * m_SetSamplerStateCall)[20];// Offset=0x1d4 Size=0x50
    unsigned long  ( * m_GetRenderStateCall)[101];// Offset=0x224 Size=0x194
    unsigned long  ( * m_GetSamplerStateCall)[20];// Offset=0x3b8 Size=0x50
    unsigned char __align0[120];// Offset=0x408 Size=0x78
    struct _D3DConstants m_Constants;// Offset=0x480 Size=0x23a0
    float m_ClipPlanes[6][4];// Offset=0x2820 Size=0x60
    struct GPU_DESTINATIONPACKET m_DestinationPacket;// Offset=0x2880 Size=0x40
    struct GPU_WINDOWPACKET m_WindowPacket;// Offset=0x28c0 Size=0xc
    struct GPU_VALUESPACKET m_ValuesPacket;// Offset=0x28cc Size=0x54
    struct GPU_PROGRAMPACKET m_ProgramPacket;// Offset=0x2920 Size=0x14
    struct GPU_CONTROLPACKET m_ControlPacket;// Offset=0x2934 Size=0x30
    struct GPU_TESSELLATORPACKET m_TessellatorPacket;// Offset=0x2964 Size=0x54
    struct GPU_MISCPACKET m_MiscPacket;// Offset=0x29b8 Size=0x98
    struct GPU_POINTPACKET m_PointPacket;// Offset=0x2a50 Size=0x20
};

union GPUFLOW_ALLOC// Size=0x8 (Id=1019)
{
    struct // Size=0x8 (Id=0)
    {
        unsigned long Size:3;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x3
        unsigned long DoNotSerialize:1;// Offset=0x4 Size=0x4 BitOffset=0x8 BitSize=0x1
        unsigned long BufferSelect:2;// Offset=0x4 Size=0x4 BitOffset=0x9 BitSize=0x2
        unsigned long Op:4;// Offset=0x4 Size=0x4 BitOffset=0xc BitSize=0x4
    };
};

struct _XMUSHORT4// Size=0x8 (Id=1020)
{
    unsigned short x;// Offset=0x0 Size=0x2
    unsigned short y;// Offset=0x2 Size=0x2
    unsigned short z;// Offset=0x4 Size=0x2
    unsigned short w;// Offset=0x6 Size=0x2
    void _XMUSHORT4(float * );
    void _XMUSHORT4(float ,float ,float ,float );
    void _XMUSHORT4(unsigned short * );
    void _XMUSHORT4(unsigned short ,unsigned short ,unsigned short ,unsigned short );
    void _XMUSHORT4();
    struct _XMUSHORT4 & operator=(struct _XMUSHORT4 & );
};

struct _XMUSHORT4// Size=0x8 (Id=1021)
{
    unsigned short x;// Offset=0x0 Size=0x2
    unsigned short y;// Offset=0x2 Size=0x2
    unsigned short z;// Offset=0x4 Size=0x2
    unsigned short w;// Offset=0x6 Size=0x2
    void _XMUSHORT4(float * );
    void _XMUSHORT4(float ,float ,float ,float );
    void _XMUSHORT4(unsigned short * );
    void _XMUSHORT4(unsigned short ,unsigned short ,unsigned short ,unsigned short );
    void _XMUSHORT4();
    struct _XMUSHORT4 & operator=(struct _XMUSHORT4 & );
};

struct _IMAGE_ROM_OPTIONAL_HEADER// Size=0x38 (Id=1022)
{
    unsigned short Magic;// Offset=0x0 Size=0x2
    unsigned char MajorLinkerVersion;// Offset=0x2 Size=0x1
    unsigned char MinorLinkerVersion;// Offset=0x3 Size=0x1
    unsigned long SizeOfCode;// Offset=0x4 Size=0x4
    unsigned long SizeOfInitializedData;// Offset=0x8 Size=0x4
    unsigned long SizeOfUninitializedData;// Offset=0xc Size=0x4
    unsigned long AddressOfEntryPoint;// Offset=0x10 Size=0x4
    unsigned long BaseOfCode;// Offset=0x14 Size=0x4
    unsigned long BaseOfData;// Offset=0x18 Size=0x4
    unsigned long BaseOfBss;// Offset=0x1c Size=0x4
    unsigned long GprMask;// Offset=0x20 Size=0x4
    unsigned long CprMask[4];// Offset=0x24 Size=0x10
    unsigned long GpValue;// Offset=0x34 Size=0x4
};

struct _ACL_SIZE_INFORMATION// Size=0xc (Id=1023)
{
    unsigned long AceCount;// Offset=0x0 Size=0x4
    unsigned long AclBytesInUse;// Offset=0x4 Size=0x4
    unsigned long AclBytesFree;// Offset=0x8 Size=0x4
};

struct HRSRC__// Size=0x4 (Id=1024)
{
    int unused;// Offset=0x0 Size=0x4
};

union GPUFLOW_RETURN// Size=0x8 (Id=1025)
{
    unsigned char __align0[4];// Offset=0x0 Size=0x4
    struct // Size=0x4 (Id=0)
    {
        unsigned long AbsoluteAddressing:1;// Offset=0x4 Size=0x4 BitOffset=0xb BitSize=0x1
        unsigned long Op:4;// Offset=0x4 Size=0x4 BitOffset=0xc BitSize=0x4
    };
};

struct _IMAGE_BOUND_IMPORT_DESCRIPTOR// Size=0x8 (Id=1026)
{
    unsigned long TimeDateStamp;// Offset=0x0 Size=0x4
    unsigned short OffsetModuleName;// Offset=0x4 Size=0x2
    unsigned short NumberOfModuleForwarderRefs;// Offset=0x6 Size=0x2
};

struct _CRT_DOUBLE// Size=0x8 (Id=1027)
{
    float x;// Offset=0x0 Size=0x8
};

union GPU_PROGRAMCONTROL// Size=0x4 (Id=1028)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long VsMaxReg:6;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x6
        unsigned long PsMaxReg:6;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x6
        unsigned long VsResource:1;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x1
        unsigned long PsResource:1;// Offset=0x0 Size=0x4 BitOffset=0x11 BitSize=0x1
        unsigned long ParamGen:1;// Offset=0x0 Size=0x4 BitOffset=0x12 BitSize=0x1
        unsigned long GenIndexPix:1;// Offset=0x0 Size=0x4 BitOffset=0x13 BitSize=0x1
        unsigned long VsExportCount:4;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0x4
        unsigned long VsExportMode:3;// Offset=0x0 Size=0x4 BitOffset=0x18 BitSize=0x3
        unsigned long PsExportZ:1;// Offset=0x0 Size=0x4 BitOffset=0x1b BitSize=0x1
        unsigned long PsExportColorCount:3;// Offset=0x0 Size=0x4 BitOffset=0x1c BitSize=0x3
        unsigned long GenIndexVtx:1;// Offset=0x0 Size=0x4 BitOffset=0x1f BitSize=0x1
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

union GPUCOMMAND_EVENT_WRITE// Size=0xc (Id=1029)
{
    struct // Size=0xc (Id=0)
    {
        unsigned long Initiator:6;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x6
        unsigned long SoftwareManaged:1;// Offset=0x0 Size=0x4 BitOffset=0x1e BitSize=0x1
        unsigned long UseCounter:1;// Offset=0x0 Size=0x4 BitOffset=0x1f BitSize=0x1
        unsigned long Endian:2;// Offset=0x4 Size=0x4 BitOffset=0x0 BitSize=0x2
        unsigned long Address:30;// Offset=0x4 Size=0x4 BitOffset=0x2 BitSize=0x1e
        unsigned long Data:32;// Offset=0x8 Size=0x4 BitOffset=0x0 BitSize=0x20
    };
    unsigned long dword[3];// Offset=0x0 Size=0xc
};

union GPU_MEINIT// Size=0x48 (Id=1030)
{
    unsigned long Flags;// Offset=0x0 Size=0x4
    unsigned long Reserved1;// Offset=0x4 Size=0x4
    unsigned long Reserved2;// Offset=0x8 Size=0x4
    union // Size=0x2c (Id=0)
    {
        unsigned long Reserved3;// Offset=0xc Size=0x4
        unsigned long Reserved4;// Offset=0x10 Size=0x4
        unsigned long Reserved5;// Offset=0x14 Size=0x4
        unsigned long Reserved6;// Offset=0x18 Size=0x4
        unsigned long Reserved7;// Offset=0x1c Size=0x4
        unsigned long Reserved8;// Offset=0x20 Size=0x4
        unsigned long Reserved9;// Offset=0x24 Size=0x4
        unsigned long Reserved10;// Offset=0x28 Size=0x4
        unsigned long Reserved3To10[8];// Offset=0xc Size=0x20
    };
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            unsigned long PixelBase:16;// Offset=0x2c Size=0x4 BitOffset=0x0 BitSize=0x10
            unsigned long VertexBase:16;// Offset=0x2c Size=0x4 BitOffset=0x10 BitSize=0x10
        };
        union GPU_INSTSTOREMANAGEMENT InstructionStore;// Offset=0x2c Size=0x4
    };
    unsigned long MaxContext;// Offset=0x30 Size=0x4
    unsigned long Reserved13;// Offset=0x34 Size=0x4
    unsigned long Reserved14;// Offset=0x38 Size=0x4
    unsigned long Reserved15;// Offset=0x3c Size=0x4
    unsigned long Reserved16;// Offset=0x40 Size=0x4
    unsigned long Reserved17;// Offset=0x44 Size=0x4
    unsigned long dword[18];// Offset=0x0 Size=0x48
};

struct _D3DXFUNCTION_DESC// Size=0x8 (Id=1031)
{
    char * Name;// Offset=0x0 Size=0x4
    unsigned int Annotations;// Offset=0x4 Size=0x4
};

struct linger// Size=0x4 (Id=1032)
{
    unsigned short l_onoff;// Offset=0x0 Size=0x2
    unsigned short l_linger;// Offset=0x2 Size=0x2
};

union GPU_DEBUGMISC1// Size=0x4 (Id=1033)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long DbOnPix:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long DbOnVtx:1;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x1
        unsigned long DbInstCount:8;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x8
        unsigned long DbBreakAddr:11;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0xb
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

union _IMAGE_LINENUMBER::<unnamed-type-Type>// Size=0x4 (Id=1034)
{
    unsigned long SymbolTableIndex;// Offset=0x0 Size=0x4
    unsigned long VirtualAddress;// Offset=0x0 Size=0x4
};

struct IDirectXFileBinary : public IDirectXFileObject// Size=0x4 (Id=1035)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    HRESULT GetName(char * ,unsigned long * );
    HRESULT GetId(struct _GUID * );
    HRESULT GetSize(unsigned long * );
    HRESULT GetMimeType(char ** );
    HRESULT Read(void * ,unsigned long ,unsigned long * );
    void IDirectXFileBinary(struct IDirectXFileBinary & );
    void IDirectXFileBinary();
    struct IDirectXFileBinary & operator=(struct IDirectXFileBinary & );
};

struct IDirectXFileBinary : public IDirectXFileObject// Size=0x4 (Id=1036)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    HRESULT GetName(char * ,unsigned long * );
    HRESULT GetId(struct _GUID * );
    HRESULT GetSize(unsigned long * );
    HRESULT GetMimeType(char ** );
    HRESULT Read(void * ,unsigned long ,unsigned long * );
    void IDirectXFileBinary(struct IDirectXFileBinary & );
    void IDirectXFileBinary();
    struct IDirectXFileBinary & operator=(struct IDirectXFileBinary & );
};

struct _IMAGE_DATA_DIRECTORY// Size=0x8 (Id=1037)
{
    unsigned long VirtualAddress;// Offset=0x0 Size=0x4
    unsigned long Size;// Offset=0x4 Size=0x4
};

union GPU_INSTSTOREMANAGEMENT// Size=0x4 (Id=1038)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long PixelBase:16;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x10
        unsigned long VertexBase:16;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x10
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

struct _D3DINDEXBUFFER_DESC// Size=0x14 (Id=1039)
{
    enum _D3DFORMAT Format;// Offset=0x0 Size=0x4
    enum _D3DRESOURCETYPE Type;// Offset=0x4 Size=0x4
    unsigned long Usage;// Offset=0x8 Size=0x4
    unsigned long Pool;// Offset=0xc Size=0x4
    unsigned int Size;// Offset=0x10 Size=0x4
};

struct _XMUICON4// Size=0x8 (Id=1040)
{
    union // Size=0x8 (Id=0)
    {
        struct // Size=0x8 (Id=0)
        {
            unsigned long long x:20;// Offset=0x0 Size=0x8 BitOffset=0x0 BitSize=0x14
            unsigned long long y:20;// Offset=0x0 Size=0x8 BitOffset=0x14 BitSize=0x14
            unsigned long long z:20;// Offset=0x0 Size=0x8 BitOffset=0x28 BitSize=0x14
            unsigned long long w:4;// Offset=0x0 Size=0x8 BitOffset=0x3c BitSize=0x4
        };
        unsigned long long v;// Offset=0x0 Size=0x8
    };
    void _XMUICON4(float * );
    void _XMUICON4(float ,float ,float ,float );
    void _XMUICON4(unsigned long long );
    void _XMUICON4();
    unsigned long long operator unsigned __int64();
    struct _XMUICON4 & operator=(const unsigned long long );
    struct _XMUICON4 & operator=(struct _XMUICON4 & );
};

struct _XMUICON4// Size=0x8 (Id=1041)
{
    union // Size=0x8 (Id=0)
    {
        struct // Size=0x8 (Id=0)
        {
            unsigned long long x:20;// Offset=0x0 Size=0x8 BitOffset=0x0 BitSize=0x14
            unsigned long long y:20;// Offset=0x0 Size=0x8 BitOffset=0x14 BitSize=0x14
            unsigned long long z:20;// Offset=0x0 Size=0x8 BitOffset=0x28 BitSize=0x14
            unsigned long long w:4;// Offset=0x0 Size=0x8 BitOffset=0x3c BitSize=0x4
        };
        unsigned long long v;// Offset=0x0 Size=0x8
    };
    void _XMUICON4(float * );
    void _XMUICON4(float ,float ,float ,float );
    void _XMUICON4(unsigned long long );
    void _XMUICON4();
    unsigned long long operator unsigned __int64();
    struct _XMUICON4 & operator=(const unsigned long long );
    struct _XMUICON4 & operator=(struct _XMUICON4 & );
};

struct _D3DXF_FILELOADMEMORY// Size=0x8 (Id=1042)
{
    void * lpMemory;// Offset=0x0 Size=0x4
    unsigned long dSize;// Offset=0x4 Size=0x4
};

struct HFONT__// Size=0x4 (Id=1043)
{
    int unused;// Offset=0x0 Size=0x4
};

struct _XMICO4// Size=0x8 (Id=1044)
{
    union // Size=0x8 (Id=0)
    {
        struct // Size=0x8 (Id=0)
        {
            long long x:20;// Offset=0x0 Size=0x8 BitOffset=0x0 BitSize=0x14
            long long y:20;// Offset=0x0 Size=0x8 BitOffset=0x14 BitSize=0x14
            long long z:20;// Offset=0x0 Size=0x8 BitOffset=0x28 BitSize=0x14
            long long w:4;// Offset=0x0 Size=0x8 BitOffset=0x3c BitSize=0x4
        };
        unsigned long long v;// Offset=0x0 Size=0x8
    };
    void _XMICO4(float * );
    void _XMICO4(float ,float ,float ,float );
    void _XMICO4(unsigned long long );
    void _XMICO4();
    unsigned long long operator unsigned __int64();
    struct _XMICO4 & operator=(const unsigned long long );
    struct _XMICO4 & operator=(struct _XMICO4 & );
};

struct _XMICO4// Size=0x8 (Id=1045)
{
    union // Size=0x8 (Id=0)
    {
        struct // Size=0x8 (Id=0)
        {
            long long x:20;// Offset=0x0 Size=0x8 BitOffset=0x0 BitSize=0x14
            long long y:20;// Offset=0x0 Size=0x8 BitOffset=0x14 BitSize=0x14
            long long z:20;// Offset=0x0 Size=0x8 BitOffset=0x28 BitSize=0x14
            long long w:4;// Offset=0x0 Size=0x8 BitOffset=0x3c BitSize=0x4
        };
        unsigned long long v;// Offset=0x0 Size=0x8
    };
    void _XMICO4(float * );
    void _XMICO4(float ,float ,float ,float );
    void _XMICO4(unsigned long long );
    void _XMICO4();
    unsigned long long operator unsigned __int64();
    struct _XMICO4 & operator=(const unsigned long long );
    struct _XMICO4 & operator=(struct _XMICO4 & );
};

struct _XUSER_STATS_READ_RESULTS// Size=0x8 (Id=1046)
{
    unsigned long dwNumViews;// Offset=0x0 Size=0x4
    struct _XUSER_STATS_VIEW * pViews;// Offset=0x4 Size=0x4
};

union GPUCOMMAND_MEM_WRITE// Size=0x8 (Id=1047)
{
    struct // Size=0x8 (Id=0)
    {
        unsigned long Endian:2;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x2
        unsigned long Address:30;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x1e
        unsigned long Data:32;// Offset=0x4 Size=0x4 BitOffset=0x0 BitSize=0x20
    };
    unsigned long dword[2];// Offset=0x0 Size=0x8
};

struct _OVERLAPPED// Size=0x14 (Id=1048)
{
    unsigned long Internal;// Offset=0x0 Size=0x4
    unsigned long InternalHigh;// Offset=0x4 Size=0x4
    unsigned long Offset;// Offset=0x8 Size=0x4
    unsigned long OffsetHigh;// Offset=0xc Size=0x4
    void * hEvent;// Offset=0x10 Size=0x4
};

struct HDESK__// Size=0x4 (Id=1049)
{
    int unused;// Offset=0x0 Size=0x4
};

union GPUCOMMAND_SET_CONSTANT// Size=0x4 (Id=1050)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long Offset:11;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xb
        unsigned long Id:8;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x8
    };
    unsigned long Data[0];
    unsigned long dword[1];// Offset=0x0 Size=0x4
};

union GPU_VIZQUERY// Size=0x4 (Id=1051)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long VizQueryEnable:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long VizQueryId:6;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x6
        unsigned long KillPixPostHiZ:1;// Offset=0x0 Size=0x4 BitOffset=0x7 BitSize=0x1
        unsigned long KillPixPostDetailMask:1;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x1
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

struct HMETAFILE__// Size=0x4 (Id=1052)
{
    int unused;// Offset=0x0 Size=0x4
};

struct _IO_COUNTERS// Size=0x30 (Id=1053)
{
    unsigned long long ReadOperationCount;// Offset=0x0 Size=0x8
    unsigned long long WriteOperationCount;// Offset=0x8 Size=0x8
    unsigned long long OtherOperationCount;// Offset=0x10 Size=0x8
    unsigned long long ReadTransferCount;// Offset=0x18 Size=0x8
    unsigned long long WriteTransferCount;// Offset=0x20 Size=0x8
    unsigned long long OtherTransferCount;// Offset=0x28 Size=0x8
};

struct D3DXMATRIX : public _D3DMATRIX// Size=0x40 (Id=1054)
{
    void D3DXMATRIX(float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float ,float );
    void D3DXMATRIX(struct D3DXFLOAT16 * );
    void D3DXMATRIX(struct _D3DMATRIX & );
    void D3DXMATRIX(float * );
    void D3DXMATRIX();
    float operator()(unsigned int ,unsigned int );
    float & operator()(unsigned int ,unsigned int );
    float * operator float *();
    float * operator const float *();
    struct D3DXMATRIX & operator=(struct D3DXMATRIX & );
    struct D3DXMATRIX & operator*=(float );
    struct D3DXMATRIX & operator*=(struct D3DXMATRIX & );
    struct D3DXMATRIX & operator+=(struct D3DXMATRIX & );
    struct D3DXMATRIX & operator-=(struct D3DXMATRIX & );
    struct D3DXMATRIX & operator/=(float );
    struct D3DXMATRIX operator+(struct D3DXMATRIX & );
    struct D3DXMATRIX operator+();
    struct D3DXMATRIX operator-(struct D3DXMATRIX & );
    struct D3DXMATRIX operator-();
    struct D3DXMATRIX operator*(float );
    struct D3DXMATRIX operator*(struct D3DXMATRIX & );
    struct D3DXMATRIX operator/(float );
    int operator==(struct D3DXMATRIX & );
    int operator!=(struct D3DXMATRIX & );
};

struct ID3DXBaseEffect : public IUnknown// Size=0x4 (Id=1055)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    HRESULT GetDesc(struct _D3DXEFFECT_DESC * );
    HRESULT GetParameterDesc(unsigned int ,struct _D3DXPARAMETER_DESC * );
    HRESULT GetTechniqueDesc(unsigned int ,struct _D3DXTECHNIQUE_DESC * );
    HRESULT GetPassDesc(unsigned int ,struct _D3DXPASS_DESC * );
    HRESULT GetFunctionDesc(unsigned int ,struct _D3DXFUNCTION_DESC * );
    unsigned int GetParameter(unsigned int ,unsigned int );
    unsigned int GetParameterByName(unsigned int ,char * );
    unsigned int GetParameterBySemantic(unsigned int ,char * );
    unsigned int GetParameterElement(unsigned int ,unsigned int );
    unsigned int GetTechnique(unsigned int );
    unsigned int GetTechniqueByName(char * );
    unsigned int GetPass(unsigned int ,unsigned int );
    unsigned int GetPassByName(unsigned int ,char * );
    unsigned int GetFunction(unsigned int );
    unsigned int GetFunctionByName(char * );
    unsigned int GetAnnotation(unsigned int ,unsigned int );
    unsigned int GetAnnotationByName(unsigned int ,char * );
    HRESULT SetValue(unsigned int ,void * ,unsigned int );
    HRESULT GetValue(unsigned int ,void * ,unsigned int );
    HRESULT SetBool(unsigned int ,int );
    HRESULT GetBool(unsigned int ,int * );
    HRESULT SetBoolArray(unsigned int ,int * ,unsigned int );
    HRESULT GetBoolArray(unsigned int ,int * ,unsigned int );
    HRESULT SetInt(unsigned int ,int );
    HRESULT GetInt(unsigned int ,int * );
    HRESULT SetIntArray(unsigned int ,int * ,unsigned int );
    HRESULT GetIntArray(unsigned int ,int * ,unsigned int );
    HRESULT SetFloat(unsigned int ,float );
    HRESULT GetFloat(unsigned int ,float * );
    HRESULT SetFloatArray(unsigned int ,float * ,unsigned int );
    HRESULT GetFloatArray(unsigned int ,float * ,unsigned int );
    HRESULT SetVector(unsigned int ,struct D3DXVECTOR4 * );
    HRESULT GetVector(unsigned int ,struct D3DXVECTOR4 * );
    HRESULT SetVectorArray(unsigned int ,struct D3DXVECTOR4 * ,unsigned int );
    HRESULT GetVectorArray(unsigned int ,struct D3DXVECTOR4 * ,unsigned int );
    HRESULT SetMatrix(unsigned int ,struct D3DXMATRIX * );
    HRESULT GetMatrix(unsigned int ,struct D3DXMATRIX * );
    HRESULT SetMatrixArray(unsigned int ,struct D3DXMATRIX * ,unsigned int );
    HRESULT GetMatrixArray(unsigned int ,struct D3DXMATRIX * ,unsigned int );
    HRESULT SetMatrixPointerArray(unsigned int ,struct D3DXMATRIX ** ,unsigned int );
    HRESULT GetMatrixPointerArray(unsigned int ,struct D3DXMATRIX ** ,unsigned int );
    HRESULT SetMatrixTranspose(unsigned int ,struct D3DXMATRIX * );
    HRESULT GetMatrixTranspose(unsigned int ,struct D3DXMATRIX * );
    HRESULT SetMatrixTransposeArray(unsigned int ,struct D3DXMATRIX * ,unsigned int );
    HRESULT GetMatrixTransposeArray(unsigned int ,struct D3DXMATRIX * ,unsigned int );
    HRESULT SetMatrixTransposePointerArray(unsigned int ,struct D3DXMATRIX ** ,unsigned int );
    HRESULT GetMatrixTransposePointerArray(unsigned int ,struct D3DXMATRIX ** ,unsigned int );
    HRESULT SetString(unsigned int ,char * );
    HRESULT GetString(unsigned int ,char ** );
    HRESULT SetTexture(unsigned int ,struct D3DBaseTexture * );
    HRESULT GetTexture(unsigned int ,struct D3DBaseTexture ** );
    HRESULT SetPixelShader(unsigned int ,struct D3DPixelShader * );
    HRESULT GetPixelShader(unsigned int ,struct D3DPixelShader ** );
    HRESULT SetVertexShader(unsigned int ,struct D3DVertexShader * );
    HRESULT GetVertexShader(unsigned int ,struct D3DVertexShader ** );
    HRESULT SetArrayRange(unsigned int ,unsigned int ,unsigned int );
    void ID3DXBaseEffect(struct ID3DXBaseEffect & );
    void ID3DXBaseEffect();
    struct ID3DXBaseEffect & operator=(struct ID3DXBaseEffect & );
};

struct ID3DXBaseEffect : public IUnknown// Size=0x4 (Id=1056)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    HRESULT GetDesc(struct _D3DXEFFECT_DESC * );
    HRESULT GetParameterDesc(unsigned int ,struct _D3DXPARAMETER_DESC * );
    HRESULT GetTechniqueDesc(unsigned int ,struct _D3DXTECHNIQUE_DESC * );
    HRESULT GetPassDesc(unsigned int ,struct _D3DXPASS_DESC * );
    HRESULT GetFunctionDesc(unsigned int ,struct _D3DXFUNCTION_DESC * );
    unsigned int GetParameter(unsigned int ,unsigned int );
    unsigned int GetParameterByName(unsigned int ,char * );
    unsigned int GetParameterBySemantic(unsigned int ,char * );
    unsigned int GetParameterElement(unsigned int ,unsigned int );
    unsigned int GetTechnique(unsigned int );
    unsigned int GetTechniqueByName(char * );
    unsigned int GetPass(unsigned int ,unsigned int );
    unsigned int GetPassByName(unsigned int ,char * );
    unsigned int GetFunction(unsigned int );
    unsigned int GetFunctionByName(char * );
    unsigned int GetAnnotation(unsigned int ,unsigned int );
    unsigned int GetAnnotationByName(unsigned int ,char * );
    HRESULT SetValue(unsigned int ,void * ,unsigned int );
    HRESULT GetValue(unsigned int ,void * ,unsigned int );
    HRESULT SetBool(unsigned int ,int );
    HRESULT GetBool(unsigned int ,int * );
    HRESULT SetBoolArray(unsigned int ,int * ,unsigned int );
    HRESULT GetBoolArray(unsigned int ,int * ,unsigned int );
    HRESULT SetInt(unsigned int ,int );
    HRESULT GetInt(unsigned int ,int * );
    HRESULT SetIntArray(unsigned int ,int * ,unsigned int );
    HRESULT GetIntArray(unsigned int ,int * ,unsigned int );
    HRESULT SetFloat(unsigned int ,float );
    HRESULT GetFloat(unsigned int ,float * );
    HRESULT SetFloatArray(unsigned int ,float * ,unsigned int );
    HRESULT GetFloatArray(unsigned int ,float * ,unsigned int );
    HRESULT SetVector(unsigned int ,struct D3DXVECTOR4 * );
    HRESULT GetVector(unsigned int ,struct D3DXVECTOR4 * );
    HRESULT SetVectorArray(unsigned int ,struct D3DXVECTOR4 * ,unsigned int );
    HRESULT GetVectorArray(unsigned int ,struct D3DXVECTOR4 * ,unsigned int );
    HRESULT SetMatrix(unsigned int ,struct D3DXMATRIX * );
    HRESULT GetMatrix(unsigned int ,struct D3DXMATRIX * );
    HRESULT SetMatrixArray(unsigned int ,struct D3DXMATRIX * ,unsigned int );
    HRESULT GetMatrixArray(unsigned int ,struct D3DXMATRIX * ,unsigned int );
    HRESULT SetMatrixPointerArray(unsigned int ,struct D3DXMATRIX ** ,unsigned int );
    HRESULT GetMatrixPointerArray(unsigned int ,struct D3DXMATRIX ** ,unsigned int );
    HRESULT SetMatrixTranspose(unsigned int ,struct D3DXMATRIX * );
    HRESULT GetMatrixTranspose(unsigned int ,struct D3DXMATRIX * );
    HRESULT SetMatrixTransposeArray(unsigned int ,struct D3DXMATRIX * ,unsigned int );
    HRESULT GetMatrixTransposeArray(unsigned int ,struct D3DXMATRIX * ,unsigned int );
    HRESULT SetMatrixTransposePointerArray(unsigned int ,struct D3DXMATRIX ** ,unsigned int );
    HRESULT GetMatrixTransposePointerArray(unsigned int ,struct D3DXMATRIX ** ,unsigned int );
    HRESULT SetString(unsigned int ,char * );
    HRESULT GetString(unsigned int ,char ** );
    HRESULT SetTexture(unsigned int ,struct D3DBaseTexture * );
    HRESULT GetTexture(unsigned int ,struct D3DBaseTexture ** );
    HRESULT SetPixelShader(unsigned int ,struct D3DPixelShader * );
    HRESULT GetPixelShader(unsigned int ,struct D3DPixelShader ** );
    HRESULT SetVertexShader(unsigned int ,struct D3DVertexShader * );
    HRESULT GetVertexShader(unsigned int ,struct D3DVertexShader ** );
    HRESULT SetArrayRange(unsigned int ,unsigned int ,unsigned int );
    void ID3DXBaseEffect(struct ID3DXBaseEffect & );
    void ID3DXBaseEffect();
    struct ID3DXBaseEffect & operator=(struct ID3DXBaseEffect & );
};

union GPUFLOW_COND_CALL// Size=0x8 (Id=1057)
{
    struct // Size=0x8 (Id=0)
    {
        unsigned long JumpAddress:13;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xd
        unsigned long Force:1;// Offset=0x0 Size=0x4 BitOffset=0xd BitSize=0x1
        unsigned long Predicated:1;// Offset=0x0 Size=0x4 BitOffset=0xe BitSize=0x1
        unsigned long BooleanAddress:8;// Offset=0x4 Size=0x4 BitOffset=0x2 BitSize=0x8
        unsigned long Condition:1;// Offset=0x4 Size=0x4 BitOffset=0xa BitSize=0x1
        unsigned long AbsoluteAddressing:1;// Offset=0x4 Size=0x4 BitOffset=0xb BitSize=0x1
        unsigned long Op:4;// Offset=0x4 Size=0x4 BitOffset=0xc BitSize=0x4
    };
};

struct ID3DXInclude// Size=0x4 (Id=1058)
{
    HRESULT Open(enum _D3DXINCLUDE_TYPE ,char * ,void * ,void ** ,unsigned int * ,char * ,unsigned long );
    HRESULT Close(void * );
    void ID3DXInclude(struct ID3DXInclude & );
    void ID3DXInclude();
    struct ID3DXInclude & operator=(struct ID3DXInclude & );
};

struct ID3DXInclude// Size=0x4 (Id=1059)
{
    HRESULT Open(enum _D3DXINCLUDE_TYPE ,char * ,void * ,void ** ,unsigned int * ,char * ,unsigned long );
    HRESULT Close(void * );
    void ID3DXInclude(struct ID3DXInclude & );
    void ID3DXInclude();
    struct ID3DXInclude & operator=(struct ID3DXInclude & );
};

struct D3DXVECTOR3_16F// Size=0x6 (Id=1060)
{
    void D3DXVECTOR3_16F(struct D3DXVECTOR3_16F & );
    void D3DXVECTOR3_16F(struct D3DXFLOAT16 & ,struct D3DXFLOAT16 & ,struct D3DXFLOAT16 & );
    void D3DXVECTOR3_16F(struct D3DXFLOAT16 * );
    void D3DXVECTOR3_16F(struct _D3DVECTOR & );
    void D3DXVECTOR3_16F(float * );
    void D3DXVECTOR3_16F();
    struct D3DXFLOAT16 * operator struct D3DXFLOAT16 *();
    struct D3DXFLOAT16 * operator const struct D3DXFLOAT16 *();
    struct D3DXVECTOR3_16F & operator=(struct D3DXVECTOR3_16F & );
    int operator==(struct D3DXVECTOR3_16F & );
    int operator!=(struct D3DXVECTOR3_16F & );
    struct D3DXFLOAT16 x;// Offset=0x0 Size=0x2
    struct D3DXFLOAT16 y;// Offset=0x2 Size=0x2
    struct D3DXFLOAT16 z;// Offset=0x4 Size=0x2
};

struct D3DXVECTOR3_16F// Size=0x6 (Id=1061)
{
    void D3DXVECTOR3_16F(struct D3DXVECTOR3_16F & );
    void D3DXVECTOR3_16F(struct D3DXFLOAT16 & ,struct D3DXFLOAT16 & ,struct D3DXFLOAT16 & );
    void D3DXVECTOR3_16F(struct D3DXFLOAT16 * );
    void D3DXVECTOR3_16F(struct _D3DVECTOR & );
    void D3DXVECTOR3_16F(float * );
    void D3DXVECTOR3_16F();
    struct D3DXFLOAT16 * operator struct D3DXFLOAT16 *();
    struct D3DXFLOAT16 * operator const struct D3DXFLOAT16 *();
    struct D3DXVECTOR3_16F & operator=(struct D3DXVECTOR3_16F & );
    int operator==(struct D3DXVECTOR3_16F & );
    int operator!=(struct D3DXVECTOR3_16F & );
    struct D3DXFLOAT16 x;// Offset=0x0 Size=0x2
    struct D3DXFLOAT16 y;// Offset=0x2 Size=0x2
    struct D3DXFLOAT16 z;// Offset=0x4 Size=0x2
};

struct _SE_IMPERSONATION_STATE// Size=0xc (Id=1062)
{
    void * Token;// Offset=0x0 Size=0x4
    unsigned char CopyOnOpen;// Offset=0x4 Size=0x1
    unsigned char EffectiveOnly;// Offset=0x5 Size=0x1
    unsigned char __align0[2];// Offset=0x6 Size=0x2
    enum _SECURITY_IMPERSONATION_LEVEL Level;// Offset=0x8 Size=0x4
};

union GPUCOMMAND_EVENT_WRITE_SCREEN_EXTENT// Size=0x8 (Id=1063)
{
    struct // Size=0x8 (Id=0)
    {
        unsigned long Initiator:6;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x6
        unsigned long Endian:2;// Offset=0x4 Size=0x4 BitOffset=0x0 BitSize=0x2
        unsigned long Address:30;// Offset=0x4 Size=0x4 BitOffset=0x2 BitSize=0x1e
    };
    unsigned long dword[2];// Offset=0x0 Size=0x8
};

struct XNQOS// Size=0x20 (Id=1064)
{
    unsigned int cxnqos;// Offset=0x0 Size=0x4
    unsigned int cxnqosPending;// Offset=0x4 Size=0x4
    struct XNQOSINFO axnqosinfo[1];// Offset=0x8 Size=0x18
};

struct HBITMAP__// Size=0x4 (Id=1065)
{
    int unused;// Offset=0x0 Size=0x4
};

struct _TypeDescriptor// Size=0x8 (Id=1066)
{
    void * pVFTable;// Offset=0x0 Size=0x4
    void * spare;// Offset=0x4 Size=0x4
    char name[0];
};

union GPU_POINT// Size=0x4 (Id=1067)
{
    struct // Size=0x4 (Id=0)
    {
        int X:15;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xf
        int Y:15;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0xf
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

struct _XGCPUSHADERVERTEXSTREAM// Size=0x8 (Id=1068)
{
    unsigned long BaseAddress;// Offset=0x0 Size=0x4
    unsigned short VertexStride;// Offset=0x4 Size=0x2
};

struct _IMAGE_IMPORT_BY_NAME// Size=0x4 (Id=1069)
{
    unsigned short Hint;// Offset=0x0 Size=0x2
    unsigned char Name[1];// Offset=0x2 Size=0x1
};

struct _IMAGE_BASE_RELOCATION// Size=0x8 (Id=1070)
{
    unsigned long VirtualAddress;// Offset=0x0 Size=0x4
    unsigned long SizeOfBlock;// Offset=0x4 Size=0x4
};

struct _FILE_END_OF_FILE_INFO// Size=0x8 (Id=1071)
{
    union _LARGE_INTEGER EndOfFile;// Offset=0x0 Size=0x8
};

union GPUCOMMAND_COND_WRITE// Size=0x18 (Id=1072)
{
    struct // Size=0x18 (Id=0)
    {
        unsigned long Function:3;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x3
        unsigned long PollSpace:1;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x1
        unsigned long WriteSpace:1;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x1
        union // Size=0x8 (Id=0)
        {
            unsigned long PollEndian:2;// Offset=0x4 Size=0x4 BitOffset=0x0 BitSize=0x2
            unsigned long PollAddress:30;// Offset=0x4 Size=0x4 BitOffset=0x2 BitSize=0x1e
            unsigned long PollRegister:15;// Offset=0x4 Size=0x4 BitOffset=0x0 BitSize=0xf
        };
        unsigned long Reference:32;// Offset=0x8 Size=0x4 BitOffset=0x0 BitSize=0x20
        unsigned long Mask:32;// Offset=0xc Size=0x4 BitOffset=0x0 BitSize=0x20
        union // Size=0x14 (Id=0)
        {
            unsigned long WriteEndian:2;// Offset=0x10 Size=0x4 BitOffset=0x0 BitSize=0x2
            unsigned long WriteAddress:30;// Offset=0x10 Size=0x4 BitOffset=0x2 BitSize=0x1e
            unsigned long WriteRegister:15;// Offset=0x10 Size=0x4 BitOffset=0x0 BitSize=0xf
        };
        unsigned long Data:32;// Offset=0x14 Size=0x4 BitOffset=0x0 BitSize=0x20
    };
    unsigned long dword[6];// Offset=0x0 Size=0x18
};

struct IStream// Size=0x4 (Id=1073)
{
    struct IStreamVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct IStream : public ISequentialStream// Size=0x4 (Id=1074)
{
    HRESULT Seek(union _LARGE_INTEGER ,unsigned long ,union _ULARGE_INTEGER * );
    HRESULT SetSize(union _ULARGE_INTEGER );
    HRESULT CopyTo(struct IStream * ,union _ULARGE_INTEGER ,union _ULARGE_INTEGER * ,union _ULARGE_INTEGER * );
    HRESULT Commit(unsigned long );
    HRESULT Revert();
    HRESULT LockRegion(union _ULARGE_INTEGER ,union _ULARGE_INTEGER ,unsigned long );
    HRESULT UnlockRegion(union _ULARGE_INTEGER ,union _ULARGE_INTEGER ,unsigned long );
    HRESULT Stat(struct tagSTATSTG * ,unsigned long );
    HRESULT Clone(struct IStream ** );
    void IStream(struct IStream & );
    void IStream();
    struct IStream & operator=(struct IStream & );
};

struct _D3DVIEWPORT9// Size=0x18 (Id=1075)
{
    unsigned long X;// Offset=0x0 Size=0x4
    unsigned long Y;// Offset=0x4 Size=0x4
    unsigned long Width;// Offset=0x8 Size=0x4
    unsigned long Height;// Offset=0xc Size=0x4
    float MinZ;// Offset=0x10 Size=0x4
    float MaxZ;// Offset=0x14 Size=0x4
};

struct GPU_POINTPACKET// Size=0x20 (Id=1076)
{
    float PolyOffsetFrontScale;// Offset=0x0 Size=0x4
    float PolyOffsetFrontOffset;// Offset=0x4 Size=0x4
    float PolyOffsetBackScale;// Offset=0x8 Size=0x4
    float PolyOffsetBackOffset;// Offset=0xc Size=0x4
    float PointXRad;// Offset=0x10 Size=0x4
    float PointYRad;// Offset=0x14 Size=0x4
    float PointConstantSize;// Offset=0x18 Size=0x4
    float PointCullRad;// Offset=0x1c Size=0x4
};

union _IMAGE_SYMBOL::<unnamed-type-N>// Size=0x8 (Id=1077)
{
    unsigned char ShortName[8];// Offset=0x0 Size=0x8
    struct <unnamed-type-Name>// Size=0x8 (Id=13077)
    {
        unsigned long Short;// Offset=0x0 Size=0x4
        unsigned long Long;// Offset=0x4 Size=0x4
    };
    struct _IMAGE_SYMBOL::<unnamed-type-N>::<unnamed-type-Name> Name;// Offset=0x0 Size=0x8
    unsigned long LongName[2];// Offset=0x0 Size=0x8
};

struct _IMAGE_SYMBOL::<unnamed-type-N>::<unnamed-type-Name>// Size=0x8 (Id=1078)
{
    unsigned long Short;// Offset=0x0 Size=0x4
    unsigned long Long;// Offset=0x4 Size=0x4
};

union GPU_OUTPUTPATHCONTROL// Size=0x4 (Id=1079)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long PathSelect:2;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x2
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

union GPUCOMMAND_EVENT_WRITE_SHADER// Size=0xc (Id=1080)
{
    struct // Size=0xc (Id=0)
    {
        unsigned long Initiator:6;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x6
        unsigned long SoftwareManaged:1;// Offset=0x0 Size=0x4 BitOffset=0x1e BitSize=0x1
        unsigned long UseCounter:1;// Offset=0x0 Size=0x4 BitOffset=0x1f BitSize=0x1
        unsigned long Endian:2;// Offset=0x4 Size=0x4 BitOffset=0x0 BitSize=0x2
        unsigned long Address:30;// Offset=0x4 Size=0x4 BitOffset=0x2 BitSize=0x1e
        unsigned long Data:32;// Offset=0x8 Size=0x4 BitOffset=0x0 BitSize=0x20
    };
    unsigned long dword[3];// Offset=0x0 Size=0xc
};

struct tagRECT// Size=0x10 (Id=1081)
{
    long left;// Offset=0x0 Size=0x4
    long top;// Offset=0x4 Size=0x4
    long right;// Offset=0x8 Size=0x4
    long bottom;// Offset=0xc Size=0x4
};

struct XMSG_CUSTOMACTION::<unnamed-type-rgTranslations>// Size=0x34 (Id=1082)
{
    unsigned long dwLanguageId;// Offset=0x0 Size=0x4
    wchar_t wszActionText[23];// Offset=0x4 Size=0x2e
    unsigned short wReserved;// Offset=0x32 Size=0x2
};

struct XPLAYERLIST_USER// Size=0x48 (Id=1083)
{
    unsigned long long xuid;// Offset=0x0 Size=0x8
    wchar_t wszCustomText[31];// Offset=0x8 Size=0x3e
};

struct XPLAYERLIST_RESULT// Size=0x10 (Id=1084)
{
    unsigned long long xuidSelected;// Offset=0x0 Size=0x8
    unsigned long dwKeyCode;// Offset=0x8 Size=0x4
};

struct _LDBL12// Size=0xc (Id=1085)
{
    unsigned char ld12[12];// Offset=0x0 Size=0xc
};

struct GPU_SAMPLECOUNT// Size=0x20 (Id=1086)
{
    unsigned long Total[2];// Offset=0x0 Size=0x8
    unsigned long ZFail[2];// Offset=0x8 Size=0x8
    unsigned long ZPass[2];// Offset=0x10 Size=0x8
    unsigned long StencilFail[2];// Offset=0x18 Size=0x8
};

struct GPU_SCREENEXTENT// Size=0xc (Id=1087)
{
    unsigned short MinX;// Offset=0x0 Size=0x2
    unsigned short MaxX;// Offset=0x2 Size=0x2
    unsigned short MinY;// Offset=0x4 Size=0x2
    unsigned short MaxY;// Offset=0x6 Size=0x2
    unsigned short MinZ;// Offset=0x8 Size=0x2
    unsigned short MaxZ;// Offset=0xa Size=0x2
};

union GPU_DEPTHINFO// Size=0x4 (Id=1088)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long DepthBase:12;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xc
        unsigned long DepthFormat:1;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x1
        unsigned long DisableHZClamp:1;// Offset=0x0 Size=0x4 BitOffset=0x11 BitSize=0x1
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

union GPU_CONTEXTMISC// Size=0x4 (Id=1089)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long InstPredOptimize:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long OutputScreenXY:1;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x1
        unsigned long SampleControl:2;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x2
        unsigned long ParamGenPos:8;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x8
        unsigned long PerfCounterRef:1;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x1
        unsigned long YieldOptimize:1;// Offset=0x0 Size=0x4 BitOffset=0x11 BitSize=0x1
        unsigned long TxCacheSelect:1;// Offset=0x0 Size=0x4 BitOffset=0x12 BitSize=0x1
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

union GPU_DEPTHCONTROL// Size=0x4 (Id=1090)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long StencilEnable:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long ZEnable:1;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x1
        unsigned long ZWriteEnable:1;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x1
        unsigned long ZFunc:3;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x3
        unsigned long BackFaceEnable:1;// Offset=0x0 Size=0x4 BitOffset=0x7 BitSize=0x1
        unsigned long StencilFunc:3;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x3
        unsigned long StencilFail:3;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x3
        unsigned long StencilZPass:3;// Offset=0x0 Size=0x4 BitOffset=0xe BitSize=0x3
        unsigned long StencilZFail:3;// Offset=0x0 Size=0x4 BitOffset=0x11 BitSize=0x3
        unsigned long StencilFuncBF:3;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0x3
        unsigned long StencilFailBF:3;// Offset=0x0 Size=0x4 BitOffset=0x17 BitSize=0x3
        unsigned long StencilZPassBF:3;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x3
        unsigned long StencilZFailBF:3;// Offset=0x0 Size=0x4 BitOffset=0x1d BitSize=0x3
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

union GPU_COLORCONTROL// Size=0x4 (Id=1091)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long AlphaFunc:3;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x3
        unsigned long AlphaTestEnable:1;// Offset=0x0 Size=0x4 BitOffset=0x3 BitSize=0x1
        unsigned long AlphaToMaskEnable:1;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x1
        unsigned long AlphaToMaskOffset0:2;// Offset=0x0 Size=0x4 BitOffset=0x18 BitSize=0x2
        unsigned long AlphaToMaskOffset1:2;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x2
        unsigned long AlphaToMaskOffset2:2;// Offset=0x0 Size=0x4 BitOffset=0x1c BitSize=0x2
        unsigned long AlphaToMaskOffset3:2;// Offset=0x0 Size=0x4 BitOffset=0x1e BitSize=0x2
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

union GPU_CLIPCONTROL// Size=0x4 (Id=1092)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long ClipPlaneEnable0:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long ClipPlaneEnable1:1;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x1
        unsigned long ClipPlaneEnable2:1;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x1
        unsigned long ClipPlaneEnable3:1;// Offset=0x0 Size=0x4 BitOffset=0x3 BitSize=0x1
        unsigned long ClipPlaneEnable4:1;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x1
        unsigned long ClipPlaneEnable5:1;// Offset=0x0 Size=0x4 BitOffset=0x5 BitSize=0x1
        unsigned long ClipPlaneMode:2;// Offset=0x0 Size=0x4 BitOffset=0xe BitSize=0x2
        unsigned long ClipDisable:1;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x1
        unsigned long ClipPlaneCullOnlyEnable:1;// Offset=0x0 Size=0x4 BitOffset=0x11 BitSize=0x1
        unsigned long BoundaryEdgeFlagEnable:1;// Offset=0x0 Size=0x4 BitOffset=0x12 BitSize=0x1
        unsigned long DxClipSpaceDef:1;// Offset=0x0 Size=0x4 BitOffset=0x13 BitSize=0x1
        unsigned long DisableClipErrDetect:1;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0x1
        unsigned long VtxKillOr:1;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x1
        unsigned long XyNanRetain:1;// Offset=0x0 Size=0x4 BitOffset=0x16 BitSize=0x1
        unsigned long ZNanRetain:1;// Offset=0x0 Size=0x4 BitOffset=0x17 BitSize=0x1
        unsigned long WNanRetain:1;// Offset=0x0 Size=0x4 BitOffset=0x18 BitSize=0x1
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

union GPU_MODECONTROL// Size=0x4 (Id=1093)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long CullMode:3;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x3
        unsigned long PolyMode:2;// Offset=0x0 Size=0x4 BitOffset=0x3 BitSize=0x2
        unsigned long PolyModeFrontPType:3;// Offset=0x0 Size=0x4 BitOffset=0x5 BitSize=0x3
        unsigned long PolyModeBackPType:3;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x3
        unsigned long PolyOffsetFrontEnable:1;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x1
        unsigned long PolyOffsetBackEnable:1;// Offset=0x0 Size=0x4 BitOffset=0xc BitSize=0x1
        unsigned long PolyOffsetParaEnable:1;// Offset=0x0 Size=0x4 BitOffset=0xd BitSize=0x1
        unsigned long MsaaEnable:1;// Offset=0x0 Size=0x4 BitOffset=0xf BitSize=0x1
        unsigned long VtxWindowOffsetEnable:1;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x1
        unsigned long ProvokingVtxLast:1;// Offset=0x0 Size=0x4 BitOffset=0x13 BitSize=0x1
        unsigned long PerspCorrDisable:1;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0x1
        unsigned long MultiPrimIbEnable:1;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x1
        unsigned long QuadOrderEnable:1;// Offset=0x0 Size=0x4 BitOffset=0x17 BitSize=0x1
        unsigned long ScOneQuadPerClock:1;// Offset=0x0 Size=0x4 BitOffset=0x18 BitSize=0x1
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

union GPU_VTECONTROL// Size=0x4 (Id=1094)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long VportXScaleEnable:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long VportXOffsetEnable:1;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x1
        unsigned long VportYScaleEnable:1;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x1
        unsigned long VportYOffsetEnable:1;// Offset=0x0 Size=0x4 BitOffset=0x3 BitSize=0x1
        unsigned long VportZScaleEnable:1;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x1
        unsigned long VportZOffsetEnable:1;// Offset=0x0 Size=0x4 BitOffset=0x5 BitSize=0x1
        unsigned long VtxXyFmt:1;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x1
        unsigned long VtxZFmt:1;// Offset=0x0 Size=0x4 BitOffset=0x9 BitSize=0x1
        unsigned long VtxW0Fmt:1;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0x1
        unsigned long PerfCounterRef:1;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x1
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

union GPU_EDRAMMODECONTROL// Size=0x4 (Id=1095)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long EdramMode:3;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x3
        unsigned long ColorDepthMacro:1;// Offset=0x0 Size=0x4 BitOffset=0x3 BitSize=0x1
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

union GPU_LINECONTROL// Size=0x4 (Id=1096)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long Width:16;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x10
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

union GPU_VTXCONTROL// Size=0x4 (Id=1097)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long PixCenter:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long RoundMode:2;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x2
        unsigned long QuantMode:3;// Offset=0x0 Size=0x4 BitOffset=0x3 BitSize=0x3
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

union GPU_COPYDESTINFO// Size=0x4 (Id=1098)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long CopyDestEndian:3;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x3
        unsigned long CopyDestArray:1;// Offset=0x0 Size=0x4 BitOffset=0x3 BitSize=0x1
        unsigned long CopyDestSlice:3;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x3
        unsigned long CopyDestFormat:6;// Offset=0x0 Size=0x4 BitOffset=0x7 BitSize=0x6
        unsigned long CopyDestNumber:3;// Offset=0x0 Size=0x4 BitOffset=0xd BitSize=0x3
        unsigned long CopyDestExpBias:6;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x6
        unsigned long CopyDestSwap:1;// Offset=0x0 Size=0x4 BitOffset=0x18 BitSize=0x1
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

union GPU_COPYREF// Size=0x4 (Id=1099)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long CopyRefRed:8;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x8
        unsigned long CopyRefGreen:8;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x8
        unsigned long CopyRefBlue:8;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x8
        unsigned long CopyRefAlpha:8;// Offset=0x0 Size=0x4 BitOffset=0x18 BitSize=0x8
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

struct GPU_WINDOWPACKET// Size=0xc (Id=1100)
{
    union GPU_POINT WindowOffset;// Offset=0x0 Size=0x4
    union GPU_POINT WindowScissorTL;// Offset=0x4 Size=0x4
    union GPU_POINT WindowScissorBR;// Offset=0x8 Size=0x4
};

struct GPUTEXTURESIZE_3D// Size=0x4 (Id=1101)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long Width:11;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xb
        unsigned long Height:11;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0xb
        unsigned long Depth:10;// Offset=0x0 Size=0x4 BitOffset=0x16 BitSize=0xa
    };
};

union GPUTEXTURE_FETCH_CONSTANT::_unnamed_1102::<unnamed-type-Size>// Size=0x4 (Id=1102)
{
    struct GPUTEXTURESIZE_1D OneD;// Offset=0x0 Size=0x4
    struct GPUTEXTURESIZE_2D TwoD;// Offset=0x0 Size=0x4
    struct GPUTEXTURESIZE_3D ThreeD;// Offset=0x0 Size=0x4
    struct GPUTEXTURESIZE_STACK Stack;// Offset=0x0 Size=0x4
};

union GPUVERTEX_FETCH_INSTRUCTION// Size=0xc (Id=1103)
{
    struct // Size=0xc (Id=0)
    {
        unsigned long Op:5;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x5
        unsigned long SrcGPR:6;// Offset=0x0 Size=0x4 BitOffset=0x5 BitSize=0x6
        unsigned long SrcLoopIndexRelative:1;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x1
        unsigned long DestGPR:6;// Offset=0x0 Size=0x4 BitOffset=0xc BitSize=0x6
        unsigned long DestLoopIndexRelative:1;// Offset=0x0 Size=0x4 BitOffset=0x12 BitSize=0x1
        unsigned long FetchValidOnly:1;// Offset=0x0 Size=0x4 BitOffset=0x13 BitSize=0x1
        unsigned long ConstIndex:5;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0x5
        unsigned long ConstIndexSelect:2;// Offset=0x0 Size=0x4 BitOffset=0x19 BitSize=0x2
        unsigned long PrefetchCount:3;// Offset=0x0 Size=0x4 BitOffset=0x1b BitSize=0x3
        unsigned long SrcSelect:2;// Offset=0x0 Size=0x4 BitOffset=0x1e BitSize=0x2
        unsigned long SwizzleX:3;// Offset=0x4 Size=0x4 BitOffset=0x0 BitSize=0x3
        unsigned long SwizzleY:3;// Offset=0x4 Size=0x4 BitOffset=0x3 BitSize=0x3
        unsigned long SwizzleZ:3;// Offset=0x4 Size=0x4 BitOffset=0x6 BitSize=0x3
        unsigned long SwizzleW:3;// Offset=0x4 Size=0x4 BitOffset=0x9 BitSize=0x3
        unsigned long Signed:1;// Offset=0x4 Size=0x4 BitOffset=0xc BitSize=0x1
        unsigned long NumFormat:1;// Offset=0x4 Size=0x4 BitOffset=0xd BitSize=0x1
        unsigned long RoundIndex:1;// Offset=0x4 Size=0x4 BitOffset=0xf BitSize=0x1
        unsigned long DataFormat:6;// Offset=0x4 Size=0x4 BitOffset=0x10 BitSize=0x6
        int ExpAdjust:6;// Offset=0x4 Size=0x4 BitOffset=0x18 BitSize=0x6
        unsigned long MiniFetch:1;// Offset=0x4 Size=0x4 BitOffset=0x1e BitSize=0x1
        unsigned long Predicated:1;// Offset=0x4 Size=0x4 BitOffset=0x1f BitSize=0x1
        unsigned long Stride:8;// Offset=0x8 Size=0x4 BitOffset=0x0 BitSize=0x8
        int Offset:23;// Offset=0x8 Size=0x4 BitOffset=0x8 BitSize=0x17
        unsigned long PredicationCondition:1;// Offset=0x8 Size=0x4 BitOffset=0x1f BitSize=0x1
    };
    unsigned long dword[3];// Offset=0x0 Size=0xc
};

union GPUCOMMAND_DRAW_INDEX// Size=0x10 (Id=1104)
{
    struct // Size=0x10 (Id=0)
    {
        unsigned long VizQueryId:6;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x6
        unsigned long UseVizQuery:1;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x1
        unsigned long PrimType:6;// Offset=0x4 Size=0x4 BitOffset=0x0 BitSize=0x6
        unsigned long SrcSelect:2;// Offset=0x4 Size=0x4 BitOffset=0x6 BitSize=0x2
        unsigned long MajorMode:3;// Offset=0x4 Size=0x4 BitOffset=0x8 BitSize=0x3
        unsigned long IndexType:1;// Offset=0x4 Size=0x4 BitOffset=0xb BitSize=0x1
        unsigned long NotEndOfPacket:1;// Offset=0x4 Size=0x4 BitOffset=0xc BitSize=0x1
        unsigned long NumIndices:16;// Offset=0x4 Size=0x4 BitOffset=0x10 BitSize=0x10
        unsigned long IndexBase:32;// Offset=0x8 Size=0x4 BitOffset=0x0 BitSize=0x20
        unsigned long IndexSize:24;// Offset=0xc Size=0x4 BitOffset=0x0 BitSize=0x18
        unsigned long Endian:2;// Offset=0xc Size=0x4 BitOffset=0x1e BitSize=0x2
    };
    unsigned long dword[4];// Offset=0x0 Size=0x10
};

union GPUCOMMAND_SET_STATE// Size=0x30 (Id=1105)
{
    union // Size=0x30 (Id=0)
    {
        struct // Size=0x30 (Id=0)
        {
            unsigned long DestinationSize:4;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x4
            unsigned long DestinationDisable:1;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x1
            unsigned long DestinationAddress:27;// Offset=0x0 Size=0x4 BitOffset=0x5 BitSize=0x1b
            unsigned long WindowSize:4;// Offset=0x4 Size=0x4 BitOffset=0x0 BitSize=0x4
            unsigned long WindowDisable:1;// Offset=0x4 Size=0x4 BitOffset=0x4 BitSize=0x1
            unsigned long WindowAddress:27;// Offset=0x4 Size=0x4 BitOffset=0x5 BitSize=0x1b
            unsigned long ValuesSize:4;// Offset=0x8 Size=0x4 BitOffset=0x0 BitSize=0x4
            unsigned long ValuesDisable:1;// Offset=0x8 Size=0x4 BitOffset=0x4 BitSize=0x1
            unsigned long ValuesAddress:27;// Offset=0x8 Size=0x4 BitOffset=0x5 BitSize=0x1b
            unsigned long ProgramSize:4;// Offset=0xc Size=0x4 BitOffset=0x0 BitSize=0x4
            unsigned long ProgramDisable:1;// Offset=0xc Size=0x4 BitOffset=0x4 BitSize=0x1
            unsigned long ProgramAddress:27;// Offset=0xc Size=0x4 BitOffset=0x5 BitSize=0x1b
            unsigned long ControlSize:4;// Offset=0x10 Size=0x4 BitOffset=0x0 BitSize=0x4
            unsigned long ControlDisable:1;// Offset=0x10 Size=0x4 BitOffset=0x4 BitSize=0x1
            unsigned long ControlAddress:27;// Offset=0x10 Size=0x4 BitOffset=0x5 BitSize=0x1b
            unsigned long TessellatorSize:4;// Offset=0x14 Size=0x4 BitOffset=0x0 BitSize=0x4
            unsigned long TessellatorDisable:1;// Offset=0x14 Size=0x4 BitOffset=0x4 BitSize=0x1
            unsigned long TessellatorAddress:27;// Offset=0x14 Size=0x4 BitOffset=0x5 BitSize=0x1b
            unsigned long MiscSize:4;// Offset=0x18 Size=0x4 BitOffset=0x0 BitSize=0x4
            unsigned long MiscDisable:1;// Offset=0x18 Size=0x4 BitOffset=0x4 BitSize=0x1
            unsigned long MiscAddress:27;// Offset=0x18 Size=0x4 BitOffset=0x5 BitSize=0x1b
            unsigned long PointSize:4;// Offset=0x1c Size=0x4 BitOffset=0x0 BitSize=0x4
            unsigned long PointDisable:1;// Offset=0x1c Size=0x4 BitOffset=0x4 BitSize=0x1
            unsigned long PointAddress:27;// Offset=0x1c Size=0x4 BitOffset=0x5 BitSize=0x1b
            unsigned long VertexShaderDisable:1;// Offset=0x20 Size=0x4 BitOffset=0x4 BitSize=0x1
            unsigned long VertexShaderAddress:27;// Offset=0x20 Size=0x4 BitOffset=0x5 BitSize=0x1b
            unsigned long VertexShaderSize:14;// Offset=0x24 Size=0x4 BitOffset=0x0 BitSize=0xe
            unsigned long PixelShaderDisable:1;// Offset=0x28 Size=0x4 BitOffset=0x4 BitSize=0x1
            unsigned long PixelShaderAddress:27;// Offset=0x28 Size=0x4 BitOffset=0x5 BitSize=0x1b
            unsigned long PixelShaderSize:14;// Offset=0x2c Size=0x4 BitOffset=0x0 BitSize=0xe
        };
        unsigned long dword[10];// Offset=0x0 Size=0x28
    };
};

union GPUCOMMAND_WAIT_REG_GTE// Size=0x10 (Id=1106)
{
    struct // Size=0x10 (Id=0)
    {
        unsigned long Register:15;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xf
        unsigned long Reference:32;// Offset=0x4 Size=0x4 BitOffset=0x0 BitSize=0x20
        unsigned long Mask:32;// Offset=0x8 Size=0x4 BitOffset=0x0 BitSize=0x20
        unsigned long WaitInterval:16;// Offset=0xc Size=0x4 BitOffset=0x0 BitSize=0x10
    };
    unsigned long dword[4];// Offset=0x0 Size=0x10
};

union GPUCOMMAND_FIX_2_FLT_REG// Size=0x8 (Id=1107)
{
    struct // Size=0x8 (Id=0)
    {
        unsigned long Register:15;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xf
        unsigned long Value:8;// Offset=0x4 Size=0x4 BitOffset=0x0 BitSize=0x8
    };
    unsigned long dword[2];// Offset=0x0 Size=0x8
};

union GPUCOMMAND_SET_BIN_MASK_HI// Size=0x4 (Id=1108)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long High:32;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x20
    };
    unsigned long dword[1];// Offset=0x0 Size=0x4
};

union GPUCOMMAND_SET_BIN_SELECT_LO// Size=0x4 (Id=1109)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long Low:32;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x20
    };
    unsigned long dword[1];// Offset=0x0 Size=0x4
};

union GPUCOMMAND_SET_BIN_SELECT_HI// Size=0x4 (Id=1110)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long High:32;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x20
    };
    unsigned long dword[1];// Offset=0x0 Size=0x4
};

union IOCPERFCOUNTER_VALUE// Size=0x8 (Id=1111)
{
    struct // Size=0x8 (Id=0)
    {
        unsigned long Low:32;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x20
        unsigned long High:16;// Offset=0x4 Size=0x4 BitOffset=0x0 BitSize=0x10
    };
    union _ULARGE_INTEGER qword;// Offset=0x0 Size=0x8
};

struct ID3DXFileSaveObject : public IUnknown// Size=0x4 (Id=1112)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    HRESULT GetFile(struct ID3DXFile ** );
    HRESULT AddDataObject(struct _GUID & ,char * ,struct _GUID * ,unsigned long ,void * ,struct ID3DXFileSaveData ** );
    HRESULT Save();
    void ID3DXFileSaveObject(struct ID3DXFileSaveObject & );
    void ID3DXFileSaveObject();
    struct ID3DXFileSaveObject & operator=(struct ID3DXFileSaveObject & );
};

struct ID3DXFileSaveObject : public IUnknown// Size=0x4 (Id=1113)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    HRESULT GetFile(struct ID3DXFile ** );
    HRESULT AddDataObject(struct _GUID & ,char * ,struct _GUID * ,unsigned long ,void * ,struct ID3DXFileSaveData ** );
    HRESULT Save();
    void ID3DXFileSaveObject(struct ID3DXFileSaveObject & );
    void ID3DXFileSaveObject();
    struct ID3DXFileSaveObject & operator=(struct ID3DXFileSaveObject & );
};

struct _XMBYTEN4// Size=0x4 (Id=1114)
{
    union // Size=0x4 (Id=0)
    {
        char x;// Offset=0x0 Size=0x1
        char y;// Offset=0x1 Size=0x1
        char z;// Offset=0x2 Size=0x1
        char w;// Offset=0x3 Size=0x1
        unsigned int v;// Offset=0x0 Size=0x4
    };
    void _XMBYTEN4(float * );
    void _XMBYTEN4(float ,float ,float ,float );
    void _XMBYTEN4(char * );
    void _XMBYTEN4(unsigned int );
    void _XMBYTEN4(char ,char ,char ,char );
    void _XMBYTEN4();
    struct _XMBYTEN4 & operator=(struct _XMBYTEN4 & );
};

struct _XMBYTEN4// Size=0x4 (Id=1115)
{
    union // Size=0x4 (Id=0)
    {
        char x;// Offset=0x0 Size=0x1
        char y;// Offset=0x1 Size=0x1
        char z;// Offset=0x2 Size=0x1
        char w;// Offset=0x3 Size=0x1
        unsigned int v;// Offset=0x0 Size=0x4
    };
    void _XMBYTEN4(float * );
    void _XMBYTEN4(float ,float ,float ,float );
    void _XMBYTEN4(char * );
    void _XMBYTEN4(unsigned int );
    void _XMBYTEN4(char ,char ,char ,char );
    void _XMBYTEN4();
    struct _XMBYTEN4 & operator=(struct _XMBYTEN4 & );
};

struct _DXFILELOADMEMORY// Size=0x8 (Id=1116)
{
    void * lpMemory;// Offset=0x0 Size=0x4
    unsigned long dSize;// Offset=0x4 Size=0x4
};

struct timeval// Size=0x8 (Id=1117)
{
    long tv_sec;// Offset=0x0 Size=0x4
    long tv_usec;// Offset=0x4 Size=0x4
};

struct D3DXFLOAT16// Size=0x2 (Id=1118)
{
    void D3DXFLOAT16(struct D3DXFLOAT16 & );
    void D3DXFLOAT16(float );
    void D3DXFLOAT16();
    float operator float();
    int operator==(struct D3DXFLOAT16 & );
    int operator!=(struct D3DXFLOAT16 & );
    unsigned short value;// Offset=0x0 Size=0x2
};

struct HCOLORSPACE__// Size=0x4 (Id=1119)
{
    int unused;// Offset=0x0 Size=0x4
};

struct _D3DXFRAME// Size=0x50 (Id=1120)
{
    char * Name;// Offset=0x0 Size=0x4
    struct D3DXMATRIX TransformationMatrix;// Offset=0x4 Size=0x40
    struct _D3DXMESHCONTAINER * pMeshContainer;// Offset=0x44 Size=0x4
    struct _D3DXFRAME * pFrameSibling;// Offset=0x48 Size=0x4
    struct _D3DXFRAME * pFrameFirstChild;// Offset=0x4c Size=0x4
    void _D3DXFRAME();
    struct _D3DXFRAME & operator=(struct _D3DXFRAME & );
};

struct __s_GUID// Size=0x10 (Id=1121)
{
    unsigned long Data1;// Offset=0x0 Size=0x4
    unsigned short Data2;// Offset=0x4 Size=0x2
    unsigned short Data3;// Offset=0x6 Size=0x2
    unsigned char Data4[8];// Offset=0x8 Size=0x8
};

struct _MESSAGE_RESOURCE_DATA// Size=0x10 (Id=1122)
{
    unsigned long NumberOfBlocks;// Offset=0x0 Size=0x4
    struct _MESSAGE_RESOURCE_BLOCK Blocks[1];// Offset=0x4 Size=0xc
};

struct _TOKEN_GROUPS// Size=0xc (Id=1123)
{
    unsigned long GroupCount;// Offset=0x0 Size=0x4
    struct _SID_AND_ATTRIBUTES Groups[1];// Offset=0x4 Size=0x8
};

struct ID3DXConstantTable : public ID3DXBuffer// Size=0x4 (Id=1124)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    void * GetBufferPointer();
    unsigned long GetBufferSize();
    HRESULT GetDesc(struct _D3DXCONSTANTTABLE_DESC * );
    HRESULT GetConstantDesc(unsigned int ,struct _D3DXCONSTANT_DESC * ,unsigned int * );
    unsigned int GetSamplerIndex(unsigned int );
    unsigned int GetConstant(unsigned int ,unsigned int );
    unsigned int GetConstantByName(unsigned int ,char * );
    unsigned int GetConstantElement(unsigned int ,unsigned int );
    HRESULT SetDefaults(struct D3DDevice * );
    HRESULT SetValue(struct D3DDevice * ,unsigned int ,void * ,unsigned int );
    HRESULT SetBool(struct D3DDevice * ,unsigned int ,int );
    HRESULT SetBoolArray(struct D3DDevice * ,unsigned int ,int * ,unsigned int );
    HRESULT SetInt(struct D3DDevice * ,unsigned int ,int );
    HRESULT SetIntArray(struct D3DDevice * ,unsigned int ,int * ,unsigned int );
    HRESULT SetFloat(struct D3DDevice * ,unsigned int ,float );
    HRESULT SetFloatArray(struct D3DDevice * ,unsigned int ,float * ,unsigned int );
    HRESULT SetVector(struct D3DDevice * ,unsigned int ,struct D3DXVECTOR4 * );
    HRESULT SetVectorArray(struct D3DDevice * ,unsigned int ,struct D3DXVECTOR4 * ,unsigned int );
    HRESULT SetMatrix(struct D3DDevice * ,unsigned int ,struct D3DXMATRIX * );
    HRESULT SetMatrixArray(struct D3DDevice * ,unsigned int ,struct D3DXMATRIX * ,unsigned int );
    HRESULT SetMatrixPointerArray(struct D3DDevice * ,unsigned int ,struct D3DXMATRIX ** ,unsigned int );
    HRESULT SetMatrixTranspose(struct D3DDevice * ,unsigned int ,struct D3DXMATRIX * );
    HRESULT SetMatrixTransposeArray(struct D3DDevice * ,unsigned int ,struct D3DXMATRIX * ,unsigned int );
    HRESULT SetMatrixTransposePointerArray(struct D3DDevice * ,unsigned int ,struct D3DXMATRIX ** ,unsigned int );
    void ID3DXConstantTable(struct ID3DXConstantTable & );
    void ID3DXConstantTable();
    struct ID3DXConstantTable & operator=(struct ID3DXConstantTable & );
};

struct ID3DXConstantTable : public ID3DXBuffer// Size=0x4 (Id=1125)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    void * GetBufferPointer();
    unsigned long GetBufferSize();
    HRESULT GetDesc(struct _D3DXCONSTANTTABLE_DESC * );
    HRESULT GetConstantDesc(unsigned int ,struct _D3DXCONSTANT_DESC * ,unsigned int * );
    unsigned int GetSamplerIndex(unsigned int );
    unsigned int GetConstant(unsigned int ,unsigned int );
    unsigned int GetConstantByName(unsigned int ,char * );
    unsigned int GetConstantElement(unsigned int ,unsigned int );
    HRESULT SetDefaults(struct D3DDevice * );
    HRESULT SetValue(struct D3DDevice * ,unsigned int ,void * ,unsigned int );
    HRESULT SetBool(struct D3DDevice * ,unsigned int ,int );
    HRESULT SetBoolArray(struct D3DDevice * ,unsigned int ,int * ,unsigned int );
    HRESULT SetInt(struct D3DDevice * ,unsigned int ,int );
    HRESULT SetIntArray(struct D3DDevice * ,unsigned int ,int * ,unsigned int );
    HRESULT SetFloat(struct D3DDevice * ,unsigned int ,float );
    HRESULT SetFloatArray(struct D3DDevice * ,unsigned int ,float * ,unsigned int );
    HRESULT SetVector(struct D3DDevice * ,unsigned int ,struct D3DXVECTOR4 * );
    HRESULT SetVectorArray(struct D3DDevice * ,unsigned int ,struct D3DXVECTOR4 * ,unsigned int );
    HRESULT SetMatrix(struct D3DDevice * ,unsigned int ,struct D3DXMATRIX * );
    HRESULT SetMatrixArray(struct D3DDevice * ,unsigned int ,struct D3DXMATRIX * ,unsigned int );
    HRESULT SetMatrixPointerArray(struct D3DDevice * ,unsigned int ,struct D3DXMATRIX ** ,unsigned int );
    HRESULT SetMatrixTranspose(struct D3DDevice * ,unsigned int ,struct D3DXMATRIX * );
    HRESULT SetMatrixTransposeArray(struct D3DDevice * ,unsigned int ,struct D3DXMATRIX * ,unsigned int );
    HRESULT SetMatrixTransposePointerArray(struct D3DDevice * ,unsigned int ,struct D3DXMATRIX ** ,unsigned int );
    void ID3DXConstantTable(struct ID3DXConstantTable & );
    void ID3DXConstantTable();
    struct ID3DXConstantTable & operator=(struct ID3DXConstantTable & );
};

struct D3DQuery// Size=0x1 (Id=1126)
{
    unsigned long AddRef();
    unsigned long Release();
    HRESULT GetDevice(struct D3DDevice ** );
    enum _D3DQUERYTYPE GetType();
    unsigned long GetDataSize();
    HRESULT Issue(unsigned long );
    HRESULT GetData(void * ,unsigned long ,unsigned long );
};

struct IClassFactory// Size=0x4 (Id=1127)
{
    struct IClassFactoryVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct IClassFactory : public IUnknown// Size=0x4 (Id=1128)
{
    HRESULT CreateInstance(struct IUnknown * ,struct _GUID & ,void ** );
    HRESULT LockServer(int );
    void IClassFactory(struct IClassFactory & );
    void IClassFactory();
    struct IClassFactory & operator=(struct IClassFactory & );
};

union _IMAGE_AUX_SYMBOL// Size=0x12 (Id=1129)
{
    union // Size=0x12 (Id=0)
    {
        struct _unnamed_1636 Sym;// Offset=0x0 Size=0x12
        struct _unnamed_1637 File;// Offset=0x0 Size=0x12
        struct _unnamed_1638 Section;// Offset=0x0 Size=0x10
    };
};

struct _D3DOCCLUSIONSTATS// Size=0x10 (Id=1130)
{
    unsigned long ZPass;// Offset=0x0 Size=0x4
    unsigned long ZFail;// Offset=0x4 Size=0x4
    unsigned long StencilFail;// Offset=0x8 Size=0x4
    unsigned long Total;// Offset=0xc Size=0x4
};

struct _XMUSHORTN4// Size=0x8 (Id=1131)
{
    unsigned short x;// Offset=0x0 Size=0x2
    unsigned short y;// Offset=0x2 Size=0x2
    unsigned short z;// Offset=0x4 Size=0x2
    unsigned short w;// Offset=0x6 Size=0x2
    void _XMUSHORTN4(float * );
    void _XMUSHORTN4(float ,float ,float ,float );
    void _XMUSHORTN4(unsigned short * );
    void _XMUSHORTN4(unsigned short ,unsigned short ,unsigned short ,unsigned short );
    void _XMUSHORTN4();
    struct _XMUSHORTN4 & operator=(struct _XMUSHORTN4 & );
};

struct _XMUSHORTN4// Size=0x8 (Id=1132)
{
    unsigned short x;// Offset=0x0 Size=0x2
    unsigned short y;// Offset=0x2 Size=0x2
    unsigned short z;// Offset=0x4 Size=0x2
    unsigned short w;// Offset=0x6 Size=0x2
    void _XMUSHORTN4(float * );
    void _XMUSHORTN4(float ,float ,float ,float );
    void _XMUSHORTN4(unsigned short * );
    void _XMUSHORTN4(unsigned short ,unsigned short ,unsigned short ,unsigned short );
    void _XMUSHORTN4();
    struct _XMUSHORTN4 & operator=(struct _XMUSHORTN4 & );
};

struct _XGTEXTURE_DESC// Size=0x3c (Id=1133)
{
    enum _D3DRESOURCETYPE ResourceType;// Offset=0x0 Size=0x4
    unsigned int Width;// Offset=0x4 Size=0x4
    unsigned int Height;// Offset=0x8 Size=0x4
    unsigned int Depth;// Offset=0xc Size=0x4
    enum _D3DFORMAT Format;// Offset=0x10 Size=0x4
    unsigned int RowPitch;// Offset=0x14 Size=0x4
    unsigned int SlicePitch;// Offset=0x18 Size=0x4
    unsigned int BitsPerPixel;// Offset=0x1c Size=0x4
    unsigned int WidthInBlocks;// Offset=0x20 Size=0x4
    unsigned int HeightInBlocks;// Offset=0x24 Size=0x4
    unsigned int DepthInBlocks;// Offset=0x28 Size=0x4
    unsigned int BytesPerBlock;// Offset=0x2c Size=0x4
    int ExpBias;// Offset=0x30 Size=0x4
    unsigned long Flags;// Offset=0x34 Size=0x4
    enum _D3DMULTISAMPLE_TYPE MultiSampleType;// Offset=0x38 Size=0x4
};

struct _XMUSHORT2// Size=0x4 (Id=1134)
{
    unsigned short x;// Offset=0x0 Size=0x2
    unsigned short y;// Offset=0x2 Size=0x2
    void _XMUSHORT2(float * );
    void _XMUSHORT2(float ,float );
    void _XMUSHORT2(unsigned short * );
    void _XMUSHORT2(unsigned short ,unsigned short );
    void _XMUSHORT2();
    struct _XMUSHORT2 & operator=(struct _XMUSHORT2 & );
};

struct _XMUSHORT2// Size=0x4 (Id=1135)
{
    unsigned short x;// Offset=0x0 Size=0x2
    unsigned short y;// Offset=0x2 Size=0x2
    void _XMUSHORT2(float * );
    void _XMUSHORT2(float ,float );
    void _XMUSHORT2(unsigned short * );
    void _XMUSHORT2(unsigned short ,unsigned short );
    void _XMUSHORT2();
    struct _XMUSHORT2 & operator=(struct _XMUSHORT2 & );
};

struct _IMAGE_THUNK_DATA64// Size=0x8 (Id=1136)
{
    union // Size=0x8 (Id=0)
    {
        union <unnamed-type-u1>// Size=0x8 (Id=18345)
        {
            unsigned long long ForwarderString;// Offset=0x0 Size=0x8
            unsigned long long Function;// Offset=0x0 Size=0x8
            unsigned long long Ordinal;// Offset=0x0 Size=0x8
            unsigned long long AddressOfData;// Offset=0x0 Size=0x8
        };
        union _IMAGE_THUNK_DATA64::<unnamed-type-u1> u1;// Offset=0x0 Size=0x8
    };
};

union _IMAGE_THUNK_DATA64::<unnamed-type-u1>// Size=0x8 (Id=1137)
{
    unsigned long long ForwarderString;// Offset=0x0 Size=0x8
    unsigned long long Function;// Offset=0x0 Size=0x8
    unsigned long long Ordinal;// Offset=0x0 Size=0x8
    unsigned long long AddressOfData;// Offset=0x0 Size=0x8
};

struct HBRUSH__// Size=0x4 (Id=1138)
{
    int unused;// Offset=0x0 Size=0x4
};

struct _IMAGE_RESOURCE_DIRECTORY// Size=0x10 (Id=1139)
{
    unsigned long Characteristics;// Offset=0x0 Size=0x4
    unsigned long TimeDateStamp;// Offset=0x4 Size=0x4
    unsigned short MajorVersion;// Offset=0x8 Size=0x2
    unsigned short MinorVersion;// Offset=0xa Size=0x2
    unsigned short NumberOfNamedEntries;// Offset=0xc Size=0x2
    unsigned short NumberOfIdEntries;// Offset=0xe Size=0x2
};

struct _s__RTTIBaseClassDescriptor2// Size=0x1c (Id=1140)
{
    struct _TypeDescriptor * pTypeDescriptor;// Offset=0x0 Size=0x4
    unsigned long numContainedBases;// Offset=0x4 Size=0x4
    struct _PMD where;// Offset=0x8 Size=0xc
    unsigned long attributes;// Offset=0x14 Size=0x4
    struct _s__RTTIClassHierarchyDescriptor * pClassDescriptor;// Offset=0x18 Size=0x4
};

struct _s__RTTIBaseClassArray// Size=0x4 (Id=1141)
{
    struct _s__RTTIBaseClassDescriptor2 * arrayOfBaseClassDescriptors[0];
};

struct D3DStateBlock// Size=0x1 (Id=1142)
{
    unsigned long AddRef();
    unsigned long Release();
    HRESULT GetDevice(struct D3DDevice ** );
    HRESULT Capture();
    HRESULT Apply();
};

struct D3DVertexBuffer : public D3DResource// Size=0x20 (Id=1143)
{
    HRESULT Lock(unsigned int ,unsigned int ,void ** ,unsigned long );
    HRESULT AsyncLock(unsigned long long ,unsigned int ,unsigned int ,void ** ,unsigned long );
    HRESULT Unlock();
    HRESULT GetDesc(struct _D3DVERTEXBUFFER_DESC * );
    unsigned char __align0[24];// Offset=0x0 Size=0x18
    union GPUVERTEX_FETCH_CONSTANT Format;// Offset=0x18 Size=0x8
};

struct _D3DBLENDSTATE// Size=0x4 (Id=1144)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long SrcBlend:5;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x5
        unsigned long BlendOp:3;// Offset=0x0 Size=0x4 BitOffset=0x5 BitSize=0x3
        unsigned long DestBlend:8;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x8
        unsigned long SrcBlendAlpha:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long BlendOpAlpha:3;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x3
        unsigned long DestBlendAlpha:8;// Offset=0x0 Size=0x4 BitOffset=0x18 BitSize=0x8
    };
};

struct _D3DXSEMANTIC// Size=0x8 (Id=1145)
{
    unsigned int Usage;// Offset=0x0 Size=0x4
    unsigned int UsageIndex;// Offset=0x4 Size=0x4
};

struct LIST_ENTRY64// Size=0x10 (Id=1146)
{
    unsigned long long Flink;// Offset=0x0 Size=0x8
    unsigned long long Blink;// Offset=0x8 Size=0x8
};

struct XGCpuVertexShader// Size=0x4 (Id=1147)
{
    unsigned long AddRef();
    unsigned long Release();
    void  ( ** pShaderFunction)(struct _XGCPUSHADERCONTEXT * );// Offset=0x0 Size=0x4
};

struct D3DPixelShader : public D3DResource// Size=0x18 (Id=1148)
{
    HRESULT GetFunction(void * ,unsigned int * );
};

struct D3DXPLANE// Size=0x10 (Id=1149)
{
    void D3DXPLANE(float ,float ,float ,float );
    void D3DXPLANE(struct D3DXFLOAT16 * );
    void D3DXPLANE(float * );
    void D3DXPLANE();
    float * operator float *();
    float * operator const float *();
    struct D3DXPLANE & operator=(struct D3DXPLANE & );
    struct D3DXPLANE & operator*=(float );
    struct D3DXPLANE & operator/=(float );
    struct D3DXPLANE operator+();
    struct D3DXPLANE operator-();
    struct D3DXPLANE operator*(float );
    struct D3DXPLANE operator/(float );
    int operator==(struct D3DXPLANE & );
    int operator!=(struct D3DXPLANE & );
    float a;// Offset=0x0 Size=0x4
    float b;// Offset=0x4 Size=0x4
    float c;// Offset=0x8 Size=0x4
    float d;// Offset=0xc Size=0x4
};

struct D3DXPLANE// Size=0x10 (Id=1150)
{
    void D3DXPLANE(float ,float ,float ,float );
    void D3DXPLANE(struct D3DXFLOAT16 * );
    void D3DXPLANE(float * );
    void D3DXPLANE();
    float * operator float *();
    float * operator const float *();
    struct D3DXPLANE & operator=(struct D3DXPLANE & );
    struct D3DXPLANE & operator*=(float );
    struct D3DXPLANE & operator/=(float );
    struct D3DXPLANE operator+();
    struct D3DXPLANE operator-();
    struct D3DXPLANE operator*(float );
    struct D3DXPLANE operator/(float );
    int operator==(struct D3DXPLANE & );
    int operator!=(struct D3DXPLANE & );
    float a;// Offset=0x0 Size=0x4
    float b;// Offset=0x4 Size=0x4
    float c;// Offset=0x8 Size=0x4
    float d;// Offset=0xc Size=0x4
};

struct _ImageArchitectureHeader// Size=0x8 (Id=1151)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned int AmaskValue:1;// Offset=0x0 Size=0x4 BitOffset=0x1f BitSize=0x1
        unsigned int AmaskShift:8;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x8
    };
    unsigned long FirstEntryRVA;// Offset=0x4 Size=0x4
};

struct _IMAGE_TLS_DIRECTORY64// Size=0x28 (Id=1152)
{
    unsigned long long StartAddressOfRawData;// Offset=0x0 Size=0x8
    unsigned long long EndAddressOfRawData;// Offset=0x8 Size=0x8
    unsigned long long AddressOfIndex;// Offset=0x10 Size=0x8
    unsigned long long AddressOfCallBacks;// Offset=0x18 Size=0x8
    unsigned long SizeOfZeroFill;// Offset=0x20 Size=0x4
    unsigned long Characteristics;// Offset=0x24 Size=0x4
};

struct _XMFLOAT3X3// Size=0x24 (Id=1153)
{
    union // Size=0x24 (Id=0)
    {
        float _11;// Offset=0x0 Size=0x4
        float _12;// Offset=0x4 Size=0x4
        float _13;// Offset=0x8 Size=0x4
        float _21;// Offset=0xc Size=0x4
        float _22;// Offset=0x10 Size=0x4
        float _23;// Offset=0x14 Size=0x4
        float _31;// Offset=0x18 Size=0x4
        float _32;// Offset=0x1c Size=0x4
        float _33;// Offset=0x20 Size=0x4
        float m[3][3];// Offset=0x0 Size=0x24
    };
    void _XMFLOAT3X3(float * );
    void _XMFLOAT3X3(float ,float ,float ,float ,float ,float ,float ,float ,float );
    void _XMFLOAT3X3();
    float & operator()(unsigned int ,unsigned int );
    float operator()(unsigned int ,unsigned int );
    struct _XMFLOAT3X3 & operator=(struct _XMFLOAT3X3 & );
};

struct _XMFLOAT3X3// Size=0x24 (Id=1154)
{
    union // Size=0x24 (Id=0)
    {
        float _11;// Offset=0x0 Size=0x4
        float _12;// Offset=0x4 Size=0x4
        float _13;// Offset=0x8 Size=0x4
        float _21;// Offset=0xc Size=0x4
        float _22;// Offset=0x10 Size=0x4
        float _23;// Offset=0x14 Size=0x4
        float _31;// Offset=0x18 Size=0x4
        float _32;// Offset=0x1c Size=0x4
        float _33;// Offset=0x20 Size=0x4
        float m[3][3];// Offset=0x0 Size=0x24
    };
    void _XMFLOAT3X3(float * );
    void _XMFLOAT3X3(float ,float ,float ,float ,float ,float ,float ,float ,float );
    void _XMFLOAT3X3();
    float & operator()(unsigned int ,unsigned int );
    float operator()(unsigned int ,unsigned int );
    struct _XMFLOAT3X3 & operator=(struct _XMFLOAT3X3 & );
};

struct Direct3D// Size=0x1 (Id=1155)
{
    unsigned long AddRef();
    unsigned long Release();
    unsigned int GetAdapterCount();
    HRESULT GetAdapterIdentifier(unsigned int ,unsigned long ,struct _D3DADAPTER_IDENTIFIER9 * );
    HRESULT CheckDeviceType(unsigned int ,enum _D3DDEVTYPE ,enum _D3DFORMAT ,enum _D3DFORMAT ,int );
    HRESULT CheckDeviceFormat(unsigned int ,enum _D3DDEVTYPE ,enum _D3DFORMAT ,unsigned long ,enum _D3DRESOURCETYPE ,enum _D3DFORMAT );
    HRESULT CheckDeviceMultiSampleType(unsigned int ,enum _D3DDEVTYPE ,enum _D3DFORMAT ,int ,enum _D3DMULTISAMPLE_TYPE ,unsigned long * );
    HRESULT CheckDepthStencilMatch(unsigned int ,enum _D3DDEVTYPE ,enum _D3DFORMAT ,enum _D3DFORMAT ,enum _D3DFORMAT );
    HRESULT CheckDeviceFormatConversion(unsigned int ,enum _D3DDEVTYPE ,enum _D3DFORMAT ,enum _D3DFORMAT );
    HRESULT GetDeviceCaps(unsigned int ,enum _D3DDEVTYPE ,struct _D3DCAPS9 * );
    HRESULT CreateDevice(unsigned int ,enum _D3DDEVTYPE ,void * ,unsigned long ,struct _D3DPRESENT_PARAMETERS_ * ,struct D3DDevice ** );
    void QueryGpuVersion(struct _D3DGPUVERSION * );
};

struct _XMARKETPLACE_ASSET_PACKAGE// Size=0x18 (Id=1156)
{
    struct _FILETIME ftEnumerate;// Offset=0x0 Size=0x8
    unsigned long cAssets;// Offset=0x8 Size=0x4
    unsigned long cTotalAssets;// Offset=0xc Size=0x4
    struct _XMARKETPLACE_ASSET aAssets[1];// Offset=0x10 Size=0x8
};

struct HSTR__// Size=0x4 (Id=1157)
{
    int unused;// Offset=0x0 Size=0x4
};

struct _IMAGE_LINENUMBER// Size=0x6 (Id=1158)
{
    union _unnamed_1820 Type;// Offset=0x0 Size=0x4
    unsigned short Linenumber;// Offset=0x4 Size=0x2
};

struct IDirectXFileObject : public IUnknown// Size=0x4 (Id=1159)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    HRESULT GetName(char * ,unsigned long * );
    HRESULT GetId(struct _GUID * );
    void IDirectXFileObject(struct IDirectXFileObject & );
    void IDirectXFileObject();
    struct IDirectXFileObject & operator=(struct IDirectXFileObject & );
};

struct IDirectXFileObject : public IUnknown// Size=0x4 (Id=1160)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    HRESULT GetName(char * ,unsigned long * );
    HRESULT GetId(struct _GUID * );
    void IDirectXFileObject(struct IDirectXFileObject & );
    void IDirectXFileObject();
    struct IDirectXFileObject & operator=(struct IDirectXFileObject & );
};

struct D3DConstantBuffer : public D3DResource// Size=0x20 (Id=1161)
{
    HRESULT Lock(struct __vector4 ** ,unsigned long );
    HRESULT AsyncLock(unsigned long long ,struct __vector4 ** ,unsigned long );
    HRESULT Unlock();
    unsigned char __align0[24];// Offset=0x0 Size=0x18
    unsigned long Address;// Offset=0x18 Size=0x4
    unsigned long Size;// Offset=0x1c Size=0x4
};

struct _D3DMATERIAL9// Size=0x44 (Id=1162)
{
    struct _D3DCOLORVALUE Diffuse;// Offset=0x0 Size=0x10
    struct _D3DCOLORVALUE Ambient;// Offset=0x10 Size=0x10
    struct _D3DCOLORVALUE Specular;// Offset=0x20 Size=0x10
    struct _D3DCOLORVALUE Emissive;// Offset=0x30 Size=0x10
    float Power;// Offset=0x40 Size=0x4
};

struct _D3DLIGHT9// Size=0x68 (Id=1163)
{
    enum _D3DLIGHTTYPE Type;// Offset=0x0 Size=0x4
    struct _D3DCOLORVALUE Diffuse;// Offset=0x4 Size=0x10
    struct _D3DCOLORVALUE Specular;// Offset=0x14 Size=0x10
    struct _D3DCOLORVALUE Ambient;// Offset=0x24 Size=0x10
    struct _D3DVECTOR Position;// Offset=0x34 Size=0xc
    struct _D3DVECTOR Direction;// Offset=0x40 Size=0xc
    float Range;// Offset=0x4c Size=0x4
    float Falloff;// Offset=0x50 Size=0x4
    float Attenuation0;// Offset=0x54 Size=0x4
    float Attenuation1;// Offset=0x58 Size=0x4
    float Attenuation2;// Offset=0x5c Size=0x4
    float Theta;// Offset=0x60 Size=0x4
    float Phi;// Offset=0x64 Size=0x4
};

struct ID3DXEffectStateManager : public IUnknown// Size=0x4 (Id=1164)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    HRESULT SetTransform(enum _D3DTRANSFORMSTATETYPE ,struct _D3DMATRIX * );
    HRESULT SetMaterial(struct _D3DMATERIAL9 * );
    HRESULT SetLight(unsigned long ,struct _D3DLIGHT9 * );
    HRESULT LightEnable(unsigned long ,int );
    HRESULT SetRenderState(enum _D3DRENDERSTATETYPE ,unsigned long );
    HRESULT SetTexture(unsigned long ,struct D3DBaseTexture * );
    HRESULT Do_Not_Use_SetTextureStageState(unsigned long ,unsigned long ,unsigned long );
    HRESULT SetSamplerState(unsigned long ,enum _D3DSAMPLERSTATETYPE ,unsigned long );
    HRESULT SetFVF(unsigned long );
    HRESULT SetVertexShader(struct D3DVertexShader * );
    HRESULT SetVertexShaderConstantF(unsigned int ,float * ,unsigned int );
    HRESULT SetVertexShaderConstantI(unsigned int ,int * ,unsigned int );
    HRESULT SetVertexShaderConstantB(unsigned int ,int * ,unsigned int );
    HRESULT SetPixelShader(struct D3DPixelShader * );
    HRESULT SetPixelShaderConstantF(unsigned int ,float * ,unsigned int );
    HRESULT SetPixelShaderConstantI(unsigned int ,int * ,unsigned int );
    HRESULT SetPixelShaderConstantB(unsigned int ,int * ,unsigned int );
    void ID3DXEffectStateManager(struct ID3DXEffectStateManager & );
    void ID3DXEffectStateManager();
    struct ID3DXEffectStateManager & operator=(struct ID3DXEffectStateManager & );
};

struct ID3DXEffectStateManager : public IUnknown// Size=0x4 (Id=1165)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    HRESULT SetTransform(enum _D3DTRANSFORMSTATETYPE ,struct _D3DMATRIX * );
    HRESULT SetMaterial(struct _D3DMATERIAL9 * );
    HRESULT SetLight(unsigned long ,struct _D3DLIGHT9 * );
    HRESULT LightEnable(unsigned long ,int );
    HRESULT SetRenderState(enum _D3DRENDERSTATETYPE ,unsigned long );
    HRESULT SetTexture(unsigned long ,struct D3DBaseTexture * );
    HRESULT Do_Not_Use_SetTextureStageState(unsigned long ,unsigned long ,unsigned long );
    HRESULT SetSamplerState(unsigned long ,enum _D3DSAMPLERSTATETYPE ,unsigned long );
    HRESULT SetFVF(unsigned long );
    HRESULT SetVertexShader(struct D3DVertexShader * );
    HRESULT SetVertexShaderConstantF(unsigned int ,float * ,unsigned int );
    HRESULT SetVertexShaderConstantI(unsigned int ,int * ,unsigned int );
    HRESULT SetVertexShaderConstantB(unsigned int ,int * ,unsigned int );
    HRESULT SetPixelShader(struct D3DPixelShader * );
    HRESULT SetPixelShaderConstantF(unsigned int ,float * ,unsigned int );
    HRESULT SetPixelShaderConstantI(unsigned int ,int * ,unsigned int );
    HRESULT SetPixelShaderConstantB(unsigned int ,int * ,unsigned int );
    void ID3DXEffectStateManager(struct ID3DXEffectStateManager & );
    void ID3DXEffectStateManager();
    struct ID3DXEffectStateManager & operator=(struct ID3DXEffectStateManager & );
};

struct _ACL_REVISION_INFORMATION// Size=0x4 (Id=1166)
{
    unsigned long AclRevision;// Offset=0x0 Size=0x4
};

struct _IMAGE_IMPORT_DESCRIPTOR// Size=0x14 (Id=1167)
{
    union // Size=0x4 (Id=0)
    {
        unsigned long Characteristics;// Offset=0x0 Size=0x4
        unsigned long OriginalFirstThunk;// Offset=0x0 Size=0x4
    };
    unsigned long TimeDateStamp;// Offset=0x4 Size=0x4
    unsigned long ForwarderChain;// Offset=0x8 Size=0x4
    unsigned long Name;// Offset=0xc Size=0x4
    unsigned long FirstThunk;// Offset=0x10 Size=0x4
};

struct ID3DXFragmentLinker : public IUnknown// Size=0x4 (Id=1168)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    HRESULT GetDevice(struct D3DDevice ** );
    unsigned int GetNumberOfFragments();
    unsigned int GetFragmentHandleByIndex(unsigned int );
    unsigned int GetFragmentHandleByName(char * );
    HRESULT GetFragmentDesc(unsigned int ,struct _D3DXFRAGMENT_DESC * );
    HRESULT AddFragments(unsigned long * );
    HRESULT GetAllFragments(struct ID3DXBuffer ** );
    HRESULT GetFragment(unsigned int ,struct ID3DXBuffer ** );
    HRESULT LinkShader(char * ,unsigned long ,unsigned int * ,unsigned int ,struct ID3DXBuffer ** ,struct ID3DXBuffer ** );
    HRESULT LinkVertexShader(char * ,unsigned long ,unsigned int * ,unsigned int ,struct D3DVertexShader ** ,struct ID3DXBuffer ** );
    HRESULT LinkPixelShader(char * ,unsigned long ,unsigned int * ,unsigned int ,struct D3DPixelShader ** ,struct ID3DXBuffer ** );
    HRESULT ClearCache();
    void ID3DXFragmentLinker(struct ID3DXFragmentLinker & );
    void ID3DXFragmentLinker();
    struct ID3DXFragmentLinker & operator=(struct ID3DXFragmentLinker & );
};

struct ID3DXFragmentLinker : public IUnknown// Size=0x4 (Id=1169)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    HRESULT GetDevice(struct D3DDevice ** );
    unsigned int GetNumberOfFragments();
    unsigned int GetFragmentHandleByIndex(unsigned int );
    unsigned int GetFragmentHandleByName(char * );
    HRESULT GetFragmentDesc(unsigned int ,struct _D3DXFRAGMENT_DESC * );
    HRESULT AddFragments(unsigned long * );
    HRESULT GetAllFragments(struct ID3DXBuffer ** );
    HRESULT GetFragment(unsigned int ,struct ID3DXBuffer ** );
    HRESULT LinkShader(char * ,unsigned long ,unsigned int * ,unsigned int ,struct ID3DXBuffer ** ,struct ID3DXBuffer ** );
    HRESULT LinkVertexShader(char * ,unsigned long ,unsigned int * ,unsigned int ,struct D3DVertexShader ** ,struct ID3DXBuffer ** );
    HRESULT LinkPixelShader(char * ,unsigned long ,unsigned int * ,unsigned int ,struct D3DPixelShader ** ,struct ID3DXBuffer ** );
    HRESULT ClearCache();
    void ID3DXFragmentLinker(struct ID3DXFragmentLinker & );
    void ID3DXFragmentLinker();
    struct ID3DXFragmentLinker & operator=(struct ID3DXFragmentLinker & );
};

struct HDC__// Size=0x4 (Id=1170)
{
    int unused;// Offset=0x0 Size=0x4
};

struct _PMD// Size=0xc (Id=1171)
{
    int mdisp;// Offset=0x0 Size=0x4
    int pdisp;// Offset=0x4 Size=0x4
    int vdisp;// Offset=0x8 Size=0x4
};

struct D3DCommandBuffer : public D3DResource// Size=0x68 (Id=1172)
{
    HRESULT GetResources(unsigned long ,struct D3DResource ** ,unsigned long * );
    HRESULT CreateClone(unsigned long ,struct D3DCommandBuffer ** );
    HRESULT GetClone(unsigned long ,struct D3DCommandBuffer * ,unsigned long * ,void * ,unsigned long * );
    HRESULT BeginFixupCreation();
    HRESULT EndFixupCreation();
    HRESULT Deconstruct(unsigned long ,struct D3DCommandBuffer * ,unsigned long * ,void * ,unsigned long * ,void * ,unsigned long * );
    HRESULT BeginReconstruction(unsigned long ,void * ,void * );
    HRESULT EndReconstruction();
    HRESULT BeginDynamicFixups();
    HRESULT EndDynamicFixups();
    unsigned long CreateSurfacesFixup(unsigned long ,unsigned long ,unsigned long );
    unsigned long CreateClipRectFixup(unsigned long ,unsigned long ,unsigned long );
    unsigned long CreateViewportFixup(unsigned long ,unsigned long ,unsigned long );
    unsigned long CreateVertexShaderConstantFFixup(unsigned long ,unsigned long ,unsigned long ,unsigned long ,unsigned long );
    unsigned long CreatePixelShaderConstantFFixup(unsigned long ,unsigned long ,unsigned long ,unsigned long ,unsigned long );
    unsigned long CreateVertexShaderFixup(unsigned long ,struct D3DVertexShader * ,unsigned long ,unsigned long );
    unsigned long CreatePixelShaderFixup(unsigned long ,struct D3DPixelShader * ,unsigned long ,unsigned long );
    unsigned long CreateTextureFixup(unsigned long ,struct D3DBaseTexture * ,unsigned long ,unsigned long );
    unsigned long CreateIndexBufferFixup(unsigned long ,struct D3DIndexBuffer * ,unsigned long ,unsigned long );
    unsigned long CreateVertexBufferFixup(unsigned long ,struct D3DVertexBuffer * ,unsigned long ,unsigned long );
    unsigned long CreateConstantBufferFixup(unsigned long ,struct D3DConstantBuffer * ,unsigned long ,unsigned long );
    unsigned long CreateCommandBufferFixup(unsigned long ,struct D3DCommandBuffer * ,unsigned long ,unsigned long );
    HRESULT SetSurfaces(unsigned long ,struct _D3DSURFACES * );
    HRESULT SetClipRect(unsigned long ,struct tagRECT * );
    HRESULT SetViewport(unsigned long ,struct _D3DVIEWPORT9 * );
    HRESULT SetVertexShaderConstantF(unsigned long ,float * );
    HRESULT SetPixelShaderConstantF(unsigned long ,float * );
    HRESULT SetVertexShader(unsigned long ,struct D3DVertexShader * );
    HRESULT SetPixelShader(unsigned long ,struct D3DPixelShader * );
    HRESULT SetTexture(unsigned long ,struct D3DBaseTexture * );
    HRESULT SetIndexBuffer(unsigned long ,struct D3DIndexBuffer * );
    HRESULT SetVertexBuffer(unsigned long ,struct D3DVertexBuffer * );
    HRESULT SetConstantBuffer(unsigned long ,struct D3DConstantBuffer * );
    HRESULT SetCommandBuffer(unsigned long ,struct D3DCommandBuffer * );
    unsigned char __align0[24];// Offset=0x0 Size=0x18
    struct _D3DTAGCOLLECTION m_Inherited;// Offset=0x18 Size=0x28
    struct _D3DTAGCOLLECTION m_Persisted;// Offset=0x40 Size=0x28
};

struct HINSTANCE__// Size=0x4 (Id=1173)
{
    int unused;// Offset=0x0 Size=0x4
};

struct D3DPerfCounters// Size=0x1 (Id=1174)
{
    unsigned long AddRef();
    unsigned long Release();
    HRESULT GetDevice(struct D3DDevice ** );
    int IsBusy();
    void BlockUntilNotBusy();
    unsigned int GetNumPasses();
    HRESULT GetValues(struct _D3DPERFCOUNTER_VALUES * ,unsigned int ,unsigned long * );
};

struct ID3DXPatchMesh : public IUnknown// Size=0x4 (Id=1175)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    unsigned long GetNumPatches();
    unsigned long GetNumVertices();
    HRESULT GetDeclaration(struct _D3DVERTEXELEMENT9 * );
    unsigned long GetControlVerticesPerPatch();
    unsigned long GetOptions();
    HRESULT GetDevice(struct D3DDevice ** );
    HRESULT GetPatchInfo(struct _D3DXPATCHINFO * );
    HRESULT GetVertexBuffer(struct D3DVertexBuffer ** );
    HRESULT GetIndexBuffer(struct D3DIndexBuffer ** );
    HRESULT LockVertexBuffer(unsigned long ,void ** );
    HRESULT UnlockVertexBuffer();
    HRESULT LockIndexBuffer(unsigned long ,void ** );
    HRESULT UnlockIndexBuffer();
    HRESULT LockAttributeBuffer(unsigned long ,unsigned long ** );
    HRESULT UnlockAttributeBuffer();
    HRESULT GetTessSize(float ,unsigned long ,unsigned long * ,unsigned long * );
    HRESULT GenerateAdjacency(float );
    HRESULT CloneMesh(unsigned long ,struct _D3DVERTEXELEMENT9 * ,struct ID3DXPatchMesh ** );
    HRESULT Optimize(unsigned long );
    HRESULT SetDisplaceParam(struct D3DBaseTexture * ,enum _D3DTEXTUREFILTERTYPE ,enum _D3DTEXTUREFILTERTYPE ,enum _D3DTEXTUREFILTERTYPE ,enum _D3DTEXTUREADDRESS ,unsigned long );
    HRESULT GetDisplaceParam(struct D3DBaseTexture ** ,enum _D3DTEXTUREFILTERTYPE * ,enum _D3DTEXTUREFILTERTYPE * ,enum _D3DTEXTUREFILTERTYPE * ,enum _D3DTEXTUREADDRESS * ,unsigned long * );
    HRESULT Tessellate(float ,struct ID3DXMesh * );
    HRESULT TessellateAdaptive(struct D3DXVECTOR4 * ,unsigned long ,unsigned long ,struct ID3DXMesh * );
    void ID3DXPatchMesh(struct ID3DXPatchMesh & );
    void ID3DXPatchMesh();
    struct ID3DXPatchMesh & operator=(struct ID3DXPatchMesh & );
};

struct ID3DXPatchMesh : public IUnknown// Size=0x4 (Id=1176)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    unsigned long GetNumPatches();
    unsigned long GetNumVertices();
    HRESULT GetDeclaration(struct _D3DVERTEXELEMENT9 * );
    unsigned long GetControlVerticesPerPatch();
    unsigned long GetOptions();
    HRESULT GetDevice(struct D3DDevice ** );
    HRESULT GetPatchInfo(struct _D3DXPATCHINFO * );
    HRESULT GetVertexBuffer(struct D3DVertexBuffer ** );
    HRESULT GetIndexBuffer(struct D3DIndexBuffer ** );
    HRESULT LockVertexBuffer(unsigned long ,void ** );
    HRESULT UnlockVertexBuffer();
    HRESULT LockIndexBuffer(unsigned long ,void ** );
    HRESULT UnlockIndexBuffer();
    HRESULT LockAttributeBuffer(unsigned long ,unsigned long ** );
    HRESULT UnlockAttributeBuffer();
    HRESULT GetTessSize(float ,unsigned long ,unsigned long * ,unsigned long * );
    HRESULT GenerateAdjacency(float );
    HRESULT CloneMesh(unsigned long ,struct _D3DVERTEXELEMENT9 * ,struct ID3DXPatchMesh ** );
    HRESULT Optimize(unsigned long );
    HRESULT SetDisplaceParam(struct D3DBaseTexture * ,enum _D3DTEXTUREFILTERTYPE ,enum _D3DTEXTUREFILTERTYPE ,enum _D3DTEXTUREFILTERTYPE ,enum _D3DTEXTUREADDRESS ,unsigned long );
    HRESULT GetDisplaceParam(struct D3DBaseTexture ** ,enum _D3DTEXTUREFILTERTYPE * ,enum _D3DTEXTUREFILTERTYPE * ,enum _D3DTEXTUREFILTERTYPE * ,enum _D3DTEXTUREADDRESS * ,unsigned long * );
    HRESULT Tessellate(float ,struct ID3DXMesh * );
    HRESULT TessellateAdaptive(struct D3DXVECTOR4 * ,unsigned long ,unsigned long ,struct ID3DXMesh * );
    void ID3DXPatchMesh(struct ID3DXPatchMesh & );
    void ID3DXPatchMesh();
    struct ID3DXPatchMesh & operator=(struct ID3DXPatchMesh & );
};

struct _D3DXSHADER_DEBUGINFO// Size=0x28 (Id=1177)
{
    unsigned long Size;// Offset=0x0 Size=0x4
    unsigned long Creator;// Offset=0x4 Size=0x4
    unsigned long SourceCode;// Offset=0x8 Size=0x4
    unsigned long Files;// Offset=0xc Size=0x4
    unsigned long FileInfo;// Offset=0x10 Size=0x4
    unsigned long Instructions;// Offset=0x14 Size=0x4
    unsigned long InstructionInfo;// Offset=0x18 Size=0x4
    unsigned long Variables;// Offset=0x1c Size=0x4
    unsigned long VariableInfo;// Offset=0x20 Size=0x4
    unsigned long EntrypointName;// Offset=0x24 Size=0x4
};

struct HHOOK__// Size=0x4 (Id=1178)
{
    int unused;// Offset=0x0 Size=0x4
};

struct IPersistStream// Size=0x4 (Id=1179)
{
    struct IPersistStreamVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct IPersistStream : public IPersist// Size=0x4 (Id=1180)
{
    HRESULT IsDirty();
    HRESULT Load(struct IStream * );
    HRESULT Save(struct IStream * ,int );
    HRESULT GetSizeMax(union _ULARGE_INTEGER * );
    void IPersistStream(struct IPersistStream & );
    void IPersistStream();
    struct IPersistStream & operator=(struct IPersistStream & );
};

struct IPersist// Size=0x4 (Id=1181)
{
    struct IPersistVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct IPersist : public IUnknown// Size=0x4 (Id=1182)
{
    HRESULT GetClassID(struct _GUID * );
    void IPersist(struct IPersist & );
    void IPersist();
    struct IPersist & operator=(struct IPersist & );
};

struct D3DLineTexture : public D3DBaseTexture// Size=0x34 (Id=1183)
{
    HRESULT GetLevelDesc(unsigned int ,struct _D3DSURFACE_DESC * );
    HRESULT GetSurfaceLevel(unsigned int ,struct D3DSurface ** );
    HRESULT LockRect(unsigned int ,struct _D3DLOCKED_RECT * ,struct tagRECT * ,unsigned long );
    HRESULT AsyncLockRect(unsigned long long ,unsigned int ,struct _D3DLOCKED_RECT * ,struct tagRECT * ,unsigned long );
    HRESULT UnlockRect(unsigned int );
    HRESULT LockTail(struct _D3DLOCKED_TAIL * ,unsigned long );
    HRESULT AsyncLockTail(unsigned long long ,struct _D3DLOCKED_TAIL * ,unsigned long );
    HRESULT UnlockTail();
};

struct D3DTexture : public D3DBaseTexture// Size=0x34 (Id=1184)
{
    HRESULT GetLevelDesc(unsigned int ,struct _D3DSURFACE_DESC * );
    HRESULT GetSurfaceLevel(unsigned int ,struct D3DSurface ** );
    HRESULT LockRect(unsigned int ,struct _D3DLOCKED_RECT * ,struct tagRECT * ,unsigned long );
    HRESULT AsyncLockRect(unsigned long long ,unsigned int ,struct _D3DLOCKED_RECT * ,struct tagRECT * ,unsigned long );
    HRESULT UnlockRect(unsigned int );
    HRESULT LockTail(struct _D3DLOCKED_TAIL * ,unsigned long );
    HRESULT AsyncLockTail(unsigned long long ,struct _D3DLOCKED_TAIL * ,unsigned long );
    HRESULT UnlockTail();
};

struct HPALETTE__// Size=0x4 (Id=1185)
{
    int unused;// Offset=0x0 Size=0x4
};

struct ID3DXAnimationSet : public IUnknown// Size=0x4 (Id=1186)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    char * GetName();
    float GetPeriod();
    float GetPeriodicPosition(float );
    unsigned int GetNumAnimations();
    HRESULT GetAnimationNameByIndex(unsigned int ,char ** );
    HRESULT GetAnimationIndexByName(char * ,unsigned int * );
    HRESULT GetSRT(float ,unsigned int ,struct D3DXVECTOR3 * ,struct D3DXQUATERNION * ,struct D3DXVECTOR3 * );
    HRESULT GetCallback(float ,unsigned long ,float * ,void ** );
    void ID3DXAnimationSet(struct ID3DXAnimationSet & );
    void ID3DXAnimationSet();
    struct ID3DXAnimationSet & operator=(struct ID3DXAnimationSet & );
};

struct ID3DXAnimationSet : public IUnknown// Size=0x4 (Id=1187)
{
    HRESULT QueryInterface(struct _GUID & ,void ** );
    unsigned long AddRef();
    unsigned long Release();
    char * GetName();
    float GetPeriod();
    float GetPeriodicPosition(float );
    unsigned int GetNumAnimations();
    HRESULT GetAnimationNameByIndex(unsigned int ,char ** );
    HRESULT GetAnimationIndexByName(char * ,unsigned int * );
    HRESULT GetSRT(float ,unsigned int ,struct D3DXVECTOR3 * ,struct D3DXQUATERNION * ,struct D3DXVECTOR3 * );
    HRESULT GetCallback(float ,unsigned long ,float * ,void ** );
    void ID3DXAnimationSet(struct ID3DXAnimationSet & );
    void ID3DXAnimationSet();
    struct ID3DXAnimationSet & operator=(struct ID3DXAnimationSet & );
};

enum _FP__IEEE_FORMAT
{
    FpFormatFp32=0,
    FpFormatFp64=1,
    FpFormatFp80=2,
    FpFormatFp128=3,
    FpFormatI16=4,
    FpFormatI32=5,
    FpFormatI64=6,
    FpFormatU16=7,
    FpFormatU32=8,
    FpFormatU64=9,
    FpFormatCompare=10,
    FpFormatString=11
};

enum _SUITE_TYPE
{
    SmallBusiness=0,
    Enterprise=1,
    BackOffice=2,
    CommunicationServer=3,
    TerminalServer=4,
    SmallBusinessRestricted=5,
    EmbeddedNT=6,
    DataCenter=7,
    SingleUserTS=8,
    MaxSuiteType=9
};

enum _FP_IEEE_OPERATION_CODE
{
    FpCodeUnspecified=0,
    FpCodeAdd=1,
    FpCodeSubtract=2,
    FpCodeMultiply=3,
    FpCodeDivide=4,
    FpCodeSquareRoot=5,
    FpCodeRemainder=6,
    FpCodeCompare=7,
    FpCodeConvert=8,
    FpCodeRound=9,
    FpCodeTruncate=10,
    FpCodeFloor=11,
    FpCodeCeil=12,
    FpCodeAcos=13,
    FpCodeAsin=14,
    FpCodeAtan=15,
    FpCodeAtan2=16,
    FpCodeCabs=17,
    FpCodeCos=18,
    FpCodeCosh=19,
    FpCodeExp=20,
    FpCodeFabs=21,
    FpCodeFmod=22,
    FpCodeFrexp=23,
    FpCodeHypot=24,
    FpCodeLdexp=25,
    FpCodeLog=26,
    FpCodeLog10=27,
    FpCodeModf=28,
    FpCodePow=29,
    FpCodeSin=30,
    FpCodeSinh=31,
    FpCodeTan=32,
    FpCodeTanh=33,
    FpCodeY0=34,
    FpCodeY1=35,
    FpCodeYn=36
};

enum _FP__IEEE_ROUNDING_MODE
{
    FpRoundNearest=0,
    FpRoundMinusInfinity=1,
    FpRoundPlusInfinity=2,
    FpRoundChopped=3
};

enum _EVENT_TYPE
{
    NotificationEvent=0,
    SynchronizationEvent=1
};

enum _TIMER_TYPE
{
    NotificationTimer=0,
    SynchronizationTimer=1
};

enum _WAIT_TYPE
{
    WaitAll=0,
    WaitAny=1
};

enum _MODE
{
    KernelMode=0,
    UserMode=1,
    MaximumMode=2
};

enum _FILE_INFORMATION_CLASS
{
    FileDirectoryInformation=1,
    FileFullDirectoryInformation=2,
    FileBothDirectoryInformation=3,
    FileBasicInformation=4,
    FileStandardInformation=5,
    FileInternalInformation=6,
    FileEaInformation=7,
    FileAccessInformation=8,
    FileNameInformation=9,
    FileRenameInformation=10,
    FileLinkInformation=11,
    FileNamesInformation=12,
    FileDispositionInformation=13,
    FilePositionInformation=14,
    FileFullEaInformation=15,
    FileModeInformation=16,
    FileAlignmentInformation=17,
    FileAllInformation=18,
    FileAllocationInformation=19,
    FileEndOfFileInformation=20,
    FileAlternateNameInformation=21,
    FileStreamInformation=22,
    FileMountPartitionInformation=23,
    FilePipeLocalInformation=24,
    FilePipeRemoteInformation=25,
    FileSectorInformation=26,
    FileXctdCompressionInformation=27,
    FileCompressionInformation=28,
    FileObjectIdInformation=29,
    FileCompletionInformation=30,
    FileMoveClusterInformation=31,
    FileIoPriorityInformation=32,
    FileReparsePointInformation=33,
    FileNetworkOpenInformation=34,
    FileAttributeTagInformation=35,
    FileTrackingInformation=36,
    FileMaximumInformation=37
};

enum _PROXY_CLASS
{
    ProxyFull=0,
    ProxyService=1,
    ProxyTree=2,
    ProxyDirectory=3
};

enum _IO_PRIORITY
{
    IoPriorityLow=0,
    IoPriorityBelowNormal=1,
    IoPriorityNormal=2,
    IoPriorityAboveNormal=3,
    IoPriorityHigh=4,
    IoPriorityCritical=5,
    IoPriorityMaximum=6
};

enum _FSINFOCLASS
{
    FileFsVolumeInformation=1,
    FileFsLabelInformation=2,
    FileFsSizeInformation=3,
    FileFsDeviceInformation=4,
    FileFsAttributeInformation=5,
    FileFsControlInformation=6,
    FileFsFullSizeInformation=7,
    FileFsObjectIdInformation=8,
    FileFsMaximumInformation=9
};

enum _RUNTIME_FUNCTION_TYPE
{
    FunctionTypeSaveMillicode=0,
    FunctionTypeNoHandler=1,
    FunctionTypeRestoreMillicode=2,
    FunctionTypeHandler=3
};

enum _MEMORY_REGION_TYPE
{
    MemoryRegionThread=0,
    MemoryRegionTitle=1,
    MemoryRegionSystem=2,
    MemoryRegionTitleDebug=3
};

enum _FP_IEEE_COMPARE_RESULT
{
    FpCompareEqual=0,
    FpCompareGreater=1,
    FpCompareLess=2,
    FpCompareUnordered=3
};

enum _NT_PRODUCT_TYPE
{
    NtProductWinNt=1,
    NtProductLanManNt=2,
    NtProductServer=3
};

struct _UNICODE_STRING// Size=0x8 (Id=1204)
{
    unsigned short Length;// Offset=0x0 Size=0x2
    unsigned short MaximumLength;// Offset=0x2 Size=0x2
    wchar_t * Buffer;// Offset=0x4 Size=0x4
};

struct _EXCEPTION_RECORD// Size=0x50 (Id=1205)
{
    long ExceptionCode;// Offset=0x0 Size=0x4
    unsigned long ExceptionFlags;// Offset=0x4 Size=0x4
    struct _EXCEPTION_RECORD * ExceptionRecord;// Offset=0x8 Size=0x4
    void * ExceptionAddress;// Offset=0xc Size=0x4
    unsigned long NumberParameters;// Offset=0x10 Size=0x4
    unsigned long ExceptionInformation[15];// Offset=0x14 Size=0x3c
};

struct _FILE_FS_VOLUME_INFORMATION// Size=0x18 (Id=1206)
{
    union _LARGE_INTEGER VolumeCreationTime;// Offset=0x0 Size=0x8
    unsigned long VolumeSerialNumber;// Offset=0x8 Size=0x4
    unsigned long VolumeLabelLength;// Offset=0xc Size=0x4
    unsigned char SupportsObjects;// Offset=0x10 Size=0x1
    unsigned char VolumeLabel[1];// Offset=0x11 Size=0x1
};

struct _STRING64// Size=0x10 (Id=1207)
{
    unsigned short Length;// Offset=0x0 Size=0x2
    unsigned short MaximumLength;// Offset=0x2 Size=0x2
    unsigned char __align0[4];// Offset=0x4 Size=0x4
    unsigned long long Buffer;// Offset=0x8 Size=0x8
};

struct _STRING// Size=0x8 (Id=1208)
{
    unsigned short Length;// Offset=0x0 Size=0x2
    unsigned short MaximumLength;// Offset=0x2 Size=0x2
    unsigned char * Buffer;// Offset=0x4 Size=0x4
};

struct _OBJECT_DIRECTORY_INFORMATION// Size=0xc (Id=1209)
{
    struct _STRING Name;// Offset=0x0 Size=0x8
    unsigned long Type;// Offset=0x8 Size=0x4
};

struct _RUNTIME_FUNCTION// Size=0x8 (Id=1210)
{
    unsigned long BeginAddress;// Offset=0x0 Size=0x4
    struct // Size=0x4 (Id=0)
    {
        unsigned long PrologLength:8;// Offset=0x4 Size=0x4 BitOffset=0x0 BitSize=0x8
        unsigned long FunctionLength:22;// Offset=0x4 Size=0x4 BitOffset=0x8 BitSize=0x16
        unsigned long FunctionType:2;// Offset=0x4 Size=0x4 BitOffset=0x1e BitSize=0x2
    };
};

struct _FILE_FS_CONTROL_INFORMATION// Size=0x30 (Id=1211)
{
    union _LARGE_INTEGER FreeSpaceStartFiltering;// Offset=0x0 Size=0x8
    union _LARGE_INTEGER FreeSpaceThreshold;// Offset=0x8 Size=0x8
    union _LARGE_INTEGER FreeSpaceStopFiltering;// Offset=0x10 Size=0x8
    union _LARGE_INTEGER DefaultQuotaThreshold;// Offset=0x18 Size=0x8
    union _LARGE_INTEGER DefaultQuotaLimit;// Offset=0x20 Size=0x8
    unsigned long FileSystemControlFlags;// Offset=0x28 Size=0x4
};

struct _IO_COMPLETION_BASIC_INFORMATION// Size=0x4 (Id=1212)
{
    long Depth;// Offset=0x0 Size=0x4
};

struct _COMPOUND_ACCESS_ALLOWED_ACE// Size=0x10 (Id=1213)
{
    struct _ACE_HEADER Header;// Offset=0x0 Size=0x4
    unsigned long Mask;// Offset=0x4 Size=0x4
    unsigned short CompoundAceType;// Offset=0x8 Size=0x2
    unsigned short Reserved;// Offset=0xa Size=0x2
    unsigned long SidStart;// Offset=0xc Size=0x4
};

struct _FIBER// Size=0xa50 (Id=1214)
{
    void * FiberData;// Offset=0x0 Size=0x4
    void * StackAllocatedBase;// Offset=0x4 Size=0x4
    void * StackBase;// Offset=0x8 Size=0x4
    void * StackLimit;// Offset=0xc Size=0x4
    struct _CONTEXT Context;// Offset=0x10 Size=0xa40
};

struct _FILE_COMPLETION_INFORMATION// Size=0x8 (Id=1215)
{
    void * Port;// Offset=0x0 Size=0x4
    void * Key;// Offset=0x4 Size=0x4
};

struct _FILE_ACCESS_INFORMATION// Size=0x4 (Id=1216)
{
    unsigned long AccessFlags;// Offset=0x0 Size=0x4
};

struct _SECURITY_TOKEN_PROXY_DATA// Size=0x18 (Id=1217)
{
    unsigned long Length;// Offset=0x0 Size=0x4
    enum _PROXY_CLASS ProxyClass;// Offset=0x4 Size=0x4
    struct _UNICODE_STRING PathInfo;// Offset=0x8 Size=0x8
    unsigned long ContainerMask;// Offset=0x10 Size=0x4
    unsigned long ObjectMask;// Offset=0x14 Size=0x4
};

struct _RTL_PROCESS_LOCK_INFORMATION// Size=0x24 (Id=1218)
{
    void * Address;// Offset=0x0 Size=0x4
    unsigned short Type;// Offset=0x4 Size=0x2
    unsigned short CreatorBackTraceIndex;// Offset=0x6 Size=0x2
    void * OwningThread;// Offset=0x8 Size=0x4
    long LockCount;// Offset=0xc Size=0x4
    unsigned long ContentionCount;// Offset=0x10 Size=0x4
    unsigned long EntryCount;// Offset=0x14 Size=0x4
    long RecursionCount;// Offset=0x18 Size=0x4
    unsigned long NumberOfWaitingShared;// Offset=0x1c Size=0x4
    unsigned long NumberOfWaitingExclusive;// Offset=0x20 Size=0x4
};

struct _FP_64// Size=0x8 (Id=1219)
{
    unsigned long W[2];// Offset=0x0 Size=0x8
};

struct _SCOPE_TABLE// Size=0x14 (Id=1220)
{
    union // Size=0x4 (Id=0)
    {
        unsigned long Count;// Offset=0x0 Size=0x4
        struct <unnamed-type-ScopeRecord>// Size=0x10 (Id=19067)
        {
            unsigned long BeginAddress;// Offset=0x0 Size=0x4
            unsigned long EndAddress;// Offset=0x4 Size=0x4
            unsigned long HandlerAddress;// Offset=0x8 Size=0x4
            unsigned long JumpTarget;// Offset=0xc Size=0x4
        };
    };
    struct _SCOPE_TABLE::<unnamed-type-ScopeRecord> ScopeRecord[1];// Offset=0x4 Size=0x10
};

struct _SCOPE_TABLE::<unnamed-type-ScopeRecord>// Size=0x10 (Id=1221)
{
    unsigned long BeginAddress;// Offset=0x0 Size=0x4
    unsigned long EndAddress;// Offset=0x4 Size=0x4
    unsigned long HandlerAddress;// Offset=0x8 Size=0x4
    unsigned long JumpTarget;// Offset=0xc Size=0x4
};

union _PPC_INSTRUCTION// Size=0x4 (Id=1222)
{
    unsigned long Long;// Offset=0x0 Size=0x4
    unsigned char Byte[4];// Offset=0x0 Size=0x4
    struct <unnamed-type-i_f>// Size=0x4 (Id=19077)
    {
        unsigned long bit31:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long bit30:1;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x1
        long bit6_29:24;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x18
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
    struct _PPC_INSTRUCTION::<unnamed-type-i_f> i_f;// Offset=0x0 Size=0x4
    struct <unnamed-type-b_f>// Size=0x4 (Id=19083)
    {
        unsigned long bit31:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long bit30:1;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x1
        long bit16_29:14;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0xe
        unsigned long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
    struct _PPC_INSTRUCTION::<unnamed-type-b_f> b_f;// Offset=0x0 Size=0x4
    struct <unnamed-type-sc_f>// Size=0x4 (Id=19091)
    {
        unsigned long bit31:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long bit30:1;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x1
        unsigned long bit6_29:24;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x18
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
    struct _PPC_INSTRUCTION::<unnamed-type-sc_f> sc_f;// Offset=0x0 Size=0x4
    struct <unnamed-type-d_f1>// Size=0x4 (Id=19097)
    {
        long bit16_31:16;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x10
        unsigned long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
    struct _PPC_INSTRUCTION::<unnamed-type-d_f1> d_f1;// Offset=0x0 Size=0x4
    struct <unnamed-type-d_f2>// Size=0x4 (Id=19103)
    {
        unsigned long bit16_31:16;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x10
        unsigned long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit10:1;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x1
        unsigned long bit9:1;// Offset=0x0 Size=0x4 BitOffset=0x16 BitSize=0x1
        unsigned long bit6_8:3;// Offset=0x0 Size=0x4 BitOffset=0x17 BitSize=0x3
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
    struct _PPC_INSTRUCTION::<unnamed-type-d_f2> d_f2;// Offset=0x0 Size=0x4
    struct <unnamed-type-ds_f>// Size=0x4 (Id=19111)
    {
        unsigned long bit30_31:2;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x2
        long bit16_29:14;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0xe
        unsigned long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
    struct _PPC_INSTRUCTION::<unnamed-type-ds_f> ds_f;// Offset=0x0 Size=0x4
    struct <unnamed-type-x_f1>// Size=0x4 (Id=19118)
    {
        unsigned long bit31:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long bit21_30:10;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0xa
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
    struct _PPC_INSTRUCTION::<unnamed-type-x_f1> x_f1;// Offset=0x0 Size=0x4
    struct <unnamed-type-x_f2>// Size=0x4 (Id=19126)
    {
        unsigned long bit20_31:12;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xc
        unsigned long bit16_19:4;// Offset=0x0 Size=0x4 BitOffset=0xc BitSize=0x4
        unsigned long bit14_15:2;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x2
        unsigned long bit11_13:3;// Offset=0x0 Size=0x4 BitOffset=0x12 BitSize=0x3
        unsigned long bit10:1;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x1
        unsigned long bit9:1;// Offset=0x0 Size=0x4 BitOffset=0x16 BitSize=0x1
        unsigned long bit6_8:3;// Offset=0x0 Size=0x4 BitOffset=0x17 BitSize=0x3
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
    struct _PPC_INSTRUCTION::<unnamed-type-x_f2> x_f2;// Offset=0x0 Size=0x4
    struct <unnamed-type-x_f3>// Size=0x4 (Id=19136)
    {
        unsigned long bit16_31:16;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x10
        unsigned long bit12_15:4;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x4
        unsigned long bit0_11:12;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0xc
    };
    struct _PPC_INSTRUCTION::<unnamed-type-x_f3> x_f3;// Offset=0x0 Size=0x4
    struct <unnamed-type-xl_f1>// Size=0x4 (Id=19141)
    {
        unsigned long bit31:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long bit21_30:10;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0xa
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
    struct _PPC_INSTRUCTION::<unnamed-type-xl_f1> xl_f1;// Offset=0x0 Size=0x4
    struct <unnamed-type-xl_f2>// Size=0x4 (Id=19149)
    {
        unsigned long bit14_31:18;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x12
        unsigned long bit11_13:3;// Offset=0x0 Size=0x4 BitOffset=0x12 BitSize=0x3
        unsigned long bit9_10:2;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x2
        unsigned long bit6_8:3;// Offset=0x0 Size=0x4 BitOffset=0x17 BitSize=0x3
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
    struct _PPC_INSTRUCTION::<unnamed-type-xl_f2> xl_f2;// Offset=0x0 Size=0x4
    struct <unnamed-type-xfx_f1>// Size=0x4 (Id=19156)
    {
        unsigned long bit31:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long bit21_30:10;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0xa
        unsigned long bit11_20:10;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0xa
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
    struct _PPC_INSTRUCTION::<unnamed-type-xfx_f1> xfx_f1;// Offset=0x0 Size=0x4
    struct <unnamed-type-xfx_f2>// Size=0x4 (Id=19163)
    {
        unsigned long bit20_31:12;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xc
        unsigned long bit12_19:8;// Offset=0x0 Size=0x4 BitOffset=0xc BitSize=0x8
        unsigned long bit11:1;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0x1
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
    struct _PPC_INSTRUCTION::<unnamed-type-xfx_f2> xfx_f2;// Offset=0x0 Size=0x4
    struct <unnamed-type-xfl_f>// Size=0x4 (Id=19170)
    {
        unsigned long bit31:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long bit21_30:10;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0xa
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long bit15:1;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x1
        unsigned long bit7_14:8;// Offset=0x0 Size=0x4 BitOffset=0x11 BitSize=0x8
        unsigned long bit6:1;// Offset=0x0 Size=0x4 BitOffset=0x19 BitSize=0x1
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
    struct _PPC_INSTRUCTION::<unnamed-type-xfl_f> xfl_f;// Offset=0x0 Size=0x4
    struct <unnamed-type-xs_f>// Size=0x4 (Id=19179)
    {
        unsigned long bit31:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long bit30:1;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x1
        unsigned long bit21_29:9;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x9
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
    struct _PPC_INSTRUCTION::<unnamed-type-xs_f> xs_f;// Offset=0x0 Size=0x4
    struct <unnamed-type-xo_f>// Size=0x4 (Id=19188)
    {
        unsigned long bit31:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long bit22_30:9;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x9
        unsigned long bit21:1;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0x1
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long bit10_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
    struct _PPC_INSTRUCTION::<unnamed-type-xo_f> xo_f;// Offset=0x0 Size=0x4
    struct <unnamed-type-a_f>// Size=0x4 (Id=19197)
    {
        unsigned long bit31:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long bit26_30:5;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x5
        unsigned long bit21_25:5;// Offset=0x0 Size=0x4 BitOffset=0x6 BitSize=0x5
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
    struct _PPC_INSTRUCTION::<unnamed-type-a_f> a_f;// Offset=0x0 Size=0x4
    struct <unnamed-type-m_f>// Size=0x4 (Id=19206)
    {
        unsigned long bit31:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long bit26_30:5;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x5
        unsigned long bit21_25:5;// Offset=0x0 Size=0x4 BitOffset=0x6 BitSize=0x5
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
    struct _PPC_INSTRUCTION::<unnamed-type-m_f> m_f;// Offset=0x0 Size=0x4
    struct <unnamed-type-md_f>// Size=0x4 (Id=19215)
    {
        unsigned long bit31:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long bit30:1;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x1
        unsigned long bit27_29:3;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x3
        unsigned long bit21_26:6;// Offset=0x0 Size=0x4 BitOffset=0x5 BitSize=0x6
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
    struct _PPC_INSTRUCTION::<unnamed-type-md_f> md_f;// Offset=0x0 Size=0x4
    struct <unnamed-type-mds_f>// Size=0x4 (Id=19225)
    {
        unsigned long bit31:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long bit27_30:4;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x4
        unsigned long bit21_26:6;// Offset=0x0 Size=0x4 BitOffset=0x5 BitSize=0x6
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
    struct _PPC_INSTRUCTION::<unnamed-type-mds_f> mds_f;// Offset=0x0 Size=0x4
    struct <unnamed-type-va_f1>// Size=0x4 (Id=19234)
    {
        unsigned long bit26_31:6;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x6
        unsigned long bit21_25:5;// Offset=0x0 Size=0x4 BitOffset=0x6 BitSize=0x5
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
    struct _PPC_INSTRUCTION::<unnamed-type-va_f1> va_f1;// Offset=0x0 Size=0x4
    struct <unnamed-type-va_f2>// Size=0x4 (Id=19242)
    {
        unsigned long bit26_31:6;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x6
        unsigned long bit22_25:4;// Offset=0x0 Size=0x4 BitOffset=0x6 BitSize=0x4
        unsigned long bit21:1;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0x1
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
    struct _PPC_INSTRUCTION::<unnamed-type-va_f2> va_f2;// Offset=0x0 Size=0x4
    struct <unnamed-type-vx_f>// Size=0x4 (Id=19251)
    {
        unsigned long bit21_31:11;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xb
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
    struct _PPC_INSTRUCTION::<unnamed-type-vx_f> vx_f;// Offset=0x0 Size=0x4
    struct <unnamed-type-vxr_f>// Size=0x4 (Id=19258)
    {
        unsigned long bit22_31:10;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xa
        unsigned long bit21:1;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0x1
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
    struct _PPC_INSTRUCTION::<unnamed-type-vxr_f> vxr_f;// Offset=0x0 Size=0x4
    struct <unnamed-type-x2_f>// Size=0x4 (Id=19266)
    {
        unsigned long bit30_31:2;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x2
        unsigned long bit28_29:2;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x2
        unsigned long bit26_27:2;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x2
        unsigned long bit21_25:5;// Offset=0x0 Size=0x4 BitOffset=0x6 BitSize=0x5
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
    struct _PPC_INSTRUCTION::<unnamed-type-x2_f> x2_f;// Offset=0x0 Size=0x4
    struct <unnamed-type-vx2_f1>// Size=0x4 (Id=19276)
    {
        unsigned long bit30_31:2;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x2
        unsigned long bit28_29:2;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x2
        unsigned long bit27:1;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x1
        unsigned long bit26:1;// Offset=0x0 Size=0x4 BitOffset=0x5 BitSize=0x1
        unsigned long bit22_25:4;// Offset=0x0 Size=0x4 BitOffset=0x6 BitSize=0x4
        unsigned long bit21:1;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0x1
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
    struct _PPC_INSTRUCTION::<unnamed-type-vx2_f1> vx2_f1;// Offset=0x0 Size=0x4
    struct <unnamed-type-vx2_f2>// Size=0x4 (Id=19288)
    {
        unsigned long bit30_31:2;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x2
        unsigned long bit28_29:2;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x2
        unsigned long bit27:1;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x1
        unsigned long bit26:1;// Offset=0x0 Size=0x4 BitOffset=0x5 BitSize=0x1
        unsigned long bit23_25:3;// Offset=0x0 Size=0x4 BitOffset=0x6 BitSize=0x3
        unsigned long bit22:1;// Offset=0x0 Size=0x4 BitOffset=0x9 BitSize=0x1
        unsigned long bit21:1;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0x1
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
    struct _PPC_INSTRUCTION::<unnamed-type-vx2_f2> vx2_f2;// Offset=0x0 Size=0x4
    struct <unnamed-type-vx2_f3>// Size=0x4 (Id=19301)
    {
        unsigned long bit30_31:2;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x2
        unsigned long bit28_29:2;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x2
        unsigned long bit26_27:2;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x2
        unsigned long bit21_25:5;// Offset=0x0 Size=0x4 BitOffset=0x6 BitSize=0x5
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long bit14_15:2;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x2
        unsigned long bit11_13:3;// Offset=0x0 Size=0x4 BitOffset=0x12 BitSize=0x3
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
    struct _PPC_INSTRUCTION::<unnamed-type-vx2_f3> vx2_f3;// Offset=0x0 Size=0x4
    struct <unnamed-type-vx2_f4>// Size=0x4 (Id=19312)
    {
        unsigned long bit30_31:2;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x2
        unsigned long bit28_29:2;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x2
        unsigned long bit26_27:2;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x2
        unsigned long bit24_25:2;// Offset=0x0 Size=0x4 BitOffset=0x6 BitSize=0x2
        unsigned long bit21_23:3;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x3
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long bit12_15:4;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x4
        unsigned long bit11:1;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0x1
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
    struct _PPC_INSTRUCTION::<unnamed-type-vx2_f4> vx2_f4;// Offset=0x0 Size=0x4
};

struct _PPC_INSTRUCTION::<unnamed-type-vx2_f4>// Size=0x4 (Id=1223)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit30_31:2;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x2
        unsigned long bit28_29:2;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x2
        unsigned long bit26_27:2;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x2
        unsigned long bit24_25:2;// Offset=0x0 Size=0x4 BitOffset=0x6 BitSize=0x2
        unsigned long bit21_23:3;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x3
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long bit12_15:4;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x4
        unsigned long bit11:1;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0x1
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _PPC_INSTRUCTION::<unnamed-type-vx2_f3>// Size=0x4 (Id=1224)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit30_31:2;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x2
        unsigned long bit28_29:2;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x2
        unsigned long bit26_27:2;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x2
        unsigned long bit21_25:5;// Offset=0x0 Size=0x4 BitOffset=0x6 BitSize=0x5
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long bit14_15:2;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x2
        unsigned long bit11_13:3;// Offset=0x0 Size=0x4 BitOffset=0x12 BitSize=0x3
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _PPC_INSTRUCTION::<unnamed-type-vx2_f2>// Size=0x4 (Id=1225)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit30_31:2;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x2
        unsigned long bit28_29:2;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x2
        unsigned long bit27:1;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x1
        unsigned long bit26:1;// Offset=0x0 Size=0x4 BitOffset=0x5 BitSize=0x1
        unsigned long bit23_25:3;// Offset=0x0 Size=0x4 BitOffset=0x6 BitSize=0x3
        unsigned long bit22:1;// Offset=0x0 Size=0x4 BitOffset=0x9 BitSize=0x1
        unsigned long bit21:1;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0x1
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _PPC_INSTRUCTION::<unnamed-type-vx2_f1>// Size=0x4 (Id=1226)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit30_31:2;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x2
        unsigned long bit28_29:2;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x2
        unsigned long bit27:1;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x1
        unsigned long bit26:1;// Offset=0x0 Size=0x4 BitOffset=0x5 BitSize=0x1
        unsigned long bit22_25:4;// Offset=0x0 Size=0x4 BitOffset=0x6 BitSize=0x4
        unsigned long bit21:1;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0x1
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _PPC_INSTRUCTION::<unnamed-type-x2_f>// Size=0x4 (Id=1227)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit30_31:2;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x2
        unsigned long bit28_29:2;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x2
        unsigned long bit26_27:2;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x2
        unsigned long bit21_25:5;// Offset=0x0 Size=0x4 BitOffset=0x6 BitSize=0x5
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _PPC_INSTRUCTION::<unnamed-type-vxr_f>// Size=0x4 (Id=1228)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit22_31:10;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xa
        unsigned long bit21:1;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0x1
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _PPC_INSTRUCTION::<unnamed-type-vx_f>// Size=0x4 (Id=1229)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit21_31:11;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xb
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _PPC_INSTRUCTION::<unnamed-type-va_f2>// Size=0x4 (Id=1230)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit26_31:6;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x6
        unsigned long bit22_25:4;// Offset=0x0 Size=0x4 BitOffset=0x6 BitSize=0x4
        unsigned long bit21:1;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0x1
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _PPC_INSTRUCTION::<unnamed-type-va_f1>// Size=0x4 (Id=1231)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit26_31:6;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x6
        unsigned long bit21_25:5;// Offset=0x0 Size=0x4 BitOffset=0x6 BitSize=0x5
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _PPC_INSTRUCTION::<unnamed-type-mds_f>// Size=0x4 (Id=1232)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit31:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long bit27_30:4;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x4
        unsigned long bit21_26:6;// Offset=0x0 Size=0x4 BitOffset=0x5 BitSize=0x6
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _PPC_INSTRUCTION::<unnamed-type-md_f>// Size=0x4 (Id=1233)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit31:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long bit30:1;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x1
        unsigned long bit27_29:3;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x3
        unsigned long bit21_26:6;// Offset=0x0 Size=0x4 BitOffset=0x5 BitSize=0x6
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _PPC_INSTRUCTION::<unnamed-type-m_f>// Size=0x4 (Id=1234)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit31:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long bit26_30:5;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x5
        unsigned long bit21_25:5;// Offset=0x0 Size=0x4 BitOffset=0x6 BitSize=0x5
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _PPC_INSTRUCTION::<unnamed-type-a_f>// Size=0x4 (Id=1235)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit31:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long bit26_30:5;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x5
        unsigned long bit21_25:5;// Offset=0x0 Size=0x4 BitOffset=0x6 BitSize=0x5
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _PPC_INSTRUCTION::<unnamed-type-xo_f>// Size=0x4 (Id=1236)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit31:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long bit22_30:9;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x9
        unsigned long bit21:1;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0x1
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long bit10_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _PPC_INSTRUCTION::<unnamed-type-xs_f>// Size=0x4 (Id=1237)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit31:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long bit30:1;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x1
        unsigned long bit21_29:9;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x9
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _PPC_INSTRUCTION::<unnamed-type-xfl_f>// Size=0x4 (Id=1238)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit31:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long bit21_30:10;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0xa
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long bit15:1;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x1
        unsigned long bit7_14:8;// Offset=0x0 Size=0x4 BitOffset=0x11 BitSize=0x8
        unsigned long bit6:1;// Offset=0x0 Size=0x4 BitOffset=0x19 BitSize=0x1
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _PPC_INSTRUCTION::<unnamed-type-xfx_f2>// Size=0x4 (Id=1239)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit20_31:12;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xc
        unsigned long bit12_19:8;// Offset=0x0 Size=0x4 BitOffset=0xc BitSize=0x8
        unsigned long bit11:1;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0x1
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _PPC_INSTRUCTION::<unnamed-type-xfx_f1>// Size=0x4 (Id=1240)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit31:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long bit21_30:10;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0xa
        unsigned long bit11_20:10;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0xa
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _PPC_INSTRUCTION::<unnamed-type-xl_f2>// Size=0x4 (Id=1241)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit14_31:18;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x12
        unsigned long bit11_13:3;// Offset=0x0 Size=0x4 BitOffset=0x12 BitSize=0x3
        unsigned long bit9_10:2;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x2
        unsigned long bit6_8:3;// Offset=0x0 Size=0x4 BitOffset=0x17 BitSize=0x3
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _PPC_INSTRUCTION::<unnamed-type-xl_f1>// Size=0x4 (Id=1242)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit31:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long bit21_30:10;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0xa
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _PPC_INSTRUCTION::<unnamed-type-x_f3>// Size=0x4 (Id=1243)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit16_31:16;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x10
        unsigned long bit12_15:4;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x4
        unsigned long bit0_11:12;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0xc
    };
};

struct _PPC_INSTRUCTION::<unnamed-type-x_f2>// Size=0x4 (Id=1244)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit20_31:12;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xc
        unsigned long bit16_19:4;// Offset=0x0 Size=0x4 BitOffset=0xc BitSize=0x4
        unsigned long bit14_15:2;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x2
        unsigned long bit11_13:3;// Offset=0x0 Size=0x4 BitOffset=0x12 BitSize=0x3
        unsigned long bit10:1;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x1
        unsigned long bit9:1;// Offset=0x0 Size=0x4 BitOffset=0x16 BitSize=0x1
        unsigned long bit6_8:3;// Offset=0x0 Size=0x4 BitOffset=0x17 BitSize=0x3
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _PPC_INSTRUCTION::<unnamed-type-x_f1>// Size=0x4 (Id=1245)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit31:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long bit21_30:10;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0xa
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _PPC_INSTRUCTION::<unnamed-type-ds_f>// Size=0x4 (Id=1246)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit30_31:2;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x2
        long bit16_29:14;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0xe
        unsigned long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _PPC_INSTRUCTION::<unnamed-type-d_f2>// Size=0x4 (Id=1247)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit16_31:16;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x10
        unsigned long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit10:1;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x1
        unsigned long bit9:1;// Offset=0x0 Size=0x4 BitOffset=0x16 BitSize=0x1
        unsigned long bit6_8:3;// Offset=0x0 Size=0x4 BitOffset=0x17 BitSize=0x3
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _PPC_INSTRUCTION::<unnamed-type-d_f1>// Size=0x4 (Id=1248)
{
    struct // Size=0x4 (Id=0)
    {
        long bit16_31:16;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x10
        unsigned long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _PPC_INSTRUCTION::<unnamed-type-sc_f>// Size=0x4 (Id=1249)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit31:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long bit30:1;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x1
        unsigned long bit6_29:24;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x18
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _PPC_INSTRUCTION::<unnamed-type-b_f>// Size=0x4 (Id=1250)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit31:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long bit30:1;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x1
        long bit16_29:14;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0xe
        unsigned long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _PPC_INSTRUCTION::<unnamed-type-i_f>// Size=0x4 (Id=1251)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit31:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long bit30:1;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x1
        long bit6_29:24;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x18
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _OSVERSIONINFOW// Size=0x114 (Id=1252)
{
    unsigned long dwOSVersionInfoSize;// Offset=0x0 Size=0x4
    unsigned long dwMajorVersion;// Offset=0x4 Size=0x4
    unsigned long dwMinorVersion;// Offset=0x8 Size=0x4
    unsigned long dwBuildNumber;// Offset=0xc Size=0x4
    unsigned long dwPlatformId;// Offset=0x10 Size=0x4
    wchar_t szCSDVersion[128];// Offset=0x14 Size=0x100
};

struct _FILE_NETWORK_OPEN_INFORMATION// Size=0x38 (Id=1253)
{
    union _LARGE_INTEGER CreationTime;// Offset=0x0 Size=0x8
    union _LARGE_INTEGER LastAccessTime;// Offset=0x8 Size=0x8
    union _LARGE_INTEGER LastWriteTime;// Offset=0x10 Size=0x8
    union _LARGE_INTEGER ChangeTime;// Offset=0x18 Size=0x8
    union _LARGE_INTEGER AllocationSize;// Offset=0x20 Size=0x8
    union _LARGE_INTEGER EndOfFile;// Offset=0x28 Size=0x8
    unsigned long FileAttributes;// Offset=0x30 Size=0x4
};

struct _CondR// Size=0x4 (Id=1254)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long CR7:4;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x4
        unsigned long CR6:4;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x4
        unsigned long CR5:4;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x4
        unsigned long CR4:4;// Offset=0x0 Size=0x4 BitOffset=0xc BitSize=0x4
        unsigned long CR3:4;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x4
        unsigned long CR2:4;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0x4
        unsigned long CR1:4;// Offset=0x0 Size=0x4 BitOffset=0x18 BitSize=0x4
        unsigned long CR0:4;// Offset=0x0 Size=0x4 BitOffset=0x1c BitSize=0x4
    };
};

struct _RUNTIME_FUNCTION_INDIRECT// Size=0x8 (Id=1255)
{
    enum _EXCEPTION_DISPOSITION  ( * ExceptionHandler)(struct _EXCEPTION_RECORD * ,void * ,struct _CONTEXT * ,void * );// Offset=0x0 Size=0x4
    void * HandlerData;// Offset=0x4 Size=0x4
};

struct _FILE_FS_FULL_SIZE_INFORMATION// Size=0x20 (Id=1256)
{
    union _LARGE_INTEGER TotalAllocationUnits;// Offset=0x0 Size=0x8
    union _LARGE_INTEGER CallerAvailableAllocationUnits;// Offset=0x8 Size=0x8
    union _LARGE_INTEGER ActualAvailableAllocationUnits;// Offset=0x10 Size=0x8
    unsigned long SectorsPerAllocationUnit;// Offset=0x18 Size=0x4
    unsigned long BytesPerSector;// Offset=0x1c Size=0x4
};

struct _OSVERSIONINFOEXA// Size=0x9c (Id=1257)
{
    unsigned long dwOSVersionInfoSize;// Offset=0x0 Size=0x4
    unsigned long dwMajorVersion;// Offset=0x4 Size=0x4
    unsigned long dwMinorVersion;// Offset=0x8 Size=0x4
    unsigned long dwBuildNumber;// Offset=0xc Size=0x4
    unsigned long dwPlatformId;// Offset=0x10 Size=0x4
    char szCSDVersion[128];// Offset=0x14 Size=0x80
    unsigned short wServicePackMajor;// Offset=0x94 Size=0x2
    unsigned short wServicePackMinor;// Offset=0x96 Size=0x2
    unsigned short wSuiteMask;// Offset=0x98 Size=0x2
    unsigned char wProductType;// Offset=0x9a Size=0x1
    unsigned char wReserved;// Offset=0x9b Size=0x1
};

struct _CLIENT_ID// Size=0x8 (Id=1258)
{
    void * UniqueProcess;// Offset=0x0 Size=0x4
    void * UniqueThread;// Offset=0x4 Size=0x4
};

struct _OBJECT_ATTRIBUTES// Size=0xc (Id=1259)
{
    void * RootDirectory;// Offset=0x0 Size=0x4
    struct _STRING * ObjectName;// Offset=0x4 Size=0x4
    unsigned long Attributes;// Offset=0x8 Size=0x4
};

struct _FILE_FS_LABEL_INFORMATION// Size=0x8 (Id=1260)
{
    unsigned long VolumeLabelLength;// Offset=0x0 Size=0x4
    unsigned char VolumeLabel[1];// Offset=0x4 Size=0x1
};

struct _LDR_DATA_TABLE_ENTRY// Size=0x64 (Id=1261)
{
    struct _LIST_ENTRY InLoadOrderLinks;// Offset=0x0 Size=0x8
    struct _LIST_ENTRY InClosureOrderLinks;// Offset=0x8 Size=0x8
    struct _LIST_ENTRY InInitializationOrderLinks;// Offset=0x10 Size=0x8
    void * NtHeadersBase;// Offset=0x18 Size=0x4
    void * ImageBase;// Offset=0x1c Size=0x4
    unsigned long SizeOfNtImage;// Offset=0x20 Size=0x4
    struct _UNICODE_STRING FullDllName;// Offset=0x24 Size=0x8
    struct _UNICODE_STRING BaseDllName;// Offset=0x2c Size=0x8
    unsigned long Flags;// Offset=0x34 Size=0x4
    unsigned long SizeOfFullImage;// Offset=0x38 Size=0x4
    void * EntryPoint;// Offset=0x3c Size=0x4
    unsigned short LoadCount;// Offset=0x40 Size=0x2
    unsigned short ModuleIndex;// Offset=0x42 Size=0x2
    void * DllBaseOriginal;// Offset=0x44 Size=0x4
    unsigned long CheckSum;// Offset=0x48 Size=0x4
    unsigned long ModuleLoadFlags;// Offset=0x4c Size=0x4
    unsigned long TimeDateStamp;// Offset=0x50 Size=0x4
    void * LoadedImports;// Offset=0x54 Size=0x4
    void * XexHeaderBase;// Offset=0x58 Size=0x4
    union // Size=0x8 (Id=0)
    {
        struct _STRING LoadFileName;// Offset=0x5c Size=0x8
        struct _LDR_DATA_TABLE_ENTRY * ClosureRoot;// Offset=0x5c Size=0x4
    };
    struct _LDR_DATA_TABLE_ENTRY * TraversalParent;// Offset=0x60 Size=0x4
};

struct _SEMAPHORE_BASIC_INFORMATION// Size=0x8 (Id=1262)
{
    long CurrentCount;// Offset=0x0 Size=0x4
    long MaximumCount;// Offset=0x4 Size=0x4
};

struct _EXCEPTION_RECORD32// Size=0x50 (Id=1263)
{
    long ExceptionCode;// Offset=0x0 Size=0x4
    unsigned long ExceptionFlags;// Offset=0x4 Size=0x4
    unsigned long ExceptionRecord;// Offset=0x8 Size=0x4
    unsigned long ExceptionAddress;// Offset=0xc Size=0x4
    unsigned long NumberParameters;// Offset=0x10 Size=0x4
    unsigned long ExceptionInformation[15];// Offset=0x14 Size=0x3c
};

struct _FILE_MOVE_CLUSTER_INFORMATION// Size=0x10 (Id=1264)
{
    unsigned long ClusterCount;// Offset=0x0 Size=0x4
    void * RootDirectory;// Offset=0x4 Size=0x4
    unsigned long FileNameLength;// Offset=0x8 Size=0x4
    unsigned char FileName[1];// Offset=0xc Size=0x1
};

struct _STRING32// Size=0x8 (Id=1265)
{
    unsigned short Length;// Offset=0x0 Size=0x2
    unsigned short MaximumLength;// Offset=0x2 Size=0x2
    unsigned long Buffer;// Offset=0x4 Size=0x4
};

struct _PVR// Size=0x4 (Id=1266)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long Revision:16;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x10
        unsigned long Version:16;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x10
    };
};

struct _FILE_SECTOR_INFORMATION// Size=0x4 (Id=1267)
{
    unsigned long StartingSector;// Offset=0x0 Size=0x4
};

struct _FILE_LINK_INFORMATION// Size=0x10 (Id=1268)
{
    unsigned char ReplaceIfExists;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    void * RootDirectory;// Offset=0x4 Size=0x4
    unsigned long FileNameLength;// Offset=0x8 Size=0x4
    unsigned char FileName[1];// Offset=0xc Size=0x1
};

struct _OSVERSIONINFOA// Size=0x94 (Id=1269)
{
    unsigned long dwOSVersionInfoSize;// Offset=0x0 Size=0x4
    unsigned long dwMajorVersion;// Offset=0x4 Size=0x4
    unsigned long dwMinorVersion;// Offset=0x8 Size=0x4
    unsigned long dwBuildNumber;// Offset=0xc Size=0x4
    unsigned long dwPlatformId;// Offset=0x10 Size=0x4
    char szCSDVersion[128];// Offset=0x14 Size=0x80
};

struct _FILE_ATTRIBUTE_TAG_INFORMATION// Size=0x8 (Id=1270)
{
    unsigned long FileAttributes;// Offset=0x0 Size=0x4
    unsigned long ReparseTag;// Offset=0x4 Size=0x4
};

struct _FILE_ALLOCATION_INFORMATION// Size=0x8 (Id=1271)
{
    union _LARGE_INTEGER AllocationSize;// Offset=0x0 Size=0x8
};

struct _OBJECT_NAME_INFORMATION// Size=0x8 (Id=1272)
{
    struct _STRING Name;// Offset=0x0 Size=0x8
};

struct _EVENT_BASIC_INFORMATION// Size=0x8 (Id=1273)
{
    enum _EVENT_TYPE EventType;// Offset=0x0 Size=0x4
    long EventState;// Offset=0x4 Size=0x4
};

struct _FP_IEEE_VALUE// Size=0x18 (Id=1274)
{
    union // Size=0x10 (Id=0)
    {
        union <unnamed-type-Value>// Size=0x10 (Id=19430)
        {
            short I16Value;// Offset=0x0 Size=0x2
            unsigned short U16Value;// Offset=0x0 Size=0x2
            long I32Value;// Offset=0x0 Size=0x4
            unsigned long U32Value;// Offset=0x0 Size=0x4
            void * StringValue;// Offset=0x0 Size=0x4
            unsigned long CompareValue;// Offset=0x0 Size=0x4
            struct _FP_32 Fp32Value;// Offset=0x0 Size=0x4
            union _LARGE_INTEGER I64Value;// Offset=0x0 Size=0x8
            union _ULARGE_INTEGER U64Value;// Offset=0x0 Size=0x8
            struct _FP_64 Fp64Value;// Offset=0x0 Size=0x8
            struct _FP_80 Fp80Value;// Offset=0x0 Size=0xc
            struct _FP_128 Fp128Value;// Offset=0x0 Size=0x10
        };
        union _FP_IEEE_VALUE::<unnamed-type-Value> Value;// Offset=0x0 Size=0x10
        struct <unnamed-type-Control>// Size=0x4 (Id=19444)
        {
            unsigned long RoundingMode:2;// Offset=0x0 Size=0x4 BitOffset=0x1e BitSize=0x2
            unsigned long Inexact:1;// Offset=0x0 Size=0x4 BitOffset=0x1d BitSize=0x1
            unsigned long Underflow:1;// Offset=0x0 Size=0x4 BitOffset=0x1c BitSize=0x1
            unsigned long Overflow:1;// Offset=0x0 Size=0x4 BitOffset=0x1b BitSize=0x1
            unsigned long ZeroDivide:1;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x1
            unsigned long InvalidOperation:1;// Offset=0x0 Size=0x4 BitOffset=0x19 BitSize=0x1
            unsigned long OperandValid:1;// Offset=0x0 Size=0x4 BitOffset=0x18 BitSize=0x1
            unsigned long Format:4;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0x4
            unsigned long Precision:4;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x4
            unsigned long Operation:12;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0xc
            unsigned long Spare:3;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x3
            unsigned long HardwareException:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        };
        unsigned char __align0[12];// Offset=0x4 Size=0xc
    };
    struct _FP_IEEE_VALUE::<unnamed-type-Control> Control;// Offset=0x10 Size=0x4
};

struct _FILE_END_OF_FILE_INFORMATION// Size=0x8 (Id=1275)
{
    union _LARGE_INTEGER EndOfFile;// Offset=0x0 Size=0x8
};

struct _OSVERSIONINFOEXW// Size=0x11c (Id=1276)
{
    unsigned long dwOSVersionInfoSize;// Offset=0x0 Size=0x4
    unsigned long dwMajorVersion;// Offset=0x4 Size=0x4
    unsigned long dwMinorVersion;// Offset=0x8 Size=0x4
    unsigned long dwBuildNumber;// Offset=0xc Size=0x4
    unsigned long dwPlatformId;// Offset=0x10 Size=0x4
    wchar_t szCSDVersion[128];// Offset=0x14 Size=0x100
    unsigned short wServicePackMajor;// Offset=0x114 Size=0x2
    unsigned short wServicePackMinor;// Offset=0x116 Size=0x2
    unsigned short wSuiteMask;// Offset=0x118 Size=0x2
    unsigned char wProductType;// Offset=0x11a Size=0x1
    unsigned char wReserved;// Offset=0x11b Size=0x1
};

union _FPSCR// Size=0x4 (Id=1277)
{
    struct <unnamed-type-bits>// Size=0x4 (Id=19470)
    {
        unsigned long RN:2;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x2
        unsigned long NI:1;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x1
        unsigned long XE:1;// Offset=0x0 Size=0x4 BitOffset=0x3 BitSize=0x1
        unsigned long ZE:1;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x1
        unsigned long UE:1;// Offset=0x0 Size=0x4 BitOffset=0x5 BitSize=0x1
        unsigned long OE:1;// Offset=0x0 Size=0x4 BitOffset=0x6 BitSize=0x1
        unsigned long VE:1;// Offset=0x0 Size=0x4 BitOffset=0x7 BitSize=0x1
        unsigned long VXCVI:1;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x1
        unsigned long VXSQRT:1;// Offset=0x0 Size=0x4 BitOffset=0x9 BitSize=0x1
        unsigned long VXSOFT:1;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0x1
        unsigned long Res1:1;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x1
        unsigned long FU:1;// Offset=0x0 Size=0x4 BitOffset=0xc BitSize=0x1
        unsigned long FE:1;// Offset=0x0 Size=0x4 BitOffset=0xd BitSize=0x1
        unsigned long FG:1;// Offset=0x0 Size=0x4 BitOffset=0xe BitSize=0x1
        unsigned long FL:1;// Offset=0x0 Size=0x4 BitOffset=0xf BitSize=0x1
        unsigned long C:1;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x1
        unsigned long FI:1;// Offset=0x0 Size=0x4 BitOffset=0x11 BitSize=0x1
        unsigned long FR:1;// Offset=0x0 Size=0x4 BitOffset=0x12 BitSize=0x1
        unsigned long VXVC:1;// Offset=0x0 Size=0x4 BitOffset=0x13 BitSize=0x1
        unsigned long VXIMZ:1;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0x1
        unsigned long VXZDZ:1;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x1
        unsigned long VXIDI:1;// Offset=0x0 Size=0x4 BitOffset=0x16 BitSize=0x1
        unsigned long VXISI:1;// Offset=0x0 Size=0x4 BitOffset=0x17 BitSize=0x1
        unsigned long VXSNAN:1;// Offset=0x0 Size=0x4 BitOffset=0x18 BitSize=0x1
        unsigned long XX:1;// Offset=0x0 Size=0x4 BitOffset=0x19 BitSize=0x1
        unsigned long ZX:1;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x1
        unsigned long UX:1;// Offset=0x0 Size=0x4 BitOffset=0x1b BitSize=0x1
        unsigned long OX:1;// Offset=0x0 Size=0x4 BitOffset=0x1c BitSize=0x1
        unsigned long VX:1;// Offset=0x0 Size=0x4 BitOffset=0x1d BitSize=0x1
        unsigned long FEX:1;// Offset=0x0 Size=0x4 BitOffset=0x1e BitSize=0x1
        unsigned long FX:1;// Offset=0x0 Size=0x4 BitOffset=0x1f BitSize=0x1
    };
    struct _FPSCR::<unnamed-type-bits> bits;// Offset=0x0 Size=0x4
    unsigned long AsULONG;// Offset=0x0 Size=0x4
};

struct _HARDWARE_PTE// Size=0x4 (Id=1278)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long Valid:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long PageProtection:2;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x2
        unsigned long LargePageOrNoExecute:1;// Offset=0x0 Size=0x4 BitOffset=0x3 BitSize=0x1
        unsigned long Guarded:1;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x1
        unsigned long MemoryCoherency:1;// Offset=0x0 Size=0x4 BitOffset=0x5 BitSize=0x1
        unsigned long InhibitCache:1;// Offset=0x0 Size=0x4 BitOffset=0x6 BitSize=0x1
        unsigned long WriteThrough:1;// Offset=0x0 Size=0x4 BitOffset=0x7 BitSize=0x1
        unsigned long Dirty:1;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x1
        unsigned long Accessed:1;// Offset=0x0 Size=0x4 BitOffset=0x9 BitSize=0x1
        unsigned long GuardOrEndOfAllocation:1;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0x1
        unsigned long PersistAllocation:1;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x1
        unsigned long PageFrameNumber:20;// Offset=0x0 Size=0x4 BitOffset=0xc BitSize=0x14
    };
};

struct _FILE_MOUNT_PARTITION_INFORMATION// Size=0x8 (Id=1279)
{
    struct _STRING DeviceName;// Offset=0x0 Size=0x8
};

struct _TIME_FIELDS// Size=0x10 (Id=1280)
{
    short Year;// Offset=0x0 Size=0x2
    short Month;// Offset=0x2 Size=0x2
    short Day;// Offset=0x4 Size=0x2
    short Hour;// Offset=0x6 Size=0x2
    short Minute;// Offset=0x8 Size=0x2
    short Second;// Offset=0xa Size=0x2
    short Milliseconds;// Offset=0xc Size=0x2
    short Weekday;// Offset=0xe Size=0x2
};

struct _FP_80// Size=0xc (Id=1281)
{
    unsigned long W[3];// Offset=0x0 Size=0xc
};

struct _FILE_RENAME_INFORMATION// Size=0x10 (Id=1282)
{
    unsigned char ReplaceIfExists;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    void * RootDirectory;// Offset=0x4 Size=0x4
    struct _STRING FileName;// Offset=0x8 Size=0x8
};

struct _MSR// Size=0x4 (Id=1283)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long LE:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long RI:1;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x1
        unsigned long Rsv1:2;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x2
        unsigned long DR:1;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x1
        unsigned long IR:1;// Offset=0x0 Size=0x4 BitOffset=0x5 BitSize=0x1
        unsigned long IP:1;// Offset=0x0 Size=0x4 BitOffset=0x6 BitSize=0x1
        unsigned long Rsv2:1;// Offset=0x0 Size=0x4 BitOffset=0x7 BitSize=0x1
        unsigned long FE1:1;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x1
        unsigned long BE:1;// Offset=0x0 Size=0x4 BitOffset=0x9 BitSize=0x1
        unsigned long SE:1;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0x1
        unsigned long FE0:1;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x1
        unsigned long ME:1;// Offset=0x0 Size=0x4 BitOffset=0xc BitSize=0x1
        unsigned long FP:1;// Offset=0x0 Size=0x4 BitOffset=0xd BitSize=0x1
        unsigned long PR:1;// Offset=0x0 Size=0x4 BitOffset=0xe BitSize=0x1
        unsigned long EE:1;// Offset=0x0 Size=0x4 BitOffset=0xf BitSize=0x1
        unsigned long ILE:1;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x1
        unsigned long IMPL:1;// Offset=0x0 Size=0x4 BitOffset=0x11 BitSize=0x1
        unsigned long POW:1;// Offset=0x0 Size=0x4 BitOffset=0x12 BitSize=0x1
        unsigned long Rsv3:13;// Offset=0x0 Size=0x4 BitOffset=0x13 BitSize=0xd
    };
};

struct _SECURITY_TOKEN_AUDIT_DATA// Size=0xc (Id=1284)
{
    unsigned long Length;// Offset=0x0 Size=0x4
    unsigned long GrantMask;// Offset=0x4 Size=0x4
    unsigned long DenyMask;// Offset=0x8 Size=0x4
};

struct _FP_IEEE_RECORD// Size=0x48 (Id=1285)
{
    struct _FP_IEEE_VALUE Operand1;// Offset=0x0 Size=0x18
    struct _FP_IEEE_VALUE Operand2;// Offset=0x18 Size=0x18
    struct _FP_IEEE_VALUE Result;// Offset=0x30 Size=0x18
};

struct _FILE_MODE_INFORMATION// Size=0x4 (Id=1286)
{
    unsigned long Mode;// Offset=0x0 Size=0x4
};

struct _LAST_EXCEPTION_LOG// Size=0xab0 (Id=1287)
{
    struct _EXCEPTION_RECORD ExceptionRecord;// Offset=0x0 Size=0x50
    struct _CONTEXT ContextRecord;// Offset=0x50 Size=0xa40
    unsigned long ControlPc;// Offset=0xa90 Size=0x4
    enum _EXCEPTION_DISPOSITION Disposition;// Offset=0xa94 Size=0x4
    unsigned long HandlerData[5];// Offset=0xa98 Size=0x14
};

struct _CSTRING// Size=0x8 (Id=1288)
{
    unsigned short Length;// Offset=0x0 Size=0x2
    unsigned short MaximumLength;// Offset=0x2 Size=0x2
    unsigned char * Buffer;// Offset=0x4 Size=0x4
};

struct _FILE_ALIGNMENT_INFORMATION// Size=0x4 (Id=1289)
{
    unsigned long AlignmentRequirement;// Offset=0x0 Size=0x4
};

struct _FILE_BASIC_INFORMATION// Size=0x28 (Id=1290)
{
    union _LARGE_INTEGER CreationTime;// Offset=0x0 Size=0x8
    union _LARGE_INTEGER LastAccessTime;// Offset=0x8 Size=0x8
    union _LARGE_INTEGER LastWriteTime;// Offset=0x10 Size=0x8
    union _LARGE_INTEGER ChangeTime;// Offset=0x18 Size=0x8
    unsigned long FileAttributes;// Offset=0x20 Size=0x4
};

struct _FILE_TRACKING_INFORMATION// Size=0xc (Id=1291)
{
    void * DestinationFile;// Offset=0x0 Size=0x4
    unsigned long ObjectInformationLength;// Offset=0x4 Size=0x4
    char ObjectInformation[1];// Offset=0x8 Size=0x1
};

struct _QUAD// Size=0x8 (Id=1292)
{
    float DoNotUseThisField;// Offset=0x0 Size=0x8
};

struct _FILE_STANDARD_INFORMATION// Size=0x18 (Id=1293)
{
    union _LARGE_INTEGER AllocationSize;// Offset=0x0 Size=0x8
    union _LARGE_INTEGER EndOfFile;// Offset=0x8 Size=0x8
    unsigned long NumberOfLinks;// Offset=0x10 Size=0x4
    unsigned char DeletePending;// Offset=0x14 Size=0x1
    unsigned char Directory;// Offset=0x15 Size=0x1
};

struct _RTL_PROCESS_LOCKS// Size=0x28 (Id=1294)
{
    unsigned long NumberOfLocks;// Offset=0x0 Size=0x4
    struct _RTL_PROCESS_LOCK_INFORMATION Locks[1];// Offset=0x4 Size=0x24
};

struct _RTL_TIME_ZONE_INFORMATION// Size=0xac (Id=1295)
{
    long Bias;// Offset=0x0 Size=0x4
    wchar_t StandardName[32];// Offset=0x4 Size=0x40
    struct _TIME_FIELDS StandardStart;// Offset=0x44 Size=0x10
    long StandardBias;// Offset=0x54 Size=0x4
    wchar_t DaylightName[32];// Offset=0x58 Size=0x40
    struct _TIME_FIELDS DaylightStart;// Offset=0x98 Size=0x10
    long DaylightBias;// Offset=0xa8 Size=0x4
};

struct _FP_32// Size=0x4 (Id=1296)
{
    unsigned long W[1];// Offset=0x0 Size=0x4
};

struct _FILE_FS_SIZE_INFORMATION// Size=0x18 (Id=1297)
{
    union _LARGE_INTEGER TotalAllocationUnits;// Offset=0x0 Size=0x8
    union _LARGE_INTEGER AvailableAllocationUnits;// Offset=0x8 Size=0x8
    unsigned long SectorsPerAllocationUnit;// Offset=0x10 Size=0x4
    unsigned long BytesPerSector;// Offset=0x14 Size=0x4
};

struct _DISPATCHER_CONTEXT// Size=0x10 (Id=1298)
{
    unsigned long ControlPc;// Offset=0x0 Size=0x4
    struct _RUNTIME_FUNCTION * FunctionEntry;// Offset=0x4 Size=0x4
    unsigned long EstablisherFrame;// Offset=0x8 Size=0x4
    struct _CONTEXT * ContextRecord;// Offset=0xc Size=0x4
};

struct _FILE_DIRECTORY_INFORMATION// Size=0x48 (Id=1299)
{
    unsigned long NextEntryOffset;// Offset=0x0 Size=0x4
    unsigned long FileIndex;// Offset=0x4 Size=0x4
    union _LARGE_INTEGER CreationTime;// Offset=0x8 Size=0x8
    union _LARGE_INTEGER LastAccessTime;// Offset=0x10 Size=0x8
    union _LARGE_INTEGER LastWriteTime;// Offset=0x18 Size=0x8
    union _LARGE_INTEGER ChangeTime;// Offset=0x20 Size=0x8
    union _LARGE_INTEGER EndOfFile;// Offset=0x28 Size=0x8
    union _LARGE_INTEGER AllocationSize;// Offset=0x30 Size=0x8
    unsigned long FileAttributes;// Offset=0x38 Size=0x4
    unsigned long FileNameLength;// Offset=0x3c Size=0x4
    unsigned char FileName[1];// Offset=0x40 Size=0x1
};

union _RTL_CRITICAL_SECTION::<unnamed-type-Synchronization>// Size=0x10 (Id=1300)
{
    struct <unnamed-type-Event>// Size=0x10 (Id=19609)
    {
        unsigned char Type;// Offset=0x0 Size=0x1
        unsigned char SpinCount;// Offset=0x1 Size=0x1
        unsigned char Size;// Offset=0x2 Size=0x1
        unsigned char Inserted;// Offset=0x3 Size=0x1
        long SignalState;// Offset=0x4 Size=0x4
        struct _LIST_ENTRY WaitListHead;// Offset=0x8 Size=0x8
    };
    struct _RTL_CRITICAL_SECTION::<unnamed-type-Synchronization>::<unnamed-type-Event> Event;// Offset=0x0 Size=0x10
    unsigned long RawEvent[4];// Offset=0x0 Size=0x10
};

struct _RTL_CRITICAL_SECTION::<unnamed-type-Synchronization>::<unnamed-type-Event>// Size=0x10 (Id=1301)
{
    unsigned char Type;// Offset=0x0 Size=0x1
    unsigned char SpinCount;// Offset=0x1 Size=0x1
    unsigned char Size;// Offset=0x2 Size=0x1
    unsigned char Inserted;// Offset=0x3 Size=0x1
    long SignalState;// Offset=0x4 Size=0x4
    struct _LIST_ENTRY WaitListHead;// Offset=0x8 Size=0x8
};

struct _FILE_NAME_INFORMATION// Size=0x8 (Id=1302)
{
    unsigned long FileNameLength;// Offset=0x0 Size=0x4
    unsigned char FileName[1];// Offset=0x4 Size=0x1
};

struct _UNICODE_STRING// Size=0x8 (Id=1303)
{
    unsigned short Length;// Offset=0x0 Size=0x2
    unsigned short MaximumLength;// Offset=0x2 Size=0x2
    wchar_t * Buffer;// Offset=0x4 Size=0x4
};

struct _FILE_COMPRESSION_INFORMATION// Size=0x10 (Id=1304)
{
    union _LARGE_INTEGER CompressedFileSize;// Offset=0x0 Size=0x8
    unsigned short CompressionFormat;// Offset=0x8 Size=0x2
    unsigned char CompressionUnitShift;// Offset=0xa Size=0x1
    unsigned char ChunkShift;// Offset=0xb Size=0x1
    unsigned char ClusterShift;// Offset=0xc Size=0x1
    unsigned char Reserved[3];// Offset=0xd Size=0x3
};

struct _FILE_POSITION_INFORMATION// Size=0x8 (Id=1305)
{
    union _LARGE_INTEGER CurrentByteOffset;// Offset=0x0 Size=0x8
};

struct _FP_IEEE_VALUE::<unnamed-type-Control>// Size=0x4 (Id=1306)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long RoundingMode:2;// Offset=0x0 Size=0x4 BitOffset=0x1e BitSize=0x2
        unsigned long Inexact:1;// Offset=0x0 Size=0x4 BitOffset=0x1d BitSize=0x1
        unsigned long Underflow:1;// Offset=0x0 Size=0x4 BitOffset=0x1c BitSize=0x1
        unsigned long Overflow:1;// Offset=0x0 Size=0x4 BitOffset=0x1b BitSize=0x1
        unsigned long ZeroDivide:1;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x1
        unsigned long InvalidOperation:1;// Offset=0x0 Size=0x4 BitOffset=0x19 BitSize=0x1
        unsigned long OperandValid:1;// Offset=0x0 Size=0x4 BitOffset=0x18 BitSize=0x1
        unsigned long Format:4;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0x4
        unsigned long Precision:4;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x4
        unsigned long Operation:12;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0xc
        unsigned long Spare:3;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x3
        unsigned long HardwareException:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
    };
};

union _FP_IEEE_VALUE::<unnamed-type-Value>// Size=0x10 (Id=1307)
{
    short I16Value;// Offset=0x0 Size=0x2
    unsigned short U16Value;// Offset=0x0 Size=0x2
    long I32Value;// Offset=0x0 Size=0x4
    unsigned long U32Value;// Offset=0x0 Size=0x4
    void * StringValue;// Offset=0x0 Size=0x4
    unsigned long CompareValue;// Offset=0x0 Size=0x4
    struct _FP_32 Fp32Value;// Offset=0x0 Size=0x4
    union _LARGE_INTEGER I64Value;// Offset=0x0 Size=0x8
    union _ULARGE_INTEGER U64Value;// Offset=0x0 Size=0x8
    struct _FP_64 Fp64Value;// Offset=0x0 Size=0x8
    struct _FP_80 Fp80Value;// Offset=0x0 Size=0xc
    struct _FP_128 Fp128Value;// Offset=0x0 Size=0x10
};

struct _FILE_IO_PRIORITY_INFORMATION// Size=0x4 (Id=1308)
{
    enum _IO_PRIORITY IoPriority;// Offset=0x0 Size=0x4
};

struct _PORT_MESSAGE// Size=0x18 (Id=1309)
{
    union // Size=0x4 (Id=0)
    {
        union <unnamed-type-u1>// Size=0x4 (Id=19628)
        {
            struct <unnamed-type-s1>// Size=0x4 (Id=19629)
            {
                short DataLength;// Offset=0x0 Size=0x2
                short TotalLength;// Offset=0x2 Size=0x2
            };
            struct _PORT_MESSAGE::<unnamed-type-u1>::<unnamed-type-s1> s1;// Offset=0x0 Size=0x4
            unsigned long Length;// Offset=0x0 Size=0x4
        };
        union _PORT_MESSAGE::<unnamed-type-u1> u1;// Offset=0x0 Size=0x4
        union <unnamed-type-u2>// Size=0x4 (Id=19635)
        {
            struct <unnamed-type-s2>// Size=0x4 (Id=19636)
            {
                short Type;// Offset=0x0 Size=0x2
                short DataInfoOffset;// Offset=0x2 Size=0x2
            };
            struct _PORT_MESSAGE::<unnamed-type-u2>::<unnamed-type-s2> s2;// Offset=0x0 Size=0x4
            unsigned long ZeroInit;// Offset=0x0 Size=0x4
        };
    };
    union _PORT_MESSAGE::<unnamed-type-u2> u2;// Offset=0x4 Size=0x4
    union // Size=0x8 (Id=0)
    {
        struct _CLIENT_ID ClientId;// Offset=0x8 Size=0x8
        float DoNotUseThisField;// Offset=0x8 Size=0x8
    };
    unsigned long MessageId;// Offset=0x10 Size=0x4
    union // Size=0x4 (Id=0)
    {
        unsigned long ClientViewSize;// Offset=0x14 Size=0x4
        unsigned long CallbackId;// Offset=0x14 Size=0x4
    };
};

union _PORT_MESSAGE::<unnamed-type-u2>// Size=0x4 (Id=1310)
{
    struct <unnamed-type-s2>// Size=0x4 (Id=19636)
    {
        short Type;// Offset=0x0 Size=0x2
        short DataInfoOffset;// Offset=0x2 Size=0x2
    };
    struct _PORT_MESSAGE::<unnamed-type-u2>::<unnamed-type-s2> s2;// Offset=0x0 Size=0x4
    unsigned long ZeroInit;// Offset=0x0 Size=0x4
};

struct _PORT_MESSAGE::<unnamed-type-u2>::<unnamed-type-s2>// Size=0x4 (Id=1311)
{
    short Type;// Offset=0x0 Size=0x2
    short DataInfoOffset;// Offset=0x2 Size=0x2
};

union _PORT_MESSAGE::<unnamed-type-u1>// Size=0x4 (Id=1312)
{
    struct <unnamed-type-s1>// Size=0x4 (Id=19629)
    {
        short DataLength;// Offset=0x0 Size=0x2
        short TotalLength;// Offset=0x2 Size=0x2
    };
    struct _PORT_MESSAGE::<unnamed-type-u1>::<unnamed-type-s1> s1;// Offset=0x0 Size=0x4
    unsigned long Length;// Offset=0x0 Size=0x4
};

struct _PORT_MESSAGE::<unnamed-type-u1>::<unnamed-type-s1>// Size=0x4 (Id=1313)
{
    short DataLength;// Offset=0x0 Size=0x2
    short TotalLength;// Offset=0x2 Size=0x2
};

struct _FILE_FS_ATTRIBUTE_INFORMATION// Size=0x10 (Id=1314)
{
    unsigned long FileSystemAttributes;// Offset=0x0 Size=0x4
    long MaximumComponentNameLength;// Offset=0x4 Size=0x4
    unsigned long FileSystemNameLength;// Offset=0x8 Size=0x4
    unsigned char FileSystemName[1];// Offset=0xc Size=0x1
};

struct _FPSCR::<unnamed-type-bits>// Size=0x4 (Id=1315)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long RN:2;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x2
        unsigned long NI:1;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x1
        unsigned long XE:1;// Offset=0x0 Size=0x4 BitOffset=0x3 BitSize=0x1
        unsigned long ZE:1;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x1
        unsigned long UE:1;// Offset=0x0 Size=0x4 BitOffset=0x5 BitSize=0x1
        unsigned long OE:1;// Offset=0x0 Size=0x4 BitOffset=0x6 BitSize=0x1
        unsigned long VE:1;// Offset=0x0 Size=0x4 BitOffset=0x7 BitSize=0x1
        unsigned long VXCVI:1;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x1
        unsigned long VXSQRT:1;// Offset=0x0 Size=0x4 BitOffset=0x9 BitSize=0x1
        unsigned long VXSOFT:1;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0x1
        unsigned long Res1:1;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x1
        unsigned long FU:1;// Offset=0x0 Size=0x4 BitOffset=0xc BitSize=0x1
        unsigned long FE:1;// Offset=0x0 Size=0x4 BitOffset=0xd BitSize=0x1
        unsigned long FG:1;// Offset=0x0 Size=0x4 BitOffset=0xe BitSize=0x1
        unsigned long FL:1;// Offset=0x0 Size=0x4 BitOffset=0xf BitSize=0x1
        unsigned long C:1;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x1
        unsigned long FI:1;// Offset=0x0 Size=0x4 BitOffset=0x11 BitSize=0x1
        unsigned long FR:1;// Offset=0x0 Size=0x4 BitOffset=0x12 BitSize=0x1
        unsigned long VXVC:1;// Offset=0x0 Size=0x4 BitOffset=0x13 BitSize=0x1
        unsigned long VXIMZ:1;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0x1
        unsigned long VXZDZ:1;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x1
        unsigned long VXIDI:1;// Offset=0x0 Size=0x4 BitOffset=0x16 BitSize=0x1
        unsigned long VXISI:1;// Offset=0x0 Size=0x4 BitOffset=0x17 BitSize=0x1
        unsigned long VXSNAN:1;// Offset=0x0 Size=0x4 BitOffset=0x18 BitSize=0x1
        unsigned long XX:1;// Offset=0x0 Size=0x4 BitOffset=0x19 BitSize=0x1
        unsigned long ZX:1;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x1
        unsigned long UX:1;// Offset=0x0 Size=0x4 BitOffset=0x1b BitSize=0x1
        unsigned long OX:1;// Offset=0x0 Size=0x4 BitOffset=0x1c BitSize=0x1
        unsigned long VX:1;// Offset=0x0 Size=0x4 BitOffset=0x1d BitSize=0x1
        unsigned long FEX:1;// Offset=0x0 Size=0x4 BitOffset=0x1e BitSize=0x1
        unsigned long FX:1;// Offset=0x0 Size=0x4 BitOffset=0x1f BitSize=0x1
    };
};

struct _MUTANT_BASIC_INFORMATION// Size=0x8 (Id=1316)
{
    long CurrentCount;// Offset=0x0 Size=0x4
    unsigned char OwnedByCaller;// Offset=0x4 Size=0x1
    unsigned char AbandonedState;// Offset=0x5 Size=0x1
};

struct _FILE_FS_DEVICE_INFORMATION// Size=0x8 (Id=1317)
{
    unsigned long DeviceType;// Offset=0x0 Size=0x4
    unsigned long Characteristics;// Offset=0x4 Size=0x4
};

struct _EXCEPTION_RECORD64// Size=0x98 (Id=1318)
{
    long ExceptionCode;// Offset=0x0 Size=0x4
    unsigned long ExceptionFlags;// Offset=0x4 Size=0x4
    unsigned long long ExceptionRecord;// Offset=0x8 Size=0x8
    unsigned long long ExceptionAddress;// Offset=0x10 Size=0x8
    unsigned long NumberParameters;// Offset=0x18 Size=0x4
    unsigned long __unusedAlignment;// Offset=0x1c Size=0x4
    unsigned long long ExceptionInformation[15];// Offset=0x20 Size=0x78
};

struct _FP_128// Size=0x10 (Id=1319)
{
    unsigned long W[4];// Offset=0x0 Size=0x10
};

struct _FILE_FS_OBJECTID_INFORMATION// Size=0x40 (Id=1320)
{
    unsigned char ObjectId[16];// Offset=0x0 Size=0x10
    unsigned char ExtendedInfo[48];// Offset=0x10 Size=0x30
};

struct _XER// Size=0x4 (Id=1321)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long Rsv:29;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1d
        unsigned long CA:1;// Offset=0x0 Size=0x4 BitOffset=0x1d BitSize=0x1
        unsigned long OV:1;// Offset=0x0 Size=0x4 BitOffset=0x1e BitSize=0x1
        unsigned long SO:1;// Offset=0x0 Size=0x4 BitOffset=0x1f BitSize=0x1
    };
};

struct _TIMER_BASIC_INFORMATION// Size=0x10 (Id=1322)
{
    union _LARGE_INTEGER RemainingTime;// Offset=0x0 Size=0x8
    unsigned char TimerState;// Offset=0x8 Size=0x1
};

struct _FILE_STREAM_INFORMATION// Size=0x20 (Id=1323)
{
    unsigned long NextEntryOffset;// Offset=0x0 Size=0x4
    unsigned long StreamNameLength;// Offset=0x4 Size=0x4
    union _LARGE_INTEGER StreamSize;// Offset=0x8 Size=0x8
    union _LARGE_INTEGER StreamAllocationSize;// Offset=0x10 Size=0x8
    unsigned char StreamName[1];// Offset=0x18 Size=0x1
};

struct _SECURITY_SEED_AND_LENGTH// Size=0x2 (Id=1324)
{
    unsigned char Length;// Offset=0x0 Size=0x1
    unsigned char Seed;// Offset=0x1 Size=0x1
};

struct _IO_STATUS_BLOCK// Size=0x8 (Id=1325)
{
    union // Size=0x4 (Id=0)
    {
        long Status;// Offset=0x0 Size=0x4
        void * Pointer;// Offset=0x0 Size=0x4
    };
    unsigned long Information;// Offset=0x4 Size=0x4
};

struct _FILE_XCTD_COMPRESSION_INFORMATION// Size=0x4 (Id=1326)
{
    unsigned long Flags;// Offset=0x0 Size=0x4
};

struct _FILE_INTERNAL_INFORMATION// Size=0x8 (Id=1327)
{
    union _LARGE_INTEGER IndexNumber;// Offset=0x0 Size=0x8
};

struct _FILE_DISPOSITION_INFORMATION// Size=0x1 (Id=1328)
{
    unsigned char DeleteFile;// Offset=0x0 Size=0x1
};

struct _SECURITY_ADVANCED_QUALITY_OF_SERVICE// Size=0x14 (Id=1329)
{
    unsigned long Length;// Offset=0x0 Size=0x4
    enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;// Offset=0x4 Size=0x4
    unsigned char ContextTrackingMode;// Offset=0x8 Size=0x1
    unsigned char EffectiveOnly;// Offset=0x9 Size=0x1
    unsigned char __align0[2];// Offset=0xa Size=0x2
    struct _SECURITY_TOKEN_PROXY_DATA * ProxyData;// Offset=0xc Size=0x4
    struct _SECURITY_TOKEN_AUDIT_DATA * AuditData;// Offset=0x10 Size=0x4
};

enum XONLINE_CONTENT_HISTORY_ENUMERATE_FLAGS
{
    XONLINE_CHE_FLAG_CONTENT_IS_ACQUIRABLE_FILTER=1
};

enum DEVICESTATE
{
    DEVICESTATE_NONE=0,
    DEVICESTATE_ADD=1,
    DEVICESTATE_REMOVE=2,
    DEVICESTATE_IDLE=3,
    DEVICESTATE_UNFORMATTED=4,
    DEVICESTATE_IGNORE=5,
    DEVICESTATE_FORCE_DWORD=-1
};

enum XONLINE_CONTENT_HISTORY_INFO_FLAGS
{
    XONLINE_CONTENT_HISTORY_FLAG_IS_ACQUIRABLE=1,
    XONLINE_CONTENT_HISTORY_FLAG_IS_UNRESTRICTED=2
};

enum XONLINE_ABCH_GET_CONTACTLIST_ITEM_FLAGS
{
    XONLINE_ABCH_GET_CONTACTLIST_ITEM_USER_IN_ABCH=1,
    XONLINE_ABCH_GET_CONTACTLIST_ITEM_USER_IN_XBL=2
};

enum XONLINE_ABCH_GET_CONTACTLIST_GAMERTAGS_QUERY_FLAGS
{
    XONLINE_ABCH_GET_CONTACTLIST_GAMERTAGS_QUERY_AT_SIGNUP_FOR_USERS_IN_ABCH_AND_XBL=1,
    XONLINE_ABCH_GET_CONTACTLIST_GAMERTAGS_QUERY_AT_LOGIN_FOR_USERS_IN_ABCH_AND_XBL=2
};

enum XONLINE_PASSPORT_LOGIN_EX_SERVICES
{
    XONLINE_PASSPORT_LOGIN_EX_XBOXLIVE_SERVICE_ID=1,
    XONLINE_PASSPORT_LOGIN_EX_MESSENGER_SERVICE_ID=2
};

enum XONLINE_TOKEN_CATALOG_TYPES
{
    XONLINE_TOKEN_CATALOG_TYPE_XBOX=1,
    XONLINE_TOKEN_CATALOG_TYPE_EMS=2
};

enum _XMARKETPLACE_MEDIA_TYPE
{
    XMARKETPLACE_MEDIA_TYPE_UNKNOWN=0,
    XMARKETPLACE_MEDIA_TYPE_360_GAME=1,
    XMARKETPLACE_MEDIA_TYPE_MOVIE=2,
    XMARKETPLACE_MEDIA_TYPE_TVSHOW=3,
    XMARKETPLACE_MEDIA_TYPE_MUSIC_VIDEO=4,
    XMARKETPLACE_MEDIA_TYPE_ARCADE_DEMO=5,
    XMARKETPLACE_MEDIA_TYPE_VIRAL_VIDEO=7,
    XMARKETPLACE_MEDIA_TYPE_TV_EPISODE=8,
    XMARKETPLACE_MEDIA_TYPE_TV_SEASON=9,
    XMARKETPLACE_MEDIA_TYPE_TV_SERIES=10,
    XMARKETPLACE_MEDIA_TYPE_IN_GAME_CONTENT=18,
    XMARKETPLACE_MEDIA_TYPE_GAME_DEMO=19,
    XMARKETPLACE_MEDIA_TYPE_360_THEME=20,
    XMARKETPLACE_MEDIA_TYPE_XBOX1_GAME=21,
    XMARKETPLACE_MEDIA_TYPE_GAMER_PICTURE=22,
    XMARKETPLACE_MEDIA_TYPE_ARCADE_GAME=23,
    XMARKETPLACE_MEDIA_TYPE_IN_GAME_CONSUMABLE=24,
    XMARKETPLACE_MEDIA_TYPE_GAME_VIDEO=30,
    XMARKETPLACE_MEDIA_TYPE_GAME_TRAILER=34,
    XMARKETPLACE_MEDIA_TYPE_COMMUNITY_GAME=37,
    XMARKETPLACE_MEDIA_TYPE_PROMOTIONAL_VIDEO=39,
    XMARKETPLACE_MEDIA_TYPE_MOVIE_TRAILER=40
};

enum _XAM_CONTENT_CHANGE_REASON
{
    XAM_CONTENT_CHANGE_CREATED=0,
    XAM_CONTENT_CHANGE_DELETED=1,
    XAM_CONTENT_CHANGE_UPDATED=2
};

enum _HAL_GPIO_ACTION
{
    HalGpioOutputEnable=0,
    HalGpioOutputType=1,
    HalGpioAlternateFunction=2,
    HalGpioOutputData=3,
    HalGpioOutputDataSet=4,
    HalGpioOutputDataClear=5,
    HalGpioInputData=6,
    HalGpioInputInverting=7,
    HalGpioNoiseCancelWidth=8
};

enum _BACKGROUND_DOWNLOAD_ITEM_STATE
{
    BACKGROUND_DOWNLOAD_ITEM_STATE_PENDING=0,
    BACKGROUND_DOWNLOAD_ITEM_STATE_DOWNLOADING=1,
    BACKGROUND_DOWNLOAD_ITEM_STATE_DISK_FULL=2,
    BACKGROUND_DOWNLOAD_ITEM_STATE_MAX=3
};

enum XCODEC_TYPE
{
    XCODEC_TYPE_AAC=0,
    XCODEC_TYPE_COUNT=1
};

enum _XAM_BACKGROUND_DOWNLOAD_MODE
{
    XAM_BACKGROUND_DOWNLOAD_MODE_NEVER_ALLOW=0,
    XAM_BACKGROUND_DOWNLOAD_MODE_ALWAYS_ALLOW=1,
    XAM_BACKGROUND_DOWNLOAD_MODE_AUTO=2
};

enum XMSG_INVITE_ANSWER_TYPE
{
    XMSG_INVITE_ANSWER_NO=0,
    XMSG_INVITE_ANSWER_YES=1,
    XMSG_INVITE_ANSWER_NEVER=2,
    XMSG_INVITE_ANSWER_INVALID=3
};

enum _MINIMUSIC_STARTUP_OPTIONS
{
    MINIMUSIC_STARTUP_NORMAL=0,
    MINIMUSIC_STARTUP_PLAYCD=1
};

enum _XCONTENT_SIGNATURE_TYPE
{
    CONSOLE_SIGNED=1129270816,
    LIVE_SIGNED=1279874629,
    PIRS_SIGNED=1346982483
};

enum _LICENSEE_TYPE
{
    LICENSEE_TYPE_CONSOLE_ID=61440,
    LICENSEE_TYPE_MEDIA_FLAGS=57344,
    LICENSEE_TYPE_PRIVILEGES=53248,
    LICENSEE_TYPE_XUID=9
};

enum _unnamed_1347
{
    FLAG_BIT_SSB_FAILED_AP25_CHALLENGE=0,
    FLAG_BIT_SSB_TAMPERED_AP25_TABLE=1,
    FLAG_BIT_SSB_REVERTED_AP25_TABLE=2,
    FLAG_BIT_SSB_INVALID_DVD_GEOMETRY=3,
    FLAG_BIT_SSB_INVALID_DVD_DMI=4,
    FLAG_BIT_SSB_DVD_KEYVAULT_PAIR_MISMATCH=5,
    FLAG_BIT_SSB_CRL_DATA_INVALID=6,
    FLAG_BIT_SSB_CRL_CERTIFICATE_REVOKED=7,
    FLAG_BIT_SSB_UNAUTHORIZED_INSTALL=8,
    FLAG_BIT_SSB_KEYVAULT_POLICY_VIOLATION=9,
    FLAG_BIT_SSB_CONSOLE_BANNED=10,
    FLAG_BIT_SSB_ODD_VIOLATION=11,
    FLAG_BIT_SSB_MAXIMUM=64,
    FLAG_SSB_NONE=0,
    FLAG_SSB_FAILED_AP25_CHALLENGE=1,
    FLAG_SSB_TAMPERED_AP25_TABLE=2,
    FLAG_SSB_REVERTED_AP25_TABLE=4,
    FLAG_SSB_INVALID_DVD_GEOMETRY=8,
    FLAG_SSB_INVALID_DVD_DMI=16,
    FLAG_SSB_DVD_KEYVAULT_PAIR_MISMATCH=32,
    FLAG_SSB_CRL_DATA_INVALID=64,
    FLAG_SSB_CRL_CERTIFICATE_REVOKED=128,
    FLAG_SSB_UNAUTHORIZED_INSTALL=256,
    FLAG_SSB_KEYVAULT_POLICY_VIOLATION=512,
    FLAG_SSB_CONSOLE_BANNED=1024,
    FLAG_SSB_ODD_VIOLATION=2048
};

enum _XCONTENT_VOLUME_TYPE
{
    STFS_VOLUME=0,
    SVOD_VOLUME=1
};

enum _unnamed_1349
{
    HvpExp_HvpAcquireSpinLock=0,
    HvpExp_HvpReleaseSpinLock=1,
    HvpExp_HvpPhysicalToReal=2,
    HvpExp_HvpRelocateCacheLines=3,
    HvpExp_HvpRelocatePhysicalToEncrypted=4,
    HvpExp_HvpRelocateEncryptedToPhysical=5,
    HvpExp_HvpRelocatePhysicalToProtected=6,
    HvpExp_HvpRelocateProtectedToPhysical=7,
    HvpExp_HvpFlagsUpdate=8,
    HvpExp_HvpPkcs1Verify=9,
    HvpExp_memcmp=10,
    HvpExp_memcpy=11,
    HvpExp_memset=12,
    HvpExp_XeCryptAesCbc=13,
    HvpExp_XeCryptAesEcb=14,
    HvpExp_XeCryptAesKey=15,
    HvpExp_XeCryptBnDwLePkcs1Format=16,
    HvpExp_XeCryptBnDwLePkcs1Verify=17,
    HvpExp_XeCryptBnDw_Copy=18,
    HvpExp_XeCryptBnDw_SwapLeBe=19,
    HvpExp_XeCryptBnQwBeSigFormat=20,
    HvpExp_XeCryptBnQwBeSigVerify=21,
    HvpExp_XeCryptBnQwNeModExp=22,
    HvpExp_XeCryptBnQwNeModInv=23,
    HvpExp_XeCryptBnQwNeModMul=24,
    HvpExp_XeCryptBnQwNeRsaPrvCrypt=25,
    HvpExp_XeCryptBnQwNeRsaPubCrypt=26,
    HvpExp_XeCryptBnQw_Zero=27,
    HvpExp_XeCryptBnQw_Copy=28,
    HvpExp_XeCryptBnQw_SwapDwQwLeBe=29,
    HvpExp_XeCryptDes3Cbc=30,
    HvpExp_XeCryptDes3Ecb=31,
    HvpExp_XeCryptDes3Key=32,
    HvpExp_XeCryptDesEcb=33,
    HvpExp_XeCryptDesCbc=34,
    HvpExp_XeCryptDesKey=35,
    HvpExp_XeCryptDesParity=36,
    HvpExp_XeCryptHammingWeight=37,
    HvpExp_XeCryptHmacSha=38,
    HvpExp_XeCryptHmacShaFinal=39,
    HvpExp_XeCryptHmacShaInit=40,
    HvpExp_XeCryptHmacShaUpdate=41,
    HvpExp_XeCryptMemAlloc=42,
    HvpExp_XeCryptMemFree=43,
    HvpExp_XeCryptRandom=44,
    HvpExp_XeCryptRc4=45,
    HvpExp_XeCryptRc4Ecb=46,
    HvpExp_XeCryptRc4Key=47,
    HvpExp_XeCryptRotSum=48,
    HvpExp_XeCryptRotSum4=49,
    HvpExp_XeCryptRotSumSha=50,
    HvpExp_XeCryptSha=51,
    HvpExp_XeCryptShaFinal=52,
    HvpExp_XeCryptShaInit=53,
    HvpExp_XeCryptShaUpdate=54,
    HvpExp_XeCryptSwizzle=55,
    HvpExp_XeCryptUidEccEncode=56,
    HvpExp_XeCryptUidEccDecode=57,
    HvpExp_HvpGetDataEx=58,
    HvpExp_Count=59
};

enum _STF_CONTROL_CODE
{
    StfLockVolume=0,
    StfUnlockVolume=1,
    StfFlushDirtyBuffers=2,
    StfBuildVolumeDescriptor=3,
    StfResetWriteState=4,
    StfReadPersistentStatus=5
};

enum _INSTALLER_METADATA_TYPE
{
    INSTALLER_METADATA_TYPE_SYSTEM_UPDATE=1398100036,
    INSTALLER_METADATA_TYPE_TITLE_UPDATE=1414877252,
    INSTALLER_METADATA_TYPE_PROGRESS_CACHE_SYSTEM_UPDATE=1344557909,
    INSTALLER_METADATA_TYPE_PROGRESS_CACHE_TITLE_UPDATE=1344558165,
    INSTALLER_METADATA_TYPE_PROGRESS_CACHE_TITLE_CONTENT=1344558147,
    INSTALLER_METADATA_TYPE_PROGRESS_CACHE_PACKAGE_DOWNLOAD=1344557124
};

enum _unnamed_1352
{
    SPR_XER=1
};

enum _unnamed_1353
{
    SPR_LR=8
};

enum _unnamed_1354
{
    SPR_CTR=9
};

enum _unnamed_1355
{
    SPR_DSISR=18
};

enum _unnamed_1356
{
    SPR_DAR=19
};

enum _unnamed_1357
{
    SPR_DEC=22
};

enum _unnamed_1358
{
    SPR_SDR1=25
};

enum _unnamed_1359
{
    SPR_SRR0=26
};

enum _unnamed_1360
{
    SPR_SRR1=27
};

enum _unnamed_1361
{
    SPR_ACCR=29
};

enum _unnamed_1362
{
    SPR_CTRL_R=136
};

enum _unnamed_1363
{
    SPR_CTRL_W=152
};

enum _unnamed_1364
{
    SPR_VRSAVE=256
};

enum _unnamed_1365
{
    FLAG_BIT_SV_PROTECTED_NO_EJECT_REBOOT=0,
    FLAG_BIT_SV_PROTECTED_DISC_AUTHENTICATED=1,
    FLAG_BIT_SV_PROTECTED_ODD_IS_AP25_CAPABLE=2,
    FLAG_BIT_SV_PROTECTED_MAXIMUM=3,
    FLAG_SV_PROTECTED_NONE=0,
    FLAG_SV_PROTECTED_NO_EJECT_REBOOT=1,
    FLAG_SV_PROTECTED_DISC_AUTHENTICATED=2,
    FLAG_SV_PROTECTED_ODD_IS_AP25_CAPABLE=4
};

enum _unnamed_1366
{
    SPR_SPRG3_R=259
};

enum _unnamed_1367
{
    SPR_TB_R=268
};

enum _unnamed_1368
{
    SPR_TBU_R=269
};

enum _unnamed_1369
{
    SPR_SPRG0=272
};

enum _unnamed_1370
{
    SPR_SPRG1=273
};

enum _unnamed_1371
{
    HV_PAGE_CODE=0,
    HV_PAGE_DATA=1,
    HV_PAGE_PTE=2,
    HV_PAGE_HCR=3
};

enum _unnamed_1372
{
    SPR_SPRG2=274
};

enum _unnamed_1373
{
    SPR_SPRG3=275
};

enum _unnamed_1374
{
    SPR_TBL_W=284
};

enum _unnamed_1375
{
    HV_WHITENING_CODE=0,
    HV_WHITENING_DATA=1,
    HV_WHITENING_PTE=2,
    HV_WHITENING_HCR=3,
    HV_WHITENING_KERNEL=4,
    HV_WHITENING_MIRROR=5,
    HV_WHITENING_XEXHEADER=6,
    HV_WHITENING_EXTENSION=56,
    HV_WHITENING_LOADER=57,
    HV_WHITENING_VAULT=58,
    HV_WHITENING_DATAEX=59,
    HV_WHITENING_UPDATE=60,
    HV_WHITENING_IMAGE=61,
    HV_WHITENING_EXECUTE=62
};

enum _unnamed_1376
{
    SPR_TBU_W=285
};

enum _unnamed_1377
{
    Hvt1_HvxCreateUserMode=0,
    Hvt1_HvxDeleteUserMode=1,
    Hvt1_HvxKeysGetFactoryChallenge=2,
    Hvt1_HvxKeysSetFactoryResponse=3,
    Hvt1_HvxKeysSaveBootLoader=4,
    Hvt1_HvxKeysSaveKeyVault=5,
    Hvt1_HvxKeysSaveSystemUpdate=6,
    Hvt1_HvxSetRevocationList=7,
    Hvt1_HvxKeysExCreateKeyVault=8,
    Hvt1_HvxKeysExLoadKeyVault=9,
    Hvt1_HvxKeysExSaveKeyVault=10,
    Hvt1_HvxSecurityInitialize=11,
    Hvt1_HvxSecurityLoadSettings=12,
    Hvt1_HvxSecuritySaveSettings=13,
    Hvt1_HvxDvdAuthAP25InstallTable=14,
    Hvt1_HvxDvdAuthAP25RefreshTable=15,
    Hvt1_HvxDvdAuthAP25GetTableVersion=16,
    Hvt1_HvxDvdAuthAP25LoadChallengeSet=17,
    Hvt1_HvxDvdAuthAP25GetNextChallenge=18,
    Hvt1_HvxDvdAuthAP25VerifyAnswer=19,
    Hvt1_HvxDvdAuthAP25GetChallengeHistory=20,
    Hvt1_HvxDvdAuthGetAuthResults=21,
    Hvt1_HvxDvdAuthSetDriveAuthResult=22,
    Hvt1_HvxDvdAuthSetDiscAuthResult=23,
    Hvt1_HvxRevokeLoad=24,
    Hvt1_HvxRevokeSave=25,
    Hvt1_HvxRevokeUpdate=26,
    Hvt1_HvxKeysLoadKeyVault=27,
    Hvt1_HvxIptvSetBoundaryKey=28,
    Hvt1_HvxIptvSetSessionKey=29,
    Hvt1_HvxIptvVerifyOmac1Signature=30,
    Hvt1_HvxIptvGetAesCtrTransform=31,
    Hvt1_HvxIptvGetSessionKeyHash=32,
    Hvt1_HvpUpdateManufacturingMode=33,
    Hvt1_HvpDecryptKeyVault=34,
    Hvt1_HvpWriteStrobeDllTraining=35,
    Hvt1_XeCryptAesCbc=36,
    Hvt1_XeCryptAesEcb=37,
    Hvt1_XeCryptAesKey=38,
    Hvt1_XeCryptBnDwLePkcs1Format=39,
    Hvt1_XeCryptBnDwLePkcs1Verify=40,
    Hvt1_XeCryptBnDw_Copy=41,
    Hvt1_XeCryptBnDw_SwapLeBe=42,
    Hvt1_XeCryptBnQwBeSigFormat=43,
    Hvt1_XeCryptBnQwBeSigVerify=44,
    Hvt1_XeCryptBnQwNeModExp=45,
    Hvt1_XeCryptBnQwNeModInv=46,
    Hvt1_XeCryptBnQwNeModMul=47,
    Hvt1_XeCryptBnQwNeRsaPrvCrypt=48,
    Hvt1_XeCryptBnQwNeRsaPubCrypt=49,
    Hvt1_XeCryptBnQw_Zero=50,
    Hvt1_XeCryptBnQw_Copy=51,
    Hvt1_XeCryptBnQw_SwapDwQwLeBe=52,
    Hvt1_XeCryptDes3Cbc=53,
    Hvt1_XeCryptDes3Ecb=54,
    Hvt1_XeCryptDes3Key=55,
    Hvt1_XeCryptDesEcb=56,
    Hvt1_XeCryptDesCbc=57,
    Hvt1_XeCryptDesKey=58,
    Hvt1_XeCryptDesParity=59,
    Hvt1_XeCryptHammingWeight=60,
    Hvt1_XeCryptHmacSha=61,
    Hvt1_XeCryptHmacShaFinal=62,
    Hvt1_XeCryptHmacShaInit=63,
    Hvt1_XeCryptHmacShaUpdate=64,
    Hvt1_XeCryptMemAlloc=65,
    Hvt1_XeCryptMemFree=66,
    Hvt1_XeCryptRandom=67,
    Hvt1_XeCryptRc4=68,
    Hvt1_XeCryptRc4Ecb=69,
    Hvt1_XeCryptRc4Key=70,
    Hvt1_XeCryptRotSum=71,
    Hvt1_XeCryptRotSum4=72,
    Hvt1_XeCryptRotSumSha=73,
    Hvt1_XeCryptSha=74,
    Hvt1_XeCryptShaFinal=75,
    Hvt1_XeCryptShaInit=76,
    Hvt1_XeCryptShaUpdate=77,
    Hvt1_XeCryptSwizzle=78,
    Hvt1_XeCryptUidEccEncode=79,
    Hvt1_XeCryptUidEccDecode=80,
    Hvt1_XeCryptHdcpCalculateMi=81,
    Hvt1_XeCryptHdcpCalculateAKsvSignature=82,
    Hvt1_XeCryptHdcpCalculateBKsvSignature=83,
    Hvt1_XeCryptEmeOaepPack=84,
    Hvt1_XeCryptEmeOaepUnpack=85,
    Hvt1_XeCryptPkcs1ReverseBytes=86,
    Hvt1_XeCryptOmac1Compute=87,
    Hvt1_XeCryptMemDiff=88,
    Hvt1_Count=89
};

enum _unnamed_1378
{
    SPR_PVR=287
};

enum _unnamed_1379
{
    SPR_HSPRG0=304
};

enum _unnamed_1380
{
    SPR_HSPRG1=305
};

enum _XAM_CACHE_FILE_TYPE
{
    XAM_CACHE_ALL=0,
    XAM_CACHE_GAME_TILE=1,
    XAM_CACHE_ACHIEVEMENT_TILE=2,
    XAM_CACHE_GAMER_TILE=3,
    XAM_CACHE_GAMER_TILE_SMALL=4,
    XAM_CACHE_CUSTOM_GAMER_TILE=5,
    XAM_CACHE_CUSTOM_GAMER_TILE_SMALL=6,
    XAM_CACHE_FRIEND_MUTE_LIST=7,
    XAM_CACHE_TICKETS=8,
    XAM_CACHE_TITLE_NAMES=9,
    XAM_CACHE_RECENT_PLAYERS=10,
    XAM_CACHE_TITLE_UPDATE=11,
    XAM_CACHE_SYSTEM_UPDATE=12,
    XAM_CACHE_DASHBOARD_APP=13,
    XAM_CACHE_SPA_FILE=14,
    XAM_CACHE_GAME_INVITE=15,
    XAM_CACHE_GAMER_TAG=16,
    XAM_CACHE_MESSENGER_BUDDIES=17,
    XAM_CACHE_QOS_HISTORY=18,
    XAM_CACHE_PROFILE_SETTINGS=19,
    XAM_CACHE_AVATAR_GAMER_TILE=20
};

enum _unnamed_1382
{
    SPR_HDEC=310
};

enum _unnamed_1383
{
    SPR_HIOR=311
};

enum _unnamed_1384
{
    SPR_RMOR=312
};

enum _unnamed_1385
{
    SPR_HRMOR=313
};

enum _XAM_BOOT_REASON
{
    XAM_BOOT_SYSTEM_START=0,
    XAM_BOOT_LAUNCH_MEDIA=1,
    XAM_BOOT_LAUNCH_NEW_IMAGE=2,
    XAM_BOOT_USER_REQUEST=3,
    XAM_BOOT_DEBUG_REQUEST=4,
    XAM_BOOT_RECOVERY=5,
    XAM_BOOT_MFG_LOADER=6,
    XAM_BOOT_PROCESSDUMP_TITLE=7,
    XAM_BOOT_PROCESSDUMP_HARDDISK=8,
    XAM_BOOT_PROCESSDUMP_DEFAULT=9,
    XAM_BOOT_LAUNCH_DASHBOARD=10,
    XAM_BOOT_LAUNCH_ANY_DASHBOARD=11,
    XAM_BOOT_REASON_MAX=12
};

enum _unnamed_1387
{
    SPR_HSRR0=314
};

enum _unnamed_1388
{
    SPR_HSRR1=315
};

enum _unnamed_1389
{
    SPR_LPCR=318
};

enum _unnamed_1390
{
    SPR_LPIDR=319
};

enum _unnamed_1391
{
    SPR_TSRL=896
};

enum _XCONFIG_CATEGORY_TYPES
{
    XCONFIG_STATIC_CATEGORY=0,
    XCONFIG_STATISTIC_CATEGORY=1,
    XCONFIG_SECURED_CATEGORY=2,
    XCONFIG_USER_CATEGORY=3,
    XCONFIG_XNET_MACHINE_ACCOUNT_CATEGORY=4,
    XCONFIG_XNET_PARAMETERS_CATEGORY=5,
    XCONFIG_MEDIA_CENTER_CATEGORY=6,
    XCONFIG_CONSOLE_CATEGORY=7,
    XCONFIG_DVD_CATEGORY=8,
    XCONFIG_IPTV_CATEGORY=9,
    XCONFIG_SYSTEM_CATEGORY=10,
    XCONFIG_CATEGORY_MAX=11
};

enum _unnamed_1393
{
    SPR_TSRR=897
};

enum _unnamed_1394
{
    SPR_TSCR=921
};

enum _unnamed_1395
{
    SPR_TTR=922
};

enum _unnamed_1396
{
    SPR_TLB_HINT=946
};

enum _unnamed_1397
{
    SPR_TLB_INDEX=947
};

enum _unnamed_1398
{
    SPR_TLB_VPN=948
};

enum _HVX_IMAGE_XEX_HEADER_API
{
    HVX_IMAGE_XEX_HEADER_RESET=0,
    HVX_IMAGE_XEX_HEADER_LOAD=1,
    HVX_IMAGE_XEX_HEADER_SECURITY_INFO=2,
    HVX_IMAGE_XEX_HEADER_EXECUTION_ID=3,
    HVX_IMAGE_XEX_HEADER_ASSIGN_MEDIA_ID=4
};

enum _unnamed_1400
{
    SPR_TLB_RPN=949
};

enum _unnamed_1401
{
    SPR_TLB_RMT=951
};

enum _unnamed_1402
{
    SPR_DRSR0=952
};

enum _HVX_IMAGE_USER_MODE_API
{
    HVX_IMAGE_USER_MODE_INITIALIZE=0,
    HVX_IMAGE_USER_MODE_MAP=1,
    HVX_IMAGE_USER_MODE_UNMAP=2
};

enum _FIRMWARE_REENTRY
{
    HalHaltRoutine=0,
    HalRebootRoutine=1,
    HalKdRebootRoutine=2,
    HalFatalErrorRebootRoutine=3,
    HalResetSMCRoutine=4,
    HalPowerDownRoutine=5,
    HalRebootQuiesceRoutine=6,
    HalForceShutdownRoutine=7,
    HalMaximumRoutine=8
};

enum _unnamed_1405
{
    SPR_DRMR0=953
};

enum _unnamed_1406
{
    SPR_DCIDR0=954
};

enum SA_AttrTarget
{
    SA_All=65535,
    SA_Assembly=1,
    SA_Class=4,
    SA_Constructor=32,
    SA_Delegate=4096,
    SA_Enum=16,
    SA_Event=512,
    SA_Field=256,
    SA_GenericParameter=16384,
    SA_Interface=1024,
    SA_Method=64,
    SA_Module=2,
    SA_Parameter=2048,
    SA_Property=128,
    SA_ReturnValue=8192,
    SA_Struct=8,
    SA_This=32768
};

enum _unnamed_1408
{
    HvImp_KiProcessorStartup=0,
    HvImp_KiCommonInterruptHandler=1,
    HvImp_KiHandleExternalInterrupt=2,
    HvImp_KiHandleAlignmentInterrupt=3,
    HvImp_KiHandleProgramInterrupt=4,
    HvImp_KiHandleFpuUnavailableInterrupt=5,
    HvImp_KiHandleDecrementerInterrupt=6,
    HvImp_KiHandleSystemCall=7,
    HvImp_KiHandleTraceInterrupt=8,
    HvImp_KiHandleVpuUnavailableInterrupt=9,
    HvImp_KiHandleDataBreakpointInterrupt=10,
    HvImp_KiHandleStackOverflow=11,
    HvImp_KiHandleStorageViolationInterrupt=12,
    HvImp_KiHandleVMXAssistInterrupt=13,
    HvImp_KiPcrPageArray=14,
    HvImp_HvStats=15,
    HvImp_XeCryptRandomState=16,
    HvImp_Count=17
};

enum _unnamed_1409
{
    SPR_DRSR1=955
};

enum _unnamed_1410
{
    SPR_DRMR1=956
};

enum _unnamed_1411
{
    SPR_DCIDR1=957
};

enum _unnamed_1412
{
    SPR_IRSR0=976
};

enum _unnamed_1413
{
    SPR_IRMR0=977
};

enum _unnamed_1414
{
    SPR_ICIDR0=978
};

enum _WebInstUserVariables
{
    XAM_WEBINST_CHANNELNAME=0,
    XAM_WEBINST_SLOTNAME=1,
    XAM_WEBINST_SLOTPOS=2,
    XAM_WEBINST_SLOTPOSNAME=3,
    XAM_WEBINST_SLOTPLACEMENT=4,
    XAM_WEBINST_EXPERIENCE=5,
    XAM_WEBINST_EVENTS=6,
    XAM_WEBINST_CHANNEL=7,
    XAM_WEBINST_PAGENAME=8,
    XAM_WEBINST_APPLICATIONNAME=9,
    XAM_WEBINST_MAX=10
};

enum _unnamed_1416
{
    SPR_IRSR1=979
};

enum _unnamed_1417
{
    SPR_IRMR1=980
};

enum _unnamed_1418
{
    SPR_ICIDR1=981
};

enum _unnamed_1419
{
    SPR_HID0=1008
};

enum GOLD_UPGRADE_REASON
{
    GOLD_UPGRADE_REASON_PARTY=0,
    GOLD_UPGRADE_REASON_OSCAR=1,
    GOLD_UPGRADE_REASON_VIDEOCHAT=2,
    GOLD_UPGRADE_REASON_MULTIPLAYER=3,
    GOLD_UPGRADE_REASON_ADD_PHOTO=4,
    GOLD_UPGRADE_REASON_PRIMETIME=5,
    GOLD_UPGRADE_REASON_TITLE_INVOKED=6,
    GOLD_UPGRADE_REASON_GOLD_TRIAL_EXPIRED=7,
    GOLD_UPGRADE_REASON_GOLD_SUBSCRIPTION_EXPIRED=8,
    GOLD_UPGRADE_REASON_OTHER=9
};

enum _unnamed_1421
{
    SPR_HID1=1009
};

enum _unnamed_1422
{
    HvExp_HvxGetVersions=0,
    HvExp_HvxStartupProcessors=1,
    HvExp_HvxQuiesceProcessor=2,
    HvExp_HvxFlushEntireTb=3,
    HvExp_HvxFlushSingleTb=4,
    HvExp_HvxRelocateAndFlush=5,
    HvExp_HvxGetSpecialPurposeRegister=6,
    HvExp_HvxSetSpecialPurposeRegister=7,
    HvExp_HvxGetSocRegister=8,
    HvExp_HvxSetSocRegister=9,
    HvExp_HvxSetTimeBaseToZero=10,
    HvExp_HvxZeroPage=11,
    HvExp_HvxFlushDcacheRange=12,
    HvExp_HvxPostOutput=13,
    HvExp_HvxEnablePerformanceMonitor=14,
    HvExp_HvxGetImagePageTableEntry=15,
    HvExp_HvxSetImagePageTableEntry=16,
    HvExp_HvxCreateImageMapping=17,
    HvExp_HvxMapImagePage=18,
    HvExp_HvxCompleteImageMapping=19,
    HvExp_HvxLoadImageData=20,
    HvExp_HvxFinishImageDataLoad=21,
    HvExp_HvxStartResolveImports=22,
    HvExp_HvxResolveImports=23,
    HvExp_HvxFinishImageLoad=24,
    HvExp_HvxAbandonImageLoad=25,
    HvExp_HvxUnmapImagePages=26,
    HvExp_HvxUnmapImage=27,
    HvExp_HvxUnmapImageRange=28,
    HvExp_HvxCreateUserMode=29,
    HvExp_HvxDeleteUserMode=30,
    HvExp_HvxFlushUserModeTb=31,
    HvExp_HvxSetPowerMode=32,
    HvExp_HvxShadowBoot=33,
    HvExp_HvxBlowFuses=34,
    HvExp_HvxFsbInterrupt=35,
    HvExp_HvxLockL2=36,
    HvExp_HvxDvdAuthBuildNVPage=37,
    HvExp_HvxDvdAuthVerifyNVPage=38,
    HvExp_HvxDvdAuthRecordAuthenticationPage=39,
    HvExp_HvxDvdAuthRecordXControl=40,
    HvExp_HvxDvdAuthGetAuthPage=41,
    HvExp_HvxDvdAuthVerifyAuthPage=42,
    HvExp_HvxDvdAuthGetNextLBAIndex=43,
    HvExp_HvxDvdAuthVerifyLBA=44,
    HvExp_HvxDvdAuthClearDiscAuthInfo=45,
    HvExp_HvxKeysInitialize=46,
    HvExp_HvxKeysGetKeyProperties=47,
    HvExp_HvxKeysGetStatus=48,
    HvExp_HvxKeysGenerateRandomKey=49,
    HvExp_HvxKeysGetFactoryChallenge=50,
    HvExp_HvxKeysSetFactoryResponse=51,
    HvExp_HvxKeysSaveBootLoader=52,
    HvExp_HvxKeysSaveKeyVault=53,
    HvExp_HvxKeysSetKey=54,
    HvExp_HvxKeysGetKey=55,
    HvExp_HvxKeysGetDigest=56,
    HvExp_HvxKeysRsaPrvCrypt=57,
    HvExp_HvxKeysHmacSha=58,
    HvExp_HvxKeysAesCbc=59,
    HvExp_HvxKeysDes2Cbc=60,
    HvExp_HvxKeysDesCbc=61,
    HvExp_HvxKeysObscureKey=62,
    HvExp_HvxKeysSaveSystemUpdate=63,
    HvExp_HvxKeysExecute=64,
    HvExp_HvxDvdAuthTestMode=65,
    HvExp_HvxEnableTimebase=66,
    HvExp_HvxHdcpCalculateMi=67,
    HvExp_HvxHdcpCalculateAKsvSignature=68,
    HvExp_HvxHdcpCalculateBKsvSignature=69,
    HvExp_HvxSetRevocationList=70,
    HvExp_HvxEncryptedReserveAllocation=71,
    HvExp_HvxEncryptedReleaseAllocation=72,
    HvExp_HvxEncryptedEncryptAllocation=73,
    HvExp_HvxEncryptedSweepAddressRange=74,
    HvExp_HvxKeysExCreateKeyVault=75,
    HvExp_HvxKeysExLoadKeyVault=76,
    HvExp_HvxKeysExSaveKeyVault=77,
    HvExp_HvxKeysExSetKey=78,
    HvExp_HvxKeysExGetKey=79,
    HvExp_HvxGetUpdateSequence=80,
    HvExp_HvxSecurityInitialize=81,
    HvExp_HvxSecurityLoadSettings=82,
    HvExp_HvxSecuritySaveSettings=83,
    HvExp_HvxSecuritySetDetected=84,
    HvExp_HvxSecurityGetDetected=85,
    HvExp_HvxSecuritySetActivated=86,
    HvExp_HvxSecurityGetActivated=87,
    HvExp_HvxSecuritySetStat=88,
    HvExp_HvxGetProtectedFlags=89,
    HvExp_HvxSetProtectedFlag=90,
    HvExp_HvxDvdAuthAP25InstallTable=91,
    HvExp_HvxDvdAuthAP25RefreshTable=92,
    HvExp_HvxDvdAuthAP25GetTableVersion=93,
    HvExp_HvxDvdAuthAP25LoadChallengeSet=94,
    HvExp_HvxDvdAuthAP25GetNextChallenge=95,
    HvExp_HvxDvdAuthAP25VerifyAnswer=96,
    HvExp_HvxDvdAuthAP25GetChallengeHistory=97,
    HvExp_HvxDvdAuthGetAuthResults=98,
    HvExp_HvxDvdAuthSetDriveAuthResult=99,
    HvExp_HvxDvdAuthSetDiscAuthResult=100,
    HvExp_HvxImageTransformImageKey=101,
    HvExp_HvxImageXexHeader=102,
    HvExp_HvxRevokeLoad=103,
    HvExp_HvxRevokeSave=104,
    HvExp_HvxRevokeUpdate=105,
    HvExp_HvxDvdAuthGetMediaId=106,
    HvExp_HvxKeysLoadKeyVault=107,
    HvExp_HvxXexActivationGetNonce=108,
    HvExp_HvxXexActivationSetLicense=109,
    HvExp_HvxXexActivationVerifyOwnership=110,
    HvExp_HvxIptvSetBoundaryKey=111,
    HvExp_HvxIptvSetSessionKey=112,
    HvExp_HvxIptvVerifyOmac1Signature=113,
    HvExp_HvxIptvGetAesCtrTransform=114,
    HvExp_HvxIptvGetSessionKeyHash=115,
    HvExp_HvxImageDvdEmulationMode=116,
    HvExp_HvxImageUserMode=117,
    HvExp_HvxTest=118,
    HvExp_Count=119
};

enum _unnamed_1423
{
    SPR_IABR=1010
};

enum XTILETYPE
{
    XTILETYPE_ACHIEVEMENT=0,
    XTILETYPE_GAME_ICON=1,
    XTILETYPE_GAMER_TILE=2,
    XTILETYPE_GAMER_TILE_SMALL=3,
    XTILETYPE_LOCAL_GAMER_TILE=4,
    XTILETYPE_LOCAL_GAMER_TILE_SMALL=5,
    XTILETYPE_BKGND=6,
    XTILETYPE_AWARDED_GAMER_TILE=7,
    XTILETYPE_AWARDED_GAMER_TILE_SMALL=8,
    XTILETYPE_GAMER_TILE_BY_IMAGE_ID=9,
    XTILETYPE_PERSONAL_GAMER_TILE=10,
    XTILETYPE_PERSONAL_GAMER_TILE_SMALL=11,
    XTILETYPE_GAMER_TILE_BY_KEY=12,
    XTILETYPE_AVATAR_GAMER_TILE=13,
    XTILETYPE_AVATAR_GAMER_TILE_SMALL=14,
    XTILETYPE_AVATAR_FULL_BODY=15
};

enum _unnamed_1425
{
    SPR_HID4=1012
};

enum _XNET_LOGON_NAT_TYPE
{
    XNET_LOGON_NAT_TYPE_OPEN=1,
    XNET_LOGON_NAT_TYPE_MODERATE=2,
    XNET_LOGON_NAT_TYPE_STRICT=3
};

enum _unnamed_1427
{
    SPR_DABR=1013
};

enum SA_YesNoMaybe
{
    SA_No=268369921,
    SA_Maybe=268369936,
    SA_Yes=268370176
};

enum _unnamed_1429
{
    SPR_HID5=1014
};

enum _unnamed_1430
{
    SPR_DABRX=1015
};

enum _XNET_LOGON_DNS_TYPE
{
    XNET_LOGON_DNS_MACS=0,
    XNET_LOGON_DNS_AS=1,
    XNET_LOGON_DNS_TGS=2,
    XNET_LOGON_DNS_XDS=3,
    XNET_LOGON_DNS_MAINTENANCE=4,
    NUM_XNET_LOGON_DNS_TYPES=5
};

enum _unnamed_1432
{
    SPR_TDABRX=1016
};

enum SA_AccessType
{
    SA_NoAccess=0,
    SA_Read=1,
    SA_Write=2,
    SA_ReadWrite=3
};

enum _unnamed_1434
{
    SPR_HID6=1017
};

enum DM_FILEEVENT_API
{
    Dm_FileEvent_NtCreateFile=0,
    Dm_FileEvent_NtOpenFile=1,
    Dm_FileEvent_NtDeleteFile=2,
    Dm_FileEvent_NtReadFile=3,
    Dm_FileEvent_NtWriteFile=4,
    Dm_FileEvent_NtReadFileScatter=5,
    Dm_FileEvent_NtWriteFileGather=6,
    Dm_FileEvent_NtFlushBuffersFile=7,
    Dm_FileEvent_NtClose=8,
    Dm_FileEvent_FscSetCacheElementCount=9
};

enum _unnamed_1436
{
    SPR_HID7=1018
};

enum _unnamed_1437
{
    SPR_TIABR=1019
};

enum _unnamed_1438
{
    SPR_BKMK=1020
};

enum _unnamed_1439
{
    SPR_TDABR=1021
};

enum _unnamed_1440
{
    SPR_PIR=1023
};

enum _unnamed_1441
{
    Hvt2_memcmp=0,
    Hvt2_memcpy=1,
    Hvt2_memset=2,
    Hvt2_HvpGetDataEx=3,
    Hvt2_HvpGetRevokeStaticData=4,
    Hvt2_HvpGetRevokeDynamicData=5,
    Hvt2_HvpFatal=6,
    Hvt2_HvpCopyQwVec=7,
    Hvt2_HvpStallExecutionProcessor=8,
    Hvt2_HvpAcquireSpinLock=9,
    Hvt2_HvpReleaseSpinLock=10,
    Hvt2_HvpGetFlashBaseAddress=11,
    Hvt2_HvpGetSocMmioRegs=12,
    Hvt2_HvpSetRMCI=13,
    Hvt2_HvpZeroCacheLines=14,
    Hvt2_HvpGetUserModeSlb=15,
    Hvt2_HvpGetUserModeTlb=16,
    Hvt2_HvpPhysicalToReal=17,
    Hvt2_HvpRelocatePhysicalToEncrypted=18,
    Hvt2_HvpRelocateEncryptedToPhysical=19,
    Hvt2_HvpRelocatePhysicalToProtected=20,
    Hvt2_HvpRelocateProtectedToPhysical=21,
    Hvt2_HvpIsNextUpdateSequence=22,
    Hvt2_HvpBldrFlashRange=23,
    Hvt2_HvpIsBufferZeroed=24,
    Hvt2_HvpGetBldr1Data=25,
    Hvt2_HvpIsKeyVaultSignatureRequired=26,
    Hvt2_HvpHasPrivileges=27,
    Hvt2_HvpIsKeyVaultSignatureValid=28,
    Hvt2_HvpGetKeyVaultHmacSha=29,
    Hvt2_HvpPkcs1Verify=30,
    Hvt2_HvpFlagsUpdate=31,
    Hvt2_HvpLoadKeyVault=32,
    Hvt2_HvxSecuritySetDetected=33,
    Hvt2_HvxSecurityGetDetected=34,
    Hvt2_HvpSecuredDataPolicyRefresh=35,
    Hvt2_HvpDvdAuthGetMediaId=36,
    Hvt2_HvpPreloadCacheLines=37,
    Hvt2_Count=38
};

enum XONLINE_TEAM_LIVE_PERMISSIONS
{
    XONLINE_TEAM_DELETE=1,
    XONLINE_TEAM_MODIFY_DATA=2,
    XONLINE_TEAM_MODIFY_MEMBER_PERMISSIONS=4,
    XONLINE_TEAM_DELETE_MEMBER=8,
    XONLINE_TEAM_RECRUIT_MEMBERS=16,
    XONLINE_TEAM_LIVE_PERMISSIONS_ALL=-1
};

enum _XPROFILE_GAMER_TYPE_VALUES
{
    XPROFILE_GAMER_TYPE_360TEAM=1,
    XPROFILE_GAMER_TYPE_CHEATER=2,
    XPROFILE_GAMER_TYPE_NXE_TEAM=4
};

enum _XPARTY_BANDWIDTH_TYPE
{
    XPARTY_BANDWIDTH_UPLOAD_TOTAL_BYTES=0
};

enum _XCONFIG_STATIC_ENTRIES
{
    XCONFIG_STATIC_DATA=0,
    XCONFIG_STATIC_FIRST_POWER_ON_DATE=1,
    XCONFIG_STATIC_SMC_CONFIG=2
};

enum _KDRIVER_NOTIFICATION_TYPE
{
    DriverQuiesceRundown=0,
    DriverQuiesceStartup=1,
    DriverShutdown=2
};

enum _XPARTY_STATE_TYPE
{
    XPARTY_STATE_IDLE=0,
    XPARTY_STATE_CONNECTING=1,
    XPARTY_STATE_INPARTY=2,
    XPARTY_STATE_DISCONNECTING=3
};

enum XPARTY_ERROR_TYPE
{
    XPARTY_ERROR_NONE=0,
    XPARTY_ERROR_CONNECTFAILED=1,
    XPARTY_ERROR_CONNECTIONLOST=2,
    XPARTY_ERROR_KICKED=3,
    XPARTY_ERROR_PARTYFULL=4,
    XPARTY_ERROR_COUNT=5
};

enum _KPOWER_MODE
{
    PowerModeQuiet=0,
    PowerModeFull=1
};

enum _XAM_XALLOC_ALLOCATOR_IDS
{
    eXALLOCAllocatorId_XAMUIBASE=1,
    eXALLOCAllocatorId_XAMTILECACHE=2,
    eXALLOCAllocatorId_XAMPHOTOAPP=3,
    eXALLOCAllocatorId_XAMUVBASE=4
};

enum _XPARTY_ACCESS_LEVEL
{
    XPARTY_ACCESS_ALLOWED=0,
    XPARTY_ACCESS_WRONG_TIER=1,
    XPARTY_ACCESS_INSUFFICIENT_PRIVILEGE=2
};

enum _XCONFIG_SECURED_ENTRIES
{
    XCONFIG_SECURED_DATA=0,
    XCONFIG_SECURED_MAC_ADDRESS=1,
    XCONFIG_SECURED_AV_REGION=2,
    XCONFIG_SECURED_GAME_REGION=3,
    XCONFIG_SECURED_DVD_REGION=4,
    XCONFIG_SECURED_RESET_KEY=5,
    XCONFIG_SECURED_SYSTEM_FLAGS=6,
    XCONFIG_SECURED_POWER_MODE=7,
    XCONFIG_SECURED_ONLINE_NETWORK_ID=8,
    XCONFIG_SECURED_POWER_VCS_CONTROL=9
};

enum _TRACK_MODE_TYPE
{
    YellowMode2=0,
    XAForm2=1,
    CDDA=2
};

enum _DVD_XGD2_DRIVE_AUTH_RESULT_CODE
{
    DvdXgd2DriveAuthResultNone=0,
    DvdXgd2DriveAuthResultNvPageBuild=1,
    DvdXgd2DriveAuthResultNvPageModeSelect=2,
    DvdXgd2DriveAuthResultNvPageModeSense=3,
    DvdXgd2DriveAuthResultNvPageMarshal=4,
    DvdXgd2DriveAuthResultNvPageHeader=5,
    DvdXgd2DriveAuthResultNvPage=6,
    DvdXgd2DriveAuthResultSuccess=7
};

enum _DVD_XGD2_DISC_AUTH_RESULT_CODE
{
    DvdXgd2DiscAuthResultNone=0,
    DvdXgd2DiscAuthResultHvMarshal=1,
    DvdXgd2DiscAuthResultInvalidHvState=2,
    DvdXgd2DiscAuthResultGetAuthPage=3,
    DvdXgd2DiscAuthResultGetXControl=4,
    DvdXgd2DiscAuthResultXControlSignature=5,
    DvdXgd2DiscAuthResultHcrtHeader=6,
    DvdXgd2DiscAuthResultChallengeCount=7,
    DvdXgd2DiscAuthResultGetNextChallenge=8,
    DvdXgd2DiscAuthResultRecalibrate=9,
    DvdXgd2DiscAuthResultAuthPageHeader=10,
    DvdXgd2DiscAuthResultIoError=11,
    DvdXgd2DiscAuthResultAngDispChallenge=12,
    DvdXgd2DiscAuthResultChallenge=13,
    DvdXgd2DiscAuthResultLbaWorkspace=14,
    DvdXgd2DiscAuthResultPrimaryAuthIncomplete=15,
    DvdXgd2DiscAuthResultInvalidLbaState=16,
    DvdXgd2DiscAuthResultLbaIoError=17,
    DvdXgd2DiscAuthResultLbaFailure=18,
    DvdXgd2DiscAuthResultSuccess=19
};

enum _MM_KERNEL_STACK_TYPE
{
    MmDefaultStackType=0,
    MmTitleStackType=1,
    MmSystemStackType=2
};

enum _XPARTY_JOIN_TYPE
{
    XPARTY_JOIN_OPEN=0,
    XPARTY_JOIN_INVITEONLY=1,
    XPARTY_JOIN_MAX=2
};

enum _KOBJECTS
{
    EventNotificationObject=0,
    EventSynchronizationObject=1,
    MutantObject=2,
    ProcessObject=3,
    QueueObject=4,
    SemaphoreObject=5,
    ThreadObject=6,
    Spare1Object=7,
    TimerNotificationObject=8,
    TimerSynchronizationObject=9,
    Spare2Object=10,
    Spare3Object=11,
    Spare4Object=12,
    Spare5Object=13,
    Spare6Object=14,
    Spare7Object=15,
    Spare8Object=16,
    Spare9Object=17,
    ApcObject=18,
    DpcObject=19,
    DeviceQueueObject=20,
    EventPairObject=21,
    InterruptObject=22,
    ProfileObject=23
};

enum _XCONFIG_USER_ENTRIES
{
    XCONFIG_USER_DATA=0,
    XCONFIG_USER_TIME_ZONE_BIAS=1,
    XCONFIG_USER_TIME_ZONE_STD_NAME=2,
    XCONFIG_USER_TIME_ZONE_DLT_NAME=3,
    XCONFIG_USER_TIME_ZONE_STD_DATE=4,
    XCONFIG_USER_TIME_ZONE_DLT_DATE=5,
    XCONFIG_USER_TIME_ZONE_STD_BIAS=6,
    XCONFIG_USER_TIME_ZONE_DLT_BIAS=7,
    XCONFIG_USER_DEFAULT_PROFILE=8,
    XCONFIG_USER_LANGUAGE=9,
    XCONFIG_USER_VIDEO_FLAGS=10,
    XCONFIG_USER_AUDIO_FLAGS=11,
    XCONFIG_USER_RETAIL_FLAGS=12,
    XCONFIG_USER_DEVKIT_FLAGS=13,
    XCONFIG_USER_COUNTRY=14,
    XCONFIG_USER_PC_FLAGS=15,
    XCONFIG_USER_SMB_CONFIG=16,
    XCONFIG_USER_LIVE_PUID=17,
    XCONFIG_USER_LIVE_CREDENTIALS=18,
    XCONFIG_USER_AV_COMPOSITE_SCREENSZ=19,
    XCONFIG_USER_AV_COMPONENT_SCREENSZ=20,
    XCONFIG_USER_AV_VGA_SCREENSZ=21,
    XCONFIG_USER_PC_GAME=22,
    XCONFIG_USER_PC_PASSWORD=23,
    XCONFIG_USER_PC_MOVIE=24,
    XCONFIG_USER_PC_GAME_RATING=25,
    XCONFIG_USER_PC_MOVIE_RATING=26,
    XCONFIG_USER_PC_HINT=27,
    XCONFIG_USER_PC_HINT_ANSWER=28,
    XCONFIG_USER_PC_OVERRIDE=29,
    XCONFIG_USER_MUSIC_PLAYBACK_MODE=30,
    XCONFIG_USER_MUSIC_VOLUME=31,
    XCONFIG_USER_MUSIC_FLAGS=32,
    XCONFIG_USER_ARCADE_FLAGS=33,
    XCONFIG_USER_PC_VERSION=34,
    XCONFIG_USER_PC_TV=35,
    XCONFIG_USER_PC_TV_RATING=36,
    XCONFIG_USER_PC_EXPLICIT_VIDEO=37,
    XCONFIG_USER_PC_EXPLICIT_VIDEO_RATING=38,
    XCONFIG_USER_PC_UNRATED_VIDEO=39,
    XCONFIG_USER_PC_UNRATED_VIDEO_RATING=40,
    XCONFIG_USER_VIDEO_OUTPUT_BLACK_LEVELS=41,
    XCONFIG_USER_VIDEO_PLAYER_DISPLAY_MODE=42,
    XCONFIG_USER_ALTERNATE_VIDEO_TIMING_ID=43,
    XCONFIG_USER_VIDEO_DRIVER_OPTIONS=44,
    XCONFIG_USER_MUSIC_UI_FLAGS=45,
    XCONFIG_USER_VIDEO_MEDIA_SOURCE_TYPE=46,
    XCONFIG_USER_MUSIC_MEDIA_SOURCE_TYPE=47,
    XCONFIG_USER_PHOTO_MEDIA_SOURCE_TYPE=48
};

enum _KINTERRUPT_MODE
{
    LevelSensitive=0,
    Latched=1
};

enum _DVD_XGD2_DISC_AUTH_RESULT_CHALLENGE_REQUIREMENT
{
    DvdXgd2DiscAuthResultReqMinDartCount=0,
    DvdXgd2DiscAuthResultReqMaxDartCount=1,
    DvdXgd2DiscAuthResultReqMinRegionCount=2,
    DvdXgd2DiscAuthResultReqMaxRegionCount=3,
    DvdXgd2DiscAuthResultReqMaxComboCount=4,
    DvdXgd2DiscAuthResultReqFinalChallenge=5
};

enum _KPROCESS_TYPE
{
    ProcessTypeNone=0,
    ProcessTypeIdle=0,
    ProcessTypeTitle=1,
    ProcessTypeSystem=2,
    ProcessTypeParty=3
};

enum _KTHREAD_STATE
{
    Initialized=0,
    Ready=1,
    Running=2,
    Standby=3,
    Terminated=4,
    Waiting=5,
    DeferredReady=6
};

enum _unnamed_1464
{
    CERTIFICATE_REVOCATION_LIST_INVALID=0,
    CERTIFICATE_REVOCATION_LIST_PIRS=1129466960,
    CERTIFICATE_REVOCATION_LIST_LIVE=1129466956,
    CERTIFICATE_REVOCATION_LIST_MAXIMUM=131072,
    CERTIFICATE_REVOCATION_LIST_DYNAMIC_MAXIMUM=32768
};

enum _KWAIT_REASON
{
    Executive=0,
    DelayExecution=1,
    Suspended=2,
    UserRequest=3,
    WrQueue=4,
    WrFsCacheIn=5,
    WrFsCacheOut=6,
    WrReadWriteLock=7,
    WrCriticalSection=8,
    MaximumWaitReason=9
};

enum MATCH_OP
{
    MATCH_OP_CREATE=0,
    MATCH_OP_SEARCH=1,
    MATCH_OP_INVALID=2,
    MATCH_OP_SPLIT=3
};

enum HUDSCENE
{
    HUDSCENE_MAIN=0,
    HUDSCENE_MESSAGEBOX=1,
    HUDSCENE_LIVEUPSELL=2,
    HUDSCENE_VOICESETTINGS=3,
    HUDSCENE_PLAYTIMER=4,
    HUDSCENE_QUICKLAUNCH=5,
    HUDSCENE_WHATSON=6,
    HUDSCENE_STOREPICKER=7,
    HUDSCENE_FIRSTRUNWELCOME=8,
    HUDSCENE_COUNT=9
};

enum _XCONFIG_CONSOLE_ENTRIES
{
    XCONFIG_CONSOLE_DATA=0,
    XCONFIG_CONSOLE_SCREEN_SAVER=1,
    XCONFIG_CONSOLE_AUTO_SHUT_OFF=2,
    XCONFIG_CONSOLE_WIRELESS_SETTINGS=3,
    XCONFIG_CONSOLE_CAMERA_SETTINGS=4,
    XCONFIG_CONSOLE_PLAYTIMERDATA=5,
    XCONFIG_CONSOLE_MEDIA_DISABLEAUTOLAUNCH=6,
    XCONFIG_CONSOLE_KEYBOARD_LAYOUT=7
};

enum _XALLOC_PRIVATE_ALLOCATOR_IDS
{
    eXALLOCAllocatorId_MsPrivateMin=176,
    eXALLOCAllocatorId_XHTTP=176,
    eXALLOCAllocatorId_MsPrivateMax=191
};

enum _unnamed_1470
{
    CERTIFICATE_LOG_COUNT=62
};

enum KCONTINUE_STATUS
{
    ContinueError=0,
    ContinueSuccess=1,
    ContinueProcessorReselected=2,
    ContinueNextProcessor=3
};

enum _XCONFIG_MEDIA_CENTER_ENTRIES
{
    XCONFIG_MEDIA_CENTER_DATA=0,
    XCONFIG_MEDIA_CENTER_MEDIA_PLAYER=1,
    XCONFIG_MEDIA_CENTER_XESLED_VERSION=2,
    XCONFIG_MEDIA_CENTER_XESLED_TRUST_SECRET=3,
    XCONFIG_MEDIA_CENTER_XESLED_TRUST_CODE=4,
    XCONFIG_MEDIA_CENTER_XESLED_HOST_ID=5,
    XCONFIG_MEDIA_CENTER_XESLED_KEY=6,
    XCONFIG_MEDIA_CENTER_XESLED_HOST_MAC_ADDRESS=7,
    XCONFIG_MEDIA_CENTER_SERVER_UUID=8,
    XCONFIG_MEDIA_CENTER_SERVER_NAME=9,
    XCONFIG_MEDIA_CENTER_SERVER_FLAG=10
};

enum _KUSER_MODE_TYPE
{
    UserModeTitle=0,
    UserModeSystem=1
};

enum _XPARTY_TEST_DELAY_TYPE
{
    ePartyTestDelay_ProfileRead=0,
    ePartyTestDelay_Leave=1
};

enum _XEKEY_INDEX
{
    XEKEY_MANUFACTURING_MODE=0,
    XEKEY_ALTERNATE_KEY_VAULT=1,
    XEKEY_RESTRICTED_PRIVILEGES_FLAGS=2,
    XEKEY_RESERVED_BYTE3=3,
    XEKEY_RESERVED_WORD1=4,
    XEKEY_RESERVED_WORD2=5,
    XEKEY_RESTRICTED_HVEXT_LOADER=6,
    XEKEY_POLICY_FLASH_SIZE=7,
    XEKEY_RESERVED_DWORD3=8,
    XEKEY_RESERVED_DWORD4=9,
    XEKEY_RESTRICTED_PRIVILEGES=10,
    XEKEY_RESERVED_QWORD2=11,
    XEKEY_RESERVED_QWORD3=12,
    XEKEY_RESERVED_QWORD4=13,
    XEKEY_RESERVED_KEY1=14,
    XEKEY_RESERVED_KEY2=15,
    XEKEY_RESERVED_KEY3=16,
    XEKEY_RESERVED_KEY4=17,
    XEKEY_RESERVED_RANDOM_KEY1=18,
    XEKEY_RESERVED_RANDOM_KEY2=19,
    XEKEY_CONSOLE_SERIAL_NUMBER=20,
    XEKEY_MOBO_SERIAL_NUMBER=21,
    XEKEY_GAME_REGION=22,
    XEKEY_CONSOLE_OBFUSCATION_KEY=23,
    XEKEY_KEY_OBFUSCATION_KEY=24,
    XEKEY_ROAMABLE_OBFUSCATION_KEY=25,
    XEKEY_DVD_KEY=26,
    XEKEY_PRIMARY_ACTIVATION_KEY=27,
    XEKEY_SECONDARY_ACTIVATION_KEY=28,
    XEKEY_GLOBAL_DEVICE_2DES_KEY1=29,
    XEKEY_GLOBAL_DEVICE_2DES_KEY2=30,
    XEKEY_WIRELESS_CONTROLLER_MS_2DES_KEY1=31,
    XEKEY_WIRELESS_CONTROLLER_MS_2DES_KEY2=32,
    XEKEY_WIRED_WEBCAM_MS_2DES_KEY1=33,
    XEKEY_WIRED_WEBCAM_MS_2DES_KEY2=34,
    XEKEY_WIRED_CONTROLLER_MS_2DES_KEY1=35,
    XEKEY_WIRED_CONTROLLER_MS_2DES_KEY2=36,
    XEKEY_MEMORY_UNIT_MS_2DES_KEY1=37,
    XEKEY_MEMORY_UNIT_MS_2DES_KEY2=38,
    XEKEY_OTHER_XSM3_DEVICE_MS_2DES_KEY1=39,
    XEKEY_OTHER_XSM3_DEVICE_MS_2DES_KEY2=40,
    XEKEY_WIRELESS_CONTROLLER_3P_2DES_KEY1=41,
    XEKEY_WIRELESS_CONTROLLER_3P_2DES_KEY2=42,
    XEKEY_WIRED_WEBCAM_3P_2DES_KEY1=43,
    XEKEY_WIRED_WEBCAM_3P_2DES_KEY2=44,
    XEKEY_WIRED_CONTROLLER_3P_2DES_KEY1=45,
    XEKEY_WIRED_CONTROLLER_3P_2DES_KEY2=46,
    XEKEY_MEMORY_UNIT_3P_2DES_KEY1=47,
    XEKEY_MEMORY_UNIT_3P_2DES_KEY2=48,
    XEKEY_OTHER_XSM3_DEVICE_3P_2DES_KEY1=49,
    XEKEY_OTHER_XSM3_DEVICE_3P_2DES_KEY2=50,
    XEKEY_CONSOLE_PRIVATE_KEY=51,
    XEKEY_XEIKA_PRIVATE_KEY=52,
    XEKEY_CARDEA_PRIVATE_KEY=53,
    XEKEY_CONSOLE_CERTIFICATE=54,
    XEKEY_XEIKA_CERTIFICATE=55,
    XEKEY_CARDEA_CERTIFICATE=56,
    XEKEY_MAX_KEY_INDEX=57,
    XEKEY_CONSTANT_PIRS_KEY=57,
    XEKEY_CONSTANT_ALT_MASTER_KEY=58,
    XEKEY_CONSTANT_ALT_LIVE_KEY=59,
    XEKEY_CONSTANT_MASTER_KEY=60,
    XEKEY_CONSTANT_LIVE_KEY=61,
    XEKEY_CONSTANT_XB1_GREEN_KEY=62,
    XEKEY_CONSTANT_SATA_DISK_SECURITY_KEY=63,
    XEKEY_CONSTANT_DEVICE_REVOCATION_KEY=64,
    XEKEY_CONSTANT_XMACS_KEY=65,
    XEKEY_CONSTANT_REVOCATION_LIST_NONCE=66,
    XEKEY_CONSTANT_CROSS_PLATFORM_SYSLINK_KEY=67,
    XEKEY_SPECIAL_KEY_VAULT_SIGNATURE=68,
    XEKEY_SPECIAL_SECROM_DIGEST=69,
    XEKEY_SPECIAL_SECDATA=70,
    XEKEY_MAX_CONSTANT_INDEX=71,
    XEKEY_TITLE_KEYS_BASE=224,
    XEKEY_TITLE_KEYS_LIMIT=232,
    XEKEY_TITLE_KEYS_RESET=240,
    XEKEY_SECURED_DATA_BASE=4096,
    XEKEY_SECURED_DATA_LIMIT=8192
};

enum _XCONFIG_STATISTIC_ENTRIES
{
    XCONFIG_STATISTICS_DATA=0,
    XCONFIG_STATISTICS_XUID_MAC_ADDRESS=1,
    XCONFIG_STATISTICS_XUID_COUNT=2,
    XCONFIG_STATISTICS_ODD_FAILURES=3,
    XCONFIG_STATISTICS_HDD_SMART_DATA=4,
    XCONFIG_STATISTICS_UEM_ERRORS=5,
    XCONFIG_STATISTICS_FPM_ERRORS=6,
    XCONFIG_STATISTICS_LAST_REPORT_TIME=7,
    XCONFIG_STATISTICS_BUG_CHECK_DATA=8,
    XCONFIG_STATISTICS_TEMPERATURE=9
};

enum XIPTV_DVR_STATUS_FLAGS
{
    XIPTV_OFFLINE=0,
    XIPTV_DVR_STATUS_NOT_READY=1,
    XIPTV_DVR_STATUS_NOT_SUPPORTED=2,
    XIPTV_DVR_STATUS_NO_VOLUME=3,
    XIPTV_DVR_STATUS_FORMATTING=4,
    XIPTV_DVR_STATUS_READY=5
};

enum P_MSG_TYPES
{
    PMSG_MIN_REQ_TYPE=1000,
    PMSG_HELLO=1000,
    PMSG_ALIVE=1001,
    PMSG_SYNC=1002,
    PMSG_REFRESH=1003,
    PMSG_ADD=1004,
    PMSG_DELETE=1005,
    PMSG_ACCEPT=1006,
    PMSG_REJECT=1007,
    PMSG_BLOCK=1008,
    PMSG_UNBLOCK=1009,
    PMSG_INVITE=1010,
    PMSG_CANCEL=1011,
    PMSG_INVITE_ANSWER=1012,
    PMSG_NICKNAME=1013,
    PMSG_STATE=1014,
    PMSG_DEAD_XBOX=1015,
    PMSG_DEAD_SG=1016,
    PMSG_ANNOUNCE=1017,
    PMSG_SUBSCRIBED=1018,
    PMSG_UNSUBSCRIBE=1019,
    PMSG_ADDED=1020,
    PMSG_ACCEPTED=1021,
    PMSG_REMOVED=1022,
    PMSG_KICK=1023,
    PMSG_DEAD_USER=1024,
    PMSG_ALIVE_2=1025,
    PMSG_WEB_FRIENDS=1026,
    PMSG_WEB_ALIVE=1027,
    PMSG_WEB_ANNOUNCE=1028,
    PMSG_WEB_SUBSCRIBED=1029,
    PMSG_WEB_UNSUBSCRIBE=1030,
    PMSG_PEER_SESSION=1031,
    PMSG_TEAM_LIST_TEAMS=1032,
    PMSG_TEAM_LIST_MEMBERS=1033,
    PMSG_TEAM_CREATE=1034,
    PMSG_TEAM_DELETE=1035,
    PMSG_TEAM_REMOVE=1036,
    PMSG_TEAM_MANAGE_TEAM=1037,
    PMSG_TEAM_MANAGE_MEMBER=1038,
    PMSG_TEAM_RECRUIT=1039,
    PMSG_TEAM_JOIN=1040,
    PMSG_TEAM_GET_TICKET=1041,
    PMSG_PEER_SUBSCRIBE=1042,
    PMSG_PEER_UNSUBSCRIBE=1043,
    PMSG_WATCH_START=1044,
    PMSG_WATCH_STOP=1045,
    PMSG_ADD_2=1046,
    PMSG_INVITE_2=1047,
    PMSG_ALIVE_INTERNAL=1048,
    PMSG_STATE_2=1049,
    PMSG_GET_STATE=1050,
    PMSG_TEAM_CREATE_XE=1051,
    PMSG_TEAM_MANAGE_TEAM_XE=1052,
    PMSG_ADD_AFFILIATES=1053,
    PMSG_IS_AFFILIATE=1054,
    PMSG_QUERY_AFFILIATES=1055,
    PMSG_GET_PRESENCE_INFO=1056,
    PMSG_PRESENCE_INFO_REPLY=1057,
    PMSG_INVALIDATE_USER=1058,
    PMSG_FIND_USER=1059,
    PMSG_CHECK_TITLE_MESSAGES=1060,
    PMSG_TEAM_LIST_USER_TEAMS=1061,
    PMSG_USER_PRE_MIGRATION=1062,
    PMSG_USER_FULL_MIGRATION=1063,
    PMSG_LOGON_CHECK=1064,
    PMSG_FIND_USERS=1065,
    PMSG_ALIVE_INTERNAL_2=1066,
    PMSG_PEER_SUBSCRIBE_EX=1067,
    PMSG_MAX_REQ_TYPE=1067,
    PMSG_GET_FRIENDS_LIST=1069,
    PMSG_CONTINUATION=1070,
    PMSG_SET_EXTENDED_STATE=1071,
    PMSG_GET_EXTENDED_STATE=1072,
    PMSG_MIN_REPLY_TYPE=1101,
    PMSG_ALIVE_REPLY=1101,
    PMSG_SYNC_REPLY=1102,
    PMSG_WEB_FRIENDS_REPLY=1103,
    PMSG_WEB_ALIVE_REPLY=1104,
    PMSG_PEER_SESSION_REPLY=1105,
    PMSG_INVITE_REPLY=1106,
    PMSG_TEAM_LIST_TEAMS_REPLY=1107,
    PMSG_TEAM_LIST_MEMBERS_REPLY=1108,
    PMSG_TEAM_CREATE_REPLY=1109,
    PMSG_TEAM_DELETE_REPLY=1110,
    PMSG_TEAM_REMOVE_REPLY=1111,
    PMSG_TEAM_MANAGE_TEAM_REPLY=1112,
    PMSG_TEAM_MANAGE_MEMBER_REPLY=1113,
    PMSG_TEAM_RECRUIT_REPLY=1114,
    PMSG_TEAM_JOIN_REPLY=1115,
    PMSG_TEAM_GET_TICKET_REPLY=1116,
    PMSG_PEER_SUBSCRIBE_REPLY=1117,
    PMSG_PEER_UNSUBSCRIBE_REPLY=1118,
    PMSG_GET_STATE_REPLY=1119,
    PMSG_IS_AFFILIATE_REPLY=1120,
    PMSG_QUERY_AFFILIATES_REPLY=1121,
    PMSG_FIND_USER_REPLY=1122,
    PMSG_CHECK_TITLE_MESSAGES_REPLY=1123,
    PMSG_TEAM_LIST_USER_TEAMS_REPLY=1124,
    PMSG_LOGON_CHECK_REPLY=1125,
    PMSG_FIND_USERS_REPLY=1126,
    PMSG_PEER_SUBSCRIBE_EX_REPLY=1127,
    PMSG_MAX_REPLY_TYPE=1127,
    PMSG_GET_FRIENDS_LIST_REPLY=1129,
    PMSG_SET_EXTENDED_STATE_REPLY=1130,
    PMSG_GET_EXTENDED_STATE_REPLY=1131
};

enum _POOL_TYPE
{
    PoolTypeThread=0,
    PoolTypeTitle=1,
    PoolTypeSystem=2,
    PoolTypeTitleDebug=3
};

enum _XCONFIG_XNET_ENTRIES
{
    XCONFIG_XNET_ALL=0,
    XCONFIG_XNET_DATA=1
};

enum _XCONFIG_IPTV_ENTRIES
{
    XCONFIG_IPTV_DATA=0,
    XCONFIG_IPTV_SERVICE_PROVIDER_NAME=1,
    XCONFIG_IPTV_PROVISIONING_SERVER_URL=2,
    XCONFIG_IPTV_SUPPORT_INFO=3,
    XCONFIG_IPTV_BOOTSTRAP_SERVER_URL=4
};

enum _XCONFIG_DVD_ENTRIES
{
    XCONFIG_DVD_ALL=0,
    XCONFIG_DVD_VOLUME_ID=1,
    XCONFIG_DVD_BOOKMARK=2
};

enum _XCONFIG_SYSTEM_ENTRIES
{
    XCONFIG_SYSTEM_ALL=0,
    XCONFIG_SYSTEM_ALARM_TIME=1,
    XCONFIG_SYSTEM_PREVIOUS_FLASH_VERSION=2
};

enum _XEKEYEX_INDEX
{
    XEKEYEX_START=255,
    XEKEYEX_VIDEO_DEVICE_PUBLIC_KEY=256,
    XEKEYEX_VIDEO_DEVICE_PRIVATE_KEY=257,
    XEKEYEX_VIDEO_DEVICE_CERTIFICATE=258,
    XEKEYEX_IPTV_AV_PRIVATE_KEY=259,
    XEKEYEX_IPTV_AUTH_PRIVATE_KEY=260,
    XEKEYEX_IPTV_AV_CERTIFICATE=261,
    XEKEYEX_IPTV_AUTH_CERTIFICATE=262,
    XEKEYEX_IPTV_AV_SERIALIZED_CERTIFICATE=263,
    XEKEYEX_IPTV_AUTH_SERIALIZED_CERTIFICATE=264,
    XEKEYEX_MAX_KEY_INDEX=265,
    XEKEYEX_IPTV_KEY_FIRST=259,
    XEKEYEX_IPTV_KEY_LAST=264,
    XEKEYEX_COUNT=9
};

enum XAM_DEFAULT_IMAGE_ID
{
    XAM_DEFAULT_IMAGE_SYSTEM=0,
    XAM_DEFAULT_IMAGE_DASHICON=1,
    XAM_DEFAULT_IMAGE_ID_COUNT=2
};

enum _XE_RSA_KEY_TYPE
{
    XE_PIRS_RSA_KEY=0,
    XE_LIVEDRM_RSA_KEY=1,
    XE_MAX_RSA_KEY=2
};

enum _RESTRICTED_PRIVILEGE_BIT
{
    RESTRICTED_PRIVILEGE_BIT_REVERT=0,
    RESTRICTED_PRIVILEGE_BIT_INTEGRATION=1,
    RESTRICTED_PRIVILEGE_BIT_CHINA_TRIAL=2,
    RESTRICTED_PRIVILEGE_BIT_XGD2_EXEMPT=3,
    RESTRICTED_PRIVILEGE_BIT_PROFILE=4,
    RESTRICTED_PRIVILEGE_BIT_PREVIEW=5,
    RESTRICTED_PRIVILEGE_BIT_AUTOMATION=6,
    RESTRICTED_PRIVILEGE_BIT_07=7,
    RESTRICTED_PRIVILEGE_BIT_08=8,
    RESTRICTED_PRIVILEGE_BIT_09=9,
    RESTRICTED_PRIVILEGE_BIT_0A=10,
    RESTRICTED_PRIVILEGE_BIT_0B=11,
    RESTRICTED_PRIVILEGE_BIT_0C=12,
    RESTRICTED_PRIVILEGE_BIT_0D=13,
    RESTRICTED_PRIVILEGE_BIT_0E=14,
    RESTRICTED_PRIVILEGE_BIT_0F=15,
    RESTRICTED_PRIVILEGE_BIT_10=16,
    RESTRICTED_PRIVILEGE_BIT_11=17,
    RESTRICTED_PRIVILEGE_BIT_12=18,
    RESTRICTED_PRIVILEGE_BIT_13=19,
    RESTRICTED_PRIVILEGE_BIT_14=20,
    RESTRICTED_PRIVILEGE_BIT_15=21,
    RESTRICTED_PRIVILEGE_BIT_16=22,
    RESTRICTED_PRIVILEGE_BIT_17=23,
    RESTRICTED_PRIVILEGE_BIT_18=24,
    RESTRICTED_PRIVILEGE_BIT_19=25,
    RESTRICTED_PRIVILEGE_BIT_1A=26,
    RESTRICTED_PRIVILEGE_BIT_1B=27,
    RESTRICTED_PRIVILEGE_BIT_1C=28,
    RESTRICTED_PRIVILEGE_BIT_1D=29,
    RESTRICTED_PRIVILEGE_BIT_1E=30,
    RESTRICTED_PRIVILEGE_BIT_1F=31,
    RESTRICTED_PRIVILEGE_BIT_20=32,
    RESTRICTED_PRIVILEGE_BIT_21=33,
    RESTRICTED_PRIVILEGE_BIT_22=34,
    RESTRICTED_PRIVILEGE_BIT_23=35,
    RESTRICTED_PRIVILEGE_BIT_24=36,
    RESTRICTED_PRIVILEGE_BIT_25=37,
    RESTRICTED_PRIVILEGE_BIT_26=38,
    RESTRICTED_PRIVILEGE_BIT_27=39,
    RESTRICTED_PRIVILEGE_BIT_28=40,
    RESTRICTED_PRIVILEGE_BIT_29=41,
    RESTRICTED_PRIVILEGE_BIT_2A=42,
    RESTRICTED_PRIVILEGE_BIT_2B=43,
    RESTRICTED_PRIVILEGE_BIT_2C=44,
    RESTRICTED_PRIVILEGE_BIT_2D=45,
    RESTRICTED_PRIVILEGE_BIT_2E=46,
    RESTRICTED_PRIVILEGE_BIT_2F=47,
    RESTRICTED_PRIVILEGE_BIT_30=48,
    RESTRICTED_PRIVILEGE_BIT_31=49,
    RESTRICTED_PRIVILEGE_BIT_32=50,
    RESTRICTED_PRIVILEGE_BIT_33=51,
    RESTRICTED_PRIVILEGE_BIT_34=52,
    RESTRICTED_PRIVILEGE_BIT_35=53,
    RESTRICTED_PRIVILEGE_BIT_36=54,
    RESTRICTED_PRIVILEGE_BIT_37=55,
    RESTRICTED_PRIVILEGE_BIT_38=56,
    RESTRICTED_PRIVILEGE_BIT_39=57,
    RESTRICTED_PRIVILEGE_BIT_3A=58,
    RESTRICTED_PRIVILEGE_BIT_3B=59,
    RESTRICTED_PRIVILEGE_BIT_3C=60,
    RESTRICTED_PRIVILEGE_BIT_3D=61,
    RESTRICTED_PRIVILEGE_BIT_3E=62,
    RESTRICTED_PRIVILEGE_BIT_3F=63,
    RESTRICTED_PRIVILEGE_BIT_MAXIMUM=64
};

enum _XONLINE_STORE_TYPE
{
    XONLINE_STORE_TYPE_XBOX=1,
    XONLINE_STORE_TYPE_ZUNE=2
};

enum XAMTIMEFORMAT
{
    XAMTIMEFORMAT_HHmm=0,
    XAMTIMEFORMAT_HHmmss=1,
    XAMTIMEFORMAT_Hmmss=2,
    XAMTIMEFORMAT_Hmm=3,
    XAMTIMEFORMAT_hhmmsstt=4,
    XAMTIMEFORMAT_hhmmtt=5,
    XAMTIMEFORMAT_hmmsstt=6,
    XAMTIMEFORMAT_hmmtt=7,
    XAMTIMEFORMAT_tthmmss=8,
    XAMTIMEFORMAT_tthmm=9,
    XAMTIMEFORMAT_tthhmmss=10,
    XAMTIMEFORMAT_tthhmm=11
};

enum _XUSAGE_ATTRIBUTE_TYPE
{
    XUSAGE_ATTRIBUTE_PLAYCOUNT=1,
    XUSAGE_ATTRIBUTE_DOWNLOADCOUNT=2,
    XUSAGE_ATTRIBUTE_PURCHASECOUNT=3,
    XUSAGE_ATTRIBUTE_RATING=4,
    XUSAGE_ATTRIBUTE_STREAMCOUNT=5,
    XUSAGE_ATTRIBUTE_SENDCOUNT=6,
    XUSAGE_ATTRIBUTE_COMMENTCOUNT=7,
    XUSAGE_ATTRIBUTE_SKIPCOUNT=8,
    XUSAGE_ATTRIBUTE_AD_PLAYCOUNT=9,
    XUSAGE_ATTRIBUTE_PERCENTVIEWED=10
};

enum _FSCACHE_PROCESS_TYPE
{
    FsCacheProcessTypeThread=0,
    FsCacheProcessTypeTitle=1,
    FsCacheProcessTypeSystem=2
};

enum XAMDATEFORMAT
{
    XAMDATEFORMAT_dMyyyy=0,
    XAMDATEFORMAT_dMMyyyy=1,
    XAMDATEFORMAT_ddMMyyyy=2,
    XAMDATEFORMAT_Mdyyyy=3,
    XAMDATEFORMAT_yyyyMd=4,
    XAMDATEFORMAT_yyyyMMdd=5,
    XAMDATEFORMAT_MMyy=6
};

enum _XC_PASSKEY
{
    XC_PASSKEY_NONE=0,
    XC_PASSKEY_CODE_X=1,
    XC_PASSKEY_CODE_Y=2,
    XC_PASSKEY_CODE_DPAD_LEFT=3,
    XC_PASSKEY_CODE_DPAD_RIGHT=4,
    XC_PASSKEY_CODE_DPAD_UP=5,
    XC_PASSKEY_CODE_DPAD_DOWN=6,
    XC_PASSKEY_CODE_LTRIGGER=9,
    XC_PASSKEY_CODE_RTRIGGER=10,
    XC_PASSKEY_CODE_LSHOULDER=11,
    XC_PASSKEY_CODE_RSHOULDER=12,
    XC_PASSKEY_CODE_UNKNOWN=255
};

enum P_INVITE_REPLIES
{
    PINVITE_REPLY_NO=0,
    PINVITE_REPLY_YES=1,
    PINVITE_REPLY_NEVER=2
};

enum Q_MSG_TYPES
{
    QMSG_MIN_REQ_TYPE=0,
    QMSG_HELLO=0,
    QMSG_USER_INFO=1,
    QMSG_ADD=2,
    QMSG_DELETE=3,
    QMSG_DELETE_MATCHES=4,
    QMSG_DEAD_XBOX=5,
    QMSG_DEAD_SG=6,
    QMSG_LIST=7,
    QMSG_DEQUEUE=8,
    QMSG_DEAD_USER=9,
    QMSG_WEB_USER_INFO=10,
    QMSG_WEB_PRESENCE=11,
    QMSG_WEB_LIST=12,
    QMSG_ENUM_MESSAGES=13,
    QMSG_MESSAGE_SUMMARY=14,
    QMSG_MESSAGE_DETAILS=15,
    QMSG_DELETE_MESSAGE=16,
    QMSG_SEND_MESSAGE=17,
    QMSG_REVOKE_MESSAGE=18,
    QMSG_DELETE_TITLE=19,
    QMSG_ENUM_TITLES=20,
    QMSG_MESSAGE_FLAGS=21,
    QMSG_ENUM_SYSTEM_MESSAGES=22,
    QMSG_SYSTEM_MESSAGE_DETAILS=23,
    QMSG_DELETE_SYSTEM_MESSAGE=24,
    QMSG_SEND_SYSTEM_MESSAGE=25,
    QMSG_REVOKE_MESSAGE_EX=26,
    QMSG_ENUM_MESSAGES_2=27,
    QMSG_MESSAGE_SUMMARY_2=28,
    QMSG_MAX_REQ_TYPE=28,
    QMSG_MIN_REPLY_TYPE=100,
    QMSG_LIST_REPLY=100,
    QMSG_WEB_LIST_REPLY=101,
    QMSG_ENUM_MESSAGES_REPLY=102,
    QMSG_MESSAGE_SUMMARY_REPLY=103,
    QMSG_MESSAGE_DETAILS_REPLY=104,
    QMSG_DELETE_MESSAGE_REPLY=105,
    QMSG_SEND_MESSAGE_REPLY=106,
    QMSG_REVOKE_MESSAGE_REPLY=107,
    QMSG_DELETE_TITLE_REPLY=108,
    QMSG_ENUM_TITLES_REPLY=109,
    QMSG_MESSAGE_FLAGS_REPLY=110,
    QMSG_ENUM_SYSTEM_MESSAGES_REPLY=111,
    QMSG_SYSTEM_MESSAGE_DETAILS_REPLY=112,
    QMSG_DELETE_SYSTEM_MESSAGE_REPLY=113,
    QMSG_SEND_SYSTEM_MESSAGE_REPLY=114,
    QMSG_ENUM_MESSAGES_2_REPLY=115,
    QMSG_MESSAGE_SUMMARY_2_REPLY=116,
    QMSG_MAX_REPLY_TYPE=116
};

enum _XGI_STATS_ENUMERATOR_TYPE
{
    XGI_STATS_ENUM_BY_XUID=0,
    XGI_STATS_ENUM_BY_RANK=1,
    XGI_STATS_ENUM_BY_RANK_PER_SPEC=2,
    XGI_STATS_ENUM_BY_RATING=3
};

enum _XPROFILE_GAMER_PRESENCE_USER_STATE_VALUE
{
    XPROFILE_GAMER_PRESENCE_USER_STATE_VALUE_ONLINE=0,
    XPROFILE_GAMER_PRESENCE_USER_STATE_VALUE_AWAY=1,
    XPROFILE_GAMER_PRESENCE_USER_STATE_VALUE_BUSY=2,
    XPROFILE_GAMER_PRESENCE_USER_STATE_VALUE_APPEAROFFLINE=3
};

enum _RESTRICTED_PRIVILEGE
{
    RESTRICTED_PRIVILEGE_ANY=0,
    RESTRICTED_PRIVILEGE_NONE=0,
    RESTRICTED_PRIVILEGE_REVERT=1,
    RESTRICTED_PRIVILEGE_INTEGRATION=2,
    RESTRICTED_PRIVILEGE_CHINA_TRIAL=4,
    RESTRICTED_PRIVILEGE_XGD2_EXEMPT=8,
    RESTRICTED_PRIVILEGE_PROFILE=16,
    RESTRICTED_PRIVILEGE_PREVIEW=32,
    RESTRICTED_PRIVILEGE_AUTOMATION=64
};

enum ActionType
{
    EcRunMarketplaceScriptAction=0,
    EcLaunchSystemPackage=1,
    EcInvalid=2
};

enum XMEDIAFORMAT
{
    XMEDIAFORMAT_PCM=0,
    XMEDIAFORMAT_G726=1,
    XMEDIAFORMAT_ULAW=2,
    XMEDIAFORMAT_NCI=3,
    XMEDIAFORMAT_ASAC64=4,
    XMEDIAFORMAT_FORCEDWORD=16777215
};

enum XHUDOPENSTATE
{
    XHUDOPENSTATE_NONE=0,
    XHUDOPENSTATE_HALF=1,
    XHUDOPENSTATE_FULL=2,
    XHUDOPENSTATE_ERROR=3,
    XHUDOPENSTATE_COUNT=4
};

enum _unnamed_1502
{
    RESTRICTED_PRIVILEGES_FLAG_BIT_ENABLE_NONE=0,
    RESTRICTED_PRIVILEGES_FLAG_BIT_ENABLE_SELECTIVE=1,
    RESTRICTED_PRIVILEGES_FLAG_ENABLE_NONE=1,
    RESTRICTED_PRIVILEGES_FLAG_ENABLE_SELECTIVE=2
};

enum StoreEnumeratorErrorType
{
    EsNoError=0,
    EsOutOfMemory=1,
    EsFileNotPresent=2,
    EsXmlInvalidXmlFile=3,
    EsXmlIdMissing=4,
    EsXmlTagMissing=5,
    EsXmlTaxonomyMissingForCountry=6,
    EsStoreMissing=7
};

enum _XSHOWMARKETPLACEUI_PRIVATE_ENTRYPOINTS
{
    XSHOWMARKETPLACEUI_PRIVATE_ENTRYPOINT_ADDPOINTS=6,
    XSHOWMARKETPLACEUI_PRIVATE_ENTRYPOINT_PREPAIDCODE=7,
    XSHOWMARKETPLACEUI_PRIVATE_ENTRYPOINT_FNC=8,
    XSHOWMARKETPLACEUI_PRIVATE_ENTRYPOINT_GAMERTAGPURCHASE=9,
    XSHOWMARKETPLACEUI_PRIVATE_ENTRYPOINT_SIGNUP_CREDITCARD=10,
    XSHOWMARKETPLACEUI_PRIVATE_ENTRYPOINT_SIGNUP_PARENTCREDITCARD=11,
    XSHOWMARKETPLACEUI_PRIVATE_ENTRYPOINT_VIEWQUEUE=12,
    XSHOWMARKETPLACEUI_PRIVATE_ENTRYPOINT_VIEWDOWNLOADDETAILS=13,
    XSHOWMARKETPLACEUI_PRIVATE_ENTRYPOINT_MEDIAITEM=14,
    XSHOWMARKETPLACEUI_PRIVATE_ENTRYPOINT_GOLD_UPSELL=15,
    XSHOWMARKETPLACEUI_PRIVATE_ENTRYPOINT_TERMSOFUSE=16,
    XSHOWMARKETPLACEUI_PRIVATE_ENTRYPOINT_DIRECT_ACQUIRE=17,
    XSHOWMARKETPLACEUI_PRIVATE_ENTRYPOINT_MAX=18
};

enum _XVOICETESTHOOKTYPE
{
    XVOICE_FEED_MICROPHONE=0,
    XVOICE_RECORD_MICROPHONE=1,
    XVOICE_RECORD_HEADSET=2,
    XVOICE_RECORD_NCI_OUT=3,
    XVOICE_RECORD_NCI_IN=4,
    XVOICE_SPOOF_HEADSET_PRESENT=5,
    XVOICE_MAX_HOOK_TYPE=6
};

enum XONLINE_PASSCODE_TYPE
{
    XONLINE_PASSCODE_DPAD_UP=1,
    XONLINE_PASSCODE_DPAD_DOWN=2,
    XONLINE_PASSCODE_DPAD_LEFT=3,
    XONLINE_PASSCODE_DPAD_RIGHT=4,
    XONLINE_PASSCODE_GAMEPAD_X=5,
    XONLINE_PASSCODE_GAMEPAD_Y=6,
    XONLINE_PASSCODE_GAMEPAD_LEFT_TRIGGER=9,
    XONLINE_PASSCODE_GAMEPAD_RIGHT_TRIGGER=10,
    XONLINE_PASSCODE_GAMEPAD_LEFT_SHOULDER=11,
    XONLINE_PASSCODE_GAMEPAD_RIGHT_SHOULDER=12
};

enum _XVOICEHEADSETPRESENT
{
    XVOICE_HEADSET_ABSENT=0,
    XVOICE_HEADSET_PRESENT=1
};

enum _XAMPOWERMODE
{
    XAMPOWERMODE_QUIET=0,
    XAMPOWERMODE_FULL=1
};

enum XONLINE_PARENTAL_CONTROL_GROUP_TYPE
{
    XONLINE_PARENTAL_CONTROL_GROUP_OPEN=0,
    XONLINE_PARENTAL_CONTROL_GROUP_MEDIUM=1,
    XONLINE_PARENTAL_CONTROL_GROUP_RESTRICTED=2
};

enum XONLINE_PAYMENT_INSTRUMENT_TYPE
{
    XONLINE_PAYMENT_INSTRUMENT_NONE=0,
    XONLINE_PAYMENT_INSTRUMENT_CREDIT_CARD=1,
    XONLINE_PAYMENT_INSTRUMENT_DIRECT_DEBIT=2,
    XONLINE_PAYMENT_INSTRUMENT_WHOLESALE=3
};

enum XONLINE_CREDIT_CARD_TYPE
{
    XONLINE_CREDIT_CARD_VISA=0,
    XONLINE_CREDIT_CARD_MASTER_CARD=1,
    XONLINE_CREDIT_CARD_AMEX=2,
    XONLINE_CREDIT_CARD_DISCOVER=3,
    XONLINE_CREDIT_CARD_JCB=4,
    XONLINE_CREDIT_CARD_DINERS=5,
    XONLINE_CREDIT_CARD_KLCC=6
};

enum XONLINE_TIER_TYPE
{
    XONLINE_TIER_INVALID=0,
    XONLINE_TIER_LOWEST=3,
    XONLINE_TIER_BRONZE=3,
    XONLINE_TIER_SILVER=6
};

enum XONLINE_SUBSCRIPTION_STATUS_TYPE
{
    XONLINE_SUBSCRIPTION_PENDING=0,
    XONLINE_SUBSCRIPTION_ENABLED=1,
    XONLINE_SUBSCRIPTION_SUSPENDED=2,
    XONLINE_SUBSCRIPTION_EXPIRED=3,
    XONLINE_SUBSCRIPTION_CANCELED=4,
    XONLINE_SUBSCRIPTION_EXPIRED_NO_VIOLATIONS=128
};

enum _STAGING_MODE
{
    STAGING_MODE_PRODUCTION=0,
    STAGING_MODE_STAGING=1
};

enum XONLINE_GENRE_TYPE
{
    XONLINE_GENRE_BASE=0,
    XONLINE_GENRE_XARCADE=116000000
};

enum XONLINE_DMP_STATUS_TYPE
{
    XONLINE_DMP_STATUS_ACTIVE=0,
    XONLINE_DMP_STATUS_DISABLED=1,
    XONLINE_DMP_STATUS_CLOSED=2
};

enum XONLINE_GET_POINTS_BALANCE_RESPONSE_FLAGS
{
    XONLINE_GET_POINTS_BALANCE_RESPONSE_ABOVE_LOW_BALANCE=1
};

enum XONLINE_GET_POINTS_BALANCE_DETAILS_RESPONSE_FLAGS
{
    XONLINE_GET_POINTS_BALANCE_DETAILS_RESPONSE_ABOVE_LOW_BALANCE=1
};

enum XONLINE_OFFERING_TYPE
{
    XONLINE_OFFERING_TYPE_SUBSCRIPTION=1,
    XONLINE_OFFERING_TYPE_CONTENT=2,
    XONLINE_OFFERING_TYPE_RENEWAL=4,
    XONLINE_OFFERING_TYPE_POINTS_BUNDLE=8,
    XONLINE_OFFERING_TYPE_GAMERTAG_CHANGE=16,
    XONLINE_OFFERING_TYPE_GAME_DEMO=32,
    XONLINE_OFFERING_TYPE_GAME_TRAILER=64,
    XONLINE_OFFERING_TYPE_THEME=128,
    XONLINE_OFFERING_TYPE_GAMEPLAY=256,
    XONLINE_OFFERING_TYPE_FULL_GAME=512,
    XONLINE_OFFERING_TYPE_PROMO_POINTS=1024,
    XONLINE_OFFERING_TYPE_TILE=2048,
    XONLINE_OFFERING_TYPE_ARCADE=8192,
    XONLINE_OFFERING_TYPE_VIDEO=16384,
    XONLINE_OFFERING_TYPE_MUSICNETMTV=32768,
    XONLINE_OFFERING_TYPE_CONSUMABLE=65536,
    XONLINE_OFFERING_TYPE_SYNCCASTWMIS=131072
};

enum XONLINE_TAX_TYPE
{
    XONLINE_TAX_TYPE_NO_TAX=0,
    XONLINE_TAX_TYPE_DEFAULT=1,
    XONLINE_TAX_TYPE_GST=2,
    XONLINE_TAX_TYPE_VAT=3,
    XONLINE_TAX_TYPE_NOT_APPLICABLE=4
};

enum XONLINE_OFFERING_FREQUENCY
{
    XONLINE_OFFERING_FREQUENCY_ONE_TIME_CHARGE=0,
    XONLINE_OFFERING_FREQUENCY_MONTHLY=1,
    XONLINE_OFFERING_FREQUENCY_QUARTERLY=2,
    XONLINE_OFFERING_FREQUENCY_BIANNUALLY=3,
    XONLINE_OFFERING_FREQUENCY_ANNUALLY=4
};

enum XONLINE_OFFERING_RELATION
{
    XONLINE_OFFERING_RELATION_NONE=1,
    XONLINE_OFFERING_RELATION_BASE=0,
    XONLINE_OFFERING_RELATION_RENEWAL=3
};

enum XONLINE_PAYMENT_TYPE
{
    XONLINE_PAYMENT_TYPE_CREDIT_CARD=1,
    XONLINE_PAYMENT_TYPE_TOKEN=2,
    XONLINE_PAYMENT_TYPE_POINTS=4,
    XONLINE_PAYMENT_TYPE_WHOLESALE=8
};

enum XONLINE_CONTENT_ENUMERATE_FLAGS
{
    XONLINE_CONTENT_ENUMERATE_USER_PLAYED_GAME_FILTER=1,
    XONLINE_CONTENT_ENUMERATE_USER_HAS_PURCHASED_FILTER=2,
    XONLINE_CONTENT_ENUMERATE_NEW_CONTENT_ONLY_FILTER=4
};

enum _XONLINECONTENT_RESUME_STATE
{
    XONLINECONTENT_RESUME_STATE_FILE_HEADERS_NOT_READY=1179208776,
    XONLINECONTENT_RESUME_STATE_NEW_FOLDER=1718578276,
    XONLINECONTENT_RESUME_STATE_NEW_FOLDER_RESUME_ATTEMPT_2=1718578226,
    XONLINECONTENT_RESUME_STATE_NEW_FOLDER_RESUME_ATTEMPT_3=1718578227,
    XONLINECONTENT_RESUME_STATE_NEW_FOLDER_RESUME_ATTEMPT_4=1718578228,
    XONLINECONTENT_RESUME_STATE_NEW_FOLDER_RESUME_ATTEMPT_5=1718578229,
    XONLINECONTENT_RESUME_STATE_NEW_FOLDER_RESUME_ATTEMPT_6=1718578230,
    XONLINECONTENT_RESUME_STATE_NEW_FOLDER_RESUME_ATTEMPT_7=1718578231,
    XONLINECONTENT_RESUME_STATE_NEW_FOLDER_RESUME_ATTEMPT_8=1718578232,
    XONLINECONTENT_RESUME_STATE_NEW_FOLDER_RESUME_ATTEMPT_9=1718578233,
    XONLINECONTENT_RESUME_STATE_NEW_FOLDER_RESUME_ATTEMPT_10=1718578234,
    XONLINECONTENT_RESUME_STATE_NEW_FOLDER_RESUME_ATTEMPT_11=1718578235,
    XONLINECONTENT_RESUME_STATE_NEW_FOLDER_RESUME_ATTEMPT_12=1718578236,
    XONLINECONTENT_RESUME_STATE_NEW_FOLDER_RESUME_ATTEMPT_13=1718578237,
    XONLINECONTENT_RESUME_STATE_NEW_FOLDER_RESUME_ATTEMPT_14=1718578238,
    XONLINECONTENT_RESUME_STATE_NEW_FOLDER_RESUME_ATTEMPT_15=1718578239,
    XONLINECONTENT_RESUME_STATE_NEW_FOLDER_RESUME_ATTEMPT_16=1718578240,
    XONLINECONTENT_RESUME_STATE_LEGACY_NEW_FOLDER=1179601988,
    XONLINECONTENT_RESUME_STATE_LEGACY_NEW_FOLDER_ATTEMPT_2=1179601970,
    XONLINECONTENT_RESUME_STATE_LEGACY_NEW_FOLDER_ATTEMPT_3=1179601971
};

enum XONLINE_BASIC_CONTENT_INFO_FLAGS
{
    XONLINE_BASIC_CONTENT_INFO_USER_HAS_PURCHASED=1,
    XONLINE_BASIC_CONTENT_INFO_USER_HAS_VIEWED=2,
    XONLINE_BASIC_CONTENT_INFO_IS_UNRESTRICTED=4,
    XONLINE_BASIC_CONTENT_INFO_IS_RECENT_CONTENT=8
};

enum XONLINE_SUBSCRIPTION_ENUMERATE_FLAGS
{
    XONLINE_SUBSCRIPTION_QUERY_FOR_NEW=1,
    XONLINE_SUBSCRIPTION_QUERY_FOR_RENEWALS=2,
    XONLINE_SUBSCRIPTION_QUERY_FOR_CURRENT=4,
    XONLINE_SUBSCRIPTION_QUERY_FOR_EXPIRED=8,
    XONLINE_SUBSCRIPTION_QUERY_FOR_SUSPENDED=16
};

enum XONLINE_BASIC_SUBSCRIPTION_INFO_FLAGS
{
    XONLINE_BASIC_CONTENT_INFO_USER_IS_SUBSCRIBED=1
};

enum XONLINE_SUBSCRIPTION_CONVERT_MODE
{
    XONLINE_SUBSCRIPTION_CONVERT_MODE_CONVERT=0,
    XONLINE_SUBSCRIPTION_CONVERT_MODE_RENEW=1,
    XONLINE_SUBSCRIPTION_CONVERT_MODE_INVALID=2
};

enum XONLINE_TITLE_ENUMERATE_FLAGS
{
    XONLINE_TITLE_QUERY_FOR_NEW=1,
    XONLINE_TITLE_QUERY_FOR_PLAYED=2
};

enum XONLINE_MEDIA_URL_TYPE
{
    XONLINE_MEDIA_URL_TYPE_VIDEO=1,
    XONLINE_MEDIA_URL_TYPE_VIDEOCHAPTER=2,
    XONLINE_MEDIA_URL_TYPE_SAMI=3,
    XONLINE_MEDIA_URL_TYPE_IMAGE=4,
    XONLINE_MEDIA_URL_TYPE_MUSIC=5,
    XONLINE_MEDIA_URL_TYPE_GAMECONTENT=6
};

enum XONLINE_VIDEO_TYPE
{
    XONLINE_VIDEO_TYPE_MOVIE=1,
    XONLINE_VIDEO_TYPE_TVSHOW=2,
    XONLINE_VIDEO_TYPE_MUSICVIDEO=4,
    XONLINE_VIDEO_TYPE_VIRALCLIP=32,
    XONLINE_VIDEO_TYPE_TVEPISODE=64
};

enum XONLINE_VIDEO_QUALITY
{
    XONLINE_VIDEO_QUALITY_HD=1,
    XONLINE_VIDEO_QUALITY_SD=2
};

union _KUSER_MODE_PTE// Size=0x4 (Id=1534)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long PageProtection:2;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x2
        unsigned long NoExecute:1;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x1
        unsigned long Guarded:1;// Offset=0x0 Size=0x4 BitOffset=0x3 BitSize=0x1
        unsigned long MemoryCoherency:1;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x1
        unsigned long InhibitCache:1;// Offset=0x0 Size=0x4 BitOffset=0x5 BitSize=0x1
        unsigned long WriteThrough:1;// Offset=0x0 Size=0x4 BitOffset=0x6 BitSize=0x1
        unsigned long Dirty:1;// Offset=0x0 Size=0x4 BitOffset=0x7 BitSize=0x1
        unsigned long Accessed:1;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x1
        unsigned long Reserved:3;// Offset=0x0 Size=0x4 BitOffset=0x9 BitSize=0x3
        unsigned long PageFrameNumber:20;// Offset=0x0 Size=0x4 BitOffset=0xc BitSize=0x14
    };
    unsigned long AsULONG;// Offset=0x0 Size=0x4
};

struct _EX_THREAD_REGISTRATION// Size=0x10 (Id=1535)
{
    void  ( * NotificationRoutine)(struct _EX_THREAD_REGISTRATION * ,struct _KTHREAD * ,unsigned long );// Offset=0x0 Size=0x4
    long Priority;// Offset=0x4 Size=0x4
    struct _LIST_ENTRY ListEntry;// Offset=0x8 Size=0x8
};

struct _LDRX_PLUGIN// Size=0x8 (Id=1536)
{
    unsigned long Format;// Offset=0x0 Size=0x4
    long  ( * LoadFunction)(unsigned char * ,struct _LDRX_SOURCE * ,struct _LDRX_SOURCE * );// Offset=0x4 Size=0x4
};

struct _AP25_AUTHENTICATION_OUTPUT// Size=0x4 (Id=1537)
{
    unsigned long Result;// Offset=0x0 Size=0x4
};

struct _GENERIC_LIST_MODIFY_ITEMS_RESPONSE// Size=0x8 (Id=1538)
{
    struct _FILETIME ftLastModified;// Offset=0x0 Size=0x8
};

struct _UNICODE_STRING// Size=0x8 (Id=1539)
{
    unsigned short Length;// Offset=0x0 Size=0x2
    unsigned short MaximumLength;// Offset=0x2 Size=0x2
    unsigned short * Buffer;// Offset=0x4 Size=0x4
};

struct IDirectXFileObjectVtbl// Size=0x14 (Id=1540)
{
    HRESULT  ( * QueryInterface)(struct IDirectXFileObject * ,const struct _GUID * ,void ** );// Offset=0x0 Size=0x4
    unsigned long  ( * AddRef)(struct IDirectXFileObject * );// Offset=0x4 Size=0x4
    unsigned long  ( * Release)(struct IDirectXFileObject * );// Offset=0x8 Size=0x4
    HRESULT  ( * GetName)(struct IDirectXFileObject * ,char * ,unsigned long * );// Offset=0xc Size=0x4
    HRESULT  ( * GetId)(struct IDirectXFileObject * ,struct _GUID * );// Offset=0x10 Size=0x4
};

struct _SGADDR// Size=0x14 (Id=1541)
{
    struct in_addr inaSg;// Offset=0x0 Size=0x4
    unsigned long dwSpiSg;// Offset=0x4 Size=0x4
    unsigned long long qwXboxID;// Offset=0x8 Size=0x8
    unsigned char abReserved[4];// Offset=0x10 Size=0x4
};

struct _unnamed_1542// Size=0x10 (Id=1542)
{
    void * hMem;// Offset=0x0 Size=0x4
    unsigned long dwReserved[3];// Offset=0x4 Size=0xc
};

struct _unnamed_1543// Size=0x10 (Id=1543)
{
    unsigned long dwCommittedSize;// Offset=0x0 Size=0x4
    unsigned long dwUnCommittedSize;// Offset=0x4 Size=0x4
    void * lpFirstBlock;// Offset=0x8 Size=0x4
    void * lpLastBlock;// Offset=0xc Size=0x4
};

struct _PROCESS_HEAP_ENTRY// Size=0x1c (Id=1544)
{
    void * lpData;// Offset=0x0 Size=0x4
    unsigned long cbData;// Offset=0x4 Size=0x4
    unsigned char cbOverhead;// Offset=0x8 Size=0x1
    unsigned char iRegionIndex;// Offset=0x9 Size=0x1
    unsigned short wFlags;// Offset=0xa Size=0x2
    union // Size=0x10 (Id=0)
    {
        struct _unnamed_1542 Block;// Offset=0xc Size=0x10
        struct _unnamed_1543 Region;// Offset=0xc Size=0x10
    };
};

struct D3DXCOLOR// Size=0x10 (Id=1545)
{
    float r;// Offset=0x0 Size=0x4
    float g;// Offset=0x4 Size=0x4
    float b;// Offset=0x8 Size=0x4
    float a;// Offset=0xc Size=0x4
};

struct _XENUMERATEPARAM// Size=0x20 (Id=1546)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long dwFlags;// Offset=0x4 Size=0x4
    void * pvPrivateEnumStructure;// Offset=0x8 Size=0x4
    void * pvBuffer;// Offset=0xc Size=0x4
    unsigned long cbBuffer;// Offset=0x10 Size=0x4
    unsigned long cItemsRequested;// Offset=0x14 Size=0x4
    unsigned long * pcItemsReturned;// Offset=0x18 Size=0x4
    struct _XOVERLAPPED * pxoverlapped;// Offset=0x1c Size=0x4
};

struct _XPARTY_GET_JOINABLE_PARAMS// Size=0x4 (Id=1547)
{
    enum _XPARTY_JOIN_TYPE * pJoinable;// Offset=0x0 Size=0x4
};

struct _DUMP_BASIC_SERVICES// Size=0x1c (Id=1548)
{
    unsigned long  ( * GetHardwareThreadContext)(unsigned long ,struct _CONTEXT * );// Offset=0x0 Size=0x4
    void  ( * ResetGetHardwareThreadContext)(<btNoType> );// Offset=0x4 Size=0x4
    unsigned long  ( * GetImagePageTableEntry)(unsigned long );// Offset=0x8 Size=0x4
    void  ( * CollectBucketData)(unsigned char * ,struct _EXCEPTION_RECORD * ,struct _CONTEXT * ,unsigned long );// Offset=0xc Size=0x4
    void  ( * InitProgressBar)(unsigned long );// Offset=0x10 Size=0x4
    void  ( * IncrementProgressBar)(<btNoType> );// Offset=0x14 Size=0x4
    void  ( * DbgPrintf)(char * ,<btNoType> );// Offset=0x18 Size=0x4
};

struct _DM_ODD_SPINDLE_SPEED_CHANGE_DATA// Size=0xc (Id=1549)
{
    unsigned long CurrentSpeed;// Offset=0x0 Size=0x4
    unsigned long TargetSpeed;// Offset=0x4 Size=0x4
    long Status;// Offset=0x8 Size=0x4
};

struct _DM_INPUT_BIND_AUTOMATION// Size=0x8 (Id=1550)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    int fBind;// Offset=0x4 Size=0x4
};

struct _PASSPORT_GET_SECRET_QUESTION_RESPONSE// Size=0x6 (Id=1551)
{
    unsigned short wSecretQuestionsCount;// Offset=0x0 Size=0x2
    struct _PASSPORT_SECRET_QUESTION * pSecretQuestions;// Offset=0x2 Size=0x4
};

struct _PURCHASE_OFFERS_REQUEST// Size=0x2c (Id=1552)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned long long qwMachineId;// Offset=0x8 Size=0x8
    unsigned long dwOfferCount;// Offset=0x10 Size=0x4
    struct _PURCHASE_OFFER_PRICE * pOffers;// Offset=0x14 Size=0x4
    unsigned long dwPaymentType;// Offset=0x18 Size=0x4
    unsigned short wPaymentInstrumentId;// Offset=0x1c Size=0x2
    unsigned short * wszPaymentInstrumentId;// Offset=0x1e Size=0x4
    unsigned short wTokenLength;// Offset=0x22 Size=0x2
    unsigned short * wszToken;// Offset=0x24 Size=0x4
    unsigned long dwStore;// Offset=0x28 Size=0x4
};

struct _GENERIC_LIST_QUERY_LISTS_RESPONSE// Size=0x8 (Id=1553)
{
    unsigned short wTotalLists;// Offset=0x0 Size=0x2
    unsigned short wNumLists;// Offset=0x2 Size=0x2
    struct _GENERIC_LIST_INFO * pLists;// Offset=0x4 Size=0x4
};

struct _CERTIFICATE_REVOCATION_DATA// Size=0xc (Id=1554)
{
    unsigned long Size;// Offset=0x0 Size=0x4
    unsigned long Version;// Offset=0x4 Size=0x4
    unsigned long Count;// Offset=0x8 Size=0x4
};

struct XGI_SESSIONSEARCHBYID_MSG// Size=0x14 (Id=1555)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    struct XNKID sessionID;// Offset=0x4 Size=0x8
    unsigned long cbResultsBuffer;// Offset=0xc Size=0x4
    struct _XSESSION_SEARCHRESULT_HEADER * pSearchResults;// Offset=0x10 Size=0x4
};

struct _XMSG_SUMMARY_REQUEST// Size=0x6c (Id=1556)
{
    unsigned long long XuidUser;// Offset=0x0 Size=0x8
    unsigned long dwMessageID;// Offset=0x8 Size=0x4
    struct _XMSG_SUMMARY pMsgSummary[1];// Offset=0xc Size=0x60
};

struct _currencyfmtA// Size=0x20 (Id=1557)
{
    unsigned int NumDigits;// Offset=0x0 Size=0x4
    unsigned int LeadingZero;// Offset=0x4 Size=0x4
    unsigned int Grouping;// Offset=0x8 Size=0x4
    char * lpDecimalSep;// Offset=0xc Size=0x4
    char * lpThousandSep;// Offset=0x10 Size=0x4
    unsigned int NegativeOrder;// Offset=0x14 Size=0x4
    unsigned int PositiveOrder;// Offset=0x18 Size=0x4
    char * lpCurrencySymbol;// Offset=0x1c Size=0x4
};

struct _CREATE_LIVE_ACCOUNT_REQUEST// Size=0xfd (Id=1558)
{
    unsigned long long qwMachineId;// Offset=0x0 Size=0x8
    unsigned long long qwOfflineXuid;// Offset=0x8 Size=0x8
    unsigned long dwTitleId;// Offset=0x10 Size=0x4
    unsigned short wFirstNameLength;// Offset=0x14 Size=0x2
    unsigned short * wszFirstName;// Offset=0x16 Size=0x4
    unsigned short wLastNameLength;// Offset=0x1a Size=0x2
    unsigned short * wszLastName;// Offset=0x1c Size=0x4
    unsigned short wGamertagLength;// Offset=0x20 Size=0x2
    unsigned short * wszGamertag;// Offset=0x22 Size=0x4
    unsigned char abSignedUserPassportPuid[28];// Offset=0x26 Size=0x1c
    unsigned char abSignedOwnerPassportPuid[28];// Offset=0x42 Size=0x1c
    unsigned long long qwOfferId;// Offset=0x5e Size=0x8
    unsigned short wBillingTokenLength;// Offset=0x66 Size=0x2
    unsigned short * wszBillingToken;// Offset=0x68 Size=0x4
    struct _FILETIME ftBirthdate;// Offset=0x6c Size=0x8
    unsigned short wEmailLength;// Offset=0x74 Size=0x2
    unsigned short * wszEmail;// Offset=0x76 Size=0x4
    unsigned short wLanguageId;// Offset=0x7a Size=0x2
    unsigned char bCountryId;// Offset=0x7c Size=0x1
    unsigned long dwParentalControlGroupId;// Offset=0x7d Size=0x4
    unsigned char bMsftOptIn;// Offset=0x81 Size=0x1
    unsigned char bPartnerOptIn;// Offset=0x82 Size=0x1
    struct _ADDRESS_INFO address;// Offset=0x83 Size=0x24
    struct _PHONE_INFO phone;// Offset=0xa7 Size=0x12
    unsigned char bPaymentTypeId;// Offset=0xb9 Size=0x1
    struct _CREDIT_CARD_INFO creditCard;// Offset=0xba Size=0x1b
    struct _DIRECT_DEBIT_INFO directDebit;// Offset=0xd5 Size=0x1e
    unsigned short wReservedBytesLength;// Offset=0xf3 Size=0x2
    unsigned char * pbReservedBytes;// Offset=0xf5 Size=0x4
    struct _CREATE_LIVE_ACCOUNT_RESPONSE * pResponse;// Offset=0xf9 Size=0x4
};

struct _INGAME_OFFER_PRICE// Size=0xe (Id=1559)
{
    unsigned long dwPaymentType;// Offset=0x0 Size=0x4
    unsigned long dwPrice;// Offset=0x4 Size=0x4
    unsigned short wPriceTextLength;// Offset=0x8 Size=0x2
    unsigned short * wszPriceText;// Offset=0xa Size=0x4
};

struct _P_TEAM_LIST_TEAMS_MSG// Size=0x38 (Id=1560)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwUserID;// Offset=0x20 Size=0x8
    unsigned long dwTitleID;// Offset=0x28 Size=0x4
    unsigned long dwTeamCount;// Offset=0x2c Size=0x4
    unsigned long long * rgqwTeamIDs;// Offset=0x30 Size=0x4
    struct _TEAM_ENUM_RESULTS * pvResults;// Offset=0x34 Size=0x4
};

struct LIVEBASE_CONTENTAVAILABLE_MSG// Size=0x10 (Id=1561)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long dwTitleId;// Offset=0x4 Size=0x4
    unsigned long dwContentCategories;// Offset=0x8 Size=0x4
    struct _XOFFERING_CONTENTAVAILABLE_RESULT * pResults;// Offset=0xc Size=0x4
};

struct _XRESOLVE_NAME_RESPONSE// Size=0x1a (Id=1562)
{
    struct _XSTORAGE_ENDPOINT StorageEndpoint;// Offset=0x0 Size=0xc
    struct _FILETIME ftExpiration;// Offset=0xc Size=0x8
    struct _XRESOLVE_DOMAIN_STRING ResolveDomainStringRule;// Offset=0x14 Size=0x6
};

struct _XONLINE_REQUEST_THROTTLE_SETTINGS// Size=0x8 (Id=1563)
{
    unsigned long dwThrottleDelayMs;// Offset=0x0 Size=0x4
    unsigned long dwThrottleFlags;// Offset=0x4 Size=0x4
};

struct _XCONTENT_DATA_INTERNAL// Size=0x200 (Id=1564)
{
    unsigned long DeviceID;// Offset=0x0 Size=0x4
    unsigned long dwContentType;// Offset=0x4 Size=0x4
    wchar_t szDisplayName[128];// Offset=0x8 Size=0x100
    char szFileName[42];// Offset=0x108 Size=0x2a
    unsigned char __align0[6];// Offset=0x132 Size=0x6
    unsigned long long xuid;// Offset=0x138 Size=0x8
    unsigned long dwTitleId;// Offset=0x140 Size=0x4
    unsigned long dwLicenseMask;// Offset=0x144 Size=0x4
    unsigned long long ullContentSize;// Offset=0x148 Size=0x8
    struct _FILETIME ftCreationTime;// Offset=0x150 Size=0x8
    wchar_t szTitleName[64];// Offset=0x158 Size=0x80
    unsigned char rgSeriesId[16];// Offset=0x1d8 Size=0x10
    unsigned char rgSeasonId[16];// Offset=0x1e8 Size=0x10
    unsigned short wSeasonNumber;// Offset=0x1f8 Size=0x2
    struct // Size=0x2 (Id=0)
    {
        unsigned short wEpisodeNumber:14;// Offset=0x1fa Size=0x2 BitOffset=0x2 BitSize=0xe
        unsigned short fCorrupt:1;// Offset=0x1fa Size=0x2 BitOffset=0x1 BitSize=0x1
        unsigned short fPartial:1;// Offset=0x1fa Size=0x2 BitOffset=0x0 BitSize=0x1
    };
};

struct _XMBYTE4// Size=0x4 (Id=1565)
{
    union // Size=0x4 (Id=0)
    {
        char x;// Offset=0x0 Size=0x1
        char y;// Offset=0x1 Size=0x1
        char z;// Offset=0x2 Size=0x1
        char w;// Offset=0x3 Size=0x1
        unsigned int v;// Offset=0x0 Size=0x4
    };
};

struct _XACTIVATION_TITLE_LICENSE_INFO// Size=0x8 (Id=1566)
{
    unsigned long dwTitleId;// Offset=0x0 Size=0x4
    unsigned long dwLicenseFlags;// Offset=0x4 Size=0x4
};

struct _LICENSEE_BITS// Size=0x8 (Id=1567)
{
    struct // Size=0x8 (Id=0)
    {
        unsigned long long Type:16;// Offset=0x0 Size=0x8 BitOffset=0x30 BitSize=0x10
        unsigned long long Data:48;// Offset=0x0 Size=0x8 BitOffset=0x0 BitSize=0x30
    };
};

struct _XPARTY_SEND_INVITE_PARAMS// Size=0x538 (Id=1568)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned char __align0[4];// Offset=0x4 Size=0x4
    unsigned long long XuidRecipients[100];// Offset=0x8 Size=0x320
    unsigned int cRecipients;// Offset=0x328 Size=0x4
    wchar_t szText[256];// Offset=0x32c Size=0x200
    struct _XPARTY_CREATE_PARAMS InternalCreateParams;// Offset=0x52c Size=0x8
};

struct _XSHOWFIRSTRUNWELCOMEUI_PARAMS// Size=0xc (Id=1569)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    enum HUDSCENE eHudType;// Offset=0x4 Size=0x4
    struct _XOVERLAPPED * pOverlapped;// Offset=0x8 Size=0x4
};

struct _DISK_GEOMETRY// Size=0x8 (Id=1570)
{
    unsigned long Sectors;// Offset=0x0 Size=0x4
    unsigned long BytesPerSector;// Offset=0x4 Size=0x4
};

struct CREATE_OWNER_ACCT_RESPONSE// Size=0x44 (Id=1571)
{
    unsigned long long qwUserID;// Offset=0x0 Size=0x8
    unsigned char rgbKey[16];// Offset=0x8 Size=0x10
    char szDomain[20];// Offset=0x18 Size=0x14
    char szRealm[24];// Offset=0x2c Size=0x18
};

struct _CONTENT_DETAILS_REQUEST// Size=0x1b (Id=1572)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned char bCountryId;// Offset=0x8 Size=0x1
    unsigned short wLanguageId;// Offset=0x9 Size=0x2
    unsigned short cOfferIDs;// Offset=0xb Size=0x2
    unsigned long long * pOfferIDs;// Offset=0xd Size=0x4
    unsigned long dwPaymentType;// Offset=0x11 Size=0x4
    unsigned char bTierRequired;// Offset=0x15 Size=0x1
    unsigned char bRatingSystem;// Offset=0x16 Size=0x1
    struct _CONTENT_DETAILS_RESPONSE * pResults;// Offset=0x17 Size=0x4
};

struct _XSHOWQUICKCHATUI_PARAMS// Size=0xc (Id=1573)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long dwFlags;// Offset=0x4 Size=0x4
    unsigned long dwSessionID;// Offset=0x8 Size=0x4
};

struct _KUSER_MODE_PAGE// Size=0x1000 (Id=1574)
{
    struct _KUSER_MODE_PDE PdeArray4KB[512];// Offset=0x0 Size=0x400
    union _KUSER_MODE_PTE PteArray16MB[256];// Offset=0x400 Size=0x400
    struct _KUSER_MODE_PDE PdeArray64KB[32];// Offset=0x800 Size=0x40
    union _KUSER_MODE_SLB SlbArray[16];// Offset=0x840 Size=0x10
    unsigned long Reserved[12];// Offset=0x850 Size=0x30
    unsigned long FlushCount;// Offset=0x880 Size=0x4
    unsigned long FlushArray[415];// Offset=0x884 Size=0x67c
    unsigned long long LookupsPerSegment[16];// Offset=0xf00 Size=0x80
    unsigned long long MissesPerSegment[16];// Offset=0xf80 Size=0x80
};

struct _P_TEAM_REMOVE_MSG// Size=0x3c (Id=1575)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwUserID;// Offset=0x20 Size=0x8
    unsigned long dwTitleID;// Offset=0x28 Size=0x4
    unsigned long long qwTeamID;// Offset=0x2c Size=0x8
    unsigned long long qwMemberID;// Offset=0x34 Size=0x8
};

union _SMC_MAILBOX_MESSAGE// Size=0x0 (Id=1576)
{
};

struct _HAL_SMC_REGISTRATION// Size=0x10 (Id=1577)
{
    void  ( * NotificationRoutine)(struct _HAL_SMC_REGISTRATION * ,union _SMC_MAILBOX_MESSAGE * );// Offset=0x0 Size=0x4
    long Priority;// Offset=0x4 Size=0x4
    struct _LIST_ENTRY ListEntry;// Offset=0x8 Size=0x8
};

struct D3DVertexDeclaration// Size=0x18 (Id=1578)
{
    unsigned long Common;// Offset=0x0 Size=0x4
    unsigned long ReferenceCount;// Offset=0x4 Size=0x4
    unsigned long Fence;// Offset=0x8 Size=0x4
    unsigned long ReadFence;// Offset=0xc Size=0x4
    unsigned long Identifier;// Offset=0x10 Size=0x4
    unsigned long BaseFlush;// Offset=0x14 Size=0x4
};

struct XECRYPT_DES3_STATE// Size=0x180 (Id=1579)
{
    struct XECRYPT_DES_STATE aDesState[3];// Offset=0x0 Size=0x180
};

struct _XMSG_DETAILS_GET_SUMMARY// Size=0x106c (Id=1580)
{
    struct _XMSG_DETAILS_BLOB pDetails[1];// Offset=0x0 Size=0x1000
    struct _XMSG_SUMMARY pMsgSummary[1];// Offset=0x1000 Size=0x60
    unsigned long pcProperties[1];// Offset=0x1060 Size=0x4
    unsigned long long pqwAttachmentsSize[1];// Offset=0x1064 Size=0x8
};

struct XGI_READSTRINGS_MSG// Size=0x18 (Id=1581)
{
    unsigned long dwTitleId;// Offset=0x0 Size=0x4
    unsigned long dwUserIndex;// Offset=0x4 Size=0x4
    unsigned long dwNumStrings;// Offset=0x8 Size=0x4
    struct _STRING_WITH_HRESULT * pStrings;// Offset=0xc Size=0x4
    unsigned long cchStringBuffer;// Offset=0x10 Size=0x4
    unsigned short * pwszStringBuffer;// Offset=0x14 Size=0x4
};

struct XECRYPT_SHA256_STATE// Size=0x64 (Id=1582)
{
    unsigned long count;// Offset=0x0 Size=0x4
    unsigned long state[8];// Offset=0x4 Size=0x20
    unsigned char buffer[64];// Offset=0x24 Size=0x40
};

struct _GET_PAYMENT_INSTRUMENTS_RESPONSE// Size=0x6 (Id=1583)
{
    unsigned short wCount;// Offset=0x0 Size=0x2
    struct _PAYMENT_INSTRUMENT_INFO * pPaymentInstruments;// Offset=0x2 Size=0x4
};

struct _INGAME_CONTENT_INFO// Size=0x5a (Id=1584)
{
    unsigned long long qwOfferID;// Offset=0x0 Size=0x8
    unsigned short wOfferNameLength;// Offset=0x8 Size=0x2
    unsigned short * wszOfferName;// Offset=0xa Size=0x4
    unsigned long dwOfferType;// Offset=0xe Size=0x4
    unsigned char contentId[20];// Offset=0x12 Size=0x14
    unsigned long dwLicenseMask;// Offset=0x26 Size=0x4
    unsigned long dwTitleID;// Offset=0x2a Size=0x4
    unsigned long dwTitleCategory;// Offset=0x2e Size=0x4
    unsigned short wTitleNameLength;// Offset=0x32 Size=0x2
    unsigned short * wszTitleName;// Offset=0x34 Size=0x4
    unsigned char bTierRequired;// Offset=0x38 Size=0x1
    unsigned short wEmsGameRating;// Offset=0x39 Size=0x2
    unsigned short wResponseFlags;// Offset=0x3b Size=0x2
    unsigned long dwPackageSize;// Offset=0x3d Size=0x4
    unsigned long dwInstallSize;// Offset=0x41 Size=0x4
    unsigned long dwSellTextLength;// Offset=0x45 Size=0x4
    unsigned short * wszSellText;// Offset=0x49 Size=0x4
    unsigned long dwAssetID;// Offset=0x4d Size=0x4
    unsigned long dwPurchaseQuantity;// Offset=0x51 Size=0x4
    unsigned char bPricesLength;// Offset=0x55 Size=0x1
    struct _INGAME_OFFER_PRICE * pPrices;// Offset=0x56 Size=0x4
};

struct _P_FIND_USER_MSG// Size=0x44 (Id=1585)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwUserID;// Offset=0x20 Size=0x8
    unsigned long long qwFindID;// Offset=0x28 Size=0x8
    char szSenderName[16];// Offset=0x30 Size=0x10
    struct _P_FIND_USER_REPLY_MSG * pResults;// Offset=0x40 Size=0x4
};

struct ID3DXBufferVtbl// Size=0x14 (Id=1586)
{
    HRESULT  ( * QueryInterface)(struct ID3DXBuffer * ,const struct _GUID * ,void ** );// Offset=0x0 Size=0x4
    unsigned long  ( * AddRef)(struct ID3DXBuffer * );// Offset=0x4 Size=0x4
    unsigned long  ( * Release)(struct ID3DXBuffer * );// Offset=0x8 Size=0x4
    void *  ( * GetBufferPointer)(struct ID3DXBuffer * );// Offset=0xc Size=0x4
    unsigned long  ( * GetBufferSize)(struct ID3DXBuffer * );// Offset=0x10 Size=0x4
};

struct _HVSTATS// Size=0x1b18 (Id=1587)
{
    struct _HVSTATS_CORE Core[3];// Offset=0x0 Size=0x1b18
};

struct _HVSTATS_TLB// Size=0x480 (Id=1588)
{
    unsigned long LoadsPerRow[256];// Offset=0x0 Size=0x400
    unsigned long LoadsPerSegment[16];// Offset=0x400 Size=0x40
    unsigned long InvalPerSegment[16];// Offset=0x440 Size=0x40
};

struct _XMARKETPLACE_QUERY_PARAMS// Size=0x1898 (Id=1589)
{
    unsigned long long xuid;// Offset=0x0 Size=0x8
    wchar_t pszQuery[64];// Offset=0x8 Size=0x80
    wchar_t pszParams[2048];// Offset=0x88 Size=0x1000
    wchar_t pszProps[1024];// Offset=0x1088 Size=0x800
    unsigned long dwPageNumber;// Offset=0x1888 Size=0x4
    unsigned long dwPageSize;// Offset=0x188c Size=0x4
    struct _XMARKETPLACE_QUERY_RESULTS * pQueryResults;// Offset=0x1890 Size=0x4
};

struct _XSTORAGE_DOWNLOAD_REQUEST// Size=0x4d (Id=1590)
{
    struct _XSTORAGE_ACCESS_TOKEN pStorageAccessToken[1];// Offset=0x0 Size=0x1c
    struct _XSTORAGE_PATH_STRING pStoragePathString[1];// Offset=0x1c Size=0x6
    struct _XSTORAGE_ACCESS_TOKEN_READ pStorageAccessTokenRead[1];// Offset=0x22 Size=0xe
    unsigned long dwTitleId;// Offset=0x30 Size=0x4
    unsigned long dwTitleVersion;// Offset=0x34 Size=0x4
    unsigned char bCountryId;// Offset=0x38 Size=0x1
    unsigned long dwRangeStart;// Offset=0x39 Size=0x4
    unsigned long dwRangeEnd;// Offset=0x3d Size=0x4
    struct _FILETIME pftLastModified[1];// Offset=0x41 Size=0x8
    struct _XSTORAGE_DOWNLOAD_RESPONSE * pResponse;// Offset=0x49 Size=0x4
};

struct _GENERIC_LIST_INFO// Size=0x1f (Id=1591)
{
    unsigned long nListType;// Offset=0x0 Size=0x4
    unsigned long nListId;// Offset=0x4 Size=0x4
    struct _FILETIME ftLastModified;// Offset=0x8 Size=0x8
    unsigned long nTotalItems;// Offset=0x10 Size=0x4
    unsigned char bNameLength;// Offset=0x14 Size=0x1
    unsigned short wXmlLength;// Offset=0x15 Size=0x2
    unsigned short * szName;// Offset=0x17 Size=0x4
    unsigned short * XmlProperties;// Offset=0x1b Size=0x4
};

struct _KINTERRUPT// Size=0x14 (Id=1592)
{
    void  ( * ServiceRoutine)(struct _KINTERRUPT * ,void * );// Offset=0x0 Size=0x4
    void * ServiceContext;// Offset=0x4 Size=0x4
    unsigned long SpinLock;// Offset=0x8 Size=0x4
    unsigned long ServiceCount;// Offset=0xc Size=0x4
    unsigned char BusIrql;// Offset=0x10 Size=0x1
    unsigned char Irql;// Offset=0x11 Size=0x1
    struct // Size=0x1 (Id=0)
    {
        unsigned char Mode:7;// Offset=0x12 Size=0x1 BitOffset=0x0 BitSize=0x7
        unsigned char Connected:1;// Offset=0x12 Size=0x1 BitOffset=0x7 BitSize=0x1
    };
    unsigned char TargetNumber;// Offset=0x13 Size=0x1
};

struct _XBOX_HARDWARE_INFO// Size=0x10 (Id=1593)
{
    unsigned long Flags;// Offset=0x0 Size=0x4
    unsigned char NumberOfProcessors;// Offset=0x4 Size=0x1
    unsigned char PCIBridgeRevisionID;// Offset=0x5 Size=0x1
    unsigned char Reserved[6];// Offset=0x6 Size=0x6
    unsigned short BldrMagic;// Offset=0xc Size=0x2
    unsigned short BldrFlags;// Offset=0xe Size=0x2
};

struct _CDROM_SEEK_AUDIO_MSF// Size=0x3 (Id=1594)
{
    unsigned char M;// Offset=0x0 Size=0x1
    unsigned char S;// Offset=0x1 Size=0x1
    unsigned char F;// Offset=0x2 Size=0x1
};

struct _XFRIENDS_REQUEST_BY_NAME_PARAMS// Size=0x1c (Id=1595)
{
    unsigned long long XuidFromUser;// Offset=0x0 Size=0x8
    unsigned long long qwBuddyID;// Offset=0x8 Size=0x8
    unsigned long dwUserNameSize;// Offset=0x10 Size=0x4
    char * szUserName;// Offset=0x14 Size=0x4
    void * hMsg;// Offset=0x18 Size=0x4
};

struct _ACCOUNT_VERIFY_BILLING_INFO_REQUEST// Size=0x36 (Id=1596)
{
    unsigned long long qwMachineId;// Offset=0x0 Size=0x8
    unsigned short wGamertagLength;// Offset=0x8 Size=0x2
    unsigned short * wszGamertag;// Offset=0xa Size=0x4
    struct _PHONE_INFO phone;// Offset=0xe Size=0x12
    unsigned short wPostalCodeLength;// Offset=0x20 Size=0x2
    unsigned short * wszPostalCode;// Offset=0x22 Size=0x4
    unsigned short wAccountHolderNameLength;// Offset=0x26 Size=0x2
    unsigned short * wszAccountHolderName;// Offset=0x28 Size=0x4
    unsigned short wAccountNumberLength;// Offset=0x2c Size=0x2
    unsigned short * wszAccountNumber;// Offset=0x2e Size=0x4
    struct _ACCOUNT_VERIFY_BILLING_INFO_RESPONSE * pResponse;// Offset=0x32 Size=0x4
};

struct _XONLINE_QUERY_ATTRIBUTE_BLOB// Size=0x8 (Id=1597)
{
    unsigned long Length;// Offset=0x0 Size=0x4
    unsigned char * pbValue;// Offset=0x4 Size=0x4
};

struct _XPROFILE_SYNC_TITLES_REQUEST// Size=0x1e (Id=1598)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned short wLocaleId;// Offset=0x8 Size=0x2
    unsigned short wStartingIndex;// Offset=0xa Size=0x2
    struct _FILETIME ftLastSync;// Offset=0xc Size=0x8
    unsigned short wNumTitles;// Offset=0x14 Size=0x2
    struct _XPROFILE_TITLE * pTitles;// Offset=0x16 Size=0x4
    struct _XPROFILE_SYNC_TITLES_RESULT * pResults;// Offset=0x1a Size=0x4
};

struct _XMHALF4// Size=0x8 (Id=1599)
{
    unsigned short x;// Offset=0x0 Size=0x2
    unsigned short y;// Offset=0x2 Size=0x2
    unsigned short z;// Offset=0x4 Size=0x2
    unsigned short w;// Offset=0x6 Size=0x2
};

struct D3DBaseTexture// Size=0x34 (Id=1600)
{
    unsigned long Common;// Offset=0x0 Size=0x4
    unsigned long ReferenceCount;// Offset=0x4 Size=0x4
    unsigned long Fence;// Offset=0x8 Size=0x4
    unsigned long ReadFence;// Offset=0xc Size=0x4
    unsigned long Identifier;// Offset=0x10 Size=0x4
    unsigned long BaseFlush;// Offset=0x14 Size=0x4
    unsigned long MipFlush;// Offset=0x18 Size=0x4
    union GPUTEXTURE_FETCH_CONSTANT Format;// Offset=0x1c Size=0x18
};

struct _XMUDHEN3// Size=0x4 (Id=1601)
{
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            unsigned int x:10;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xa
            unsigned int y:11;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0xb
            unsigned int z:11;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0xb
        };
        unsigned int v;// Offset=0x0 Size=0x4
    };
};

struct _P_QUERY_AFFILIATES_MSG// Size=0x38 (Id=1602)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwUserID;// Offset=0x20 Size=0x8
    unsigned long dwListFlags;// Offset=0x28 Size=0x4
    unsigned long cdwLimit;// Offset=0x2c Size=0x4
    unsigned long dwOnlineTitleID;// Offset=0x30 Size=0x4
    struct _P_QUERY_AFFILIATES_REPLY_MSG * pReply;// Offset=0x34 Size=0x4
};

struct _XMDHEN3// Size=0x4 (Id=1603)
{
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            int x:10;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xa
            int y:11;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0xb
            int z:11;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0xb
        };
        unsigned int v;// Offset=0x0 Size=0x4
    };
};

struct _XMUDEC4// Size=0x4 (Id=1604)
{
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            unsigned int x:10;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xa
            unsigned int y:10;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0xa
            unsigned int z:10;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0xa
            unsigned int w:2;// Offset=0x0 Size=0x4 BitOffset=0x1e BitSize=0x2
        };
        unsigned int v;// Offset=0x0 Size=0x4
    };
};

struct _XPROFILE_ENUM_ACHIEVEMENTS_REQUEST// Size=0x1e (Id=1605)
{
    unsigned long dwTitleId;// Offset=0x0 Size=0x4
    unsigned long long qwUserId;// Offset=0x4 Size=0x8
    unsigned long long qwForPuid;// Offset=0xc Size=0x8
    unsigned short wLocaleId;// Offset=0x14 Size=0x2
    unsigned short wStartingIndex;// Offset=0x16 Size=0x2
    unsigned short wMaxAchievements;// Offset=0x18 Size=0x2
    struct _XPROFILE_ENUM_ACHIEVEMENTS_RESULT * pResult;// Offset=0x1a Size=0x4
};

struct _unnamed_1606// Size=0x8 (Id=1606)
{
    unsigned long Settable;// Offset=0x0 Size=0x4
    unsigned long Tag;// Offset=0x4 Size=0x4
};

struct _unnamed_1607// Size=0x8 (Id=1607)
{
    unsigned long CommittedSize;// Offset=0x0 Size=0x4
    void * FirstBlock;// Offset=0x4 Size=0x4
};

union _unnamed_1608// Size=0x8 (Id=1608)
{
    struct _unnamed_1606 s1;// Offset=0x0 Size=0x8
    struct _unnamed_1607 s2;// Offset=0x0 Size=0x8
};

struct _RTL_HEAP_ENTRY// Size=0x10 (Id=1609)
{
    unsigned long Size;// Offset=0x0 Size=0x4
    unsigned short Flags;// Offset=0x4 Size=0x2
    unsigned short AllocatorBackTraceIndex;// Offset=0x6 Size=0x2
    union _unnamed_1608 u;// Offset=0x8 Size=0x8
};

struct _FB_GET_AGG_REVIEWS_RESPONSE// Size=0xc (Id=1610)
{
    unsigned long hr;// Offset=0x0 Size=0x4
    unsigned long cAggReviews;// Offset=0x4 Size=0x4
    struct _FB_AGGREGATE_REVIEW * pAggReviews;// Offset=0x8 Size=0x4
};

struct _KMUTANT// Size=0x20 (Id=1611)
{
    struct _DISPATCHER_HEADER Header;// Offset=0x0 Size=0x10
    struct _LIST_ENTRY MutantListEntry;// Offset=0x10 Size=0x8
    struct _KTHREAD * OwnerThread;// Offset=0x18 Size=0x4
    unsigned char Abandoned;// Offset=0x1c Size=0x1
};

struct XUSER_EXTENDED_STATE// Size=0x3c (Id=1612)
{
    struct XUSER_PARTY_STATE partyState;// Offset=0x0 Size=0x3c
};

struct _XHTTP_REQUEST_DOWNLOAD_TO_FILE_PARAMS// Size=0x71e (Id=1613)
{
    struct _XHTTP_REQUEST pRequest[1];// Offset=0x0 Size=0x70a
    unsigned long cbRequestData;// Offset=0x70a Size=0x4
    unsigned long dwRequestDataPointer;// Offset=0x70e Size=0x4
    unsigned long dwOutputFilePathSize;// Offset=0x712 Size=0x4
    char * szOutputFilePath;// Offset=0x716 Size=0x4
    struct _XHTTP_REQUEST_RESPONSE * pResults;// Offset=0x71a Size=0x4
};

struct _XCONFIG_SECURED_SETTINGS// Size=0x200 (Id=1614)
{
    unsigned long CheckSum;// Offset=0x0 Size=0x4
    unsigned long Version;// Offset=0x4 Size=0x4
    char OnlineNetworkID[4];// Offset=0x8 Size=0x4
    char Reserved1[8];// Offset=0xc Size=0x8
    char Reserved2[12];// Offset=0x14 Size=0xc
    unsigned char MACAddress[6];// Offset=0x20 Size=0x6
    char Reserved3[2];// Offset=0x26 Size=0x2
    unsigned long AVRegion;// Offset=0x28 Size=0x4
    unsigned short GameRegion;// Offset=0x2c Size=0x2
    char Reserved4[6];// Offset=0x2e Size=0x6
    unsigned long DVDRegion;// Offset=0x34 Size=0x4
    unsigned long ResetKey;// Offset=0x38 Size=0x4
    unsigned long SystemFlags;// Offset=0x3c Size=0x4
    struct _XCONFIG_POWER_MODE PowerMode;// Offset=0x40 Size=0x2
    struct _XCONFIG_POWER_VCS_CONTROL PowerVcsControl;// Offset=0x42 Size=0x2
    char ReservedRegion[444];// Offset=0x44 Size=0x1bc
};

struct _KEVENT// Size=0x10 (Id=1615)
{
    struct _DISPATCHER_HEADER Header;// Offset=0x0 Size=0x10
};

struct _XMUDHENN3// Size=0x4 (Id=1616)
{
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            unsigned int x:10;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xa
            unsigned int y:11;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0xb
            unsigned int z:11;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0xb
        };
        unsigned int v;// Offset=0x0 Size=0x4
    };
};

struct _CONTENT_ENUMERATE_RESPONSE// Size=0xa (Id=1617)
{
    unsigned short wOffersReturned;// Offset=0x0 Size=0x2
    struct _BASIC_CONTENT_INFO * pInfos;// Offset=0x2 Size=0x4
    unsigned long dwOffersTotal;// Offset=0x6 Size=0x4
};

struct _StoreEnumError// Size=0x804 (Id=1618)
{
    enum StoreEnumeratorErrorType eErrorType;// Offset=0x0 Size=0x4
    wchar_t wszErrorStr[1024];// Offset=0x4 Size=0x800
};

struct _XPARTY_MEMBER_INFO// Size=0x20 (Id=1619)
{
    unsigned long long Xuid;// Offset=0x0 Size=0x8
    unsigned long dwFlags;// Offset=0x8 Size=0x4
    char GamerTag[16];// Offset=0xc Size=0x10
};

struct _XPARTY_SET_TEST_FLAGS_PARAMS// Size=0x4 (Id=1620)
{
    unsigned long dwTestFlags;// Offset=0x0 Size=0x4
};

struct _DUMP_MEDIA_SERVICES// Size=0x1c (Id=1621)
{
    long  ( * OpenMedia)(<btNoType> );// Offset=0x0 Size=0x4
    long  ( * WriteMedia)(unsigned long ,unsigned char * ,unsigned long ,unsigned long );// Offset=0x4 Size=0x4
    long  ( * ReadMedia)(unsigned long ,unsigned char * ,unsigned long ,unsigned long );// Offset=0x8 Size=0x4
    long  ( * WriteMediaPhysical)(unsigned long ,unsigned long ,unsigned long );// Offset=0xc Size=0x4
    long  ( * CloseMedia)(<btNoType> );// Offset=0x10 Size=0x4
    unsigned long MediaSize;// Offset=0x14 Size=0x4
    unsigned char Location;// Offset=0x18 Size=0x1
};

struct _DMGD// Size=0x20 (Id=1622)
{
    unsigned long Size;// Offset=0x0 Size=0x4
    unsigned long * pdwProfileFlags;// Offset=0x4 Size=0x4
    unsigned long * pdwLastProfileResult;// Offset=0x8 Size=0x4
    void * pfnStartProfiling;// Offset=0xc Size=0x4
    void * pfnStopProfiling;// Offset=0x10 Size=0x4
    unsigned long * pdwOpcode;// Offset=0x14 Size=0x4
    unsigned long * FrameCounter;// Offset=0x18 Size=0x4
    unsigned long * FrameTicks;// Offset=0x1c Size=0x4
};

struct ID3DXFileSaveDataVtbl// Size=0x24 (Id=1623)
{
    HRESULT  ( * QueryInterface)(struct ID3DXFileSaveData * ,const struct _GUID * ,void ** );// Offset=0x0 Size=0x4
    unsigned long  ( * AddRef)(struct ID3DXFileSaveData * );// Offset=0x4 Size=0x4
    unsigned long  ( * Release)(struct ID3DXFileSaveData * );// Offset=0x8 Size=0x4
    HRESULT  ( * GetSave)(struct ID3DXFileSaveData * ,struct ID3DXFileSaveObject ** );// Offset=0xc Size=0x4
    HRESULT  ( * GetName)(struct ID3DXFileSaveData * ,char * ,unsigned long * );// Offset=0x10 Size=0x4
    HRESULT  ( * GetId)(struct ID3DXFileSaveData * ,struct _GUID * );// Offset=0x14 Size=0x4
    HRESULT  ( * GetType)(struct ID3DXFileSaveData * ,struct _GUID * );// Offset=0x18 Size=0x4
    HRESULT  ( * AddDataObject)(struct ID3DXFileSaveData * ,const struct _GUID * ,char * ,struct _GUID * ,unsigned long ,void * ,struct ID3DXFileSaveData ** );// Offset=0x1c Size=0x4
    HRESULT  ( * AddDataReference)(struct ID3DXFileSaveData * ,char * ,struct _GUID * );// Offset=0x20 Size=0x4
};

union _LICENSEE// Size=0x8 (Id=1624)
{
    struct _LICENSEE_BITS Bits;// Offset=0x0 Size=0x8
    unsigned long long AsULONGLONG;// Offset=0x0 Size=0x8
};

struct _P_ALIVE_2_MSG_INTERNAL// Size=0x98 (Id=1625)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwUserID;// Offset=0x20 Size=0x8
    unsigned short cbAcctName;// Offset=0x28 Size=0x2
    struct XNADDR xnaddr;// Offset=0x2a Size=0x24
    struct XNKID xnkid;// Offset=0x4e Size=0x8
    struct XNKEY xnkey;// Offset=0x56 Size=0x10
    unsigned long dwBuddyListVersion;// Offset=0x66 Size=0x4
    unsigned long dwBlockListVersion;// Offset=0x6a Size=0x4
    unsigned short wMajorVersion;// Offset=0x6e Size=0x2
    unsigned short wMinorVersion;// Offset=0x70 Size=0x2
    unsigned short wBuildNumber;// Offset=0x72 Size=0x2
    unsigned short wQFENumber;// Offset=0x74 Size=0x2
    unsigned long dwTitleID;// Offset=0x76 Size=0x4
    unsigned long dwTitleVersion;// Offset=0x7a Size=0x4
    unsigned long dwTitleRegion;// Offset=0x7e Size=0x4
    unsigned short ipportI;// Offset=0x82 Size=0x2
    struct in_addr ipaI;// Offset=0x84 Size=0x4
    unsigned long long liNonce;// Offset=0x88 Size=0x8
    unsigned long long liTimeInit;// Offset=0x90 Size=0x8
};

struct _XRESOLVE_NAME_REQUEST// Size=0xa (Id=1626)
{
    struct _XRESOLVE_DOMAIN_STRING pResolveString[1];// Offset=0x0 Size=0x6
    struct _XRESOLVE_NAME_RESPONSE * pResponse;// Offset=0x6 Size=0x4
};

struct _XCONFIG_PLAYTIMERDATA// Size=0x14 (Id=1627)
{
    union _ULARGE_INTEGER uliResetDate;// Offset=0x0 Size=0x8
    unsigned long dwPlayTimerFrequency;// Offset=0x8 Size=0x4
    unsigned long dwTotalPlayTime;// Offset=0xc Size=0x4
    unsigned long dwRemainingPlayTime;// Offset=0x10 Size=0x4
};

struct _KTIMER// Size=0x28 (Id=1628)
{
    struct _DISPATCHER_HEADER Header;// Offset=0x0 Size=0x10
    union _ULARGE_INTEGER DueTime;// Offset=0x10 Size=0x8
    struct _LIST_ENTRY TimerListEntry;// Offset=0x18 Size=0x8
    struct _KDPC * Dpc;// Offset=0x20 Size=0x4
    long Period;// Offset=0x24 Size=0x4
};

struct _XCONFIG_TIMEZONE_DATE// Size=0x4 (Id=1629)
{
    unsigned char Month;// Offset=0x0 Size=0x1
    unsigned char Day;// Offset=0x1 Size=0x1
    unsigned char DayOfWeek;// Offset=0x2 Size=0x1
    unsigned char Hour;// Offset=0x3 Size=0x1
};

struct _DOWNLOAD_QUEUE_INSERT_ITEMS_RESPONSE// Size=0x8 (Id=1630)
{
    struct _FILETIME ftLastModified;// Offset=0x0 Size=0x8
};

struct _unnamed_1631// Size=0x4 (Id=1631)
{
    unsigned short Linenumber;// Offset=0x0 Size=0x2
    unsigned short Size;// Offset=0x2 Size=0x2
};

union _unnamed_1632// Size=0x4 (Id=1632)
{
    struct _unnamed_1631 LnSz;// Offset=0x0 Size=0x4
    unsigned long TotalSize;// Offset=0x0 Size=0x4
};

struct _unnamed_1633// Size=0x8 (Id=1633)
{
    unsigned long PointerToLinenumber;// Offset=0x0 Size=0x4
    unsigned long PointerToNextFunction;// Offset=0x4 Size=0x4
};

struct _unnamed_1634// Size=0x8 (Id=1634)
{
    unsigned short Dimension[4];// Offset=0x0 Size=0x8
};

union _unnamed_1635// Size=0x8 (Id=1635)
{
    struct _unnamed_1633 Function;// Offset=0x0 Size=0x8
    struct _unnamed_1634 Array;// Offset=0x0 Size=0x8
};

struct _unnamed_1636// Size=0x12 (Id=1636)
{
    unsigned long TagIndex;// Offset=0x0 Size=0x4
    union _unnamed_1632 Misc;// Offset=0x4 Size=0x4
    union _unnamed_1635 FcnAry;// Offset=0x8 Size=0x8
    unsigned short TvIndex;// Offset=0x10 Size=0x2
};

struct _unnamed_1637// Size=0x12 (Id=1637)
{
    unsigned char Name[18];// Offset=0x0 Size=0x12
};

struct _unnamed_1638// Size=0x10 (Id=1638)
{
    unsigned long Length;// Offset=0x0 Size=0x4
    unsigned short NumberOfRelocations;// Offset=0x4 Size=0x2
    unsigned short NumberOfLinenumbers;// Offset=0x6 Size=0x2
    unsigned long CheckSum;// Offset=0x8 Size=0x4
    short Number;// Offset=0xc Size=0x2
    unsigned char Selection;// Offset=0xe Size=0x1
};

union _IMAGE_AUX_SYMBOL// Size=0x12 (Id=1639)
{
    union // Size=0x12 (Id=0)
    {
        struct _unnamed_1636 Sym;// Offset=0x0 Size=0x12
        struct _unnamed_1637 File;// Offset=0x0 Size=0x12
        struct _unnamed_1638 Section;// Offset=0x0 Size=0x10
    };
};

struct _XMSHORT4// Size=0x8 (Id=1640)
{
    short x;// Offset=0x0 Size=0x2
    short y;// Offset=0x2 Size=0x2
    short z;// Offset=0x4 Size=0x2
    short w;// Offset=0x6 Size=0x2
};

struct ID3DXAnimationCallbackHandler// Size=0x4 (Id=1641)
{
    struct ID3DXAnimationCallbackHandlerVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct XMVECTORU8// Size=0x10 (Id=1642)
{
    union // Size=0x10 (Id=0)
    {
        unsigned char u[16];// Offset=0x0 Size=0x10
        struct __vector4 v;// Offset=0x0 Size=0x10
    };
};

struct _XMHENDN3// Size=0x4 (Id=1643)
{
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            int x:11;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xb
            int y:11;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0xb
            int z:10;// Offset=0x0 Size=0x4 BitOffset=0x16 BitSize=0xa
        };
        unsigned int v;// Offset=0x0 Size=0x4
    };
};

struct _cpinfoexA// Size=0x11c (Id=1644)
{
    unsigned int MaxCharSize;// Offset=0x0 Size=0x4
    unsigned char DefaultChar[2];// Offset=0x4 Size=0x2
    unsigned char LeadByte[12];// Offset=0x6 Size=0xc
    wchar_t UnicodeDefaultChar;// Offset=0x12 Size=0x2
    unsigned int CodePage;// Offset=0x14 Size=0x4
    char CodePageName[260];// Offset=0x18 Size=0x104
};

struct _XMSG_DETAILS// Size=0xc (Id=1645)
{
    unsigned short wPropCount;// Offset=0x0 Size=0x2
    unsigned short cbData;// Offset=0x2 Size=0x2
    struct _XMSG_PROPERTY * rgProperties;// Offset=0x4 Size=0x4
    unsigned char * rgbData;// Offset=0x8 Size=0x4
};

struct _FB_PLAYER_REVIEW// Size=0x28 (Id=1646)
{
    unsigned long long qwSenderID;// Offset=0x0 Size=0x8
    unsigned long long qwTargetID;// Offset=0x8 Size=0x8
    unsigned long dwTitleID;// Offset=0x10 Size=0x4
    unsigned long dwType;// Offset=0x14 Size=0x4
    unsigned long long qwContext;// Offset=0x18 Size=0x8
    unsigned long long ftSubmitted;// Offset=0x20 Size=0x8
};

struct _KDPC// Size=0x1c (Id=1647)
{
    short Type;// Offset=0x0 Size=0x2
    unsigned char InsertedNumber;// Offset=0x2 Size=0x1
    unsigned char TargetNumber;// Offset=0x3 Size=0x1
    struct _LIST_ENTRY DpcListEntry;// Offset=0x4 Size=0x8
    void  ( * DeferredRoutine)(struct _KDPC * ,void * ,void * ,void * );// Offset=0xc Size=0x4
    void * DeferredContext;// Offset=0x10 Size=0x4
    void * SystemArgument1;// Offset=0x14 Size=0x4
    void * SystemArgument2;// Offset=0x18 Size=0x4
};

struct _DMDRIVE// Size=0x24 (Id=1648)
{
    unsigned char Drive[32];// Offset=0x0 Size=0x20
    unsigned char * Path;// Offset=0x20 Size=0x4
};

struct _XVIRTUALKBDUI_PARAMS// Size=0x24 (Id=1649)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long cchResultText;// Offset=0x4 Size=0x4
    unsigned long dwFlags;// Offset=0x8 Size=0x4
    unsigned long dwSessionID;// Offset=0xc Size=0x4
    wchar_t * pDefaultText;// Offset=0x10 Size=0x4
    wchar_t * pTitleText;// Offset=0x14 Size=0x4
    wchar_t * pDescriptionText;// Offset=0x18 Size=0x4
    unsigned short * pResultText;// Offset=0x1c Size=0x4
    struct _XOVERLAPPED * pOverlapped;// Offset=0x20 Size=0x4
};

struct _KDEVICE_QUEUE// Size=0x10 (Id=1650)
{
    short Type;// Offset=0x0 Size=0x2
    unsigned char Padding;// Offset=0x2 Size=0x1
    unsigned char Busy;// Offset=0x3 Size=0x1
    unsigned long Lock;// Offset=0x4 Size=0x4
    struct _LIST_ENTRY DeviceListHead;// Offset=0x8 Size=0x8
};

struct _XWMDRM_CREATE_CERTIFICATE_REQUEST// Size=0x30 (Id=1651)
{
    unsigned long dwFlags;// Offset=0x0 Size=0x4
    struct _XWMDRM_CERTIFICATE_PUBLIC_KEY pPubKey[1];// Offset=0x4 Size=0x28
    struct _XWMDRM_CREATE_CERTIFICATE_REPLY * pResponse;// Offset=0x2c Size=0x4
};

struct _XIPTVDVR_PARAMS// Size=0xc (Id=1652)
{
    int fRecording;// Offset=0x0 Size=0x4
    unsigned long dwTotalStorageMB;// Offset=0x4 Size=0x4
    unsigned long dwUsedStorageMB;// Offset=0x8 Size=0x4
};

struct _P_PRESENCE_ITEM// Size=0x24 (Id=1653)
{
    unsigned long long qwBuddyID;// Offset=0x0 Size=0x8
    unsigned long dwTitleID;// Offset=0x8 Size=0x4
    unsigned long dwState;// Offset=0xc Size=0x4
    struct XNKID MatchSessionID;// Offset=0x10 Size=0x8
    unsigned short cbNickname;// Offset=0x18 Size=0x2
    unsigned short cbTitleStuff;// Offset=0x1a Size=0x2
    unsigned char * rgbNickName;// Offset=0x1c Size=0x4
    unsigned char * rgbTitleStuff;// Offset=0x20 Size=0x4
};

struct _HAL_BKGD_MODE_REGISTRATION// Size=0x10 (Id=1654)
{
    void  ( * NotificationRoutine)(struct _HAL_BKGD_MODE_REGISTRATION * );// Offset=0x0 Size=0x4
    long Priority;// Offset=0x4 Size=0x4
    struct _LIST_ENTRY ListEntry;// Offset=0x8 Size=0x8
};

struct _XMXICO4// Size=0x8 (Id=1655)
{
    union // Size=0x8 (Id=0)
    {
        struct // Size=0x8 (Id=0)
        {
            long long x:20;// Offset=0x0 Size=0x8 BitOffset=0x0 BitSize=0x14
            long long y:20;// Offset=0x0 Size=0x8 BitOffset=0x14 BitSize=0x14
            long long z:20;// Offset=0x0 Size=0x8 BitOffset=0x28 BitSize=0x14
            unsigned long long w:4;// Offset=0x0 Size=0x8 BitOffset=0x3c BitSize=0x4
        };
        unsigned long long v;// Offset=0x0 Size=0x8
    };
};

struct _XUSER_PLAYERLIST_ITEM// Size=0x28 (Id=1656)
{
    unsigned long long xuidUser;// Offset=0x0 Size=0x8
    unsigned long dwFlags;// Offset=0x8 Size=0x4
    unsigned long dwTitleID;// Offset=0xc Size=0x4
    unsigned long dwRating;// Offset=0x10 Size=0x4
    char szGamertag[16];// Offset=0x14 Size=0x10
};

struct _OFFER_PURCHASE_GAMERTAG_RESPONSE// Size=0x5 (Id=1657)
{
    unsigned char bNewKeyLength;// Offset=0x0 Size=0x1
    unsigned char * pbNewKey;// Offset=0x1 Size=0x4
};

struct _DMTD// Size=0x38 (Id=1658)
{
    unsigned long Reserved;// Offset=0x0 Size=0x4
    void * WinSockData;// Offset=0x4 Size=0x4
    struct _EXCEPTION_RECORD * ExceptionRecord;// Offset=0x8 Size=0x4
    struct _CONTEXT * ExceptionContext;// Offset=0xc Size=0x4
    unsigned long DebugFlags;// Offset=0x10 Size=0x4
    void * FuncCallData;// Offset=0x14 Size=0x4
    unsigned long UserData;// Offset=0x18 Size=0x4
    struct _KEVENT * DebugEvent;// Offset=0x1c Size=0x4
    char * ThreadName;// Offset=0x20 Size=0x4
    struct _KEVENT DebugEventData;// Offset=0x24 Size=0x10
    unsigned long Frozen;// Offset=0x34 Size=0x4
};

struct _currencyfmtW// Size=0x20 (Id=1659)
{
    unsigned int NumDigits;// Offset=0x0 Size=0x4
    unsigned int LeadingZero;// Offset=0x4 Size=0x4
    unsigned int Grouping;// Offset=0x8 Size=0x4
    unsigned short * lpDecimalSep;// Offset=0xc Size=0x4
    unsigned short * lpThousandSep;// Offset=0x10 Size=0x4
    unsigned int NegativeOrder;// Offset=0x14 Size=0x4
    unsigned int PositiveOrder;// Offset=0x18 Size=0x4
    unsigned short * lpCurrencySymbol;// Offset=0x1c Size=0x4
};

struct _XLIVEHIVE_CONFIG_PAIRS_FRAGMENT// Size=0x6 (Id=1660)
{
    unsigned short uConfigPairsLen;// Offset=0x0 Size=0x2
    unsigned char * szConfigPairsFrag;// Offset=0x2 Size=0x4
};

struct _SUBSCRIPTION_ENUMERATE_REQUEST// Size=0x34 (Id=1661)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned long long qwMachineId;// Offset=0x8 Size=0x8
    unsigned char bUserTier;// Offset=0x10 Size=0x1
    unsigned char bCountryId;// Offset=0x11 Size=0x1
    unsigned short wLanguageId;// Offset=0x12 Size=0x2
    unsigned short wGameRating;// Offset=0x14 Size=0x2
    unsigned long dwOfferType;// Offset=0x16 Size=0x4
    unsigned long dwPaymentType;// Offset=0x1a Size=0x4
    unsigned long dwTitleId;// Offset=0x1e Size=0x4
    unsigned long dwTitleCategories;// Offset=0x22 Size=0x4
    unsigned short wRequestFlags;// Offset=0x26 Size=0x2
    unsigned long dwStartingIndex;// Offset=0x28 Size=0x4
    unsigned long dwMaxResults;// Offset=0x2c Size=0x4
    struct _SUBSCRIPTION_ENUMERATE_RESPONSE * pResults;// Offset=0x30 Size=0x4
};

struct _XMMATRIX// Size=0x40 (Id=1662)
{
    union // Size=0x40 (Id=0)
    {
        struct __vector4 r[4];// Offset=0x0 Size=0x40
        float _11;// Offset=0x0 Size=0x4
        float _12;// Offset=0x4 Size=0x4
        float _13;// Offset=0x8 Size=0x4
        float _14;// Offset=0xc Size=0x4
        float _21;// Offset=0x10 Size=0x4
        float _22;// Offset=0x14 Size=0x4
        float _23;// Offset=0x18 Size=0x4
        float _24;// Offset=0x1c Size=0x4
        float _31;// Offset=0x20 Size=0x4
        float _32;// Offset=0x24 Size=0x4
        float _33;// Offset=0x28 Size=0x4
        float _34;// Offset=0x2c Size=0x4
        float _41;// Offset=0x30 Size=0x4
        float _42;// Offset=0x34 Size=0x4
        float _43;// Offset=0x38 Size=0x4
        float _44;// Offset=0x3c Size=0x4
        float m[4][4];// Offset=0x0 Size=0x40
    };
};

struct _XMFLOAT4// Size=0x10 (Id=1663)
{
    float x;// Offset=0x0 Size=0x4
    float y;// Offset=0x4 Size=0x4
    float z;// Offset=0x8 Size=0x4
    float w;// Offset=0xc Size=0x4
};

struct _XPRESENCE_SYNC_SUB_RESULT// Size=0x24 (Id=1664)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned long dwState;// Offset=0x8 Size=0x4
    unsigned long dwTitleId;// Offset=0xc Size=0x4
    unsigned long mtUserTime;// Offset=0x10 Size=0x4
    char szGamertag[16];// Offset=0x14 Size=0x10
};

union _DYNAMIC_REVOCATION_LIST// Size=0x8000 (Id=1665)
{
    struct _CERTIFICATE_REVOCATION_LIST_HEADER RevocationList;// Offset=0x0 Size=0x150
    unsigned char Reserved[32768];// Offset=0x0 Size=0x8000
};

struct _XPARTY_GET_USER_LIST_PARAMS// Size=0x8 (Id=1666)
{
    unsigned long dwVersion;// Offset=0x0 Size=0x4
    struct _XPARTY_USER_LIST * pUserList;// Offset=0x4 Size=0x4
};

struct _PROFILEENUMRESULT// Size=0x188 (Id=1667)
{
    unsigned long long xuidOffline;// Offset=0x0 Size=0x8
    struct _XAMACCOUNTINFO xai;// Offset=0x8 Size=0x17c
    unsigned long DeviceID;// Offset=0x184 Size=0x4
};

struct _Q_DEQUEUE_MSG// Size=0x34 (Id=1668)
{
    struct _BASE_MSG_HEADER MsgHeader;// Offset=0x0 Size=0x20
    unsigned long long qwUserID;// Offset=0x20 Size=0x8
    unsigned short wQType;// Offset=0x28 Size=0x2
    unsigned long dwStartItemID;// Offset=0x2a Size=0x4
    unsigned short wMaxItems;// Offset=0x2e Size=0x2
    unsigned long dwMaxTotalItemDataSize;// Offset=0x30 Size=0x4
};

struct _XAMPACKAGEMANAGER_HASEXTENDEDPARTITION_MSG// Size=0x8 (Id=1669)
{
    unsigned long DeviceID;// Offset=0x0 Size=0x4
    int * pbHasExtendedPartition;// Offset=0x4 Size=0x4
};

struct _DMXAPI// Size=0xc (Id=1670)
{
    unsigned char XapiStarted;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    unsigned long LastErrorTlsOff;// Offset=0x4 Size=0x4
    unsigned long CurrentFiberTlsOff;// Offset=0x8 Size=0x4
};

struct _WHOLESALE_INFO// Size=0x18 (Id=1671)
{
    unsigned short wAccountHolderNameLength;// Offset=0x0 Size=0x2
    unsigned short * wszAccountHolderName;// Offset=0x2 Size=0x4
    unsigned short wReferenceIdLength;// Offset=0x6 Size=0x2
    unsigned short * wszReferenceId;// Offset=0x8 Size=0x4
    unsigned short wPartnerLength;// Offset=0xc Size=0x2
    unsigned short * wszPartner;// Offset=0xe Size=0x4
    unsigned short wEncryptedPasswordLength;// Offset=0x12 Size=0x2
    unsigned short * wszEncryptedPassword;// Offset=0x14 Size=0x4
};

struct _XPROFILE_SETTING_READ_REQUEST// Size=0x1c (Id=1672)
{
    unsigned long dwTitleId;// Offset=0x0 Size=0x4
    unsigned long long qwUserId;// Offset=0x4 Size=0x8
    unsigned short wForUserIdsLen;// Offset=0xc Size=0x2
    unsigned long long * pqwUserIds;// Offset=0xe Size=0x4
    unsigned short wSettingIdsLen;// Offset=0x12 Size=0x2
    unsigned long * pdwSettingIds;// Offset=0x14 Size=0x4
    struct _XPROFILE_SETTING_READ_RESULT * pResults;// Offset=0x18 Size=0x4
};

struct _KUSER_MODE_PDE// Size=0x2 (Id=1673)
{
    unsigned short PteBlockNumber;// Offset=0x0 Size=0x2
};

struct _XPARTY_REJOIN_PARAMS// Size=0x68 (Id=1674)
{
    unsigned long long xuidContact;// Offset=0x0 Size=0x8
    struct _XPARTY_INFO partyInfo;// Offset=0x8 Size=0x3e
    unsigned char __align0[2];// Offset=0x46 Size=0x2
    struct _XPARTY_LEAVE_PARAMS InternalLeaveParams;// Offset=0x48 Size=0x4
    unsigned char __align1[4];// Offset=0x4c Size=0x4
    unsigned long dwUserIndexCount;// Offset=0x50 Size=0x4
    unsigned long dwUserIndices[4];// Offset=0x54 Size=0x10
};

struct _UPDATE_PAYMENT_INSTRUMENT_REQUEST// Size=0x85 (Id=1675)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned long long qwMachineId;// Offset=0x8 Size=0x8
    unsigned short wPaymentInstrumentIdLength;// Offset=0x10 Size=0x2
    unsigned short * wszPaymentInstrumentId;// Offset=0x12 Size=0x4
    struct _ADDRESS_INFO addressInfo;// Offset=0x16 Size=0x24
    struct _PHONE_INFO phoneInfo;// Offset=0x3a Size=0x12
    struct _CREDIT_CARD_INFO creditCardInfo;// Offset=0x4c Size=0x1b
    struct _DIRECT_DEBIT_INFO directDebitInfo;// Offset=0x67 Size=0x1e
};

struct _XCONTENT_TRANSFERFLAGS// Size=0x1 (Id=1676)
{
    struct // Size=0x1 (Id=0)
    {
        unsigned char ProfileTransfer:1;// Offset=0x0 Size=0x1 BitOffset=0x7 BitSize=0x1
        unsigned char DeviceTransfer:1;// Offset=0x0 Size=0x1 BitOffset=0x6 BitSize=0x1
        unsigned char MoveOnlyTransfer:1;// Offset=0x0 Size=0x1 BitOffset=0x5 BitSize=0x1
        unsigned char Reserved:5;// Offset=0x0 Size=0x1 BitOffset=0x0 BitSize=0x5
    };
};

struct _BASE_MSG_HEADER// Size=0x20 (Id=1677)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
};

struct _PAYMENT_INSTRUMENT_INFO// Size=0x8e (Id=1678)
{
    unsigned short wPaymentInstrumentIdLength;// Offset=0x0 Size=0x2
    unsigned short * wszPaymentInstrumentId;// Offset=0x2 Size=0x4
    unsigned char bPaymentTypeId;// Offset=0x6 Size=0x1
    struct _ADDRESS_INFO address;// Offset=0x7 Size=0x24
    struct _PHONE_INFO phone;// Offset=0x2b Size=0x12
    struct _CREDIT_CARD_INFO creditCard;// Offset=0x3d Size=0x1b
    struct _DIRECT_DEBIT_INFO directDebit;// Offset=0x58 Size=0x1e
    struct _WHOLESALE_INFO wholesale;// Offset=0x76 Size=0x18
};

struct tagXUSER_TITLE_PLAYED// Size=0xa8 (Id=1679)
{
    unsigned long dwTitleId;// Offset=0x0 Size=0x4
    unsigned long dwAchievementsPossible;// Offset=0x4 Size=0x4
    unsigned long dwAchievementsEarned;// Offset=0x8 Size=0x4
    unsigned long dwCredPossible;// Offset=0xc Size=0x4
    unsigned long dwCredEarned;// Offset=0x10 Size=0x4
    unsigned short wReservedAchievementCount;// Offset=0x14 Size=0x2
    unsigned short wUnused1;// Offset=0x16 Size=0x2
    unsigned long dwUnused2;// Offset=0x18 Size=0x4
    unsigned long dwReservedFlags;// Offset=0x1c Size=0x4
    struct _FILETIME ftLastLoaded;// Offset=0x20 Size=0x8
    wchar_t wszTitleName[64];// Offset=0x28 Size=0x80
};

struct _P_ALIVE_REPLY_MSG// Size=0x38 (Id=1680)
{
    struct _BASE_MSG_HEADER MsgHeader;// Offset=0x0 Size=0x20
    HRESULT hr;// Offset=0x20 Size=0x4
    unsigned long dwBuddyListVersion;// Offset=0x24 Size=0x4
    unsigned short cBuddiesSent;// Offset=0x28 Size=0x2
    unsigned long dwBlockListVersion;// Offset=0x2a Size=0x4
    unsigned short cBlocksSent;// Offset=0x2e Size=0x2
    struct _P_REPLY_BUDDY * pBuddies;// Offset=0x30 Size=0x4
    struct _P_REPLY_BLOCK * pBlocks;// Offset=0x34 Size=0x4
};

struct _ABCH_GET_CONTACTLIST_ITEM// Size=0x1c (Id=1681)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned short wGamertagLength;// Offset=0x8 Size=0x2
    char * szGamertag;// Offset=0xa Size=0x4
    unsigned short wPmnLength;// Offset=0xe Size=0x2
    char * szPmn;// Offset=0x10 Size=0x4
    unsigned short wDisplayNameLength;// Offset=0x14 Size=0x2
    unsigned short * wszDisplayName;// Offset=0x16 Size=0x4
    unsigned short wResponseFlags;// Offset=0x1a Size=0x2
};

struct _DOWNLOAD_QUEUE_MODIFY_QUEUE_REQUEST// Size=0x1e (Id=1682)
{
    unsigned long long xUserId;// Offset=0x0 Size=0x8
    unsigned long nQueueId;// Offset=0x8 Size=0x4
    struct _FILETIME ftLastModified;// Offset=0xc Size=0x8
    unsigned short wXmlLength;// Offset=0x14 Size=0x2
    unsigned short * XmlProperties;// Offset=0x16 Size=0x4
    struct _DOWNLOAD_QUEUE_MODIFY_QUEUE_RESPONSE * pResponse;// Offset=0x1a Size=0x4
};

struct XECRYPT_RC4_STATE// Size=0x102 (Id=1683)
{
    unsigned char S[256];// Offset=0x0 Size=0x100
    unsigned char i;// Offset=0x100 Size=0x1
    unsigned char j;// Offset=0x101 Size=0x1
};

struct _XCONFIG_POWER_VCS_CONTROL// Size=0x2 (Id=1684)
{
    struct // Size=0x2 (Id=0)
    {
        unsigned short Configured:1;// Offset=0x0 Size=0x2 BitOffset=0xf BitSize=0x1
        unsigned short Reserved:3;// Offset=0x0 Size=0x2 BitOffset=0xc BitSize=0x3
        unsigned short Full:4;// Offset=0x0 Size=0x2 BitOffset=0x8 BitSize=0x4
        unsigned short Quiet:4;// Offset=0x0 Size=0x2 BitOffset=0x4 BitSize=0x4
        unsigned short Fuse:4;// Offset=0x0 Size=0x2 BitOffset=0x0 BitSize=0x4
    };
};

struct __PASSPORT_GET_PUID_FROM_MEMBERNAME_RESPONSE// Size=0x8 (Id=1685)
{
    unsigned long long qwPassportPuid;// Offset=0x0 Size=0x8
};

struct _XASYNCMESSAGE// Size=0x1c (Id=1686)
{
    void * hxamapp;// Offset=0x0 Size=0x4
    unsigned long dwMessage;// Offset=0x4 Size=0x4
    struct _XOVERLAPPED * pOverlapped;// Offset=0x8 Size=0x4
    void * pBuffer;// Offset=0xc Size=0x4
    void * UserEvent;// Offset=0x10 Size=0x4
    void * Apc;// Offset=0x14 Size=0x4
    void * hXamTask;// Offset=0x18 Size=0x4
};

struct _KUSER_MODE_PTE_BLOCK// Size=0x2000 (Id=1687)
{
    union _KUSER_MODE_PTE PteArray[2048];// Offset=0x0 Size=0x2000
};

struct _P_INVITATION_ANSWER_ITEM// Size=0x1a (Id=1688)
{
    unsigned long long qwInviteeID;// Offset=0x0 Size=0x8
    struct XNKID MatchSessionID;// Offset=0x8 Size=0x8
    unsigned long long ftSent;// Offset=0x10 Size=0x8
    unsigned short wAnswer;// Offset=0x18 Size=0x2
};

struct _GET_POINTS_BALANCE_RESPONSE// Size=0x6 (Id=1689)
{
    unsigned long dwPointsBalance;// Offset=0x0 Size=0x4
    unsigned char bDMPAccountStatus;// Offset=0x4 Size=0x1
    unsigned char bResponseFlags;// Offset=0x5 Size=0x1
};

struct _STRING_DATA// Size=0x6 (Id=1690)
{
    unsigned short wStringSize;// Offset=0x0 Size=0x2
    unsigned short * pszString;// Offset=0x2 Size=0x4
};

struct _OBJECT_HEADER_NAME_INFO// Size=0x10 (Id=1691)
{
    struct _OBJECT_HEADER_NAME_INFO * ChainLink;// Offset=0x0 Size=0x4
    struct _OBJECT_DIRECTORY * Directory;// Offset=0x4 Size=0x4
    struct _STRING Name;// Offset=0x8 Size=0x8
};

struct _XMSG_ENUM_RESULTS// Size=0x6 (Id=1692)
{
    unsigned short cMessages;// Offset=0x0 Size=0x2
    struct _Q_MESSAGE_SUMMARY_2 * pMessages;// Offset=0x2 Size=0x4
};

struct _Q_MESSAGE_SUMMARY_MSG// Size=0x30 (Id=1693)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwUserID;// Offset=0x20 Size=0x8
    unsigned long dwMessageID;// Offset=0x28 Size=0x4
    struct _Q_MESSAGE_SUMMARY_REPLY_MSG * pResults;// Offset=0x2c Size=0x4
};

struct _XSHOWDEVICESELECTORUI_PARAMS// Size=0x20 (Id=1694)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long dwContentType;// Offset=0x4 Size=0x4
    unsigned long dwContentFlags;// Offset=0x8 Size=0x4
    unsigned char __align0[4];// Offset=0xc Size=0x4
    union _ULARGE_INTEGER uliBytesRequested;// Offset=0x10 Size=0x8
    unsigned long * pDeviceID;// Offset=0x18 Size=0x4
    struct _XOVERLAPPED * pOverlapped;// Offset=0x1c Size=0x4
};

struct _KPCR// Size=0x2d8 (Id=1695)
{
    void * TlsData;// Offset=0x0 Size=0x4
    union // Size=0x8 (Id=0)
    {
        unsigned short MsrEnableMaskHigh;// Offset=0x4 Size=0x2
        unsigned short MsrEnableMaskLow;// Offset=0x6 Size=0x2
        unsigned long MsrEnableMask;// Offset=0x4 Size=0x4
    };
    union // Size=0x2 (Id=0)
    {
        unsigned short SoftwareInterrupt;// Offset=0x8 Size=0x2
        unsigned char DispatchInterrupt;// Offset=0x8 Size=0x1
    };
    unsigned char ApcInterrupt;// Offset=0x9 Size=0x1
    union // Size=0x2 (Id=0)
    {
        unsigned short DpcFpuVpuStateSaved;// Offset=0xa Size=0x2
        unsigned char DpcFpuStateSaved;// Offset=0xa Size=0x1
    };
    unsigned char DpcVpuStateSaved;// Offset=0xb Size=0x1
    unsigned char DpcCurrentProcessType;// Offset=0xc Size=0x1
    unsigned char QuantumEnd;// Offset=0xd Size=0x1
    unsigned char TimerRequest;// Offset=0xe Size=0x1
    unsigned char HvCr0Save;// Offset=0xf Size=0x1
    struct _KTHREAD * FpuOwnerThread;// Offset=0x10 Size=0x4
    struct _KTHREAD * VpuOwnerThread;// Offset=0x14 Size=0x4
    unsigned char CurrentIrql;// Offset=0x18 Size=0x1
    unsigned char BackgroundSchedulingActive;// Offset=0x19 Size=0x1
    union // Size=0x2 (Id=0)
    {
        unsigned short StartStopBackgroundScheduling;// Offset=0x1a Size=0x2
        unsigned char StartBackgroundScheduling;// Offset=0x1a Size=0x1
    };
    unsigned char StopBackgroundScheduling;// Offset=0x1b Size=0x1
    unsigned long TimerHand;// Offset=0x1c Size=0x4
    union // Size=0x38 (Id=0)
    {
        unsigned long long LrIarSave;// Offset=0x20 Size=0x8
        unsigned long long CrMsrSave;// Offset=0x28 Size=0x8
        unsigned long long Gpr13Save;// Offset=0x30 Size=0x8
        unsigned long Gpr1Restore;// Offset=0x20 Size=0x4
        unsigned long IarRestore;// Offset=0x24 Size=0x4
        unsigned long CrRestore;// Offset=0x28 Size=0x4
        unsigned long MsrRestore;// Offset=0x2c Size=0x4
        unsigned char __align0[8];// Offset=0x30 Size=0x8
    };
    unsigned long long HvGpr1Save;// Offset=0x38 Size=0x8
    unsigned long long HvGpr3Save;// Offset=0x40 Size=0x8
    unsigned long long HvGpr4Save;// Offset=0x48 Size=0x8
    unsigned long long HvGpr5Save;// Offset=0x50 Size=0x8
    unsigned long UserModeControl;// Offset=0x58 Size=0x4
    void * PanicStack;// Offset=0x5c Size=0x4
    unsigned long DarSave;// Offset=0x60 Size=0x4
    unsigned long DsisrSave;// Offset=0x64 Size=0x4
    void * DbgLastDpcRoutine;// Offset=0x68 Size=0x4
    unsigned long OnInterruptStack;// Offset=0x6c Size=0x4
    void * StackBase;// Offset=0x70 Size=0x4
    void * StackLimit;// Offset=0x74 Size=0x4
    void * InterruptStackBase;// Offset=0x78 Size=0x4
    void * InterruptStackLimit;// Offset=0x7c Size=0x4
    void * InterruptRoutine[32];// Offset=0x80 Size=0x80
    struct _KPRCB PrcbData;// Offset=0x100 Size=0x1a8
    struct _KPRCB * Prcb;// Offset=0x2a8 Size=0x4
    unsigned long Unused;// Offset=0x2ac Size=0x4
    unsigned long * PixCurrent;// Offset=0x2b0 Size=0x4
    unsigned long * PixLimit;// Offset=0x2b4 Size=0x4
    unsigned long * ProfilerCurrent;// Offset=0x2b8 Size=0x4
    unsigned long * ProfilerLimit;// Offset=0x2bc Size=0x4
    unsigned long ProfilerFlags;// Offset=0x2c0 Size=0x4
    unsigned char __align1[4];// Offset=0x2c4 Size=0x4
    unsigned long long Contention;// Offset=0x2c8 Size=0x8
    unsigned long * MonitorProfileData;// Offset=0x2d0 Size=0x4
};

struct _XGAMERPROFILE_PARAMS// Size=0x220 (Id=1696)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long dwMode;// Offset=0x4 Size=0x4
    unsigned long long xuidTarget;// Offset=0x8 Size=0x8
    unsigned long dwTitleId;// Offset=0x10 Size=0x4
    unsigned long dwAchievementId;// Offset=0x14 Size=0x4
    struct _XCONTENT_DATA_INTERNAL xcdiDisplayFirst;// Offset=0x18 Size=0x200
    unsigned long dwFlags;// Offset=0x218 Size=0x4
};

struct _MP_BILLING_ACCOUNT_INFO// Size=0x704 (Id=1697)
{
    int fEditMode;// Offset=0x0 Size=0x4
    unsigned char bPaymentTypeId;// Offset=0x4 Size=0x1
    unsigned char __align0[1];// Offset=0x5 Size=0x1
    wchar_t wszPaymentInstrumentId[17];// Offset=0x6 Size=0x22
    wchar_t wszStreet1[128];// Offset=0x28 Size=0x100
    wchar_t wszStreet2[128];// Offset=0x128 Size=0x100
    wchar_t wszCity[64];// Offset=0x228 Size=0x80
    wchar_t wszDistrict[64];// Offset=0x2a8 Size=0x80
    wchar_t wszState[64];// Offset=0x328 Size=0x80
    wchar_t wszPostalCode[16];// Offset=0x3a8 Size=0x20
    wchar_t wszPhonePrefix[12];// Offset=0x3c8 Size=0x18
    wchar_t wszPhoneNumber[12];// Offset=0x3e0 Size=0x18
    wchar_t wszPhoneExtension[12];// Offset=0x3f8 Size=0x18
    unsigned char bCardTypeId;// Offset=0x410 Size=0x1
    unsigned char __align1[1];// Offset=0x411 Size=0x1
    wchar_t wszCreditAccountHolderName[64];// Offset=0x412 Size=0x80
    wchar_t wszCreditAccountNumber[24];// Offset=0x492 Size=0x30
    wchar_t wszCreditCCVNumber[5];// Offset=0x4c2 Size=0xa
    struct _FILETIME ftExpirationDate;// Offset=0x4cc Size=0x8
    wchar_t wszDebitAccountHolderName[64];// Offset=0x4d4 Size=0x80
    wchar_t wszDebitAccountNumber[24];// Offset=0x554 Size=0x30
    wchar_t wszDebitBankCode[64];// Offset=0x584 Size=0x80
    wchar_t wszDebitBranchCode[64];// Offset=0x604 Size=0x80
    wchar_t wszDebitCheckDigits[64];// Offset=0x684 Size=0x80
};

struct _XUSER_FRIENDS_LIST_INFO// Size=0x8 (Id=1698)
{
    unsigned long dwVersion;// Offset=0x0 Size=0x4
    unsigned long cFriends;// Offset=0x4 Size=0x4
};

struct _XUSER_PLAYER_ENUM// Size=0xc (Id=1699)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long dwStartingIndex;// Offset=0x4 Size=0x4
    unsigned long cItem;// Offset=0x8 Size=0x4
};

struct _XARB_REPORT_SUSPICIOUS_INFO// Size=0xf (Id=1700)
{
    unsigned char bMessageLength;// Offset=0x0 Size=0x1
    char * pszMessage;// Offset=0x1 Size=0x4
    unsigned char bNumRelatedMachineIDs;// Offset=0x5 Size=0x1
    unsigned long long * pRelatedMachineIDs;// Offset=0x6 Size=0x4
    unsigned char bNumRelatedUsers;// Offset=0xa Size=0x1
    unsigned long long * pRelatedUsers;// Offset=0xb Size=0x4
};

struct CREATE_OWNER_ACCT_REQUEST// Size=0xcc7 (Id=1701)
{
    unsigned long long qwMachinePuid;// Offset=0x0 Size=0x8
    unsigned long dwTitleId;// Offset=0x8 Size=0x4
    struct _FILETIME ftBirthdate;// Offset=0xc Size=0x8
    unsigned char bMSSpam;// Offset=0x14 Size=0x1
    unsigned char bPartnerSpam;// Offset=0x15 Size=0x1
    unsigned char bCountryId;// Offset=0x16 Size=0x1
    unsigned short wLanguageId;// Offset=0x17 Size=0x2
    unsigned char bCardTypeId;// Offset=0x19 Size=0x1
    struct _FILETIME ftCardExpiration;// Offset=0x1a Size=0x8
    unsigned char rgbData[3237];// Offset=0x22 Size=0xca5
};

struct IDirectXFileSaveObjectVtbl// Size=0x18 (Id=1702)
{
    HRESULT  ( * QueryInterface)(struct IDirectXFileSaveObject * ,const struct _GUID * ,void ** );// Offset=0x0 Size=0x4
    unsigned long  ( * AddRef)(struct IDirectXFileSaveObject * );// Offset=0x4 Size=0x4
    unsigned long  ( * Release)(struct IDirectXFileSaveObject * );// Offset=0x8 Size=0x4
    HRESULT  ( * SaveTemplates)(struct IDirectXFileSaveObject * ,unsigned long ,struct _GUID ** );// Offset=0xc Size=0x4
    HRESULT  ( * CreateDataObject)(struct IDirectXFileSaveObject * ,const struct _GUID * ,char * ,struct _GUID * ,unsigned long ,void * ,struct IDirectXFileData ** );// Offset=0x10 Size=0x4
    HRESULT  ( * SaveData)(struct IDirectXFileSaveObject * ,struct IDirectXFileData * );// Offset=0x14 Size=0x4
};

struct _XCONTENT_DOWNLOADMEDIA_PARAMS// Size=0x1c (Id=1703)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long dwContentType;// Offset=0x4 Size=0x4
    unsigned long dwContentIdSize;// Offset=0x8 Size=0x4
    unsigned char * pbContentId;// Offset=0xc Size=0x4
    unsigned long cchTargetDirectory;// Offset=0x10 Size=0x4
    char * pszTargetDirectory;// Offset=0x14 Size=0x4
    unsigned long dwFlags;// Offset=0x18 Size=0x4
};

struct _XPROFILE_SYNC_TITLES_RESULT// Size=0x10 (Id=1704)
{
    struct _FILETIME ftVersion;// Offset=0x0 Size=0x8
    unsigned short wTotalTitles;// Offset=0x8 Size=0x2
    unsigned short wNumTitles;// Offset=0xa Size=0x2
    struct _XPROFILE_TITLE * pTitles;// Offset=0xc Size=0x4
};

struct _KAPC// Size=0x28 (Id=1705)
{
    short Type;// Offset=0x0 Size=0x2
    unsigned char ApcMode;// Offset=0x2 Size=0x1
    unsigned char Inserted;// Offset=0x3 Size=0x1
    struct _KTHREAD * Thread;// Offset=0x4 Size=0x4
    struct _LIST_ENTRY ApcListEntry;// Offset=0x8 Size=0x8
    void  ( * KernelRoutine)(struct _KAPC * ,void  ( ** )(void * ,void * ,void * ),void ** ,void ** ,void ** );// Offset=0x10 Size=0x4
    void  ( * RundownRoutine)(struct _KAPC * );// Offset=0x14 Size=0x4
    void  ( * NormalRoutine)(void * ,void * ,void * );// Offset=0x18 Size=0x4
    void * NormalContext;// Offset=0x1c Size=0x4
    void * SystemArgument1;// Offset=0x20 Size=0x4
    void * SystemArgument2;// Offset=0x24 Size=0x4
};

struct _KSEMAPHORE// Size=0x14 (Id=1706)
{
    struct _DISPATCHER_HEADER Header;// Offset=0x0 Size=0x10
    long Limit;// Offset=0x10 Size=0x4
};

struct _XPROFILE_SETTING_SYNC_REQUEST// Size=0x20 (Id=1707)
{
    unsigned long dwTitleId;// Offset=0x0 Size=0x4
    unsigned long long qwUserId;// Offset=0x4 Size=0x8
    struct _FILETIME ftVersion;// Offset=0xc Size=0x8
    unsigned short wStartingIndex;// Offset=0x14 Size=0x2
    unsigned short wSettingsLen;// Offset=0x16 Size=0x2
    struct _XUSER_ONLINE_PROFILE_SETTING * pSettings;// Offset=0x18 Size=0x4
    struct _XPROFILE_SETTING_SYNC_RESULT * pResults;// Offset=0x1c Size=0x4
};

struct _XSTORAGE_DOWNLOAD_TO_DIRECTORY_RESULTS_INTERNAL// Size=0x134 (Id=1708)
{
    struct _XCONTENT_DATA ContentData;// Offset=0x0 Size=0x134
};

struct _GET_POSTAL_CODE_RESPONSE// Size=0x5 (Id=1709)
{
    unsigned char bCount;// Offset=0x0 Size=0x1
    struct _POSTAL_CODE_MATCH * pMatches;// Offset=0x1 Size=0x4
};

struct _XPRESENCE_SEND_ALIVE// Size=0x8 (Id=1710)
{
    struct _P_ALIVE_2_MSG * pAlives;// Offset=0x0 Size=0x4
    struct _XPRESENCE_ALIVE_REPLY * pAliveReply;// Offset=0x4 Size=0x4
};

struct _XASSET_ENUMERATE_REQUEST// Size=0x20 (Id=1711)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned long long qwMachineId;// Offset=0x8 Size=0x8
    unsigned long dwTitleId;// Offset=0x10 Size=0x4
    unsigned long dwFlags;// Offset=0x14 Size=0x4
    unsigned short wStartingIndex;// Offset=0x18 Size=0x2
    unsigned short wMaxResults;// Offset=0x1a Size=0x2
    struct _XASSET_ENUMERATE_RESPONSE * pResults;// Offset=0x1c Size=0x4
};

struct _StoreData// Size=0x20 (Id=1712)
{
    struct _EntryBaseData baseData;// Offset=0x0 Size=0x1c
    unsigned short * pwszTabName;// Offset=0x1c Size=0x4
};

struct _SPIF_NOTIFICATION// Size=0x0 (Id=1713)
{
};

struct _HAL_HDDVD_ROM_REGISTRATION// Size=0xc (Id=1714)
{
    void  ( * NotificationRoutine)(struct _HAL_HDDVD_ROM_REGISTRATION * ,struct _SPIF_NOTIFICATION * );// Offset=0x0 Size=0x4
    struct _LIST_ENTRY ListEntry;// Offset=0x4 Size=0x8
};

struct _XMDEC4// Size=0x4 (Id=1715)
{
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            int x:10;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xa
            int y:10;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0xa
            int z:10;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0xa
            int w:2;// Offset=0x0 Size=0x4 BitOffset=0x1e BitSize=0x2
        };
        unsigned int v;// Offset=0x0 Size=0x4
    };
};

struct _CDROM_PLAY_AUDIO_MSF// Size=0x6 (Id=1716)
{
    unsigned char StartingM;// Offset=0x0 Size=0x1
    unsigned char StartingS;// Offset=0x1 Size=0x1
    unsigned char StartingF;// Offset=0x2 Size=0x1
    unsigned char EndingM;// Offset=0x3 Size=0x1
    unsigned char EndingS;// Offset=0x4 Size=0x1
    unsigned char EndingF;// Offset=0x5 Size=0x1
};

struct _P_PRESENCE_INITIALIZE_MSG// Size=0x4 (Id=1717)
{
    unsigned long cPeerSubscriptions;// Offset=0x0 Size=0x4
};

struct _DVD_XGD2_DISC_AUTH_RESULT_HCRT_HEADER// Size=0x2 (Id=1718)
{
    unsigned char Version;// Offset=0x0 Size=0x1
    unsigned char NumberOfEntries;// Offset=0x1 Size=0x1
};

struct _DM_SET_INPUT_STATE// Size=0xc (Id=1719)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    void * pXInputVibration;// Offset=0x4 Size=0x4
    unsigned long * pReturn;// Offset=0x8 Size=0x4
};

struct IUnknownVtbl// Size=0xc (Id=1720)
{
    HRESULT  ( * QueryInterface)(struct IUnknown * ,const struct _GUID * ,void ** );// Offset=0x0 Size=0x4
    unsigned long  ( * AddRef)(struct IUnknown * );// Offset=0x4 Size=0x4
    unsigned long  ( * Release)(struct IUnknown * );// Offset=0x8 Size=0x4
};

struct _QUERY_REMOVE_REQUEST// Size=0x24 (Id=1721)
{
    unsigned long dwTitleId;// Offset=0x0 Size=0x4
    unsigned long long qwUserId;// Offset=0x4 Size=0x8
    unsigned long long qwTeamId;// Offset=0xc Size=0x8
    unsigned long dwDatasetId;// Offset=0x14 Size=0x4
    unsigned long dwProcIndex;// Offset=0x18 Size=0x4
    unsigned long dwNumAttributes;// Offset=0x1c Size=0x4
    struct _XONLINE_QUERY_ATTRIBUTE * pAttributes;// Offset=0x20 Size=0x4
};

struct _XMARKETPLACE_CONTENTOFFER_INFO// Size=0x68 (Id=1722)
{
    unsigned long long qwOfferID;// Offset=0x0 Size=0x8
    unsigned long long qwPreviewOfferID;// Offset=0x8 Size=0x8
    unsigned long dwOfferNameLength;// Offset=0x10 Size=0x4
    unsigned short * wszOfferName;// Offset=0x14 Size=0x4
    unsigned long dwOfferType;// Offset=0x18 Size=0x4
    unsigned char contentId[20];// Offset=0x1c Size=0x14
    int fIsUnrestrictedLicense;// Offset=0x30 Size=0x4
    unsigned long dwLicenseMask;// Offset=0x34 Size=0x4
    unsigned long dwTitleID;// Offset=0x38 Size=0x4
    unsigned long dwContentCategory;// Offset=0x3c Size=0x4
    unsigned long dwTitleNameLength;// Offset=0x40 Size=0x4
    unsigned short * wszTitleName;// Offset=0x44 Size=0x4
    int fUserHasPurchased;// Offset=0x48 Size=0x4
    unsigned long dwPackageSize;// Offset=0x4c Size=0x4
    unsigned long dwInstallSize;// Offset=0x50 Size=0x4
    unsigned long dwSellTextLength;// Offset=0x54 Size=0x4
    unsigned short * wszSellText;// Offset=0x58 Size=0x4
    unsigned long dwAssetID;// Offset=0x5c Size=0x4
    unsigned long dwPurchaseQuantity;// Offset=0x60 Size=0x4
    unsigned long dwPointsPrice;// Offset=0x64 Size=0x4
};

struct _ACCOUNT_SUGGESTED_GAMERTAG// Size=0x6 (Id=1723)
{
    unsigned short wGamertagLength;// Offset=0x0 Size=0x2
    unsigned short * wszGamertag;// Offset=0x2 Size=0x4
};

struct _QUERY_FINDFROMIDS_RESULT// Size=0xc (Id=1724)
{
    unsigned long dwReturnedResults;// Offset=0x0 Size=0x4
    unsigned long dwNumResultAttributes;// Offset=0x4 Size=0x4
    struct _XONLINE_QUERY_ATTRIBUTE * pAttributes;// Offset=0x8 Size=0x4
};

struct _XMXDEC4// Size=0x4 (Id=1725)
{
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            int x:10;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xa
            int y:10;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0xa
            int z:10;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0xa
            unsigned int w:2;// Offset=0x0 Size=0x4 BitOffset=0x1e BitSize=0x2
        };
        unsigned int v;// Offset=0x0 Size=0x4
    };
};

struct ID3DXBaseMeshVtbl// Size=0x60 (Id=1726)
{
    HRESULT  ( * QueryInterface)(struct ID3DXBaseMesh * ,const struct _GUID * ,void ** );// Offset=0x0 Size=0x4
    unsigned long  ( * AddRef)(struct ID3DXBaseMesh * );// Offset=0x4 Size=0x4
    unsigned long  ( * Release)(struct ID3DXBaseMesh * );// Offset=0x8 Size=0x4
    HRESULT  ( * DrawSubset)(struct ID3DXBaseMesh * ,unsigned long );// Offset=0xc Size=0x4
    unsigned long  ( * GetNumFaces)(struct ID3DXBaseMesh * );// Offset=0x10 Size=0x4
    unsigned long  ( * GetNumVertices)(struct ID3DXBaseMesh * );// Offset=0x14 Size=0x4
    unsigned long  ( * GetFVF)(struct ID3DXBaseMesh * );// Offset=0x18 Size=0x4
    HRESULT  ( * GetDeclaration)(struct ID3DXBaseMesh * ,struct _D3DVERTEXELEMENT9 * );// Offset=0x1c Size=0x4
    unsigned long  ( * GetNumBytesPerVertex)(struct ID3DXBaseMesh * );// Offset=0x20 Size=0x4
    unsigned long  ( * GetOptions)(struct ID3DXBaseMesh * );// Offset=0x24 Size=0x4
    HRESULT  ( * GetDevice)(struct ID3DXBaseMesh * ,struct D3DDevice ** );// Offset=0x28 Size=0x4
    HRESULT  ( * CloneMeshFVF)(struct ID3DXBaseMesh * ,unsigned long ,unsigned long ,struct D3DDevice * ,struct ID3DXMesh ** );// Offset=0x2c Size=0x4
    HRESULT  ( * CloneMesh)(struct ID3DXBaseMesh * ,unsigned long ,struct _D3DVERTEXELEMENT9 * ,struct D3DDevice * ,struct ID3DXMesh ** );// Offset=0x30 Size=0x4
    HRESULT  ( * GetVertexBuffer)(struct ID3DXBaseMesh * ,struct D3DVertexBuffer ** );// Offset=0x34 Size=0x4
    HRESULT  ( * GetIndexBuffer)(struct ID3DXBaseMesh * ,struct D3DIndexBuffer ** );// Offset=0x38 Size=0x4
    HRESULT  ( * LockVertexBuffer)(struct ID3DXBaseMesh * ,unsigned long ,void ** );// Offset=0x3c Size=0x4
    HRESULT  ( * UnlockVertexBuffer)(struct ID3DXBaseMesh * );// Offset=0x40 Size=0x4
    HRESULT  ( * LockIndexBuffer)(struct ID3DXBaseMesh * ,unsigned long ,void ** );// Offset=0x44 Size=0x4
    HRESULT  ( * UnlockIndexBuffer)(struct ID3DXBaseMesh * );// Offset=0x48 Size=0x4
    HRESULT  ( * GetAttributeTable)(struct ID3DXBaseMesh * ,struct _D3DXATTRIBUTERANGE * ,unsigned long * );// Offset=0x4c Size=0x4
    HRESULT  ( * ConvertPointRepsToAdjacency)(struct ID3DXBaseMesh * ,unsigned long * ,unsigned long * );// Offset=0x50 Size=0x4
    HRESULT  ( * ConvertAdjacencyToPointReps)(struct ID3DXBaseMesh * ,unsigned long * ,unsigned long * );// Offset=0x54 Size=0x4
    HRESULT  ( * GenerateAdjacency)(struct ID3DXBaseMesh * ,float ,unsigned long * );// Offset=0x58 Size=0x4
    HRESULT  ( * UpdateSemantics)(struct ID3DXBaseMesh * ,struct _D3DVERTEXELEMENT9 * );// Offset=0x5c Size=0x4
};

struct _XMOUNTUTILITYDRIVEFUNCS// Size=0x14 (Id=1727)
{
    unsigned char Version;// Offset=0x0 Size=0x1
    unsigned char IsStfc;// Offset=0x1 Size=0x1
    unsigned char __align0[2];// Offset=0x2 Size=0x2
    long  ( * DriverEntry)(<btNoType> );// Offset=0x4 Size=0x4
    long  ( * CreateDevice)(struct _STF_CREATE_PACKET * ,unsigned long );// Offset=0x8 Size=0x4
    long  ( * ControlDevice)(struct _DEVICE_OBJECT * ,enum _STF_CONTROL_CODE ,void * );// Offset=0xc Size=0x4
    long  ( * ShutdownDevice)(<btNoType> );// Offset=0x10 Size=0x4
};

struct _CONTENT_DETAILS_RESPONSE// Size=0x6 (Id=1728)
{
    unsigned short wOffersTotal;// Offset=0x0 Size=0x2
    struct _BASIC_CONTENT_INFO * pInfos;// Offset=0x2 Size=0x4
};

struct _SVOD_DEVICE_FEATURES// Size=0x1 (Id=1729)
{
    struct // Size=0x1 (Id=0)
    {
        unsigned char MustBeZeroForFutureUsage:6;// Offset=0x0 Size=0x1 BitOffset=0x0 BitSize=0x6
        unsigned char HasEnhancedGDFLayout:1;// Offset=0x0 Size=0x1 BitOffset=0x6 BitSize=0x1
        unsigned char ShouldBeZeroForDownlevelClients:1;// Offset=0x0 Size=0x1 BitOffset=0x7 BitSize=0x1
    };
};

struct _SUB_Q_TRACK_ISRC// Size=0x18 (Id=1730)
{
    struct _SUB_Q_HEADER Header;// Offset=0x0 Size=0x4
    unsigned char FormatCode;// Offset=0x4 Size=0x1
    unsigned char Reserved0;// Offset=0x5 Size=0x1
    unsigned char Track;// Offset=0x6 Size=0x1
    unsigned char Reserved1;// Offset=0x7 Size=0x1
    struct // Size=0x1 (Id=0)
    {
        unsigned char Reserved2:7;// Offset=0x8 Size=0x1 BitOffset=0x0 BitSize=0x7
        unsigned char Tcval:1;// Offset=0x8 Size=0x1 BitOffset=0x7 BitSize=0x1
    };
    unsigned char TrackIsrc[15];// Offset=0x9 Size=0xf
};

struct _XEIKA_CERT_OVERLAY// Size=0x1388 (Id=1731)
{
    struct _XEIKA_CERT_OVERLAY_ELEMENTS elements;// Offset=0x0 Size=0x140
    unsigned char filler[4424];// Offset=0x140 Size=0x1148
    unsigned char reserved[256];// Offset=0x1288 Size=0x100
};

struct _XMSG_FLAGS_REQUEST// Size=0x30 (Id=1732)
{
    unsigned long long XuidUser;// Offset=0x0 Size=0x8
    unsigned long dwMessageID;// Offset=0x8 Size=0x4
    unsigned long dwFlagsToSet;// Offset=0xc Size=0x4
    unsigned long dwFlagsToClear;// Offset=0x10 Size=0x4
    struct _XOVERLAPPED pXOverlapped[1];// Offset=0x14 Size=0x1c
};

struct _XPARTY_OVERRIDE_NAT_TYPE_PARAMS// Size=0x4 (Id=1733)
{
    enum XONLINE_NAT_TYPE natType;// Offset=0x0 Size=0x4
};

struct _FSCACHE_ELEMENT// Size=0x14 (Id=1734)
{
    unsigned long BlockNumber;// Offset=0x0 Size=0x4
    struct _FSCACHE_EXTENSION * CacheExtension;// Offset=0x4 Size=0x4
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            unsigned long UsageCount:8;// Offset=0x8 Size=0x4 BitOffset=0x0 BitSize=0x8
            unsigned long ReadInProgress:1;// Offset=0x8 Size=0x4 BitOffset=0x8 BitSize=0x1
            unsigned long ReadWaiters:1;// Offset=0x8 Size=0x4 BitOffset=0x9 BitSize=0x1
            unsigned long DeletePending:1;// Offset=0x8 Size=0x4 BitOffset=0xa BitSize=0x1
            unsigned long UsedAsMountBuffer:1;// Offset=0x8 Size=0x4 BitOffset=0xb BitSize=0x1
            unsigned long CacheBufferBits:20;// Offset=0x8 Size=0x4 BitOffset=0xc BitSize=0x14
        };
        char * CacheBuffer;// Offset=0x8 Size=0x4
    };
    struct _LIST_ENTRY LruListEntry;// Offset=0xc Size=0x8
};

struct ID3DXCompressedAnimationSetVtbl// Size=0x40 (Id=1735)
{
    HRESULT  ( * QueryInterface)(struct ID3DXCompressedAnimationSet * ,const struct _GUID * ,void ** );// Offset=0x0 Size=0x4
    unsigned long  ( * AddRef)(struct ID3DXCompressedAnimationSet * );// Offset=0x4 Size=0x4
    unsigned long  ( * Release)(struct ID3DXCompressedAnimationSet * );// Offset=0x8 Size=0x4
    char *  ( * GetName)(struct ID3DXCompressedAnimationSet * );// Offset=0xc Size=0x4
    float  ( * GetPeriod)(struct ID3DXCompressedAnimationSet * );// Offset=0x10 Size=0x4
    float  ( * GetPeriodicPosition)(struct ID3DXCompressedAnimationSet * ,float );// Offset=0x14 Size=0x4
    unsigned int  ( * GetNumAnimations)(struct ID3DXCompressedAnimationSet * );// Offset=0x18 Size=0x4
    HRESULT  ( * GetAnimationNameByIndex)(struct ID3DXCompressedAnimationSet * ,unsigned int ,char ** );// Offset=0x1c Size=0x4
    HRESULT  ( * GetAnimationIndexByName)(struct ID3DXCompressedAnimationSet * ,char * ,unsigned int * );// Offset=0x20 Size=0x4
    HRESULT  ( * GetSRT)(struct ID3DXCompressedAnimationSet * ,float ,unsigned int ,struct _D3DVECTOR * ,struct D3DXQUATERNION * ,struct _D3DVECTOR * );// Offset=0x24 Size=0x4
    HRESULT  ( * GetCallback)(struct ID3DXCompressedAnimationSet * ,float ,unsigned long ,float * ,void ** );// Offset=0x28 Size=0x4
    enum _D3DXPLAYBACK_TYPE  ( * GetPlaybackType)(struct ID3DXCompressedAnimationSet * );// Offset=0x2c Size=0x4
    float  ( * GetSourceTicksPerSecond)(struct ID3DXCompressedAnimationSet * );// Offset=0x30 Size=0x4
    HRESULT  ( * GetCompressedData)(struct ID3DXCompressedAnimationSet * ,struct ID3DXBuffer ** );// Offset=0x34 Size=0x4
    unsigned int  ( * GetNumCallbackKeys)(struct ID3DXCompressedAnimationSet * );// Offset=0x38 Size=0x4
    HRESULT  ( * GetCallbackKeys)(struct ID3DXCompressedAnimationSet * ,struct _D3DXKEY_CALLBACK * );// Offset=0x3c Size=0x4
};

struct _DM_ODD_READ_REQUEST_DATA// Size=0x8 (Id=1736)
{
    unsigned long StartSector;// Offset=0x0 Size=0x4
    unsigned long SectorCount;// Offset=0x4 Size=0x4
};

struct _XSHOWSIGNINUI_PARAMS// Size=0x10 (Id=1737)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long cPanes;// Offset=0x4 Size=0x4
    unsigned long dwFlags;// Offset=0x8 Size=0x4
    struct _XOVERLAPPED * pOverlapped;// Offset=0xc Size=0x4
};

struct _CERTIFICATE_REVOCATION_LIST_HEADER// Size=0x150 (Id=1738)
{
    unsigned long Signer;// Offset=0x0 Size=0x4
    unsigned char ConsoleID[5];// Offset=0x4 Size=0x5
    unsigned char Padding[3];// Offset=0x9 Size=0x3
    unsigned char Digest[20];// Offset=0xc Size=0x14
    struct XECRYPT_SIG Signature;// Offset=0x20 Size=0x100
    unsigned char Nonce[16];// Offset=0x120 Size=0x10
    unsigned char Key[16];// Offset=0x130 Size=0x10
    union // Size=0x10 (Id=0)
    {
        struct _CERTIFICATE_REVOCATION_BOX_DATA BoxData;// Offset=0x140 Size=0x10
        unsigned char BoxDataAsUCHAR[16];// Offset=0x140 Size=0x10
    };
};

struct _XONLINE_STATS_READ_RESULTS// Size=0x8 (Id=1739)
{
    unsigned long dwNumViews;// Offset=0x0 Size=0x4
    struct _XONLINE_STATS_VIEW * pViews;// Offset=0x4 Size=0x4
};

struct _Q_ENUM_MESSAGES_MSG// Size=0x2c (Id=1740)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwUserID;// Offset=0x20 Size=0x8
    struct _XMSG_ENUM_RESULTS * pResults;// Offset=0x28 Size=0x4
};

struct _XMARKETPLACE_QUERY_RESULTS// Size=0xc (Id=1741)
{
    struct _XMARKETPLACE_TABLE * pTable;// Offset=0x0 Size=0x4
    unsigned long dwNumItemsReturned;// Offset=0x4 Size=0x4
    unsigned long dwNumItemsTotal;// Offset=0x8 Size=0x4
};

struct _XCONFIG_POWER_MODE// Size=0x2 (Id=1742)
{
    unsigned char VIDDelta;// Offset=0x0 Size=0x1
    unsigned char Reserved;// Offset=0x1 Size=0x1
};

struct _QUERY_FINDFROMIDS_REQUEST// Size=0x20 (Id=1743)
{
    unsigned long dwTitleId;// Offset=0x0 Size=0x4
    unsigned long dwDatasetId;// Offset=0x4 Size=0x4
    unsigned long dwProcIndex;// Offset=0x8 Size=0x4
    unsigned long dwNumResultSpecs;// Offset=0xc Size=0x4
    unsigned long dwNumIds;// Offset=0x10 Size=0x4
    struct _XONLINE_QUERY_ATTRIBUTE_SPEC * pSpecs;// Offset=0x14 Size=0x4
    unsigned long long * pqwEntityIds;// Offset=0x18 Size=0x4
    struct _QUERY_FINDFROMIDS_RESULT * pResults;// Offset=0x1c Size=0x4
};

struct _XPROFILE_CLEAR_ACHIEVEMENTS_REQUEST// Size=0x10 (Id=1744)
{
    unsigned long dwTitleId;// Offset=0x0 Size=0x4
    unsigned long long qwUserId;// Offset=0x4 Size=0x8
    struct _XPROFILE_CLEAR_ACHIEVEMENTS_RESULT * pResult;// Offset=0xc Size=0x4
};

struct _KD_SYMBOLS_INFO// Size=0x10 (Id=1745)
{
    void * BaseOfDll;// Offset=0x0 Size=0x4
    unsigned long ProcessId;// Offset=0x4 Size=0x4
    unsigned long CheckSum;// Offset=0x8 Size=0x4
    unsigned long SizeOfImage;// Offset=0xc Size=0x4
};

struct ID3DXBaseMesh// Size=0x4 (Id=1746)
{
    struct ID3DXBaseMeshVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct _XONLINE_STATS_SPEC// Size=0xc (Id=1747)
{
    unsigned long dwViewId;// Offset=0x0 Size=0x4
    unsigned long dwNumColumnIds;// Offset=0x4 Size=0x4
    unsigned short * pAttrId;// Offset=0x8 Size=0x4
};

struct _P_REJECT_REQUEST_MSG// Size=0x34 (Id=1748)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwSenderID;// Offset=0x20 Size=0x8
    unsigned long long qwBuddyID;// Offset=0x28 Size=0x8
    int Block;// Offset=0x30 Size=0x4
};

struct _XPARTY_SEND_GAME_INVITES_PARAMS// Size=0xc (Id=1749)
{
    unsigned long dwVersion;// Offset=0x0 Size=0x4
    unsigned long dwUserIndex;// Offset=0x4 Size=0x4
    unsigned long dwFlags;// Offset=0x8 Size=0x4
};

struct _DM_SWAPDISC_START// Size=0x1c (Id=1750)
{
    unsigned char DiscNum;// Offset=0x0 Size=0x1
    unsigned char DiscsInSet;// Offset=0x1 Size=0x1
    unsigned char __align0[2];// Offset=0x2 Size=0x2
    struct _XSWAPDISC_ERROR_TEXT * ErrorText;// Offset=0x4 Size=0x4
    unsigned long TitleID;// Offset=0x8 Size=0x4
    unsigned char MediaID[16];// Offset=0xc Size=0x10
};

struct _StoreFrontInfo// Size=0x28 (Id=1751)
{
    struct _StoreData storeData;// Offset=0x0 Size=0x20
    struct _DepartmentData * pDepartments;// Offset=0x20 Size=0x4
    unsigned long dwDepartmentCount;// Offset=0x24 Size=0x4
};

struct _KPROCESSOR_STATE// Size=0xa60 (Id=1752)
{
    struct _CONTEXT ContextFrame;// Offset=0x0 Size=0xa40
    struct _KSPECIAL_REGISTERS SpecialRegisters;// Offset=0xa40 Size=0x20
};

struct _ACCOUNT_TROUBLESHOOT_REQUEST// Size=0x1a (Id=1753)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned long long qwMachineId;// Offset=0x8 Size=0x8
    unsigned short wReservedBytesLength;// Offset=0x10 Size=0x2
    unsigned char * pbReservedBytes;// Offset=0x12 Size=0x4
    struct _ACCOUNT_TROUBLESHOOT_RESPONSE * pResponse;// Offset=0x16 Size=0x4
};

struct _PASSPORT_CHANGE_PASSWORD_REQUEST// Size=0x28 (Id=1754)
{
    struct _PASSPORT_SESSION_TOKEN pSessionToken[1];// Offset=0x0 Size=0x1c
    unsigned short wPassportMemberNameLength;// Offset=0x1c Size=0x2
    char * szPassportMemberName;// Offset=0x1e Size=0x4
    unsigned short wEncryptedPasswordLength;// Offset=0x22 Size=0x2
    unsigned char * pbEncryptedPassword;// Offset=0x24 Size=0x4
};

struct ID3DXMesh// Size=0x4 (Id=1755)
{
    struct ID3DXMeshVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct XECRYPT_DH_1024// Size=0x108 (Id=1756)
{
    struct XECRYPT_DH Dh;// Offset=0x0 Size=0x8
    unsigned long long aqwM[16];// Offset=0x8 Size=0x80
    unsigned long long aqwB[16];// Offset=0x88 Size=0x80
};

struct _XENABLEGUESTSIGNIN_PARAMS// Size=0x4 (Id=1757)
{
    int fEnable;// Offset=0x0 Size=0x4
};

struct _P_PEER_PRESENCE_ITEM// Size=0x1e (Id=1758)
{
    unsigned long long qwUserID;// Offset=0x0 Size=0x8
    unsigned long dwTitleID;// Offset=0x8 Size=0x4
    unsigned long dwState;// Offset=0xc Size=0x4
    struct XNKID MatchSessionID;// Offset=0x10 Size=0x8
    unsigned short cbTitleStuff;// Offset=0x18 Size=0x2
    unsigned char * rgbTitleStuff;// Offset=0x1a Size=0x4
};

struct _XCONTENT_REFRESH_LICENSE_RESPONSE// Size=0x6 (Id=1759)
{
    unsigned short wContentHeaderLength;// Offset=0x0 Size=0x2
    unsigned char * pbContentHeader;// Offset=0x2 Size=0x4
};

struct _XPARTY_CUSTOM_DATA// Size=0x10 (Id=1760)
{
    unsigned long long qwFirst;// Offset=0x0 Size=0x8
    unsigned long long qwSecond;// Offset=0x8 Size=0x8
};

struct _XPARTY_SET_CUSTOM_DATA_PARAMS// Size=0xc (Id=1761)
{
    unsigned long dwVersion;// Offset=0x0 Size=0x4
    unsigned long dwUserIndex;// Offset=0x4 Size=0x4
    struct _XPARTY_CUSTOM_DATA * pCustomData;// Offset=0x8 Size=0x4
};

struct _SHARE_ACCESS// Size=0x7 (Id=1762)
{
    unsigned char OpenCount;// Offset=0x0 Size=0x1
    unsigned char Readers;// Offset=0x1 Size=0x1
    unsigned char Writers;// Offset=0x2 Size=0x1
    unsigned char Deleters;// Offset=0x3 Size=0x1
    unsigned char SharedRead;// Offset=0x4 Size=0x1
    unsigned char SharedWrite;// Offset=0x5 Size=0x1
    unsigned char SharedDelete;// Offset=0x6 Size=0x1
};

struct _XEX_IMPORT_TABLE// Size=0x28 (Id=1763)
{
    unsigned long TableSize;// Offset=0x0 Size=0x4
    struct _HV_IMAGE_IMPORT_TABLE ImportTable;// Offset=0x4 Size=0x24
};

struct _FIND_MEDIA_INSTANCE_URLS_REQUEST// Size=0xc (Id=1764)
{
    unsigned long dwMediaInstanceIdsCount;// Offset=0x0 Size=0x4
    struct _GUID * pMediaInstanceIds;// Offset=0x4 Size=0x4
    struct _FIND_MEDIA_INSTANCE_URLS_RESPONSE * pResults;// Offset=0x8 Size=0x4
};

struct D3DXVECTOR2// Size=0x8 (Id=1765)
{
    float x;// Offset=0x0 Size=0x4
    float y;// Offset=0x4 Size=0x4
};

struct _XMUBYTEN4// Size=0x4 (Id=1766)
{
    union // Size=0x4 (Id=0)
    {
        unsigned char x;// Offset=0x0 Size=0x1
        unsigned char y;// Offset=0x1 Size=0x1
        unsigned char z;// Offset=0x2 Size=0x1
        unsigned char w;// Offset=0x3 Size=0x1
        unsigned int v;// Offset=0x0 Size=0x4
    };
};

struct _CDROM_DISK_DATA// Size=0x4 (Id=1767)
{
    unsigned long DiskData;// Offset=0x0 Size=0x4
};

struct _XMSG_DETAILS_INTERNAL// Size=0x4 (Id=1768)
{
    unsigned short wPropCount;// Offset=0x0 Size=0x2
    unsigned short cbData;// Offset=0x2 Size=0x2
};

struct XGI_RECOVERTITLE_MSG// Size=0x8 (Id=1769)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    struct tagXUSER_TITLE_PLAYED * pTitleToRecover;// Offset=0x4 Size=0x4
};

struct _XPROFILE_CLEAR_ACHIEVEMENTS_RESULT// Size=0xc (Id=1770)
{
    unsigned long dwTitleId;// Offset=0x0 Size=0x4
    unsigned long long qwUserId;// Offset=0x4 Size=0x8
};

struct _GENERIC_LIST_CREATE_REQUEST// Size=0x1b (Id=1771)
{
    unsigned long long xUserId;// Offset=0x0 Size=0x8
    unsigned long nListType;// Offset=0x8 Size=0x4
    unsigned char bNameLength;// Offset=0xc Size=0x1
    unsigned short wXmlLength;// Offset=0xd Size=0x2
    unsigned short * szName;// Offset=0xf Size=0x4
    unsigned short * XmlProperties;// Offset=0x13 Size=0x4
    struct _GENERIC_LIST_CREATE_RESPONSE * pResponse;// Offset=0x17 Size=0x4
};

struct _XSTATS_POST_REQUEST// Size=0xa (Id=1772)
{
    unsigned long dwTitleId;// Offset=0x0 Size=0x4
    unsigned short wNumProcs;// Offset=0x4 Size=0x2
    struct _XSTAT_PROC * pProcs;// Offset=0x6 Size=0x4
};

struct _IMAGE_XEX_DIRECTORY_ENTRY// Size=0x8 (Id=1773)
{
    unsigned long Key;// Offset=0x0 Size=0x4
    unsigned long Value;// Offset=0x4 Size=0x4
};

struct _XMUICO4// Size=0x8 (Id=1774)
{
    union // Size=0x8 (Id=0)
    {
        struct // Size=0x8 (Id=0)
        {
            unsigned long long x:20;// Offset=0x0 Size=0x8 BitOffset=0x0 BitSize=0x14
            unsigned long long y:20;// Offset=0x0 Size=0x8 BitOffset=0x14 BitSize=0x14
            unsigned long long z:20;// Offset=0x0 Size=0x8 BitOffset=0x28 BitSize=0x14
            unsigned long long w:4;// Offset=0x0 Size=0x8 BitOffset=0x3c BitSize=0x4
        };
        unsigned long long v;// Offset=0x0 Size=0x8
    };
};

struct _PARTITION_INFORMATION// Size=0x10 (Id=1775)
{
    union _LARGE_INTEGER StartingOffset;// Offset=0x0 Size=0x8
    union _LARGE_INTEGER PartitionLength;// Offset=0x8 Size=0x8
};

struct _XMATCH_SESSION_SPLIT_REQUEST// Size=0x4c (Id=1776)
{
    unsigned long dwMessageLength;// Offset=0x0 Size=0x4
    struct XNKID SessionID;// Offset=0x4 Size=0x8
    struct XNKID OldSessionID;// Offset=0xc Size=0x8
    unsigned long dwTitleID;// Offset=0x14 Size=0x4
    struct XNADDR HostAddress;// Offset=0x18 Size=0x24
    unsigned long dwNumAttributes;// Offset=0x3c Size=0x4
    unsigned long * pAttributeOffsets;// Offset=0x40 Size=0x4
    struct _XONLINE_ATTRIBUTE * pAttributes;// Offset=0x44 Size=0x4
    struct _XONLINE_MATCH_SPLITRESULT * pSplitResult;// Offset=0x48 Size=0x4
};

struct _XACTIVATION_GET_TITLE_LIST_RESPONSE// Size=0x134 (Id=1777)
{
    unsigned char rgbSignature[256];// Offset=0x0 Size=0x100
    unsigned long long qwMachineId;// Offset=0x100 Size=0x8
    unsigned long long rgUserXuids[4];// Offset=0x108 Size=0x20
    unsigned long dwNonce;// Offset=0x128 Size=0x4
    unsigned long cTitles;// Offset=0x12c Size=0x4
    struct _XACTIVATION_TITLE_LICENSE_INFO * pTitles;// Offset=0x130 Size=0x4
};

struct _XNET_LOGON_SERVICE_INFO// Size=0xc (Id=1778)
{
    unsigned long dwServiceID;// Offset=0x0 Size=0x4
    struct in_addr inaService;// Offset=0x4 Size=0x4
    unsigned short wServicePort;// Offset=0x8 Size=0x2
    unsigned short wFlags;// Offset=0xa Size=0x2
};

struct _XSTAT_PROC// Size=0x8 (Id=1779)
{
    unsigned short wProcId;// Offset=0x0 Size=0x2
    unsigned short wParamCount;// Offset=0x2 Size=0x2
    struct _XSTAT_PROC_PARAM * pParams;// Offset=0x4 Size=0x4
};

struct _XPROFILE_ENUM_TITLES_REQUEST// Size=0x1a (Id=1780)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned long long qwForUserId;// Offset=0x8 Size=0x8
    unsigned short wLocaleId;// Offset=0x10 Size=0x2
    unsigned short wStartingIndex;// Offset=0x12 Size=0x2
    unsigned short wMaxTitles;// Offset=0x14 Size=0x2
    struct XPROFILE_ENUM_TITLES_RESULT * pResults;// Offset=0x16 Size=0x4
};

struct _XMSG_GET_PROP_REQUEST// Size=0x13 (Id=1781)
{
    void * hMsg;// Offset=0x0 Size=0x4
    unsigned short wPropTag;// Offset=0x4 Size=0x2
    unsigned long dwPropValueBufferSize;// Offset=0x6 Size=0x4
    unsigned char pbPropValue[1];// Offset=0xa Size=0x1
    unsigned long pcbPropValue[1];// Offset=0xb Size=0x4
    unsigned long pdwAttachmentFlags[1];// Offset=0xf Size=0x4
};

struct _P_IS_AFFILIATE_REPLY_MSG// Size=0x10 (Id=1782)
{
    HRESULT hr;// Offset=0x0 Size=0x4
    unsigned long long qwAffiliateID;// Offset=0x4 Size=0x8
    unsigned long dwListFlags;// Offset=0xc Size=0x4
};

struct _XSTORAGE_DELETE_REQUEST// Size=0x38 (Id=1783)
{
    struct _XSTORAGE_ACCESS_TOKEN pStorageAccessToken[1];// Offset=0x0 Size=0x1c
    struct _XSTORAGE_PATH_STRING pStoragePathString[1];// Offset=0x1c Size=0x6
    struct _XSTORAGE_ACCESS_TOKEN_READ pStorageAccessTokenRead[1];// Offset=0x22 Size=0xe
    unsigned long dwTitleId;// Offset=0x30 Size=0x4
    unsigned long dwTitleVersion;// Offset=0x34 Size=0x4
};

struct _XWMDRM_CREATE_CERTIFICATE_REPLY// Size=0x6 (Id=1784)
{
    unsigned short wBlockCount;// Offset=0x0 Size=0x2
    struct _XWMDRM_CERTIFICATE_BLOCK * pBlocks;// Offset=0x2 Size=0x4
};

struct XGI_READSTRING_MSG// Size=0x20 (Id=1785)
{
    unsigned long dwTitleId;// Offset=0x0 Size=0x4
    unsigned char __align0[4];// Offset=0x4 Size=0x4
    unsigned long long qwId;// Offset=0x8 Size=0x8
    unsigned long dwUserIndex;// Offset=0x10 Size=0x4
    unsigned short * pwsz;// Offset=0x14 Size=0x4
    unsigned long * pcch;// Offset=0x18 Size=0x4
};

struct _XAMPACKAGEMANAGER_FINDPACKAGECONTAININGXEX_MSG// Size=0x10 (Id=1786)
{
    char * szLookupXEX;// Offset=0x0 Size=0x4
    char * Buffer;// Offset=0x4 Size=0x4
    unsigned int Size;// Offset=0x8 Size=0x4
    unsigned long * pdwPackageVersion;// Offset=0xc Size=0x4
};

struct _XEX_KEY_VAULT_PRIVILEGES// Size=0x10 (Id=1787)
{
    unsigned long long Mask;// Offset=0x0 Size=0x8
    unsigned long long Match;// Offset=0x8 Size=0x8
};

struct _PRESENCE_SET_GAME_SESSION// Size=0x10 (Id=1788)
{
    unsigned long long UserXuid;// Offset=0x0 Size=0x8
    struct XNKID sessionID;// Offset=0x8 Size=0x8
};

union _CERTIFICATE_REVOCATION_LIST// Size=0xc (Id=1789)
{
    union // Size=0xc (Id=0)
    {
        struct _CERTIFICATE_REVOCATION_DATA Data;// Offset=0x0 Size=0xc
        unsigned char DataAsUCHAR[1];// Offset=0x0 Size=0x1
    };
};

struct _XSIGNATURE_CHECK_REVOCATION_RESPONSE// Size=0x8 (Id=1790)
{
    unsigned long dwNumHrs;// Offset=0x0 Size=0x4
    HRESULT * pHrs;// Offset=0x4 Size=0x4
};

struct _FB_ENUM_SENT_REVIEWS_REQUEST// Size=0x14 (Id=1791)
{
    unsigned long long qwSenderID;// Offset=0x0 Size=0x8
    unsigned long dwPageID;// Offset=0x8 Size=0x4
    unsigned long dwResultsPerPage;// Offset=0xc Size=0x4
    struct _FB_ENUM_REVIEWS_RESPONSE * pResults;// Offset=0x10 Size=0x4
};

union _STF_FILE_BOUNDS// Size=0x4 (Id=1792)
{
    unsigned long FileSize;// Offset=0x0 Size=0x4
    unsigned short FirstChildDirectoryIndex;// Offset=0x0 Size=0x2
    unsigned short LastChildDirectoryIndex;// Offset=0x2 Size=0x2
};

struct _XEX_COMPRESSED_DATA_DESCRIPTOR// Size=0x1c (Id=1793)
{
    unsigned long WindowSize;// Offset=0x0 Size=0x4
    struct _XEX_DATA_DESCRIPTOR FirstDescriptor;// Offset=0x4 Size=0x18
};

struct _XMATCH_SESSION_DELETE// Size=0x10 (Id=1794)
{
    unsigned long dwMessageLength;// Offset=0x0 Size=0x4
    struct XNKID SessionID;// Offset=0x4 Size=0x8
    unsigned long dwTitleID;// Offset=0xc Size=0x4
};

struct D3DIndexBuffer// Size=0x20 (Id=1795)
{
    unsigned long Common;// Offset=0x0 Size=0x4
    unsigned long ReferenceCount;// Offset=0x4 Size=0x4
    unsigned long Fence;// Offset=0x8 Size=0x4
    unsigned long ReadFence;// Offset=0xc Size=0x4
    unsigned long Identifier;// Offset=0x10 Size=0x4
    unsigned long BaseFlush;// Offset=0x14 Size=0x4
    unsigned long Address;// Offset=0x18 Size=0x4
    unsigned long Size;// Offset=0x1c Size=0x4
};

struct ID3DXEffectCompiler// Size=0x4 (Id=1796)
{
    struct ID3DXEffectCompilerVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct _XUSER_ESTIMATE_RANK_REQUEST// Size=0x10 (Id=1797)
{
    unsigned long dwTitleID;// Offset=0x0 Size=0x4
    unsigned long dwNumRequests;// Offset=0x4 Size=0x4
    struct _XUSER_RANK_REQUEST * pRankRequests;// Offset=0x8 Size=0x4
    struct _XUSER_ESTIMATE_RANK_RESULTS * pResults;// Offset=0xc Size=0x4
};

struct _XCREATEPROFILEUI_PARAMS// Size=0x10 (Id=1798)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long dwMode;// Offset=0x4 Size=0x4
    unsigned long long xuid;// Offset=0x8 Size=0x8
};

struct _P_DEAD_USER_MSG// Size=0x28 (Id=1799)
{
    struct _BASE_MSG_HEADER MsgHeader;// Offset=0x0 Size=0x20
    unsigned long long qwUserID;// Offset=0x20 Size=0x8
};

struct _OBJECT_SYMBOLIC_LINK// Size=0xc (Id=1800)
{
    void * LinkTargetObject;// Offset=0x0 Size=0x4
    struct _STRING LinkTarget;// Offset=0x4 Size=0x8
};

struct _unnamed_1801// Size=0x1 (Id=1801)
{
    struct // Size=0x1 (Id=0)
    {
        unsigned char Speed:7;// Offset=0x0 Size=0x1 BitOffset=0x0 BitSize=0x7
        unsigned char Enable:1;// Offset=0x0 Size=0x1 BitOffset=0x7 BitSize=0x1
    };
};

struct _unnamed_1802// Size=0x2 (Id=1802)
{
    struct _unnamed_1801 Cpu;// Offset=0x0 Size=0x1
    struct _unnamed_1801 Gpu;// Offset=0x1 Size=0x1
};

struct _unnamed_1803// Size=0x4 (Id=1803)
{
    unsigned short Gain;// Offset=0x0 Size=0x2
    unsigned short Offset;// Offset=0x2 Size=0x2
};

struct _unnamed_1804// Size=0x10 (Id=1804)
{
    struct _unnamed_1803 Cpu;// Offset=0x0 Size=0x4
    struct _unnamed_1803 Gpu;// Offset=0x4 Size=0x4
    struct _unnamed_1803 Edram;// Offset=0x8 Size=0x4
    struct _unnamed_1803 Board;// Offset=0xc Size=0x4
};

union _unnamed_1805// Size=0x10 (Id=1805)
{
    unsigned short TempCalData[8];// Offset=0x0 Size=0x10
    struct _unnamed_1804 Constant;// Offset=0x0 Size=0x10
};

struct _unnamed_1806// Size=0x3 (Id=1806)
{
    unsigned char Cpu;// Offset=0x0 Size=0x1
    unsigned char Gpu;// Offset=0x1 Size=0x1
    unsigned char Edram;// Offset=0x2 Size=0x1
};

struct _unnamed_1807// Size=0x6 (Id=1807)
{
    struct _unnamed_1806 SetPoint;// Offset=0x0 Size=0x3
    struct _unnamed_1806 Overload;// Offset=0x3 Size=0x3
};

struct _unnamed_1808// Size=0x1 (Id=1808)
{
    struct // Size=0x1 (Id=0)
    {
        unsigned char MemoryVoltageNotSetting:1;// Offset=0x0 Size=0x1 BitOffset=0x6 BitSize=0x1
        unsigned char GpuVoltageNotSetting:1;// Offset=0x0 Size=0x1 BitOffset=0x7 BitSize=0x1
    };
};

union _unnamed_1809// Size=0x1 (Id=1809)
{
    unsigned char AsUCHAR;// Offset=0x0 Size=0x1
    struct _unnamed_1808 AsFlags;// Offset=0x0 Size=0x1
};

struct _unnamed_1810// Size=0x4 (Id=1810)
{
    union _unnamed_1809 Flags;// Offset=0x0 Size=0x1
    unsigned char GpuTarget;// Offset=0x1 Size=0x1
    unsigned char MemoryTarget;// Offset=0x2 Size=0x1
    unsigned char CheckSum;// Offset=0x3 Size=0x1
};

struct _unnamed_1811// Size=0x17 (Id=1811)
{
    union _unnamed_1805 Temperature;// Offset=0x0 Size=0x10
    char AnaFuseValue;// Offset=0x10 Size=0x1
    struct _unnamed_1807 Thermal;// Offset=0x11 Size=0x6
};

union _unnamed_1812// Size=0x17 (Id=1812)
{
    unsigned char BackupAsUCHAR[23];// Offset=0x0 Size=0x17
    struct _unnamed_1811 BackupFields;// Offset=0x0 Size=0x17
};

struct _unnamed_1813// Size=0x100 (Id=1813)
{
    unsigned char StructureVersion;// Offset=0x0 Size=0x1
    unsigned char ConfigSource;// Offset=0x1 Size=0x1
    char ClockSelect;// Offset=0x2 Size=0x1
    struct _unnamed_1802 FanOverride;// Offset=0x3 Size=0x2
    char pad1[1];// Offset=0x5 Size=0x1
    struct // Size=0x1 (Id=0)
    {
        char RadioEnable:1;// Offset=0x6 Size=0x1 BitOffset=0x0 BitSize=0x1
        char UseTempCalDefaults:1;// Offset=0x6 Size=0x1 BitOffset=0x1 BitSize=0x1
        char ScreenToolStarted:1;// Offset=0x6 Size=0x1 BitOffset=0x2 BitSize=0x1
        char ScreenToolFinished:1;// Offset=0x6 Size=0x1 BitOffset=0x3 BitSize=0x1
        char ScreenToolExecutionCount:2;// Offset=0x6 Size=0x1 BitOffset=0x4 BitSize=0x2
    };
    char pad2[3];// Offset=0x7 Size=0x3
    union _unnamed_1805 Temperature;// Offset=0xa Size=0x10
    char AnaFuseValue;// Offset=0x1a Size=0x1
    struct _unnamed_1807 Thermal;// Offset=0x1b Size=0x6
    unsigned char pad3[1];// Offset=0x21 Size=0x1
    struct _unnamed_1810 Viper;// Offset=0x22 Size=0x4
    unsigned char pad4[190];// Offset=0x26 Size=0xbe
    union _unnamed_1812 BackupThermalCalData;// Offset=0xe4 Size=0x17
    unsigned char pad5[3];// Offset=0xfb Size=0x3
    unsigned char DoNotUse[2];// Offset=0xfe Size=0x2
};

union _unnamed_1814// Size=0x100 (Id=1814)
{
    char SMCConfig[256];// Offset=0x0 Size=0x100
    struct _unnamed_1813 Fields;// Offset=0x0 Size=0x100
};

struct _XCONFIG_STATIC_SETTINGS// Size=0x10e (Id=1815)
{
    unsigned long CheckSum;// Offset=0x0 Size=0x4
    unsigned long Version;// Offset=0x4 Size=0x4
    char FirstPowerOnDate[5];// Offset=0x8 Size=0x5
    char Reserved;// Offset=0xd Size=0x1
    union _unnamed_1814 SMCBlock;// Offset=0xe Size=0x100
};

struct _XMARKETPLACE_TABLE// Size=0x14 (Id=1816)
{
    unsigned long dwEntryCount;// Offset=0x0 Size=0x4
    unsigned long dwPropertyCount;// Offset=0x4 Size=0x4
    unsigned long dwAlloc;// Offset=0x8 Size=0x4
    struct _XMARKETPLACE_PROPNODE * pProps;// Offset=0xc Size=0x4
    struct _XMARKETPLACE_ELEMENT * pElements;// Offset=0x10 Size=0x4
};

struct _XVOICEMAILUI_RESULTS// Size=0x8 (Id=1817)
{
    unsigned long dwResults;// Offset=0x0 Size=0x4
    unsigned long cbRecordedBufferSize;// Offset=0x4 Size=0x4
};

struct _GENERIC_LIST_MOVE_ITEMS_REQUEST// Size=0x22 (Id=1818)
{
    unsigned long long xUserId;// Offset=0x0 Size=0x8
    unsigned long nListType;// Offset=0x8 Size=0x4
    unsigned long nListId;// Offset=0xc Size=0x4
    struct _FILETIME ftLastModified;// Offset=0x10 Size=0x8
    unsigned short nNumIndexes;// Offset=0x18 Size=0x2
    struct _GENERIC_LIST_INDEX * pIndexes;// Offset=0x1a Size=0x4
    struct _GENERIC_LIST_MOVE_ITEMS_RESPONSE * pResponse;// Offset=0x1e Size=0x4
};

struct InvalidCheckAttribute// Size=0x4 (Id=1819)
{
    long Value;// Offset=0x0 Size=0x4
};

union _unnamed_1820// Size=0x4 (Id=1820)
{
    unsigned long SymbolTableIndex;// Offset=0x0 Size=0x4
    unsigned long VirtualAddress;// Offset=0x0 Size=0x4
};

struct _IMAGE_LINENUMBER// Size=0x6 (Id=1821)
{
    union _unnamed_1820 Type;// Offset=0x0 Size=0x4
    unsigned short Linenumber;// Offset=0x4 Size=0x2
};

struct _OBJECT_DIRECTORY// Size=0x34 (Id=1822)
{
    struct _OBJECT_HEADER_NAME_INFO * HashBuckets[13];// Offset=0x0 Size=0x34
};

struct _VERIFY_TOKEN_RESPONSE_XBOX// Size=0xc (Id=1823)
{
    unsigned long long qwOfferId;// Offset=0x0 Size=0x8
    unsigned long dwOfferType;// Offset=0x8 Size=0x4
};

struct XGI_SESSIONSEARCHEX_MSG// Size=0x24 (Id=1824)
{
    unsigned long dwProcedureIndex;// Offset=0x0 Size=0x4
    unsigned long dwUserIndex;// Offset=0x4 Size=0x4
    unsigned long dwNumResults;// Offset=0x8 Size=0x4
    unsigned short wNumProperties;// Offset=0xc Size=0x2
    unsigned short wNumContexts;// Offset=0xe Size=0x2
    struct _XUSER_PROPERTY * pSearchProperties;// Offset=0x10 Size=0x4
    struct _XUSER_CONTEXT * pSearchContexts;// Offset=0x14 Size=0x4
    unsigned long cbResultsBuffer;// Offset=0x18 Size=0x4
    struct _XSESSION_SEARCHRESULT_HEADER * pSearchResults;// Offset=0x1c Size=0x4
    unsigned long dwNumUsers;// Offset=0x20 Size=0x4
};

struct _OBJECT_HANDLE_TABLE// Size=0x38 (Id=1825)
{
    long HandleCount;// Offset=0x0 Size=0x4
    unsigned long FirstFreeTableOffset;// Offset=0x4 Size=0x4
    unsigned long TableAllocation;// Offset=0x8 Size=0x4
    void *** RootTable;// Offset=0xc Size=0x4
    void ** BuiltinRootTable[8];// Offset=0x10 Size=0x20
    unsigned long SpinLock;// Offset=0x30 Size=0x4
    unsigned char PoolType;// Offset=0x34 Size=0x1
    unsigned char Discriminant;// Offset=0x35 Size=0x1
    unsigned char Terminating;// Offset=0x36 Size=0x1
};

struct XACHIEVEMENT_DETAILS// Size=0x24 (Id=1826)
{
    unsigned long dwId;// Offset=0x0 Size=0x4
    unsigned short * pwszLabel;// Offset=0x4 Size=0x4
    unsigned short * pwszDescription;// Offset=0x8 Size=0x4
    unsigned short * pwszUnachieved;// Offset=0xc Size=0x4
    unsigned long dwImageId;// Offset=0x10 Size=0x4
    unsigned long dwCred;// Offset=0x14 Size=0x4
    struct _FILETIME ftAchieved;// Offset=0x18 Size=0x8
    unsigned long dwFlags;// Offset=0x20 Size=0x4
};

struct IUnknown// Size=0x4 (Id=1827)
{
    struct IUnknownVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

union _unnamed_1828// Size=0x1 (Id=1828)
{
    struct _XCONTENT_TRANSFERFLAGS Bits;// Offset=0x0 Size=0x1
    unsigned char FlagsAsBYTE;// Offset=0x0 Size=0x1
};

struct _XCONTENT_METADATA// Size=0x93d6 (Id=1829)
{
    unsigned long ContentType;// Offset=0x0 Size=0x4
    unsigned long ContentMetadataVersion;// Offset=0x4 Size=0x4
    union _LARGE_INTEGER ContentSize;// Offset=0x8 Size=0x8
    struct _XEX_EXECUTION_ID ExecutionId;// Offset=0x10 Size=0x18
    unsigned char ConsoleId[5];// Offset=0x28 Size=0x5
    unsigned long long Creator;// Offset=0x2d Size=0x8
    union // Size=0x24 (Id=0)
    {
        struct _STF_VOLUME_DESCRIPTOR StfsVolumeDescriptor;// Offset=0x35 Size=0x24
        struct _SVOD_DEVICE_DESCRIPTOR SvodVolumeDescriptor;// Offset=0x35 Size=0x24
    };
    unsigned long DataFiles;// Offset=0x59 Size=0x4
    unsigned long long DataFilesSize;// Offset=0x5d Size=0x8
    enum _XCONTENT_VOLUME_TYPE VolumeType;// Offset=0x65 Size=0x4
    unsigned char Reserved2[44];// Offset=0x69 Size=0x2c
    struct _XCONTENT_METADATA_MEDIA_DATA MediaData;// Offset=0x95 Size=0x24
    unsigned char DeviceId[20];// Offset=0xb9 Size=0x14
    wchar_t DisplayName[9][128];// Offset=0xcd Size=0x900
    wchar_t Description[9][128];// Offset=0x9cd Size=0x900
    wchar_t Publisher[64];// Offset=0x12cd Size=0x80
    wchar_t TitleName[64];// Offset=0x134d Size=0x80
    union _unnamed_1828 Flags;// Offset=0x13cd Size=0x1
    unsigned long ThumbnailSize;// Offset=0x13ce Size=0x4
    unsigned long TitleThumbnailSize;// Offset=0x13d2 Size=0x4
    unsigned char Thumbnail[15616];// Offset=0x13d6 Size=0x3d00
    wchar_t DisplayNameEx[3][128];// Offset=0x50d6 Size=0x300
    unsigned char TitleThumbnail[15616];// Offset=0x53d6 Size=0x3d00
    wchar_t DescriptionEx[3][128];// Offset=0x90d6 Size=0x300
};

struct _P_ACCEPT_REQUEST_MSG// Size=0x30 (Id=1830)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwSenderID;// Offset=0x20 Size=0x8
    unsigned long long qwBuddyID;// Offset=0x28 Size=0x8
};

struct _XPARTY_USER_INFO_INTERNAL// Size=0x80 (Id=1831)
{
    unsigned long long Xuid;// Offset=0x0 Size=0x8
    char GamerTag[16];// Offset=0x8 Size=0x10
    unsigned long dwUserIndex;// Offset=0x18 Size=0x4
    enum XONLINE_NAT_TYPE NatType;// Offset=0x1c Size=0x4
    unsigned long dwTitleId;// Offset=0x20 Size=0x4
    unsigned long dwFlags;// Offset=0x24 Size=0x4
    struct _XSESSION_INFO SessionInfo;// Offset=0x28 Size=0x3c
    unsigned char __align0[4];// Offset=0x64 Size=0x4
    struct _XPARTY_CUSTOM_DATA CustomData;// Offset=0x68 Size=0x10
    unsigned long dwPeerId;// Offset=0x78 Size=0x4
    unsigned long dwMuteMask;// Offset=0x7c Size=0x4
};

struct _unnamed_1832// Size=0x10 (Id=1832)
{
    unsigned long BeginAddress;// Offset=0x0 Size=0x4
    unsigned long EndAddress;// Offset=0x4 Size=0x4
    unsigned long HandlerAddress;// Offset=0x8 Size=0x4
    unsigned long JumpTarget;// Offset=0xc Size=0x4
};

struct _SCOPE_TABLE// Size=0x14 (Id=1833)
{
    unsigned long Count;// Offset=0x0 Size=0x4
    struct _unnamed_1832 ScopeRecord[1];// Offset=0x4 Size=0x10
};

struct XGI_SESSIONCREATE_MSG// Size=0x1c (Id=1834)
{
    struct tagSESSION_STRUCT * pSessionStruct;// Offset=0x0 Size=0x4
    unsigned long dwFlags;// Offset=0x4 Size=0x4
    unsigned long dwMaxPublicSlots;// Offset=0x8 Size=0x4
    unsigned long dwMaxPrivateSlots;// Offset=0xc Size=0x4
    unsigned long dwUserIndex;// Offset=0x10 Size=0x4
    struct _XSESSION_INFO * pSessionInfo;// Offset=0x14 Size=0x4
    unsigned long long * pqwSessionNonce;// Offset=0x18 Size=0x4
};

struct _XONLINE_STATS_ENUM_BY_RANK_REQUEST// Size=0x1c (Id=1835)
{
    unsigned long dwTitleId;// Offset=0x0 Size=0x4
    unsigned long long qwRank;// Offset=0x4 Size=0x8
    unsigned long dwPageSize;// Offset=0xc Size=0x4
    unsigned long dwNumSpecs;// Offset=0x10 Size=0x4
    struct _XONLINE_STATS_SPEC * pSpecs;// Offset=0x14 Size=0x4
    struct _XONLINE_STATS_ENUM_RESULTS * pResults;// Offset=0x18 Size=0x4
};

struct ID3DXSPMeshVtbl// Size=0x4c (Id=1836)
{
    HRESULT  ( * QueryInterface)(struct ID3DXSPMesh * ,const struct _GUID * ,void ** );// Offset=0x0 Size=0x4
    unsigned long  ( * AddRef)(struct ID3DXSPMesh * );// Offset=0x4 Size=0x4
    unsigned long  ( * Release)(struct ID3DXSPMesh * );// Offset=0x8 Size=0x4
    unsigned long  ( * GetNumFaces)(struct ID3DXSPMesh * );// Offset=0xc Size=0x4
    unsigned long  ( * GetNumVertices)(struct ID3DXSPMesh * );// Offset=0x10 Size=0x4
    unsigned long  ( * GetFVF)(struct ID3DXSPMesh * );// Offset=0x14 Size=0x4
    HRESULT  ( * GetDeclaration)(struct ID3DXSPMesh * ,struct _D3DVERTEXELEMENT9 * );// Offset=0x18 Size=0x4
    unsigned long  ( * GetOptions)(struct ID3DXSPMesh * );// Offset=0x1c Size=0x4
    HRESULT  ( * GetDevice)(struct ID3DXSPMesh * ,struct D3DDevice ** );// Offset=0x20 Size=0x4
    HRESULT  ( * CloneMeshFVF)(struct ID3DXSPMesh * ,unsigned long ,unsigned long ,struct D3DDevice * ,unsigned long * ,unsigned long * ,struct ID3DXMesh ** );// Offset=0x24 Size=0x4
    HRESULT  ( * CloneMesh)(struct ID3DXSPMesh * ,unsigned long ,struct _D3DVERTEXELEMENT9 * ,struct D3DDevice * ,unsigned long * ,unsigned long * ,struct ID3DXMesh ** );// Offset=0x28 Size=0x4
    HRESULT  ( * ClonePMeshFVF)(struct ID3DXSPMesh * ,unsigned long ,unsigned long ,struct D3DDevice * ,unsigned long * ,float * ,struct ID3DXPMesh ** );// Offset=0x2c Size=0x4
    HRESULT  ( * ClonePMesh)(struct ID3DXSPMesh * ,unsigned long ,struct _D3DVERTEXELEMENT9 * ,struct D3DDevice * ,unsigned long * ,float * ,struct ID3DXPMesh ** );// Offset=0x30 Size=0x4
    HRESULT  ( * ReduceFaces)(struct ID3DXSPMesh * ,unsigned long );// Offset=0x34 Size=0x4
    HRESULT  ( * ReduceVertices)(struct ID3DXSPMesh * ,unsigned long );// Offset=0x38 Size=0x4
    unsigned long  ( * GetMaxFaces)(struct ID3DXSPMesh * );// Offset=0x3c Size=0x4
    unsigned long  ( * GetMaxVertices)(struct ID3DXSPMesh * );// Offset=0x40 Size=0x4
    HRESULT  ( * GetVertexAttributeWeights)(struct ID3DXSPMesh * ,struct _D3DXATTRIBUTEWEIGHTS * );// Offset=0x44 Size=0x4
    HRESULT  ( * GetVertexWeights)(struct ID3DXSPMesh * ,float * );// Offset=0x48 Size=0x4
};

struct _P_INVITE_2_MSG_INTERNAL// Size=0x3c (Id=1837)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwUserID;// Offset=0x20 Size=0x8
    unsigned long long qwSenderContext;// Offset=0x28 Size=0x8
    unsigned long dwTitleID;// Offset=0x30 Size=0x4
    unsigned long dwMessageFlags;// Offset=0x34 Size=0x4
    unsigned short cInvitees;// Offset=0x38 Size=0x2
    unsigned short cbDetails;// Offset=0x3a Size=0x2
};

struct _unnamed_1838// Size=0x4 (Id=1838)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit31:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long bit30:1;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x1
        long bit6_29:24;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x18
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _unnamed_1839// Size=0x4 (Id=1839)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit31:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long bit30:1;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x1
        long bit16_29:14;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0xe
        unsigned long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _unnamed_1840// Size=0x4 (Id=1840)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit31:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long bit30:1;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x1
        unsigned long bit6_29:24;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x18
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _unnamed_1841// Size=0x4 (Id=1841)
{
    struct // Size=0x4 (Id=0)
    {
        long bit16_31:16;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x10
        unsigned long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _unnamed_1842// Size=0x4 (Id=1842)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit16_31:16;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x10
        unsigned long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit10:1;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x1
        unsigned long bit9:1;// Offset=0x0 Size=0x4 BitOffset=0x16 BitSize=0x1
        unsigned long bit6_8:3;// Offset=0x0 Size=0x4 BitOffset=0x17 BitSize=0x3
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _unnamed_1843// Size=0x4 (Id=1843)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit30_31:2;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x2
        long bit16_29:14;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0xe
        unsigned long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _unnamed_1844// Size=0x4 (Id=1844)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit31:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long bit21_30:10;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0xa
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _unnamed_1845// Size=0x4 (Id=1845)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit20_31:12;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xc
        unsigned long bit16_19:4;// Offset=0x0 Size=0x4 BitOffset=0xc BitSize=0x4
        unsigned long bit14_15:2;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x2
        unsigned long bit11_13:3;// Offset=0x0 Size=0x4 BitOffset=0x12 BitSize=0x3
        unsigned long bit10:1;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x1
        unsigned long bit9:1;// Offset=0x0 Size=0x4 BitOffset=0x16 BitSize=0x1
        unsigned long bit6_8:3;// Offset=0x0 Size=0x4 BitOffset=0x17 BitSize=0x3
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _unnamed_1846// Size=0x4 (Id=1846)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit16_31:16;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x10
        unsigned long bit12_15:4;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x4
        unsigned long bit0_11:12;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0xc
    };
};

struct _unnamed_1847// Size=0x4 (Id=1847)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit14_31:18;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x12
        unsigned long bit11_13:3;// Offset=0x0 Size=0x4 BitOffset=0x12 BitSize=0x3
        unsigned long bit9_10:2;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x2
        unsigned long bit6_8:3;// Offset=0x0 Size=0x4 BitOffset=0x17 BitSize=0x3
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _unnamed_1848// Size=0x4 (Id=1848)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit31:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long bit21_30:10;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0xa
        unsigned long bit11_20:10;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0xa
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _unnamed_1849// Size=0x4 (Id=1849)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit20_31:12;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xc
        unsigned long bit12_19:8;// Offset=0x0 Size=0x4 BitOffset=0xc BitSize=0x8
        unsigned long bit11:1;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0x1
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _unnamed_1850// Size=0x4 (Id=1850)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit31:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long bit21_30:10;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0xa
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long bit15:1;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x1
        unsigned long bit7_14:8;// Offset=0x0 Size=0x4 BitOffset=0x11 BitSize=0x8
        unsigned long bit6:1;// Offset=0x0 Size=0x4 BitOffset=0x19 BitSize=0x1
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _unnamed_1851// Size=0x4 (Id=1851)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit31:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long bit30:1;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x1
        unsigned long bit21_29:9;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x9
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _unnamed_1852// Size=0x4 (Id=1852)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit31:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long bit22_30:9;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x9
        unsigned long bit21:1;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0x1
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long bit10_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _unnamed_1853// Size=0x4 (Id=1853)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit31:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long bit26_30:5;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x5
        unsigned long bit21_25:5;// Offset=0x0 Size=0x4 BitOffset=0x6 BitSize=0x5
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _unnamed_1854// Size=0x4 (Id=1854)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit31:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long bit30:1;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x1
        unsigned long bit27_29:3;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x3
        unsigned long bit21_26:6;// Offset=0x0 Size=0x4 BitOffset=0x5 BitSize=0x6
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _unnamed_1855// Size=0x4 (Id=1855)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit31:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long bit27_30:4;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x4
        unsigned long bit21_26:6;// Offset=0x0 Size=0x4 BitOffset=0x5 BitSize=0x6
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _unnamed_1856// Size=0x4 (Id=1856)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit26_31:6;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x6
        unsigned long bit21_25:5;// Offset=0x0 Size=0x4 BitOffset=0x6 BitSize=0x5
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _unnamed_1857// Size=0x4 (Id=1857)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit26_31:6;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x6
        unsigned long bit22_25:4;// Offset=0x0 Size=0x4 BitOffset=0x6 BitSize=0x4
        unsigned long bit21:1;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0x1
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _unnamed_1858// Size=0x4 (Id=1858)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit21_31:11;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xb
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _unnamed_1859// Size=0x4 (Id=1859)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit22_31:10;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xa
        unsigned long bit21:1;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0x1
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _unnamed_1860// Size=0x4 (Id=1860)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit30_31:2;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x2
        unsigned long bit28_29:2;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x2
        unsigned long bit26_27:2;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x2
        unsigned long bit21_25:5;// Offset=0x0 Size=0x4 BitOffset=0x6 BitSize=0x5
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _unnamed_1861// Size=0x4 (Id=1861)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit30_31:2;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x2
        unsigned long bit28_29:2;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x2
        unsigned long bit27:1;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x1
        unsigned long bit26:1;// Offset=0x0 Size=0x4 BitOffset=0x5 BitSize=0x1
        unsigned long bit22_25:4;// Offset=0x0 Size=0x4 BitOffset=0x6 BitSize=0x4
        unsigned long bit21:1;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0x1
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _unnamed_1862// Size=0x4 (Id=1862)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit30_31:2;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x2
        unsigned long bit28_29:2;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x2
        unsigned long bit27:1;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x1
        unsigned long bit26:1;// Offset=0x0 Size=0x4 BitOffset=0x5 BitSize=0x1
        unsigned long bit23_25:3;// Offset=0x0 Size=0x4 BitOffset=0x6 BitSize=0x3
        unsigned long bit22:1;// Offset=0x0 Size=0x4 BitOffset=0x9 BitSize=0x1
        unsigned long bit21:1;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0x1
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        long bit11_15:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _unnamed_1863// Size=0x4 (Id=1863)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit30_31:2;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x2
        unsigned long bit28_29:2;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x2
        unsigned long bit26_27:2;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x2
        unsigned long bit21_25:5;// Offset=0x0 Size=0x4 BitOffset=0x6 BitSize=0x5
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long bit14_15:2;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x2
        unsigned long bit11_13:3;// Offset=0x0 Size=0x4 BitOffset=0x12 BitSize=0x3
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

struct _unnamed_1864// Size=0x4 (Id=1864)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long bit30_31:2;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x2
        unsigned long bit28_29:2;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x2
        unsigned long bit26_27:2;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x2
        unsigned long bit24_25:2;// Offset=0x0 Size=0x4 BitOffset=0x6 BitSize=0x2
        unsigned long bit21_23:3;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x3
        unsigned long bit16_20:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long bit12_15:4;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x4
        unsigned long bit11:1;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0x1
        unsigned long bit6_10:5;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x5
        unsigned long bit0_5:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
    };
};

union _PPC_INSTRUCTION// Size=0x4 (Id=1865)
{
    unsigned long Long;// Offset=0x0 Size=0x4
    unsigned char Byte[4];// Offset=0x0 Size=0x4
    struct _unnamed_1838 i_f;// Offset=0x0 Size=0x4
    struct _unnamed_1839 b_f;// Offset=0x0 Size=0x4
    struct _unnamed_1840 sc_f;// Offset=0x0 Size=0x4
    struct _unnamed_1841 d_f1;// Offset=0x0 Size=0x4
    struct _unnamed_1842 d_f2;// Offset=0x0 Size=0x4
    struct _unnamed_1843 ds_f;// Offset=0x0 Size=0x4
    struct _unnamed_1844 x_f1;// Offset=0x0 Size=0x4
    struct _unnamed_1845 x_f2;// Offset=0x0 Size=0x4
    struct _unnamed_1846 x_f3;// Offset=0x0 Size=0x4
    struct _unnamed_1844 xl_f1;// Offset=0x0 Size=0x4
    struct _unnamed_1847 xl_f2;// Offset=0x0 Size=0x4
    struct _unnamed_1848 xfx_f1;// Offset=0x0 Size=0x4
    struct _unnamed_1849 xfx_f2;// Offset=0x0 Size=0x4
    struct _unnamed_1850 xfl_f;// Offset=0x0 Size=0x4
    struct _unnamed_1851 xs_f;// Offset=0x0 Size=0x4
    struct _unnamed_1852 xo_f;// Offset=0x0 Size=0x4
    struct _unnamed_1853 a_f;// Offset=0x0 Size=0x4
    struct _unnamed_1853 m_f;// Offset=0x0 Size=0x4
    struct _unnamed_1854 md_f;// Offset=0x0 Size=0x4
    struct _unnamed_1855 mds_f;// Offset=0x0 Size=0x4
    struct _unnamed_1856 va_f1;// Offset=0x0 Size=0x4
    struct _unnamed_1857 va_f2;// Offset=0x0 Size=0x4
    struct _unnamed_1858 vx_f;// Offset=0x0 Size=0x4
    struct _unnamed_1859 vxr_f;// Offset=0x0 Size=0x4
    struct _unnamed_1860 x2_f;// Offset=0x0 Size=0x4
    struct _unnamed_1861 vx2_f1;// Offset=0x0 Size=0x4
    struct _unnamed_1862 vx2_f2;// Offset=0x0 Size=0x4
    struct _unnamed_1863 vx2_f3;// Offset=0x0 Size=0x4
    struct _unnamed_1864 vx2_f4;// Offset=0x0 Size=0x4
};

struct _BACKGROUND_DOWNLOAD_ITEM// Size=0x278 (Id=1866)
{
    enum _XMARKETPLACE_MEDIA_TYPE MediaType;// Offset=0x0 Size=0x4
    unsigned long dwEffectiveTitleId;// Offset=0x4 Size=0x4
    unsigned long long xuid;// Offset=0x8 Size=0x8
    unsigned char consoleId[5];// Offset=0x10 Size=0x5
    unsigned char contentId[20];// Offset=0x15 Size=0x14
    unsigned char __align0[3];// Offset=0x29 Size=0x3
    unsigned long dwState;// Offset=0x2c Size=0x4
    unsigned long dwRatingId;// Offset=0x30 Size=0x4
    struct _GUID mediaId;// Offset=0x34 Size=0x10
    struct _GUID mediaInstanceId;// Offset=0x44 Size=0x10
    struct _GUID offerId;// Offset=0x54 Size=0x10
    wchar_t wszOfferName[128];// Offset=0x64 Size=0x100
    char szPath[260];// Offset=0x164 Size=0x104
    union _LARGE_INTEGER liInstallSize;// Offset=0x268 Size=0x8
    unsigned long dwPercentCompleted;// Offset=0x270 Size=0x4
    int bRepeatDownload;// Offset=0x274 Size=0x4
};

struct _XMFLOAT2// Size=0x8 (Id=1867)
{
    float x;// Offset=0x0 Size=0x4
    float y;// Offset=0x4 Size=0x4
};

struct _XMATCH_SEARCHRESULT// Size=0x54 (Id=1868)
{
    unsigned long dwResultLength;// Offset=0x0 Size=0x4
    struct XNKID SessionID;// Offset=0x4 Size=0x8
    struct XNADDR HostAddress;// Offset=0xc Size=0x24
    struct XNKEY KeyExchangeKey;// Offset=0x30 Size=0x10
    unsigned long dwPublicOpen;// Offset=0x40 Size=0x4
    unsigned long dwPrivateOpen;// Offset=0x44 Size=0x4
    unsigned long dwPublicFilled;// Offset=0x48 Size=0x4
    unsigned long dwPrivateFilled;// Offset=0x4c Size=0x4
    unsigned long dwNumAttributes;// Offset=0x50 Size=0x4
};

struct _unnamed_1869// Size=0x8 (Id=1869)
{
    long HighPart;// Offset=0x0 Size=0x4
    unsigned long LowPart;// Offset=0x4 Size=0x4
};

union _LARGE_INTEGER// Size=0x8 (Id=1870)
{
    long HighPart;// Offset=0x0 Size=0x4
    unsigned long LowPart;// Offset=0x4 Size=0x4
    struct _unnamed_1869 u;// Offset=0x0 Size=0x8
    long long QuadPart;// Offset=0x0 Size=0x8
};

struct _DVD_XGD2_DISC_AUTH_RESULT_IO_ERROR// Size=0x18 (Id=1871)
{
    long Status;// Offset=0x0 Size=0x4
    unsigned long ChallengeIndex;// Offset=0x4 Size=0x4
    unsigned long FinalChallenge;// Offset=0x8 Size=0x4
    unsigned char Entry[12];// Offset=0xc Size=0xc
};

struct _XARB_REGISTER_REQUEST// Size=0x1e (Id=1872)
{
    unsigned short wProtocolVersion;// Offset=0x0 Size=0x2
    unsigned short wFlags;// Offset=0x2 Size=0x2
    unsigned long dwTitleId;// Offset=0x4 Size=0x4
    unsigned long long qwSessionId;// Offset=0x8 Size=0x8
    unsigned long long qwSessionNonce;// Offset=0x10 Size=0x8
    unsigned short wMaxSessionSeconds;// Offset=0x18 Size=0x2
    struct _XARB_REGISTER_REPLY * pReply;// Offset=0x1a Size=0x4
};

struct _P_TEAM_JOIN_MSG// Size=0x39 (Id=1873)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwUserID;// Offset=0x20 Size=0x8
    unsigned long dwTitleID;// Offset=0x28 Size=0x4
    unsigned long long qwTeamID;// Offset=0x2c Size=0x8
    unsigned long dwRecruitMsgID;// Offset=0x34 Size=0x4
    unsigned char bAnswer;// Offset=0x38 Size=0x1
};

struct XVOICE_DISABLETESTHOOKPARAM// Size=0x8 (Id=1874)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    enum _XVOICETESTHOOKTYPE eHookType;// Offset=0x4 Size=0x4
};

struct _GET_USER_SUBSCRIPTION_DETAILS_REQUEST// Size=0x22 (Id=1875)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned long long qwMachineId;// Offset=0x8 Size=0x8
    unsigned long long qwOfferId;// Offset=0x10 Size=0x8
    unsigned short wInstanceIdLength;// Offset=0x18 Size=0x2
    unsigned short * wszInstanceId;// Offset=0x1a Size=0x4
    struct _GET_USER_SUBSCRIPTION_DETAILS_RESPONSE * pResponse;// Offset=0x1e Size=0x4
};

struct _XSTORAGE_DOWNLOAD_RESPONSE// Size=0x98 (Id=1876)
{
    unsigned long dwTitleId;// Offset=0x0 Size=0x4
    unsigned long dwTitleVersion;// Offset=0x4 Size=0x4
    unsigned long long qwOwnerId;// Offset=0x8 Size=0x8
    unsigned char bCountryId;// Offset=0x10 Size=0x1
    unsigned long long qwXboxId;// Offset=0x11 Size=0x8
    unsigned char bCompressionType;// Offset=0x19 Size=0x1
    unsigned long dwContentType;// Offset=0x1a Size=0x4
    unsigned char rgbLiveSignature[100];// Offset=0x1e Size=0x64
    unsigned long dwInstallSize;// Offset=0x82 Size=0x4
    struct _FILETIME ftCreated;// Offset=0x86 Size=0x8
    unsigned short wAttributesSize;// Offset=0x8e Size=0x2
    unsigned long dwPackageSize;// Offset=0x90 Size=0x4
    unsigned char * prgbAttributes;// Offset=0x94 Size=0x4
};

struct _DVD_XGD2_DISC_AUTH_RESULT_CHALLENGE// Size=0x14 (Id=1877)
{
    unsigned long ChallengeIndex;// Offset=0x0 Size=0x4
    unsigned long DriveResponse;// Offset=0x4 Size=0x4
    unsigned char Entry[12];// Offset=0x8 Size=0xc
};

struct _CONSOLE_PUBLIC_KEY// Size=0x84 (Id=1878)
{
    unsigned char PublicExponent[4];// Offset=0x0 Size=0x4
    unsigned char Modulus[128];// Offset=0x4 Size=0x80
};

struct _XCONFIG_STATISTIC_SETTINGS// Size=0x5d8 (Id=1879)
{
    unsigned long CheckSum;// Offset=0x0 Size=0x4
    unsigned long Version;// Offset=0x4 Size=0x4
    char XUIDMACAddress[6];// Offset=0x8 Size=0x6
    char Reserved[2];// Offset=0xe Size=0x2
    unsigned long XUIDCount;// Offset=0x10 Size=0x4
    unsigned char ODDFailures[32];// Offset=0x14 Size=0x20
    unsigned char BugCheckData[101];// Offset=0x34 Size=0x65
    unsigned char TemperatureData[200];// Offset=0x99 Size=0xc8
    char Unused[467];// Offset=0x161 Size=0x1d3
    char HDDSmartData[512];// Offset=0x334 Size=0x200
    char UEMErrors[100];// Offset=0x534 Size=0x64
    char FPMErrors[56];// Offset=0x598 Size=0x38
    unsigned long long LastReportTime;// Offset=0x5d0 Size=0x8
};

struct _PASSPORT_GET_USER_DATA_RESPONSE// Size=0x51 (Id=1880)
{
    unsigned short wFirstNameLength;// Offset=0x0 Size=0x2
    unsigned short * wszFirstName;// Offset=0x2 Size=0x4
    unsigned short wLastNameLength;// Offset=0x6 Size=0x2
    unsigned short * wszLastName;// Offset=0x8 Size=0x4
    struct _FILETIME ftBirthdate;// Offset=0xc Size=0x8
    struct _ADDRESS_INFO address;// Offset=0x14 Size=0x24
    struct _PHONE_INFO phone;// Offset=0x38 Size=0x12
    unsigned char bCountryId;// Offset=0x4a Size=0x1
    unsigned short wEmailLength;// Offset=0x4b Size=0x2
    unsigned short * wszEmail;// Offset=0x4d Size=0x4
};

struct _RTL_HEAP_USAGE_ENTRY// Size=0x10 (Id=1881)
{
    struct _RTL_HEAP_USAGE_ENTRY * Next;// Offset=0x0 Size=0x4
    void * Address;// Offset=0x4 Size=0x4
    unsigned long Size;// Offset=0x8 Size=0x4
    unsigned short AllocatorBackTraceIndex;// Offset=0xc Size=0x2
    unsigned short TagIndex;// Offset=0xe Size=0x2
};

struct _XMFLOAT4X4// Size=0x40 (Id=1882)
{
    union // Size=0x40 (Id=0)
    {
        float _11;// Offset=0x0 Size=0x4
        float _12;// Offset=0x4 Size=0x4
        float _13;// Offset=0x8 Size=0x4
        float _14;// Offset=0xc Size=0x4
        float _21;// Offset=0x10 Size=0x4
        float _22;// Offset=0x14 Size=0x4
        float _23;// Offset=0x18 Size=0x4
        float _24;// Offset=0x1c Size=0x4
        float _31;// Offset=0x20 Size=0x4
        float _32;// Offset=0x24 Size=0x4
        float _33;// Offset=0x28 Size=0x4
        float _34;// Offset=0x2c Size=0x4
        float _41;// Offset=0x30 Size=0x4
        float _42;// Offset=0x34 Size=0x4
        float _43;// Offset=0x38 Size=0x4
        float _44;// Offset=0x3c Size=0x4
        float m[4][4];// Offset=0x0 Size=0x40
    };
};

struct _PERFPIPE_TRANSFER_LENGTH_INFORMATION// Size=0x8 (Id=1883)
{
    unsigned long MaximumTransferLength;// Offset=0x0 Size=0x4
    unsigned long OptimalTransferLength;// Offset=0x4 Size=0x4
};

struct _XBOX_LIBRARY_VERSION// Size=0x8 (Id=1884)
{
    unsigned short wMajorVersion;// Offset=0x0 Size=0x2
    unsigned short wMinorVersion;// Offset=0x2 Size=0x2
    unsigned short wBuildNumber;// Offset=0x4 Size=0x2
    unsigned short wQFENumber;// Offset=0x6 Size=0x2
};

struct _ACCOUNT_TROUBLESHOOT_RESPONSE// Size=0x2a (Id=1885)
{
    int fNewTOS;// Offset=0x0 Size=0x4
    int fNameChangeRequired;// Offset=0x4 Size=0x4
    int fDowngraded;// Offset=0x8 Size=0x4
    struct _FILETIME suspendedUntil;// Offset=0xc Size=0x8
    unsigned short wTotalDaysSuspended;// Offset=0x14 Size=0x2
    struct _FILETIME voiceBannedUntil;// Offset=0x16 Size=0x8
    unsigned short wTotalDaysVoiceBanned;// Offset=0x1e Size=0x2
    unsigned long dwBillingHr;// Offset=0x20 Size=0x4
    unsigned short wReservedBytesLength;// Offset=0x24 Size=0x2
    unsigned char * pbReservedBytes;// Offset=0x26 Size=0x4
};

struct _XSHOWUPDATERUI_PARAMS// Size=0x428 (Id=1886)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long dwUpdateFlags;// Offset=0x4 Size=0x4
    char szUpdatePath[260];// Offset=0x8 Size=0x104
    struct _XEX_EXECUTION_ID ExecutionId;// Offset=0x10c Size=0x18
    char szTitleToLaunchWhenDone[256];// Offset=0x124 Size=0x100
    char szTitleToLaunchDDrive[256];// Offset=0x224 Size=0x100
    char szPackageInstallDevice[260];// Offset=0x324 Size=0x104
};

struct _DOWNLOAD_QUEUE_QUERY_ITEMS_RESPONSE// Size=0x10 (Id=1887)
{
    unsigned short wTotalItems;// Offset=0x0 Size=0x2
    struct _FILETIME ftLastModified;// Offset=0x2 Size=0x8
    unsigned short wNumItems;// Offset=0xa Size=0x2
    struct _GENERIC_LIST_ITEM * pItems;// Offset=0xc Size=0x4
};

struct _XMCOLOR// Size=0x4 (Id=1888)
{
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            unsigned int b:8;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x8
            unsigned int g:8;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x8
            unsigned int r:8;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x8
            unsigned int a:8;// Offset=0x0 Size=0x4 BitOffset=0x18 BitSize=0x8
        };
        unsigned int c;// Offset=0x0 Size=0x4
    };
};

struct ID3DXFileData// Size=0x4 (Id=1889)
{
    struct ID3DXFileDataVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct _KTHREAD// Size=0xab0 (Id=1890)
{
    struct _DISPATCHER_HEADER Header;// Offset=0x0 Size=0x10
    struct _LIST_ENTRY MutantListHead;// Offset=0x10 Size=0x8
    struct _KTIMER Timer;// Offset=0x18 Size=0x28
    struct _KWAIT_BLOCK TimerWaitBlock;// Offset=0x40 Size=0x18
    unsigned long KernelTime;// Offset=0x58 Size=0x4
    void * StackBase;// Offset=0x5c Size=0x4
    void * StackLimit;// Offset=0x60 Size=0x4
    void * KernelStack;// Offset=0x64 Size=0x4
    void * TlsData;// Offset=0x68 Size=0x4
    unsigned char State;// Offset=0x6c Size=0x1
    unsigned char Alerted[2];// Offset=0x6d Size=0x2
    unsigned char Alertable;// Offset=0x6f Size=0x1
    unsigned char Priority;// Offset=0x70 Size=0x1
    unsigned char FpuExceptionEnable;// Offset=0x71 Size=0x1
    unsigned char CreateProcessType;// Offset=0x72 Size=0x1
    unsigned char CurrentProcessType;// Offset=0x73 Size=0x1
    struct _LIST_ENTRY ApcListHead[2];// Offset=0x74 Size=0x10
    struct _KPROCESS * Process;// Offset=0x84 Size=0x4
    unsigned char KernelApcInProgress;// Offset=0x88 Size=0x1
    unsigned char KernelApcPending;// Offset=0x89 Size=0x1
    unsigned char UserApcPending;// Offset=0x8a Size=0x1
    unsigned char ApcQueueable;// Offset=0x8b Size=0x1
    unsigned long ApcQueueLock;// Offset=0x8c Size=0x4
    unsigned long ContextSwitches;// Offset=0x90 Size=0x4
    struct _LIST_ENTRY ReadyListEntry;// Offset=0x94 Size=0x8
    union // Size=0xa0 (Id=0)
    {
        unsigned short MsrEnableMaskHigh;// Offset=0x9c Size=0x2
        unsigned short MsrEnableMaskLow;// Offset=0x9e Size=0x2
        unsigned long MsrEnableMask;// Offset=0x9c Size=0x4
    };
    long WaitStatus;// Offset=0xa0 Size=0x4
    unsigned char WaitIrql;// Offset=0xa4 Size=0x1
    unsigned char WaitMode;// Offset=0xa5 Size=0x1
    unsigned char WaitNext;// Offset=0xa6 Size=0x1
    unsigned char WaitReason;// Offset=0xa7 Size=0x1
    struct _KWAIT_BLOCK * WaitBlockList;// Offset=0xa8 Size=0x4
    unsigned long Padding1;// Offset=0xac Size=0x4
    unsigned long KernelApcDisable;// Offset=0xb0 Size=0x4
    long Quantum;// Offset=0xb4 Size=0x4
    char Saturation;// Offset=0xb8 Size=0x1
    unsigned char BasePriority;// Offset=0xb9 Size=0x1
    unsigned char PriorityDecrement;// Offset=0xba Size=0x1
    unsigned char DisableBoost;// Offset=0xbb Size=0x1
    char SuspendCount;// Offset=0xbc Size=0x1
    unsigned char Preempted;// Offset=0xbd Size=0x1
    unsigned char HasTerminated;// Offset=0xbe Size=0x1
    unsigned char CurrentProcessor;// Offset=0xbf Size=0x1
    struct _KPRCB * CurrentPrcb;// Offset=0xc0 Size=0x4
    struct _KPRCB * AffinityPrcb;// Offset=0xc4 Size=0x4
    unsigned char IdlePriorityClass;// Offset=0xc8 Size=0x1
    unsigned char NormalPriorityClass;// Offset=0xc9 Size=0x1
    unsigned char TimeCriticalPriorityClass;// Offset=0xca Size=0x1
    unsigned char HasAsyncTerminated;// Offset=0xcb Size=0x1
    unsigned long ActiveTimerListLock;// Offset=0xcc Size=0x4
    void * StackAllocatedBase;// Offset=0xd0 Size=0x4
    struct _KAPC SuspendApc;// Offset=0xd4 Size=0x28
    struct _KSEMAPHORE SuspendSemaphore;// Offset=0xfc Size=0x14
    struct _LIST_ENTRY ThreadListEntry;// Offset=0x110 Size=0x8
    struct _KQUEUE * Queue;// Offset=0x118 Size=0x4
    struct _LIST_ENTRY QueueListEntry;// Offset=0x11c Size=0x8
    void  ( * UserModeDispatcher)(struct _EXCEPTION_RECORD * ,struct _KTRAP_FRAME * );// Offset=0x124 Size=0x4
    struct _KTRAP_FRAME * UserModeTrapFrame;// Offset=0x128 Size=0x4
    unsigned char __align0[4];// Offset=0x12c Size=0x4
    union _LARGE_INTEGER CreateTime;// Offset=0x130 Size=0x8
    union _LARGE_INTEGER ExitTime;// Offset=0x138 Size=0x8
    long ExitStatus;// Offset=0x140 Size=0x4
    struct _LIST_ENTRY ActiveTimerListHead;// Offset=0x144 Size=0x8
    void * ThreadId;// Offset=0x14c Size=0x4
    void  ( * StartAddress)(void * );// Offset=0x150 Size=0x4
    struct _LIST_ENTRY IrpList;// Offset=0x154 Size=0x8
    void * DebugMonitorData;// Offset=0x15c Size=0x4
    unsigned long LastWin32ErrorCode;// Offset=0x160 Size=0x4
    void * Win32CurrentFiber;// Offset=0x164 Size=0x4
    unsigned long Padding2;// Offset=0x168 Size=0x4
    unsigned long CreateOptions;// Offset=0x16c Size=0x4
    float Vscr[4];// Offset=0x170 Size=0x10
    float Vr[128][4];// Offset=0x180 Size=0x800
    float Fpscr;// Offset=0x980 Size=0x8
    float Fpr[32];// Offset=0x988 Size=0x100
    struct _KAPC TerminateApc;// Offset=0xa88 Size=0x28
};

struct _XCHALRESP_STATS// Size=0x14 (Id=1891)
{
    unsigned long dwReceived;// Offset=0x0 Size=0x4
    unsigned long dwValid;// Offset=0x4 Size=0x4
    unsigned long dwSucceeded;// Offset=0x8 Size=0x4
    unsigned long dwFailed;// Offset=0xc Size=0x4
    struct _XCHALRESP_STATS_NODE * pRootNode;// Offset=0x10 Size=0x4
};

struct _PASSPORT_LOGIN_REQUEST// Size=0x20 (Id=1892)
{
    unsigned short wPassportMemberNameLength;// Offset=0x0 Size=0x2
    char * szPassportMemberName;// Offset=0x2 Size=0x4
    unsigned short wEncryptedSessionKeyLength;// Offset=0x6 Size=0x2
    unsigned char * pbencryptedSessionKey;// Offset=0x8 Size=0x4
    unsigned short wEncryptedPasswordLength;// Offset=0xc Size=0x2
    unsigned char * pbEncryptedPassword;// Offset=0xe Size=0x4
    unsigned short wEncryptedTokenRequestLength;// Offset=0x12 Size=0x2
    unsigned char * pbEncryptedTokenRequest;// Offset=0x14 Size=0x4
    unsigned long dwSessionId;// Offset=0x18 Size=0x4
    struct _PASSPORT_SESSION_TOKEN * pSessionToken;// Offset=0x1c Size=0x4
};

struct _OBJECT_HEADER// Size=0x18 (Id=1893)
{
    long PointerCount;// Offset=0x0 Size=0x4
    long HandleCount;// Offset=0x4 Size=0x4
    struct _OBJECT_TYPE * Type;// Offset=0x8 Size=0x4
    unsigned short Flags;// Offset=0xc Size=0x2
    unsigned char HashIndex;// Offset=0xe Size=0x1
    unsigned char Padding;// Offset=0xf Size=0x1
    struct _QUAD Body;// Offset=0x10 Size=0x8
};

struct ID3DXLoadUserDataVtbl// Size=0xc (Id=1894)
{
    HRESULT  ( * LoadTopLevelData)(struct IDirectXFileData * );// Offset=0x0 Size=0x4
    HRESULT  ( * LoadFrameChildData)(struct _D3DXFRAME * ,struct IDirectXFileData * );// Offset=0x4 Size=0x4
    HRESULT  ( * LoadMeshChildData)(struct _D3DXMESHCONTAINER * ,struct IDirectXFileData * );// Offset=0x8 Size=0x4
};

struct _GET_ACCOUNT_INFO_REQUEST// Size=0x18 (Id=1895)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned long long qwMachineId;// Offset=0x8 Size=0x8
    unsigned long dwTitleId;// Offset=0x10 Size=0x4
    struct _GET_ACCOUNT_INFO_RESPONSE * pResponse;// Offset=0x14 Size=0x4
};

struct _XMSG_SEND_RECIPIENT_RESULT// Size=0xc (Id=1896)
{
    unsigned long long qwUserID;// Offset=0x0 Size=0x8
    unsigned long dwResult;// Offset=0x8 Size=0x4
};

struct _XMSTV_CREATE_CERTIFICATE_REQUEST// Size=0x244 (Id=1897)
{
    unsigned long Flags;// Offset=0x0 Size=0x4
    unsigned char abAVPubKey[272];// Offset=0x4 Size=0x110
    unsigned char abAuthPubKey[272];// Offset=0x114 Size=0x110
    unsigned long long SigningKeyNonce;// Offset=0x224 Size=0x8
    unsigned char KeyedHash[20];// Offset=0x22c Size=0x14
    struct _XMSTV_CREATE_CERTIFICATE_REPLY * pResponse;// Offset=0x240 Size=0x4
};

struct _XPARTY_INFO// Size=0x3e (Id=1898)
{
    struct XNKID sessionID;// Offset=0x0 Size=0x8
    struct XNADDR hostAddress;// Offset=0x8 Size=0x24
    struct XNKEY keyExchangeKey;// Offset=0x2c Size=0x10
    unsigned short port;// Offset=0x3c Size=0x2
};

struct _ADD_PAYMENT_INSTRUMENT_RESPONSE// Size=0x6 (Id=1899)
{
    unsigned short wPaymentInstrumentIdLength;// Offset=0x0 Size=0x2
    unsigned short * wszPaymentInstrumentId;// Offset=0x2 Size=0x4
};

struct XECRYPT_HMACMD5_STATE// Size=0xa8 (Id=1900)
{
    struct XECRYPT_MD5_STATE Md5State[2];// Offset=0x0 Size=0xa8
};

struct _DIRECTORY_ENUM_CONTEXT// Size=0xc (Id=1901)
{
    unsigned long QueryOffset;// Offset=0x0 Size=0x4
    struct _UNICODE_STRING TemplateFileName;// Offset=0x4 Size=0x8
};

struct _Q_REVOKE_MESSAGE_MSG// Size=0x37 (Id=1902)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwUserID;// Offset=0x20 Size=0x8
    unsigned long long qwSenderContext;// Offset=0x28 Size=0x8
    unsigned short cRecipients;// Offset=0x30 Size=0x2
    unsigned char bMessageType;// Offset=0x32 Size=0x1
    struct _XMSG_SEND_RECIPIENT_RESULT * pRecipients;// Offset=0x33 Size=0x4
};

struct _XARB_REGISTER_REPLY// Size=0x6 (Id=1903)
{
    unsigned short wNumRegistrants;// Offset=0x0 Size=0x2
    struct _XARB_REGISTRANT * rgRegistrants;// Offset=0x2 Size=0x4
};

struct _XLIVEHIVE_GET_LIVE_CONFIG_RESPONSE// Size=0xa (Id=1904)
{
    unsigned long uTotalLength;// Offset=0x0 Size=0x4
    unsigned short uConfigBlockCount;// Offset=0x4 Size=0x2
    struct _XLIVEHIVE_CONFIG_PAIRS_FRAGMENT * aBlocks;// Offset=0x6 Size=0x4
};

struct _GET_USER_INFO_RESPONSE// Size=0x3c (Id=1905)
{
    unsigned short wFirstNameLength;// Offset=0x0 Size=0x2
    unsigned short * wszFirstName;// Offset=0x2 Size=0x4
    unsigned short wLastNameLength;// Offset=0x6 Size=0x2
    unsigned short * wszLastName;// Offset=0x8 Size=0x4
    struct _ADDRESS_INFO addressInfo;// Offset=0xc Size=0x24
    unsigned short wEmailLength;// Offset=0x30 Size=0x2
    unsigned short * wszEmail;// Offset=0x32 Size=0x4
    unsigned short wLanguageId;// Offset=0x36 Size=0x2
    unsigned char bCountryId;// Offset=0x38 Size=0x1
    unsigned char bMsftOptIn;// Offset=0x39 Size=0x1
    unsigned char bParterOptIn;// Offset=0x3a Size=0x1
    unsigned char bAge;// Offset=0x3b Size=0x1
};

struct _XENUMERATORHEADER// Size=0x18 (Id=1906)
{
    void * hxamapp;// Offset=0x0 Size=0x4
    unsigned long dwMsgIDEnum;// Offset=0x4 Size=0x4
    unsigned long dwMsgIDCloseEnum;// Offset=0x8 Size=0x4
    unsigned long dwUserIndex;// Offset=0xc Size=0x4
    unsigned long cItemsRequested;// Offset=0x10 Size=0x4
    unsigned long dwEnumFlags;// Offset=0x14 Size=0x4
};

struct _DVD_XGD2_DISC_AUTH_RESULT_INVALID_HV_STATE// Size=0x8 (Id=1907)
{
    unsigned long ExpectedState;// Offset=0x0 Size=0x4
    unsigned long ActualState;// Offset=0x4 Size=0x4
};

struct _ACCOUNT_LINK_XBOX1_ACCOUNT_REQUEST// Size=0x6e (Id=1908)
{
    unsigned long long qwMachineId;// Offset=0x0 Size=0x8
    unsigned long dwTitleId;// Offset=0x8 Size=0x4
    unsigned short wGamertagLength;// Offset=0xc Size=0x2
    unsigned short * wszGamertag;// Offset=0xe Size=0x4
    struct _PASSPORT_SESSION_TOKEN pUserSessionToken[1];// Offset=0x12 Size=0x1c
    struct _PASSPORT_SESSION_TOKEN pParentSessionToken[1];// Offset=0x2e Size=0x1c
    struct _PHONE_INFO phoneInfo;// Offset=0x4a Size=0x12
    unsigned short wPostalCodeLength;// Offset=0x5c Size=0x2
    unsigned short * wszPostalCode;// Offset=0x5e Size=0x4
    unsigned short wAccountHolderNameLength;// Offset=0x62 Size=0x2
    unsigned short * wszAccountHolderName;// Offset=0x64 Size=0x4
    unsigned short wAccountNumberLength;// Offset=0x68 Size=0x2
    unsigned short * wszAccountNumber;// Offset=0x6a Size=0x4
};

struct _XMXICON4// Size=0x8 (Id=1909)
{
    union // Size=0x8 (Id=0)
    {
        struct // Size=0x8 (Id=0)
        {
            long long x:20;// Offset=0x0 Size=0x8 BitOffset=0x0 BitSize=0x14
            long long y:20;// Offset=0x0 Size=0x8 BitOffset=0x14 BitSize=0x14
            long long z:20;// Offset=0x0 Size=0x8 BitOffset=0x28 BitSize=0x14
            unsigned long long w:4;// Offset=0x0 Size=0x8 BitOffset=0x3c BitSize=0x4
        };
        unsigned long long v;// Offset=0x0 Size=0x8
    };
};

struct _unnamed_1910// Size=0x8 (Id=1910)
{
    unsigned long cbData;// Offset=0x0 Size=0x4
    unsigned short * pwszData;// Offset=0x4 Size=0x4
};

struct _unnamed_1911// Size=0x8 (Id=1911)
{
    unsigned long cbData;// Offset=0x0 Size=0x4
    unsigned char * pbData;// Offset=0x4 Size=0x4
};

struct _XUSER_DATA// Size=0x10 (Id=1912)
{
    unsigned char type;// Offset=0x0 Size=0x1
    unsigned char __align0[7];// Offset=0x1 Size=0x7
    union // Size=0x10 (Id=0)
    {
        long nData;// Offset=0x8 Size=0x4
        long long i64Data;// Offset=0x8 Size=0x8
        float dblData;// Offset=0x8 Size=0x8
        struct _unnamed_1910 string;// Offset=0x8 Size=0x8
        float fData;// Offset=0x8 Size=0x4
        struct _unnamed_1911 binary;// Offset=0x8 Size=0x8
        struct _FILETIME ftData;// Offset=0x8 Size=0x8
    };
};

struct _XMSG_GAME_INVITE_GET_ACCEPTED// Size=0x58 (Id=1913)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    struct _XINVITE_INFO pInfo[1];// Offset=0x4 Size=0x54
};

struct D3DVolume// Size=0x20 (Id=1914)
{
    unsigned long Common;// Offset=0x0 Size=0x4
    unsigned long ReferenceCount;// Offset=0x4 Size=0x4
    unsigned long Fence;// Offset=0x8 Size=0x4
    unsigned long ReadFence;// Offset=0xc Size=0x4
    unsigned long Identifier;// Offset=0x10 Size=0x4
    unsigned long BaseFlush;// Offset=0x14 Size=0x4
    struct D3DBaseTexture * Parent;// Offset=0x18 Size=0x4
    struct // Size=0x4 (Id=0)
    {
        unsigned long MipLevel:4;// Offset=0x1c Size=0x4 BitOffset=0x1c BitSize=0x4
        unsigned long ArrayIndex:6;// Offset=0x1c Size=0x4 BitOffset=0x16 BitSize=0x6
    };
};

struct _XSIGNATURE_VERIFY_REQUEST// Size=0x8 (Id=1915)
{
    struct _XSIGNATURE_TO_VERIFY * pSignaturesToVerify;// Offset=0x0 Size=0x4
    struct _XSIGNATURE_VERIFY_RESPONSE * pResponse;// Offset=0x4 Size=0x4
};

struct _HAL_POWER_DOWN_REGISTRATION// Size=0x10 (Id=1916)
{
    void  ( * NotificationRoutine)(struct _HAL_POWER_DOWN_REGISTRATION * );// Offset=0x0 Size=0x4
    long Priority;// Offset=0x4 Size=0x4
    struct _LIST_ENTRY ListEntry;// Offset=0x8 Size=0x8
};

struct XECRYPT_SHA384_STATE// Size=0xc8 (Id=1917)
{
    unsigned long count;// Offset=0x0 Size=0x4
    unsigned char __align0[4];// Offset=0x4 Size=0x4
    unsigned long long state[8];// Offset=0x8 Size=0x40
    unsigned char buffer[128];// Offset=0x48 Size=0x80
};

struct _DOWNLOAD_QUEUE_MODIFY_QUEUE_RESPONSE// Size=0x8 (Id=1918)
{
    struct _FILETIME ftLastModified;// Offset=0x0 Size=0x8
};

struct _DOWNLOAD_QUEUE_MOVE_ITEMS_REQUEST// Size=0x1e (Id=1919)
{
    unsigned long long xUserId;// Offset=0x0 Size=0x8
    unsigned long nQueueId;// Offset=0x8 Size=0x4
    struct _FILETIME ftLastModified;// Offset=0xc Size=0x8
    unsigned short nNumIndexes;// Offset=0x14 Size=0x2
    struct _DOWNLOAD_QUEUE_INDEX * pIndexes;// Offset=0x16 Size=0x4
    struct _DOWNLOAD_QUEUE_MOVE_ITEMS_RESPONSE * pResponse;// Offset=0x1a Size=0x4
};

struct _GENERIC_LIST_QUERY_LISTS_REQUEST// Size=0x28 (Id=1920)
{
    unsigned long long xUserId;// Offset=0x0 Size=0x8
    unsigned long nListType;// Offset=0x8 Size=0x4
    unsigned long nListId;// Offset=0xc Size=0x4
    struct _FILETIME ftLastModified;// Offset=0x10 Size=0x8
    unsigned long nPageSize;// Offset=0x18 Size=0x4
    unsigned long nPageNum;// Offset=0x1c Size=0x4
    unsigned long nOrderDir;// Offset=0x20 Size=0x4
    struct _GENERIC_LIST_QUERY_LISTS_RESPONSE * pResponse;// Offset=0x24 Size=0x4
};

struct _XPARTY_JOIN_PARAMS// Size=0x58 (Id=1921)
{
    unsigned long long xuidContact;// Offset=0x0 Size=0x8
    struct _XPARTY_INFO partyInfo;// Offset=0x8 Size=0x3e
    unsigned char __align0[2];// Offset=0x46 Size=0x2
    struct _XPARTY_LEAVE_PARAMS InternalLeaveParams;// Offset=0x48 Size=0x4
    unsigned char __align1[4];// Offset=0x4c Size=0x4
    unsigned long dwPrimaryUserIndex;// Offset=0x50 Size=0x4
};

struct _P_ALIVE_2_MSG// Size=0x9c (Id=1922)
{
    struct _BASE_MSG_HEADER MsgHeader;// Offset=0x0 Size=0x20
    unsigned long long qwUserID;// Offset=0x20 Size=0x8
    unsigned short cbAcctName;// Offset=0x28 Size=0x2
    struct XNADDR xnaddr;// Offset=0x2a Size=0x24
    struct XNKID xnkid;// Offset=0x4e Size=0x8
    struct XNKEY xnkey;// Offset=0x56 Size=0x10
    unsigned long dwBuddyListVersion;// Offset=0x66 Size=0x4
    unsigned long dwBlockListVersion;// Offset=0x6a Size=0x4
    struct _XBOX_LIBRARY_VERSION clientVersion;// Offset=0x6e Size=0x8
    unsigned long dwTitleID;// Offset=0x76 Size=0x4
    unsigned long dwTitleVersion;// Offset=0x7a Size=0x4
    unsigned long dwTitleRegion;// Offset=0x7e Size=0x4
    unsigned short ipportI;// Offset=0x82 Size=0x2
    struct in_addr ipaI;// Offset=0x84 Size=0x4
    unsigned long long liNonce;// Offset=0x88 Size=0x8
    unsigned long long liTimeInit;// Offset=0x90 Size=0x8
    char * szAcctName;// Offset=0x98 Size=0x4
};

struct _P_PEER_SUBSCRIBE_REPLY_MSG// Size=0x24 (Id=1923)
{
    unsigned char pbInternal[32];// Offset=0x0 Size=0x20
    HRESULT hr;// Offset=0x20 Size=0x4
};

struct _XMATCH_SESSION_CREATE_REQUEST// Size=0x54 (Id=1924)
{
    unsigned long dwMessageLength;// Offset=0x0 Size=0x4
    struct XNKID SessionID;// Offset=0x4 Size=0x8
    unsigned long dwTitleID;// Offset=0xc Size=0x4
    struct XNADDR HostAddress;// Offset=0x10 Size=0x24
    unsigned long dwPublicOpen;// Offset=0x34 Size=0x4
    unsigned long dwPrivateOpen;// Offset=0x38 Size=0x4
    unsigned long dwPublicFilled;// Offset=0x3c Size=0x4
    unsigned long dwPrivateFilled;// Offset=0x40 Size=0x4
    unsigned long dwNumAttributes;// Offset=0x44 Size=0x4
    unsigned long * pAttributeOffsets;// Offset=0x48 Size=0x4
    struct _XONLINE_ATTRIBUTE * pAttributes;// Offset=0x4c Size=0x4
    struct _XONLINE_MATCH_SESSION_INFO * pSessionInfo;// Offset=0x50 Size=0x4
};

struct _CREATE_LIVE_ACCOUNT_RESPONSE// Size=0x28 (Id=1925)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned char abXboxKey[16];// Offset=0x8 Size=0x10
    unsigned char abXenonKey[16];// Offset=0x18 Size=0x10
};

struct _FB_ENUM_RECD_REVIEWS_REQUEST// Size=0x14 (Id=1926)
{
    unsigned long long qwTargetID;// Offset=0x0 Size=0x8
    unsigned long dwPageID;// Offset=0x8 Size=0x4
    unsigned long dwResultsPerPage;// Offset=0xc Size=0x4
    struct _FB_ENUM_REVIEWS_RESPONSE * pResults;// Offset=0x10 Size=0x4
};

struct _unnamed_1927// Size=0x8 (Id=1927)
{
    unsigned long Short;// Offset=0x0 Size=0x4
    unsigned long Long;// Offset=0x4 Size=0x4
};

union _unnamed_1928// Size=0x8 (Id=1928)
{
    unsigned char ShortName[8];// Offset=0x0 Size=0x8
    struct _unnamed_1927 Name;// Offset=0x0 Size=0x8
    unsigned long LongName[2];// Offset=0x0 Size=0x8
};

struct _IMAGE_SYMBOL// Size=0x12 (Id=1929)
{
    union _unnamed_1928 N;// Offset=0x0 Size=0x8
    unsigned long Value;// Offset=0x8 Size=0x4
    short SectionNumber;// Offset=0xc Size=0x2
    unsigned short Type;// Offset=0xe Size=0x2
    unsigned char StorageClass;// Offset=0x10 Size=0x1
    unsigned char NumberOfAuxSymbols;// Offset=0x11 Size=0x1
};

struct __PASSPORT_GET_PUID_FROM_MEMBERNAME_REQUEST// Size=0xa (Id=1930)
{
    unsigned short wMemberNameLength;// Offset=0x0 Size=0x2
    unsigned short * wszMemberName;// Offset=0x2 Size=0x4
    struct __PASSPORT_GET_PUID_FROM_MEMBERNAME_RESPONSE * pResult;// Offset=0x6 Size=0x4
};

struct _XMDECN4// Size=0x4 (Id=1931)
{
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            int x:10;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xa
            int y:10;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0xa
            int z:10;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0xa
            int w:2;// Offset=0x0 Size=0x4 BitOffset=0x1e BitSize=0x2
        };
        unsigned int v;// Offset=0x0 Size=0x4
    };
};

struct ID3DXFragmentLinkerVtbl// Size=0x3c (Id=1932)
{
    HRESULT  ( * QueryInterface)(struct ID3DXFragmentLinker * ,const struct _GUID * ,void ** );// Offset=0x0 Size=0x4
    unsigned long  ( * AddRef)(struct ID3DXFragmentLinker * );// Offset=0x4 Size=0x4
    unsigned long  ( * Release)(struct ID3DXFragmentLinker * );// Offset=0x8 Size=0x4
    HRESULT  ( * GetDevice)(struct ID3DXFragmentLinker * ,struct D3DDevice ** );// Offset=0xc Size=0x4
    unsigned int  ( * GetNumberOfFragments)(struct ID3DXFragmentLinker * );// Offset=0x10 Size=0x4
    unsigned int  ( * GetFragmentHandleByIndex)(struct ID3DXFragmentLinker * ,unsigned int );// Offset=0x14 Size=0x4
    unsigned int  ( * GetFragmentHandleByName)(struct ID3DXFragmentLinker * ,char * );// Offset=0x18 Size=0x4
    HRESULT  ( * GetFragmentDesc)(struct ID3DXFragmentLinker * ,unsigned int ,struct _D3DXFRAGMENT_DESC * );// Offset=0x1c Size=0x4
    HRESULT  ( * AddFragments)(struct ID3DXFragmentLinker * ,unsigned long * );// Offset=0x20 Size=0x4
    HRESULT  ( * GetAllFragments)(struct ID3DXFragmentLinker * ,struct ID3DXBuffer ** );// Offset=0x24 Size=0x4
    HRESULT  ( * GetFragment)(struct ID3DXFragmentLinker * ,unsigned int ,struct ID3DXBuffer ** );// Offset=0x28 Size=0x4
    HRESULT  ( * LinkShader)(struct ID3DXFragmentLinker * ,char * ,unsigned long ,unsigned int * ,unsigned int ,struct ID3DXBuffer ** ,struct ID3DXBuffer ** );// Offset=0x2c Size=0x4
    HRESULT  ( * LinkVertexShader)(struct ID3DXFragmentLinker * ,char * ,unsigned long ,unsigned int * ,unsigned int ,struct D3DVertexShader ** ,struct ID3DXBuffer ** );// Offset=0x30 Size=0x4
    HRESULT  ( * LinkPixelShader)(struct ID3DXFragmentLinker * ,char * ,unsigned long ,unsigned int * ,unsigned int ,struct D3DPixelShader ** ,struct ID3DXBuffer ** );// Offset=0x34 Size=0x4
    HRESULT  ( * ClearCache)(struct ID3DXFragmentLinker * );// Offset=0x38 Size=0x4
};

struct _XPROFILE_CLEAR_TITLE_REQUEST// Size=0xc (Id=1933)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned long dwTitleId;// Offset=0x8 Size=0x4
};

struct CFHEADER// Size=0x24 (Id=1934)
{
    long sig;// Offset=0x0 Size=0x4
    unsigned long csumHeader;// Offset=0x4 Size=0x4
    long cbCabinet;// Offset=0x8 Size=0x4
    unsigned long csumFolders;// Offset=0xc Size=0x4
    unsigned long coffFiles;// Offset=0x10 Size=0x4
    unsigned long csumFiles;// Offset=0x14 Size=0x4
    unsigned short version;// Offset=0x18 Size=0x2
    unsigned short cFolders;// Offset=0x1a Size=0x2
    unsigned short cFiles;// Offset=0x1c Size=0x2
    unsigned short flags;// Offset=0x1e Size=0x2
    unsigned short setID;// Offset=0x20 Size=0x2
    unsigned short iCabinet;// Offset=0x22 Size=0x2
};

struct _FIND_USER_INFO// Size=0x18 (Id=1935)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    char szGamerTag[16];// Offset=0x8 Size=0x10
};

struct IDirectXFileEnumObjectVtbl// Size=0x18 (Id=1936)
{
    HRESULT  ( * QueryInterface)(struct IDirectXFileEnumObject * ,const struct _GUID * ,void ** );// Offset=0x0 Size=0x4
    unsigned long  ( * AddRef)(struct IDirectXFileEnumObject * );// Offset=0x4 Size=0x4
    unsigned long  ( * Release)(struct IDirectXFileEnumObject * );// Offset=0x8 Size=0x4
    HRESULT  ( * GetNextDataObject)(struct IDirectXFileEnumObject * ,struct IDirectXFileData ** );// Offset=0xc Size=0x4
    HRESULT  ( * GetDataObjectById)(struct IDirectXFileEnumObject * ,const struct _GUID * ,struct IDirectXFileData ** );// Offset=0x10 Size=0x4
    HRESULT  ( * GetDataObjectByName)(struct IDirectXFileEnumObject * ,char * ,struct IDirectXFileData ** );// Offset=0x14 Size=0x4
};

struct _XCHALRESP_STATS_NODE// Size=0x18 (Id=1937)
{
    unsigned short wChalId;// Offset=0x0 Size=0x2
    unsigned short wChalVer;// Offset=0x2 Size=0x2
    unsigned long dwReceived;// Offset=0x4 Size=0x4
    unsigned long dwValid;// Offset=0x8 Size=0x4
    unsigned long dwSucceeded;// Offset=0xc Size=0x4
    unsigned long dwFailed;// Offset=0x10 Size=0x4
    struct _XCHALRESP_STATS_NODE * pNext;// Offset=0x14 Size=0x4
};

struct _PASSPORT_GET_FRIEND_MEMBER_NAME_RESPONSE// Size=0x6 (Id=1938)
{
    unsigned short wFriendPmnLength;// Offset=0x0 Size=0x2
    unsigned short * wszFriendPmn;// Offset=0x2 Size=0x4
};

struct _XSIGNATURE_ACQUIRE_MEDIA_LICENSES_RESPONSE// Size=0x6 (Id=1939)
{
    unsigned short wLicensesCount;// Offset=0x0 Size=0x2
    struct _XSIGNATURE_MEDIA_LICENSE * pLicenses;// Offset=0x2 Size=0x4
};

struct DM_XAM_SERVICES// Size=0xc (Id=1940)
{
    unsigned long Size;// Offset=0x0 Size=0x4
    void  ( * RebootTitle)(unsigned long );// Offset=0x4 Size=0x4
    unsigned long Version;// Offset=0x8 Size=0x4
};

struct _TEAM_MEM_ENUM_RESULTS// Size=0xe (Id=1941)
{
    unsigned long long qwTeamID;// Offset=0x0 Size=0x8
    unsigned short cMembers;// Offset=0x8 Size=0x2
    struct _XONLINE_TEAM_MEMBER * rgsMembers;// Offset=0xa Size=0x4
};

struct _XARB_REPORT_LOST_MACHINES// Size=0x5 (Id=1942)
{
    unsigned char bNumLostConnectivityMachineIDs;// Offset=0x0 Size=0x1
    unsigned long long * pLostConnectivityMachineIDs;// Offset=0x1 Size=0x4
};

struct IDirectXFile// Size=0x4 (Id=1943)
{
    struct IDirectXFileVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct _XENUMERATOR_STATS// Size=0x20 (Id=1944)
{
    unsigned long dwTitleId;// Offset=0x0 Size=0x4
    enum _XGI_STATS_ENUMERATOR_TYPE enumType;// Offset=0x4 Size=0x4
    unsigned long long qwPivot;// Offset=0x8 Size=0x8
    unsigned long * pStaringRanks;// Offset=0x10 Size=0x4
    unsigned long dwNumStatsSpecs;// Offset=0x14 Size=0x4
    struct _XUSER_STATS_SPEC * pSpecs;// Offset=0x18 Size=0x4
};

struct _unnamed_1945// Size=0x4 (Id=1945)
{
    unsigned long dwChannel;// Offset=0x0 Size=0x4
};

struct XMSG_CUSTOMACTION// Size=0x274 (Id=1946)
{
    unsigned long dwActionId;// Offset=0x0 Size=0x4
    wchar_t wszEnActionText[23];// Offset=0x4 Size=0x2e
    unsigned short wReserved;// Offset=0x32 Size=0x2
    unsigned long dwFlags;// Offset=0x34 Size=0x4
    struct _unnamed_2402 rgTranslations[11];// Offset=0x38 Size=0x23c
};

struct _unnamed_1947// Size=0x640 (Id=1947)
{
    unsigned long long rgXuidRecipients[100];// Offset=0x0 Size=0x320
    unsigned int cRecipients;// Offset=0x320 Size=0x4
    wchar_t szText[256];// Offset=0x324 Size=0x200
    wchar_t szTitle[31];// Offset=0x524 Size=0x3e
    wchar_t szGameMessage[97];// Offset=0x562 Size=0xc2
    unsigned char * pbImage;// Offset=0x624 Size=0x4
    unsigned long cbImage;// Offset=0x628 Size=0x4
    struct XMSG_CUSTOMACTION * pCustomActions;// Offset=0x62c Size=0x4
    unsigned long cCustomActions;// Offset=0x630 Size=0x4
    unsigned char * pbCustomPayload;// Offset=0x634 Size=0x4
    unsigned long cbCustomPayload;// Offset=0x638 Size=0x4
    unsigned long dwExpireMinutes;// Offset=0x63c Size=0x4
};

struct XPLAYERLIST_USER// Size=0x48 (Id=1948)
{
    unsigned long long xuid;// Offset=0x0 Size=0x8
    wchar_t wszCustomText[31];// Offset=0x8 Size=0x3e
};

struct _unnamed_1949// Size=0x16c (Id=1949)
{
    wchar_t szTitle[36];// Offset=0x0 Size=0x48
    wchar_t szDescription[83];// Offset=0x48 Size=0xa6
    unsigned char __align0[2];// Offset=0xee Size=0x2
    unsigned char * pbImage;// Offset=0xf0 Size=0x4
    unsigned long cbImage;// Offset=0xf4 Size=0x4
    struct XPLAYERLIST_USER * pPlayers;// Offset=0xf8 Size=0x4
    unsigned long cPlayers;// Offset=0xfc Size=0x4
    struct XPLAYERLIST_BUTTON xButton;// Offset=0x100 Size=0x34
    struct XPLAYERLIST_BUTTON yButton;// Offset=0x134 Size=0x34
    struct XPLAYERLIST_RESULT * pResults;// Offset=0x168 Size=0x4
};

struct _unnamed_1950// Size=0x10 (Id=1950)
{
    unsigned long long qwParam;// Offset=0x0 Size=0x8
    unsigned long dwChannel;// Offset=0x8 Size=0x4
};

struct _unnamed_1951// Size=0x4 (Id=1951)
{
    unsigned long dwSessionID;// Offset=0x0 Size=0x4
};

struct _unnamed_1952// Size=0x4 (Id=1952)
{
    unsigned long dwCommunitySessionsFlags;// Offset=0x0 Size=0x4
};

struct _XSHOWFRIENDSUI_PARAMS// Size=0x650 (Id=1953)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long dwFlags;// Offset=0x4 Size=0x4
    struct _XOVERLAPPED * pOverlapped;// Offset=0x8 Size=0x4
    unsigned char __align0[4];// Offset=0xc Size=0x4
    union // Size=0x650 (Id=0)
    {
        struct _unnamed_1945 chat;// Offset=0x10 Size=0x4
        struct _unnamed_1947 msg;// Offset=0x10 Size=0x640
        struct _unnamed_1949 playerList;// Offset=0x10 Size=0x16c
        struct _unnamed_1950 recentmsgs;// Offset=0x10 Size=0x10
        struct _unnamed_1951 quickchat;// Offset=0x10 Size=0x4
        struct _unnamed_1952 communitysessions;// Offset=0x10 Size=0x4
    };
};

struct _DM_GAME_CONTROLLER_DATA// Size=0xe (Id=1954)
{
    unsigned char bUserIndex;// Offset=0x0 Size=0x1
    unsigned char __align0[1];// Offset=0x1 Size=0x1
    unsigned short bmButtons;// Offset=0x2 Size=0x2
    unsigned char bLeftTrigger;// Offset=0x4 Size=0x1
    unsigned char bRightTrigger;// Offset=0x5 Size=0x1
    short sThumbLX;// Offset=0x6 Size=0x2
    short sThumbLY;// Offset=0x8 Size=0x2
    short sThumbRX;// Offset=0xa Size=0x2
    short sThumbRY;// Offset=0xc Size=0x2
};

struct _XONLINE_SCHEMA_DATA// Size=0x8 (Id=1955)
{
    unsigned char * pbSchema;// Offset=0x0 Size=0x4
    unsigned long cbSchema;// Offset=0x4 Size=0x4
};

struct _RC4_SHA_HEADER// Size=0x1c (Id=1956)
{
    unsigned char Checksum[20];// Offset=0x0 Size=0x14
    unsigned char Confounder[8];// Offset=0x14 Size=0x8
};

struct PreBoundAttribute// Size=0x4 (Id=1957)
{
    unsigned int Deref;// Offset=0x0 Size=0x4
};

struct _DM_GET_INPUT_CAPABILITIES// Size=0xc (Id=1958)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    void * pXInputCapabilities;// Offset=0x4 Size=0x4
    unsigned long * pReturn;// Offset=0x8 Size=0x4
};

union _unnamed_1959// Size=0x4 (Id=1959)
{
    struct GPUTEXTURESIZE_1D OneD;// Offset=0x0 Size=0x4
    struct GPUTEXTURESIZE_2D TwoD;// Offset=0x0 Size=0x4
    struct GPUTEXTURESIZE_3D ThreeD;// Offset=0x0 Size=0x4
    struct GPUTEXTURESIZE_STACK Stack;// Offset=0x0 Size=0x4
};

union GPUTEXTURE_FETCH_CONSTANT// Size=0x18 (Id=1960)
{
    struct // Size=0x8 (Id=0)
    {
        unsigned long Type:2;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x2
        unsigned long SignX:2;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x2
        unsigned long SignY:2;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x2
        unsigned long SignZ:2;// Offset=0x0 Size=0x4 BitOffset=0x6 BitSize=0x2
        unsigned long SignW:2;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x2
        unsigned long ClampX:3;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0x3
        unsigned long ClampY:3;// Offset=0x0 Size=0x4 BitOffset=0xd BitSize=0x3
        unsigned long ClampZ:3;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x3
        unsigned long Pitch:9;// Offset=0x0 Size=0x4 BitOffset=0x16 BitSize=0x9
        unsigned long Tiled:1;// Offset=0x0 Size=0x4 BitOffset=0x1f BitSize=0x1
        unsigned long DataFormat:6;// Offset=0x4 Size=0x4 BitOffset=0x0 BitSize=0x6
        unsigned long Endian:2;// Offset=0x4 Size=0x4 BitOffset=0x6 BitSize=0x2
        unsigned long RequestSize:2;// Offset=0x4 Size=0x4 BitOffset=0x8 BitSize=0x2
        unsigned long Stacked:1;// Offset=0x4 Size=0x4 BitOffset=0xa BitSize=0x1
        unsigned long ClampPolicy:1;// Offset=0x4 Size=0x4 BitOffset=0xb BitSize=0x1
        unsigned long BaseAddress:20;// Offset=0x4 Size=0x4 BitOffset=0xc BitSize=0x14
    };
    union _unnamed_1959 Size;// Offset=0x8 Size=0x4
    struct // Size=0xc (Id=0)
    {
        unsigned long NumFormat:1;// Offset=0xc Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long SwizzleX:3;// Offset=0xc Size=0x4 BitOffset=0x1 BitSize=0x3
        unsigned long SwizzleY:3;// Offset=0xc Size=0x4 BitOffset=0x4 BitSize=0x3
        unsigned long SwizzleZ:3;// Offset=0xc Size=0x4 BitOffset=0x7 BitSize=0x3
        unsigned long SwizzleW:3;// Offset=0xc Size=0x4 BitOffset=0xa BitSize=0x3
        int ExpAdjust:6;// Offset=0xc Size=0x4 BitOffset=0xd BitSize=0x6
        unsigned long MagFilter:2;// Offset=0xc Size=0x4 BitOffset=0x13 BitSize=0x2
        unsigned long MinFilter:2;// Offset=0xc Size=0x4 BitOffset=0x15 BitSize=0x2
        unsigned long MipFilter:2;// Offset=0xc Size=0x4 BitOffset=0x17 BitSize=0x2
        unsigned long AnisoFilter:3;// Offset=0xc Size=0x4 BitOffset=0x19 BitSize=0x3
        unsigned long BorderSize:1;// Offset=0xc Size=0x4 BitOffset=0x1f BitSize=0x1
        unsigned long VolMagFilter:1;// Offset=0x10 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long VolMinFilter:1;// Offset=0x10 Size=0x4 BitOffset=0x1 BitSize=0x1
        unsigned long MinMipLevel:4;// Offset=0x10 Size=0x4 BitOffset=0x2 BitSize=0x4
        unsigned long MaxMipLevel:4;// Offset=0x10 Size=0x4 BitOffset=0x6 BitSize=0x4
        unsigned long MagAnisoWalk:1;// Offset=0x10 Size=0x4 BitOffset=0xa BitSize=0x1
        unsigned long MinAnisoWalk:1;// Offset=0x10 Size=0x4 BitOffset=0xb BitSize=0x1
        int LODBias:10;// Offset=0x10 Size=0x4 BitOffset=0xc BitSize=0xa
        int GradExpAdjustH:5;// Offset=0x10 Size=0x4 BitOffset=0x16 BitSize=0x5
        int GradExpAdjustV:5;// Offset=0x10 Size=0x4 BitOffset=0x1b BitSize=0x5
        unsigned long BorderColor:2;// Offset=0x14 Size=0x4 BitOffset=0x0 BitSize=0x2
        unsigned long ForceBCWToMax:1;// Offset=0x14 Size=0x4 BitOffset=0x2 BitSize=0x1
        unsigned long TriClamp:2;// Offset=0x14 Size=0x4 BitOffset=0x3 BitSize=0x2
        int AnisoBias:4;// Offset=0x14 Size=0x4 BitOffset=0x5 BitSize=0x4
        unsigned long Dimension:2;// Offset=0x14 Size=0x4 BitOffset=0x9 BitSize=0x2
        unsigned long PackedMips:1;// Offset=0x14 Size=0x4 BitOffset=0xb BitSize=0x1
        unsigned long MipAddress:20;// Offset=0x14 Size=0x4 BitOffset=0xc BitSize=0x14
    };
    unsigned long dword[6];// Offset=0x0 Size=0x18
};

struct _P_INVITE_ANSWER_MSG_INTERNAL// Size=0x3a (Id=1961)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwUserID;// Offset=0x20 Size=0x8
    unsigned long long qwHostID;// Offset=0x28 Size=0x8
    struct XNKID MatchSessionID;// Offset=0x30 Size=0x8
    unsigned short wAnswer;// Offset=0x38 Size=0x2
};

struct _SVOD_HASH_ENTRY// Size=0x14 (Id=1962)
{
    unsigned char Hash[20];// Offset=0x0 Size=0x14
};

struct _KIPI_COUNTS// Size=0x38 (Id=1963)
{
    unsigned long Freeze;// Offset=0x0 Size=0x4
    unsigned long Packet;// Offset=0x4 Size=0x4
    unsigned long DPC;// Offset=0x8 Size=0x4
    unsigned long APC;// Offset=0xc Size=0x4
    unsigned long FlushSingleTb;// Offset=0x10 Size=0x4
    unsigned long FlushMultipleTb;// Offset=0x14 Size=0x4
    unsigned long FlushEntireTb;// Offset=0x18 Size=0x4
    unsigned long GenericCall;// Offset=0x1c Size=0x4
    unsigned long ChangeColor;// Offset=0x20 Size=0x4
    unsigned long SweepDcache;// Offset=0x24 Size=0x4
    unsigned long SweepIcache;// Offset=0x28 Size=0x4
    unsigned long SweepIcacheRange;// Offset=0x2c Size=0x4
    unsigned long FlushIoBuffers;// Offset=0x30 Size=0x4
    unsigned long GratuitousDPC;// Offset=0x34 Size=0x4
};

union _unnamed_1964// Size=0x4 (Id=1964)
{
    unsigned long ForwarderString;// Offset=0x0 Size=0x4
    unsigned long Function;// Offset=0x0 Size=0x4
    unsigned long Ordinal;// Offset=0x0 Size=0x4
    unsigned long AddressOfData;// Offset=0x0 Size=0x4
};

struct _IMAGE_THUNK_DATA32// Size=0x4 (Id=1965)
{
    union _unnamed_1964 u1;// Offset=0x0 Size=0x4
};

struct _PIAF_CREATE_PACKET// Size=0x40 (Id=1966)
{
    struct _STRING * DeviceName;// Offset=0x0 Size=0x4
    struct _DEVICE_OBJECT * TargetDeviceObject;// Offset=0x4 Size=0x4
    union _LARGE_INTEGER PartitionLength;// Offset=0x8 Size=0x8
    union _LARGE_INTEGER FatByteOffset;// Offset=0x10 Size=0x8
    union _LARGE_INTEGER FileAreaByteOffset;// Offset=0x18 Size=0x8
    unsigned long BytesPerCluster;// Offset=0x20 Size=0x4
    unsigned long NumberOfClusters;// Offset=0x24 Size=0x4
    unsigned long ClusterEntryMask;// Offset=0x28 Size=0x4
    unsigned long SectorSize;// Offset=0x2c Size=0x4
    unsigned long FirstCluster;// Offset=0x30 Size=0x4
    unsigned long FileSize;// Offset=0x34 Size=0x4
    struct _DEVICE_OBJECT * DeviceObject;// Offset=0x38 Size=0x4
    unsigned char NumberOfReservedFatEntries;// Offset=0x3c Size=0x1
    unsigned char FatEntryShift;// Offset=0x3d Size=0x1
    unsigned char ClusterShift;// Offset=0x3e Size=0x1
    unsigned char LittleEndian;// Offset=0x3f Size=0x1
};

struct _XCONTENT_REFRESH_LICENSE_REQUEST// Size=0x1a (Id=1967)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned long long qwMachineId;// Offset=0x8 Size=0x8
    unsigned short wContentHeaderLength;// Offset=0x10 Size=0x2
    unsigned char * pbContentHeader;// Offset=0x12 Size=0x4
    struct _XCONTENT_REFRESH_LICENSE_RESPONSE * pResults;// Offset=0x16 Size=0x4
};

struct _XEX_HEADER_STRING// Size=0x8 (Id=1968)
{
    unsigned long Size;// Offset=0x0 Size=0x4
    unsigned char Data[1];// Offset=0x4 Size=0x1
};

struct _XEX_CONSOLE_ID_TABLE// Size=0x4 (Id=1969)
{
    unsigned long Size;// Offset=0x0 Size=0x4
};

struct _DVD_XGD2_AUTH_RESULTS// Size=0x30 (Id=1970)
{
    struct _DVD_XGD2_DRIVE_AUTH_RESULT DriveResult;// Offset=0x0 Size=0x8
    struct _DVD_XGD2_DISC_AUTH_RESULT DiscResult;// Offset=0x8 Size=0x28
};

struct _XCONFIG_DVD_SETTINGS// Size=0x298 (Id=1971)
{
    unsigned long Version;// Offset=0x0 Size=0x4
    unsigned char VolumeId[20];// Offset=0x4 Size=0x14
    unsigned char Data[640];// Offset=0x18 Size=0x280
};

struct _XONLINE_STATS_COLUMN// Size=0xb (Id=1972)
{
    unsigned short wColumnId;// Offset=0x0 Size=0x2
    unsigned char bType;// Offset=0x2 Size=0x1
    union _XSTAT_PROC_DATA Value;// Offset=0x3 Size=0x8
};

struct IDirectXFileEnumObject// Size=0x4 (Id=1973)
{
    struct IDirectXFileEnumObjectVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct ID3DXEffect// Size=0x4 (Id=1974)
{
    struct ID3DXEffectVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct _XCONTENT_LICENSE// Size=0x10 (Id=1975)
{
    union _LICENSEE LicenseeId;// Offset=0x0 Size=0x8
    unsigned long LicenseBits;// Offset=0x8 Size=0x4
    unsigned long LicenseFlags;// Offset=0xc Size=0x4
};

struct _XEX_DATA_DESCRIPTOR// Size=0x18 (Id=1976)
{
    unsigned long Size;// Offset=0x0 Size=0x4
    unsigned char DataDigest[20];// Offset=0x4 Size=0x14
};

struct _DOWNLOAD_QUEUE_INDEX// Size=0x16 (Id=1977)
{
    struct _GUID guidId;// Offset=0x0 Size=0x10
    unsigned short wPriority;// Offset=0x10 Size=0x2
    unsigned long nIndex;// Offset=0x12 Size=0x4
};

struct _XPARTY_GET_ROUTING_TABLE_PARAMS// Size=0x8 (Id=1978)
{
    struct _XPARTY_ROUTING_TABLE * pRoutingTable;// Offset=0x0 Size=0x4
    unsigned long * pLocalIndex;// Offset=0x4 Size=0x4
};

struct XAMINSTRUMENTATION_SOURCE_CONFIG// Size=0x30 (Id=1979)
{
    char szSourceId[17];// Offset=0x0 Size=0x11
    unsigned char __align0[3];// Offset=0x11 Size=0x3
    unsigned long dwTargetBucket;// Offset=0x14 Size=0x4
    int fOverrideFlags;// Offset=0x18 Size=0x4
    unsigned long dwFlags;// Offset=0x1c Size=0x4
    unsigned char * pbCustomData;// Offset=0x20 Size=0x4
    unsigned long cbCustomData;// Offset=0x24 Size=0x4
    unsigned long dwMinInterval;// Offset=0x28 Size=0x4
    unsigned long dwLastLogTime;// Offset=0x2c Size=0x4
};

struct _XSTORAGE_FILE_INFO// Size=0x41 (Id=1980)
{
    unsigned long dwTitleID;// Offset=0x0 Size=0x4
    unsigned long dwTitleVersion;// Offset=0x4 Size=0x4
    unsigned long long qwOwnerPUID;// Offset=0x8 Size=0x8
    unsigned char bCountryID;// Offset=0x10 Size=0x1
    unsigned long long qwReserved;// Offset=0x11 Size=0x8
    unsigned long dwContentType;// Offset=0x19 Size=0x4
    unsigned long dwStorageSize;// Offset=0x1d Size=0x4
    unsigned long dwInstalledSize;// Offset=0x21 Size=0x4
    struct _FILETIME ftCreated;// Offset=0x25 Size=0x8
    struct _FILETIME ftLastModified;// Offset=0x2d Size=0x8
    unsigned short wAttributesSize;// Offset=0x35 Size=0x2
    unsigned short cchPathName;// Offset=0x37 Size=0x2
    unsigned short * pwszPathName;// Offset=0x39 Size=0x4
    unsigned char * pbAttributes;// Offset=0x3d Size=0x4
};

struct _PRESENCE_GET_STATE// Size=0x14 (Id=1981)
{
    unsigned long long UserXuid;// Offset=0x0 Size=0x8
    unsigned long pdwStateFlags[1];// Offset=0x8 Size=0x4
    struct XNKID pSessionID[1];// Offset=0xc Size=0x8
};

struct _STRING_WITH_HRESULT// Size=0x10 (Id=1982)
{
    unsigned long dwStringId;// Offset=0x0 Size=0x4
    HRESULT hr;// Offset=0x4 Size=0x4
    unsigned long cch;// Offset=0x8 Size=0x4
    unsigned short * pwsz;// Offset=0xc Size=0x4
};

struct ID3DXKeyframedAnimationSetVtbl// Size=0x5c (Id=1983)
{
    HRESULT  ( * QueryInterface)(struct ID3DXKeyframedAnimationSet * ,const struct _GUID * ,void ** );// Offset=0x0 Size=0x4
    unsigned long  ( * AddRef)(struct ID3DXKeyframedAnimationSet * );// Offset=0x4 Size=0x4
    unsigned long  ( * Release)(struct ID3DXKeyframedAnimationSet * );// Offset=0x8 Size=0x4
    char *  ( * GetName)(struct ID3DXKeyframedAnimationSet * );// Offset=0xc Size=0x4
    float  ( * GetPeriod)(struct ID3DXKeyframedAnimationSet * );// Offset=0x10 Size=0x4
    float  ( * GetPeriodicPosition)(struct ID3DXKeyframedAnimationSet * ,float );// Offset=0x14 Size=0x4
    unsigned int  ( * GetNumAnimations)(struct ID3DXKeyframedAnimationSet * );// Offset=0x18 Size=0x4
    HRESULT  ( * GetAnimationNameByIndex)(struct ID3DXKeyframedAnimationSet * ,unsigned int ,char ** );// Offset=0x1c Size=0x4
    HRESULT  ( * GetAnimationIndexByName)(struct ID3DXKeyframedAnimationSet * ,char * ,unsigned int * );// Offset=0x20 Size=0x4
    HRESULT  ( * GetSRT)(struct ID3DXKeyframedAnimationSet * ,float ,unsigned int ,struct _D3DVECTOR * ,struct D3DXQUATERNION * ,struct _D3DVECTOR * );// Offset=0x24 Size=0x4
    HRESULT  ( * GetCallback)(struct ID3DXKeyframedAnimationSet * ,float ,unsigned long ,float * ,void ** );// Offset=0x28 Size=0x4
    enum _D3DXPLAYBACK_TYPE  ( * GetPlaybackType)(struct ID3DXKeyframedAnimationSet * );// Offset=0x2c Size=0x4
    float  ( * GetSourceTicksPerSecond)(struct ID3DXKeyframedAnimationSet * );// Offset=0x30 Size=0x4
    unsigned int  ( * GetNumScaleKeys)(struct ID3DXKeyframedAnimationSet * ,unsigned int );// Offset=0x34 Size=0x4
    HRESULT  ( * GetScaleKeys)(struct ID3DXKeyframedAnimationSet * ,unsigned int ,struct _D3DXKEY_VECTOR3 * );// Offset=0x38 Size=0x4
    unsigned int  ( * GetNumRotationKeys)(struct ID3DXKeyframedAnimationSet * ,unsigned int );// Offset=0x3c Size=0x4
    HRESULT  ( * GetRotationKeys)(struct ID3DXKeyframedAnimationSet * ,unsigned int ,struct _D3DXKEY_QUATERNION * );// Offset=0x40 Size=0x4
    unsigned int  ( * GetNumTranslationKeys)(struct ID3DXKeyframedAnimationSet * ,unsigned int );// Offset=0x44 Size=0x4
    HRESULT  ( * GetTranslationKeys)(struct ID3DXKeyframedAnimationSet * ,unsigned int ,struct _D3DXKEY_VECTOR3 * );// Offset=0x48 Size=0x4
    unsigned int  ( * GetNumCallbackKeys)(struct ID3DXKeyframedAnimationSet * );// Offset=0x4c Size=0x4
    HRESULT  ( * GetCallbackKeys)(struct ID3DXKeyframedAnimationSet * ,struct _D3DXKEY_CALLBACK * );// Offset=0x50 Size=0x4
    HRESULT  ( * RegisterAnimationSRTKeys)(struct ID3DXKeyframedAnimationSet * ,char * ,unsigned int ,unsigned int ,unsigned int ,struct _D3DXKEY_VECTOR3 * ,struct _D3DXKEY_QUATERNION * ,struct _D3DXKEY_VECTOR3 * );// Offset=0x54 Size=0x4
    HRESULT  ( * Compress)(struct ID3DXKeyframedAnimationSet * ,unsigned long ,float ,struct _D3DXFRAME * ,struct ID3DXBuffer ** );// Offset=0x58 Size=0x4
};

struct _ABCH_GET_CONTACTLIST_GAMERTAGS_REQUEST// Size=0xe (Id=1984)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned short wRequestFlags;// Offset=0x8 Size=0x2
    struct _ABCH_GET_CONTACTLIST_GAMERTAGS_RESPONSE * pResult;// Offset=0xa Size=0x4
};

struct _XPARTY_GET_INFO_PARAMS// Size=0x4 (Id=1985)
{
    struct _XPARTY_INFO * PartyInfo;// Offset=0x0 Size=0x4
};

struct _RECOVER_ACCOUNT_REQUEST// Size=0x28 (Id=1986)
{
    unsigned long long qwMachineId;// Offset=0x0 Size=0x8
    unsigned char pSignedPuid[28];// Offset=0x8 Size=0x1c
    struct _RECOVER_ACCOUNT_RESPONSE * pResponse;// Offset=0x24 Size=0x4
};

struct _XPACKAGE_DOWNLOAD_PARAMS// Size=0x20 (Id=1987)
{
    unsigned long dwUrlLength;// Offset=0x0 Size=0x4
    char * szUrl;// Offset=0x4 Size=0x4
    unsigned long dwPackagePathLength;// Offset=0x8 Size=0x4
    char * szPackagePath;// Offset=0xc Size=0x4
    unsigned long long qwPackageId;// Offset=0x10 Size=0x8
    unsigned long dwPackageVersion;// Offset=0x18 Size=0x4
    unsigned long dwPackageSize;// Offset=0x1c Size=0x4
};

struct _TESTXEXMESSAGE// Size=0x14 (Id=1988)
{
    void * hxamapp;// Offset=0x0 Size=0x4
    unsigned long dwMessage;// Offset=0x4 Size=0x4
    unsigned int pParam1;// Offset=0x8 Size=0x4
    unsigned int pParam2;// Offset=0xc Size=0x4
    HRESULT hr;// Offset=0x10 Size=0x4
};

struct XVOICE_PACKET_QUEUE// Size=0x8 (Id=1989)
{
    struct XVOICE_PACKET_CONTEXT * Head;// Offset=0x0 Size=0x4
    struct XVOICE_PACKET_CONTEXT * Tail;// Offset=0x4 Size=0x4
};

struct _XENUMERATORASSET// Size=0x18 (Id=1990)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned long dwFlags;// Offset=0x8 Size=0x4
    unsigned long dwCurrentIndex;// Offset=0xc Size=0x4
    unsigned long cbResults;// Offset=0x10 Size=0x4
    struct _XASSET_ENUMERATE_RESPONSE * pResults;// Offset=0x14 Size=0x4
};

struct _XONLINE_STATS_ENUM_BY_RATING_REQUEST// Size=0x1c (Id=1991)
{
    unsigned long dwTitleId;// Offset=0x0 Size=0x4
    long long i64Rating;// Offset=0x4 Size=0x8
    unsigned long dwPageSize;// Offset=0xc Size=0x4
    unsigned long dwNumSpecs;// Offset=0x10 Size=0x4
    struct _XONLINE_STATS_SPEC * pSpecs;// Offset=0x14 Size=0x4
    struct _XONLINE_STATS_ENUM_RESULTS * pResults;// Offset=0x18 Size=0x4
};

struct _ATA_PASS_THROUGH// Size=0x10 (Id=1992)
{
    struct _IDEREGS IdeReg;// Offset=0x0 Size=0x8
    unsigned long DataBufferSize;// Offset=0x8 Size=0x4
    void * DataBuffer;// Offset=0xc Size=0x4
};

struct _unnamed_1993// Size=0x10 (Id=1993)
{
    char * locale;// Offset=0x0 Size=0x4
    unsigned short * wlocale;// Offset=0x4 Size=0x4
    int * refcount;// Offset=0x8 Size=0x4
    int * wrefcount;// Offset=0xc Size=0x4
};

struct threadlocaleinfostruct// Size=0xd8 (Id=1994)
{
    int refcount;// Offset=0x0 Size=0x4
    unsigned int lc_codepage;// Offset=0x4 Size=0x4
    unsigned int lc_collate_cp;// Offset=0x8 Size=0x4
    unsigned long lc_handle[6];// Offset=0xc Size=0x18
    struct tagLC_ID lc_id[6];// Offset=0x24 Size=0x24
    struct _unnamed_1993 lc_category[6];// Offset=0x48 Size=0x60
    int lc_clike;// Offset=0xa8 Size=0x4
    int mb_cur_max;// Offset=0xac Size=0x4
    int * lconv_intl_refcount;// Offset=0xb0 Size=0x4
    int * lconv_num_refcount;// Offset=0xb4 Size=0x4
    int * lconv_mon_refcount;// Offset=0xb8 Size=0x4
    struct lconv * lconv;// Offset=0xbc Size=0x4
    int * ctype1_refcount;// Offset=0xc0 Size=0x4
    unsigned short * ctype1;// Offset=0xc4 Size=0x4
    unsigned short * pctype;// Offset=0xc8 Size=0x4
    unsigned char * pclmap;// Offset=0xcc Size=0x4
    unsigned char * pcumap;// Offset=0xd0 Size=0x4
    struct __lc_time_data * lc_time_curr;// Offset=0xd4 Size=0x4
};

struct _DUMP_STANDARD_BUCKET_DATA// Size=0x32 (Id=1995)
{
    unsigned char BucketDataVersion;// Offset=0x0 Size=0x1
    struct // Size=0x1 (Id=0)
    {
        unsigned char BugCheck:1;// Offset=0x1 Size=0x1 BitOffset=0x7 BitSize=0x1
        unsigned char ParameterCount:3;// Offset=0x1 Size=0x1 BitOffset=0x4 BitSize=0x3
        unsigned char Pad:4;// Offset=0x1 Size=0x1 BitOffset=0x0 BitSize=0x4
    };
    struct _GUID Module;// Offset=0x2 Size=0x10
    unsigned long ModuleOffset;// Offset=0x12 Size=0x4
    unsigned long TitleID;// Offset=0x16 Size=0x4
    unsigned long MediaID;// Offset=0x1a Size=0x4
    unsigned long Code;// Offset=0x1e Size=0x4
    unsigned long Parameters[4];// Offset=0x22 Size=0x10
};

struct ID3DXAllocateHierarchy// Size=0x4 (Id=1996)
{
    struct ID3DXAllocateHierarchyVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct _VERIFY_BILLING_TOKEN_RESPONSE// Size=0xc (Id=1997)
{
    unsigned long long qwOfferId;// Offset=0x0 Size=0x8
    unsigned long dwOfferTypeId;// Offset=0x8 Size=0x4
};

struct _XACCOUNT_GET_ANID_RESPONSE// Size=0xa (Id=1998)
{
    unsigned short wAnIdLength;// Offset=0x0 Size=0x2
    char * szAnId;// Offset=0x2 Size=0x4
    HRESULT hrAnId;// Offset=0x6 Size=0x4
};

struct _SET_ACCOUNT_INFO_REQUEST// Size=0x64 (Id=1999)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned long long qwMachineId;// Offset=0x8 Size=0x8
    unsigned short wFirstNameLength;// Offset=0x10 Size=0x2
    unsigned short * wszFirstName;// Offset=0x12 Size=0x4
    unsigned short wLastNameLength;// Offset=0x16 Size=0x2
    unsigned short * wszLastName;// Offset=0x18 Size=0x4
    struct _FILETIME ftBirthdate;// Offset=0x1c Size=0x8
    unsigned short wEmailLength;// Offset=0x24 Size=0x2
    unsigned short * wszEmail;// Offset=0x26 Size=0x4
    struct _ADDRESS_INFO address;// Offset=0x2a Size=0x24
    struct _PHONE_INFO phone;// Offset=0x4e Size=0x12
    unsigned short wLanguageId;// Offset=0x60 Size=0x2
    unsigned char bMsftOptIn;// Offset=0x62 Size=0x1
    unsigned char bParterOptIn;// Offset=0x63 Size=0x1
};

struct _XMHALF2// Size=0x4 (Id=2000)
{
    unsigned short x;// Offset=0x0 Size=0x2
    unsigned short y;// Offset=0x2 Size=0x2
};

struct _XUSER_STATS_SPEC// Size=0x88 (Id=2001)
{
    unsigned long dwViewId;// Offset=0x0 Size=0x4
    unsigned long dwNumColumnIds;// Offset=0x4 Size=0x4
    unsigned short rgwColumnIds[64];// Offset=0x8 Size=0x80
};

struct _XGI_STATSENUM_MSG// Size=0x1c (Id=2002)
{
    unsigned long dwTitleId;// Offset=0x0 Size=0x4
    unsigned long dwRankStart;// Offset=0x4 Size=0x4
    unsigned long dwNumRows;// Offset=0x8 Size=0x4
    unsigned long dwNumStatsSpecs;// Offset=0xc Size=0x4
    struct _XUSER_STATS_SPEC * pSpecs;// Offset=0x10 Size=0x4
    unsigned long cbBuffer;// Offset=0x14 Size=0x4
    void ** ph;// Offset=0x18 Size=0x4
};

struct _XONLINE_STATS_ROW// Size=0x24 (Id=2003)
{
    unsigned long long xuid;// Offset=0x0 Size=0x8
    unsigned long dwRank;// Offset=0x8 Size=0x4
    long long i64Rating;// Offset=0xc Size=0x8
    unsigned long cbGamerTag;// Offset=0x14 Size=0x4
    char * pszGamerTag;// Offset=0x18 Size=0x4
    unsigned long dwNumColumns;// Offset=0x1c Size=0x4
    struct _XONLINE_STATS_COLUMN * pColumns;// Offset=0x20 Size=0x4
};

struct _DVD_XGD2_DISC_AUTH_RESULT_GET_AUTH_PAGE// Size=0x4 (Id=2004)
{
    long Status;// Offset=0x0 Size=0x4
};

struct _VOLUME_CONTROL// Size=0x4 (Id=2005)
{
    unsigned char PortVolume[4];// Offset=0x0 Size=0x4
};

struct _XONLINE_ATTRIBUTE_STRING// Size=0x6 (Id=2006)
{
    unsigned short Length;// Offset=0x0 Size=0x2
    unsigned short * lpValue;// Offset=0x2 Size=0x4
};

struct _GENERIC_LIST_INDEX// Size=0x16 (Id=2007)
{
    struct _GUID guidId;// Offset=0x0 Size=0x10
    unsigned short wPriority;// Offset=0x10 Size=0x2
    unsigned long nIndex;// Offset=0x12 Size=0x4
};

struct _VERIFY_TOKEN_RESPONSE_EMS// Size=0x24 (Id=2008)
{
    struct _GUID offerId;// Offset=0x0 Size=0x10
    struct _GUID mediaId;// Offset=0x10 Size=0x10
    unsigned long dwMediaType;// Offset=0x20 Size=0x4
};

struct _XCONTENT_DOWNLOADMEDIA_GET_INPROGRESS_METADATA// Size=0x28 (Id=2009)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long cchPackagePath;// Offset=0x4 Size=0x4
    char * pszPackagePath;// Offset=0x8 Size=0x4
    unsigned long pcCompleteChunks[1];// Offset=0xc Size=0x4
    unsigned long pcTotalChunks[1];// Offset=0x10 Size=0x4
    unsigned long pcbChunkSize[1];// Offset=0x14 Size=0x4
    unsigned long long pcbWritten[1];// Offset=0x18 Size=0x8
    unsigned long long pcbTotal[1];// Offset=0x20 Size=0x8
};

struct _DOWNLOAD_QUEUE_GRANT_ACCESS_REQUEST// Size=0x14 (Id=2010)
{
    unsigned long long xUserId;// Offset=0x0 Size=0x8
    unsigned long nQueueId;// Offset=0x8 Size=0x4
    unsigned long long ulMachineId;// Offset=0xc Size=0x8
};

struct CFFILE// Size=0x10 (Id=2011)
{
    long cbFile;// Offset=0x0 Size=0x4
    unsigned long uoffFolderStart;// Offset=0x4 Size=0x4
    unsigned short iFolder;// Offset=0x8 Size=0x2
    unsigned short date;// Offset=0xa Size=0x2
    unsigned short time;// Offset=0xc Size=0x2
    unsigned short attribs;// Offset=0xe Size=0x2
};

struct _DVD_XGD2_DISC_AUTH_RESULT_INVALID_LBA_STATE// Size=0x4 (Id=2012)
{
    unsigned long State;// Offset=0x0 Size=0x4
};

struct _ACCOUNT_QUERY_REQUEST// Size=0xe (Id=2013)
{
    unsigned long dwRequestType;// Offset=0x0 Size=0x4
    unsigned short wRequestBytesLength;// Offset=0x4 Size=0x2
    unsigned char * pbRequestBytes;// Offset=0x6 Size=0x4
    struct _ACCOUNT_QUERY_RESPONSE * pResults;// Offset=0xa Size=0x4
};

struct _XPARTY_REMOVE_LOCAL_USERS_PARAMS// Size=0x14 (Id=2014)
{
    unsigned long dwUserCount;// Offset=0x0 Size=0x4
    unsigned long dwUserIndices[4];// Offset=0x4 Size=0x10
};

struct XPROFILE_ENUM_TITLES_RESULT// Size=0x6 (Id=2015)
{
    unsigned short wNumTitles;// Offset=0x0 Size=0x2
    struct _XPROFILE_TITLE * pTitles;// Offset=0x2 Size=0x4
};

struct _XPERSISTENTMEMPARAMS// Size=0x14 (Id=2016)
{
    unsigned long dwSize;// Offset=0x0 Size=0x4
    struct _XPERSISTENTMEMBUFFER * pMemBuffers;// Offset=0x4 Size=0x4
    unsigned long dwNumMemBuffers;// Offset=0x8 Size=0x4
    unsigned int * pSockets;// Offset=0xc Size=0x4
    unsigned long dwNumSockets;// Offset=0x10 Size=0x4
};

struct _XMFLOAT3// Size=0xc (Id=2017)
{
    float x;// Offset=0x0 Size=0x4
    float y;// Offset=0x4 Size=0x4
    float z;// Offset=0x8 Size=0x4
};

struct _XUSER_PROFILE_SETTING// Size=0x28 (Id=2018)
{
    union // Size=0x4 (Id=0)
    {
        enum _XUSER_PROFILE_SOURCE source;// Offset=0x0 Size=0x4
        union <unnamed-type-user>// Size=0x8 (Id=24293)
        {
            unsigned long dwUserIndex;// Offset=0x0 Size=0x4
            unsigned long long xuid;// Offset=0x0 Size=0x8
        };
    };
    union _XUSER_PROFILE_SETTING::<unnamed-type-user> user;// Offset=0x8 Size=0x8
    unsigned long dwSettingId;// Offset=0x10 Size=0x4
    unsigned char __align0[4];// Offset=0x14 Size=0x4
    struct _XUSER_DATA data;// Offset=0x18 Size=0x10
};

struct _XUSER_PROFILE_SETTING// Size=0x28 (Id=2019)
{
    union // Size=0x4 (Id=0)
    {
        enum _XUSER_PROFILE_SOURCE source;// Offset=0x0 Size=0x4
        union <unnamed-type-user>// Size=0x8 (Id=24293)
        {
            unsigned long dwUserIndex;// Offset=0x0 Size=0x4
            unsigned long long xuid;// Offset=0x0 Size=0x8
        };
    };
    union _XUSER_PROFILE_SETTING::<unnamed-type-user> user;// Offset=0x8 Size=0x8
    unsigned long dwSettingId;// Offset=0x10 Size=0x4
    unsigned char __align0[4];// Offset=0x14 Size=0x4
    struct _XUSER_DATA data;// Offset=0x18 Size=0x10
};

struct XGI_WRITESETTINGS_MSG// Size=0x14 (Id=2020)
{
    struct _XOVERLAPPED * pXOverlapped;// Offset=0x0 Size=0x4
    unsigned long dwTitleId;// Offset=0x4 Size=0x4
    unsigned long dwUserIndex;// Offset=0x8 Size=0x4
    unsigned long dwNumSettings;// Offset=0xc Size=0x4
    struct _XUSER_PROFILE_SETTING * pSettings;// Offset=0x10 Size=0x4
};

struct _XSTORAGE_ENUMERATE_REQUEST// Size=0x4d (Id=2021)
{
    struct _XSTORAGE_ACCESS_TOKEN pStorageAccessToken[1];// Offset=0x0 Size=0x1c
    struct _XSTORAGE_PATH_STRING pStoragePathString[1];// Offset=0x1c Size=0x6
    struct _XSTORAGE_ACCESS_TOKEN_READ pStorageAccessTokenRead[1];// Offset=0x22 Size=0xe
    unsigned long dwTitleId;// Offset=0x30 Size=0x4
    unsigned long dwTitleVersion;// Offset=0x34 Size=0x4
    unsigned char bCountryId;// Offset=0x38 Size=0x1
    unsigned long dwStartingIndex;// Offset=0x39 Size=0x4
    unsigned long dwEndingIndex;// Offset=0x3d Size=0x4
    struct _FILETIME ftLastModified;// Offset=0x41 Size=0x8
    struct _XSTORAGE_ENUMERATE_RESULTS * pResults;// Offset=0x49 Size=0x4
};

struct _TRANSFER_MACHINE_LICENSES_REQUEST// Size=0x18 (Id=2022)
{
    unsigned long long UserXuid;// Offset=0x0 Size=0x8
    unsigned long long qwMachineIdOld;// Offset=0x8 Size=0x8
    unsigned long long qwMachineIdNew;// Offset=0x10 Size=0x8
};

struct _KPRCB// Size=0x1a8 (Id=2023)
{
    struct _KTHREAD * CurrentThread;// Offset=0x0 Size=0x4
    struct _KTHREAD * NextThread;// Offset=0x4 Size=0x4
    struct _KTHREAD * IdleThread;// Offset=0x8 Size=0x4
    unsigned char Number;// Offset=0xc Size=0x1
    unsigned char __align0[3];// Offset=0xd Size=0x3
    unsigned long SetMember;// Offset=0x10 Size=0x4
    unsigned long DpcTime;// Offset=0x14 Size=0x4
    unsigned long InterruptTime;// Offset=0x18 Size=0x4
    unsigned long InterruptCount;// Offset=0x1c Size=0x4
    unsigned long IpiFrozen;// Offset=0x20 Size=0x4
    void * CurrentPacket[3];// Offset=0x24 Size=0xc
    unsigned long TargetSet;// Offset=0x30 Size=0x4
    void  ( * WorkerRoutine)(void * ,void * ,void * ,void * );// Offset=0x34 Size=0x4
    struct _KPRCB * SignalDone;// Offset=0x38 Size=0x4
    unsigned long RequestSummary;// Offset=0x3c Size=0x4
    unsigned long DpcInterruptRequested;// Offset=0x40 Size=0x4
    unsigned long DpcLock;// Offset=0x44 Size=0x4
    struct _LIST_ENTRY DpcListHead;// Offset=0x48 Size=0x8
    unsigned long DpcRoutineActive;// Offset=0x50 Size=0x4
    unsigned long ReadyListLock;// Offset=0x54 Size=0x4
    unsigned long IdleThreadActive;// Offset=0x58 Size=0x4
    struct _SINGLE_LIST_ENTRY DeferredReadyListHead;// Offset=0x5c Size=0x4
    unsigned long ReadySummary;// Offset=0x60 Size=0x4
    unsigned long ReadySummaryMask;// Offset=0x64 Size=0x4
    struct _LIST_ENTRY DispatcherReadyListHead[32];// Offset=0x68 Size=0x100
    struct _KDPC ThreadReaperDpc;// Offset=0x168 Size=0x1c
    struct _LIST_ENTRY ThreadReaperListHead;// Offset=0x184 Size=0x8
    struct _KDPC SwitchProcessorThreadDpc;// Offset=0x18c Size=0x1c
};

struct _KPRCB// Size=0x1a8 (Id=2024)
{
    struct _KTHREAD * CurrentThread;// Offset=0x0 Size=0x4
    struct _KTHREAD * NextThread;// Offset=0x4 Size=0x4
    struct _KTHREAD * IdleThread;// Offset=0x8 Size=0x4
    unsigned char Number;// Offset=0xc Size=0x1
    unsigned char __align0[3];// Offset=0xd Size=0x3
    unsigned long SetMember;// Offset=0x10 Size=0x4
    unsigned long DpcTime;// Offset=0x14 Size=0x4
    unsigned long InterruptTime;// Offset=0x18 Size=0x4
    unsigned long InterruptCount;// Offset=0x1c Size=0x4
    unsigned long IpiFrozen;// Offset=0x20 Size=0x4
    void * CurrentPacket[3];// Offset=0x24 Size=0xc
    unsigned long TargetSet;// Offset=0x30 Size=0x4
    void  ( * WorkerRoutine)(void * ,void * ,void * ,void * );// Offset=0x34 Size=0x4
    struct _KPRCB * SignalDone;// Offset=0x38 Size=0x4
    unsigned long RequestSummary;// Offset=0x3c Size=0x4
    unsigned long DpcInterruptRequested;// Offset=0x40 Size=0x4
    unsigned long DpcLock;// Offset=0x44 Size=0x4
    struct _LIST_ENTRY DpcListHead;// Offset=0x48 Size=0x8
    unsigned long DpcRoutineActive;// Offset=0x50 Size=0x4
    unsigned long ReadyListLock;// Offset=0x54 Size=0x4
    unsigned long IdleThreadActive;// Offset=0x58 Size=0x4
    struct _SINGLE_LIST_ENTRY DeferredReadyListHead;// Offset=0x5c Size=0x4
    unsigned long ReadySummary;// Offset=0x60 Size=0x4
    unsigned long ReadySummaryMask;// Offset=0x64 Size=0x4
    struct _LIST_ENTRY DispatcherReadyListHead[32];// Offset=0x68 Size=0x100
    struct _KDPC ThreadReaperDpc;// Offset=0x168 Size=0x1c
    struct _LIST_ENTRY ThreadReaperListHead;// Offset=0x184 Size=0x8
    struct _KDPC SwitchProcessorThreadDpc;// Offset=0x18c Size=0x1c
};

struct _DOWNLOAD_QUEUE_MODIFY_ITEMS_RESPONSE// Size=0x8 (Id=2025)
{
    struct _FILETIME ftLastModified;// Offset=0x0 Size=0x8
};

struct _Q_LIST_ITEM// Size=0x2e (Id=2026)
{
    unsigned long dwItemID;// Offset=0x0 Size=0x4
    unsigned short wItemLen;// Offset=0x4 Size=0x2
    union _Q_REPLY_ITEM ReplyItem;// Offset=0x6 Size=0x28
};

struct _DOWNLOAD_QUEUE_QUERY_ITEMS_REQUEST// Size=0x22 (Id=2027)
{
    unsigned long long xUserId;// Offset=0x0 Size=0x8
    unsigned long nQueueId;// Offset=0x8 Size=0x4
    unsigned long nPageSize;// Offset=0xc Size=0x4
    unsigned long nPageNum;// Offset=0x10 Size=0x4
    unsigned long nOrderDir;// Offset=0x14 Size=0x4
    unsigned short wNumIds;// Offset=0x18 Size=0x2
    struct _GUID * pItemIds;// Offset=0x1a Size=0x4
    struct _DOWNLOAD_QUEUE_QUERY_ITEMS_RESPONSE * pResponse;// Offset=0x1e Size=0x4
};

struct _XEX_SYSTEM_TIME_RANGE// Size=0x10 (Id=2028)
{
    unsigned long long Start;// Offset=0x0 Size=0x8
    unsigned long long End;// Offset=0x8 Size=0x8
};

struct _SUB_Q_CURRENT_POSITION// Size=0x10 (Id=2029)
{
    struct _SUB_Q_HEADER Header;// Offset=0x0 Size=0x4
    unsigned char FormatCode;// Offset=0x4 Size=0x1
    struct // Size=0x1 (Id=0)
    {
        unsigned char Control:4;// Offset=0x5 Size=0x1 BitOffset=0x0 BitSize=0x4
        unsigned char ADR:4;// Offset=0x5 Size=0x1 BitOffset=0x4 BitSize=0x4
    };
    unsigned char TrackNumber;// Offset=0x6 Size=0x1
    unsigned char IndexNumber;// Offset=0x7 Size=0x1
    unsigned char AbsoluteAddress[4];// Offset=0x8 Size=0x4
    unsigned char TrackRelativeAddress[4];// Offset=0xc Size=0x4
};

struct _XMUHEND3// Size=0x4 (Id=2030)
{
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            unsigned int x:11;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xb
            unsigned int y:11;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0xb
            unsigned int z:10;// Offset=0x0 Size=0x4 BitOffset=0x16 BitSize=0xa
        };
        unsigned int v;// Offset=0x0 Size=0x4
    };
};

struct _IDE_SECURITY_DATA// Size=0x200 (Id=2031)
{
    struct // Size=0x2 (Id=0)
    {
        unsigned short Master:1;// Offset=0x0 Size=0x2 BitOffset=0x0 BitSize=0x1
        unsigned short Reserved1:7;// Offset=0x0 Size=0x2 BitOffset=0x1 BitSize=0x7
        unsigned short Maximum:1;// Offset=0x0 Size=0x2 BitOffset=0x8 BitSize=0x1
        unsigned short Reserved2:7;// Offset=0x0 Size=0x2 BitOffset=0x9 BitSize=0x7
    };
    unsigned char Password[32];// Offset=0x2 Size=0x20
    unsigned short Reserved3[239];// Offset=0x22 Size=0x1de
};

struct _XMSG_INVITE_SEND_PARAMS// Size=0x18 (Id=2032)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long dwNumInvitees;// Offset=0x4 Size=0x4
    unsigned long long * pXuidInvitees;// Offset=0x8 Size=0x4
    unsigned long cchText;// Offset=0xc Size=0x4
    unsigned short * pszText;// Offset=0x10 Size=0x4
    void * hMsg;// Offset=0x14 Size=0x4
};

struct _XMSG_SUMMARY// Size=0x60 (Id=2033)
{
    unsigned long long qwSenderID;// Offset=0x0 Size=0x8
    unsigned long long qwMessageContext;// Offset=0x8 Size=0x8
    struct _FILETIME ftSentTime;// Offset=0x10 Size=0x8
    unsigned long dwMessageID;// Offset=0x18 Size=0x4
    unsigned long dwMessageFlags;// Offset=0x1c Size=0x4
    unsigned long dwSenderTitleID;// Offset=0x20 Size=0x4
    unsigned short wExpireMinutes;// Offset=0x24 Size=0x2
    unsigned short cbDetails;// Offset=0x26 Size=0x2
    unsigned char bMsgType;// Offset=0x28 Size=0x1
    char szSenderName[15];// Offset=0x29 Size=0xf
    wchar_t szSubject[20];// Offset=0x38 Size=0x28
};

struct _XSIGNATURE_ACKNOWLEDGE_LICENSES_DELIVERY_RESPONSE// Size=0x6 (Id=2034)
{
    unsigned short wAcknowledgementsCount;// Offset=0x0 Size=0x2
    struct _XSIGNATURE_LICENSE_ACKNOWLEDGMENT * pAcknowledgements;// Offset=0x2 Size=0x4
};

struct _XGI_STATSREAD_MSG// Size=0x1c (Id=2035)
{
    unsigned long dwTitleId;// Offset=0x0 Size=0x4
    unsigned long dwNumXuids;// Offset=0x4 Size=0x4
    unsigned long long * pXuids;// Offset=0x8 Size=0x4
    unsigned long dwNumStatsSpecs;// Offset=0xc Size=0x4
    struct _XUSER_STATS_SPEC * pSpecs;// Offset=0x10 Size=0x4
    unsigned long cbResults;// Offset=0x14 Size=0x4
    struct _XUSER_STATS_READ_RESULTS * pResults;// Offset=0x18 Size=0x4
};

union _XMSG_PROPERTY_DATA// Size=0x2 (Id=2036)
{
    union // Size=0x2 (Id=0)
    {
        unsigned short wPropOffset;// Offset=0x0 Size=0x2
        unsigned short wData;// Offset=0x0 Size=0x2
        unsigned char bData;// Offset=0x0 Size=0x1
    };
};

struct _XMSG_PROPERTY_BINARY// Size=0x8 (Id=2037)
{
    unsigned short cbData;// Offset=0x0 Size=0x2
    unsigned char __align0[2];// Offset=0x2 Size=0x2
    unsigned char * rgbData;// Offset=0x4 Size=0x4
};

struct _XMSG_CREATE_REQUEST// Size=0x1c (Id=2038)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long cProperties;// Offset=0x4 Size=0x4
    unsigned long long qwMessageContext;// Offset=0x8 Size=0x8
    unsigned long dwMessageFlags;// Offset=0x10 Size=0x4
    unsigned long dwExpireMinutes;// Offset=0x14 Size=0x4
    void * phMsg[1];// Offset=0x18 Size=0x4
};

struct _XMSG_PROPERTY_STRING// Size=0x8 (Id=2039)
{
    unsigned short cbString;// Offset=0x0 Size=0x2
    unsigned char __align0[2];// Offset=0x2 Size=0x2
    unsigned short * szString;// Offset=0x4 Size=0x4
};

struct _XACCOUNT_GET_ANID_REQUEST// Size=0xc (Id=2040)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    struct _XACCOUNT_GET_ANID_RESPONSE * pResponse;// Offset=0x8 Size=0x4
};

struct _XNET_LOGON_USER// Size=0x68 (Id=2041)
{
    struct _XUIDWITHFLAGS xuid;// Offset=0x0 Size=0xc
    unsigned long dwServiceNetworkID;// Offset=0xc Size=0x4
    char szGamertag[16];// Offset=0x10 Size=0x10
    unsigned long dwUserOptions;// Offset=0x20 Size=0x4
    unsigned char passcode[4];// Offset=0x24 Size=0x4
    char domain[20];// Offset=0x28 Size=0x14
    char kerberosRealm[24];// Offset=0x3c Size=0x18
    unsigned char key[16];// Offset=0x54 Size=0x10
    HRESULT hr;// Offset=0x64 Size=0x4
};

struct _INGAME_CONTENT_AVAILABLE_RESPONSE// Size=0xa (Id=2042)
{
    unsigned char bNewOffersLength;// Offset=0x0 Size=0x1
    unsigned long * pdwNewOffers;// Offset=0x1 Size=0x4
    unsigned char bTotalOffersLength;// Offset=0x5 Size=0x1
    unsigned long * pdwTotalOffers;// Offset=0x6 Size=0x4
};

struct Q_MESSAGE_NOTIFICATION// Size=0x4 (Id=2043)
{
    unsigned long dwTypeAndFlags;// Offset=0x0 Size=0x4
};

struct _KTIME_STAMP_BUNDLE// Size=0x18 (Id=2044)
{
    unsigned long long InterruptTime;// Offset=0x0 Size=0x8
    unsigned long long SystemTime;// Offset=0x8 Size=0x8
    unsigned long TickCount;// Offset=0x10 Size=0x4
};

struct ID3DXPatchMeshVtbl// Size=0x68 (Id=2045)
{
    HRESULT  ( * QueryInterface)(struct ID3DXPatchMesh * ,const struct _GUID * ,void ** );// Offset=0x0 Size=0x4
    unsigned long  ( * AddRef)(struct ID3DXPatchMesh * );// Offset=0x4 Size=0x4
    unsigned long  ( * Release)(struct ID3DXPatchMesh * );// Offset=0x8 Size=0x4
    unsigned long  ( * GetNumPatches)(struct ID3DXPatchMesh * );// Offset=0xc Size=0x4
    unsigned long  ( * GetNumVertices)(struct ID3DXPatchMesh * );// Offset=0x10 Size=0x4
    HRESULT  ( * GetDeclaration)(struct ID3DXPatchMesh * ,struct _D3DVERTEXELEMENT9 * );// Offset=0x14 Size=0x4
    unsigned long  ( * GetControlVerticesPerPatch)(struct ID3DXPatchMesh * );// Offset=0x18 Size=0x4
    unsigned long  ( * GetOptions)(struct ID3DXPatchMesh * );// Offset=0x1c Size=0x4
    HRESULT  ( * GetDevice)(struct ID3DXPatchMesh * ,struct D3DDevice ** );// Offset=0x20 Size=0x4
    HRESULT  ( * GetPatchInfo)(struct ID3DXPatchMesh * ,struct _D3DXPATCHINFO * );// Offset=0x24 Size=0x4
    HRESULT  ( * GetVertexBuffer)(struct ID3DXPatchMesh * ,struct D3DVertexBuffer ** );// Offset=0x28 Size=0x4
    HRESULT  ( * GetIndexBuffer)(struct ID3DXPatchMesh * ,struct D3DIndexBuffer ** );// Offset=0x2c Size=0x4
    HRESULT  ( * LockVertexBuffer)(struct ID3DXPatchMesh * ,unsigned long ,void ** );// Offset=0x30 Size=0x4
    HRESULT  ( * UnlockVertexBuffer)(struct ID3DXPatchMesh * );// Offset=0x34 Size=0x4
    HRESULT  ( * LockIndexBuffer)(struct ID3DXPatchMesh * ,unsigned long ,void ** );// Offset=0x38 Size=0x4
    HRESULT  ( * UnlockIndexBuffer)(struct ID3DXPatchMesh * );// Offset=0x3c Size=0x4
    HRESULT  ( * LockAttributeBuffer)(struct ID3DXPatchMesh * ,unsigned long ,unsigned long ** );// Offset=0x40 Size=0x4
    HRESULT  ( * UnlockAttributeBuffer)(struct ID3DXPatchMesh * );// Offset=0x44 Size=0x4
    HRESULT  ( * GetTessSize)(struct ID3DXPatchMesh * ,float ,unsigned long ,unsigned long * ,unsigned long * );// Offset=0x48 Size=0x4
    HRESULT  ( * GenerateAdjacency)(struct ID3DXPatchMesh * ,float );// Offset=0x4c Size=0x4
    HRESULT  ( * CloneMesh)(struct ID3DXPatchMesh * ,unsigned long ,struct _D3DVERTEXELEMENT9 * ,struct ID3DXPatchMesh ** );// Offset=0x50 Size=0x4
    HRESULT  ( * Optimize)(struct ID3DXPatchMesh * ,unsigned long );// Offset=0x54 Size=0x4
    HRESULT  ( * SetDisplaceParam)(struct ID3DXPatchMesh * ,struct D3DBaseTexture * ,enum _D3DTEXTUREFILTERTYPE ,enum _D3DTEXTUREFILTERTYPE ,enum _D3DTEXTUREFILTERTYPE ,enum _D3DTEXTUREADDRESS ,unsigned long );// Offset=0x58 Size=0x4
    HRESULT  ( * GetDisplaceParam)(struct ID3DXPatchMesh * ,struct D3DBaseTexture ** ,enum _D3DTEXTUREFILTERTYPE * ,enum _D3DTEXTUREFILTERTYPE * ,enum _D3DTEXTUREFILTERTYPE * ,enum _D3DTEXTUREADDRESS * ,unsigned long * );// Offset=0x5c Size=0x4
    HRESULT  ( * Tessellate)(struct ID3DXPatchMesh * ,float ,struct ID3DXMesh * );// Offset=0x60 Size=0x4
    HRESULT  ( * TessellateAdaptive)(struct ID3DXPatchMesh * ,struct D3DXVECTOR4 * ,unsigned long ,unsigned long ,struct ID3DXMesh * );// Offset=0x64 Size=0x4
};

struct _DOWNLOAD_QUEUE_MOVE_ITEMS_RESPONSE// Size=0x8 (Id=2046)
{
    struct _FILETIME ftLastModified;// Offset=0x0 Size=0x8
};

struct _BACKGROUND_DOWNLOAD_LEGACY_ITEM// Size=0x250 (Id=2047)
{
    unsigned long dwContentType;// Offset=0x0 Size=0x4
    unsigned long dwTitleId;// Offset=0x4 Size=0x4
    unsigned long long xuid;// Offset=0x8 Size=0x8
    unsigned char consoleId[5];// Offset=0x10 Size=0x5
    unsigned char contentId[20];// Offset=0x15 Size=0x14
    unsigned char __align0[7];// Offset=0x29 Size=0x7
    unsigned long long qwOfferID;// Offset=0x30 Size=0x8
    wchar_t wszOfferName[128];// Offset=0x38 Size=0x100
    char szPath[260];// Offset=0x138 Size=0x104
    unsigned char __align1[4];// Offset=0x23c Size=0x4
    union _LARGE_INTEGER liInstallSize;// Offset=0x240 Size=0x8
    unsigned long dwPercentCompleted;// Offset=0x248 Size=0x4
};

struct _ACCOUNT_QUERY_RESPONSE// Size=0x6 (Id=2048)
{
    unsigned short wResponseBytesLength;// Offset=0x0 Size=0x2
    unsigned char * pbResponseBytes;// Offset=0x2 Size=0x4
};

struct _USER_XNAME// Size=0x20 (Id=2049)
{
    wchar_t wszGamerTag[16];// Offset=0x0 Size=0x20
};

struct _KQUEUE// Size=0x28 (Id=2050)
{
    struct _DISPATCHER_HEADER Header;// Offset=0x0 Size=0x10
    struct _LIST_ENTRY EntryListHead;// Offset=0x10 Size=0x8
    unsigned long CurrentCount;// Offset=0x18 Size=0x4
    unsigned long MaximumCount;// Offset=0x1c Size=0x4
    struct _LIST_ENTRY ThreadListHead;// Offset=0x20 Size=0x8
};

struct _USER_PAYMENT_INFO// Size=0x8f0 (Id=2051)
{
    wchar_t wszFirstName[64];// Offset=0x0 Size=0x80
    wchar_t wszLastName[64];// Offset=0x80 Size=0x80
    wchar_t wszStreet1[128];// Offset=0x100 Size=0x100
    wchar_t wszStreet2[128];// Offset=0x200 Size=0x100
    wchar_t wszDistrict[128];// Offset=0x300 Size=0x100
    wchar_t wszCity[64];// Offset=0x400 Size=0x80
    wchar_t wszState[64];// Offset=0x480 Size=0x80
    unsigned char bCountryId;// Offset=0x500 Size=0x1
    unsigned char __align0[1];// Offset=0x501 Size=0x1
    unsigned short wLanguageId;// Offset=0x502 Size=0x2
    wchar_t wszPostalCode[16];// Offset=0x504 Size=0x20
    wchar_t wszPhonePrefix[12];// Offset=0x524 Size=0x18
    wchar_t wszPhoneNumber[12];// Offset=0x53c Size=0x18
    wchar_t wszPhoneExtension[12];// Offset=0x554 Size=0x18
    unsigned char bPaymentTypeId;// Offset=0x56c Size=0x1
    unsigned char __align1[1];// Offset=0x56d Size=0x1
    wchar_t wszCardHolder[64];// Offset=0x56e Size=0x80
    unsigned char bCardTypeId;// Offset=0x5ee Size=0x1
    unsigned char __align2[1];// Offset=0x5ef Size=0x1
    wchar_t wszCardNumber[24];// Offset=0x5f0 Size=0x30
    struct _FILETIME ftCardExpiration;// Offset=0x620 Size=0x8
    wchar_t wszEmail[129];// Offset=0x628 Size=0x102
    wchar_t wszBankCode[64];// Offset=0x72a Size=0x80
    wchar_t wszBranchCode[64];// Offset=0x7aa Size=0x80
    wchar_t wszCheckDigits[64];// Offset=0x82a Size=0x80
    wchar_t wszVoucher[26];// Offset=0x8aa Size=0x34
    unsigned char bMsftOptIn;// Offset=0x8de Size=0x1
    unsigned char bPartnerOptIn;// Offset=0x8df Size=0x1
    unsigned long long qwOfferId;// Offset=0x8e0 Size=0x8
    struct _FILETIME ftBirthdate;// Offset=0x8e8 Size=0x8
};

struct _MIGRATE_XBOX1_USER_REQUEST// Size=0x5e (Id=2052)
{
    struct _PASSPORT_SESSION_TOKEN pUserSessionToken[1];// Offset=0x0 Size=0x1c
    struct _PASSPORT_SESSION_TOKEN pParentSessionToken[1];// Offset=0x1c Size=0x1c
    unsigned long long qwOfflineXuid;// Offset=0x38 Size=0x8
    unsigned short wUserPassportMemberNameLength;// Offset=0x40 Size=0x2
    char * szUserPassportMemberName;// Offset=0x42 Size=0x4
    unsigned long dwTitleId;// Offset=0x46 Size=0x4
    unsigned long long qwMachineId;// Offset=0x4a Size=0x8
    unsigned short wLanguageId;// Offset=0x52 Size=0x2
    unsigned short wReservedBytesLength;// Offset=0x54 Size=0x2
    unsigned char * pbReservedBytes;// Offset=0x56 Size=0x4
    struct _MIGRATE_XBOX1_USER_RESPONSE * pResponse;// Offset=0x5a Size=0x4
};

struct D3DXVECTOR4_16F// Size=0x8 (Id=2053)
{
    struct D3DXFLOAT16 x;// Offset=0x0 Size=0x2
    struct D3DXFLOAT16 y;// Offset=0x2 Size=0x2
    struct D3DXFLOAT16 z;// Offset=0x4 Size=0x2
    struct D3DXFLOAT16 w;// Offset=0x6 Size=0x2
};

struct _PASSPORT_SECRET_QUESTION// Size=0x6 (Id=2054)
{
    unsigned short wSecretQuestionLength;// Offset=0x0 Size=0x2
    unsigned short * szSecretQuestion;// Offset=0x2 Size=0x4
};

struct _GENERIC_LIST_MODIFY_ITEMS_REQUEST// Size=0x22 (Id=2055)
{
    unsigned long long xUserId;// Offset=0x0 Size=0x8
    unsigned long nListType;// Offset=0x8 Size=0x4
    unsigned long nListId;// Offset=0xc Size=0x4
    struct _FILETIME ftLastModified;// Offset=0x10 Size=0x8
    unsigned short wNumItems;// Offset=0x18 Size=0x2
    struct _GENERIC_LIST_ITEM_MODIFICATION_INFO * pModInfo;// Offset=0x1a Size=0x4
    struct _GENERIC_LIST_MODIFY_ITEMS_RESPONSE * pResponse;// Offset=0x1e Size=0x4
};

struct _XPARTY_GET_FORMATION_PARAMS// Size=0x330 (Id=2056)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long cXuids;// Offset=0x4 Size=0x4
    unsigned long long rgXuids[100];// Offset=0x8 Size=0x320
    struct _XPARTY_FORMATION * rgFormations;// Offset=0x328 Size=0x4
};

struct _ACCOUNT_ACCEPT_TOU_REQUEST// Size=0x10 (Id=2057)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned long long qwMachineId;// Offset=0x8 Size=0x8
};

struct _XMATCH_SESSION_UPDATE_REQUEST// Size=0x50 (Id=2058)
{
    unsigned long dwMessageLength;// Offset=0x0 Size=0x4
    struct XNKID SessionID;// Offset=0x4 Size=0x8
    unsigned long dwTitleID;// Offset=0xc Size=0x4
    struct XNADDR HostAddress;// Offset=0x10 Size=0x24
    unsigned long dwPublicOpen;// Offset=0x34 Size=0x4
    unsigned long dwPrivateOpen;// Offset=0x38 Size=0x4
    unsigned long dwPublicFilled;// Offset=0x3c Size=0x4
    unsigned long dwPrivateFilled;// Offset=0x40 Size=0x4
    unsigned long dwNumAttributes;// Offset=0x44 Size=0x4
    unsigned long * pAttributeOffsets;// Offset=0x48 Size=0x4
    struct _XONLINE_ATTRIBUTE * pAttributes;// Offset=0x4c Size=0x4
};

struct _P_GET_PEER_SESSION// Size=0x4 (Id=2059)
{
    struct _GET_SESSION_RESULTS * pResults;// Offset=0x0 Size=0x4
};

struct _OFFER_PRICE// Size=0x13 (Id=2060)
{
    unsigned long dwPaymentType;// Offset=0x0 Size=0x4
    unsigned char bTaxType;// Offset=0x4 Size=0x1
    unsigned long dwWholePrice;// Offset=0x5 Size=0x4
    unsigned long dwFractionalPrice;// Offset=0x9 Size=0x4
    unsigned short wPriceTextLength;// Offset=0xd Size=0x2
    unsigned short * wszPriceText;// Offset=0xf Size=0x4
};

struct _P_BLOCK_MSG// Size=0x30 (Id=2061)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwUserID;// Offset=0x20 Size=0x8
    unsigned long long qwBlockID;// Offset=0x28 Size=0x8
};

struct _LOGON_CHECK_REQUEST// Size=0x2c (Id=2062)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwUserId;// Offset=0x20 Size=0x8
    struct _LOGON_CHECK_RESPONSE * pResults;// Offset=0x28 Size=0x4
};

struct _XAMPACKAGEMANAGER_DELETEEXTENDEDPARTITION_MSG// Size=0x8 (Id=2063)
{
    unsigned long DeviceID;// Offset=0x0 Size=0x4
    int bAllowReboot;// Offset=0x4 Size=0x4
};

struct _DVD_AP25_CHALLENGE_ENTRY// Size=0x10 (Id=2064)
{
    unsigned long SourceSector;// Offset=0x0 Size=0x4
    unsigned long TargetSector;// Offset=0x4 Size=0x4
    unsigned short ReferenceAngle;// Offset=0x8 Size=0x2
    unsigned char Reserved[6];// Offset=0xa Size=0x6
};

struct _XCONTENT_METADATA_INSTALLER_PROGRESS_CACHE// Size=0x15f0 (Id=2065)
{
    struct _XONLINECONTENT_RESUME_HEADER ResumeHeader;// Offset=0x0 Size=0x20
    unsigned char CabResumeData[5584];// Offset=0x20 Size=0x15d0
};

struct PreRangeAttribute// Size=0xc (Id=2066)
{
    unsigned int Deref;// Offset=0x0 Size=0x4
    char * MinVal;// Offset=0x4 Size=0x4
    char * MaxVal;// Offset=0x8 Size=0x4
};

struct _RTL_PROCESS_HEAPS// Size=0x44 (Id=2067)
{
    unsigned long NumberOfHeaps;// Offset=0x0 Size=0x4
    struct _RTL_HEAP_INFORMATION Heaps[1];// Offset=0x4 Size=0x40
};

struct _XCONTENT_METADATA_INSTALLER_SYSTEM_UPDATE// Size=0x15f0 (Id=2068)
{
    unsigned long CurrentVersion;// Offset=0x0 Size=0x4
    unsigned long NewVersion;// Offset=0x4 Size=0x4
    unsigned char Reserved[5608];// Offset=0x8 Size=0x15e8
};

struct _XCREATECONTENTPARAM// Size=0x268 (Id=2069)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    char szRootName[64];// Offset=0x4 Size=0x40
    unsigned char __align0[4];// Offset=0x44 Size=0x4
    union // Size=0x134 (Id=0)
    {
        struct _XCONTENT_DATA cd;// Offset=0x48 Size=0x134
        struct _XCONTENT_DATA_INTERNAL cdi;// Offset=0x48 Size=0x200
    };
    unsigned long dwContentFlags;// Offset=0x248 Size=0x4
    unsigned long * pdwDisposition;// Offset=0x24c Size=0x4
    unsigned long * pdwLicenseMask;// Offset=0x250 Size=0x4
    unsigned long dwFileCacheSize;// Offset=0x254 Size=0x4
    union _ULARGE_INTEGER uliContentSize;// Offset=0x258 Size=0x8
    struct _XOVERLAPPED * pOverlapped;// Offset=0x260 Size=0x4
    unsigned long cbContentData;// Offset=0x264 Size=0x4
};

struct _XONLINE_USER_TEAM// Size=0x12 (Id=2070)
{
    unsigned long long qwTeamID;// Offset=0x0 Size=0x8
    int fMember;// Offset=0x8 Size=0x4
    unsigned short cbTeamName;// Offset=0xc Size=0x2
    unsigned short * wszTeamName;// Offset=0xe Size=0x4
};

struct D3DResource// Size=0x18 (Id=2071)
{
    unsigned long Common;// Offset=0x0 Size=0x4
    unsigned long ReferenceCount;// Offset=0x4 Size=0x4
    unsigned long Fence;// Offset=0x8 Size=0x4
    unsigned long ReadFence;// Offset=0xc Size=0x4
    unsigned long Identifier;// Offset=0x10 Size=0x4
    unsigned long BaseFlush;// Offset=0x14 Size=0x4
};

struct _P_FRIENDS_ENUM_CREATE_MSG// Size=0x14 (Id=2072)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long dwStartingIndex;// Offset=0x4 Size=0x4
    unsigned long dwFriendsToReturn;// Offset=0x8 Size=0x4
    unsigned long pcbBuffer[1];// Offset=0xc Size=0x4
    void * ph[1];// Offset=0x10 Size=0x4
};

struct _SVOD_DEVICE_DESCRIPTOR// Size=0x24 (Id=2073)
{
    unsigned char DescriptorLength;// Offset=0x0 Size=0x1
    unsigned char BlockCacheElementCount;// Offset=0x1 Size=0x1
    unsigned char WorkerThreadProcessor;// Offset=0x2 Size=0x1
    unsigned char WorkerThreadPriority;// Offset=0x3 Size=0x1
    struct _SVOD_HASH_ENTRY FirstFragmentHashEntry;// Offset=0x4 Size=0x14
    struct _SVOD_DEVICE_FEATURES Features;// Offset=0x18 Size=0x1
    unsigned char NumberOfDataBlocks2;// Offset=0x19 Size=0x1
    unsigned char NumberOfDataBlocks1;// Offset=0x1a Size=0x1
    unsigned char NumberOfDataBlocks0;// Offset=0x1b Size=0x1
    unsigned char StartingDataBlock0;// Offset=0x1c Size=0x1
    unsigned char StartingDataBlock1;// Offset=0x1d Size=0x1
    unsigned char StartingDataBlock2;// Offset=0x1e Size=0x1
    unsigned char Reserved[5];// Offset=0x1f Size=0x5
};

struct _P_PRESENCE_ENUM_CREATE_MSG// Size=0x1c (Id=2074)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long cPeers;// Offset=0x4 Size=0x4
    unsigned long long * pPeers;// Offset=0x8 Size=0x4
    unsigned long dwStartingIndex;// Offset=0xc Size=0x4
    unsigned long dwPeersToReturn;// Offset=0x10 Size=0x4
    unsigned long pcbBuffer[1];// Offset=0x14 Size=0x4
    void * ph[1];// Offset=0x18 Size=0x4
};

struct _RECOVER_ACCOUNT_RESPONSE// Size=0x32 (Id=2075)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned long long qwOfflineXuid;// Offset=0x8 Size=0x8
    unsigned char pKey[16];// Offset=0x10 Size=0x10
    unsigned short wGamertagLength;// Offset=0x20 Size=0x2
    unsigned short * wszGamertag;// Offset=0x22 Size=0x4
    unsigned short wDomainLength;// Offset=0x26 Size=0x2
    unsigned short * wszDomain;// Offset=0x28 Size=0x4
    unsigned short wRealmLength;// Offset=0x2c Size=0x2
    unsigned short * wszRealm;// Offset=0x2e Size=0x4
};

struct _XREFERRAL_LOCATION// Size=0x8 (Id=2076)
{
    unsigned short wRank;// Offset=0x0 Size=0x2
    unsigned short wUrlSize;// Offset=0x2 Size=0x2
    char * pszUrl;// Offset=0x4 Size=0x4
};

struct _XCONTENT_DOWNLOAD_PARAMS// Size=0x14 (Id=2077)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned char * pbContentId;// Offset=0x4 Size=0x4
    unsigned long dwTargetDirectoryLength;// Offset=0x8 Size=0x4
    char * szTargetDirectory;// Offset=0xc Size=0x4
    unsigned long dwFlags;// Offset=0x10 Size=0x4
};

struct _FB_PLAYER_REVIEW_REQUEST// Size=0x20 (Id=2078)
{
    unsigned long long qwSenderID;// Offset=0x0 Size=0x8
    unsigned long long qwTargetID;// Offset=0x8 Size=0x8
    unsigned long dwTitleID;// Offset=0x10 Size=0x4
    unsigned long dwType;// Offset=0x14 Size=0x4
    unsigned long long qwContext;// Offset=0x18 Size=0x8
};

struct _XPROFILE_ACHIEVEMENT_SYNC_REQUEST// Size=0x36 (Id=2079)
{
    unsigned long dwAchievementId;// Offset=0x0 Size=0x4
    struct _FILETIME ftAchieved;// Offset=0x4 Size=0x8
    unsigned long dwSequence;// Offset=0xc Size=0x4
    unsigned long dwFlags;// Offset=0x10 Size=0x4
    unsigned char bType;// Offset=0x14 Size=0x1
    unsigned long dwCred;// Offset=0x15 Size=0x4
    unsigned long dwImageId;// Offset=0x19 Size=0x4
    unsigned char cbTitleLen;// Offset=0x1d Size=0x1
    unsigned short * pszTitle;// Offset=0x1e Size=0x4
    unsigned char cbDescriptionLen;// Offset=0x22 Size=0x1
    unsigned short * pszDescription;// Offset=0x23 Size=0x4
    unsigned char cbHowToLen;// Offset=0x27 Size=0x1
    unsigned short * pszHowTo;// Offset=0x28 Size=0x4
    unsigned char bNextIdsLen;// Offset=0x2c Size=0x1
    unsigned long * pdwNextIds;// Offset=0x2d Size=0x4
    unsigned char bReplaceIdsLen;// Offset=0x31 Size=0x1
    unsigned long * pdwReplaceIds;// Offset=0x32 Size=0x4
};

struct _D3DXSHADER_COMPILE_PARAMETERSW// Size=0x44 (Id=2080)
{
    unsigned long Flags;// Offset=0x0 Size=0x4
    unsigned long UPDBTimestamp;// Offset=0x4 Size=0x4
    unsigned short * UPDBPath;// Offset=0x8 Size=0x4
    struct ID3DXBuffer * pUPDBBuffer;// Offset=0xc Size=0x4
    unsigned long TempRegisterLimit;// Offset=0x10 Size=0x4
    void * pUPDBB;// Offset=0x14 Size=0x4
    char * CpuFunctionName;// Offset=0x18 Size=0x4
    int bXbox360ExtensionUsed;// Offset=0x1c Size=0x4
    unsigned long PixelShaderSamplerRegisterBase;// Offset=0x20 Size=0x4
    unsigned long PixelShaderSamplerRegisterCount;// Offset=0x24 Size=0x4
    unsigned long VertexShaderSamplerRegisterBase;// Offset=0x28 Size=0x4
    unsigned long VertexShaderSamplerRegisterCount;// Offset=0x2c Size=0x4
    unsigned long PixelShaderInstructionCount;// Offset=0x30 Size=0x4
    unsigned long VertexShaderInstructionCount;// Offset=0x34 Size=0x4
    unsigned short PixAssertAddressReg;// Offset=0x38 Size=0x2
    unsigned short PixDebugPrintAddressReg;// Offset=0x3a Size=0x2
    unsigned short PixDebugPrintSamplerReg;// Offset=0x3c Size=0x2
    unsigned short PixDebugPrintEnableReg;// Offset=0x3e Size=0x2
    unsigned short PixDiagnosticIndexReg;// Offset=0x40 Size=0x2
};

struct _DVD_XGD2_DISC_AUTH_RESULT_LBA_IO_ERROR// Size=0xc (Id=2081)
{
    long Status;// Offset=0x0 Size=0x4
    unsigned long State;// Offset=0x4 Size=0x4
    unsigned long Block;// Offset=0x8 Size=0x4
};

struct _DOWNLOAD_QUEUE_QUERY_QUEUES_REQUEST// Size=0x24 (Id=2082)
{
    unsigned long long xUserId;// Offset=0x0 Size=0x8
    unsigned long nQueueId;// Offset=0x8 Size=0x4
    struct _FILETIME ftLastModified;// Offset=0xc Size=0x8
    unsigned long nPageSize;// Offset=0x14 Size=0x4
    unsigned long nPageNum;// Offset=0x18 Size=0x4
    unsigned long nOrderDir;// Offset=0x1c Size=0x4
    struct _DOWNLOAD_QUEUE_QUERY_QUEUES_RESPONSE * pResponse;// Offset=0x20 Size=0x4
};

struct _CERTIFICATE_LOG_HEADER// Size=0x20 (Id=2083)
{
    unsigned char Digest[20];// Offset=0x0 Size=0x14
    unsigned long Count;// Offset=0x14 Size=0x4
    unsigned long Padding[2];// Offset=0x18 Size=0x8
};

struct _DVD_AP25_CHALLENGE_SET_HEADER// Size=0x20 (Id=2084)
{
    unsigned char MediaID[16];// Offset=0x0 Size=0x10
    unsigned long Index;// Offset=0x10 Size=0x4
    unsigned short Flags;// Offset=0x14 Size=0x2
    unsigned char CountOfEntries;// Offset=0x16 Size=0x1
    unsigned char Reserved[9];// Offset=0x17 Size=0x9
};

struct _CREDIT_CARD_INFO// Size=0x1b (Id=2085)
{
    unsigned char bCardTypeId;// Offset=0x0 Size=0x1
    unsigned short wAccountHolderNameLength;// Offset=0x1 Size=0x2
    unsigned short * wszAccountHolderName;// Offset=0x3 Size=0x4
    unsigned short wAccountNumberLength;// Offset=0x7 Size=0x2
    unsigned short * wszAccountNumber;// Offset=0x9 Size=0x4
    unsigned short wCCVNumberLength;// Offset=0xd Size=0x2
    unsigned short * wszCCVNumber;// Offset=0xf Size=0x4
    struct _FILETIME ftExpirationDate;// Offset=0x13 Size=0x8
};

struct _Q_MESSAGE_SUMMARY// Size=0x34 (Id=2086)
{
    unsigned long long qwSenderID;// Offset=0x0 Size=0x8
    unsigned long long qwSenderContext;// Offset=0x8 Size=0x8
    unsigned long mtSentTime;// Offset=0x10 Size=0x4
    unsigned long dwMessageID;// Offset=0x14 Size=0x4
    unsigned long dwMessageFlags;// Offset=0x18 Size=0x4
    unsigned long dwSenderTitleID;// Offset=0x1c Size=0x4
    unsigned short wExpireMinutes;// Offset=0x20 Size=0x2
    unsigned short cbDetails;// Offset=0x22 Size=0x2
    unsigned char bMessageType;// Offset=0x24 Size=0x1
    char szSenderName[15];// Offset=0x25 Size=0xf
};

struct D3DXQUATERNION// Size=0x10 (Id=2087)
{
    float x;// Offset=0x0 Size=0x4
    float y;// Offset=0x4 Size=0x4
    float z;// Offset=0x8 Size=0x4
    float w;// Offset=0xc Size=0x4
};

struct _XDVRSTORAGE_ALLOCATE_PARAMS// Size=0x8 (Id=2088)
{
    unsigned long dwSize;// Offset=0x0 Size=0x4
    int fAutoApply;// Offset=0x4 Size=0x4
};

struct _XMATCH_SEARCH_REQUEST// Size=0x44 (Id=2089)
{
    unsigned long dwMessageLength;// Offset=0x0 Size=0x4
    unsigned long dwTitleID;// Offset=0x4 Size=0x4
    unsigned long dwProcedureIndex;// Offset=0x8 Size=0x4
    struct XNADDR HostAddress;// Offset=0xc Size=0x24
    unsigned short wNumUsers;// Offset=0x30 Size=0x2
    unsigned short wFlags;// Offset=0x32 Size=0x2
    unsigned long dwNumAttributes;// Offset=0x34 Size=0x4
    unsigned long * pAttributeOffsets;// Offset=0x38 Size=0x4
    struct _XONLINE_ATTRIBUTE * pAttributes;// Offset=0x3c Size=0x4
    struct _XONLINE_MATCH_SEARCHRESULT_HEADER * pSearchResults;// Offset=0x40 Size=0x4
};

struct _PASSPORT_GET_BUDDY_GAMERTAG_RESPONSE// Size=0xe (Id=2090)
{
    unsigned long long qwBuddyUserId;// Offset=0x0 Size=0x8
    unsigned short wBuddyGamertagLength;// Offset=0x8 Size=0x2
    unsigned short * wszBuddyGamertag;// Offset=0xa Size=0x4
};

struct _GET_LINKED_GAMERTAG_RESPONSE// Size=0xe (Id=2091)
{
    unsigned long long qwUserPuid;// Offset=0x0 Size=0x8
    unsigned short wGamertagLength;// Offset=0x8 Size=0x2
    unsigned short * wszGamertag;// Offset=0xa Size=0x4
};

struct PRESENCE_CONTEXT// Size=0x8 (Id=2092)
{
    unsigned long dwContextId;// Offset=0x0 Size=0x4
    unsigned long dwContextValue;// Offset=0x4 Size=0x4
};

struct ID3DXSPMesh// Size=0x4 (Id=2093)
{
    struct ID3DXSPMeshVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct _XPROFILE_ACHIEVEMENT// Size=0x36 (Id=2094)
{
    unsigned long dwAchievementId;// Offset=0x0 Size=0x4
    struct _FILETIME ftAchieved;// Offset=0x4 Size=0x8
    unsigned long dwSequence;// Offset=0xc Size=0x4
    unsigned long dwFlags;// Offset=0x10 Size=0x4
    unsigned char bType;// Offset=0x14 Size=0x1
    unsigned long dwCred;// Offset=0x15 Size=0x4
    unsigned long dwImageId;// Offset=0x19 Size=0x4
    unsigned char cbTitleLen;// Offset=0x1d Size=0x1
    unsigned short * pszTitle;// Offset=0x1e Size=0x4
    unsigned char cbDescriptionLen;// Offset=0x22 Size=0x1
    unsigned short * pszDescription;// Offset=0x23 Size=0x4
    unsigned char cbHowToLen;// Offset=0x27 Size=0x1
    unsigned short * pszHowTo;// Offset=0x28 Size=0x4
    unsigned char bNextIdsLen;// Offset=0x2c Size=0x1
    unsigned long * pdwNextIds;// Offset=0x2d Size=0x4
    unsigned char bReplaceIdsLen;// Offset=0x31 Size=0x1
    unsigned long * pdwReplaceIds;// Offset=0x32 Size=0x4
};

struct _XMARKETPLACE_PROPNODE// Size=0x14 (Id=2095)
{
    unsigned short * pszName;// Offset=0x0 Size=0x4
    unsigned short wPropType;// Offset=0x4 Size=0x2
    unsigned char __align0[2];// Offset=0x6 Size=0x2
    struct _XMARKETPLACE_PROPNODE * pNext;// Offset=0x8 Size=0x4
    struct _XMARKETPLACE_PROPNODE * pChild;// Offset=0xc Size=0x4
    struct _XMARKETPLACE_PROPNODE * pParent;// Offset=0x10 Size=0x4
};

struct _P_TEAM_RECRUIT_MSG_NAME// Size=0x5c (Id=2096)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwUserID;// Offset=0x20 Size=0x8
    unsigned long dwTitleID;// Offset=0x28 Size=0x4
    unsigned long long qwTeamID;// Offset=0x2c Size=0x8
    unsigned long long qwMemberID;// Offset=0x34 Size=0x8
    char szMemberName[16];// Offset=0x3c Size=0x10
    unsigned long dwMemberPriv;// Offset=0x4c Size=0x4
    unsigned long dwMessageFlags;// Offset=0x50 Size=0x4
    unsigned short cbMemberData;// Offset=0x54 Size=0x2
    unsigned short cbDetails;// Offset=0x56 Size=0x2
    unsigned char * pbMemberData;// Offset=0x58 Size=0x4
};

struct _XPNGENCODE_PARAMS// Size=0x20 (Id=2097)
{
    unsigned char * pbInputBuffer;// Offset=0x0 Size=0x4
    unsigned long dwInputBufferWidth;// Offset=0x4 Size=0x4
    unsigned long dwInputBufferHeight;// Offset=0x8 Size=0x4
    unsigned long dwInputBufferPitch;// Offset=0xc Size=0x4
    unsigned char * pbOutBuffer;// Offset=0x10 Size=0x4
    unsigned long * pdwOutBufferLen;// Offset=0x14 Size=0x4
    unsigned long dwFlags;// Offset=0x18 Size=0x4
    struct _XOVERLAPPED * pOverlapped;// Offset=0x1c Size=0x4
};

struct _XSIGNATURE_ACQUIRE_MEDIA_LICENSES_REQUEST// Size=0x18 (Id=2098)
{
    unsigned short wMediaOfferIDCount;// Offset=0x0 Size=0x2
    struct _MIID_OFFERID_PAIR * pMediaOfferIDs;// Offset=0x2 Size=0x4
    unsigned long long qwUserId;// Offset=0x6 Size=0x8
    unsigned short wClientInfoBlockCount;// Offset=0xe Size=0x2
    struct _XSIGNATURE_GENERIC_BLOCK * pClientInfoBlock;// Offset=0x10 Size=0x4
    struct _XSIGNATURE_ACQUIRE_MEDIA_LICENSES_RESPONSE * pResults;// Offset=0x14 Size=0x4
};

struct _XPARTY_SET_CONNECTIVITY_GRAPH_PARAMS// Size=0x4 (Id=2099)
{
    struct _XPARTY_DIGRAPH * pGraph;// Offset=0x0 Size=0x4
};

struct _P_TEAM_DELETE_MSG// Size=0x34 (Id=2100)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwUserID;// Offset=0x20 Size=0x8
    unsigned long dwTitleID;// Offset=0x28 Size=0x4
    unsigned long long qwTeamID;// Offset=0x2c Size=0x8
};

struct _XMSG_GAME_INVITE_CANCEL// Size=0x32 (Id=2101)
{
    unsigned long long XuidUser;// Offset=0x0 Size=0x8
    unsigned short cInvitees;// Offset=0x8 Size=0x2
    unsigned long long * pXuidInvitees;// Offset=0xa Size=0x4
    struct XNKID SessionID;// Offset=0xe Size=0x8
    struct _XOVERLAPPED pXOverlapped[1];// Offset=0x16 Size=0x1c
};

struct _FB_ENUM_REVIEWS_RESPONSE// Size=0xc (Id=2102)
{
    unsigned long hr;// Offset=0x0 Size=0x4
    unsigned long cReviews;// Offset=0x4 Size=0x4
    struct _FB_PLAYER_REVIEW * pReviews;// Offset=0x8 Size=0x4
};

struct ID3DXFile// Size=0x4 (Id=2103)
{
    struct ID3DXFileVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

union _Q_REPLY_ITEM// Size=0x28 (Id=2104)
{
    union // Size=0x28 (Id=0)
    {
        struct _P_LIST_CHANGE_ITEM ChangeItem;// Offset=0x0 Size=0x18
        struct _P_PRESENCE_ITEM PresenceItem;// Offset=0x0 Size=0x24
        struct _P_INVITATION_ITEM InvitationItem;// Offset=0x0 Size=0x1c
        struct _P_INVITATION_ANSWER_ITEM AnswerItem;// Offset=0x0 Size=0x1a
        struct _P_PEER_PRESENCE_ITEM PeerPresenceItem;// Offset=0x0 Size=0x1e
        struct _P_PRESENCE_2_ITEM RichPresenceItem;// Offset=0x0 Size=0x28
        struct _P_INVITE_ACTION_ITEM InviteActionItem;// Offset=0x0 Size=0x14
    };
};

struct _SGADDR2// Size=0x14 (Id=2105)
{
    struct in_addr inaSg;// Offset=0x0 Size=0x4
    unsigned long dwSpiSg;// Offset=0x4 Size=0x4
    unsigned long long qwXboxID;// Offset=0x8 Size=0x8
    unsigned char bPlatform;// Offset=0x10 Size=0x1
    unsigned char abReserved[3];// Offset=0x11 Size=0x3
};

struct _XONLINE_QUERY_ATTRIBUTE_STRING// Size=0x8 (Id=2106)
{
    unsigned long Length;// Offset=0x0 Size=0x4
    unsigned short * lpValue;// Offset=0x4 Size=0x4
};

struct _XSTORAGE_ACCESS_TOKEN_READ// Size=0xe (Id=2107)
{
    struct _FILETIME ftTokenExpirationDate;// Offset=0x0 Size=0x8
    unsigned short wSignatureSize;// Offset=0x8 Size=0x2
    unsigned char * prgbSignature;// Offset=0xa Size=0x4
};

struct _XAMPACKAGEMANAGER_GETEXPERIENCEMODE_MSG// Size=0x4 (Id=2108)
{
    unsigned long * ExperienceMode;// Offset=0x0 Size=0x4
};

struct _XENUMERATOR_XGI// Size=0x20 (Id=2109)
{
    unsigned long dwTitleId;// Offset=0x0 Size=0x4
    unsigned char __align0[4];// Offset=0x4 Size=0x4
    unsigned long long xuid;// Offset=0x8 Size=0x8
    unsigned long dwUserIndex;// Offset=0x10 Size=0x4
    unsigned long dwDetailFlags;// Offset=0x14 Size=0x4
    unsigned long dwCurrentOffset;// Offset=0x18 Size=0x4
    int fServer;// Offset=0x1c Size=0x4
};

struct _GENERIC_LIST_DENY_ACCESS_REQUEST// Size=0x18 (Id=2110)
{
    unsigned long long xUserId;// Offset=0x0 Size=0x8
    unsigned long nListType;// Offset=0x8 Size=0x4
    unsigned long nListId;// Offset=0xc Size=0x4
    unsigned long long ulMachineId;// Offset=0x10 Size=0x8
};

struct _XPARTY_JOIN_SHARED_PARAMS// Size=0x50 (Id=2111)
{
    unsigned long long xuidContact;// Offset=0x0 Size=0x8
    struct _XPARTY_INFO partyInfo;// Offset=0x8 Size=0x3e
    unsigned char __align0[2];// Offset=0x46 Size=0x2
    struct _XPARTY_LEAVE_PARAMS InternalLeaveParams;// Offset=0x48 Size=0x4
};

struct _XPARTY_IS_COORDINATOR_PARAMS// Size=0x4 (Id=2112)
{
    int * pfCoordinator;// Offset=0x0 Size=0x4
};

struct _IDEREGS// Size=0x8 (Id=2113)
{
    unsigned char bFeaturesReg;// Offset=0x0 Size=0x1
    unsigned char bSectorCountReg;// Offset=0x1 Size=0x1
    unsigned char bSectorNumberReg;// Offset=0x2 Size=0x1
    unsigned char bCylLowReg;// Offset=0x3 Size=0x1
    unsigned char bCylHighReg;// Offset=0x4 Size=0x1
    unsigned char bDriveHeadReg;// Offset=0x5 Size=0x1
    unsigned char bCommandReg;// Offset=0x6 Size=0x1
    unsigned char bHostSendsData;// Offset=0x7 Size=0x1
};

struct _StoreFrontList// Size=0x8 (Id=2114)
{
    struct _StoreFrontInfo * pStoreFronts;// Offset=0x0 Size=0x4
    unsigned long dwStoreCount;// Offset=0x4 Size=0x4
};

struct _P_GET_EXTENDED_STATE_REQUEST// Size=0x2c (Id=2115)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwUserId;// Offset=0x20 Size=0x8
    struct _P_GET_EXTENDED_STATE_RESPONSE * pResults;// Offset=0x28 Size=0x4
};

struct _XONLINE_STATS_ENUM_BY_USER_REQUEST// Size=0x1c (Id=2116)
{
    unsigned long dwTitleId;// Offset=0x0 Size=0x4
    unsigned long long Xuid;// Offset=0x4 Size=0x8
    unsigned long dwPageSize;// Offset=0xc Size=0x4
    unsigned long dwNumSpecs;// Offset=0x10 Size=0x4
    struct _XONLINE_STATS_SPEC * pSpecs;// Offset=0x14 Size=0x4
    struct _XONLINE_STATS_ENUM_RESULTS * pResults;// Offset=0x18 Size=0x4
};

struct _XAVATARMINICREATOR_PARAMS// Size=0x8 (Id=2117)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long dwFlags;// Offset=0x4 Size=0x4
};

struct _cpinfoexW// Size=0x220 (Id=2118)
{
    unsigned int MaxCharSize;// Offset=0x0 Size=0x4
    unsigned char DefaultChar[2];// Offset=0x4 Size=0x2
    unsigned char LeadByte[12];// Offset=0x6 Size=0xc
    wchar_t UnicodeDefaultChar;// Offset=0x12 Size=0x2
    unsigned int CodePage;// Offset=0x14 Size=0x4
    wchar_t CodePageName[260];// Offset=0x18 Size=0x208
};

struct _XMATCH_SESSION// Size=0x48 (Id=2119)
{
    unsigned long dwMessageLength;// Offset=0x0 Size=0x4
    struct XNKID SessionID;// Offset=0x4 Size=0x8
    unsigned long dwTitleID;// Offset=0xc Size=0x4
    struct XNADDR HostAddress;// Offset=0x10 Size=0x24
    unsigned long dwPublicOpen;// Offset=0x34 Size=0x4
    unsigned long dwPrivateOpen;// Offset=0x38 Size=0x4
    unsigned long dwPublicFilled;// Offset=0x3c Size=0x4
    unsigned long dwPrivateFilled;// Offset=0x40 Size=0x4
    unsigned long dwNumAttributes;// Offset=0x44 Size=0x4
};

struct _XENUMERATORTITLESERVER// Size=0xd4 (Id=2120)
{
    char szServerInfo[200];// Offset=0x0 Size=0xc8
    unsigned long dwCurrentIndex;// Offset=0xc8 Size=0x4
    unsigned long cbReplyBuffer;// Offset=0xcc Size=0x4
    unsigned char * pbReplyBuffer;// Offset=0xd0 Size=0x4
};

struct _DOWNLOAD_QUEUE_DELETE_ITEMS_RESPONSE// Size=0x8 (Id=2121)
{
    struct _FILETIME ftLastModified;// Offset=0x0 Size=0x8
};

struct _XPARTY_PROFILE_MEMBER_INFO// Size=0x17 (Id=2122)
{
    unsigned long long Xuid;// Offset=0x0 Size=0x8
    char GamerTag[15];// Offset=0x8 Size=0xf
};

struct ID3DXAnimationControllerVtbl// Size=0xa4 (Id=2123)
{
    HRESULT  ( * QueryInterface)(struct ID3DXAnimationController * ,const struct _GUID * ,void ** );// Offset=0x0 Size=0x4
    unsigned long  ( * AddRef)(struct ID3DXAnimationController * );// Offset=0x4 Size=0x4
    unsigned long  ( * Release)(struct ID3DXAnimationController * );// Offset=0x8 Size=0x4
    unsigned int  ( * GetMaxNumAnimationOutputs)(struct ID3DXAnimationController * );// Offset=0xc Size=0x4
    unsigned int  ( * GetMaxNumAnimationSets)(struct ID3DXAnimationController * );// Offset=0x10 Size=0x4
    unsigned int  ( * GetMaxNumTracks)(struct ID3DXAnimationController * );// Offset=0x14 Size=0x4
    unsigned int  ( * GetMaxNumEvents)(struct ID3DXAnimationController * );// Offset=0x18 Size=0x4
    HRESULT  ( * RegisterAnimationOutput)(struct ID3DXAnimationController * ,char * ,struct _D3DMATRIX * ,struct _D3DVECTOR * ,struct D3DXQUATERNION * ,struct _D3DVECTOR * );// Offset=0x1c Size=0x4
    HRESULT  ( * RegisterAnimationSet)(struct ID3DXAnimationController * ,struct ID3DXAnimationSet * );// Offset=0x20 Size=0x4
    HRESULT  ( * UnregisterAnimationSet)(struct ID3DXAnimationController * ,struct ID3DXAnimationSet * );// Offset=0x24 Size=0x4
    unsigned int  ( * GetNumAnimationSets)(struct ID3DXAnimationController * );// Offset=0x28 Size=0x4
    HRESULT  ( * GetAnimationSet)(struct ID3DXAnimationController * ,unsigned int ,struct ID3DXAnimationSet ** );// Offset=0x2c Size=0x4
    HRESULT  ( * AdvanceTime)(struct ID3DXAnimationController * ,float ,struct ID3DXAnimationCallbackHandler * );// Offset=0x30 Size=0x4
    HRESULT  ( * ResetTime)(struct ID3DXAnimationController * );// Offset=0x34 Size=0x4
    float  ( * GetTime)(struct ID3DXAnimationController * );// Offset=0x38 Size=0x4
    HRESULT  ( * SetTrackAnimationSet)(struct ID3DXAnimationController * ,unsigned int ,struct ID3DXAnimationSet * );// Offset=0x3c Size=0x4
    HRESULT  ( * GetTrackAnimationSet)(struct ID3DXAnimationController * ,unsigned int ,struct ID3DXAnimationSet ** );// Offset=0x40 Size=0x4
    HRESULT  ( * SetTrackPriority)(struct ID3DXAnimationController * ,unsigned int ,enum _D3DXPRIORITY_TYPE );// Offset=0x44 Size=0x4
    HRESULT  ( * SetTrackSpeed)(struct ID3DXAnimationController * ,unsigned int ,float );// Offset=0x48 Size=0x4
    HRESULT  ( * SetTrackWeight)(struct ID3DXAnimationController * ,unsigned int ,float );// Offset=0x4c Size=0x4
    HRESULT  ( * SetTrackPosition)(struct ID3DXAnimationController * ,unsigned int ,float );// Offset=0x50 Size=0x4
    HRESULT  ( * SetTrackEnable)(struct ID3DXAnimationController * ,unsigned int ,int );// Offset=0x54 Size=0x4
    HRESULT  ( * SetTrackDesc)(struct ID3DXAnimationController * ,unsigned int ,struct _D3DXTRACK_DESC * );// Offset=0x58 Size=0x4
    HRESULT  ( * GetTrackDesc)(struct ID3DXAnimationController * ,unsigned int ,struct _D3DXTRACK_DESC * );// Offset=0x5c Size=0x4
    HRESULT  ( * SetPriorityBlend)(struct ID3DXAnimationController * ,float );// Offset=0x60 Size=0x4
    float  ( * GetPriorityBlend)(struct ID3DXAnimationController * );// Offset=0x64 Size=0x4
    unsigned long  ( * KeyTrackSpeed)(struct ID3DXAnimationController * ,unsigned int ,float ,float ,float ,enum _D3DXTRANSITION_TYPE );// Offset=0x68 Size=0x4
    unsigned long  ( * KeyTrackWeight)(struct ID3DXAnimationController * ,unsigned int ,float ,float ,float ,enum _D3DXTRANSITION_TYPE );// Offset=0x6c Size=0x4
    unsigned long  ( * KeyTrackPosition)(struct ID3DXAnimationController * ,unsigned int ,float ,float );// Offset=0x70 Size=0x4
    unsigned long  ( * KeyTrackEnable)(struct ID3DXAnimationController * ,unsigned int ,int ,float );// Offset=0x74 Size=0x4
    unsigned long  ( * KeyPriorityBlend)(struct ID3DXAnimationController * ,float ,float ,float ,enum _D3DXTRANSITION_TYPE );// Offset=0x78 Size=0x4
    HRESULT  ( * UnkeyEvent)(struct ID3DXAnimationController * ,unsigned long );// Offset=0x7c Size=0x4
    HRESULT  ( * UnkeyAllTrackEvents)(struct ID3DXAnimationController * ,unsigned int );// Offset=0x80 Size=0x4
    HRESULT  ( * UnkeyAllPriorityBlends)(struct ID3DXAnimationController * );// Offset=0x84 Size=0x4
    unsigned long  ( * GetCurrentTrackEvent)(struct ID3DXAnimationController * ,unsigned int ,enum _D3DXEVENT_TYPE );// Offset=0x88 Size=0x4
    unsigned long  ( * GetCurrentPriorityBlend)(struct ID3DXAnimationController * );// Offset=0x8c Size=0x4
    unsigned long  ( * GetUpcomingTrackEvent)(struct ID3DXAnimationController * ,unsigned int ,unsigned long );// Offset=0x90 Size=0x4
    unsigned long  ( * GetUpcomingPriorityBlend)(struct ID3DXAnimationController * ,unsigned long );// Offset=0x94 Size=0x4
    HRESULT  ( * ValidateEvent)(struct ID3DXAnimationController * ,unsigned long );// Offset=0x98 Size=0x4
    HRESULT  ( * GetEventDesc)(struct ID3DXAnimationController * ,unsigned long ,struct _D3DXEVENT_DESC * );// Offset=0x9c Size=0x4
    HRESULT  ( * CloneAnimationController)(struct ID3DXAnimationController * ,unsigned int ,unsigned int ,unsigned int ,unsigned int ,struct ID3DXAnimationController ** );// Offset=0xa0 Size=0x4
};

struct _CDROM_SUB_Q_DATA_FORMAT// Size=0x2 (Id=2124)
{
    unsigned char Format;// Offset=0x0 Size=0x1
    unsigned char Track;// Offset=0x1 Size=0x1
};

struct _NOTIFICATION_UPDATE_STATE_FLAGS// Size=0x10 (Id=2125)
{
    unsigned long long UserXuid;// Offset=0x0 Size=0x8
    unsigned long dwStateFlagsSet;// Offset=0x8 Size=0x4
    unsigned long dwStateFlagsClear;// Offset=0xc Size=0x4
};

struct _SET_USER_SETTINGS2_REQUEST_STRUCT// Size=0x2c (Id=2126)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned short bTier;// Offset=0x8 Size=0x2
    unsigned short dwUserFlags;// Offset=0xa Size=0x2
    unsigned long rgPrivileges[8];// Offset=0xc Size=0x20
};

struct _XMXDECN4// Size=0x4 (Id=2127)
{
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            int x:10;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xa
            int y:10;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0xa
            int z:10;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0xa
            unsigned int w:2;// Offset=0x0 Size=0x4 BitOffset=0x1e BitSize=0x2
        };
        unsigned int v;// Offset=0x0 Size=0x4
    };
};

struct XGI_SESSIONSTATE_MSG// Size=0x10 (Id=2128)
{
    struct tagSESSION_STRUCT * pSessionStruct;// Offset=0x0 Size=0x4
    unsigned long dwFlags;// Offset=0x4 Size=0x4
    unsigned long long qwSessionNonce;// Offset=0x8 Size=0x8
};

struct _P_DELETE_MSG// Size=0x30 (Id=2129)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwSenderID;// Offset=0x20 Size=0x8
    unsigned long long qwBuddyID;// Offset=0x28 Size=0x8
};

struct _XE_CONSOLE_CERTIFICATE// Size=0x1a8 (Id=2130)
{
    unsigned short CertSize;// Offset=0x0 Size=0x2
    unsigned char ConsoleId[5];// Offset=0x2 Size=0x5
    unsigned char ConsolePartNumber[11];// Offset=0x7 Size=0xb
    unsigned char Reserved[4];// Offset=0x12 Size=0x4
    unsigned short Privileges;// Offset=0x16 Size=0x2
    unsigned long ConsoleType;// Offset=0x18 Size=0x4
    unsigned long long ManufacturingDate;// Offset=0x1c Size=0x8
    struct _CONSOLE_PUBLIC_KEY ConsolePublicKey;// Offset=0x24 Size=0x84
    unsigned char Signature[256];// Offset=0xa8 Size=0x100
};

struct _HCR// Size=0x2000 (Id=2131)
{
    unsigned long long TlbLock[16];// Offset=0x0 Size=0x80
    unsigned char Number;// Offset=0x80 Size=0x1
    unsigned char QuiescePhase;// Offset=0x81 Size=0x1
    unsigned char QuiesceReason;// Offset=0x82 Size=0x1
    unsigned char QuiesceWakeup;// Offset=0x83 Size=0x1
    unsigned long Reserved1;// Offset=0x84 Size=0x4
    unsigned long QuiesceDecrementer;// Offset=0x88 Size=0x4
    unsigned long QuiesceHypervisorDecrementer;// Offset=0x8c Size=0x4
    unsigned long long QuiesceGpr3Save;// Offset=0x90 Size=0x8
    unsigned long long HvStatsCore;// Offset=0x98 Size=0x8
    unsigned char Stack[8032];// Offset=0xa0 Size=0x1f60
};

struct _XMUDECN4// Size=0x4 (Id=2132)
{
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            unsigned int x:10;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xa
            unsigned int y:10;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0xa
            unsigned int z:10;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0xa
            unsigned int w:2;// Offset=0x0 Size=0x4 BitOffset=0x1e BitSize=0x2
        };
        unsigned int v;// Offset=0x0 Size=0x4
    };
};

struct _XGET_REVOCATION_LIST_REQUEST// Size=0x14 (Id=2133)
{
    unsigned char abClientNonce[16];// Offset=0x0 Size=0x10
    struct _XGET_REVOCATION_LIST_REPLY * pResults;// Offset=0x10 Size=0x4
};

struct D3DSurface// Size=0x30 (Id=2134)
{
    unsigned long Common;// Offset=0x0 Size=0x4
    unsigned long ReferenceCount;// Offset=0x4 Size=0x4
    unsigned long Fence;// Offset=0x8 Size=0x4
    unsigned long ReadFence;// Offset=0xc Size=0x4
    unsigned long Identifier;// Offset=0x10 Size=0x4
    unsigned long BaseFlush;// Offset=0x14 Size=0x4
    union // Size=0x30 (Id=0)
    {
        union GPU_SURFACEINFO SurfaceInfo;// Offset=0x18 Size=0x4
        union // Size=0x4 (Id=0)
        {
            union GPU_DEPTHINFO DepthInfo;// Offset=0x1c Size=0x4
            union GPU_COLORINFO ColorInfo;// Offset=0x1c Size=0x4
        };
        union GPU_HICONTROL HiControl;// Offset=0x20 Size=0x4
        struct // Size=0x4 (Id=0)
        {
            unsigned long Width:14;// Offset=0x24 Size=0x4 BitOffset=0x12 BitSize=0xe
            unsigned long Height:15;// Offset=0x24 Size=0x4 BitOffset=0x3 BitSize=0xf
        };
        enum _D3DFORMAT Format;// Offset=0x28 Size=0x4
        unsigned long Size;// Offset=0x2c Size=0x4
        struct D3DBaseTexture * Parent;// Offset=0x18 Size=0x4
        struct // Size=0x4 (Id=0)
        {
            unsigned long MipLevel:4;// Offset=0x1c Size=0x4 BitOffset=0x1c BitSize=0x4
            unsigned long ArrayIndex:6;// Offset=0x1c Size=0x4 BitOffset=0x16 BitSize=0x6
        };
    };
};

struct IDirectXFileSaveObject// Size=0x4 (Id=2135)
{
    struct IDirectXFileSaveObjectVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct _DVD_XGD2_DISC_AUTH_RESULT_AUTH_PAGE_HEADER// Size=0x2 (Id=2136)
{
    unsigned char PageCode;// Offset=0x0 Size=0x1
    unsigned char PageLength;// Offset=0x1 Size=0x1
};

struct _POSTAL_CODE_MATCH// Size=0x18 (Id=2137)
{
    unsigned short wPostalCodeLength;// Offset=0x0 Size=0x2
    unsigned short * wszPostalCode;// Offset=0x2 Size=0x4
    unsigned short wStateLength;// Offset=0x6 Size=0x2
    unsigned short * wszState;// Offset=0x8 Size=0x4
    unsigned short wCityLength;// Offset=0xc Size=0x2
    unsigned short * wszCity;// Offset=0xe Size=0x4
    unsigned short wStreetLength;// Offset=0x12 Size=0x2
    unsigned short * wszStreet;// Offset=0x14 Size=0x4
};

struct _XDELETIONSUGGESTIONS_PARAMS// Size=0x10 (Id=2138)
{
    unsigned long long ullBytesRequired;// Offset=0x0 Size=0x8
    unsigned long dwFlags;// Offset=0x8 Size=0x4
    unsigned long DeviceID;// Offset=0xc Size=0x4
};

struct _FB_SUBMIT_COMPLAINT_REQUEST// Size=0x20 (Id=2139)
{
    unsigned long long qwSenderID;// Offset=0x0 Size=0x8
    unsigned long long qwTargetID;// Offset=0x8 Size=0x8
    unsigned long dwTitleID;// Offset=0x10 Size=0x4
    unsigned long dwType;// Offset=0x14 Size=0x4
    unsigned long long qwContext;// Offset=0x18 Size=0x8
};

struct _ACCOUNT_ACKNOWLEDGE_DOWNGRADE_REQUEST// Size=0x8 (Id=2140)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
};

struct _XONLINE_STATS_ENUM_RESULTS// Size=0x6 (Id=2141)
{
    unsigned short wNumViews;// Offset=0x0 Size=0x2
    struct _XONLINE_STATS_VIEW * pViews;// Offset=0x2 Size=0x4
};

struct _XPARTY_ROUTING_TABLE// Size=0x124 (Id=2142)
{
    unsigned long nodeCount;// Offset=0x0 Size=0x4
    unsigned long nodes[8];// Offset=0x4 Size=0x20
    unsigned long table[8][8];// Offset=0x24 Size=0x100
};

struct _XSTORAGE_DOWNLOAD_TO_DIRECTORY_PARAMS_INTERNAL// Size=0x1c (Id=2143)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long dwServerPathLength;// Offset=0x4 Size=0x4
    unsigned short * wszServerPath;// Offset=0x8 Size=0x4
    unsigned long dwDisplayNameLength;// Offset=0xc Size=0x4
    unsigned short * wszDisplayName;// Offset=0x10 Size=0x4
    unsigned long DeviceID;// Offset=0x14 Size=0x4
    struct _XSTORAGE_DOWNLOAD_TO_DIRECTORY_RESULTS_INTERNAL * pResults;// Offset=0x18 Size=0x4
};

struct _XMSHORTN2// Size=0x4 (Id=2144)
{
    short x;// Offset=0x0 Size=0x2
    short y;// Offset=0x2 Size=0x2
};

struct ID3DXEffectCompilerVtbl// Size=0xfc (Id=2145)
{
    HRESULT  ( * QueryInterface)(struct ID3DXEffectCompiler * ,const struct _GUID * ,void ** );// Offset=0x0 Size=0x4
    unsigned long  ( * AddRef)(struct ID3DXEffectCompiler * );// Offset=0x4 Size=0x4
    unsigned long  ( * Release)(struct ID3DXEffectCompiler * );// Offset=0x8 Size=0x4
    HRESULT  ( * GetDesc)(struct ID3DXEffectCompiler * ,struct _D3DXEFFECT_DESC * );// Offset=0xc Size=0x4
    HRESULT  ( * GetParameterDesc)(struct ID3DXEffectCompiler * ,unsigned int ,struct _D3DXPARAMETER_DESC * );// Offset=0x10 Size=0x4
    HRESULT  ( * GetTechniqueDesc)(struct ID3DXEffectCompiler * ,unsigned int ,struct _D3DXTECHNIQUE_DESC * );// Offset=0x14 Size=0x4
    HRESULT  ( * GetPassDesc)(struct ID3DXEffectCompiler * ,unsigned int ,struct _D3DXPASS_DESC * );// Offset=0x18 Size=0x4
    HRESULT  ( * GetFunctionDesc)(struct ID3DXEffectCompiler * ,unsigned int ,struct _D3DXFUNCTION_DESC * );// Offset=0x1c Size=0x4
    unsigned int  ( * GetParameter)(struct ID3DXEffectCompiler * ,unsigned int ,unsigned int );// Offset=0x20 Size=0x4
    unsigned int  ( * GetParameterByName)(struct ID3DXEffectCompiler * ,unsigned int ,char * );// Offset=0x24 Size=0x4
    unsigned int  ( * GetParameterBySemantic)(struct ID3DXEffectCompiler * ,unsigned int ,char * );// Offset=0x28 Size=0x4
    unsigned int  ( * GetParameterElement)(struct ID3DXEffectCompiler * ,unsigned int ,unsigned int );// Offset=0x2c Size=0x4
    unsigned int  ( * GetTechnique)(struct ID3DXEffectCompiler * ,unsigned int );// Offset=0x30 Size=0x4
    unsigned int  ( * GetTechniqueByName)(struct ID3DXEffectCompiler * ,char * );// Offset=0x34 Size=0x4
    unsigned int  ( * GetPass)(struct ID3DXEffectCompiler * ,unsigned int ,unsigned int );// Offset=0x38 Size=0x4
    unsigned int  ( * GetPassByName)(struct ID3DXEffectCompiler * ,unsigned int ,char * );// Offset=0x3c Size=0x4
    unsigned int  ( * GetFunction)(struct ID3DXEffectCompiler * ,unsigned int );// Offset=0x40 Size=0x4
    unsigned int  ( * GetFunctionByName)(struct ID3DXEffectCompiler * ,char * );// Offset=0x44 Size=0x4
    unsigned int  ( * GetAnnotation)(struct ID3DXEffectCompiler * ,unsigned int ,unsigned int );// Offset=0x48 Size=0x4
    unsigned int  ( * GetAnnotationByName)(struct ID3DXEffectCompiler * ,unsigned int ,char * );// Offset=0x4c Size=0x4
    HRESULT  ( * SetValue)(struct ID3DXEffectCompiler * ,unsigned int ,void * ,unsigned int );// Offset=0x50 Size=0x4
    HRESULT  ( * GetValue)(struct ID3DXEffectCompiler * ,unsigned int ,void * ,unsigned int );// Offset=0x54 Size=0x4
    HRESULT  ( * SetBool)(struct ID3DXEffectCompiler * ,unsigned int ,int );// Offset=0x58 Size=0x4
    HRESULT  ( * GetBool)(struct ID3DXEffectCompiler * ,unsigned int ,int * );// Offset=0x5c Size=0x4
    HRESULT  ( * SetBoolArray)(struct ID3DXEffectCompiler * ,unsigned int ,int * ,unsigned int );// Offset=0x60 Size=0x4
    HRESULT  ( * GetBoolArray)(struct ID3DXEffectCompiler * ,unsigned int ,int * ,unsigned int );// Offset=0x64 Size=0x4
    HRESULT  ( * SetInt)(struct ID3DXEffectCompiler * ,unsigned int ,int );// Offset=0x68 Size=0x4
    HRESULT  ( * GetInt)(struct ID3DXEffectCompiler * ,unsigned int ,int * );// Offset=0x6c Size=0x4
    HRESULT  ( * SetIntArray)(struct ID3DXEffectCompiler * ,unsigned int ,int * ,unsigned int );// Offset=0x70 Size=0x4
    HRESULT  ( * GetIntArray)(struct ID3DXEffectCompiler * ,unsigned int ,int * ,unsigned int );// Offset=0x74 Size=0x4
    HRESULT  ( * SetFloat)(struct ID3DXEffectCompiler * ,unsigned int ,float );// Offset=0x78 Size=0x4
    HRESULT  ( * GetFloat)(struct ID3DXEffectCompiler * ,unsigned int ,float * );// Offset=0x7c Size=0x4
    HRESULT  ( * SetFloatArray)(struct ID3DXEffectCompiler * ,unsigned int ,float * ,unsigned int );// Offset=0x80 Size=0x4
    HRESULT  ( * GetFloatArray)(struct ID3DXEffectCompiler * ,unsigned int ,float * ,unsigned int );// Offset=0x84 Size=0x4
    HRESULT  ( * SetVector)(struct ID3DXEffectCompiler * ,unsigned int ,struct D3DXVECTOR4 * );// Offset=0x88 Size=0x4
    HRESULT  ( * GetVector)(struct ID3DXEffectCompiler * ,unsigned int ,struct D3DXVECTOR4 * );// Offset=0x8c Size=0x4
    HRESULT  ( * SetVectorArray)(struct ID3DXEffectCompiler * ,unsigned int ,struct D3DXVECTOR4 * ,unsigned int );// Offset=0x90 Size=0x4
    HRESULT  ( * GetVectorArray)(struct ID3DXEffectCompiler * ,unsigned int ,struct D3DXVECTOR4 * ,unsigned int );// Offset=0x94 Size=0x4
    HRESULT  ( * SetMatrix)(struct ID3DXEffectCompiler * ,unsigned int ,struct _D3DMATRIX * );// Offset=0x98 Size=0x4
    HRESULT  ( * GetMatrix)(struct ID3DXEffectCompiler * ,unsigned int ,struct _D3DMATRIX * );// Offset=0x9c Size=0x4
    HRESULT  ( * SetMatrixArray)(struct ID3DXEffectCompiler * ,unsigned int ,struct _D3DMATRIX * ,unsigned int );// Offset=0xa0 Size=0x4
    HRESULT  ( * GetMatrixArray)(struct ID3DXEffectCompiler * ,unsigned int ,struct _D3DMATRIX * ,unsigned int );// Offset=0xa4 Size=0x4
    HRESULT  ( * SetMatrixPointerArray)(struct ID3DXEffectCompiler * ,unsigned int ,struct _D3DMATRIX ** ,unsigned int );// Offset=0xa8 Size=0x4
    HRESULT  ( * GetMatrixPointerArray)(struct ID3DXEffectCompiler * ,unsigned int ,struct _D3DMATRIX ** ,unsigned int );// Offset=0xac Size=0x4
    HRESULT  ( * SetMatrixTranspose)(struct ID3DXEffectCompiler * ,unsigned int ,struct _D3DMATRIX * );// Offset=0xb0 Size=0x4
    HRESULT  ( * GetMatrixTranspose)(struct ID3DXEffectCompiler * ,unsigned int ,struct _D3DMATRIX * );// Offset=0xb4 Size=0x4
    HRESULT  ( * SetMatrixTransposeArray)(struct ID3DXEffectCompiler * ,unsigned int ,struct _D3DMATRIX * ,unsigned int );// Offset=0xb8 Size=0x4
    HRESULT  ( * GetMatrixTransposeArray)(struct ID3DXEffectCompiler * ,unsigned int ,struct _D3DMATRIX * ,unsigned int );// Offset=0xbc Size=0x4
    HRESULT  ( * SetMatrixTransposePointerArray)(struct ID3DXEffectCompiler * ,unsigned int ,struct _D3DMATRIX ** ,unsigned int );// Offset=0xc0 Size=0x4
    HRESULT  ( * GetMatrixTransposePointerArray)(struct ID3DXEffectCompiler * ,unsigned int ,struct _D3DMATRIX ** ,unsigned int );// Offset=0xc4 Size=0x4
    HRESULT  ( * SetString)(struct ID3DXEffectCompiler * ,unsigned int ,char * );// Offset=0xc8 Size=0x4
    HRESULT  ( * GetString)(struct ID3DXEffectCompiler * ,unsigned int ,char ** );// Offset=0xcc Size=0x4
    HRESULT  ( * SetTexture)(struct ID3DXEffectCompiler * ,unsigned int ,struct D3DBaseTexture * );// Offset=0xd0 Size=0x4
    HRESULT  ( * GetTexture)(struct ID3DXEffectCompiler * ,unsigned int ,struct D3DBaseTexture ** );// Offset=0xd4 Size=0x4
    HRESULT  ( * SetPixelShader)(struct ID3DXEffectCompiler * ,unsigned int ,struct D3DPixelShader * );// Offset=0xd8 Size=0x4
    HRESULT  ( * GetPixelShader)(struct ID3DXEffectCompiler * ,unsigned int ,struct D3DPixelShader ** );// Offset=0xdc Size=0x4
    HRESULT  ( * SetVertexShader)(struct ID3DXEffectCompiler * ,unsigned int ,struct D3DVertexShader * );// Offset=0xe0 Size=0x4
    HRESULT  ( * GetVertexShader)(struct ID3DXEffectCompiler * ,unsigned int ,struct D3DVertexShader ** );// Offset=0xe4 Size=0x4
    HRESULT  ( * SetArrayRange)(struct ID3DXEffectCompiler * ,unsigned int ,unsigned int ,unsigned int );// Offset=0xe8 Size=0x4
    HRESULT  ( * SetLiteral)(struct ID3DXEffectCompiler * ,unsigned int ,int );// Offset=0xec Size=0x4
    HRESULT  ( * GetLiteral)(struct ID3DXEffectCompiler * ,unsigned int ,int * );// Offset=0xf0 Size=0x4
    HRESULT  ( * CompileEffect)(struct ID3DXEffectCompiler * ,unsigned long ,struct ID3DXBuffer ** ,struct ID3DXBuffer ** );// Offset=0xf4 Size=0x4
    HRESULT  ( * CompileShader)(struct ID3DXEffectCompiler * ,unsigned int ,char * ,unsigned long ,struct ID3DXBuffer ** ,struct ID3DXBuffer ** ,struct ID3DXConstantTable ** );// Offset=0xf8 Size=0x4
};

struct XGI_SESSIONMODIFY_MSG// Size=0x10 (Id=2146)
{
    struct tagSESSION_STRUCT * pSessionStruct;// Offset=0x0 Size=0x4
    unsigned long dwFlags;// Offset=0x4 Size=0x4
    unsigned long dwMaxPublicSlots;// Offset=0x8 Size=0x4
    unsigned long dwMaxPrivateSlots;// Offset=0xc Size=0x4
};

struct _XSHOWSTOREPICKERUI_PARAMS// Size=0xc (Id=2147)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    enum HUDSCENE eHudType;// Offset=0x4 Size=0x4
    unsigned long dwTabToFocus;// Offset=0x8 Size=0x4
};

struct _XBOX_KRNL_VERSION// Size=0x8 (Id=2148)
{
    unsigned short Major;// Offset=0x0 Size=0x2
    unsigned short Minor;// Offset=0x2 Size=0x2
    unsigned short Build;// Offset=0x4 Size=0x2
    unsigned short Qfe;// Offset=0x6 Size=0x2
};

struct _P_PEER_UNSUBSCRIBE_MSG// Size=0x28 (Id=2149)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwUserID;// Offset=0x20 Size=0x8
};

struct _IMAGE_XEX_HEADER// Size=0x18 (Id=2150)
{
    unsigned long Magic;// Offset=0x0 Size=0x4
    unsigned long ModuleFlags;// Offset=0x4 Size=0x4
    unsigned long SizeOfHeaders;// Offset=0x8 Size=0x4
    unsigned long SizeOfDiscardableHeaders;// Offset=0xc Size=0x4
    struct _XEX_SECURITY_INFO * SecurityInfo;// Offset=0x10 Size=0x4
    unsigned long HeaderDirectoryEntryCount;// Offset=0x14 Size=0x4
};

struct IDirectXFileData// Size=0x4 (Id=2151)
{
    struct IDirectXFileDataVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct _D3DXKEY_VECTOR3// Size=0x10 (Id=2152)
{
    float Time;// Offset=0x0 Size=0x4
    struct _D3DVECTOR Value;// Offset=0x4 Size=0xc
};

struct XECRYPT_SHA_STATE// Size=0x58 (Id=2153)
{
    unsigned long count;// Offset=0x0 Size=0x4
    unsigned long state[5];// Offset=0x4 Size=0x14
    unsigned char buffer[64];// Offset=0x18 Size=0x40
};

struct _CONTENT_ENUMERATE_REQUEST// Size=0x2f (Id=2154)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned char bCountryId;// Offset=0x8 Size=0x1
    unsigned short wLanguageId;// Offset=0x9 Size=0x2
    unsigned short wGameRating;// Offset=0xb Size=0x2
    unsigned long dwOfferType;// Offset=0xd Size=0x4
    unsigned long dwPaymentType;// Offset=0x11 Size=0x4
    unsigned char bTier;// Offset=0x15 Size=0x1
    unsigned long dwTitleId;// Offset=0x16 Size=0x4
    unsigned long dwTitleCategories;// Offset=0x1a Size=0x4
    unsigned char bRequestFlags;// Offset=0x1e Size=0x1
    unsigned long dwStartingIndex;// Offset=0x1f Size=0x4
    unsigned long dwMaxResults;// Offset=0x23 Size=0x4
    unsigned long dwGenreId;// Offset=0x27 Size=0x4
    struct _CONTENT_ENUMERATE_RESPONSE * pResults;// Offset=0x2b Size=0x4
};

struct _DUMP_SYSTEM_GLOBALS// Size=0x28 (Id=2155)
{
    unsigned long Size;// Offset=0x0 Size=0x4
    unsigned long KeNumberProcessors;// Offset=0x4 Size=0x4
    void * KeSystemProcessVA;// Offset=0x8 Size=0x4
    void * KeTitleProcessVA;// Offset=0xc Size=0x4
    void * KeDebugMonitorDataVA;// Offset=0x10 Size=0x4
    void * PsLoadedModuleListVA;// Offset=0x14 Size=0x4
    void * MmPdeDatabaseVA;// Offset=0x18 Size=0x4
    void * MmPhysical64KBMappingTableVA;// Offset=0x1c Size=0x4
    unsigned long MmHighestPhysicalPage;// Offset=0x20 Size=0x4
    void * XexpKernelDataTableEntryVA;// Offset=0x24 Size=0x4
};

struct _FSCACHE_EXTENSION// Size=0x10 (Id=2156)
{
    struct _DEVICE_OBJECT * TargetDeviceObject;// Offset=0x0 Size=0x4
    unsigned long SectorSize;// Offset=0x4 Size=0x4
    union _LARGE_INTEGER PartitionLength;// Offset=0x8 Size=0x8
};

union _unnamed_2157// Size=0x8 (Id=2157)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long long xuid;// Offset=0x0 Size=0x8
};

struct _XUSER_PROFILE_SETTING// Size=0x28 (Id=2158)
{
    enum _XUSER_PROFILE_SOURCE source;// Offset=0x0 Size=0x4
    unsigned char __align0[4];// Offset=0x4 Size=0x4
    union _unnamed_2157 user;// Offset=0x8 Size=0x8
    unsigned long dwSettingId;// Offset=0x10 Size=0x4
    unsigned char __align1[4];// Offset=0x14 Size=0x4
    struct _XUSER_DATA data;// Offset=0x18 Size=0x10
};

struct _MIGRATE_XBOX_COM_USER_REQUEST// Size=0xc7 (Id=2159)
{
    struct _PASSPORT_SESSION_TOKEN pUserSessionToken[1];// Offset=0x0 Size=0x1c
    unsigned long long qwOfflineXuid;// Offset=0x1c Size=0x8
    unsigned long dwTitleId;// Offset=0x24 Size=0x4
    unsigned long long qwMachineId;// Offset=0x28 Size=0x8
    unsigned char bCountryId;// Offset=0x30 Size=0x1
    unsigned short wLanguageId;// Offset=0x31 Size=0x2
    unsigned long long qwOfferId;// Offset=0x33 Size=0x8
    unsigned short wBillingTokenLength;// Offset=0x3b Size=0x2
    unsigned short * wszBillingToken;// Offset=0x3d Size=0x4
    unsigned short wFirstNameLength;// Offset=0x41 Size=0x2
    unsigned short * wszFirstName;// Offset=0x43 Size=0x4
    unsigned short wLastNameLength;// Offset=0x47 Size=0x2
    unsigned short * wszLastName;// Offset=0x49 Size=0x4
    unsigned short wEmailLength;// Offset=0x4d Size=0x2
    unsigned short * wszEmail;// Offset=0x4f Size=0x4
    struct _ADDRESS_INFO address;// Offset=0x53 Size=0x24
    struct _PHONE_INFO phone;// Offset=0x77 Size=0x12
    unsigned char bPaymentTypeId;// Offset=0x89 Size=0x1
    struct _CREDIT_CARD_INFO creditCard;// Offset=0x8a Size=0x1b
    struct _DIRECT_DEBIT_INFO directDebit;// Offset=0xa5 Size=0x1e
    struct _MIGRATE_XBOX_COM_USER_RESPONSE * pResponse;// Offset=0xc3 Size=0x4
};

union _unnamed_2160// Size=0x10 (Id=2160)
{
    short I16Value;// Offset=0x0 Size=0x2
    unsigned short U16Value;// Offset=0x0 Size=0x2
    long I32Value;// Offset=0x0 Size=0x4
    unsigned long U32Value;// Offset=0x0 Size=0x4
    void * StringValue;// Offset=0x0 Size=0x4
    unsigned long CompareValue;// Offset=0x0 Size=0x4
    struct _FP_32 Fp32Value;// Offset=0x0 Size=0x4
    union _LARGE_INTEGER I64Value;// Offset=0x0 Size=0x8
    union _ULARGE_INTEGER U64Value;// Offset=0x0 Size=0x8
    struct _FP_64 Fp64Value;// Offset=0x0 Size=0x8
    struct _FP_80 Fp80Value;// Offset=0x0 Size=0xc
    struct _FP_128 Fp128Value;// Offset=0x0 Size=0x10
};

struct _unnamed_2161// Size=0x4 (Id=2161)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long RoundingMode:2;// Offset=0x0 Size=0x4 BitOffset=0x1e BitSize=0x2
        unsigned long Inexact:1;// Offset=0x0 Size=0x4 BitOffset=0x1d BitSize=0x1
        unsigned long Underflow:1;// Offset=0x0 Size=0x4 BitOffset=0x1c BitSize=0x1
        unsigned long Overflow:1;// Offset=0x0 Size=0x4 BitOffset=0x1b BitSize=0x1
        unsigned long ZeroDivide:1;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x1
        unsigned long InvalidOperation:1;// Offset=0x0 Size=0x4 BitOffset=0x19 BitSize=0x1
        unsigned long OperandValid:1;// Offset=0x0 Size=0x4 BitOffset=0x18 BitSize=0x1
        unsigned long Format:4;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0x4
        unsigned long Precision:4;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x4
        unsigned long Operation:12;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0xc
        unsigned long Spare:3;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x3
        unsigned long HardwareException:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
    };
};

struct _FP_IEEE_VALUE// Size=0x18 (Id=2162)
{
    union _unnamed_2160 Value;// Offset=0x0 Size=0x10
    struct _unnamed_2161 Control;// Offset=0x10 Size=0x4
};

struct _GENERIC_LIST_DELETE_ITEMS_RESPONSE// Size=0x8 (Id=2163)
{
    struct _FILETIME ftLastModified;// Offset=0x0 Size=0x8
};

struct _XMDHENN3// Size=0x4 (Id=2164)
{
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            int x:10;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xa
            int y:11;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0xb
            int z:11;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0xb
        };
        unsigned int v;// Offset=0x0 Size=0x4
    };
};

struct _P_INVITE_2_MSG// Size=0x44 (Id=2165)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwUserID;// Offset=0x20 Size=0x8
    unsigned long long qwSenderContext;// Offset=0x28 Size=0x8
    unsigned long dwTitleID;// Offset=0x30 Size=0x4
    unsigned long dwMessageFlags;// Offset=0x34 Size=0x4
    unsigned short cInvitees;// Offset=0x38 Size=0x2
    unsigned short cbDetails;// Offset=0x3a Size=0x2
    unsigned long long * pqwInviteeIDs;// Offset=0x3c Size=0x4
    struct _XMSG_DETAILS * pDetails;// Offset=0x40 Size=0x4
};

struct _XONLINE_QUERY_ATTRIBUTE_SPEC// Size=0x8 (Id=2166)
{
    unsigned long dwType;// Offset=0x0 Size=0x4
    unsigned long dwLength;// Offset=0x4 Size=0x4
};

struct _XVOICEMAILUI_PARAMS// Size=0x34 (Id=2167)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long dwFlags;// Offset=0x4 Size=0x4
    unsigned char * pbVoiceBuffer;// Offset=0x8 Size=0x4
    unsigned long cbVoiceBufferSize;// Offset=0xc Size=0x4
    unsigned long cbVoiceRecordedBufferSize;// Offset=0x10 Size=0x4
    unsigned short wVoiceCodec;// Offset=0x14 Size=0x2
    unsigned char __align0[2];// Offset=0x16 Size=0x2
    unsigned char * pbPhotoAllocatedData;// Offset=0x18 Size=0x4
    unsigned char * pbPhotoBuffer;// Offset=0x1c Size=0x4
    unsigned long cbPhotoBufferSize;// Offset=0x20 Size=0x4
    unsigned long cbPhotoRecordedBufferSize;// Offset=0x24 Size=0x4
    unsigned short wPhotoWidth;// Offset=0x28 Size=0x2
    unsigned short wPhotoHeight;// Offset=0x2a Size=0x2
    unsigned short wPhotoCodec;// Offset=0x2c Size=0x2
    unsigned char __align1[2];// Offset=0x2e Size=0x2
    struct _XVOICEMAILUI_RESULTS * pResults;// Offset=0x30 Size=0x4
};

struct _XSTORAGE_ENDPOINT// Size=0xc (Id=2168)
{
    struct in_addr inaPrimaryAddress;// Offset=0x0 Size=0x4
    unsigned short wPrimaryPort;// Offset=0x4 Size=0x2
    struct in_addr inaAlternateAddress;// Offset=0x6 Size=0x4
    unsigned short wAlternatePort;// Offset=0xa Size=0x2
};

struct _XSIGNATURE_CHECK_REVOCATION_REQUEST// Size=0xc (Id=2169)
{
    unsigned long dwNumContentTuples;// Offset=0x0 Size=0x4
    struct _XSIGNATURE_CONTENT_TUPLE * pTuples;// Offset=0x4 Size=0x4
    struct _XSIGNATURE_CHECK_REVOCATION_RESPONSE * pResponse;// Offset=0x8 Size=0x4
};

struct XECRYPT_RSAPUB_2048// Size=0x110 (Id=2170)
{
    struct XECRYPT_RSA Rsa;// Offset=0x0 Size=0x10
    unsigned long long aqwM[32];// Offset=0x10 Size=0x100
};

struct _GET_USER_SUBSCRIPTION_DETAILS_DATA// Size=0x16 (Id=2171)
{
    unsigned long dwWholePart;// Offset=0x0 Size=0x4
    unsigned char bFractionalPart;// Offset=0x4 Size=0x1
    unsigned char bCurrencyFormat;// Offset=0x5 Size=0x1
    unsigned short wISOCodeLength;// Offset=0x6 Size=0x2
    unsigned short * wszISOCode;// Offset=0x8 Size=0x4
    unsigned short wFormattedPriceLength;// Offset=0xc Size=0x2
    unsigned short * wszFormattedPrice;// Offset=0xe Size=0x4
    unsigned long dwOfferingDetails;// Offset=0x12 Size=0x4
};

struct _XWMDRM_CERTIFICATE_PUBLIC_KEY// Size=0x28 (Id=2172)
{
    unsigned char abCert[40];// Offset=0x0 Size=0x28
};

struct _CERTIFICATE_LOG// Size=0x400 (Id=2173)
{
    struct _CERTIFICATE_LOG_HEADER Header;// Offset=0x0 Size=0x20
    struct _CERTIFICATE_LOG_ENTRY Entries[62];// Offset=0x20 Size=0x3e0
};

struct _Q_MESSAGE_DETAILS_MSG// Size=0x38 (Id=2174)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwUserID;// Offset=0x20 Size=0x8
    unsigned long dwMessageID;// Offset=0x28 Size=0x4
    unsigned long dwFlagsToSet;// Offset=0x2c Size=0x4
    unsigned long dwFlagsToClear;// Offset=0x30 Size=0x4
    struct _XMSG_DETAILS_BLOB * pResults;// Offset=0x34 Size=0x4
};

struct _UPDATE_PARENTAL_CONTROLS_STRUCT// Size=0x4e (Id=2175)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned long rgGrantPrivileges[8];// Offset=0x8 Size=0x20
    unsigned long rgRestrictPrivileges[8];// Offset=0x28 Size=0x20
    unsigned short wSourceLength;// Offset=0x48 Size=0x2
    unsigned short * wszSource;// Offset=0x4a Size=0x4
};

struct _XHTTP_REQUEST_DOWNLOAD_TO_CACHE_RESULTS// Size=0x108 (Id=2176)
{
    struct _XHTTP_REQUEST_RESPONSE dlResults;// Offset=0x0 Size=0x8
    char szFilePath[256];// Offset=0x8 Size=0x100
};

struct _unnamed_2177// Size=0x4 (Id=2177)
{
    unsigned char s_b1;// Offset=0x0 Size=0x1
    unsigned char s_b2;// Offset=0x1 Size=0x1
    unsigned char s_b3;// Offset=0x2 Size=0x1
    unsigned char s_b4;// Offset=0x3 Size=0x1
};

struct _unnamed_2178// Size=0x4 (Id=2178)
{
    unsigned short s_w1;// Offset=0x0 Size=0x2
    unsigned short s_w2;// Offset=0x2 Size=0x2
};

union _unnamed_2179// Size=0x4 (Id=2179)
{
    struct _unnamed_2177 S_un_b;// Offset=0x0 Size=0x4
    struct _unnamed_2178 S_un_w;// Offset=0x0 Size=0x4
    unsigned long S_addr;// Offset=0x0 Size=0x4
};

struct in_addr// Size=0x4 (Id=2180)
{
    union _unnamed_2179 S_un;// Offset=0x0 Size=0x4
};

struct _FIND_USERS_REQUEST// Size=0x34 (Id=2181)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwUserId;// Offset=0x20 Size=0x8
    unsigned long dwUsers;// Offset=0x28 Size=0x4
    struct _FIND_USER_INFO * pUsers;// Offset=0x2c Size=0x4
    struct _FIND_USERS_RESPONSE * pResults;// Offset=0x30 Size=0x4
};

struct _QUERY_ADD_RESULT// Size=0x8 (Id=2182)
{
    unsigned long long entityId;// Offset=0x0 Size=0x8
};

struct _unnamed_2183// Size=0x4 (Id=2183)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long RN:2;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x2
        unsigned long NI:1;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x1
        unsigned long XE:1;// Offset=0x0 Size=0x4 BitOffset=0x3 BitSize=0x1
        unsigned long ZE:1;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x1
        unsigned long UE:1;// Offset=0x0 Size=0x4 BitOffset=0x5 BitSize=0x1
        unsigned long OE:1;// Offset=0x0 Size=0x4 BitOffset=0x6 BitSize=0x1
        unsigned long VE:1;// Offset=0x0 Size=0x4 BitOffset=0x7 BitSize=0x1
        unsigned long VXCVI:1;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x1
        unsigned long VXSQRT:1;// Offset=0x0 Size=0x4 BitOffset=0x9 BitSize=0x1
        unsigned long VXSOFT:1;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0x1
        unsigned long Res1:1;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x1
        unsigned long FU:1;// Offset=0x0 Size=0x4 BitOffset=0xc BitSize=0x1
        unsigned long FE:1;// Offset=0x0 Size=0x4 BitOffset=0xd BitSize=0x1
        unsigned long FG:1;// Offset=0x0 Size=0x4 BitOffset=0xe BitSize=0x1
        unsigned long FL:1;// Offset=0x0 Size=0x4 BitOffset=0xf BitSize=0x1
        unsigned long C:1;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x1
        unsigned long FI:1;// Offset=0x0 Size=0x4 BitOffset=0x11 BitSize=0x1
        unsigned long FR:1;// Offset=0x0 Size=0x4 BitOffset=0x12 BitSize=0x1
        unsigned long VXVC:1;// Offset=0x0 Size=0x4 BitOffset=0x13 BitSize=0x1
        unsigned long VXIMZ:1;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0x1
        unsigned long VXZDZ:1;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x1
        unsigned long VXIDI:1;// Offset=0x0 Size=0x4 BitOffset=0x16 BitSize=0x1
        unsigned long VXISI:1;// Offset=0x0 Size=0x4 BitOffset=0x17 BitSize=0x1
        unsigned long VXSNAN:1;// Offset=0x0 Size=0x4 BitOffset=0x18 BitSize=0x1
        unsigned long XX:1;// Offset=0x0 Size=0x4 BitOffset=0x19 BitSize=0x1
        unsigned long ZX:1;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x1
        unsigned long UX:1;// Offset=0x0 Size=0x4 BitOffset=0x1b BitSize=0x1
        unsigned long OX:1;// Offset=0x0 Size=0x4 BitOffset=0x1c BitSize=0x1
        unsigned long VX:1;// Offset=0x0 Size=0x4 BitOffset=0x1d BitSize=0x1
        unsigned long FEX:1;// Offset=0x0 Size=0x4 BitOffset=0x1e BitSize=0x1
        unsigned long FX:1;// Offset=0x0 Size=0x4 BitOffset=0x1f BitSize=0x1
    };
};

union _FPSCR// Size=0x4 (Id=2184)
{
    struct _unnamed_2183 bits;// Offset=0x0 Size=0x4
    unsigned long AsULONG;// Offset=0x0 Size=0x4
};

struct _KDRIVER_NOTIFICATION_REGISTRATION// Size=0x10 (Id=2185)
{
    void  ( * NotificationRoutine)(struct _KDRIVER_NOTIFICATION_REGISTRATION * ,enum _KDRIVER_NOTIFICATION_TYPE );// Offset=0x0 Size=0x4
    long Priority;// Offset=0x4 Size=0x4
    struct _LIST_ENTRY ListEntry;// Offset=0x8 Size=0x8
};

struct _XENUMERATORCONTENTOFFER// Size=0x40 (Id=2186)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned long dwCountryId;// Offset=0x8 Size=0x4
    unsigned long dwLanguageId;// Offset=0xc Size=0x4
    unsigned long dwGameRating;// Offset=0x10 Size=0x4
    unsigned long dwOfferType;// Offset=0x14 Size=0x4
    unsigned long dwPaymentType;// Offset=0x18 Size=0x4
    unsigned long dwTier;// Offset=0x1c Size=0x4
    unsigned long dwTitleId;// Offset=0x20 Size=0x4
    unsigned long dwTitleCategories;// Offset=0x24 Size=0x4
    unsigned long dwRequestFlags;// Offset=0x28 Size=0x4
    unsigned long dwCurrentIndex;// Offset=0x2c Size=0x4
    unsigned long dwGenreId;// Offset=0x30 Size=0x4
    unsigned long cbResults;// Offset=0x34 Size=0x4
    struct _CONTENT_ENUMERATE_RESPONSE * pResults;// Offset=0x38 Size=0x4
};

struct _P_FIND_USER_MSG_INTERNAL// Size=0x40 (Id=2187)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwUserID;// Offset=0x20 Size=0x8
    unsigned long long qwFindID;// Offset=0x28 Size=0x8
    char szSenderName[16];// Offset=0x30 Size=0x10
};

struct _P_REPLY_BLOCK// Size=0x8 (Id=2188)
{
    unsigned long long qwBlockID;// Offset=0x0 Size=0x8
};

struct XECRYPT_RSAPRV_2048// Size=0x390 (Id=2189)
{
    struct XECRYPT_RSA Rsa;// Offset=0x0 Size=0x10
    unsigned long long aqwM[32];// Offset=0x10 Size=0x100
    unsigned long long aqwP[16];// Offset=0x110 Size=0x80
    unsigned long long aqwQ[16];// Offset=0x190 Size=0x80
    unsigned long long aqwDP[16];// Offset=0x210 Size=0x80
    unsigned long long aqwDQ[16];// Offset=0x290 Size=0x80
    unsigned long long aqwCR[16];// Offset=0x310 Size=0x80
};

struct SuccessAttribute// Size=0x4 (Id=2190)
{
    wchar_t * Condition;// Offset=0x0 Size=0x4
};

struct _XONLINE_STATS_READ_REQUEST// Size=0x18 (Id=2191)
{
    unsigned long dwTitleId;// Offset=0x0 Size=0x4
    unsigned long dwNumXuids;// Offset=0x4 Size=0x4
    unsigned long long * pXuids;// Offset=0x8 Size=0x4
    unsigned long dwNumSpecs;// Offset=0xc Size=0x4
    struct _XONLINE_STATS_SPEC * pSpecs;// Offset=0x10 Size=0x4
    struct _XONLINE_STATS_READ_RESULTS * pResults;// Offset=0x14 Size=0x4
};

struct _CERTIFICATE_REVOCATION_BOX_DATA// Size=0x10 (Id=2192)
{
    unsigned long long DateStamp;// Offset=0x0 Size=0x8
    unsigned char Padding[7];// Offset=0x8 Size=0x7
    unsigned char UpdateSequence;// Offset=0xf Size=0x1
};

struct _GENERIC_LIST_INSERT_ITEMS_REQUEST// Size=0x22 (Id=2193)
{
    unsigned long long xUserId;// Offset=0x0 Size=0x8
    unsigned long nListType;// Offset=0x8 Size=0x4
    unsigned long nListId;// Offset=0xc Size=0x4
    struct _FILETIME ftLastModified;// Offset=0x10 Size=0x8
    unsigned short wNumItems;// Offset=0x18 Size=0x2
    struct _GENERIC_LIST_ITEM * pItems;// Offset=0x1a Size=0x4
    struct _GENERIC_LIST_INSERT_ITEMS_RESPONSE * pResponse;// Offset=0x1e Size=0x4
};

struct _XUSER_ADDPLAYER_MSG// Size=0x30 (Id=2194)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long dwResult;// Offset=0x4 Size=0x4
    struct _XUSER_PLAYERLIST_ITEM item;// Offset=0x8 Size=0x28
};

struct _BASIC_CONTENT_INFO// Size=0x62 (Id=2195)
{
    unsigned long long qwOfferID;// Offset=0x0 Size=0x8
    unsigned long long qwPreviewOfferID;// Offset=0x8 Size=0x8
    unsigned short wOfferNameLength;// Offset=0x10 Size=0x2
    unsigned short * wszOfferName;// Offset=0x12 Size=0x4
    unsigned long dwOfferType;// Offset=0x16 Size=0x4
    unsigned char contentId[20];// Offset=0x1a Size=0x14
    unsigned long dwLicenseMask;// Offset=0x2e Size=0x4
    unsigned long dwTitleID;// Offset=0x32 Size=0x4
    unsigned long dwTitleCategory;// Offset=0x36 Size=0x4
    unsigned short wTitleNameLength;// Offset=0x3a Size=0x2
    unsigned short * wszTitleName;// Offset=0x3c Size=0x4
    unsigned char bTierRequired;// Offset=0x40 Size=0x1
    unsigned short wGameRating;// Offset=0x41 Size=0x2
    unsigned short wResponseFlags;// Offset=0x43 Size=0x2
    unsigned long dwPackageSize;// Offset=0x45 Size=0x4
    unsigned long dwInstallSize;// Offset=0x49 Size=0x4
    unsigned long dwSellTextLength;// Offset=0x4d Size=0x4
    unsigned short * wszSellText;// Offset=0x51 Size=0x4
    unsigned long dwAssetID;// Offset=0x55 Size=0x4
    unsigned long dwPurchaseQuantity;// Offset=0x59 Size=0x4
    unsigned char bPricesLength;// Offset=0x5d Size=0x1
    struct _OFFER_PRICE * pPrices;// Offset=0x5e Size=0x4
};

struct _PHYSICAL_MEMORY_RUN// Size=0x8 (Id=2196)
{
    unsigned long BasePage;// Offset=0x0 Size=0x4
    unsigned long PageCount;// Offset=0x4 Size=0x4
};

struct _TESTXEXSYSINFO// Size=0xc (Id=2197)
{
    unsigned long dwBuildVer;// Offset=0x0 Size=0x4
    unsigned long dwBuildFlags;// Offset=0x4 Size=0x4
    unsigned long dwHardwareVer;// Offset=0x8 Size=0x4
};

struct _XMARKETPLACE_ELEMENT// Size=0xc (Id=2198)
{
    union // Size=0x4 (Id=0)
    {
        int iValue;// Offset=0x0 Size=0x4
        unsigned long dwValue;// Offset=0x0 Size=0x4
        char * pszUtf8Value;// Offset=0x0 Size=0x4
        unsigned short * pszValue;// Offset=0x0 Size=0x4
        unsigned long long * pUllValue;// Offset=0x0 Size=0x4
        struct _XMARKETPLACE_DATA * pBinaryValue;// Offset=0x0 Size=0x4
        struct _GUID * pGUIDValue;// Offset=0x0 Size=0x4
        struct _XMARKETPLACE_TABLE * pTable;// Offset=0x0 Size=0x4
    };
    unsigned short fValueSet;// Offset=0x4 Size=0x2
    unsigned short wPropType;// Offset=0x6 Size=0x2
    struct _XMARKETPLACE_ELEMENT * pNext;// Offset=0x8 Size=0x4
};

struct _REVOCATION_LIST_ENTRY// Size=0x14 (Id=2199)
{
    unsigned char abDigest[20];// Offset=0x0 Size=0x14
};

struct _TYPED_MEDIA_URL// Size=0xc (Id=2200)
{
    unsigned long dwMediaUrlType;// Offset=0x0 Size=0x4
    unsigned long dwUrlSize;// Offset=0x4 Size=0x4
    char * pszUrl;// Offset=0x8 Size=0x4
};

struct _P_SET_EXTENDED_STATE_RESPONSE// Size=0x24 (Id=2201)
{
    unsigned char pbInternal[32];// Offset=0x0 Size=0x20
    HRESULT hr;// Offset=0x20 Size=0x4
};

struct _XUPDATE_REFERRAL_RESPONSE// Size=0x140 (Id=2202)
{
    unsigned short wFlags;// Offset=0x0 Size=0x2
    unsigned short wNumLocations;// Offset=0x2 Size=0x2
    unsigned long dwPackageSize;// Offset=0x4 Size=0x4
    unsigned long dwInstallSize;// Offset=0x8 Size=0x4
    unsigned long dwVersion;// Offset=0xc Size=0x4
    unsigned char rgbSymKey[16];// Offset=0x10 Size=0x10
    unsigned char rgbPubKey[284];// Offset=0x20 Size=0x11c
    struct _XREFERRAL_LOCATION * pReferralLocations;// Offset=0x13c Size=0x4
};

struct ID3DXMatrixStack// Size=0x4 (Id=2203)
{
    struct ID3DXMatrixStackVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct _XEX_SECTION_HEADER// Size=0x10 (Id=2204)
{
    char SectionName[8];// Offset=0x0 Size=0x8
    unsigned long VirtualAddress;// Offset=0x8 Size=0x4
    unsigned long VirtualSize;// Offset=0xc Size=0x4
};

struct XECRYPT_SIG// Size=0x100 (Id=2205)
{
    unsigned long long aqwPad[28];// Offset=0x0 Size=0xe0
    unsigned char bOne;// Offset=0xe0 Size=0x1
    unsigned char abSalt[10];// Offset=0xe1 Size=0xa
    unsigned char abHash[20];// Offset=0xeb Size=0x14
    unsigned char bEnd;// Offset=0xff Size=0x1
};

struct _XUPDATE_REFERRAL_REQUEST// Size=0x14 (Id=2206)
{
    unsigned long long qwMachineId;// Offset=0x0 Size=0x8
    unsigned long dwTitleId;// Offset=0x8 Size=0x4
    unsigned long dwVersion;// Offset=0xc Size=0x4
    struct _XUPDATE_REFERRAL_RESPONSE * pResults;// Offset=0x10 Size=0x4
};

struct _GENERIC_LIST_ITEM// Size=0x18 (Id=2207)
{
    struct _GUID guidId;// Offset=0x0 Size=0x10
    unsigned short wPriority;// Offset=0x10 Size=0x2
    unsigned short wXmlLength;// Offset=0x12 Size=0x2
    unsigned short * XmlProperties;// Offset=0x14 Size=0x4
};

struct ID3DXCompressedAnimationSet// Size=0x4 (Id=2208)
{
    struct ID3DXCompressedAnimationSetVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct _DOWNLOAD_QUEUE_INSERT_ITEMS_REQUEST// Size=0x1e (Id=2209)
{
    unsigned long long xUserId;// Offset=0x0 Size=0x8
    unsigned long nQueueId;// Offset=0x8 Size=0x4
    struct _FILETIME ftLastModified;// Offset=0xc Size=0x8
    unsigned short wNumItems;// Offset=0x14 Size=0x2
    struct _GENERIC_LIST_ITEM * pItems;// Offset=0x16 Size=0x4
    struct _DOWNLOAD_QUEUE_INSERT_ITEMS_RESPONSE * pResponse;// Offset=0x1a Size=0x4
};

struct _XONLINE_QUERY_ATTRIBUTE_INTEGER// Size=0xc (Id=2210)
{
    unsigned long Length;// Offset=0x0 Size=0x4
    unsigned long long qwValue;// Offset=0x4 Size=0x8
};

struct XGI_WRITEGAMERTILE2_MSG// Size=0x2c (Id=2211)
{
    int fForEnumerate;// Offset=0x0 Size=0x4
    unsigned long dwUserIndex;// Offset=0x4 Size=0x4
    unsigned long dwTitleId;// Offset=0x8 Size=0x4
    unsigned long dwImageId;// Offset=0xc Size=0x4
    unsigned long dwImageIdSmall;// Offset=0x10 Size=0x4
    unsigned long dwFlags;// Offset=0x14 Size=0x4
    unsigned char * pbImageBig;// Offset=0x18 Size=0x4
    unsigned long cbImageBig;// Offset=0x1c Size=0x4
    unsigned char * pbImageSmall;// Offset=0x20 Size=0x4
    unsigned long cbImageSmall;// Offset=0x24 Size=0x4
    unsigned long dwUnused;// Offset=0x28 Size=0x4
};

struct _XUSER_PRIVILEGE_MSG// Size=0x20 (Id=2212)
{
    unsigned long long xuidUser;// Offset=0x0 Size=0x8
    unsigned long long * pXuids;// Offset=0x8 Size=0x4
    unsigned long dwXuidCount;// Offset=0xc Size=0x4
    int fResult;// Offset=0x10 Size=0x4
    unsigned long dwPrivilege;// Offset=0x14 Size=0x4
    struct _XOVERLAPPED * pOverlapped;// Offset=0x18 Size=0x4
};

struct _P_PRESENCE_2_ITEM// Size=0x28 (Id=2213)
{
    unsigned long long qwUserID;// Offset=0x0 Size=0x8
    unsigned long dwTitleID;// Offset=0x8 Size=0x4
    unsigned long dwState;// Offset=0xc Size=0x4
    struct XNKID MatchSessionID;// Offset=0x10 Size=0x8
    unsigned long mtUserTime;// Offset=0x18 Size=0x4
    unsigned short cbRichPresence;// Offset=0x1c Size=0x2
    unsigned short cbData;// Offset=0x1e Size=0x2
    unsigned short * wszRichPresence;// Offset=0x20 Size=0x4
    unsigned char * rgbData;// Offset=0x24 Size=0x4
};

struct _P_GET_FRIENDS_LIST_REPLY_DATA// Size=0x36 (Id=2214)
{
    unsigned long long qwFriendID;// Offset=0x0 Size=0x8
    unsigned long dwStatus;// Offset=0x8 Size=0x4
    unsigned long dwOnlineState;// Offset=0xc Size=0x4
    unsigned long dwTitleID;// Offset=0x10 Size=0x4
    unsigned long mtLastActive;// Offset=0x14 Size=0x4
    unsigned short cbData;// Offset=0x18 Size=0x2
    unsigned long cbRichPresence;// Offset=0x1a Size=0x4
    char szGamerTag[16];// Offset=0x1e Size=0x10
    unsigned char * prgbStateData;// Offset=0x2e Size=0x4
    unsigned char * prgbRichPresence;// Offset=0x32 Size=0x4
};

struct _GENERIC_LIST_MOVE_ITEMS_RESPONSE// Size=0x8 (Id=2215)
{
    struct _FILETIME ftLastModified;// Offset=0x0 Size=0x8
};

struct _TESTXEXXUILOCK// Size=0x8 (Id=2216)
{
    int fWait;// Offset=0x0 Size=0x4
    unsigned long dwTime;// Offset=0x4 Size=0x4
};

struct _XLIVEHIVE_GET_LIVE_CONFIG_REQUEST// Size=0xa (Id=2217)
{
    unsigned short uConfigNameLen;// Offset=0x0 Size=0x2
    unsigned short * szConfigName;// Offset=0x2 Size=0x4
    struct _XLIVEHIVE_GET_LIVE_CONFIG_RESPONSE * pResponse;// Offset=0x6 Size=0x4
};

struct _SATA_CHANNEL_EXTENSION// Size=0x0 (Id=2218)
{
};

struct _SUBSCRIPTION_DETAILS_REQUEST// Size=0x25 (Id=2219)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned long long qwMachineId;// Offset=0x8 Size=0x8
    unsigned char bCountryId;// Offset=0x10 Size=0x1
    unsigned short wLanguageId;// Offset=0x11 Size=0x2
    unsigned long long qwOfferID;// Offset=0x13 Size=0x8
    unsigned long dwPaymentType;// Offset=0x1b Size=0x4
    unsigned char bUserTier;// Offset=0x1f Size=0x1
    unsigned char bRatingSystem;// Offset=0x20 Size=0x1
    struct _SUBSCRIPTION_DETAILS_RESPONSE * pResults;// Offset=0x21 Size=0x4
};

struct _KSPECIAL_REGISTERS// Size=0x20 (Id=2220)
{
    unsigned long KernelDr0;// Offset=0x0 Size=0x4
    unsigned long KernelDr1;// Offset=0x4 Size=0x4
    unsigned long KernelDr2;// Offset=0x8 Size=0x4
    unsigned long KernelDr3;// Offset=0xc Size=0x4
    unsigned long KernelDr4;// Offset=0x10 Size=0x4
    unsigned long KernelDr5;// Offset=0x14 Size=0x4
    unsigned long KernelDr6;// Offset=0x18 Size=0x4
    unsigned long KernelDr7;// Offset=0x1c Size=0x4
};

struct _XMSG_DELETE_REQUEST// Size=0x2c (Id=2221)
{
    unsigned long long XuidUser;// Offset=0x0 Size=0x8
    unsigned long dwMessageID;// Offset=0x8 Size=0x4
    int fBlockSender;// Offset=0xc Size=0x4
    struct _XOVERLAPPED pXOverlapped[1];// Offset=0x10 Size=0x1c
};

struct _Q_DELETE_MESSAGE_MSG// Size=0x30 (Id=2222)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwUserID;// Offset=0x20 Size=0x8
    unsigned long dwMessageID;// Offset=0x28 Size=0x4
    unsigned long dwFlags;// Offset=0x2c Size=0x4
};

struct _XPARTY_CREATE_PARAMS// Size=0x8 (Id=2223)
{
    unsigned long dwPartyLeaderUserIndex;// Offset=0x0 Size=0x4
    struct _XPARTY_LEAVE_PARAMS InternalLeaveParams;// Offset=0x4 Size=0x4
};

struct _INGAME_CONTENT_AVAILABLE_REQUEST// Size=0x1c (Id=2224)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned char bCountryId;// Offset=0x8 Size=0x1
    unsigned short wLiveLanguageId;// Offset=0x9 Size=0x2
    unsigned char bTier;// Offset=0xb Size=0x1
    unsigned long dwTitleId;// Offset=0xc Size=0x4
    struct _FILETIME ftlastViewed;// Offset=0x10 Size=0x8
    struct _INGAME_CONTENT_AVAILABLE_RESPONSE * pResults;// Offset=0x18 Size=0x4
};

struct _DOWNLOAD_QUEUE_CREATE_RESPONSE// Size=0xc (Id=2225)
{
    unsigned long nQueueId;// Offset=0x0 Size=0x4
    struct _FILETIME ftLastModified;// Offset=0x4 Size=0x8
};

struct _IO_COMPLETION_CONTEXT// Size=0x8 (Id=2226)
{
    void * Port;// Offset=0x0 Size=0x4
    void * Key;// Offset=0x4 Size=0x4
};

struct _XEX_CALLCAP_IMPORTS// Size=0x8 (Id=2227)
{
    unsigned long BeginFunctionThunkAddress;// Offset=0x0 Size=0x4
    unsigned long EndFunctionThunkAddress;// Offset=0x4 Size=0x4
};

struct _XEX_SERVICE_ID_LIST// Size=0x14 (Id=2228)
{
    unsigned long Size;// Offset=0x0 Size=0x4
    unsigned long CustomServiceIDs[4];// Offset=0x4 Size=0x10
};

struct _DOWNLOAD_QUEUE_CREATE_REQUEST// Size=0x17 (Id=2229)
{
    unsigned long long xUserId;// Offset=0x0 Size=0x8
    unsigned char bNameLength;// Offset=0x8 Size=0x1
    unsigned short wXmlLength;// Offset=0x9 Size=0x2
    unsigned short * szName;// Offset=0xb Size=0x4
    unsigned short * XmlProperties;// Offset=0xf Size=0x4
    struct _DOWNLOAD_QUEUE_CREATE_RESPONSE * pResponse;// Offset=0x13 Size=0x4
};

struct ID3DXBuffer// Size=0x4 (Id=2230)
{
    struct ID3DXBufferVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct _unnamed_2231// Size=0x8 (Id=2231)
{
    unsigned long HighPart;// Offset=0x0 Size=0x4
    unsigned long LowPart;// Offset=0x4 Size=0x4
};

union _ULARGE_INTEGER// Size=0x8 (Id=2232)
{
    unsigned long HighPart;// Offset=0x0 Size=0x4
    unsigned long LowPart;// Offset=0x4 Size=0x4
    struct _unnamed_2231 u;// Offset=0x0 Size=0x8
    unsigned long long QuadPart;// Offset=0x0 Size=0x8
};

struct _PASSPORT_SESSION_TOKEN// Size=0x1c (Id=2233)
{
    unsigned char abSessionToken[28];// Offset=0x0 Size=0x1c
};

struct _XSIGNATURE_TO_VERIFY// Size=0x78 (Id=2234)
{
    unsigned char rgbDigest[20];// Offset=0x0 Size=0x14
    unsigned char rgbOnlineSignature[100];// Offset=0x14 Size=0x64
};

struct ISequentialStream// Size=0x4 (Id=2235)
{
    struct ISequentialStreamVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct XMVECTORF32// Size=0x10 (Id=2236)
{
    union // Size=0x10 (Id=0)
    {
        float f[4];// Offset=0x0 Size=0x10
        struct __vector4 v;// Offset=0x0 Size=0x10
    };
};

struct _XMSG_PROPERTY// Size=0x4 (Id=2237)
{
    unsigned short wPropTag;// Offset=0x0 Size=0x2
    union _XMSG_PROPERTY_DATA Data;// Offset=0x2 Size=0x2
};

struct _VERIFY_TOKEN_RESPONSE// Size=0x32 (Id=2238)
{
    unsigned short wOfferCatalogType;// Offset=0x0 Size=0x2
    struct _VERIFY_TOKEN_RESPONSE_XBOX xboxOfferInfo;// Offset=0x2 Size=0xc
    struct _VERIFY_TOKEN_RESPONSE_EMS emsOfferInfo;// Offset=0xe Size=0x24
};

struct _XSYSLOADINPUT// Size=0x10 (Id=2239)
{
    unsigned long dwFlags;// Offset=0x0 Size=0x4
    void * pvParam;// Offset=0x4 Size=0x4
    struct HINSTANCE__ * hInstance;// Offset=0x8 Size=0x4
    unsigned long dwUserIndex;// Offset=0xc Size=0x4
};

struct _PASSPORT_ENCRYPTED_PROXY_PARAMETERS// Size=0x24 (Id=2240)
{
    unsigned short wLoginTokenRequestLength;// Offset=0x0 Size=0x2
    unsigned char * pbLoginTokenRequest;// Offset=0x2 Size=0x4
    unsigned long dwPublicKeyPublicExponent;// Offset=0x6 Size=0x4
    unsigned short wPublicKeyModulusLength;// Offset=0xa Size=0x2
    unsigned char * pbPublicKeyModulus;// Offset=0xc Size=0x4
    unsigned char abPublicKeyDigest[20];// Offset=0x10 Size=0x14
};

struct _XSTORAGE_ACCESS_TOKEN// Size=0x1c (Id=2241)
{
    unsigned short wOperation;// Offset=0x0 Size=0x2
    unsigned short wAccessTokenVersion;// Offset=0x2 Size=0x2
    unsigned long dwServiceId;// Offset=0x4 Size=0x4
    unsigned long dwFlags;// Offset=0x8 Size=0x4
    unsigned long long qwUserId;// Offset=0xc Size=0x8
    unsigned long long qwXboxId;// Offset=0x14 Size=0x8
};

struct _numberfmtW// Size=0x18 (Id=2242)
{
    unsigned int NumDigits;// Offset=0x0 Size=0x4
    unsigned int LeadingZero;// Offset=0x4 Size=0x4
    unsigned int Grouping;// Offset=0x8 Size=0x4
    unsigned short * lpDecimalSep;// Offset=0xc Size=0x4
    unsigned short * lpThousandSep;// Offset=0x10 Size=0x4
    unsigned int NegativeOrder;// Offset=0x14 Size=0x4
};

struct _QUERY_SELECT_REQUEST// Size=0x2c (Id=2243)
{
    unsigned long dwTitleId;// Offset=0x0 Size=0x4
    unsigned long long qwUserId;// Offset=0x4 Size=0x8
    unsigned long long qwTeamId;// Offset=0xc Size=0x8
    unsigned long dwDatasetId;// Offset=0x14 Size=0x4
    unsigned long long qwEntityId;// Offset=0x18 Size=0x8
    unsigned long dwActionId;// Offset=0x20 Size=0x4
    unsigned long dwNumAttributes;// Offset=0x24 Size=0x4
    struct _XONLINE_QUERY_ATTRIBUTE * pAttributes;// Offset=0x28 Size=0x4
};

struct _XDASHLAUNCHDATA// Size=0x3fc (Id=2244)
{
    unsigned long dwVersion;// Offset=0x0 Size=0x4
    unsigned long dwCommand;// Offset=0x4 Size=0x4
    unsigned long dwUserIndex;// Offset=0x8 Size=0x4
    unsigned char Reserved[1008];// Offset=0xc Size=0x3f0
};

struct ID3DXIncludeVtbl// Size=0x8 (Id=2245)
{
    HRESULT  ( * Open)(struct ID3DXInclude * ,enum _D3DXINCLUDE_TYPE ,char * ,void * ,void ** ,unsigned int * ,char * ,unsigned long );// Offset=0x0 Size=0x4
    HRESULT  ( * Close)(struct ID3DXInclude * ,void * );// Offset=0x4 Size=0x4
};

struct _P_TEAM_LIST_TEAMS_MSG_XUID// Size=0x30 (Id=2246)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwUserID;// Offset=0x20 Size=0x8
    unsigned long dwTitleID;// Offset=0x28 Size=0x4
    struct _TEAM_ENUM_BY_XUID_RESULTS * pvResults;// Offset=0x2c Size=0x4
};

struct _GENERIC_LIST_QUERY_ITEMS_REQUEST// Size=0x26 (Id=2247)
{
    unsigned long long xUserId;// Offset=0x0 Size=0x8
    unsigned long nListType;// Offset=0x8 Size=0x4
    unsigned long nListId;// Offset=0xc Size=0x4
    unsigned long nPageSize;// Offset=0x10 Size=0x4
    unsigned long nPageNum;// Offset=0x14 Size=0x4
    unsigned long nOrderDir;// Offset=0x18 Size=0x4
    unsigned short wNumIds;// Offset=0x1c Size=0x2
    struct _GUID * pItemIds;// Offset=0x1e Size=0x4
    struct _GENERIC_LIST_QUERY_ITEMS_RESPONSE * pResponse;// Offset=0x22 Size=0x4
};

struct PreAttribute// Size=0x54 (Id=2248)
{
    unsigned int Deref;// Offset=0x0 Size=0x4
    enum SA_YesNoMaybe Valid;// Offset=0x4 Size=0x4
    enum SA_YesNoMaybe Null;// Offset=0x8 Size=0x4
    enum SA_YesNoMaybe Tainted;// Offset=0xc Size=0x4
    enum SA_AccessType Access;// Offset=0x10 Size=0x4
    unsigned int ValidElementsConst;// Offset=0x14 Size=0x4
    unsigned int ValidBytesConst;// Offset=0x18 Size=0x4
    wchar_t * ValidElements;// Offset=0x1c Size=0x4
    wchar_t * ValidBytes;// Offset=0x20 Size=0x4
    wchar_t * ValidElementsLength;// Offset=0x24 Size=0x4
    wchar_t * ValidBytesLength;// Offset=0x28 Size=0x4
    unsigned int WritableElementsConst;// Offset=0x2c Size=0x4
    unsigned int WritableBytesConst;// Offset=0x30 Size=0x4
    wchar_t * WritableElements;// Offset=0x34 Size=0x4
    wchar_t * WritableBytes;// Offset=0x38 Size=0x4
    wchar_t * WritableElementsLength;// Offset=0x3c Size=0x4
    wchar_t * WritableBytesLength;// Offset=0x40 Size=0x4
    unsigned int ElementSizeConst;// Offset=0x44 Size=0x4
    wchar_t * ElementSize;// Offset=0x48 Size=0x4
    enum SA_YesNoMaybe NullTerminated;// Offset=0x4c Size=0x4
    wchar_t * Condition;// Offset=0x50 Size=0x4
};

union _XONLINE_QUERY_ATTRIBUTE_DATA// Size=0xc (Id=2249)
{
    union // Size=0xc (Id=0)
    {
        struct _XONLINE_QUERY_ATTRIBUTE_INTEGER integer;// Offset=0x0 Size=0xc
        struct _XONLINE_QUERY_ATTRIBUTE_STRING string;// Offset=0x0 Size=0x8
        struct _XONLINE_QUERY_ATTRIBUTE_BLOB blob;// Offset=0x0 Size=0x8
    };
};

struct _XUID_AND_FLAGS// Size=0xc (Id=2250)
{
    unsigned long long xuid;// Offset=0x0 Size=0x8
    unsigned long dwUserFlags;// Offset=0x8 Size=0x4
};

struct _SVOD_LEVEL1_HASH_BLOCK// Size=0x1000 (Id=2251)
{
    struct _SVOD_HASH_ENTRY Entries[203];// Offset=0x0 Size=0xfdc
    struct _SVOD_HASH_ENTRY NextFragmentHashEntry;// Offset=0xfdc Size=0x14
    unsigned char Reserved[16];// Offset=0xff0 Size=0x10
};

struct __RAW_READ_INFO// Size=0x10 (Id=2252)
{
    union _LARGE_INTEGER DiskOffset;// Offset=0x0 Size=0x8
    unsigned long SectorCount;// Offset=0x8 Size=0x4
    enum _TRACK_MODE_TYPE TrackMode;// Offset=0xc Size=0x4
};

struct _XONLINE_MATCH_SESSION_INFO// Size=0x18 (Id=2253)
{
    struct XNKID SessionID;// Offset=0x0 Size=0x8
    struct XNKEY KeyExchangeKey;// Offset=0x8 Size=0x10
};

struct _STF_CREATE_PACKET// Size=0x58 (Id=2254)
{
    struct _STRING DeviceName;// Offset=0x0 Size=0x8
    union _ULARGE_INTEGER BackingFileOffset;// Offset=0x8 Size=0x8
    union _ULARGE_INTEGER BackingMaximumVolumeSize;// Offset=0x10 Size=0x8
    void * BackingFileHandle;// Offset=0x18 Size=0x4
    unsigned char VolumeDescriptor[36];// Offset=0x1c Size=0x24
    void * BlockArray;// Offset=0x40 Size=0x4
    unsigned long DeviceExtensionSize;// Offset=0x44 Size=0x4
    struct _DEVICE_OBJECT * DeviceObject;// Offset=0x48 Size=0x4
    void * DeviceExtension;// Offset=0x4c Size=0x4
    unsigned char BlockCacheElementCount;// Offset=0x50 Size=0x1
    unsigned char TitleOwned;// Offset=0x51 Size=0x1
    unsigned char BackingFilePresized;// Offset=0x52 Size=0x1
    unsigned char DeviceCharacteristics;// Offset=0x53 Size=0x1
};

struct _SVOD_CREATE_PACKET// Size=0x28 (Id=2255)
{
    struct _STRING DeviceName;// Offset=0x0 Size=0x8
    struct _STRING BaseDirectoryName;// Offset=0x8 Size=0x8
    void * BaseDirectoryHandle;// Offset=0x10 Size=0x4
    struct _SVOD_DEVICE_DESCRIPTOR * DeviceDescriptor;// Offset=0x14 Size=0x4
    void * BlockArray;// Offset=0x18 Size=0x4
    unsigned long DeviceExtensionSize;// Offset=0x1c Size=0x4
    struct _DEVICE_OBJECT * DeviceObject;// Offset=0x20 Size=0x4
    void * DeviceExtension;// Offset=0x24 Size=0x4
};

struct ID3DXFileEnumObject// Size=0x4 (Id=2256)
{
    struct ID3DXFileEnumObjectVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct _FSCACHE_PROCESS// Size=0x84 (Id=2257)
{
    unsigned long GeneralSpinLock;// Offset=0x0 Size=0x4
    unsigned long ElementArraySpinLock;// Offset=0x4 Size=0x4
    struct _KPRCB * SpinLockOwner;// Offset=0x8 Size=0x4
    struct _LIST_ENTRY LruListHead;// Offset=0xc Size=0x8
    unsigned long ElementCount;// Offset=0x14 Size=0x4
    struct _FSCACHE_ELEMENT * ElementArray;// Offset=0x18 Size=0x4
    struct _RTL_CRITICAL_SECTION SetCacheSizeLock;// Offset=0x1c Size=0x1c
    struct _KEVENT CollidedMapBufferEvent;// Offset=0x38 Size=0x10
    struct _KEVENT WaitingForElementEvent;// Offset=0x48 Size=0x10
    unsigned long WaitingForElementWaiters;// Offset=0x58 Size=0x4
    struct _FSCACHE_PROCESS * OtherCacheProcess;// Offset=0x5c Size=0x4
    unsigned char MemoryRegionType;// Offset=0x60 Size=0x1
    unsigned char PoolType;// Offset=0x61 Size=0x1
    unsigned char WaitingForMountBuffer;// Offset=0x62 Size=0x1
    unsigned char PagesPerMountBuffer;// Offset=0x63 Size=0x1
    struct _KEVENT MountBufferLock;// Offset=0x64 Size=0x10
    struct _KEVENT WaitingForMountBufferEvent;// Offset=0x74 Size=0x10
};

struct _XEIKA_CERT_OVERLAY_ELEMENTS// Size=0x140 (Id=2258)
{
    struct XECRYPT_RSAPUB_2048 XeikaPublicKey;// Offset=0x0 Size=0x110
    char OverlaySignature[4];// Offset=0x110 Size=0x4
    unsigned short OverlayVersion;// Offset=0x114 Size=0x2
    unsigned char ODDDataVersion;// Offset=0x116 Size=0x1
    unsigned char ODDDrivePhaseLevel;// Offset=0x117 Size=0x1
    unsigned char ODDQueryData[36];// Offset=0x118 Size=0x24
};

struct _XPARTY_FORMATION// Size=0x150 (Id=2259)
{
    struct _XPARTY_INFO ConnectInfo;// Offset=0x0 Size=0x3e
    unsigned char __align0[2];// Offset=0x3e Size=0x2
    unsigned long dwLeaderTitleId;// Offset=0x40 Size=0x4
    int fLeaderJoinable;// Offset=0x44 Size=0x4
    unsigned long dwMemberCount;// Offset=0x48 Size=0x4
    unsigned char __align1[4];// Offset=0x4c Size=0x4
    struct _XPARTY_MEMBER_INFO Members[8];// Offset=0x50 Size=0x100
};

struct _XMINIMEDIAPLAYERUI_PARAMS// Size=0x4 (Id=2260)
{
    enum _MINIMUSIC_STARTUP_OPTIONS eStartupOptions;// Offset=0x0 Size=0x4
};

struct _EX_XCONFIG_REGISTRATION// Size=0xc (Id=2261)
{
    void  ( * NotificationRoutine)(short ,short );// Offset=0x0 Size=0x4
    struct _LIST_ENTRY ListEntry;// Offset=0x4 Size=0x8
};

struct _XUSER_ENUMPLAYER_MSG// Size=0x10 (Id=2262)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long dwStartingIndex;// Offset=0x4 Size=0x4
    unsigned long cItem;// Offset=0x8 Size=0x4
    struct _XUSER_PLAYER_ENUM * pxenum;// Offset=0xc Size=0x4
};

struct ID3DXFileVtbl// Size=0x1c (Id=2263)
{
    HRESULT  ( * QueryInterface)(struct ID3DXFile * ,const struct _GUID * ,void ** );// Offset=0x0 Size=0x4
    unsigned long  ( * AddRef)(struct ID3DXFile * );// Offset=0x4 Size=0x4
    unsigned long  ( * Release)(struct ID3DXFile * );// Offset=0x8 Size=0x4
    HRESULT  ( * CreateEnumObject)(struct ID3DXFile * ,void * ,unsigned long ,struct ID3DXFileEnumObject ** );// Offset=0xc Size=0x4
    HRESULT  ( * CreateSaveObject)(struct ID3DXFile * ,void * ,unsigned long ,unsigned long ,struct ID3DXFileSaveObject ** );// Offset=0x10 Size=0x4
    HRESULT  ( * RegisterTemplates)(struct ID3DXFile * ,void * ,unsigned long );// Offset=0x14 Size=0x4
    HRESULT  ( * RegisterEnumTemplates)(struct ID3DXFile * ,struct ID3DXFileEnumObject * );// Offset=0x18 Size=0x4
};

struct _XHTTP_REQUEST// Size=0x70a (Id=2264)
{
    unsigned long dwFlags;// Offset=0x0 Size=0x4
    unsigned long dwServiceId;// Offset=0x4 Size=0x4
    char szHost[512];// Offset=0x8 Size=0x200
    unsigned short wPort;// Offset=0x208 Size=0x2
    char szUrl[1024];// Offset=0x20a Size=0x400
    char szExtraHeaders[256];// Offset=0x60a Size=0x100
};

struct _LDRX_SOURCE// Size=0x18 (Id=2265)
{
    void * XexHeaders;// Offset=0x0 Size=0x4
    unsigned long ImageSize;// Offset=0x4 Size=0x4
    long  ( * ImageFileRead)(void * ,unsigned long ,void * ,unsigned long ,struct _IO_STATUS_BLOCK * ,void * );// Offset=0x8 Size=0x4
    union // Size=0x4 (Id=0)
    {
        void * ImageFileHandle;// Offset=0xc Size=0x4
        unsigned char * Data;// Offset=0xc Size=0x4
    };
    unsigned long SizeOfData;// Offset=0x10 Size=0x4
    unsigned long ImageMediaTypes;// Offset=0x14 Size=0x4
};

struct _XREVOCATION_VERIFY_PARAMS// Size=0x4 (Id=2266)
{
    unsigned long dwFlags;// Offset=0x0 Size=0x4
};

struct _KSWAP_FRAME// Size=0xf0 (Id=2267)
{
    struct _STACK_FRAME_HEADER Header;// Offset=0x0 Size=0x50
    unsigned long long Gpr14;// Offset=0x50 Size=0x8
    unsigned long long Gpr15;// Offset=0x58 Size=0x8
    unsigned long long Gpr16;// Offset=0x60 Size=0x8
    unsigned long long Gpr17;// Offset=0x68 Size=0x8
    unsigned long long Gpr18;// Offset=0x70 Size=0x8
    unsigned long long Gpr19;// Offset=0x78 Size=0x8
    unsigned long long Gpr20;// Offset=0x80 Size=0x8
    unsigned long long Gpr21;// Offset=0x88 Size=0x8
    unsigned long long Gpr22;// Offset=0x90 Size=0x8
    unsigned long long Gpr23;// Offset=0x98 Size=0x8
    unsigned long long Gpr24;// Offset=0xa0 Size=0x8
    unsigned long long Gpr25;// Offset=0xa8 Size=0x8
    unsigned long long Gpr26;// Offset=0xb0 Size=0x8
    unsigned long long Gpr27;// Offset=0xb8 Size=0x8
    unsigned long long Gpr28;// Offset=0xc0 Size=0x8
    unsigned long long Gpr29;// Offset=0xc8 Size=0x8
    unsigned long long Gpr30;// Offset=0xd0 Size=0x8
    unsigned long long Gpr31;// Offset=0xd8 Size=0x8
    unsigned long Cr;// Offset=0xe0 Size=0x4
    unsigned long Lr;// Offset=0xe4 Size=0x4
    unsigned long CallersLr;// Offset=0xe8 Size=0x4
    unsigned long Fill[1];// Offset=0xec Size=0x4
};

union _unnamed_2268// Size=0x228 (Id=2268)
{
    struct _XE_CONSOLE_SIGNATURE ConsoleSignature;// Offset=0x0 Size=0x228
    struct _XCONTENT_SIGNATURE ContentSignature;// Offset=0x0 Size=0x228
};

struct _XCONTENT_HEADER// Size=0x344 (Id=2269)
{
    enum _XCONTENT_SIGNATURE_TYPE SignatureType;// Offset=0x0 Size=0x4
    union _unnamed_2268 Signature;// Offset=0x4 Size=0x228
    struct _XCONTENT_LICENSE LicenseDescriptors[16];// Offset=0x22c Size=0x100
    unsigned char ContentId[20];// Offset=0x32c Size=0x14
    unsigned long SizeOfHeaders;// Offset=0x340 Size=0x4
};

struct _Q_DEQUEUE_MSG_INTERNAL// Size=0x34 (Id=2270)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwUserID;// Offset=0x20 Size=0x8
    unsigned short wQType;// Offset=0x28 Size=0x2
    unsigned long dwStartItemID;// Offset=0x2a Size=0x4
    unsigned short wMaxItems;// Offset=0x2e Size=0x2
    unsigned long dwMaxTotalItemDataSize;// Offset=0x30 Size=0x4
};

struct _PASSPORT_LOGIN_EX_REQUEST// Size=0x20 (Id=2271)
{
    unsigned short wPassportMemberNameLength;// Offset=0x0 Size=0x2
    char * szPassportMemberName;// Offset=0x2 Size=0x4
    unsigned short wEncryptedSessionKeyLength;// Offset=0x6 Size=0x2
    unsigned char * pbencryptedSessionKey;// Offset=0x8 Size=0x4
    unsigned short wEncryptedPasswordLength;// Offset=0xc Size=0x2
    unsigned char * pbEncryptedPassword;// Offset=0xe Size=0x4
    unsigned short wEncryptedTokenRequestLength;// Offset=0x12 Size=0x2
    unsigned char * pbEncryptedTokenRequest;// Offset=0x14 Size=0x4
    unsigned long dwSessionId;// Offset=0x18 Size=0x4
    struct _PASSPORT_SESSION_TOKEN_EX * pSessionTokenEx;// Offset=0x1c Size=0x4
};

struct _XARB_REGISTRANT// Size=0xe (Id=2272)
{
    unsigned long long qwMachineID;// Offset=0x0 Size=0x8
    unsigned char bTrustworthiness;// Offset=0x8 Size=0x1
    unsigned char bNumUsers;// Offset=0x9 Size=0x1
    struct _XUID_AND_FLAGS * rgUsers;// Offset=0xa Size=0x4
};

struct _STRING_V1_TITLE_ID_REQUEST// Size=0xe (Id=2273)
{
    unsigned short wType;// Offset=0x0 Size=0x2
    unsigned short wLanguage;// Offset=0x2 Size=0x2
    unsigned short wNumTitles;// Offset=0x4 Size=0x2
    unsigned long * pTitleIDs;// Offset=0x6 Size=0x4
    struct _STRING_LOOKUP_RESPONSE * pResults;// Offset=0xa Size=0x4
};

struct XGI_PREFETCHSETTINGS_MSG// Size=0x14 (Id=2274)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long dwNumFor;// Offset=0x4 Size=0x4
    unsigned long long * pxuidFor;// Offset=0x8 Size=0x4
    unsigned long dwNumSettingIds;// Offset=0xc Size=0x4
    unsigned long * pSettingIds;// Offset=0x10 Size=0x4
};

struct _XSHOWMARKETPLACEUI_PARAMS// Size=0xa0 (Id=2275)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned char __align0[4];// Offset=0x4 Size=0x4
    unsigned long long UserXuid;// Offset=0x8 Size=0x8
    unsigned long dwEntryPoint;// Offset=0x10 Size=0x4
    unsigned char __align1[4];// Offset=0x14 Size=0x4
    unsigned long long qwOfferID;// Offset=0x18 Size=0x8
    unsigned long dwOfferType;// Offset=0x20 Size=0x4
    unsigned long dwContentCategories;// Offset=0x24 Size=0x4
    unsigned char bRequestFlags;// Offset=0x28 Size=0x1
    unsigned char __align2[7];// Offset=0x29 Size=0x7
    unsigned long long qwSourceId;// Offset=0x30 Size=0x8
    unsigned long dwTitleId;// Offset=0x38 Size=0x4
    enum GOLD_UPGRADE_REASON eUpgradeReason;// Offset=0x3c Size=0x4
    unsigned char bOnlineCountry;// Offset=0x40 Size=0x1
    unsigned char __align3[3];// Offset=0x41 Size=0x3
    struct _MP_BILLING_ACCOUNT_INFO * pBillingInfo;// Offset=0x44 Size=0x4
    struct _XOVERLAPPED * pOverlapped;// Offset=0x48 Size=0x4
    struct _GUID mediaId;// Offset=0x4c Size=0x10
    unsigned long dwMediaType;// Offset=0x5c Size=0x4
    unsigned long long aullOfferIDs[6];// Offset=0x60 Size=0x30
    unsigned long dwOfferIdCount;// Offset=0x90 Size=0x4
    HRESULT * phrResult;// Offset=0x94 Size=0x4
    void * pVoid;// Offset=0x98 Size=0x4
};

struct _XAMTASKATTRIBUTES// Size=0x8 (Id=2276)
{
    unsigned long dwProperties;// Offset=0x0 Size=0x4
    union // Size=0x8 (Id=0)
    {
        unsigned long dwPeriod;// Offset=0x4 Size=0x4
        void * pvWaitable;// Offset=0x4 Size=0x4
        void * hWaitable;// Offset=0x4 Size=0x4
        void * hxamtaskqueue;// Offset=0x4 Size=0x4
        unsigned long dwHardwareThread;// Offset=0x4 Size=0x4
    };
};

struct _DUMP_COLLECTION_FACILITY// Size=0x4 (Id=2277)
{
    long  ( * CollectDump)(struct _DUMP_COLLECTION_HELP * ,struct _EXCEPTION_RECORD * ,struct _CONTEXT * ,unsigned long );// Offset=0x0 Size=0x4
};

struct _XMATCH_SESSION_DELETE_REQUEST// Size=0x10 (Id=2278)
{
    unsigned long dwMessageLength;// Offset=0x0 Size=0x4
    struct XNKID SessionID;// Offset=0x4 Size=0x8
    unsigned long dwTitleID;// Offset=0xc Size=0x4
};

struct _XPARTY_USER_LIST_INTERNAL// Size=0x1008 (Id=2279)
{
    unsigned long dwUserCount;// Offset=0x0 Size=0x4
    unsigned char __align0[4];// Offset=0x4 Size=0x4
    struct _XPARTY_USER_INFO_INTERNAL Users[32];// Offset=0x8 Size=0x1000
};

struct TEST_CHANGEXEXINFO_MSG// Size=0x44 (Id=2280)
{
    unsigned long dwTitleID;// Offset=0x0 Size=0x4
    char szSpaFilename[64];// Offset=0x4 Size=0x40
};

struct _DM_FILEEVENT_DATA// Size=0x28 (Id=2281)
{
    unsigned long dwID;// Offset=0x0 Size=0x4
    enum DM_FILEEVENT_API FileEventType;// Offset=0x4 Size=0x4
    void * FileHandle;// Offset=0x8 Size=0x4
    struct _OBJECT_ATTRIBUTES * ObjectAttributes;// Offset=0xc Size=0x4
    long ResultStatus;// Offset=0x10 Size=0x4
    unsigned long Length;// Offset=0x14 Size=0x4
    union _LARGE_INTEGER * ByteOffset;// Offset=0x18 Size=0x4
    struct _IO_STATUS_BLOCK * IoStatusBlock;// Offset=0x1c Size=0x4
    void * ApcContext;// Offset=0x20 Size=0x4
    unsigned long Flags;// Offset=0x24 Size=0x4
};

struct _VERIFY_BILLING_TOKEN_REQUEST// Size=0x13 (Id=2282)
{
    unsigned char bCountryId;// Offset=0x0 Size=0x1
    unsigned short wBillingTokenLength;// Offset=0x1 Size=0x2
    unsigned short * wszBillingToken;// Offset=0x3 Size=0x4
    unsigned long long userPuid;// Offset=0x7 Size=0x8
    struct _VERIFY_BILLING_TOKEN_RESPONSE * pResponse;// Offset=0xf Size=0x4
};

struct _P_TEAM_RECRUIT_MSG_XUID// Size=0x5c (Id=2283)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwUserID;// Offset=0x20 Size=0x8
    unsigned long dwTitleID;// Offset=0x28 Size=0x4
    unsigned long long qwTeamID;// Offset=0x2c Size=0x8
    unsigned long long qwMemberID;// Offset=0x34 Size=0x8
    char szMemberName[16];// Offset=0x3c Size=0x10
    unsigned long dwMemberPriv;// Offset=0x4c Size=0x4
    unsigned long dwMessageFlags;// Offset=0x50 Size=0x4
    unsigned short cbMemberData;// Offset=0x54 Size=0x2
    unsigned short cbDetails;// Offset=0x56 Size=0x2
    unsigned char * pbMemberData;// Offset=0x58 Size=0x4
};

struct _GENERIC_LIST_ITEM_MODIFICATION_INFO// Size=0x16 (Id=2284)
{
    struct _GUID guidId;// Offset=0x0 Size=0x10
    unsigned short wXmlLength;// Offset=0x10 Size=0x2
    unsigned short * XmlProperties;// Offset=0x12 Size=0x4
};

struct _RTL_HEAP_PARAMETERS// Size=0x30 (Id=2285)
{
    unsigned long Length;// Offset=0x0 Size=0x4
    unsigned long SegmentReserve;// Offset=0x4 Size=0x4
    unsigned long SegmentCommit;// Offset=0x8 Size=0x4
    unsigned long DeCommitFreeBlockThreshold;// Offset=0xc Size=0x4
    unsigned long DeCommitTotalFreeThreshold;// Offset=0x10 Size=0x4
    unsigned long MaximumAllocationSize;// Offset=0x14 Size=0x4
    unsigned long VirtualMemoryThreshold;// Offset=0x18 Size=0x4
    unsigned long InitialCommit;// Offset=0x1c Size=0x4
    unsigned long InitialReserve;// Offset=0x20 Size=0x4
    long  ( * CommitRoutine)(void * ,void ** ,unsigned long * );// Offset=0x24 Size=0x4
    unsigned long Reserved[2];// Offset=0x28 Size=0x8
};

struct ID3DXEffectPool// Size=0x4 (Id=2286)
{
    struct ID3DXEffectPoolVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct _XCONFIG_XNET_SETTINGS// Size=0x1f0 (Id=2287)
{
    unsigned long Version;// Offset=0x0 Size=0x4
    unsigned char Data[492];// Offset=0x4 Size=0x1ec
};

struct _XMUBYTE4// Size=0x4 (Id=2288)
{
    union // Size=0x4 (Id=0)
    {
        unsigned char x;// Offset=0x0 Size=0x1
        unsigned char y;// Offset=0x1 Size=0x1
        unsigned char z;// Offset=0x2 Size=0x1
        unsigned char w;// Offset=0x3 Size=0x1
        unsigned int v;// Offset=0x0 Size=0x4
    };
};

struct _XEX_VITAL_STATS// Size=0x8 (Id=2289)
{
    unsigned long CheckSum;// Offset=0x0 Size=0x4
    unsigned long TimeDateStamp;// Offset=0x4 Size=0x4
};

struct _INGAME_CONTENT_ENUMERATE_REQUEST// Size=0x2f (Id=2290)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned long long qwMachineId;// Offset=0x8 Size=0x8
    unsigned char bCountryId;// Offset=0x10 Size=0x1
    unsigned short wLiveLanguageId;// Offset=0x11 Size=0x2
    unsigned short wEmsGameRating;// Offset=0x13 Size=0x2
    unsigned long dwOfferType;// Offset=0x15 Size=0x4
    unsigned char bTier;// Offset=0x19 Size=0x1
    unsigned long dwTitleId;// Offset=0x1a Size=0x4
    unsigned long dwTitleCategories;// Offset=0x1e Size=0x4
    unsigned char bRequestFlags;// Offset=0x22 Size=0x1
    unsigned long dwStartingIndex;// Offset=0x23 Size=0x4
    unsigned long dwMaxResults;// Offset=0x27 Size=0x4
    struct _INGAME_CONTENT_ENUMERATE_RESPONSE * pResults;// Offset=0x2b Size=0x4
};

struct _XRESOLVE_DOMAIN_STRING// Size=0x6 (Id=2291)
{
    unsigned short wNumStringChars;// Offset=0x0 Size=0x2
    unsigned short * pwszString;// Offset=0x2 Size=0x4
};

struct XSTORAGEDEVICECHANGE_PARAMS// Size=0x114 (Id=2292)
{
    char szDevicePath[260];// Offset=0x0 Size=0x104
    int fRemoved;// Offset=0x104 Size=0x4
    unsigned long deviceType;// Offset=0x108 Size=0x4
    unsigned long deviceId;// Offset=0x10c Size=0x4
    enum DEVICESTATE eState;// Offset=0x110 Size=0x4
};

struct _KPROCESS// Size=0x60 (Id=2293)
{
    unsigned long ThreadListLock;// Offset=0x0 Size=0x4
    struct _LIST_ENTRY ThreadListHead;// Offset=0x4 Size=0x8
    long ThreadQuantum;// Offset=0xc Size=0x4
    unsigned long DirectoryTableBase;// Offset=0x10 Size=0x4
    unsigned long ThreadCount;// Offset=0x14 Size=0x4
    unsigned char IdlePriorityClass;// Offset=0x18 Size=0x1
    unsigned char NormalPriorityClass;// Offset=0x19 Size=0x1
    unsigned char TimeCriticalPriorityClass;// Offset=0x1a Size=0x1
    unsigned char DisableQuantum;// Offset=0x1b Size=0x1
    unsigned long DefaultKernelStackSize;// Offset=0x1c Size=0x4
    void * TlsStaticDataImage;// Offset=0x20 Size=0x4
    unsigned long SizeOfTlsStaticData;// Offset=0x24 Size=0x4
    unsigned long SizeOfTlsStaticDataImage;// Offset=0x28 Size=0x4
    unsigned short SizeOfTlsSlots;// Offset=0x2c Size=0x2
    unsigned char Terminating;// Offset=0x2e Size=0x1
    unsigned char ProcessType;// Offset=0x2f Size=0x1
    unsigned long TlsSlotBitmap[8];// Offset=0x30 Size=0x20
    unsigned long FileObjectListLock;// Offset=0x50 Size=0x4
    struct _LIST_ENTRY FileObjectListHead;// Offset=0x54 Size=0x8
    void * Win32DefaultHeapHandle;// Offset=0x5c Size=0x4
};

struct _D3DXKEY_QUATERNION// Size=0x14 (Id=2294)
{
    float Time;// Offset=0x0 Size=0x4
    struct D3DXQUATERNION Value;// Offset=0x4 Size=0x10
};

struct _DVD_SPINDLE_SPEED_INFO// Size=0x10 (Id=2295)
{
    unsigned long CurrentSpeed;// Offset=0x0 Size=0x4
    unsigned long MaximumSpeed;// Offset=0x4 Size=0x4
    unsigned long FastestSpeed;// Offset=0x8 Size=0x4
    unsigned long DesiredSpeed;// Offset=0xc Size=0x4
};

struct _ADDRESS_INFO// Size=0x24 (Id=2296)
{
    unsigned short wStreet1Length;// Offset=0x0 Size=0x2
    unsigned short * wszStreet1;// Offset=0x2 Size=0x4
    unsigned short wStreet2Length;// Offset=0x6 Size=0x2
    unsigned short * wszStreet2;// Offset=0x8 Size=0x4
    unsigned short wCityLength;// Offset=0xc Size=0x2
    unsigned short * wszCity;// Offset=0xe Size=0x4
    unsigned short wDistrictLength;// Offset=0x12 Size=0x2
    unsigned short * wszDistrict;// Offset=0x14 Size=0x4
    unsigned short wStateLength;// Offset=0x18 Size=0x2
    unsigned short * wszState;// Offset=0x1a Size=0x4
    unsigned short wPostalCodeLength;// Offset=0x1e Size=0x2
    unsigned short * wszPostalCode;// Offset=0x20 Size=0x4
};

struct _XSIGNATURE_CERTIFY_PUBLIC_KEY_REQUEST// Size=0x122 (Id=2297)
{
    unsigned short wAppIdLength;// Offset=0x0 Size=0x2
    unsigned short * wszAppId;// Offset=0x2 Size=0x4
    unsigned long long qwUserID;// Offset=0x6 Size=0x8
    unsigned char abPublicKey[272];// Offset=0xe Size=0x110
    struct _XSIGNATURE_CERTIFY_PUBLIC_KEY_REPLY * pResponse;// Offset=0x11e Size=0x4
};

struct _P_ADD_2_MSG_INTERNAL// Size=0x46 (Id=2298)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwSenderID;// Offset=0x20 Size=0x8
    unsigned long long qwBuddyID;// Offset=0x28 Size=0x8
    unsigned long dwMessageFlags;// Offset=0x30 Size=0x4
    unsigned short cbDetails;// Offset=0x34 Size=0x2
    char szBuddyAcctName[16];// Offset=0x36 Size=0x10
};

struct _LOGON_CHECK_RESPONSE// Size=0x4 (Id=2299)
{
    HRESULT hr;// Offset=0x0 Size=0x4
};

struct _XPARTY_USER_INFO// Size=0x78 (Id=2300)
{
    unsigned long long Xuid;// Offset=0x0 Size=0x8
    char GamerTag[16];// Offset=0x8 Size=0x10
    unsigned long dwUserIndex;// Offset=0x18 Size=0x4
    enum XONLINE_NAT_TYPE NatType;// Offset=0x1c Size=0x4
    unsigned long dwTitleId;// Offset=0x20 Size=0x4
    unsigned long dwFlags;// Offset=0x24 Size=0x4
    struct _XSESSION_INFO SessionInfo;// Offset=0x28 Size=0x3c
    unsigned char __align0[4];// Offset=0x64 Size=0x4
    struct _XPARTY_CUSTOM_DATA CustomData;// Offset=0x68 Size=0x10
};

struct _XGD2_GET_TEST_INFO// Size=0xc (Id=2301)
{
    unsigned long HashTableIndexLBA;// Offset=0x0 Size=0x4
    unsigned char BCADescriptor;// Offset=0x4 Size=0x1
    unsigned char Reserved[3];// Offset=0x5 Size=0x3
    unsigned long LastDiscAuthTime;// Offset=0x8 Size=0x4
};

struct _VERIFY_PARENT_CREDIT_CARD_REQUEST// Size=0x94 (Id=2302)
{
    unsigned long long qwMachineId;// Offset=0x0 Size=0x8
    unsigned long dwTitleId;// Offset=0x8 Size=0x4
    struct _PASSPORT_SESSION_TOKEN pParentSessionToken[1];// Offset=0xc Size=0x1c
    unsigned short wParentPassportMemberNameLength;// Offset=0x28 Size=0x2
    char * szParentPassportMemberName;// Offset=0x2a Size=0x4
    unsigned short wLanguageId;// Offset=0x2e Size=0x2
    unsigned char bCountryId;// Offset=0x30 Size=0x1
    unsigned short wFirstNameLength;// Offset=0x31 Size=0x2
    unsigned short * wszFirstName;// Offset=0x33 Size=0x4
    unsigned short wLastNameLength;// Offset=0x37 Size=0x2
    unsigned short * wszLastName;// Offset=0x39 Size=0x4
    unsigned short wEmailLength;// Offset=0x3d Size=0x2
    unsigned short * wszEmail;// Offset=0x3f Size=0x4
    struct _ADDRESS_INFO address;// Offset=0x43 Size=0x24
    struct _PHONE_INFO phone;// Offset=0x67 Size=0x12
    struct _CREDIT_CARD_INFO creditCardInfo;// Offset=0x79 Size=0x1b
};

struct _XCONTENT_DOWNLOAD_GET_INPROGRESS_METADATA// Size=0x17 (Id=2303)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned char * pbContentId;// Offset=0x4 Size=0x4
    unsigned long dwTargetDirectoryLength;// Offset=0x8 Size=0x4
    char * szTargetDirectory;// Offset=0xc Size=0x4
    unsigned char pContentHeader[1];// Offset=0x10 Size=0x1
    unsigned char pContentMetaData[1];// Offset=0x11 Size=0x1
    unsigned char pbOtherMetaData[1];// Offset=0x12 Size=0x1
    unsigned long pdwOtherMetaDataSize[1];// Offset=0x13 Size=0x4
};

struct _SUB_Q_HEADER// Size=0x4 (Id=2304)
{
    unsigned char Reserved;// Offset=0x0 Size=0x1
    unsigned char AudioStatus;// Offset=0x1 Size=0x1
    unsigned char DataLength[2];// Offset=0x2 Size=0x2
};

struct _XSTAT_PROC_PARAM// Size=0x9 (Id=2305)
{
    unsigned char bType;// Offset=0x0 Size=0x1
    union _XSTAT_PROC_DATA Value;// Offset=0x1 Size=0x8
};

struct ID3DXAnimationController// Size=0x4 (Id=2306)
{
    struct ID3DXAnimationControllerVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct XGI_USERSETCONTEXT_MSG// Size=0x18 (Id=2307)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned char __align0[4];// Offset=0x4 Size=0x4
    unsigned long long xuid;// Offset=0x8 Size=0x8
    unsigned long dwContextId;// Offset=0x10 Size=0x4
    unsigned long dwContextValue;// Offset=0x14 Size=0x4
};

union _XONLINE_ATTRIBUTE_DATA// Size=0x8 (Id=2308)
{
    union // Size=0x8 (Id=0)
    {
        unsigned long long integer;// Offset=0x0 Size=0x8
        struct _XONLINE_ATTRIBUTE_STRING string;// Offset=0x0 Size=0x6
        struct _XONLINE_ATTRIBUTE_BLOB blob;// Offset=0x0 Size=0x6
    };
};

struct _DISPATCHER_HEADER// Size=0x10 (Id=2309)
{
    unsigned char Type;// Offset=0x0 Size=0x1
    unsigned char Absolute;// Offset=0x1 Size=0x1
    unsigned char ProcessType;// Offset=0x2 Size=0x1
    unsigned char Inserted;// Offset=0x3 Size=0x1
    long SignalState;// Offset=0x4 Size=0x4
    struct _LIST_ENTRY WaitListHead;// Offset=0x8 Size=0x8
};

struct D3DVertexShader// Size=0x18 (Id=2310)
{
    unsigned long Common;// Offset=0x0 Size=0x4
    unsigned long ReferenceCount;// Offset=0x4 Size=0x4
    unsigned long Fence;// Offset=0x8 Size=0x4
    unsigned long ReadFence;// Offset=0xc Size=0x4
    unsigned long Identifier;// Offset=0x10 Size=0x4
    unsigned long BaseFlush;// Offset=0x14 Size=0x4
};

struct _XNOTIFICATION_SEND_DEQUEUE// Size=0x38 (Id=2311)
{
    struct _Q_DEQUEUE_MSG pDequeueMsg[1];// Offset=0x0 Size=0x34
    struct _Q_LIST_REPLY_MSG * pReply;// Offset=0x34 Size=0x4
};

struct _HV_IMAGE_INFO// Size=0x174 (Id=2312)
{
    unsigned char Signature[256];// Offset=0x0 Size=0x100
    unsigned long InfoSize;// Offset=0x100 Size=0x4
    unsigned long ImageFlags;// Offset=0x104 Size=0x4
    unsigned long LoadAddress;// Offset=0x108 Size=0x4
    unsigned char ImageHash[20];// Offset=0x10c Size=0x14
    unsigned long ImportTableCount;// Offset=0x120 Size=0x4
    unsigned char ImportDigest[20];// Offset=0x124 Size=0x14
    unsigned char MediaID[16];// Offset=0x138 Size=0x10
    unsigned char ImageKey[16];// Offset=0x148 Size=0x10
    unsigned long ExportTableAddress;// Offset=0x158 Size=0x4
    unsigned char HeaderHash[20];// Offset=0x15c Size=0x14
    unsigned long GameRegion;// Offset=0x170 Size=0x4
};

struct _XONLINE_ATTRIBUTE// Size=0xc (Id=2313)
{
    unsigned long dwAttributeID;// Offset=0x0 Size=0x4
    union _XONLINE_ATTRIBUTE_DATA info;// Offset=0x4 Size=0x8
};

struct _XPRESENCE_ALIVE_REPLY// Size=0x4 (Id=2314)
{
    struct _P_ALIVE_REPLY_MSG * pAliveReplies;// Offset=0x0 Size=0x4
};

struct _XCONFIG_MEDIA_CENTER_SETTINGS// Size=0x74c (Id=2315)
{
    unsigned long CheckSum;// Offset=0x0 Size=0x4
    unsigned long Version;// Offset=0x4 Size=0x4
    char MediaPlayer[20];// Offset=0x8 Size=0x14
    unsigned char XeSledVersion[10];// Offset=0x1c Size=0xa
    unsigned char XeSledTrustSecret[20];// Offset=0x26 Size=0x14
    unsigned char XeSledTrustCode[8];// Offset=0x3a Size=0x8
    unsigned char XeSledHostID[20];// Offset=0x42 Size=0x14
    unsigned char XeSledKey[1628];// Offset=0x56 Size=0x65c
    unsigned char XeSledHostMACAddress[6];// Offset=0x6b2 Size=0x6
    char ServerUUID[16];// Offset=0x6b8 Size=0x10
    char ServerName[128];// Offset=0x6c8 Size=0x80
    char ServerFlag[4];// Offset=0x748 Size=0x4
};

struct _XNET_LOGON_CUSTOM_SERVICE_ID_LIST// Size=0x14 (Id=2316)
{
    unsigned long dwSize;// Offset=0x0 Size=0x4
    unsigned long dwCustomServiceIds[4];// Offset=0x4 Size=0x10
};

struct _unnamed_2317// Size=0x10 (Id=2317)
{
    unsigned char Type;// Offset=0x0 Size=0x1
    unsigned char SpinCount;// Offset=0x1 Size=0x1
    unsigned char Size;// Offset=0x2 Size=0x1
    unsigned char Inserted;// Offset=0x3 Size=0x1
    long SignalState;// Offset=0x4 Size=0x4
    struct _LIST_ENTRY WaitListHead;// Offset=0x8 Size=0x8
};

union _unnamed_2318// Size=0x10 (Id=2318)
{
    struct _unnamed_2317 Event;// Offset=0x0 Size=0x10
    unsigned long RawEvent[4];// Offset=0x0 Size=0x10
};

struct _RTL_CRITICAL_SECTION// Size=0x1c (Id=2319)
{
    union _unnamed_2318 Synchronization;// Offset=0x0 Size=0x10
    long LockCount;// Offset=0x10 Size=0x4
    long RecursionCount;// Offset=0x14 Size=0x4
    void * OwningThread;// Offset=0x18 Size=0x4
};

struct _RTL_HEAP_INFORMATION// Size=0x40 (Id=2320)
{
    void * BaseAddress;// Offset=0x0 Size=0x4
    unsigned long Flags;// Offset=0x4 Size=0x4
    unsigned short EntryOverhead;// Offset=0x8 Size=0x2
    unsigned short CreatorBackTraceIndex;// Offset=0xa Size=0x2
    unsigned long BytesAllocated;// Offset=0xc Size=0x4
    unsigned long BytesCommitted;// Offset=0x10 Size=0x4
    unsigned long NumberOfTags;// Offset=0x14 Size=0x4
    unsigned long NumberOfEntries;// Offset=0x18 Size=0x4
    unsigned long NumberOfPseudoTags;// Offset=0x1c Size=0x4
    unsigned long PseudoTagGranularity;// Offset=0x20 Size=0x4
    unsigned long Reserved[5];// Offset=0x24 Size=0x14
    struct _RTL_HEAP_TAG * Tags;// Offset=0x38 Size=0x4
    struct _RTL_HEAP_ENTRY * Entries;// Offset=0x3c Size=0x4
};

struct XVOICE_PACKET_CONTEXT// Size=0x10 (Id=2321)
{
    struct XMEDIAPACKET * Packet;// Offset=0x0 Size=0x4
    struct _KEVENT * Event;// Offset=0x4 Size=0x4
    struct XVOICE_OBJECT * VoiceObject;// Offset=0x8 Size=0x4
    struct XVOICE_PACKET_CONTEXT * Next;// Offset=0xc Size=0x4
};

struct _unnamed_2322// Size=0x10 (Id=2322)
{
    unsigned long Settable;// Offset=0x0 Size=0x4
    unsigned short TagIndex;// Offset=0x4 Size=0x2
    unsigned short AllocatorBackTraceIndex;// Offset=0x6 Size=0x2
    unsigned long Reserved[2];// Offset=0x8 Size=0x8
};

struct _unnamed_2323// Size=0x10 (Id=2323)
{
    unsigned long CommittedSize;// Offset=0x0 Size=0x4
    unsigned long UnCommittedSize;// Offset=0x4 Size=0x4
    void * FirstEntry;// Offset=0x8 Size=0x4
    void * LastEntry;// Offset=0xc Size=0x4
};

struct _RTL_HEAP_WALK_ENTRY// Size=0x1c (Id=2324)
{
    void * DataAddress;// Offset=0x0 Size=0x4
    unsigned long DataSize;// Offset=0x4 Size=0x4
    unsigned char OverheadBytes;// Offset=0x8 Size=0x1
    unsigned char SegmentIndex;// Offset=0x9 Size=0x1
    unsigned short Flags;// Offset=0xa Size=0x2
    union // Size=0x10 (Id=0)
    {
        struct _unnamed_2322 Block;// Offset=0xc Size=0x10
        struct _unnamed_2323 Segment;// Offset=0xc Size=0x10
    };
};

struct _XPARTY_LEAVE_PARAMS// Size=0x4 (Id=2325)
{
    unsigned long Unused;// Offset=0x0 Size=0x4
};

struct _XEX_EXECUTION_ID// Size=0x18 (Id=2326)
{
    unsigned long MediaID;// Offset=0x0 Size=0x4
    unsigned long Version;// Offset=0x4 Size=0x4
    unsigned long BaseVersion;// Offset=0x8 Size=0x4
    union // Size=0x10 (Id=0)
    {
        unsigned short PublisherID;// Offset=0xc Size=0x2
        unsigned short GameID;// Offset=0xe Size=0x2
        unsigned long TitleID;// Offset=0xc Size=0x4
    };
    unsigned char Platform;// Offset=0x10 Size=0x1
    unsigned char ExecutableType;// Offset=0x11 Size=0x1
    unsigned char DiscNum;// Offset=0x12 Size=0x1
    unsigned char DiscsInSet;// Offset=0x13 Size=0x1
    unsigned long SaveGameID;// Offset=0x14 Size=0x4
};

struct _XUSAGE_STORE_REQUEST// Size=0xc (Id=2327)
{
    unsigned long dwXMLSize;// Offset=0x0 Size=0x4
    unsigned short * wszXML;// Offset=0x4 Size=0x4
    struct _XUSAGE_STORE_RESULT * pResult;// Offset=0x8 Size=0x4
};

struct _XMSG_DESTROY// Size=0x4 (Id=2328)
{
    void * hMsg;// Offset=0x0 Size=0x4
};

struct _XARB_REPORT_REQUEST// Size=0x28 (Id=2329)
{
    unsigned short wProtocolVersion;// Offset=0x0 Size=0x2
    unsigned short wFlags;// Offset=0x2 Size=0x2
    unsigned long dwTitleID;// Offset=0x4 Size=0x4
    unsigned long long qwSessionID;// Offset=0x8 Size=0x8
    unsigned long long qwSessionNonce;// Offset=0x10 Size=0x8
    struct _XARB_REPORT_LOST_MACHINES * pLostMachines;// Offset=0x18 Size=0x4
    struct _XARB_REPORT_SUSPICIOUS_INFO * pSuspiciousInfo;// Offset=0x1c Size=0x4
    struct _XARB_REPORT_STATS_BUNDLE * pStatsBundle;// Offset=0x20 Size=0x4
    struct _XARB_REPORT_BYTE_BUNDLE * pCompsBundle;// Offset=0x24 Size=0x4
};

struct _P_GET_EXTENDED_STATE_RESPONSE// Size=0x2a (Id=2330)
{
    unsigned char pbInternal[32];// Offset=0x0 Size=0x20
    HRESULT hr;// Offset=0x20 Size=0x4
    unsigned short cbExtendedState;// Offset=0x24 Size=0x2
    unsigned char * pbExtendedState;// Offset=0x26 Size=0x4
};

struct _XMATCH_DEAD_SG// Size=0x18 (Id=2331)
{
    unsigned long dwMessageLength;// Offset=0x0 Size=0x4
    struct _SGADDR sgaddr;// Offset=0x4 Size=0x14
};

struct _P_DEAD_USER_MSG_INTERNAL// Size=0x28 (Id=2332)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwUserID;// Offset=0x20 Size=0x8
};

struct _XSIGNATURE_CONTENT_TUPLE// Size=0x49 (Id=2333)
{
    unsigned long dwTitleId;// Offset=0x0 Size=0x4
    unsigned long dwTitleVersion;// Offset=0x4 Size=0x4
    unsigned long long qwConsolePuid;// Offset=0x8 Size=0x8
    unsigned char pConsoleId[5];// Offset=0x10 Size=0x5
    unsigned long long pUserPuids[4];// Offset=0x15 Size=0x20
    unsigned char pDigest[20];// Offset=0x35 Size=0x14
};

struct D3DVolumeTexture// Size=0x34 (Id=2334)
{
    unsigned long Common;// Offset=0x0 Size=0x4
    unsigned long ReferenceCount;// Offset=0x4 Size=0x4
    unsigned long Fence;// Offset=0x8 Size=0x4
    unsigned long ReadFence;// Offset=0xc Size=0x4
    unsigned long Identifier;// Offset=0x10 Size=0x4
    unsigned long BaseFlush;// Offset=0x14 Size=0x4
    unsigned long MipFlush;// Offset=0x18 Size=0x4
    union GPUTEXTURE_FETCH_CONSTANT Format;// Offset=0x1c Size=0x18
};

struct DM_XAM_SERVICES_1888// Size=0x8 (Id=2335)
{
    unsigned long Size;// Offset=0x0 Size=0x4
    void  ( * RebootTitle)(unsigned long );// Offset=0x4 Size=0x4
};

struct _CERTIFICATE_LOG_ENTRY// Size=0x10 (Id=2336)
{
    union // Size=0x5 (Id=0)
    {
        unsigned char ConsoleId[5];// Offset=0x0 Size=0x5
        unsigned long long ConsoleIdAsULONGLONG;// Offset=0x0 Size=0x8
    };
    unsigned long Count;// Offset=0x8 Size=0x4
    unsigned long Reserved;// Offset=0xc Size=0x4
};

struct _AP21_MEASUREMENT_INPUT// Size=0x8 (Id=2337)
{
    unsigned long LogicalBlockAddress[2];// Offset=0x0 Size=0x8
};

struct _XSYSLOADOUTPUT// Size=0x4 (Id=2338)
{
    unsigned long cbPersist;// Offset=0x0 Size=0x4
};

struct _STRING_VERIFY_2_REQUEST// Size=0x18 (Id=2339)
{
    unsigned long dwTitleID;// Offset=0x0 Size=0x4
    unsigned long dwFlags;// Offset=0x4 Size=0x4
    unsigned short wLocaleLen;// Offset=0x8 Size=0x2
    unsigned short wNumStrings;// Offset=0xa Size=0x2
    char * szLocale;// Offset=0xc Size=0x4
    struct _STRING_DATA * pStringData;// Offset=0x10 Size=0x4
    struct _STRING_VERIFY_RESPONSE * pResults;// Offset=0x14 Size=0x4
};

struct _PASSPORT_GET_MEMBER_NAME_RESPONSE// Size=0x12 (Id=2340)
{
    unsigned short wUserPmnLength;// Offset=0x0 Size=0x2
    unsigned short * wszUserPmn;// Offset=0x2 Size=0x4
    unsigned short wParentPmnLength;// Offset=0x6 Size=0x2
    unsigned short * wszParentPmn;// Offset=0x8 Size=0x4
    unsigned short wCidLength;// Offset=0xc Size=0x2
    unsigned short * wszCid;// Offset=0xe Size=0x4
};

struct _VERIFY_INFORMATION// Size=0x10 (Id=2341)
{
    union _LARGE_INTEGER StartingOffset;// Offset=0x0 Size=0x8
    unsigned long Length;// Offset=0x8 Size=0x4
};

struct _XEX_TLS_DATA// Size=0x10 (Id=2342)
{
    unsigned long TlsSlotCount;// Offset=0x0 Size=0x4
    void * AddressOfRawData;// Offset=0x4 Size=0x4
    unsigned long SizeOfRawData;// Offset=0x8 Size=0x4
    unsigned long SizeOfTlsData;// Offset=0xc Size=0x4
};

struct _XPRESENCE_SEND_DEAD_USER// Size=0x4 (Id=2343)
{
    struct _P_DEAD_USER_MSG * pDeadUsers;// Offset=0x0 Size=0x4
};

struct _PHONE_INFO// Size=0x12 (Id=2344)
{
    unsigned short wPhonePrefixLength;// Offset=0x0 Size=0x2
    unsigned short * wszPhonePrefix;// Offset=0x2 Size=0x4
    unsigned short wPhoneNumberLength;// Offset=0x6 Size=0x2
    unsigned short * wszPhoneNumber;// Offset=0x8 Size=0x4
    unsigned short wPhoneExtensionLength;// Offset=0xc Size=0x2
    unsigned short * wszPhoneExtension;// Offset=0xe Size=0x4
};

struct XECRYPT_HMACSHA_STATE// Size=0xb0 (Id=2345)
{
    struct XECRYPT_SHA_STATE ShaState[2];// Offset=0x0 Size=0xb0
};

struct _DMALTINI// Size=0xc (Id=2346)
{
    union // Size=0x4 (Id=0)
    {
        void * FileHandle;// Offset=0x0 Size=0x4
        void * Buffer;// Offset=0x0 Size=0x4
    };
    unsigned long FileSize;// Offset=0x4 Size=0x4
    unsigned char AlignedWrites;// Offset=0x8 Size=0x1
};

struct _XPARTY_GET_USER_LIST_INTERNAL_PARAMS// Size=0x4 (Id=2347)
{
    struct _XPARTY_USER_LIST_INTERNAL * pUserList;// Offset=0x0 Size=0x4
};

struct _P_PEER_SUBSCRIBE_MSG// Size=0x32 (Id=2348)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwUserID;// Offset=0x20 Size=0x8
    unsigned short cSrcUserIDs;// Offset=0x28 Size=0x2
    unsigned long long * rgqwSrcUserIDs;// Offset=0x2a Size=0x4
    struct _P_PEER_SUBSCRIBE_REPLY_MSG * pResults;// Offset=0x2e Size=0x4
};

struct _XMSG_INVITE_SEND_MESSAGE_PARAMS// Size=0x18 (Id=2349)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long dwNumInvitees;// Offset=0x4 Size=0x4
    unsigned long long * pXuidInvitees;// Offset=0x8 Size=0x4
    unsigned long cchText;// Offset=0xc Size=0x4
    unsigned short * pszText;// Offset=0x10 Size=0x4
    void * hMsg;// Offset=0x14 Size=0x4
};

struct _XPERSISTENTMEMBUFFER// Size=0x8 (Id=2350)
{
    void * pvBuffer;// Offset=0x0 Size=0x4
    unsigned long dwBufferSize;// Offset=0x4 Size=0x4
};

struct _numberfmtA// Size=0x18 (Id=2351)
{
    unsigned int NumDigits;// Offset=0x0 Size=0x4
    unsigned int LeadingZero;// Offset=0x4 Size=0x4
    unsigned int Grouping;// Offset=0x8 Size=0x4
    char * lpDecimalSep;// Offset=0xc Size=0x4
    char * lpThousandSep;// Offset=0x10 Size=0x4
    unsigned int NegativeOrder;// Offset=0x14 Size=0x4
};

struct _P_TEAM_MANAGE_MEMBER_MSG// Size=0x46 (Id=2352)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwUserID;// Offset=0x20 Size=0x8
    unsigned long dwTitleID;// Offset=0x28 Size=0x4
    unsigned long long qwTeamID;// Offset=0x2c Size=0x8
    unsigned long long qwMemberID;// Offset=0x34 Size=0x8
    unsigned long dwMemberPriv;// Offset=0x3c Size=0x4
    unsigned short cbMemberData;// Offset=0x40 Size=0x2
    unsigned char * pbMemberData;// Offset=0x42 Size=0x4
};

struct _FB_AGGREGATE_REVIEW// Size=0x10 (Id=2353)
{
    unsigned long long qwTargetID;// Offset=0x0 Size=0x8
    unsigned long dwCount;// Offset=0x8 Size=0x4
    unsigned long dwType;// Offset=0xc Size=0x4
};

struct _STRING_LOOKUP_2_REQUEST// Size=0x14 (Id=2354)
{
    unsigned long dwTitleID;// Offset=0x0 Size=0x4
    unsigned short wNumStrings;// Offset=0x4 Size=0x2
    unsigned short wLocaleLen;// Offset=0x6 Size=0x2
    char * szLocale;// Offset=0x8 Size=0x4
    unsigned long * pStringIDs;// Offset=0xc Size=0x4
    struct _STRING_LOOKUP_RESPONSE * pResults;// Offset=0x10 Size=0x4
};

struct _XSHOWFEEDBACKUI_PARAMS// Size=0x18 (Id=2355)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned char __align0[4];// Offset=0x4 Size=0x4
    unsigned long long _xuidFeedbackTarget;// Offset=0x8 Size=0x8
    unsigned long _dEntryPoint;// Offset=0x10 Size=0x4
};

struct _XAMPLAYTIMERDATA// Size=0x14 (Id=2356)
{
    struct _FILETIME ftResetDate;// Offset=0x0 Size=0x8
    unsigned long dwPlayTimerFrequency;// Offset=0x8 Size=0x4
    unsigned long dwTotalPlayTime;// Offset=0xc Size=0x4
    unsigned long dwRemainingPlayTime;// Offset=0x10 Size=0x4
};

struct _XEX_DELTA_PATCH_DESCRIPTOR// Size=0x4c (Id=2357)
{
    unsigned long Size;// Offset=0x0 Size=0x4
    unsigned long TargetVersion;// Offset=0x4 Size=0x4
    unsigned long SourceVersion;// Offset=0x8 Size=0x4
    unsigned char DigestSource[20];// Offset=0xc Size=0x14
    unsigned char ImageKeySource[16];// Offset=0x20 Size=0x10
    unsigned long SizeOfTargetHeaders;// Offset=0x30 Size=0x4
    unsigned long DeltaHeadersSourceOffset;// Offset=0x34 Size=0x4
    unsigned long DeltaHeadersSourceSize;// Offset=0x38 Size=0x4
    unsigned long DeltaHeadersTargetOffset;// Offset=0x3c Size=0x4
    unsigned long DeltaImageSourceOffset;// Offset=0x40 Size=0x4
    unsigned long DeltaImageSourceSize;// Offset=0x44 Size=0x4
    unsigned long DeltaImageTargetOffset;// Offset=0x48 Size=0x4
};

struct _XMUHENDN3// Size=0x4 (Id=2358)
{
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            unsigned int x:11;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xb
            unsigned int y:11;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0xb
            unsigned int z:10;// Offset=0x0 Size=0x4 BitOffset=0x16 BitSize=0xa
        };
        unsigned int v;// Offset=0x0 Size=0x4
    };
};

struct _INSTRUMENTATION_UPLOAD_REQUEST// Size=0x6 (Id=2359)
{
    unsigned short wLogLinesLen;// Offset=0x0 Size=0x2
    char * szLogLines;// Offset=0x2 Size=0x4
};

struct _EntryBaseData// Size=0x1c (Id=2360)
{
    unsigned short * pwszName;// Offset=0x0 Size=0x4
    enum ActionType eType;// Offset=0x4 Size=0x4
    unsigned short * pwszParam;// Offset=0x8 Size=0x4
    unsigned short * pwszParam2;// Offset=0xc Size=0x4
    unsigned short * pwszParam3;// Offset=0x10 Size=0x4
    unsigned short * pwszParam4;// Offset=0x14 Size=0x4
    unsigned short * pwszParam5;// Offset=0x18 Size=0x4
};

struct _XONLINE_MATCH_SEARCHRESULT// Size=0x5c (Id=2361)
{
    unsigned long dwReserved;// Offset=0x0 Size=0x4
    struct XNKID SessionID;// Offset=0x4 Size=0x8
    struct XNADDR HostAddress;// Offset=0xc Size=0x24
    struct XNKEY KeyExchangeKey;// Offset=0x30 Size=0x10
    unsigned long dwPublicOpen;// Offset=0x40 Size=0x4
    unsigned long dwPrivateOpen;// Offset=0x44 Size=0x4
    unsigned long dwPublicFilled;// Offset=0x48 Size=0x4
    unsigned long dwPrivateFilled;// Offset=0x4c Size=0x4
    unsigned long dwNumAttributes;// Offset=0x50 Size=0x4
    unsigned long * pAttributeOffsets;// Offset=0x54 Size=0x4
    struct _XONLINE_ATTRIBUTE * pAttributes;// Offset=0x58 Size=0x4
};

struct XECRYPT_RSAPRV_1536// Size=0x2b0 (Id=2362)
{
    struct XECRYPT_RSA Rsa;// Offset=0x0 Size=0x10
    unsigned long long aqwM[24];// Offset=0x10 Size=0xc0
    unsigned long long aqwP[12];// Offset=0xd0 Size=0x60
    unsigned long long aqwQ[12];// Offset=0x130 Size=0x60
    unsigned long long aqwDP[12];// Offset=0x190 Size=0x60
    unsigned long long aqwDQ[12];// Offset=0x1f0 Size=0x60
    unsigned long long aqwCR[12];// Offset=0x250 Size=0x60
};

struct _XONLINECONTENT_RESUME_HEADER// Size=0x20 (Id=2363)
{
    enum _XONLINECONTENT_RESUME_STATE ResumeState;// Offset=0x0 Size=0x4
    unsigned long dwCurrentFileIndex;// Offset=0x4 Size=0x4
    union _LARGE_INTEGER liCurrentFileOffset;// Offset=0x8 Size=0x8
    union _LARGE_INTEGER liBytesProcessed;// Offset=0x10 Size=0x8
    union _LARGE_INTEGER liLastModified;// Offset=0x18 Size=0x8
};

struct _XPROFILE_SYNC_ACHIEVEMENTS_RESULT// Size=0x10 (Id=2364)
{
    struct _FILETIME ftVersion;// Offset=0x0 Size=0x8
    unsigned short wTotalAchievements;// Offset=0x8 Size=0x2
    unsigned short wAchievementCount;// Offset=0xa Size=0x2
    struct _XPROFILE_ACHIEVEMENT * pAchievements;// Offset=0xc Size=0x4
};

struct _DM_ODD_MOUNT_DATA// Size=0x8 (Id=2365)
{
    unsigned long RootDirStartSector;// Offset=0x0 Size=0x4
    unsigned long RootDirSize;// Offset=0x4 Size=0x4
};

struct _cpinfo// Size=0x14 (Id=2366)
{
    unsigned int MaxCharSize;// Offset=0x0 Size=0x4
    unsigned char DefaultChar[2];// Offset=0x4 Size=0x2
    unsigned char LeadByte[12];// Offset=0x6 Size=0xc
};

struct _USER_ACCOUNT_INFO// Size=0x2c (Id=2367)
{
    struct _USER_XNAME xname;// Offset=0x0 Size=0x20
    unsigned char rgbPasscode[4];// Offset=0x20 Size=0x4
    struct _FILETIME ftBirthdate;// Offset=0x24 Size=0x8
};

struct D3DCubeTexture// Size=0x34 (Id=2368)
{
    unsigned long Common;// Offset=0x0 Size=0x4
    unsigned long ReferenceCount;// Offset=0x4 Size=0x4
    unsigned long Fence;// Offset=0x8 Size=0x4
    unsigned long ReadFence;// Offset=0xc Size=0x4
    unsigned long Identifier;// Offset=0x10 Size=0x4
    unsigned long BaseFlush;// Offset=0x14 Size=0x4
    unsigned long MipFlush;// Offset=0x18 Size=0x4
    union GPUTEXTURE_FETCH_CONSTANT Format;// Offset=0x1c Size=0x18
};

struct _KTRAP_FRAME// Size=0x1c0 (Id=2369)
{
    struct _STACK_FRAME_HEADER Header;// Offset=0x0 Size=0x50
    unsigned long long Gpr0;// Offset=0x50 Size=0x8
    unsigned long long Gpr1;// Offset=0x58 Size=0x8
    unsigned long long Gpr2;// Offset=0x60 Size=0x8
    unsigned long long Gpr3;// Offset=0x68 Size=0x8
    unsigned long long Gpr4;// Offset=0x70 Size=0x8
    unsigned long long Gpr5;// Offset=0x78 Size=0x8
    unsigned long long Gpr6;// Offset=0x80 Size=0x8
    unsigned long long Gpr7;// Offset=0x88 Size=0x8
    unsigned long long Gpr8;// Offset=0x90 Size=0x8
    unsigned long long Gpr9;// Offset=0x98 Size=0x8
    unsigned long long Gpr10;// Offset=0xa0 Size=0x8
    unsigned long long Gpr11;// Offset=0xa8 Size=0x8
    unsigned long long Gpr12;// Offset=0xb0 Size=0x8
    unsigned long long Gpr13;// Offset=0xb8 Size=0x8
    unsigned long long Gpr14;// Offset=0xc0 Size=0x8
    unsigned long long Gpr15;// Offset=0xc8 Size=0x8
    unsigned long long Gpr16;// Offset=0xd0 Size=0x8
    unsigned long long Gpr17;// Offset=0xd8 Size=0x8
    unsigned long long Gpr18;// Offset=0xe0 Size=0x8
    unsigned long long Gpr19;// Offset=0xe8 Size=0x8
    unsigned long long Gpr20;// Offset=0xf0 Size=0x8
    unsigned long long Gpr21;// Offset=0xf8 Size=0x8
    unsigned long long Gpr22;// Offset=0x100 Size=0x8
    unsigned long long Gpr23;// Offset=0x108 Size=0x8
    unsigned long long Gpr24;// Offset=0x110 Size=0x8
    unsigned long long Gpr25;// Offset=0x118 Size=0x8
    unsigned long long Gpr26;// Offset=0x120 Size=0x8
    unsigned long long Gpr27;// Offset=0x128 Size=0x8
    unsigned long long Gpr28;// Offset=0x130 Size=0x8
    unsigned long long Gpr29;// Offset=0x138 Size=0x8
    unsigned long long Gpr30;// Offset=0x140 Size=0x8
    unsigned long long Gpr31;// Offset=0x148 Size=0x8
    union // Size=0x50 (Id=0)
    {
        unsigned char ExceptionRecord[80];// Offset=0x150 Size=0x50
        unsigned char OldIrql;// Offset=0x150 Size=0x1
    };
    unsigned char __align0[3];// Offset=0x151 Size=0x3
    struct _KINTERRUPT * InterruptObject;// Offset=0x154 Size=0x4
    unsigned char InterruptIrql;// Offset=0x158 Size=0x1
    unsigned char __align1[71];// Offset=0x159 Size=0x47
    unsigned long long Ctr;// Offset=0x1a0 Size=0x8
    unsigned long Lr;// Offset=0x1a8 Size=0x4
    unsigned long Iar;// Offset=0x1ac Size=0x4
    unsigned long Cr;// Offset=0x1b0 Size=0x4
    unsigned long Msr;// Offset=0x1b4 Size=0x4
    unsigned long Xer;// Offset=0x1b8 Size=0x4
    unsigned long UserModeControl;// Offset=0x1bc Size=0x4
};

struct _DM_GET_INPUT_STATE// Size=0xc (Id=2370)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    void * pXInputState;// Offset=0x4 Size=0x4
    unsigned long * pStatus;// Offset=0x8 Size=0x4
};

struct _PASSPORT_GET_SECRET_QUESTIONS_REQUEST// Size=0x8 (Id=2371)
{
    unsigned short wCountryId;// Offset=0x0 Size=0x2
    unsigned short wLanguageId;// Offset=0x2 Size=0x2
    struct _PASSPORT_GET_SECRET_QUESTION_RESPONSE * pResult;// Offset=0x4 Size=0x4
};

struct _DM_HID_KEYBOARD_DATA// Size=0x8 (Id=2372)
{
    unsigned char bModifiers;// Offset=0x0 Size=0x1
    unsigned char bReserved;// Offset=0x1 Size=0x1
    unsigned char bKeys[6];// Offset=0x2 Size=0x6
};

struct _GENERIC_LIST_DELETE_ITEMS_REQUEST// Size=0x22 (Id=2373)
{
    unsigned long long xUserId;// Offset=0x0 Size=0x8
    unsigned long nListType;// Offset=0x8 Size=0x4
    unsigned long nListId;// Offset=0xc Size=0x4
    struct _FILETIME ftLastModified;// Offset=0x10 Size=0x8
    unsigned short wNumIds;// Offset=0x18 Size=0x2
    struct _GUID * pItemIds;// Offset=0x1a Size=0x4
    struct _GENERIC_LIST_DELETE_ITEMS_RESPONSE * pResponse;// Offset=0x1e Size=0x4
};

struct XMVECTORI32// Size=0x10 (Id=2374)
{
    union // Size=0x10 (Id=0)
    {
        int i[4];// Offset=0x0 Size=0x10
        struct __vector4 v;// Offset=0x0 Size=0x10
    };
};

struct _GET_ACCOUNT_INFO_RESPONSE// Size=0x56 (Id=2375)
{
    unsigned short wFirstNameLength;// Offset=0x0 Size=0x2
    unsigned short * wszFirstName;// Offset=0x2 Size=0x4
    unsigned short wLastNameLength;// Offset=0x6 Size=0x2
    unsigned short * wszLastName;// Offset=0x8 Size=0x4
    struct _FILETIME ftBirthdate;// Offset=0xc Size=0x8
    unsigned short wEmailLength;// Offset=0x14 Size=0x2
    unsigned short * wszEmail;// Offset=0x16 Size=0x4
    struct _ADDRESS_INFO addressInfo;// Offset=0x1a Size=0x24
    struct _PHONE_INFO phoneInfo;// Offset=0x3e Size=0x12
    unsigned short wLanguageId;// Offset=0x50 Size=0x2
    unsigned char bCountryId;// Offset=0x52 Size=0x1
    unsigned char bMsftOptIn;// Offset=0x53 Size=0x1
    unsigned char bParterOptIn;// Offset=0x54 Size=0x1
    unsigned char bIsLightWeight;// Offset=0x55 Size=0x1
};

union _XSTAT_PROC_DATA// Size=0x8 (Id=2376)
{
    unsigned char bNull;// Offset=0x0 Size=0x1
    unsigned char bData;// Offset=0x0 Size=0x1
    short sData;// Offset=0x0 Size=0x2
    long nData;// Offset=0x0 Size=0x4
    long long i64Data;// Offset=0x0 Size=0x8
    float dblData;// Offset=0x0 Size=0x8
    unsigned long long qwPuid;// Offset=0x0 Size=0x8
};

struct _XPARTY_BROADCAST_MESSAGE_HEADER// Size=0x1 (Id=2377)
{
    unsigned char source;// Offset=0x0 Size=0x1
};

struct _unnamed_2378// Size=0x8 (Id=2378)
{
    void  ( * UserApcRoutine)(void * ,struct _IO_STATUS_BLOCK * ,unsigned long );// Offset=0x0 Size=0x4
    void * UserApcContext;// Offset=0x4 Size=0x4
};

union _unnamed_2379// Size=0x8 (Id=2379)
{
    struct _unnamed_2378 AsynchronousParameters;// Offset=0x0 Size=0x8
    union _LARGE_INTEGER AllocationSize;// Offset=0x0 Size=0x8
};

struct _unnamed_2380// Size=0x28 (Id=2380)
{
    union // Size=0x10 (Id=0)
    {
        struct _KDEVICE_QUEUE_ENTRY DeviceQueueEntry;// Offset=0x0 Size=0x10
        struct _LIST_ENTRY DeviceListEntry;// Offset=0x0 Size=0x8
        void * DriverContext[4];// Offset=0x0 Size=0x10
    };
    unsigned long LockedBufferLength;// Offset=0x10 Size=0x4
    struct _KTHREAD * Thread;// Offset=0x14 Size=0x4
    struct _LIST_ENTRY ListEntry;// Offset=0x18 Size=0x8
    union // Size=0x4 (Id=0)
    {
        struct _IO_STACK_LOCATION * CurrentStackLocation;// Offset=0x20 Size=0x4
        unsigned long PacketType;// Offset=0x20 Size=0x4
    };
    struct _FILE_OBJECT * OriginalFileObject;// Offset=0x24 Size=0x4
};

union _unnamed_2381// Size=0x28 (Id=2381)
{
    union // Size=0x28 (Id=0)
    {
        struct _unnamed_2380 Overlay;// Offset=0x0 Size=0x28
        struct _KAPC Apc;// Offset=0x0 Size=0x28
        void * CompletionKey;// Offset=0x0 Size=0x4
    };
};

struct _IRP// Size=0x60 (Id=2382)
{
    short Type;// Offset=0x0 Size=0x2
    unsigned short Size;// Offset=0x2 Size=0x2
    unsigned long Flags;// Offset=0x4 Size=0x4
    struct _LIST_ENTRY ThreadListEntry;// Offset=0x8 Size=0x8
    struct _IO_STATUS_BLOCK IoStatus;// Offset=0x10 Size=0x8
    char StackCount;// Offset=0x18 Size=0x1
    char CurrentLocation;// Offset=0x19 Size=0x1
    unsigned char PendingReturned;// Offset=0x1a Size=0x1
    unsigned char Cancel;// Offset=0x1b Size=0x1
    void * UserBuffer;// Offset=0x1c Size=0x4
    struct _IO_STATUS_BLOCK * UserIosb;// Offset=0x20 Size=0x4
    struct _KEVENT * UserEvent;// Offset=0x24 Size=0x4
    union _unnamed_2379 Overlay;// Offset=0x28 Size=0x8
    union _unnamed_2381 Tail;// Offset=0x30 Size=0x28
    void  ( * CancelRoutine)(struct _DEVICE_OBJECT * ,struct _IRP * );// Offset=0x58 Size=0x4
};

struct _GENERIC_LIST_INSERT_ITEMS_RESPONSE// Size=0x8 (Id=2383)
{
    struct _FILETIME ftLastModified;// Offset=0x0 Size=0x8
};

struct _LSP_ENUMERATE_SERVER_INFO// Size=0x10 (Id=2384)
{
    unsigned long dwIpSgLsp;// Offset=0x0 Size=0x4
    unsigned long dwFlags;// Offset=0x4 Size=0x4
    unsigned long dwServerInfoLength;// Offset=0x8 Size=0x4
    char * szServerInfo;// Offset=0xc Size=0x4
};

struct _TEAM_ENUM_BY_XUID_RESULTS// Size=0x8 (Id=2385)
{
    unsigned long cTeams;// Offset=0x0 Size=0x4
    struct _XONLINE_USER_TEAM * rgsTeams;// Offset=0x4 Size=0x4
};

struct _GET_PAYMENT_INSTRUMENTS_REQUEST// Size=0x16 (Id=2386)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned long long qwMachineId;// Offset=0x8 Size=0x8
    unsigned short wMaxResults;// Offset=0x10 Size=0x2
    struct _GET_PAYMENT_INSTRUMENTS_RESPONSE * pResponse;// Offset=0x12 Size=0x4
};

struct _XONLINE_STATS_VIEW// Size=0x14 (Id=2387)
{
    unsigned long long qwViewId;// Offset=0x0 Size=0x8
    unsigned long dwViewSize;// Offset=0x8 Size=0x4
    unsigned long dwRowCount;// Offset=0xc Size=0x4
    struct _XONLINE_STATS_ROW * pRows;// Offset=0x10 Size=0x4
};

struct _P_SET_EXTENDED_STATE_REQUEST// Size=0x32 (Id=2388)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwUserId;// Offset=0x20 Size=0x8
    unsigned short cbExtendedState;// Offset=0x28 Size=0x2
    unsigned char * pbExtendedState;// Offset=0x2a Size=0x4
    struct _P_SET_EXTENDED_STATE_RESPONSE * pResults;// Offset=0x2e Size=0x4
};

struct _XPARTY_CUSTOM_DATA// Size=0x10 (Id=2389)
{
    unsigned long long qwFirst;// Offset=0x0 Size=0x8
    unsigned long long qwSecond;// Offset=0x8 Size=0x8
};

struct _PASSPORT_GET_ENCRYPTED_PROXY_PARAMETERS_REQUEST// Size=0x8 (Id=2390)
{
    unsigned long dwServiceId;// Offset=0x0 Size=0x4
    struct _PASSPORT_ENCRYPTED_PROXY_PARAMETERS * pResponse;// Offset=0x4 Size=0x4
};

struct _XEX_IMPORT_DESCRIPTOR// Size=0xc (Id=2391)
{
    unsigned long Size;// Offset=0x0 Size=0x4
    unsigned long NameTableSize;// Offset=0x4 Size=0x4
    unsigned long ModuleCount;// Offset=0x8 Size=0x4
};

struct _XEXIMAGE_LIBRARY_VERSION// Size=0x10 (Id=2392)
{
    unsigned char LibraryName[8];// Offset=0x0 Size=0x8
    unsigned short MajorVersion;// Offset=0x8 Size=0x2
    unsigned short MinorVersion;// Offset=0xa Size=0x2
    unsigned short BuildVersion;// Offset=0xc Size=0x2
    struct // Size=0x2 (Id=0)
    {
        unsigned short QFEVersion:8;// Offset=0xe Size=0x2 BitOffset=0x0 BitSize=0x8
        unsigned short Unused1:2;// Offset=0xe Size=0x2 BitOffset=0x8 BitSize=0x2
        unsigned short ToolVersion:1;// Offset=0xe Size=0x2 BitOffset=0xa BitSize=0x1
        unsigned short Unused2:1;// Offset=0xe Size=0x2 BitOffset=0xb BitSize=0x1
        unsigned short XEXVersion:1;// Offset=0xe Size=0x2 BitOffset=0xc BitSize=0x1
        unsigned short ApprovedLibrary:2;// Offset=0xe Size=0x2 BitOffset=0xd BitSize=0x2
        unsigned short DebugBuild:1;// Offset=0xe Size=0x2 BitOffset=0xf BitSize=0x1
    };
};

struct _P_IS_AFFILIATE_MSG// Size=0x34 (Id=2393)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwUserID;// Offset=0x20 Size=0x8
    unsigned long long qwAffiliateID;// Offset=0x28 Size=0x8
    struct _P_IS_AFFILIATE_REPLY_MSG * pReply;// Offset=0x30 Size=0x4
};

struct _XMSG_SEND_PARAMS// Size=0x18 (Id=2394)
{
    unsigned long long XuidSender;// Offset=0x0 Size=0x8
    void * hMsg;// Offset=0x8 Size=0x4
    unsigned long cRecipients;// Offset=0xc Size=0x4
    unsigned long long * pXuidRecipients;// Offset=0x10 Size=0x4
    struct _XMSG_SEND_RESULT * pResults;// Offset=0x14 Size=0x4
};

struct _P_LIST_CHANGE_ITEM// Size=0x18 (Id=2395)
{
    unsigned long dwListVersion;// Offset=0x0 Size=0x4
    unsigned long long qwTargetID;// Offset=0x4 Size=0x8
    unsigned short wOperationID;// Offset=0xc Size=0x2
    HRESULT hr;// Offset=0xe Size=0x4
    unsigned short cbTargetAcctName;// Offset=0x12 Size=0x2
    char * szTargetAcctName;// Offset=0x14 Size=0x4
};

struct _GENERIC_LIST_QUERY_ITEMS_RESPONSE// Size=0x10 (Id=2396)
{
    unsigned short wTotalItems;// Offset=0x0 Size=0x2
    struct _FILETIME ftLastModified;// Offset=0x2 Size=0x8
    unsigned short wNumItems;// Offset=0xa Size=0x2
    struct _GENERIC_LIST_ITEM * pItems;// Offset=0xc Size=0x4
};

struct _XSTORAGE_DOWNLOAD_TO_MEMORY_PARAMS// Size=0x18 (Id=2397)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long dwServerPathLength;// Offset=0x4 Size=0x4
    unsigned short * wszServerPath;// Offset=0x8 Size=0x4
    unsigned long dwBufferSize;// Offset=0xc Size=0x4
    unsigned long dwBufferPointer;// Offset=0x10 Size=0x4
    struct _XSTORAGE_DOWNLOAD_TO_MEMORY_RESULTS * pResults;// Offset=0x14 Size=0x4
};

struct _Q_MESSAGE_SUMMARY_REPLY_MSG// Size=0x5c (Id=2398)
{
    struct _Q_MESSAGE_SUMMARY_2 summary;// Offset=0x0 Size=0x5c
};

struct _XARB_TIMEEXTEND_REQUEST// Size=0x1a (Id=2399)
{
    unsigned short wProtocolVersion;// Offset=0x0 Size=0x2
    unsigned short wRequestFlags;// Offset=0x2 Size=0x2
    unsigned long dwTitleID;// Offset=0x4 Size=0x4
    unsigned long long qwSessionID;// Offset=0x8 Size=0x8
    unsigned long long qwSessionNonce;// Offset=0x10 Size=0x8
    unsigned short wMaxSessionSecondsFromNow;// Offset=0x18 Size=0x2
};

struct _DM_SWAPDISC_COMPLETE// Size=0x4 (Id=2400)
{
    unsigned long Code;// Offset=0x0 Size=0x4
};

struct _REMOVE_PAYMENT_INSTRUMENT_REQUEST// Size=0x16 (Id=2401)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned long long qwMachineId;// Offset=0x8 Size=0x8
    unsigned short wPaymentInstrumentIdLength;// Offset=0x10 Size=0x2
    unsigned short * wszPaymentInstrumentId;// Offset=0x12 Size=0x4
};

struct _unnamed_2402// Size=0x34 (Id=2402)
{
    unsigned long dwLanguageId;// Offset=0x0 Size=0x4
    wchar_t wszActionText[23];// Offset=0x4 Size=0x2e
    unsigned short wReserved;// Offset=0x32 Size=0x2
};

struct XMSG_CUSTOMACTION// Size=0x274 (Id=2403)
{
    unsigned long dwActionId;// Offset=0x0 Size=0x4
    wchar_t wszEnActionText[23];// Offset=0x4 Size=0x2e
    unsigned short wReserved;// Offset=0x32 Size=0x2
    unsigned long dwFlags;// Offset=0x34 Size=0x4
    struct _unnamed_2402 rgTranslations[11];// Offset=0x38 Size=0x23c
};

struct _SVOD_LEVEL0_HASH_BLOCK// Size=0x1000 (Id=2404)
{
    struct _SVOD_HASH_ENTRY Entries[204];// Offset=0x0 Size=0xff0
    unsigned char Reserved[16];// Offset=0xff0 Size=0x10
};

struct XECRYPT_DH_768// Size=0xc8 (Id=2405)
{
    struct XECRYPT_DH Dh;// Offset=0x0 Size=0x8
    unsigned long long aqwM[12];// Offset=0x8 Size=0x60
    unsigned long long aqwG[12];// Offset=0x68 Size=0x60
};

struct _XINPUT_RAW// Size=0x28 (Id=2406)
{
    unsigned char Buffer[32];// Offset=0x0 Size=0x20
    unsigned char Length;// Offset=0x20 Size=0x1
    unsigned char __align0[3];// Offset=0x21 Size=0x3
    unsigned long dwPacketNumber;// Offset=0x24 Size=0x4
};

struct IPersistStreamVtbl// Size=0x20 (Id=2407)
{
    HRESULT  ( * QueryInterface)(struct IPersistStream * ,const struct _GUID * ,void ** );// Offset=0x0 Size=0x4
    unsigned long  ( * AddRef)(struct IPersistStream * );// Offset=0x4 Size=0x4
    unsigned long  ( * Release)(struct IPersistStream * );// Offset=0x8 Size=0x4
    HRESULT  ( * GetClassID)(struct IPersistStream * ,struct _GUID * );// Offset=0xc Size=0x4
    HRESULT  ( * IsDirty)(struct IPersistStream * );// Offset=0x10 Size=0x4
    HRESULT  ( * Load)(struct IPersistStream * ,struct IStream * );// Offset=0x14 Size=0x4
    HRESULT  ( * Save)(struct IPersistStream * ,struct IStream * ,int );// Offset=0x18 Size=0x4
    HRESULT  ( * GetSizeMax)(struct IPersistStream * ,union _ULARGE_INTEGER * );// Offset=0x1c Size=0x4
};

struct _QUERY_UPDATEID_REQUEST// Size=0x2c (Id=2408)
{
    unsigned long dwTitleId;// Offset=0x0 Size=0x4
    unsigned long long qwUserId;// Offset=0x4 Size=0x8
    unsigned long long qwTeamId;// Offset=0xc Size=0x8
    unsigned long dwDatasetId;// Offset=0x14 Size=0x4
    unsigned long dwProcIndex;// Offset=0x18 Size=0x4
    unsigned long long qwEntityId;// Offset=0x1c Size=0x8
    unsigned long dwNumAttributes;// Offset=0x24 Size=0x4
    struct _XONLINE_QUERY_ATTRIBUTE * pAttributes;// Offset=0x28 Size=0x4
};

struct _XUIOBJ// Size=0x0 (Id=2409)
{
};

union _SUB_Q_CHANNEL_DATA// Size=0x18 (Id=2410)
{
    struct _SUB_Q_CURRENT_POSITION CurrentPosition;// Offset=0x0 Size=0x10
    struct _SUB_Q_MEDIA_CATALOG_NUMBER MediaCatalog;// Offset=0x0 Size=0x18
    struct _SUB_Q_TRACK_ISRC TrackIsrc;// Offset=0x0 Size=0x18
};

struct _KD_GLOBAL_DATA_BLOCK// Size=0x48 (Id=2411)
{
    void * MmTitlePfnRegion;// Offset=0x0 Size=0x4
    void * MmSystemPfnRegion;// Offset=0x4 Size=0x4
    void * ExTitlePoolDescriptor;// Offset=0x8 Size=0x4
    void * ExSystemPoolDescriptor;// Offset=0xc Size=0x4
    void * KeTitleProcess;// Offset=0x10 Size=0x4
    void * KeSystemProcess;// Offset=0x14 Size=0x4
    void * ObTitleObjectHandleTable;// Offset=0x18 Size=0x4
    void * ObSystemObjectHandleTable;// Offset=0x1c Size=0x4
    void * MmAllocatedPagesByUsage;// Offset=0x20 Size=0x4
    void * MmNumberOfPhysicalPages;// Offset=0x24 Size=0x4
    void * ObpRootDirectoryObject;// Offset=0x28 Size=0x4
    void * HvStats;// Offset=0x2c Size=0x4
    void * FscTitleCacheProcess;// Offset=0x30 Size=0x4
    void * FscSystemCacheProcess;// Offset=0x34 Size=0x4
    void * MmPfnDatabase;// Offset=0x38 Size=0x4
    void * MmPdeDatabase;// Offset=0x3c Size=0x4
    void * MmDevkitMemoryPresent;// Offset=0x40 Size=0x4
    void * MmDevkitPfnDatabase;// Offset=0x44 Size=0x4
};

struct _GRADUATE_USER_REQUEST// Size=0x80 (Id=2412)
{
    unsigned long long qwMachineId;// Offset=0x0 Size=0x8
    unsigned long long qwUserId;// Offset=0x8 Size=0x8
    struct _ADDRESS_INFO address;// Offset=0x10 Size=0x24
    struct _PHONE_INFO phone;// Offset=0x34 Size=0x12
    unsigned char bPaymentTypeId;// Offset=0x46 Size=0x1
    struct _CREDIT_CARD_INFO creditCard;// Offset=0x47 Size=0x1b
    struct _DIRECT_DEBIT_INFO directDebit;// Offset=0x62 Size=0x1e
};

struct PostBoundAttribute// Size=0x4 (Id=2413)
{
    unsigned int Deref;// Offset=0x0 Size=0x4
};

struct _XMATCH_SEARCHRESULT_HEADER// Size=0xc (Id=2414)
{
    unsigned long dwMessageLength;// Offset=0x0 Size=0x4
    unsigned short nNumSearchResults;// Offset=0x4 Size=0x2
    unsigned short fFlags;// Offset=0x6 Size=0x2
    unsigned long dwLoggingThreshold;// Offset=0x8 Size=0x4
};

struct _DVD_XGD2_DISC_AUTH_RESULT_HV_MARSHAL// Size=0x8 (Id=2415)
{
    unsigned long Operation;// Offset=0x0 Size=0x4
    long Status;// Offset=0x4 Size=0x4
};

struct ID3DXFileSaveData// Size=0x4 (Id=2416)
{
    struct ID3DXFileSaveDataVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct _GET_ACCOUNT_INFO_FROM_PASSPORT_REQUEST// Size=0x2c (Id=2417)
{
    struct _PASSPORT_SESSION_TOKEN pSessionToken[1];// Offset=0x0 Size=0x1c
    unsigned long long qwMachineId;// Offset=0x1c Size=0x8
    unsigned long dwTitleId;// Offset=0x24 Size=0x4
    struct _GET_ACCOUNT_INFO_RESPONSE * pResponse;// Offset=0x28 Size=0x4
};

struct _XMUSHORTN2// Size=0x4 (Id=2418)
{
    unsigned short x;// Offset=0x0 Size=0x2
    unsigned short y;// Offset=0x2 Size=0x2
};

struct _XMHEND3// Size=0x4 (Id=2419)
{
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            int x:11;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xb
            int y:11;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0xb
            int z:10;// Offset=0x0 Size=0x4 BitOffset=0x16 BitSize=0xa
        };
        unsigned int v;// Offset=0x0 Size=0x4
    };
};

struct _XPARTY_PROFILE_SETTING// Size=0xff (Id=2420)
{
    unsigned char bVersion;// Offset=0x0 Size=0x1
    struct _XPARTY_INFO PartyInfo;// Offset=0x1 Size=0x3e
    unsigned long dwPartyFlags;// Offset=0x3f Size=0x4
    unsigned long dwLeaderTitleId;// Offset=0x43 Size=0x4
    struct _XPARTY_PROFILE_MEMBER_INFO Members[8];// Offset=0x47 Size=0xb8
};

struct _XPARTY_NETWORK_COUNTERS// Size=0xc (Id=2421)
{
    unsigned long sendRate;// Offset=0x0 Size=0x4
    unsigned long recvRate;// Offset=0x4 Size=0x4
    unsigned long dropRate;// Offset=0x8 Size=0x4
};

struct _XEX_RAW_DATA_DESCRIPTOR// Size=0x8 (Id=2422)
{
    unsigned long DataSize;// Offset=0x0 Size=0x4
    unsigned long ZeroSize;// Offset=0x4 Size=0x4
};

union _unnamed_2423// Size=0x4 (Id=2423)
{
    unsigned long PhysicalAddress;// Offset=0x0 Size=0x4
    unsigned long VirtualSize;// Offset=0x0 Size=0x4
};

struct _IMAGE_SECTION_HEADER// Size=0x28 (Id=2424)
{
    unsigned char Name[8];// Offset=0x0 Size=0x8
    union _unnamed_2423 Misc;// Offset=0x8 Size=0x4
    unsigned long VirtualAddress;// Offset=0xc Size=0x4
    unsigned long SizeOfRawData;// Offset=0x10 Size=0x4
    unsigned long PointerToRawData;// Offset=0x14 Size=0x4
    unsigned long PointerToRelocations;// Offset=0x18 Size=0x4
    unsigned long PointerToLinenumbers;// Offset=0x1c Size=0x4
    unsigned short NumberOfRelocations;// Offset=0x20 Size=0x2
    unsigned short NumberOfLinenumbers;// Offset=0x22 Size=0x2
    unsigned long Characteristics;// Offset=0x24 Size=0x4
};

struct _XCONTENT_MEDIA_RESUME_DATA// Size=0x20 (Id=2425)
{
    unsigned long m_dwVersion;// Offset=0x0 Size=0x4
    union _LARGE_INTEGER m_liFileSize;// Offset=0x4 Size=0x8
    union _LARGE_INTEGER m_liBytesStored;// Offset=0xc Size=0x8
    struct _FILETIME m_ftLastModified;// Offset=0x14 Size=0x8
    unsigned long m_dwFileChunkSize;// Offset=0x1c Size=0x4
};

struct XECRYPT_ECPUB// Size=0x8 (Id=2426)
{
    unsigned long cqw;// Offset=0x0 Size=0x4
    unsigned char cbitR;// Offset=0x4 Size=0x1
    unsigned char cbitS;// Offset=0x5 Size=0x1
    unsigned char cbitA;// Offset=0x6 Size=0x1
    unsigned char cbitN;// Offset=0x7 Size=0x1
};

struct _ACCOUNT_RESERVE_GAMERTAG_RESPONSE// Size=0xa (Id=2427)
{
    unsigned long dwHresult;// Offset=0x0 Size=0x4
    unsigned short wGamertagCount;// Offset=0x4 Size=0x2
    struct _ACCOUNT_SUGGESTED_GAMERTAG * pGamertags;// Offset=0x6 Size=0x4
};

struct _BASIC_SUBSCRIPTION_INFO// Size=0x45 (Id=2428)
{
    unsigned long long qwOfferID;// Offset=0x0 Size=0x8
    unsigned short wOfferNameLength;// Offset=0x8 Size=0x2
    unsigned short * wszOfferName;// Offset=0xa Size=0x4
    unsigned long dwOfferType;// Offset=0xe Size=0x4
    unsigned char bRelationType;// Offset=0x12 Size=0x1
    unsigned char bConvertMode;// Offset=0x13 Size=0x1
    unsigned short wInstanceIdLength;// Offset=0x14 Size=0x2
    unsigned short * wszInstanceId;// Offset=0x16 Size=0x4
    unsigned long dwTitleID;// Offset=0x1a Size=0x4
    unsigned long dwTitleCategories;// Offset=0x1e Size=0x4
    unsigned short wTitleNameLength;// Offset=0x22 Size=0x2
    unsigned short * wszTitleName;// Offset=0x24 Size=0x4
    unsigned short wGameRating;// Offset=0x28 Size=0x2
    unsigned char bDuration;// Offset=0x2a Size=0x1
    unsigned char bFrequency;// Offset=0x2b Size=0x1
    unsigned char bTierProvided;// Offset=0x2c Size=0x1
    unsigned char bTierRequired;// Offset=0x2d Size=0x1
    unsigned long dwSellTextLength;// Offset=0x2e Size=0x4
    unsigned short * wszSellText;// Offset=0x32 Size=0x4
    unsigned long long qwRelatedOfferID;// Offset=0x36 Size=0x8
    unsigned short wResponseFlags;// Offset=0x3e Size=0x2
    unsigned char bPricesLength;// Offset=0x40 Size=0x1
    struct _OFFER_PRICE * pPrices;// Offset=0x41 Size=0x4
};

struct _P_TEAM_MANAGE_TEAM_MSG// Size=0x52 (Id=2429)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwUserID;// Offset=0x20 Size=0x8
    unsigned long dwTitleID;// Offset=0x28 Size=0x4
    unsigned long long qwTeamID;// Offset=0x2c Size=0x8
    unsigned short cbTeamName;// Offset=0x34 Size=0x2
    unsigned short cbTeamDescription;// Offset=0x36 Size=0x2
    unsigned short cbTeamMotto;// Offset=0x38 Size=0x2
    unsigned short cbTeamURL;// Offset=0x3a Size=0x2
    unsigned short cbTeamData;// Offset=0x3c Size=0x2
    unsigned short * wszTeamName;// Offset=0x3e Size=0x4
    unsigned short * wszTeamDescription;// Offset=0x42 Size=0x4
    unsigned short * wszTeamMotto;// Offset=0x46 Size=0x4
    unsigned short * wszTeamURL;// Offset=0x4a Size=0x4
    unsigned char * pbTeamData;// Offset=0x4e Size=0x4
};

struct _INGAME_CONTENT_ENUMERATE_RESPONSE// Size=0xa (Id=2430)
{
    unsigned short wOffersReturned;// Offset=0x0 Size=0x2
    struct _INGAME_CONTENT_INFO * pInfos;// Offset=0x2 Size=0x4
    unsigned long dwOffersTotal;// Offset=0x6 Size=0x4
};

struct _P_TEAM_CREATE_MSG// Size=0x58 (Id=2431)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwUserID;// Offset=0x20 Size=0x8
    unsigned long dwTitleID;// Offset=0x28 Size=0x4
    unsigned long dwMaxMembers;// Offset=0x2c Size=0x4
    unsigned short cbTeamName;// Offset=0x30 Size=0x2
    unsigned short cbTeamDescription;// Offset=0x32 Size=0x2
    unsigned short cbTeamMotto;// Offset=0x34 Size=0x2
    unsigned short cbTeamURL;// Offset=0x36 Size=0x2
    unsigned short cbTeamData;// Offset=0x38 Size=0x2
    unsigned short cbCreatorData;// Offset=0x3a Size=0x2
    unsigned short * wszTeamName;// Offset=0x3c Size=0x4
    unsigned short * wszTeamDescription;// Offset=0x40 Size=0x4
    unsigned short * wszTeamMotto;// Offset=0x44 Size=0x4
    unsigned short * wszTeamURL;// Offset=0x48 Size=0x4
    unsigned char * pbTeamData;// Offset=0x4c Size=0x4
    unsigned char * pbCreatorData;// Offset=0x50 Size=0x4
    struct _TEAM_CREATE_RESULTS * pvResults;// Offset=0x54 Size=0x4
};

struct _XEX_FILE_DATA_DESCRIPTOR// Size=0x8 (Id=2432)
{
    unsigned long Size;// Offset=0x0 Size=0x4
    unsigned short Flags;// Offset=0x4 Size=0x2
    unsigned short Format;// Offset=0x6 Size=0x2
};

struct _ACCOUNT_GET_USER_TYPE_REQUEST// Size=0x12 (Id=2433)
{
    unsigned long long qwMachineId;// Offset=0x0 Size=0x8
    unsigned short wGamertagLength;// Offset=0x8 Size=0x2
    unsigned short * wszGamertag;// Offset=0xa Size=0x4
    struct _ACCOUNT_GET_USER_TYPE_RESPONSE * pResponse;// Offset=0xe Size=0x4
};

struct _XPROFILE_SYNC_ACHIEVEMENTS_REQUEST// Size=0x22 (Id=2434)
{
    unsigned long dwTitleId;// Offset=0x0 Size=0x4
    unsigned long long qwUserId;// Offset=0x4 Size=0x8
    struct _FILETIME ftVersion;// Offset=0xc Size=0x8
    unsigned short wLocaleId;// Offset=0x14 Size=0x2
    unsigned short wStartingIndex;// Offset=0x16 Size=0x2
    unsigned short wAchievementCount;// Offset=0x18 Size=0x2
    struct _XPROFILE_ACHIEVEMENT_SYNC_REQUEST * pAchievements;// Offset=0x1a Size=0x4
    struct _XPROFILE_SYNC_ACHIEVEMENTS_RESULT * pResult;// Offset=0x1e Size=0x4
};

struct ISequentialStreamVtbl// Size=0x14 (Id=2435)
{
    HRESULT  ( * QueryInterface)(struct ISequentialStream * ,const struct _GUID * ,void ** );// Offset=0x0 Size=0x4
    unsigned long  ( * AddRef)(struct ISequentialStream * );// Offset=0x4 Size=0x4
    unsigned long  ( * Release)(struct ISequentialStream * );// Offset=0x8 Size=0x4
    HRESULT  ( * Read)(struct ISequentialStream * ,void * ,unsigned long ,unsigned long * );// Offset=0xc Size=0x4
    HRESULT  ( * Write)(struct ISequentialStream * ,void * ,unsigned long ,unsigned long * );// Offset=0x10 Size=0x4
};

struct ID3DXKeyframedAnimationSet// Size=0x4 (Id=2436)
{
    struct ID3DXKeyframedAnimationSetVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct _DVD_XGD2_DISC_AUTH_RESULT_CHALLENGE_COUNT// Size=0x4 (Id=2437)
{
    enum _DVD_XGD2_DISC_AUTH_RESULT_CHALLENGE_REQUIREMENT Req;// Offset=0x0 Size=0x4
};

struct _GET_POSTAL_CODE_REQUEST// Size=0xb (Id=2438)
{
    unsigned char bCountryId;// Offset=0x0 Size=0x1
    unsigned short wPostalCodeLength;// Offset=0x1 Size=0x2
    unsigned short * wszPostalCode;// Offset=0x3 Size=0x4
    struct _GET_POSTAL_CODE_RESPONSE * pResponse;// Offset=0x7 Size=0x4
};

struct XECRYPT_SHA512_STATE// Size=0xc8 (Id=2439)
{
    unsigned long count;// Offset=0x0 Size=0x4
    unsigned char __align0[4];// Offset=0x4 Size=0x4
    unsigned long long state[8];// Offset=0x8 Size=0x40
    unsigned char buffer[128];// Offset=0x48 Size=0x80
};

struct _XMSG_PROPERTY_INTERNAL// Size=0x4 (Id=2440)
{
    unsigned short wPropTag;// Offset=0x0 Size=0x2
    union // Size=0x4 (Id=0)
    {
        unsigned short wPropOffset;// Offset=0x2 Size=0x2
        unsigned short wData;// Offset=0x2 Size=0x2
        unsigned char bData;// Offset=0x2 Size=0x1
    };
};

struct _XHTTP_REQUEST_DOWNLOAD_TO_MEMORY_PARAMS// Size=0x71e (Id=2441)
{
    struct _XHTTP_REQUEST pRequest[1];// Offset=0x0 Size=0x70a
    unsigned long cbRequestData;// Offset=0x70a Size=0x4
    unsigned long dwRequestDataPointer;// Offset=0x70e Size=0x4
    unsigned long cbResponseBuffer;// Offset=0x712 Size=0x4
    unsigned long dwResponseBufferPointer;// Offset=0x716 Size=0x4
    struct _XHTTP_REQUEST_RESPONSE * pResults;// Offset=0x71a Size=0x4
};

struct _OBJECT_TYPE// Size=0x1c (Id=2442)
{
    void *  ( * AllocateProcedure)(unsigned long ,unsigned long ,enum _POOL_TYPE );// Offset=0x0 Size=0x4
    void  ( * FreeProcedure)(void * );// Offset=0x4 Size=0x4
    void  ( * CloseProcedure)(void * ,unsigned long );// Offset=0x8 Size=0x4
    void  ( * DeleteProcedure)(void * );// Offset=0xc Size=0x4
    long  ( * ParseProcedure)(void * ,struct _OBJECT_TYPE * ,unsigned long ,struct _STRING * ,struct _STRING * ,void * ,void ** );// Offset=0x10 Size=0x4
    void * DefaultObject;// Offset=0x14 Size=0x4
    unsigned long PoolTag;// Offset=0x18 Size=0x4
};

struct _SUB_Q_MEDIA_CATALOG_NUMBER// Size=0x18 (Id=2443)
{
    struct _SUB_Q_HEADER Header;// Offset=0x0 Size=0x4
    unsigned char FormatCode;// Offset=0x4 Size=0x1
    unsigned char Reserved[3];// Offset=0x5 Size=0x3
    struct // Size=0x1 (Id=0)
    {
        unsigned char Reserved1:7;// Offset=0x8 Size=0x1 BitOffset=0x0 BitSize=0x7
        unsigned char Mcval:1;// Offset=0x8 Size=0x1 BitOffset=0x7 BitSize=0x1
    };
    unsigned char MediaCatalog[15];// Offset=0x9 Size=0xf
};

struct _P_QUERY_AFFILIATES_REPLY_MSG// Size=0xc (Id=2444)
{
    HRESULT hr;// Offset=0x0 Size=0x4
    unsigned long cdwResults;// Offset=0x4 Size=0x4
    struct _P_QUERY_AFFILIATES_REPLY_DATA_MSG * rgResults;// Offset=0x8 Size=0x4
};

struct _P_FRIENDS_LIST_REPLY_MSG// Size=0x14 (Id=2445)
{
    unsigned long long qwUserID;// Offset=0x0 Size=0x8
    unsigned long dwVersion;// Offset=0x8 Size=0x4
    unsigned long cdwFriends;// Offset=0xc Size=0x4
    struct _P_GET_FRIENDS_LIST_REPLY_DATA * pFriendsListData;// Offset=0x10 Size=0x4
};

struct _TEAM_CREATE_RESULTS// Size=0x10 (Id=2446)
{
    unsigned long long qwTeamID;// Offset=0x0 Size=0x8
    unsigned long long ftCreated;// Offset=0x8 Size=0x8
};

struct _DMINIT// Size=0x64 (Id=2447)
{
    unsigned char  ( ** DebugRoutine)(struct _KTRAP_FRAME * ,struct _EXCEPTION_RECORD * ,struct _CONTEXT * ,unsigned char );// Offset=0x0 Size=0x4
    struct _LIST_ENTRY * LoadedModuleList;// Offset=0x4 Size=0x4
    unsigned long * LoadedModuleListLock;// Offset=0x8 Size=0x4
    unsigned long Flags;// Offset=0xc Size=0x4
    void ** ClockIntRoutine;// Offset=0x10 Size=0x4
    void ** ProfIntRoutine;// Offset=0x14 Size=0x4
    unsigned long  ( * TellRoutine)(unsigned long ,void * );// Offset=0x18 Size=0x4
    void ** CtxSwapNotifyRoutine;// Offset=0x1c Size=0x4
    struct _DMGD * D3DDriverData;// Offset=0x20 Size=0x4
    struct _DMXAPI * XapiData;// Offset=0x24 Size=0x4
    unsigned char * DisallowXbdm;// Offset=0x28 Size=0x4
    void  ( * HalStartProfileRoutine)(unsigned long );// Offset=0x2c Size=0x4
    void  ( * HalStopProfileRoutine)(unsigned long );// Offset=0x30 Size=0x4
    void  ( * HalProfileIntervalRoutine)(unsigned long );// Offset=0x34 Size=0x4
    void ** DpcDispatchNotifyRoutine;// Offset=0x38 Size=0x4
    struct _DMDVD * NextDVDSample;// Offset=0x3c Size=0x4
    void * XnetData;// Offset=0x40 Size=0x4
    void * DebugHaltThread;// Offset=0x44 Size=0x4
    void * FcuData;// Offset=0x48 Size=0x4
    unsigned long NumberOfProcessors;// Offset=0x4c Size=0x4
    struct _KPROCESS * SystemProcess;// Offset=0x50 Size=0x4
    struct _KPROCESS * TitleProcess;// Offset=0x54 Size=0x4
    void ** StackOverflowNotifyRoutine;// Offset=0x58 Size=0x4
    struct _KPRCB ** ProcessorControlBlocks;// Offset=0x5c Size=0x4
    unsigned long MmHighestPhysicalPage;// Offset=0x60 Size=0x4
};

struct _PHYSICAL_MEMORY_DESCRIPTOR// Size=0x10 (Id=2448)
{
    unsigned long NumberOfRuns;// Offset=0x0 Size=0x4
    unsigned long NumberOfPages;// Offset=0x4 Size=0x4
    struct _PHYSICAL_MEMORY_RUN Run[1];// Offset=0x8 Size=0x8
};

struct _XEX_SECURITY_INFO// Size=0x184 (Id=2449)
{
    unsigned long Size;// Offset=0x0 Size=0x4
    unsigned long ImageSize;// Offset=0x4 Size=0x4
    struct _HV_IMAGE_INFO ImageInfo;// Offset=0x8 Size=0x174
    unsigned long AllowedMediaTypes;// Offset=0x17c Size=0x4
    unsigned long PageDescriptorCount;// Offset=0x180 Size=0x4
};

union _IMAGE_PTE// Size=0x4 (Id=2450)
{
    struct // Size=0x4 (Id=0)
    {
        union // Size=0x4 (Id=0)
        {
            unsigned long ReadOnly:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
            unsigned long Data:1;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x1
            unsigned long NoExecute:1;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x1
            unsigned long Valid:1;// Offset=0x0 Size=0x4 BitOffset=0x3 BitSize=0x1
            unsigned long StartOfImage:1;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x1
            unsigned long EndOfImage:1;// Offset=0x0 Size=0x4 BitOffset=0x5 BitSize=0x1
            unsigned long PageFrameNumber:14;// Offset=0x0 Size=0x4 BitOffset=0x6 BitSize=0xe
            unsigned long Whitening:10;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0xa
            unsigned long Terabyte:2;// Offset=0x0 Size=0x4 BitOffset=0x1e BitSize=0x2
            unsigned long VNDR:4;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x4
        };
        unsigned long Markers:2;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x2
        unsigned long RealPageNumber:26;// Offset=0x0 Size=0x4 BitOffset=0x6 BitSize=0x1a
    };
    unsigned long AsULONG;// Offset=0x0 Size=0x4
};

struct _XMSG_PROPERTY_ATTACHMENT_INTERNAL// Size=0xc (Id=2451)
{
    unsigned long cbAttach;// Offset=0x0 Size=0x4
    unsigned long dwAttachFlags;// Offset=0x4 Size=0x4
    unsigned long cbAttachUrl;// Offset=0x8 Size=0x4
};

union _STF_TIME_STAMP// Size=0x4 (Id=2452)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long DoubleSeconds:5;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x5
        unsigned long Minute:6;// Offset=0x0 Size=0x4 BitOffset=0x5 BitSize=0x6
        unsigned long Hour:5;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x5
        unsigned long Day:5;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x5
        unsigned long Month:4;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x4
        unsigned long Year:7;// Offset=0x0 Size=0x4 BitOffset=0x19 BitSize=0x7
    };
    unsigned long AsULONG;// Offset=0x0 Size=0x4
};

struct _XMFLOAT4X3// Size=0x30 (Id=2453)
{
    union // Size=0x30 (Id=0)
    {
        float _11;// Offset=0x0 Size=0x4
        float _12;// Offset=0x4 Size=0x4
        float _13;// Offset=0x8 Size=0x4
        float _21;// Offset=0xc Size=0x4
        float _22;// Offset=0x10 Size=0x4
        float _23;// Offset=0x14 Size=0x4
        float _31;// Offset=0x18 Size=0x4
        float _32;// Offset=0x1c Size=0x4
        float _33;// Offset=0x20 Size=0x4
        float _41;// Offset=0x24 Size=0x4
        float _42;// Offset=0x28 Size=0x4
        float _43;// Offset=0x2c Size=0x4
        float m[4][3];// Offset=0x0 Size=0x30
    };
};

struct _RC4_HMAC_HEADER// Size=0x18 (Id=2454)
{
    unsigned char Checksum[16];// Offset=0x0 Size=0x10
    unsigned char Confounder[8];// Offset=0x10 Size=0x8
};

struct _LSP_ENUMERATE_REPLY// Size=0x8 (Id=2455)
{
    unsigned long dwLspInfoCount;// Offset=0x0 Size=0x4
    struct _LSP_ENUMERATE_SERVER_INFO * pLspInfo;// Offset=0x4 Size=0x4
};

struct _DVD_XGD2_DISC_AUTH_RESULT_GET_XCONTROL// Size=0x4 (Id=2456)
{
    long Status;// Offset=0x0 Size=0x4
};

union _unnamed_2457// Size=0x15f0 (Id=2457)
{
    struct _XCONTENT_METADATA_INSTALLER_SYSTEM_UPDATE SystemUpdate;// Offset=0x0 Size=0x15f0
    struct _XCONTENT_METADATA_INSTALLER_TITLE_UPDATE TitleUpdate;// Offset=0x0 Size=0x15f0
    struct _XCONTENT_METADATA_INSTALLER_PROGRESS_CACHE InstallProgressCache;// Offset=0x0 Size=0x15f0
};

struct _XCONTENT_METADATA_INSTALLER// Size=0x15f4 (Id=2458)
{
    enum _INSTALLER_METADATA_TYPE MetaDataType;// Offset=0x0 Size=0x4
    union _unnamed_2457 MetaData;// Offset=0x4 Size=0x15f0
};

struct _XASSET_ENUMERATE_RESPONSE// Size=0x114 (Id=2459)
{
    unsigned char signature[256];// Offset=0x0 Size=0x100
    struct _FILETIME ftEnumerate;// Offset=0x100 Size=0x8
    unsigned long dwResults;// Offset=0x108 Size=0x4
    unsigned long dwResultsTotal;// Offset=0x10c Size=0x4
    struct _XMARKETPLACE_ASSET * pResults;// Offset=0x110 Size=0x4
};

struct _XMSG_DOWNLOAD_ATTACH_TO_MEM_PARAMS// Size=0x18 (Id=2460)
{
    unsigned long long XuidUser;// Offset=0x0 Size=0x8
    unsigned long dwDetailsBlobsPointer;// Offset=0x8 Size=0x4
    unsigned long dwPropTag;// Offset=0xc Size=0x4
    unsigned long dwBufferSize;// Offset=0x10 Size=0x4
    unsigned long dwBufferPointer;// Offset=0x14 Size=0x4
};

struct _P_FRIENDS_LIST_MSG// Size=0x34 (Id=2461)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwSenderID;// Offset=0x20 Size=0x8
    unsigned long long qwTargetID;// Offset=0x28 Size=0x8
    struct _P_FRIENDS_LIST_REPLY_MSG * pResults;// Offset=0x30 Size=0x4
};

struct _TEAM_ENUM_RESULTS// Size=0x8 (Id=2462)
{
    unsigned long cTeams;// Offset=0x0 Size=0x4
    struct _XONLINE_TEAM * rgsTeams;// Offset=0x4 Size=0x4
};

struct ID3DXPMesh// Size=0x4 (Id=2463)
{
    struct ID3DXPMeshVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct XECRYPT_RSAPUB_1536// Size=0xd0 (Id=2464)
{
    struct XECRYPT_RSA Rsa;// Offset=0x0 Size=0x10
    unsigned long long aqwM[24];// Offset=0x10 Size=0xc0
};

struct _HUD_PARAMS// Size=0x8 (Id=2465)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    enum HUDSCENE eHudType;// Offset=0x4 Size=0x4
};

struct _XGET_REVOCATION_LIST_REPLY// Size=0x118 (Id=2466)
{
    unsigned char abSignature[256];// Offset=0x0 Size=0x100
    unsigned char abServerNonce[16];// Offset=0x100 Size=0x10
    unsigned long dwNumListEntries;// Offset=0x110 Size=0x4
    struct _REVOCATION_LIST_ENTRY * pEntries;// Offset=0x114 Size=0x4
};

struct PRESENCE_PROPERTY// Size=0x8 (Id=2467)
{
    unsigned long dwPropertyId;// Offset=0x0 Size=0x4
    unsigned long cbData;// Offset=0x4 Size=0x4
};

struct _XPARTY_ADD_LOCAL_USERS_PARAMS// Size=0x14 (Id=2468)
{
    unsigned long dwUserCount;// Offset=0x0 Size=0x4
    unsigned long dwUserIndices[4];// Offset=0x4 Size=0x10
};

struct _XMSHORTN4// Size=0x8 (Id=2469)
{
    short x;// Offset=0x0 Size=0x2
    short y;// Offset=0x2 Size=0x2
    short z;// Offset=0x4 Size=0x2
    short w;// Offset=0x6 Size=0x2
};

struct _P_UNBLOCK_MSG// Size=0x30 (Id=2470)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwUserID;// Offset=0x20 Size=0x8
    unsigned long long qwBlockID;// Offset=0x28 Size=0x8
};

struct _ACCOUNT_GET_USER_TYPE_RESPONSE// Size=0x1 (Id=2471)
{
    unsigned char bUserType;// Offset=0x0 Size=0x1
};

struct _XEKEYS_SET_REVOCATION_LIST// Size=0x1a8 (Id=2472)
{
    unsigned long Flags;// Offset=0x0 Size=0x4
    unsigned char Signature[256];// Offset=0x4 Size=0x100
    unsigned char NonceRemote[16];// Offset=0x104 Size=0x10
    unsigned long Size;// Offset=0x114 Size=0x4
    unsigned long PhysAddr[18];// Offset=0x118 Size=0x48
    unsigned long PhysSize[18];// Offset=0x160 Size=0x48
};

struct _XEX_PAGE_HEAP_OPTIONS// Size=0x8 (Id=2473)
{
    unsigned long Size;// Offset=0x0 Size=0x4
    unsigned long Flags;// Offset=0x4 Size=0x4
};

struct _XONLINE_THROUGHPUT_STATS// Size=0x44 (Id=2474)
{
    unsigned long dwSizeOfStruct;// Offset=0x0 Size=0x4
    unsigned long dwAverageXmitBps1;// Offset=0x4 Size=0x4
    unsigned long dwAverageRecvBps1;// Offset=0x8 Size=0x4
    unsigned long dwAverageXmitBps10;// Offset=0xc Size=0x4
    unsigned long dwAverageRecvBps10;// Offset=0x10 Size=0x4
    unsigned long dwAverageXmitBps30;// Offset=0x14 Size=0x4
    unsigned long dwAverageRecvBps30;// Offset=0x18 Size=0x4
    unsigned long dwPeakXmitBps10;// Offset=0x1c Size=0x4
    unsigned long dwPeakRecvBps10;// Offset=0x20 Size=0x4
    unsigned long dwPeakXmitBps30;// Offset=0x24 Size=0x4
    unsigned long dwPeakRecvBps30;// Offset=0x28 Size=0x4
    unsigned long dwPeakXmitBps60;// Offset=0x2c Size=0x4
    unsigned long dwPeakRecvBps60;// Offset=0x30 Size=0x4
    unsigned long dwMinXmitBps10;// Offset=0x34 Size=0x4
    unsigned long dwMinRecvBps10;// Offset=0x38 Size=0x4
    unsigned long dwMinXmitBps60;// Offset=0x3c Size=0x4
    unsigned long dwMinRecvBps60;// Offset=0x40 Size=0x4
};

struct _HVPOWER_MODE// Size=0x8 (Id=2475)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long FullPower:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long SetVcsControl:1;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x1
        unsigned long SetAapsDelta:1;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x1
        unsigned long Reserved:1;// Offset=0x0 Size=0x4 BitOffset=0x3 BitSize=0x1
        unsigned long VcsControlFull:4;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x4
        unsigned long VcsControlQuiet:4;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x4
        unsigned long VcsControlFuse:4;// Offset=0x0 Size=0x4 BitOffset=0xc BitSize=0x4
    };
    unsigned char AapsDelta;// Offset=0x4 Size=0x1
};

struct _FIND_USERS_RESPONSE// Size=0x8 (Id=2476)
{
    unsigned long dwResults;// Offset=0x0 Size=0x4
    struct _FIND_USER_INFO * pUsers;// Offset=0x4 Size=0x4
};

struct _XPARTY_GET_BANDWIDTH_PARAMS// Size=0x8 (Id=2477)
{
    enum _XPARTY_BANDWIDTH_TYPE Type;// Offset=0x0 Size=0x4
    unsigned long long * pqwBandwidth;// Offset=0x4 Size=0x4
};

struct _XMSG_DETAILS_GET_PROPERTY// Size=0x100f (Id=2478)
{
    struct _XMSG_DETAILS_BLOB pDetails[1];// Offset=0x0 Size=0x1000
    unsigned short wPropTag;// Offset=0x1000 Size=0x2
    unsigned long cbPropValueBuffer;// Offset=0x1002 Size=0x4
    unsigned char pbPropValue[1];// Offset=0x1006 Size=0x1
    unsigned long pcbPropValue[1];// Offset=0x1007 Size=0x4
    unsigned long pdwAttachmentFlags[1];// Offset=0x100b Size=0x4
};

struct _XPRESENCE_SYNC_SUBS_REQUEST// Size=0x36 (Id=2479)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwUserId;// Offset=0x20 Size=0x8
    unsigned long dwFlags;// Offset=0x28 Size=0x4
    unsigned short cEntries;// Offset=0x2c Size=0x2
    unsigned long long * qwEntries;// Offset=0x2e Size=0x4
    struct _XPRESENCE_SYNC_SUBS_RESPONSE * pResults;// Offset=0x32 Size=0x4
};

struct XECRYPT_RSAPUB_4096// Size=0x210 (Id=2480)
{
    struct XECRYPT_RSA Rsa;// Offset=0x0 Size=0x10
    unsigned long long aqwM[64];// Offset=0x10 Size=0x200
};

struct _XCONTENT_METADATA_INSTALLER_TITLE_UPDATE// Size=0x15f0 (Id=2481)
{
    unsigned long SystemVersion;// Offset=0x0 Size=0x4
    unsigned long NewVersion;// Offset=0x4 Size=0x4
    unsigned char Reserved[5608];// Offset=0x8 Size=0x15e8
};

struct XGI_SESSIONINVITE_MSG// Size=0x8 (Id=2482)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    struct _XSESSION_INFO * pSessionInfo;// Offset=0x4 Size=0x4
};

struct _OFFER_PURCHASE_GAMERTAG_REQUEST// Size=0x30 (Id=2483)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned char bCountryId;// Offset=0x8 Size=0x1
    unsigned short wLanguageId;// Offset=0x9 Size=0x2
    unsigned char bUserTier;// Offset=0xb Size=0x1
    unsigned long long qwMachineId;// Offset=0xc Size=0x8
    unsigned long long qwOfferID;// Offset=0x14 Size=0x8
    unsigned long dwPaymentType;// Offset=0x1c Size=0x4
    unsigned short wTokenLength;// Offset=0x20 Size=0x2
    unsigned short * wszToken;// Offset=0x22 Size=0x4
    unsigned short wGamertagLength;// Offset=0x26 Size=0x2
    unsigned short * wszGamertag;// Offset=0x28 Size=0x4
    struct _OFFER_PURCHASE_GAMERTAG_RESPONSE * pResults;// Offset=0x2c Size=0x4
};

struct _DOWNLOAD_QUEUE_QUERY_QUEUES_RESPONSE// Size=0x8 (Id=2484)
{
    unsigned short wTotalQueues;// Offset=0x0 Size=0x2
    unsigned short wNumQueues;// Offset=0x2 Size=0x2
    struct _GENERIC_LIST_INFO * pQueues;// Offset=0x4 Size=0x4
};

struct _DVD_XGD2_DISC_AUTH_RESULT_RECALIBRATE// Size=0x8 (Id=2485)
{
    long Status;// Offset=0x0 Size=0x4
    unsigned long ModeSelect;// Offset=0x4 Size=0x4
};

struct _DM_SWAPDISC_STATUS// Size=0x4 (Id=2486)
{
    unsigned long Code;// Offset=0x0 Size=0x4
};

struct _FIND_MEDIA_INSTANCE_URLS_RESPONSE// Size=0x8 (Id=2487)
{
    unsigned long dwMediaInstanceIdsCount;// Offset=0x0 Size=0x4
    struct _MEDIA_INSTANCE_URLS * pMediaInstanceIds;// Offset=0x4 Size=0x4
};

struct _unnamed_2488// Size=0x4 (Id=2488)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long NextBlockNumber:24;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x18
        unsigned long State:2;// Offset=0x0 Size=0x4 BitOffset=0x1e BitSize=0x2
    };
};

struct _unnamed_2489// Size=0x4 (Id=2489)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long NumberOfFreeBlocks:15;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xf
        unsigned long NumberOfFreePendingBlocks:15;// Offset=0x0 Size=0x4 BitOffset=0xf BitSize=0xf
        unsigned long ActiveIndex:1;// Offset=0x0 Size=0x4 BitOffset=0x1e BitSize=0x1
        unsigned long Writeable:1;// Offset=0x0 Size=0x4 BitOffset=0x1f BitSize=0x1
    };
};

struct _STF_HASH_ENTRY// Size=0x18 (Id=2490)
{
    unsigned char Hash[20];// Offset=0x0 Size=0x14
    union // Size=0x18 (Id=0)
    {
        struct _unnamed_2488 Level0;// Offset=0x14 Size=0x4
        struct _unnamed_2489 LevelN;// Offset=0x14 Size=0x4
        unsigned long LevelAsULONG;// Offset=0x14 Size=0x4
    };
};

struct XGI_SESSIONSEARCHBYIDS_MSG// Size=0x20 (Id=2491)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long cSessionIds;// Offset=0x4 Size=0x4
    struct XNKID * rgSessionIds;// Offset=0x8 Size=0x4
    unsigned long cbResultsBuffer;// Offset=0xc Size=0x4
    struct _XSESSION_SEARCHRESULT_HEADER * pSearchResults;// Offset=0x10 Size=0x4
    unsigned long dwReserved1;// Offset=0x14 Size=0x4
    unsigned long dwReserved2;// Offset=0x18 Size=0x4
    unsigned long dwReserved3;// Offset=0x1c Size=0x4
};

struct _XMARKETPLACE_DATA// Size=0x8 (Id=2492)
{
    unsigned long dwSize;// Offset=0x0 Size=0x4
    unsigned char * pBuffer;// Offset=0x4 Size=0x4
};

struct _XUSAGE_STORE_RESULT// Size=0x4 (Id=2493)
{
    HRESULT hr;// Offset=0x0 Size=0x4
};

union _KUSER_MODE_SLB// Size=0x1 (Id=2494)
{
    struct // Size=0x1 (Id=0)
    {
        unsigned char LargePageSelector:1;// Offset=0x0 Size=0x1 BitOffset=0x0 BitSize=0x1
        unsigned char LargePage:1;// Offset=0x0 Size=0x1 BitOffset=0x1 BitSize=0x1
        unsigned char NoExecute:1;// Offset=0x0 Size=0x1 BitOffset=0x2 BitSize=0x1
        unsigned char Reserved:5;// Offset=0x0 Size=0x1 BitOffset=0x3 BitSize=0x5
    };
    unsigned char AsUCHAR;// Offset=0x0 Size=0x1
};

struct _XCONFIG_USER_SETTINGS// Size=0x1fd (Id=2495)
{
    unsigned long CheckSum;// Offset=0x0 Size=0x4
    unsigned long Version;// Offset=0x4 Size=0x4
    unsigned long TimeZoneBias;// Offset=0x8 Size=0x4
    char TimeZoneStdName[4];// Offset=0xc Size=0x4
    char TimeZoneDltName[4];// Offset=0x10 Size=0x4
    struct _XCONFIG_TIMEZONE_DATE TimeZoneStdDate;// Offset=0x14 Size=0x4
    struct _XCONFIG_TIMEZONE_DATE TimeZoneDltDate;// Offset=0x18 Size=0x4
    unsigned long TimeZoneStdBias;// Offset=0x1c Size=0x4
    unsigned long TimeZoneDltBias;// Offset=0x20 Size=0x4
    unsigned long long DefaultProfile;// Offset=0x24 Size=0x8
    unsigned long Language;// Offset=0x2c Size=0x4
    unsigned long VideoFlags;// Offset=0x30 Size=0x4
    unsigned long AudioFlags;// Offset=0x34 Size=0x4
    unsigned long RetailFlags;// Offset=0x38 Size=0x4
    unsigned long DevkitFlags;// Offset=0x3c Size=0x4
    char Country;// Offset=0x40 Size=0x1
    char ParentalControlFlags;// Offset=0x41 Size=0x1
    unsigned char ReservedFlag[2];// Offset=0x42 Size=0x2
    char SMBConfig[256];// Offset=0x44 Size=0x100
    unsigned long long LivePUID;// Offset=0x144 Size=0x8
    char LiveCredentials[16];// Offset=0x14c Size=0x10
    short AVPackHDMIScreenSz[2];// Offset=0x15c Size=0x4
    short AVPackComponentScreenSz[2];// Offset=0x160 Size=0x4
    short AVPackVGAScreenSz[2];// Offset=0x164 Size=0x4
    unsigned long ParentalControlGame;// Offset=0x168 Size=0x4
    unsigned long ParentalControlPassword;// Offset=0x16c Size=0x4
    unsigned long ParentalControlMovie;// Offset=0x170 Size=0x4
    unsigned long ParentalControlGameRating;// Offset=0x174 Size=0x4
    unsigned long ParentalControlMovieRating;// Offset=0x178 Size=0x4
    char ParentalControlHint;// Offset=0x17c Size=0x1
    char ParentalControlHintAnswer[32];// Offset=0x17d Size=0x20
    char ParentalControlOverride[32];// Offset=0x19d Size=0x20
    unsigned long MusicPlaybackMode;// Offset=0x1bd Size=0x4
    float MusicVolume;// Offset=0x1c1 Size=0x4
    unsigned long MusicFlags;// Offset=0x1c5 Size=0x4
    unsigned long ArcadeFlags;// Offset=0x1c9 Size=0x4
    unsigned long ParentalControlVersion;// Offset=0x1cd Size=0x4
    unsigned long ParentalControlTV;// Offset=0x1d1 Size=0x4
    unsigned long ParentalControlTVRating;// Offset=0x1d5 Size=0x4
    unsigned long ParentalControlExplicitVideo;// Offset=0x1d9 Size=0x4
    unsigned long ParentalControlExplicitVideoRating;// Offset=0x1dd Size=0x4
    unsigned long ParentalControlUnratedVideo;// Offset=0x1e1 Size=0x4
    unsigned long ParentalControlUnratedVideoRating;// Offset=0x1e5 Size=0x4
    unsigned long VideoOutputBlackLevels;// Offset=0x1e9 Size=0x4
    unsigned char VideoPlayerDisplayMode;// Offset=0x1ed Size=0x1
    unsigned long AlternateVideoTimingIDs;// Offset=0x1ee Size=0x4
    unsigned long VideoDriverOptions;// Offset=0x1f2 Size=0x4
    unsigned long MusicUIFlags;// Offset=0x1f6 Size=0x4
    char VideoMediaSourceType;// Offset=0x1fa Size=0x1
    char MusicMediaSourceType;// Offset=0x1fb Size=0x1
    char PhotoMediaSourceType;// Offset=0x1fc Size=0x1
};

struct _XUSER_MUTELIST_REQUEST// Size=0x18 (Id=2496)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned char __align0[4];// Offset=0x4 Size=0x4
    unsigned long long Xuid;// Offset=0x8 Size=0x8
    unsigned long dwResult;// Offset=0x10 Size=0x4
};

struct _DUMP_COLLECTION_HELP// Size=0x14 (Id=2497)
{
    unsigned long Size;// Offset=0x0 Size=0x4
    struct _DUMP_BASIC_SERVICES * BasicServices;// Offset=0x4 Size=0x4
    struct _DUMP_MEDIA_SERVICES * MediaServices;// Offset=0x8 Size=0x4
    struct _DUMP_FRAME_BUFFER_INFO * FrameBufferInfo;// Offset=0xc Size=0x4
    struct _DUMP_SYSTEM_GLOBALS * SystemGlobals;// Offset=0x10 Size=0x4
};

struct D3DArrayTexture// Size=0x34 (Id=2498)
{
    unsigned long Common;// Offset=0x0 Size=0x4
    unsigned long ReferenceCount;// Offset=0x4 Size=0x4
    unsigned long Fence;// Offset=0x8 Size=0x4
    unsigned long ReadFence;// Offset=0xc Size=0x4
    unsigned long Identifier;// Offset=0x10 Size=0x4
    unsigned long BaseFlush;// Offset=0x14 Size=0x4
    unsigned long MipFlush;// Offset=0x18 Size=0x4
    union GPUTEXTURE_FETCH_CONSTANT Format;// Offset=0x1c Size=0x18
};

struct _CHANGE_SUBSCRIPTION_PAYMENT_INSTRUMENT_REQUEST// Size=0x1c (Id=2499)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned long long qwMachineId;// Offset=0x8 Size=0x8
    unsigned short wInstanceIdLength;// Offset=0x10 Size=0x2
    unsigned short * wszInstanceId;// Offset=0x12 Size=0x4
    unsigned short wPaymentInstrumentIdLength;// Offset=0x16 Size=0x2
    unsigned short * wszPaymentInstrumentId;// Offset=0x18 Size=0x4
};

struct _GET_USER_INFO_REQUEST// Size=0x18 (Id=2500)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned long long qwMachineId;// Offset=0x8 Size=0x8
    unsigned long dwTitleId;// Offset=0x10 Size=0x4
    struct _GET_USER_INFO_RESPONSE * pResponse;// Offset=0x14 Size=0x4
};

struct _XSTORAGE_ACCESS_TOKEN_WRITE// Size=0x1a (Id=2501)
{
    struct _FILETIME ftTokenExpirationDate;// Offset=0x0 Size=0x8
    struct _FILETIME ftFileExpirationDate;// Offset=0x8 Size=0x8
    unsigned long dwMaxFileSize;// Offset=0x10 Size=0x4
    unsigned short wSignatureSize;// Offset=0x14 Size=0x2
    unsigned char * prgbSignature;// Offset=0x16 Size=0x4
};

struct _XMSG_ENUMERATE_REQUEST// Size=0x6c (Id=2502)
{
    unsigned long long XuidUser;// Offset=0x0 Size=0x8
    unsigned long pcMsgSummaries[1];// Offset=0x8 Size=0x4
    struct _XMSG_SUMMARY pMsgSummaries[1];// Offset=0xc Size=0x60
};

struct ID3DXLoadUserData// Size=0x4 (Id=2503)
{
    struct ID3DXLoadUserDataVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct _DOWNLOAD_QUEUE_DENY_ACCESS_REQUEST// Size=0x14 (Id=2504)
{
    unsigned long long xUserId;// Offset=0x0 Size=0x8
    unsigned long nQueueId;// Offset=0x8 Size=0x4
    unsigned long long ulMachineId;// Offset=0xc Size=0x8
};

struct _FILE_OBJECT// Size=0x68 (Id=2505)
{
    short Type;// Offset=0x0 Size=0x2
    unsigned char Flags;// Offset=0x2 Size=0x1
    unsigned char Flags2;// Offset=0x3 Size=0x1
    struct _DEVICE_OBJECT * DeviceObject;// Offset=0x4 Size=0x4
    void * FsContext;// Offset=0x8 Size=0x4
    void * FsContext2;// Offset=0xc Size=0x4
    long FinalStatus;// Offset=0x10 Size=0x4
    union _LARGE_INTEGER CurrentByteOffset;// Offset=0x14 Size=0x8
    struct _FILE_OBJECT * RelatedFileObject;// Offset=0x1c Size=0x4
    struct _IO_COMPLETION_CONTEXT * CompletionContext;// Offset=0x20 Size=0x4
    long LockCount;// Offset=0x24 Size=0x4
    struct _KEVENT Lock;// Offset=0x28 Size=0x10
    struct _KEVENT Event;// Offset=0x38 Size=0x10
    struct _LIST_ENTRY ProcessListEntry;// Offset=0x48 Size=0x8
    struct _LIST_ENTRY FileSystemListEntry;// Offset=0x50 Size=0x8
    unsigned char IoPriority;// Offset=0x58 Size=0x1
    unsigned char PoolPadding[15];// Offset=0x59 Size=0xf
};

struct _DVD_XGD2_DISC_AUTH_RESULT_LBA_FAILURE// Size=0x24 (Id=2506)
{
    long Status;// Offset=0x0 Size=0x4
    unsigned long State;// Offset=0x4 Size=0x4
    unsigned long Block;// Offset=0x8 Size=0x4
    unsigned long LeafHashIndex;// Offset=0xc Size=0x4
    unsigned long LeafCount;// Offset=0x10 Size=0x4
    unsigned long PrimaryHashIndex;// Offset=0x14 Size=0x4
    unsigned long PrimaryCount;// Offset=0x18 Size=0x4
    unsigned long ConsecLeafHashVerifies;// Offset=0x1c Size=0x4
    unsigned long CurrentLeafIndex;// Offset=0x20 Size=0x4
};

struct _PASSPORT_GET_USER_DATA_REQUEST// Size=0x20 (Id=2507)
{
    struct _PASSPORT_SESSION_TOKEN pSessionToken[1];// Offset=0x0 Size=0x1c
    struct _PASSPORT_GET_USER_DATA_RESPONSE * pResult;// Offset=0x1c Size=0x4
};

struct _XONLINE_MATCH_SPLITRESULT// Size=0x5c (Id=2508)
{
    unsigned long dwReserved;// Offset=0x0 Size=0x4
    struct XNKID SessionID;// Offset=0x4 Size=0x8
    struct XNADDR HostAddress;// Offset=0xc Size=0x24
    struct XNKEY KeyExchangeKey;// Offset=0x30 Size=0x10
    unsigned long dwPublicOpen;// Offset=0x40 Size=0x4
    unsigned long dwPrivateOpen;// Offset=0x44 Size=0x4
    unsigned long dwPublicFilled;// Offset=0x48 Size=0x4
    unsigned long dwPrivateFilled;// Offset=0x4c Size=0x4
    unsigned long dwNumAttributes;// Offset=0x50 Size=0x4
    unsigned long * pAttributeOffsets;// Offset=0x54 Size=0x4
    struct _XONLINE_ATTRIBUTE * pAttributes;// Offset=0x58 Size=0x4
};

struct _XFRIENDS_REQUEST_PARAMS// Size=0x18 (Id=2509)
{
    unsigned long long XuidFromUser;// Offset=0x0 Size=0x8
    unsigned long long qwBuddyID;// Offset=0x8 Size=0x8
    unsigned long dwUserNameSize;// Offset=0x10 Size=0x4
    void * hMsg;// Offset=0x14 Size=0x4
};

struct XECRYPT_RSAPUB_1024// Size=0x90 (Id=2510)
{
    struct XECRYPT_RSA Rsa;// Offset=0x0 Size=0x10
    unsigned long long aqwM[16];// Offset=0x10 Size=0x80
};

struct _FB_GET_AGG_REVIEWS_REQUEST// Size=0xc (Id=2511)
{
    unsigned long long qwTargetID;// Offset=0x0 Size=0x8
    struct _FB_GET_AGG_REVIEWS_RESPONSE * pResults;// Offset=0x8 Size=0x4
};

struct _XMSG_SET_PROP_REQUEST// Size=0xf (Id=2512)
{
    void * hMsg;// Offset=0x0 Size=0x4
    unsigned short wPropTag;// Offset=0x4 Size=0x2
    unsigned long dwPropValueSize;// Offset=0x6 Size=0x4
    unsigned char pbPropValue[1];// Offset=0xa Size=0x1
    unsigned long dwAttachmentFlags;// Offset=0xb Size=0x4
};

struct D3DXVECTOR2_16F// Size=0x4 (Id=2513)
{
    struct D3DXFLOAT16 x;// Offset=0x0 Size=0x2
    struct D3DXFLOAT16 y;// Offset=0x2 Size=0x2
};

struct _XSIGNATURE_VERIFY_RESPONSE// Size=0x4 (Id=2514)
{
    HRESULT hrResult;// Offset=0x0 Size=0x4
};

struct _XINPUT_DEVICE_STATS// Size=0x1c (Id=2515)
{
    unsigned long ulBatteryLevel;// Offset=0x0 Size=0x4
    unsigned long ulBatteryType;// Offset=0x4 Size=0x4
    unsigned long ulSignalStrength;// Offset=0x8 Size=0x4
    unsigned long ulDeviceType;// Offset=0xc Size=0x4
    unsigned long ulDevicePort;// Offset=0x10 Size=0x4
    unsigned long ulDeviceVersion;// Offset=0x14 Size=0x4
    int fJumped;// Offset=0x18 Size=0x4
};

struct _XPROFILE_TITLE// Size=0x26 (Id=2516)
{
    unsigned long dwTitleId;// Offset=0x0 Size=0x4
    unsigned short cbTitleName;// Offset=0x4 Size=0x2
    unsigned short * pszTitleName;// Offset=0x6 Size=0x4
    struct _FILETIME ftLastPlayed;// Offset=0xa Size=0x8
    unsigned long dwCredEarned;// Offset=0x12 Size=0x4
    unsigned short wAchievementsEarned;// Offset=0x16 Size=0x2
    unsigned short wAchievementsPossible;// Offset=0x18 Size=0x2
    unsigned long dwCredPossible;// Offset=0x1a Size=0x4
    unsigned long dwSequence;// Offset=0x1e Size=0x4
    unsigned long dwMinutesPlayedOnline;// Offset=0x22 Size=0x4
};

struct _SUBSCRIPTION_DETAILS_RESPONSE// Size=0x45 (Id=2517)
{
    struct _BASIC_SUBSCRIPTION_INFO basicInfo;// Offset=0x0 Size=0x45
};

struct _XSTORAGE_DELETE_PARAMS// Size=0xc (Id=2518)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long dwServerPathLength;// Offset=0x4 Size=0x4
    unsigned short * wszServerPath;// Offset=0x8 Size=0x4
};

struct _XAMGETPERSISTMEMFUNCS// Size=0x10 (Id=2519)
{
    unsigned long  ( * pfnXamSetPersistentMemory)(struct _XPERSISTENTMEMPARAMS * );// Offset=0x0 Size=0x4
    unsigned long  ( * pfnXamGetPersistentMemory)(struct _XPERSISTENTMEMPARAMS * );// Offset=0x4 Size=0x4
    unsigned long  ( * pfnXamGetPersistentMemorySizes)(struct _XPERSISTENTMEMPARAMS * ,unsigned long * );// Offset=0x8 Size=0x4
    int bDontTrackPersistentSockets;// Offset=0xc Size=0x4
};

struct _XPARTY_GET_ACCESS_LEVEL_PARAMS// Size=0x8 (Id=2520)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    enum _XPARTY_ACCESS_LEVEL * pAccessLevel;// Offset=0x4 Size=0x4
};

struct _XACTIVATION_GET_TITLE_LIST_REQUEST// Size=0x38 (Id=2521)
{
    unsigned long long qwMachineId;// Offset=0x0 Size=0x8
    unsigned long long rgUserXuids[4];// Offset=0x8 Size=0x20
    unsigned long dwNonce;// Offset=0x28 Size=0x4
    unsigned long dwTitleId;// Offset=0x2c Size=0x4
    unsigned long dwSignatureFormat;// Offset=0x30 Size=0x4
    struct _XACTIVATION_GET_TITLE_LIST_RESPONSE * pResults;// Offset=0x34 Size=0x4
};

struct _Q_MESSAGE_FLAGS_MSG// Size=0x34 (Id=2522)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwUserID;// Offset=0x20 Size=0x8
    unsigned long dwMessageID;// Offset=0x28 Size=0x4
    unsigned long dwSetFlags;// Offset=0x2c Size=0x4
    unsigned long dwUnsetFlags;// Offset=0x30 Size=0x4
};

struct _DEVICE_OBJECT// Size=0x50 (Id=2523)
{
    short Type;// Offset=0x0 Size=0x2
    unsigned short Size;// Offset=0x2 Size=0x2
    long ReferenceCount;// Offset=0x4 Size=0x4
    struct _DRIVER_OBJECT * DriverObject;// Offset=0x8 Size=0x4
    struct _DEVICE_OBJECT * MountedOrSelfDevice;// Offset=0xc Size=0x4
    struct _IRP * CurrentIrp;// Offset=0x10 Size=0x4
    unsigned long Flags;// Offset=0x14 Size=0x4
    void * DeviceExtension;// Offset=0x18 Size=0x4
    unsigned char DeviceType;// Offset=0x1c Size=0x1
    unsigned char StartIoFlags;// Offset=0x1d Size=0x1
    char StackSize;// Offset=0x1e Size=0x1
    unsigned char DeletePending;// Offset=0x1f Size=0x1
    unsigned long SectorSize;// Offset=0x20 Size=0x4
    unsigned long AlignmentRequirement;// Offset=0x24 Size=0x4
    struct _KDEVICE_QUEUE DeviceQueue;// Offset=0x28 Size=0x10
    struct _KEVENT DeviceLock;// Offset=0x38 Size=0x10
    unsigned long StartIoCount;// Offset=0x48 Size=0x4
    unsigned long StartIoKey;// Offset=0x4c Size=0x4
};

struct _XCONTENT_METADATA_TITLE_CONTENT// Size=0x15f4 (Id=2524)
{
    unsigned char Reserved[5620];// Offset=0x0 Size=0x15f4
};

struct _XPARTY_SET_JOINABLE_PARAMS// Size=0x4 (Id=2525)
{
    enum _XPARTY_JOIN_TYPE Joinable;// Offset=0x0 Size=0x4
};

struct _XPARTY_SET_TEST_DELAY_PARAMS// Size=0x8 (Id=2526)
{
    enum _XPARTY_TEST_DELAY_TYPE eDelayType;// Offset=0x0 Size=0x4
    unsigned long dwDelayFrames;// Offset=0x4 Size=0x4
};

struct ID3DXSaveUserData// Size=0x4 (Id=2527)
{
    struct ID3DXSaveUserDataVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct _XAMPACKAGEMANAGER_GETMANIFESTVERSION_MSG// Size=0x4 (Id=2528)
{
    unsigned long * pdwManifestVesrion;// Offset=0x0 Size=0x4
};

union _KUSER_MODE_CONTROL// Size=0x4 (Id=2529)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long SlbKpBit:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long UserModeType:1;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x1
        unsigned long LittleEndianEnable:1;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x1
        unsigned long Reserved:29;// Offset=0x0 Size=0x4 BitOffset=0x3 BitSize=0x1d
    };
    unsigned long AsULONG;// Offset=0x0 Size=0x4
};

struct _RTL_HEAP_USAGE// Size=0x40 (Id=2530)
{
    unsigned long Length;// Offset=0x0 Size=0x4
    unsigned long BytesAllocated;// Offset=0x4 Size=0x4
    unsigned long BytesCommitted;// Offset=0x8 Size=0x4
    unsigned long BytesReserved;// Offset=0xc Size=0x4
    unsigned long BytesReservedMaximum;// Offset=0x10 Size=0x4
    struct _RTL_HEAP_USAGE_ENTRY * Entries;// Offset=0x14 Size=0x4
    struct _RTL_HEAP_USAGE_ENTRY * AddedEntries;// Offset=0x18 Size=0x4
    struct _RTL_HEAP_USAGE_ENTRY * RemovedEntries;// Offset=0x1c Size=0x4
    unsigned long Reserved[8];// Offset=0x20 Size=0x20
};

struct CFDATA// Size=0x8 (Id=2531)
{
    unsigned long csum;// Offset=0x0 Size=0x4
    unsigned short cbData;// Offset=0x4 Size=0x2
    unsigned short cbUncomp;// Offset=0x6 Size=0x2
};

struct _HVPOWER_INFO// Size=0x8 (Id=2532)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long FullPower:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long LowPowerOffset:3;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x3
        unsigned long VcsControlFull:4;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x4
        unsigned long VcsControlQuiet:4;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x4
        unsigned long VcsControlFuse:4;// Offset=0x0 Size=0x4 BitOffset=0xc BitSize=0x4
    };
    unsigned char AapsDelta;// Offset=0x4 Size=0x1
    unsigned char DefaultVid;// Offset=0x5 Size=0x1
    unsigned char CurrentVid;// Offset=0x6 Size=0x1
    unsigned char CurrentVcs;// Offset=0x7 Size=0x1
};

struct _QUERY_UPDATE_REQUEST// Size=0x24 (Id=2533)
{
    unsigned long dwTitleId;// Offset=0x0 Size=0x4
    unsigned long long qwUserId;// Offset=0x4 Size=0x8
    unsigned long long qwTeamId;// Offset=0xc Size=0x8
    unsigned long dwDatasetId;// Offset=0x14 Size=0x4
    unsigned long dwProcIndex;// Offset=0x18 Size=0x4
    unsigned long dwNumAttributes;// Offset=0x1c Size=0x4
    struct _XONLINE_QUERY_ATTRIBUTE * pAttributes;// Offset=0x20 Size=0x4
};

struct _ERWLOCK// Size=0x38 (Id=2534)
{
    long LockCount;// Offset=0x0 Size=0x4
    unsigned long WritersWaitingCount;// Offset=0x4 Size=0x4
    unsigned long ReadersWaitingCount;// Offset=0x8 Size=0x4
    unsigned long ReadersEntryCount;// Offset=0xc Size=0x4
    struct _KEVENT WriterEvent;// Offset=0x10 Size=0x10
    struct _KSEMAPHORE ReaderSemaphore;// Offset=0x20 Size=0x14
    unsigned long SpinLock;// Offset=0x34 Size=0x4
};

struct _XPROFILE_ENUM_ACHIEVEMENTS_RESULT// Size=0x6 (Id=2535)
{
    unsigned short wAchievementsCount;// Offset=0x0 Size=0x2
    struct _XPROFILE_ACHIEVEMENT * pAchievements;// Offset=0x2 Size=0x4
};

struct _ACCOUNT_VERIFY_BILLING_INFO_RESPONSE// Size=0x5d (Id=2536)
{
    unsigned long long qwUserPuid;// Offset=0x0 Size=0x8
    unsigned short wFirstNameLength;// Offset=0x8 Size=0x2
    unsigned short * wszFirstName;// Offset=0xa Size=0x4
    unsigned short wLastNameLength;// Offset=0xe Size=0x2
    unsigned short * wszLastName;// Offset=0x10 Size=0x4
    struct _FILETIME ftBirthdate;// Offset=0x14 Size=0x8
    unsigned short wEmailLength;// Offset=0x1c Size=0x2
    unsigned short * wszEmail;// Offset=0x1e Size=0x4
    struct _ADDRESS_INFO addressInfo;// Offset=0x22 Size=0x24
    struct _PHONE_INFO phoneInfo;// Offset=0x46 Size=0x12
    unsigned short wLanguageId;// Offset=0x58 Size=0x2
    unsigned char bCountryId;// Offset=0x5a Size=0x1
    unsigned char bMsftOptIn;// Offset=0x5b Size=0x1
    unsigned char bParterOptIn;// Offset=0x5c Size=0x1
};

struct _DVD_XGD2_DISC_AUTH_RESULT_GET_NEXT_CHALLENGE// Size=0x4 (Id=2537)
{
    long Status;// Offset=0x0 Size=0x4
};

struct _XUPDATE_DOWNLOAD_RESULTS// Size=0x104 (Id=2538)
{
    char szPackagePath[260];// Offset=0x0 Size=0x104
};

struct ID3DXSkinInfo// Size=0x4 (Id=2539)
{
    struct ID3DXSkinInfoVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct tagSESSION_STRUCT// Size=0x4 (Id=2540)
{
    void * pSessionTracker;// Offset=0x0 Size=0x4
};

struct _XUPDATE_DOWNLOAD_PARAMS// Size=0xc (Id=2541)
{
    unsigned long dwTitleId;// Offset=0x0 Size=0x4
    unsigned long dwVersion;// Offset=0x4 Size=0x4
    struct _XUPDATE_DOWNLOAD_RESULTS * pResults;// Offset=0x8 Size=0x4
};

struct XPARTY_CONNECTIVITY// Size=0x22 (Id=2542)
{
    unsigned short neighborCount;// Offset=0x0 Size=0x2
    unsigned long neighbor[8];// Offset=0x2 Size=0x20
};

struct _XSTORAGE_UPLOAD_FROM_MEMORY_PARAMS// Size=0x14 (Id=2543)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long dwServerPathLength;// Offset=0x4 Size=0x4
    unsigned short * wszServerPath;// Offset=0x8 Size=0x4
    unsigned long dwBufferSize;// Offset=0xc Size=0x4
    unsigned long dwBufferPointer;// Offset=0x10 Size=0x4
};

struct _DOWNLOAD_QUEUE_MODIFY_ITEMS_REQUEST// Size=0x1e (Id=2544)
{
    unsigned long long xUserId;// Offset=0x0 Size=0x8
    unsigned long nQueueId;// Offset=0x8 Size=0x4
    struct _FILETIME ftLastModified;// Offset=0xc Size=0x8
    unsigned short wNumItems;// Offset=0x14 Size=0x2
    struct _GENERIC_LIST_ITEM_MODIFICATION_INFO * pModInfo;// Offset=0x16 Size=0x4
    struct _DOWNLOAD_QUEUE_MODIFY_ITEMS_RESPONSE * pResponse;// Offset=0x1a Size=0x4
};

struct _DVD_XGD2_DISC_AUTH_RESULT// Size=0x28 (Id=2545)
{
    enum _DVD_XGD2_DISC_AUTH_RESULT_CODE ResultCode;// Offset=0x0 Size=0x4
    union // Size=0x1c (Id=0)
    {
        struct _DVD_XGD2_DISC_AUTH_RESULT_HV_MARSHAL HvMarshal;// Offset=0x4 Size=0x8
        struct _DVD_XGD2_DISC_AUTH_RESULT_INVALID_HV_STATE InvalidHvState;// Offset=0x4 Size=0x8
        struct _DVD_XGD2_DISC_AUTH_RESULT_GET_AUTH_PAGE GetAuthPage;// Offset=0x4 Size=0x4
        struct _DVD_XGD2_DISC_AUTH_RESULT_GET_XCONTROL GetXControl;// Offset=0x4 Size=0x4
        struct _DVD_XGD2_DISC_AUTH_RESULT_HCRT_HEADER HcrtHeader;// Offset=0x4 Size=0x2
        struct _DVD_XGD2_DISC_AUTH_RESULT_CHALLENGE_COUNT ChallengeCount;// Offset=0x4 Size=0x4
        struct _DVD_XGD2_DISC_AUTH_RESULT_GET_NEXT_CHALLENGE GetNextChallenge;// Offset=0x4 Size=0x4
        struct _DVD_XGD2_DISC_AUTH_RESULT_RECALIBRATE Recalibrate;// Offset=0x4 Size=0x8
        struct _DVD_XGD2_DISC_AUTH_RESULT_AUTH_PAGE_HEADER AuthPageHeader;// Offset=0x4 Size=0x2
        struct _DVD_XGD2_DISC_AUTH_RESULT_IO_ERROR IoError;// Offset=0x4 Size=0x18
        struct _DVD_XGD2_DISC_AUTH_RESULT_CHALLENGE Challenge;// Offset=0x4 Size=0x14
        struct _DVD_XGD2_DISC_AUTH_RESULT_INVALID_LBA_STATE InvalidLbaState;// Offset=0x4 Size=0x4
        struct _DVD_XGD2_DISC_AUTH_RESULT_LBA_IO_ERROR LbaIoError;// Offset=0x4 Size=0xc
        struct _DVD_XGD2_DISC_AUTH_RESULT_LBA_FAILURE LbaFailure;// Offset=0x4 Size=0x24
    };
};

struct _XAMACCOUNTINFO// Size=0x17c (Id=2546)
{
    unsigned long dwReserved;// Offset=0x0 Size=0x4
    unsigned long dwLiveFlags;// Offset=0x4 Size=0x4
    wchar_t szGamerTag[16];// Offset=0x8 Size=0x20
    unsigned long long xuidOnline;// Offset=0x28 Size=0x8
    unsigned long dwCachedUserFlags;// Offset=0x30 Size=0x4
    unsigned long dwOnlineServiceNetworkID;// Offset=0x34 Size=0x4
    unsigned char rgbPasscode[4];// Offset=0x38 Size=0x4
    char szOnlineDomain[20];// Offset=0x3c Size=0x14
    char szOnlineKerberosRealm[24];// Offset=0x50 Size=0x18
    unsigned char rgbOnlineKey[16];// Offset=0x68 Size=0x10
    char szUserPassportMembername[114];// Offset=0x78 Size=0x72
    char rgcUserPassportPassword[32];// Offset=0xea Size=0x20
    char szOwnerPassportMembername[114];// Offset=0x10a Size=0x72
};

struct tagSTATSTG// Size=0x48 (Id=2547)
{
    unsigned short * pwcsName;// Offset=0x0 Size=0x4
    unsigned long type;// Offset=0x4 Size=0x4
    union _ULARGE_INTEGER cbSize;// Offset=0x8 Size=0x8
    struct _FILETIME mtime;// Offset=0x10 Size=0x8
    struct _FILETIME ctime;// Offset=0x18 Size=0x8
    struct _FILETIME atime;// Offset=0x20 Size=0x8
    unsigned long grfMode;// Offset=0x28 Size=0x4
    unsigned long grfLocksSupported;// Offset=0x2c Size=0x4
    struct _GUID clsid;// Offset=0x30 Size=0x10
    unsigned long grfStateBits;// Offset=0x40 Size=0x4
    unsigned long reserved;// Offset=0x44 Size=0x4
};

struct _KEXCEPTION_STACK_FRAME// Size=0x700 (Id=2548)
{
    struct _KTRAP_FRAME TrapFrame;// Offset=0x0 Size=0x1c0
    unsigned char SlackSpace[1344];// Offset=0x1c0 Size=0x540
};

struct _XPROFILE_SETTING_READ_RESULT// Size=0x6 (Id=2549)
{
    unsigned short wSettingsLen;// Offset=0x0 Size=0x2
    struct _XUSER_ONLINE_PROFILE_SETTING * pSettings;// Offset=0x2 Size=0x4
};

struct XVOICE_OBJECT// Size=0x24 (Id=2550)
{
    unsigned long DeviceContext;// Offset=0x0 Size=0x4
    unsigned long MaxPackets;// Offset=0x4 Size=0x4
    struct XVOICE_PACKET_CONTEXT * PacketContextAllocation;// Offset=0x8 Size=0x4
    struct XVOICE_PACKET_QUEUE FreePacketContexts;// Offset=0xc Size=0x8
    struct _KEVENT DpcComplete;// Offset=0x14 Size=0x10
};

struct _unnamed_2551// Size=0x4 (Id=2551)
{
    short DataLength;// Offset=0x0 Size=0x2
    short TotalLength;// Offset=0x2 Size=0x2
};

union _unnamed_2552// Size=0x4 (Id=2552)
{
    struct _unnamed_2551 s1;// Offset=0x0 Size=0x4
    unsigned long Length;// Offset=0x0 Size=0x4
};

struct _unnamed_2553// Size=0x4 (Id=2553)
{
    short Type;// Offset=0x0 Size=0x2
    short DataInfoOffset;// Offset=0x2 Size=0x2
};

union _unnamed_2554// Size=0x4 (Id=2554)
{
    struct _unnamed_2553 s2;// Offset=0x0 Size=0x4
    unsigned long ZeroInit;// Offset=0x0 Size=0x4
};

struct _PORT_MESSAGE// Size=0x18 (Id=2555)
{
    union _unnamed_2552 u1;// Offset=0x0 Size=0x4
    union _unnamed_2554 u2;// Offset=0x4 Size=0x4
    union // Size=0x8 (Id=0)
    {
        struct _CLIENT_ID ClientId;// Offset=0x8 Size=0x8
        float DoNotUseThisField;// Offset=0x8 Size=0x8
    };
    unsigned long MessageId;// Offset=0x10 Size=0x4
    union // Size=0x4 (Id=0)
    {
        unsigned long ClientViewSize;// Offset=0x14 Size=0x4
        unsigned long CallbackId;// Offset=0x14 Size=0x4
    };
};

struct XUSER_PARTY_STATE// Size=0x3c (Id=2556)
{
    struct XNKID xnkidHost;// Offset=0x0 Size=0x8
    struct XNKEY xnkeyHost;// Offset=0x8 Size=0x10
    struct XNADDR xnaddrHost;// Offset=0x18 Size=0x24
};

struct _XMSG_GAMEINVITE_ANSWER_INFO// Size=0x48 (Id=2557)
{
    unsigned long long xuidInvitingUser;// Offset=0x0 Size=0x8
    unsigned long dwTitleID;// Offset=0x8 Size=0x4
    struct XNKID sessionID;// Offset=0xc Size=0x8
    struct XNADDR xnaddrHost;// Offset=0x14 Size=0x24
    struct XNKEY xnkeyHost;// Offset=0x38 Size=0x10
};

struct _XIPTV_DVR_QUERY_STATUS// Size=0x18 (Id=2558)
{
    enum XIPTV_DVR_STATUS_FLAGS CurrentStatus;// Offset=0x0 Size=0x4
    unsigned long StatusParam;// Offset=0x4 Size=0x4
    unsigned long long Internal0;// Offset=0x8 Size=0x8
    unsigned long long Internal1;// Offset=0x10 Size=0x8
};

struct _HVSTATS_CORE// Size=0x908 (Id=2559)
{
    struct _HVSTATS_TLB TlbKm;// Offset=0x0 Size=0x480
    struct _HVSTATS_TLB TlbUm;// Offset=0x480 Size=0x480
    unsigned long TlbFlush;// Offset=0x900 Size=0x4
    unsigned long TlbStwcxBug;// Offset=0x904 Size=0x4
};

struct _XPARTY_AUTOMATION_INPROC_CALL_PARAMS// Size=0x8 (Id=2560)
{
    unsigned long msgId;// Offset=0x0 Size=0x4
    unsigned long pParams;// Offset=0x4 Size=0x4
};

struct _unnamed_2561// Size=0x10 (Id=2561)
{
    unsigned long DesiredAccess;// Offset=0x0 Size=0x4
    unsigned long Options;// Offset=0x4 Size=0x4
    unsigned short FileAttributes;// Offset=0x8 Size=0x2
    unsigned short ShareAccess;// Offset=0xa Size=0x2
    struct _STRING * RemainingName;// Offset=0xc Size=0x4
};

struct _unnamed_2562// Size=0x10 (Id=2562)
{
    unsigned long Length;// Offset=0x0 Size=0x4
    union // Size=0x4 (Id=0)
    {
        unsigned long BufferOffset;// Offset=0x4 Size=0x4
        void * CacheBuffer;// Offset=0x4 Size=0x4
    };
    union _LARGE_INTEGER ByteOffset;// Offset=0x8 Size=0x8
};

struct _unnamed_2563// Size=0x8 (Id=2563)
{
    unsigned long Length;// Offset=0x0 Size=0x4
    struct _STRING * FileName;// Offset=0x4 Size=0x4
};

struct _unnamed_2564// Size=0x8 (Id=2564)
{
    unsigned long Length;// Offset=0x0 Size=0x4
    enum _FILE_INFORMATION_CLASS FileInformationClass;// Offset=0x4 Size=0x4
};

struct _unnamed_2565// Size=0xc (Id=2565)
{
    unsigned long Length;// Offset=0x0 Size=0x4
    enum _FILE_INFORMATION_CLASS FileInformationClass;// Offset=0x4 Size=0x4
    struct _FILE_OBJECT * FileObject;// Offset=0x8 Size=0x4
};

struct _unnamed_2566// Size=0x8 (Id=2566)
{
    unsigned long Length;// Offset=0x0 Size=0x4
    enum _FSINFOCLASS FsInformationClass;// Offset=0x4 Size=0x4
};

struct _unnamed_2567// Size=0x10 (Id=2567)
{
    unsigned long OutputBufferLength;// Offset=0x0 Size=0x4
    void * InputBuffer;// Offset=0x4 Size=0x4
    unsigned long InputBufferLength;// Offset=0x8 Size=0x4
    unsigned long IoControlCode;// Offset=0xc Size=0x4
};

struct _unnamed_2568// Size=0x10 (Id=2568)
{
    unsigned long Length;// Offset=0x0 Size=0x4
    unsigned char * Buffer;// Offset=0x4 Size=0x4
    unsigned long SectorNumber;// Offset=0x8 Size=0x4
    unsigned long BufferOffset;// Offset=0xc Size=0x4
};

struct _unnamed_2569// Size=0x10 (Id=2569)
{
    void * Argument1;// Offset=0x0 Size=0x4
    void * Argument2;// Offset=0x4 Size=0x4
    void * Argument3;// Offset=0x8 Size=0x4
    void * Argument4;// Offset=0xc Size=0x4
};

union _unnamed_2570// Size=0x10 (Id=2570)
{
    struct _unnamed_2561 Create;// Offset=0x0 Size=0x10
    struct _unnamed_2562 Read;// Offset=0x0 Size=0x10
    struct _unnamed_2562 Write;// Offset=0x0 Size=0x10
    struct _unnamed_2563 QueryDirectory;// Offset=0x0 Size=0x8
    struct _unnamed_2564 QueryFile;// Offset=0x0 Size=0x8
    struct _unnamed_2565 SetFile;// Offset=0x0 Size=0xc
    struct _unnamed_2566 QueryVolume;// Offset=0x0 Size=0x8
    struct _unnamed_2566 SetVolume;// Offset=0x0 Size=0x8
    struct _unnamed_2567 DeviceIoControl;// Offset=0x0 Size=0x10
    struct _unnamed_2568 SectorIo;// Offset=0x0 Size=0x10
    struct _unnamed_2569 Others;// Offset=0x0 Size=0x10
};

struct _IO_STACK_LOCATION// Size=0x24 (Id=2571)
{
    unsigned char MajorFunction;// Offset=0x0 Size=0x1
    unsigned char MinorFunction;// Offset=0x1 Size=0x1
    unsigned char Flags;// Offset=0x2 Size=0x1
    unsigned char Control;// Offset=0x3 Size=0x1
    union _unnamed_2570 Parameters;// Offset=0x4 Size=0x10
    struct _DEVICE_OBJECT * DeviceObject;// Offset=0x14 Size=0x4
    struct _FILE_OBJECT * FileObject;// Offset=0x18 Size=0x4
    long  ( * CompletionRoutine)(struct _DEVICE_OBJECT * ,struct _IRP * ,void * );// Offset=0x1c Size=0x4
    void * Context;// Offset=0x20 Size=0x4
};

struct XVOICE_ENABLETESTHOOKPARAM// Size=0x10 (Id=2572)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    enum _XVOICETESTHOOKTYPE eHookType;// Offset=0x4 Size=0x4
    char * pszFileName;// Offset=0x8 Size=0x4
    unsigned long dwFlags;// Offset=0xc Size=0x4
};

struct _STF_VOLUME_DESCRIPTOR// Size=0x24 (Id=2573)
{
    unsigned char DescriptorLength;// Offset=0x0 Size=0x1
    unsigned char Version;// Offset=0x1 Size=0x1
    struct // Size=0x1 (Id=0)
    {
        unsigned char ReadOnlyFormat:1;// Offset=0x2 Size=0x1 BitOffset=0x0 BitSize=0x1
        unsigned char RootActiveIndex:1;// Offset=0x2 Size=0x1 BitOffset=0x1 BitSize=0x1
        unsigned char DirectoryOverallocated:1;// Offset=0x2 Size=0x1 BitOffset=0x2 BitSize=0x1
        unsigned char DirectoryIndexBoundsValid:1;// Offset=0x2 Size=0x1 BitOffset=0x3 BitSize=0x1
    };
    unsigned char DirectoryAllocationBlocks0;// Offset=0x3 Size=0x1
    unsigned char DirectoryAllocationBlocks1;// Offset=0x4 Size=0x1
    unsigned char DirectoryFirstBlockNumber0;// Offset=0x5 Size=0x1
    unsigned char DirectoryFirstBlockNumber1;// Offset=0x6 Size=0x1
    unsigned char DirectoryFirstBlockNumber2;// Offset=0x7 Size=0x1
    unsigned char RootHash[20];// Offset=0x8 Size=0x14
    unsigned long NumberOfTotalBlocks;// Offset=0x1c Size=0x4
    unsigned long NumberOfFreeBlocks;// Offset=0x20 Size=0x4
};

struct D3DXVECTOR4// Size=0x10 (Id=2574)
{
    float x;// Offset=0x0 Size=0x4
    float y;// Offset=0x4 Size=0x4
    float z;// Offset=0x8 Size=0x4
    float w;// Offset=0xc Size=0x4
};

struct _P_INVITATION_ITEM// Size=0x1c (Id=2575)
{
    unsigned long long qwHostID;// Offset=0x0 Size=0x8
    struct XNKID MatchSessionID;// Offset=0x8 Size=0x8
    unsigned long dwTitleID;// Offset=0x10 Size=0x4
    struct _FILETIME ftSent;// Offset=0x14 Size=0x8
};

struct _XSIGNATURE_ACKNOWLEDGE_LICENSES_DELIVERY_REQUEST// Size=0x12 (Id=2576)
{
    unsigned long long UserXuid;// Offset=0x0 Size=0x8
    unsigned short wMediaOfferIDCount;// Offset=0x8 Size=0x2
    struct _MIID_OFFERID_PAIR * pMediaOfferIDs;// Offset=0xa Size=0x4
    struct _XSIGNATURE_ACKNOWLEDGE_LICENSES_DELIVERY_RESPONSE * pResults;// Offset=0xe Size=0x4
};

struct ID3DXMeshVtbl// Size=0x74 (Id=2577)
{
    HRESULT  ( * QueryInterface)(struct ID3DXMesh * ,const struct _GUID * ,void ** );// Offset=0x0 Size=0x4
    unsigned long  ( * AddRef)(struct ID3DXMesh * );// Offset=0x4 Size=0x4
    unsigned long  ( * Release)(struct ID3DXMesh * );// Offset=0x8 Size=0x4
    HRESULT  ( * DrawSubset)(struct ID3DXMesh * ,unsigned long );// Offset=0xc Size=0x4
    unsigned long  ( * GetNumFaces)(struct ID3DXMesh * );// Offset=0x10 Size=0x4
    unsigned long  ( * GetNumVertices)(struct ID3DXMesh * );// Offset=0x14 Size=0x4
    unsigned long  ( * GetFVF)(struct ID3DXMesh * );// Offset=0x18 Size=0x4
    HRESULT  ( * GetDeclaration)(struct ID3DXMesh * ,struct _D3DVERTEXELEMENT9 * );// Offset=0x1c Size=0x4
    unsigned long  ( * GetNumBytesPerVertex)(struct ID3DXMesh * );// Offset=0x20 Size=0x4
    unsigned long  ( * GetOptions)(struct ID3DXMesh * );// Offset=0x24 Size=0x4
    HRESULT  ( * GetDevice)(struct ID3DXMesh * ,struct D3DDevice ** );// Offset=0x28 Size=0x4
    HRESULT  ( * CloneMeshFVF)(struct ID3DXMesh * ,unsigned long ,unsigned long ,struct D3DDevice * ,struct ID3DXMesh ** );// Offset=0x2c Size=0x4
    HRESULT  ( * CloneMesh)(struct ID3DXMesh * ,unsigned long ,struct _D3DVERTEXELEMENT9 * ,struct D3DDevice * ,struct ID3DXMesh ** );// Offset=0x30 Size=0x4
    HRESULT  ( * GetVertexBuffer)(struct ID3DXMesh * ,struct D3DVertexBuffer ** );// Offset=0x34 Size=0x4
    HRESULT  ( * GetIndexBuffer)(struct ID3DXMesh * ,struct D3DIndexBuffer ** );// Offset=0x38 Size=0x4
    HRESULT  ( * LockVertexBuffer)(struct ID3DXMesh * ,unsigned long ,void ** );// Offset=0x3c Size=0x4
    HRESULT  ( * UnlockVertexBuffer)(struct ID3DXMesh * );// Offset=0x40 Size=0x4
    HRESULT  ( * LockIndexBuffer)(struct ID3DXMesh * ,unsigned long ,void ** );// Offset=0x44 Size=0x4
    HRESULT  ( * UnlockIndexBuffer)(struct ID3DXMesh * );// Offset=0x48 Size=0x4
    HRESULT  ( * GetAttributeTable)(struct ID3DXMesh * ,struct _D3DXATTRIBUTERANGE * ,unsigned long * );// Offset=0x4c Size=0x4
    HRESULT  ( * ConvertPointRepsToAdjacency)(struct ID3DXMesh * ,unsigned long * ,unsigned long * );// Offset=0x50 Size=0x4
    HRESULT  ( * ConvertAdjacencyToPointReps)(struct ID3DXMesh * ,unsigned long * ,unsigned long * );// Offset=0x54 Size=0x4
    HRESULT  ( * GenerateAdjacency)(struct ID3DXMesh * ,float ,unsigned long * );// Offset=0x58 Size=0x4
    HRESULT  ( * UpdateSemantics)(struct ID3DXMesh * ,struct _D3DVERTEXELEMENT9 * );// Offset=0x5c Size=0x4
    HRESULT  ( * LockAttributeBuffer)(struct ID3DXMesh * ,unsigned long ,unsigned long ** );// Offset=0x60 Size=0x4
    HRESULT  ( * UnlockAttributeBuffer)(struct ID3DXMesh * );// Offset=0x64 Size=0x4
    HRESULT  ( * Optimize)(struct ID3DXMesh * ,unsigned long ,unsigned long * ,unsigned long * ,unsigned long * ,struct ID3DXBuffer ** ,struct ID3DXMesh ** );// Offset=0x68 Size=0x4
    HRESULT  ( * OptimizeInplace)(struct ID3DXMesh * ,unsigned long ,unsigned long * ,unsigned long * ,unsigned long * ,struct ID3DXBuffer ** );// Offset=0x6c Size=0x4
    HRESULT  ( * SetAttributeTable)(struct ID3DXMesh * ,struct _D3DXATTRIBUTERANGE * ,unsigned long );// Offset=0x70 Size=0x4
};

struct _XCONTENT_REFERRAL_RESPONSE// Size=0x13a (Id=2578)
{
    unsigned long dwPackageSize;// Offset=0x0 Size=0x4
    unsigned long dwInstallSize;// Offset=0x4 Size=0x4
    unsigned char rgbSymKey[16];// Offset=0x8 Size=0x10
    unsigned char rgbPubKey[284];// Offset=0x18 Size=0x11c
    unsigned short wNumLocations;// Offset=0x134 Size=0x2
    struct _XREFERRAL_LOCATION * pReferralLocations;// Offset=0x136 Size=0x4
};

struct _QUERY_ADD_REQUEST// Size=0x24 (Id=2579)
{
    unsigned long dwTitleId;// Offset=0x0 Size=0x4
    unsigned long long qwUserId;// Offset=0x4 Size=0x8
    unsigned long long qwTeamId;// Offset=0xc Size=0x8
    unsigned long dwDatasetId;// Offset=0x14 Size=0x4
    unsigned long dwNumAttributes;// Offset=0x18 Size=0x4
    struct _XONLINE_QUERY_ATTRIBUTE * pAttributes;// Offset=0x1c Size=0x4
    struct _QUERY_ADD_RESULT * pEntityId;// Offset=0x20 Size=0x4
};

struct _STF_DIRECTORY_ENTRY// Size=0x40 (Id=2580)
{
    unsigned char FileName[40];// Offset=0x0 Size=0x28
    struct // Size=0x1 (Id=0)
    {
        unsigned char FileNameLength:6;// Offset=0x28 Size=0x1 BitOffset=0x0 BitSize=0x6
        unsigned char Contiguous:1;// Offset=0x28 Size=0x1 BitOffset=0x6 BitSize=0x1
        unsigned char Directory:1;// Offset=0x28 Size=0x1 BitOffset=0x7 BitSize=0x1
    };
    unsigned char ValidDataBlocks0;// Offset=0x29 Size=0x1
    unsigned char ValidDataBlocks1;// Offset=0x2a Size=0x1
    unsigned char ValidDataBlocks2;// Offset=0x2b Size=0x1
    unsigned char AllocationBlocks0;// Offset=0x2c Size=0x1
    unsigned char AllocationBlocks1;// Offset=0x2d Size=0x1
    unsigned char AllocationBlocks2;// Offset=0x2e Size=0x1
    unsigned char FirstBlockNumber0;// Offset=0x2f Size=0x1
    unsigned char FirstBlockNumber1;// Offset=0x30 Size=0x1
    unsigned char FirstBlockNumber2;// Offset=0x31 Size=0x1
    unsigned short DirectoryIndex;// Offset=0x32 Size=0x2
    union _STF_FILE_BOUNDS FileBounds;// Offset=0x34 Size=0x4
    union _STF_TIME_STAMP CreationTimeStamp;// Offset=0x38 Size=0x4
    union _STF_TIME_STAMP LastWriteTimeStamp;// Offset=0x3c Size=0x4
};

struct _REMINDER_ITEM// Size=0xf8 (Id=2581)
{
    struct _GUID reminderId;// Offset=0x0 Size=0x10
    unsigned long dwTitleId;// Offset=0x10 Size=0x4
    struct _FILETIME ftStartTime;// Offset=0x14 Size=0x8
    struct _FILETIME ftEndTime;// Offset=0x1c Size=0x8
    wchar_t wszReminderTitle[32];// Offset=0x24 Size=0x40
    wchar_t wszReminderSubtitle[32];// Offset=0x64 Size=0x40
    wchar_t wszReminderParam[40];// Offset=0xa4 Size=0x50
    int fNotified;// Offset=0xf4 Size=0x4
};

struct ID3DXEffectVtbl// Size=0x13c (Id=2582)
{
    HRESULT  ( * QueryInterface)(struct ID3DXEffect * ,const struct _GUID * ,void ** );// Offset=0x0 Size=0x4
    unsigned long  ( * AddRef)(struct ID3DXEffect * );// Offset=0x4 Size=0x4
    unsigned long  ( * Release)(struct ID3DXEffect * );// Offset=0x8 Size=0x4
    HRESULT  ( * GetDesc)(struct ID3DXEffect * ,struct _D3DXEFFECT_DESC * );// Offset=0xc Size=0x4
    HRESULT  ( * GetParameterDesc)(struct ID3DXEffect * ,unsigned int ,struct _D3DXPARAMETER_DESC * );// Offset=0x10 Size=0x4
    HRESULT  ( * GetTechniqueDesc)(struct ID3DXEffect * ,unsigned int ,struct _D3DXTECHNIQUE_DESC * );// Offset=0x14 Size=0x4
    HRESULT  ( * GetPassDesc)(struct ID3DXEffect * ,unsigned int ,struct _D3DXPASS_DESC * );// Offset=0x18 Size=0x4
    HRESULT  ( * GetFunctionDesc)(struct ID3DXEffect * ,unsigned int ,struct _D3DXFUNCTION_DESC * );// Offset=0x1c Size=0x4
    unsigned int  ( * GetParameter)(struct ID3DXEffect * ,unsigned int ,unsigned int );// Offset=0x20 Size=0x4
    unsigned int  ( * GetParameterByName)(struct ID3DXEffect * ,unsigned int ,char * );// Offset=0x24 Size=0x4
    unsigned int  ( * GetParameterBySemantic)(struct ID3DXEffect * ,unsigned int ,char * );// Offset=0x28 Size=0x4
    unsigned int  ( * GetParameterElement)(struct ID3DXEffect * ,unsigned int ,unsigned int );// Offset=0x2c Size=0x4
    unsigned int  ( * GetTechnique)(struct ID3DXEffect * ,unsigned int );// Offset=0x30 Size=0x4
    unsigned int  ( * GetTechniqueByName)(struct ID3DXEffect * ,char * );// Offset=0x34 Size=0x4
    unsigned int  ( * GetPass)(struct ID3DXEffect * ,unsigned int ,unsigned int );// Offset=0x38 Size=0x4
    unsigned int  ( * GetPassByName)(struct ID3DXEffect * ,unsigned int ,char * );// Offset=0x3c Size=0x4
    unsigned int  ( * GetFunction)(struct ID3DXEffect * ,unsigned int );// Offset=0x40 Size=0x4
    unsigned int  ( * GetFunctionByName)(struct ID3DXEffect * ,char * );// Offset=0x44 Size=0x4
    unsigned int  ( * GetAnnotation)(struct ID3DXEffect * ,unsigned int ,unsigned int );// Offset=0x48 Size=0x4
    unsigned int  ( * GetAnnotationByName)(struct ID3DXEffect * ,unsigned int ,char * );// Offset=0x4c Size=0x4
    HRESULT  ( * SetValue)(struct ID3DXEffect * ,unsigned int ,void * ,unsigned int );// Offset=0x50 Size=0x4
    HRESULT  ( * GetValue)(struct ID3DXEffect * ,unsigned int ,void * ,unsigned int );// Offset=0x54 Size=0x4
    HRESULT  ( * SetBool)(struct ID3DXEffect * ,unsigned int ,int );// Offset=0x58 Size=0x4
    HRESULT  ( * GetBool)(struct ID3DXEffect * ,unsigned int ,int * );// Offset=0x5c Size=0x4
    HRESULT  ( * SetBoolArray)(struct ID3DXEffect * ,unsigned int ,int * ,unsigned int );// Offset=0x60 Size=0x4
    HRESULT  ( * GetBoolArray)(struct ID3DXEffect * ,unsigned int ,int * ,unsigned int );// Offset=0x64 Size=0x4
    HRESULT  ( * SetInt)(struct ID3DXEffect * ,unsigned int ,int );// Offset=0x68 Size=0x4
    HRESULT  ( * GetInt)(struct ID3DXEffect * ,unsigned int ,int * );// Offset=0x6c Size=0x4
    HRESULT  ( * SetIntArray)(struct ID3DXEffect * ,unsigned int ,int * ,unsigned int );// Offset=0x70 Size=0x4
    HRESULT  ( * GetIntArray)(struct ID3DXEffect * ,unsigned int ,int * ,unsigned int );// Offset=0x74 Size=0x4
    HRESULT  ( * SetFloat)(struct ID3DXEffect * ,unsigned int ,float );// Offset=0x78 Size=0x4
    HRESULT  ( * GetFloat)(struct ID3DXEffect * ,unsigned int ,float * );// Offset=0x7c Size=0x4
    HRESULT  ( * SetFloatArray)(struct ID3DXEffect * ,unsigned int ,float * ,unsigned int );// Offset=0x80 Size=0x4
    HRESULT  ( * GetFloatArray)(struct ID3DXEffect * ,unsigned int ,float * ,unsigned int );// Offset=0x84 Size=0x4
    HRESULT  ( * SetVector)(struct ID3DXEffect * ,unsigned int ,struct D3DXVECTOR4 * );// Offset=0x88 Size=0x4
    HRESULT  ( * GetVector)(struct ID3DXEffect * ,unsigned int ,struct D3DXVECTOR4 * );// Offset=0x8c Size=0x4
    HRESULT  ( * SetVectorArray)(struct ID3DXEffect * ,unsigned int ,struct D3DXVECTOR4 * ,unsigned int );// Offset=0x90 Size=0x4
    HRESULT  ( * GetVectorArray)(struct ID3DXEffect * ,unsigned int ,struct D3DXVECTOR4 * ,unsigned int );// Offset=0x94 Size=0x4
    HRESULT  ( * SetMatrix)(struct ID3DXEffect * ,unsigned int ,struct _D3DMATRIX * );// Offset=0x98 Size=0x4
    HRESULT  ( * GetMatrix)(struct ID3DXEffect * ,unsigned int ,struct _D3DMATRIX * );// Offset=0x9c Size=0x4
    HRESULT  ( * SetMatrixArray)(struct ID3DXEffect * ,unsigned int ,struct _D3DMATRIX * ,unsigned int );// Offset=0xa0 Size=0x4
    HRESULT  ( * GetMatrixArray)(struct ID3DXEffect * ,unsigned int ,struct _D3DMATRIX * ,unsigned int );// Offset=0xa4 Size=0x4
    HRESULT  ( * SetMatrixPointerArray)(struct ID3DXEffect * ,unsigned int ,struct _D3DMATRIX ** ,unsigned int );// Offset=0xa8 Size=0x4
    HRESULT  ( * GetMatrixPointerArray)(struct ID3DXEffect * ,unsigned int ,struct _D3DMATRIX ** ,unsigned int );// Offset=0xac Size=0x4
    HRESULT  ( * SetMatrixTranspose)(struct ID3DXEffect * ,unsigned int ,struct _D3DMATRIX * );// Offset=0xb0 Size=0x4
    HRESULT  ( * GetMatrixTranspose)(struct ID3DXEffect * ,unsigned int ,struct _D3DMATRIX * );// Offset=0xb4 Size=0x4
    HRESULT  ( * SetMatrixTransposeArray)(struct ID3DXEffect * ,unsigned int ,struct _D3DMATRIX * ,unsigned int );// Offset=0xb8 Size=0x4
    HRESULT  ( * GetMatrixTransposeArray)(struct ID3DXEffect * ,unsigned int ,struct _D3DMATRIX * ,unsigned int );// Offset=0xbc Size=0x4
    HRESULT  ( * SetMatrixTransposePointerArray)(struct ID3DXEffect * ,unsigned int ,struct _D3DMATRIX ** ,unsigned int );// Offset=0xc0 Size=0x4
    HRESULT  ( * GetMatrixTransposePointerArray)(struct ID3DXEffect * ,unsigned int ,struct _D3DMATRIX ** ,unsigned int );// Offset=0xc4 Size=0x4
    HRESULT  ( * SetString)(struct ID3DXEffect * ,unsigned int ,char * );// Offset=0xc8 Size=0x4
    HRESULT  ( * GetString)(struct ID3DXEffect * ,unsigned int ,char ** );// Offset=0xcc Size=0x4
    HRESULT  ( * SetTexture)(struct ID3DXEffect * ,unsigned int ,struct D3DBaseTexture * );// Offset=0xd0 Size=0x4
    HRESULT  ( * GetTexture)(struct ID3DXEffect * ,unsigned int ,struct D3DBaseTexture ** );// Offset=0xd4 Size=0x4
    HRESULT  ( * SetPixelShader)(struct ID3DXEffect * ,unsigned int ,struct D3DPixelShader * );// Offset=0xd8 Size=0x4
    HRESULT  ( * GetPixelShader)(struct ID3DXEffect * ,unsigned int ,struct D3DPixelShader ** );// Offset=0xdc Size=0x4
    HRESULT  ( * SetVertexShader)(struct ID3DXEffect * ,unsigned int ,struct D3DVertexShader * );// Offset=0xe0 Size=0x4
    HRESULT  ( * GetVertexShader)(struct ID3DXEffect * ,unsigned int ,struct D3DVertexShader ** );// Offset=0xe4 Size=0x4
    HRESULT  ( * SetArrayRange)(struct ID3DXEffect * ,unsigned int ,unsigned int ,unsigned int );// Offset=0xe8 Size=0x4
    HRESULT  ( * GetPool)(struct ID3DXEffect * ,struct ID3DXEffectPool ** );// Offset=0xec Size=0x4
    HRESULT  ( * SetTechnique)(struct ID3DXEffect * ,unsigned int );// Offset=0xf0 Size=0x4
    unsigned int  ( * GetCurrentTechnique)(struct ID3DXEffect * );// Offset=0xf4 Size=0x4
    HRESULT  ( * ValidateTechnique)(struct ID3DXEffect * ,unsigned int );// Offset=0xf8 Size=0x4
    HRESULT  ( * FindNextValidTechnique)(struct ID3DXEffect * ,unsigned int ,unsigned int * );// Offset=0xfc Size=0x4
    int  ( * IsParameterUsed)(struct ID3DXEffect * ,unsigned int ,unsigned int );// Offset=0x100 Size=0x4
    HRESULT  ( * Begin)(struct ID3DXEffect * ,unsigned int * ,unsigned long );// Offset=0x104 Size=0x4
    HRESULT  ( * BeginPass)(struct ID3DXEffect * ,unsigned int );// Offset=0x108 Size=0x4
    HRESULT  ( * CommitChanges)(struct ID3DXEffect * );// Offset=0x10c Size=0x4
    HRESULT  ( * EndPass)(struct ID3DXEffect * );// Offset=0x110 Size=0x4
    HRESULT  ( * End)(struct ID3DXEffect * );// Offset=0x114 Size=0x4
    HRESULT  ( * GetDevice)(struct ID3DXEffect * ,struct D3DDevice ** );// Offset=0x118 Size=0x4
    HRESULT  ( * OnLostDevice)(struct ID3DXEffect * );// Offset=0x11c Size=0x4
    HRESULT  ( * OnResetDevice)(struct ID3DXEffect * );// Offset=0x120 Size=0x4
    HRESULT  ( * SetStateManager)(struct ID3DXEffect * ,struct ID3DXEffectStateManager * );// Offset=0x124 Size=0x4
    HRESULT  ( * GetStateManager)(struct ID3DXEffect * ,struct ID3DXEffectStateManager ** );// Offset=0x128 Size=0x4
    HRESULT  ( * BeginParameterBlock)(struct ID3DXEffect * );// Offset=0x12c Size=0x4
    unsigned int  ( * EndParameterBlock)(struct ID3DXEffect * );// Offset=0x130 Size=0x4
    HRESULT  ( * ApplyParameterBlock)(struct ID3DXEffect * ,unsigned int );// Offset=0x134 Size=0x4
    HRESULT  ( * CloneEffect)(struct ID3DXEffect * ,struct D3DDevice * ,struct ID3DXEffect ** );// Offset=0x138 Size=0x4
};

struct XGI_ANID_MSG// Size=0x10 (Id=2583)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long cchAnIdBuffer;// Offset=0x4 Size=0x4
    char * pszAnIdBuffer;// Offset=0x8 Size=0x4
    int fBlock;// Offset=0xc Size=0x4
};

struct _XCONFIG_IPTV_SETTINGS// Size=0x200 (Id=2584)
{
    unsigned long CheckSum;// Offset=0x0 Size=0x4
    unsigned long Version;// Offset=0x4 Size=0x4
    wchar_t ServiceProviderName[60];// Offset=0x8 Size=0x78
    wchar_t ProvisioningServerURL[64];// Offset=0x80 Size=0x80
    wchar_t SupportInfo[64];// Offset=0x100 Size=0x80
    wchar_t BootstrapServerURL[64];// Offset=0x180 Size=0x80
};

struct _GENERIC_LIST_MODIFY_LIST_REQUEST// Size=0x22 (Id=2585)
{
    unsigned long long xUserId;// Offset=0x0 Size=0x8
    unsigned long nListType;// Offset=0x8 Size=0x4
    unsigned long nListId;// Offset=0xc Size=0x4
    struct _FILETIME ftLastModified;// Offset=0x10 Size=0x8
    unsigned short wXmlLength;// Offset=0x18 Size=0x2
    unsigned short * XmlProperties;// Offset=0x1a Size=0x4
    struct _GENERIC_LIST_MODIFY_LIST_RESPONSE * pResponse;// Offset=0x1e Size=0x4
};

struct _XSTORAGE_ENUMERATE_PARAMS// Size=0x18 (Id=2586)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long dwServerPathLength;// Offset=0x4 Size=0x4
    unsigned short * wszServerPath;// Offset=0x8 Size=0x4
    unsigned long dwStartingIndex;// Offset=0xc Size=0x4
    unsigned long dwMaxResultsToReturn;// Offset=0x10 Size=0x4
    struct _XSTORAGE_ENUMERATE_RESULTS * pResults;// Offset=0x14 Size=0x4
};

struct XONLINECONTENT_HEADER// Size=0x60 (Id=2587)
{
    struct CFHEADER cfheader;// Offset=0x0 Size=0x24
    struct CFRESERVE cfreserve;// Offset=0x24 Size=0x4
    struct _RC4_SHA_HEADER digestFolders;// Offset=0x28 Size=0x1c
    struct _RC4_SHA_HEADER digestFiles;// Offset=0x44 Size=0x1c
};

struct ID3DXSkinInfoVtbl// Size=0x60 (Id=2588)
{
    HRESULT  ( * QueryInterface)(struct ID3DXSkinInfo * ,const struct _GUID * ,void ** );// Offset=0x0 Size=0x4
    unsigned long  ( * AddRef)(struct ID3DXSkinInfo * );// Offset=0x4 Size=0x4
    unsigned long  ( * Release)(struct ID3DXSkinInfo * );// Offset=0x8 Size=0x4
    HRESULT  ( * SetBoneInfluence)(struct ID3DXSkinInfo * ,unsigned long ,unsigned long ,unsigned long * ,float * );// Offset=0xc Size=0x4
    unsigned long  ( * GetNumBoneInfluences)(struct ID3DXSkinInfo * ,unsigned long );// Offset=0x10 Size=0x4
    HRESULT  ( * GetBoneInfluence)(struct ID3DXSkinInfo * ,unsigned long ,unsigned long * ,float * );// Offset=0x14 Size=0x4
    HRESULT  ( * GetMaxVertexInfluences)(struct ID3DXSkinInfo * ,unsigned long * );// Offset=0x18 Size=0x4
    unsigned long  ( * GetNumBones)(struct ID3DXSkinInfo * );// Offset=0x1c Size=0x4
    HRESULT  ( * GetMaxFaceInfluences)(struct ID3DXSkinInfo * ,struct D3DIndexBuffer * ,unsigned long ,unsigned long * );// Offset=0x20 Size=0x4
    HRESULT  ( * SetMinBoneInfluence)(struct ID3DXSkinInfo * ,float );// Offset=0x24 Size=0x4
    float  ( * GetMinBoneInfluence)(struct ID3DXSkinInfo * );// Offset=0x28 Size=0x4
    HRESULT  ( * SetBoneName)(struct ID3DXSkinInfo * ,unsigned long ,char * );// Offset=0x2c Size=0x4
    char *  ( * GetBoneName)(struct ID3DXSkinInfo * ,unsigned long );// Offset=0x30 Size=0x4
    HRESULT  ( * SetBoneOffsetMatrix)(struct ID3DXSkinInfo * ,unsigned long ,struct _D3DMATRIX * );// Offset=0x34 Size=0x4
    struct _D3DMATRIX *  ( * GetBoneOffsetMatrix)(struct ID3DXSkinInfo * ,unsigned long );// Offset=0x38 Size=0x4
    HRESULT  ( * Clone)(struct ID3DXSkinInfo * ,struct ID3DXSkinInfo ** );// Offset=0x3c Size=0x4
    HRESULT  ( * Remap)(struct ID3DXSkinInfo * ,unsigned long ,unsigned long * );// Offset=0x40 Size=0x4
    HRESULT  ( * SetFVF)(struct ID3DXSkinInfo * ,unsigned long );// Offset=0x44 Size=0x4
    HRESULT  ( * SetDeclaration)(struct ID3DXSkinInfo * ,struct _D3DVERTEXELEMENT9 * );// Offset=0x48 Size=0x4
    unsigned long  ( * GetFVF)(struct ID3DXSkinInfo * );// Offset=0x4c Size=0x4
    HRESULT  ( * GetDeclaration)(struct ID3DXSkinInfo * ,struct _D3DVERTEXELEMENT9 * );// Offset=0x50 Size=0x4
    HRESULT  ( * UpdateSkinnedMesh)(struct ID3DXSkinInfo * ,struct _D3DMATRIX * ,struct _D3DMATRIX * ,void * ,void * );// Offset=0x54 Size=0x4
    HRESULT  ( * ConvertToBlendedMesh)(struct ID3DXSkinInfo * ,struct ID3DXMesh * ,unsigned long ,unsigned long * ,unsigned long * ,unsigned long * ,struct ID3DXBuffer ** ,unsigned long * ,unsigned long * ,struct ID3DXBuffer ** ,struct ID3DXMesh ** );// Offset=0x58 Size=0x4
    HRESULT  ( * ConvertToIndexedBlendedMesh)(struct ID3DXSkinInfo * ,struct ID3DXMesh * ,unsigned long ,unsigned long ,unsigned long * ,unsigned long * ,unsigned long * ,struct ID3DXBuffer ** ,unsigned long * ,unsigned long * ,struct ID3DXBuffer ** ,struct ID3DXMesh ** );// Offset=0x5c Size=0x4
};

struct _PASSPORT_SESSION_TOKEN_EX// Size=0x28 (Id=2589)
{
    unsigned char abSessionToken[28];// Offset=0x0 Size=0x1c
    unsigned short wNonceLength;// Offset=0x1c Size=0x2
    unsigned char * pbNonce;// Offset=0x1e Size=0x4
    unsigned short wCipherValueLength;// Offset=0x22 Size=0x2
    unsigned char * pbCipherValue;// Offset=0x24 Size=0x4
};

struct _XMSG_GAME_INVITE_ANSWER// Size=0x74 (Id=2590)
{
    unsigned long long XuidUser;// Offset=0x0 Size=0x8
    struct _XMSG_GAMEINVITE_ANSWER_INFO pAnswerInfo[1];// Offset=0x8 Size=0x48
    enum XMSG_INVITE_ANSWER_TYPE Answer;// Offset=0x50 Size=0x4
    int fFromGameInvite;// Offset=0x54 Size=0x4
    struct _XOVERLAPPED pXOverlapped[1];// Offset=0x58 Size=0x1c
};

struct PostRangeAttribute// Size=0xc (Id=2591)
{
    unsigned int Deref;// Offset=0x0 Size=0x4
    char * MinVal;// Offset=0x4 Size=0x4
    char * MaxVal;// Offset=0x8 Size=0x4
};

struct XMVECTORU32// Size=0x10 (Id=2592)
{
    union // Size=0x10 (Id=0)
    {
        unsigned int u[4];// Offset=0x0 Size=0x10
        struct __vector4 v;// Offset=0x0 Size=0x10
    };
};

struct _MEDIA_INSTANCE_URLS// Size=0x164 (Id=2593)
{
    struct _GUID MediaID;// Offset=0x0 Size=0x10
    struct _GUID MediaInstanceID;// Offset=0x10 Size=0x10
    unsigned long long qwPackageSize;// Offset=0x20 Size=0x8
    unsigned long long qwInstallSize;// Offset=0x28 Size=0x8
    unsigned char rgbSymKey[16];// Offset=0x30 Size=0x10
    unsigned char rgbPubKey[284];// Offset=0x40 Size=0x11c
    unsigned long dwUrlCount;// Offset=0x15c Size=0x4
    struct _TYPED_MEDIA_URL * pUrls;// Offset=0x160 Size=0x4
};

struct _XLAUNCHDATA_EPIX// Size=0x10c (Id=2594)
{
    unsigned long dwID;// Offset=0x0 Size=0x4
    unsigned long dwUserIndex;// Offset=0x4 Size=0x4
    unsigned long dwFlags;// Offset=0x8 Size=0x4
    wchar_t Param[128];// Offset=0xc Size=0x100
};

struct _XCONFIG_SYSTEM_SETTINGS// Size=0x10 (Id=2595)
{
    unsigned long Version;// Offset=0x0 Size=0x4
    union _LARGE_INTEGER AlarmTime;// Offset=0x4 Size=0x8
    unsigned long PreviousFlashVersion;// Offset=0xc Size=0x4
};

struct _XSIGNATURE_LICENSE_ACKNOWLEDGMENT// Size=0x24 (Id=2596)
{
    struct _MIID_OFFERID_PAIR mediaOfferID;// Offset=0x0 Size=0x20
    HRESULT hr;// Offset=0x20 Size=0x4
};

struct _MM_STATISTICS// Size=0x68 (Id=2597)
{
    unsigned long Length;// Offset=0x0 Size=0x4
    unsigned long TotalPhysicalPages;// Offset=0x4 Size=0x4
    unsigned long KernelPages;// Offset=0x8 Size=0x4
    unsigned long TitleAvailablePages;// Offset=0xc Size=0x4
    unsigned long TitleTotalVirtualMemoryBytes;// Offset=0x10 Size=0x4
    unsigned long TitleReservedVirtualMemoryBytes;// Offset=0x14 Size=0x4
    unsigned long TitlePhysicalPages;// Offset=0x18 Size=0x4
    unsigned long TitlePoolPages;// Offset=0x1c Size=0x4
    unsigned long TitleStackPages;// Offset=0x20 Size=0x4
    unsigned long TitleImagePages;// Offset=0x24 Size=0x4
    unsigned long TitleHeapPages;// Offset=0x28 Size=0x4
    unsigned long TitleVirtualPages;// Offset=0x2c Size=0x4
    unsigned long TitlePageTablePages;// Offset=0x30 Size=0x4
    unsigned long TitleCachePages;// Offset=0x34 Size=0x4
    unsigned long SystemAvailablePages;// Offset=0x38 Size=0x4
    unsigned long SystemTotalVirtualMemoryBytes;// Offset=0x3c Size=0x4
    unsigned long SystemReservedVirtualMemoryBytes;// Offset=0x40 Size=0x4
    unsigned long SystemPhysicalPages;// Offset=0x44 Size=0x4
    unsigned long SystemPoolPages;// Offset=0x48 Size=0x4
    unsigned long SystemStackPages;// Offset=0x4c Size=0x4
    unsigned long SystemImagePages;// Offset=0x50 Size=0x4
    unsigned long SystemHeapPages;// Offset=0x54 Size=0x4
    unsigned long SystemVirtualPages;// Offset=0x58 Size=0x4
    unsigned long SystemPageTablePages;// Offset=0x5c Size=0x4
    unsigned long SystemCachePages;// Offset=0x60 Size=0x4
    unsigned long HighestPhysicalPage;// Offset=0x64 Size=0x4
};

struct ID3DXLine// Size=0x4 (Id=2598)
{
    struct ID3DXLineVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct _CDROM_TOC// Size=0x324 (Id=2599)
{
    unsigned char Length[2];// Offset=0x0 Size=0x2
    unsigned char FirstTrack;// Offset=0x2 Size=0x1
    unsigned char LastTrack;// Offset=0x3 Size=0x1
    struct _TRACK_DATA TrackData[100];// Offset=0x4 Size=0x320
};

struct _P_PRESENCE_SUBSCRIBE_MSG// Size=0xc (Id=2600)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long cPeers;// Offset=0x4 Size=0x4
    unsigned long long * pPeers;// Offset=0x8 Size=0x4
};

struct _STRING_LOOKUP_RESPONSE// Size=0x6 (Id=2601)
{
    unsigned short wNumStrings;// Offset=0x0 Size=0x2
    struct _STRING_DATA * pStringData;// Offset=0x2 Size=0x4
};

struct ID3DXConstantTableVtbl// Size=0x6c (Id=2602)
{
    HRESULT  ( * QueryInterface)(struct ID3DXConstantTable * ,const struct _GUID * ,void ** );// Offset=0x0 Size=0x4
    unsigned long  ( * AddRef)(struct ID3DXConstantTable * );// Offset=0x4 Size=0x4
    unsigned long  ( * Release)(struct ID3DXConstantTable * );// Offset=0x8 Size=0x4
    void *  ( * GetBufferPointer)(struct ID3DXConstantTable * );// Offset=0xc Size=0x4
    unsigned long  ( * GetBufferSize)(struct ID3DXConstantTable * );// Offset=0x10 Size=0x4
    HRESULT  ( * GetDesc)(struct ID3DXConstantTable * ,struct _D3DXCONSTANTTABLE_DESC * );// Offset=0x14 Size=0x4
    HRESULT  ( * GetConstantDesc)(struct ID3DXConstantTable * ,unsigned int ,struct _D3DXCONSTANT_DESC * ,unsigned int * );// Offset=0x18 Size=0x4
    unsigned int  ( * GetSamplerIndex)(struct ID3DXConstantTable * ,unsigned int );// Offset=0x1c Size=0x4
    unsigned int  ( * GetConstant)(struct ID3DXConstantTable * ,unsigned int ,unsigned int );// Offset=0x20 Size=0x4
    unsigned int  ( * GetConstantByName)(struct ID3DXConstantTable * ,unsigned int ,char * );// Offset=0x24 Size=0x4
    unsigned int  ( * GetConstantElement)(struct ID3DXConstantTable * ,unsigned int ,unsigned int );// Offset=0x28 Size=0x4
    HRESULT  ( * SetDefaults)(struct ID3DXConstantTable * ,struct D3DDevice * );// Offset=0x2c Size=0x4
    HRESULT  ( * SetValue)(struct ID3DXConstantTable * ,struct D3DDevice * ,unsigned int ,void * ,unsigned int );// Offset=0x30 Size=0x4
    HRESULT  ( * SetBool)(struct ID3DXConstantTable * ,struct D3DDevice * ,unsigned int ,int );// Offset=0x34 Size=0x4
    HRESULT  ( * SetBoolArray)(struct ID3DXConstantTable * ,struct D3DDevice * ,unsigned int ,int * ,unsigned int );// Offset=0x38 Size=0x4
    HRESULT  ( * SetInt)(struct ID3DXConstantTable * ,struct D3DDevice * ,unsigned int ,int );// Offset=0x3c Size=0x4
    HRESULT  ( * SetIntArray)(struct ID3DXConstantTable * ,struct D3DDevice * ,unsigned int ,int * ,unsigned int );// Offset=0x40 Size=0x4
    HRESULT  ( * SetFloat)(struct ID3DXConstantTable * ,struct D3DDevice * ,unsigned int ,float );// Offset=0x44 Size=0x4
    HRESULT  ( * SetFloatArray)(struct ID3DXConstantTable * ,struct D3DDevice * ,unsigned int ,float * ,unsigned int );// Offset=0x48 Size=0x4
    HRESULT  ( * SetVector)(struct ID3DXConstantTable * ,struct D3DDevice * ,unsigned int ,struct D3DXVECTOR4 * );// Offset=0x4c Size=0x4
    HRESULT  ( * SetVectorArray)(struct ID3DXConstantTable * ,struct D3DDevice * ,unsigned int ,struct D3DXVECTOR4 * ,unsigned int );// Offset=0x50 Size=0x4
    HRESULT  ( * SetMatrix)(struct ID3DXConstantTable * ,struct D3DDevice * ,unsigned int ,struct _D3DMATRIX * );// Offset=0x54 Size=0x4
    HRESULT  ( * SetMatrixArray)(struct ID3DXConstantTable * ,struct D3DDevice * ,unsigned int ,struct _D3DMATRIX * ,unsigned int );// Offset=0x58 Size=0x4
    HRESULT  ( * SetMatrixPointerArray)(struct ID3DXConstantTable * ,struct D3DDevice * ,unsigned int ,struct _D3DMATRIX ** ,unsigned int );// Offset=0x5c Size=0x4
    HRESULT  ( * SetMatrixTranspose)(struct ID3DXConstantTable * ,struct D3DDevice * ,unsigned int ,struct _D3DMATRIX * );// Offset=0x60 Size=0x4
    HRESULT  ( * SetMatrixTransposeArray)(struct ID3DXConstantTable * ,struct D3DDevice * ,unsigned int ,struct _D3DMATRIX * ,unsigned int );// Offset=0x64 Size=0x4
    HRESULT  ( * SetMatrixTransposePointerArray)(struct ID3DXConstantTable * ,struct D3DDevice * ,unsigned int ,struct _D3DMATRIX ** ,unsigned int );// Offset=0x68 Size=0x4
};

struct ID3DXEffectStateManagerVtbl// Size=0x50 (Id=2603)
{
    HRESULT  ( * QueryInterface)(struct ID3DXEffectStateManager * ,const struct _GUID * ,void ** );// Offset=0x0 Size=0x4
    unsigned long  ( * AddRef)(struct ID3DXEffectStateManager * );// Offset=0x4 Size=0x4
    unsigned long  ( * Release)(struct ID3DXEffectStateManager * );// Offset=0x8 Size=0x4
    HRESULT  ( * SetTransform)(struct ID3DXEffectStateManager * ,enum _D3DTRANSFORMSTATETYPE ,struct _D3DMATRIX * );// Offset=0xc Size=0x4
    HRESULT  ( * SetMaterial)(struct ID3DXEffectStateManager * ,struct _D3DMATERIAL9 * );// Offset=0x10 Size=0x4
    HRESULT  ( * SetLight)(struct ID3DXEffectStateManager * ,unsigned long ,struct _D3DLIGHT9 * );// Offset=0x14 Size=0x4
    HRESULT  ( * LightEnable)(struct ID3DXEffectStateManager * ,unsigned long ,int );// Offset=0x18 Size=0x4
    HRESULT  ( * SetRenderState)(struct ID3DXEffectStateManager * ,enum _D3DRENDERSTATETYPE ,unsigned long );// Offset=0x1c Size=0x4
    HRESULT  ( * SetTexture)(struct ID3DXEffectStateManager * ,unsigned long ,struct D3DBaseTexture * );// Offset=0x20 Size=0x4
    HRESULT  ( * Do_Not_Use_SetTextureStageState)(struct ID3DXEffectStateManager * ,unsigned long ,unsigned long ,unsigned long );// Offset=0x24 Size=0x4
    HRESULT  ( * SetSamplerState)(struct ID3DXEffectStateManager * ,unsigned long ,enum _D3DSAMPLERSTATETYPE ,unsigned long );// Offset=0x28 Size=0x4
    HRESULT  ( * SetFVF)(struct ID3DXEffectStateManager * ,unsigned long );// Offset=0x2c Size=0x4
    HRESULT  ( * SetVertexShader)(struct ID3DXEffectStateManager * ,struct D3DVertexShader * );// Offset=0x30 Size=0x4
    HRESULT  ( * SetVertexShaderConstantF)(struct ID3DXEffectStateManager * ,unsigned int ,float * ,unsigned int );// Offset=0x34 Size=0x4
    HRESULT  ( * SetVertexShaderConstantI)(struct ID3DXEffectStateManager * ,unsigned int ,int * ,unsigned int );// Offset=0x38 Size=0x4
    HRESULT  ( * SetVertexShaderConstantB)(struct ID3DXEffectStateManager * ,unsigned int ,int * ,unsigned int );// Offset=0x3c Size=0x4
    HRESULT  ( * SetPixelShader)(struct ID3DXEffectStateManager * ,struct D3DPixelShader * );// Offset=0x40 Size=0x4
    HRESULT  ( * SetPixelShaderConstantF)(struct ID3DXEffectStateManager * ,unsigned int ,float * ,unsigned int );// Offset=0x44 Size=0x4
    HRESULT  ( * SetPixelShaderConstantI)(struct ID3DXEffectStateManager * ,unsigned int ,int * ,unsigned int );// Offset=0x48 Size=0x4
    HRESULT  ( * SetPixelShaderConstantB)(struct ID3DXEffectStateManager * ,unsigned int ,int * ,unsigned int );// Offset=0x4c Size=0x4
};

struct _P_INVITE_ANSWER_MSG// Size=0x3a (Id=2604)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwUserID;// Offset=0x20 Size=0x8
    unsigned long long qwHostID;// Offset=0x28 Size=0x8
    struct XNKID MatchSessionID;// Offset=0x30 Size=0x8
    unsigned short wAnswer;// Offset=0x38 Size=0x2
};

struct XGI_SESSIONMANAGE_MSG// Size=0x14 (Id=2605)
{
    struct tagSESSION_STRUCT * pSessionStruct;// Offset=0x0 Size=0x4
    unsigned long dwUsers;// Offset=0x4 Size=0x4
    unsigned long long * pXuids;// Offset=0x8 Size=0x4
    unsigned long * pdwUserIndexes;// Offset=0xc Size=0x4
    int * pfPrivateSlots;// Offset=0x10 Size=0x4
};

struct ID3DXFileDataVtbl// Size=0x30 (Id=2606)
{
    HRESULT  ( * QueryInterface)(struct ID3DXFileData * ,const struct _GUID * ,void ** );// Offset=0x0 Size=0x4
    unsigned long  ( * AddRef)(struct ID3DXFileData * );// Offset=0x4 Size=0x4
    unsigned long  ( * Release)(struct ID3DXFileData * );// Offset=0x8 Size=0x4
    HRESULT  ( * GetEnum)(struct ID3DXFileData * ,struct ID3DXFileEnumObject ** );// Offset=0xc Size=0x4
    HRESULT  ( * GetName)(struct ID3DXFileData * ,char * ,unsigned long * );// Offset=0x10 Size=0x4
    HRESULT  ( * GetId)(struct ID3DXFileData * ,struct _GUID * );// Offset=0x14 Size=0x4
    HRESULT  ( * Lock)(struct ID3DXFileData * ,unsigned long * ,void ** );// Offset=0x18 Size=0x4
    HRESULT  ( * Unlock)(struct ID3DXFileData * );// Offset=0x1c Size=0x4
    HRESULT  ( * GetType)(struct ID3DXFileData * ,struct _GUID * );// Offset=0x20 Size=0x4
    HRESULT  ( * IsReference)(struct ID3DXFileData * );// Offset=0x24 Size=0x4
    HRESULT  ( * GetChildren)(struct ID3DXFileData * ,unsigned long * );// Offset=0x28 Size=0x4
    HRESULT  ( * GetChild)(struct ID3DXFileData * ,unsigned long ,struct ID3DXFileData ** );// Offset=0x2c Size=0x4
};

struct _QUERY_SEARCH_REQUEST// Size=0x28 (Id=2607)
{
    unsigned long dwTitleId;// Offset=0x0 Size=0x4
    unsigned long dwDatasetId;// Offset=0x4 Size=0x4
    unsigned long dwProcIndex;// Offset=0x8 Size=0x4
    unsigned long dwPage;// Offset=0xc Size=0x4
    unsigned long dwResultsPerPage;// Offset=0x10 Size=0x4
    unsigned long dwNumResultSpecs;// Offset=0x14 Size=0x4
    unsigned long dwNumAttributes;// Offset=0x18 Size=0x4
    struct _XONLINE_QUERY_ATTRIBUTE_SPEC * pSpecs;// Offset=0x1c Size=0x4
    struct _XONLINE_QUERY_ATTRIBUTE * pAttributes;// Offset=0x20 Size=0x4
    struct _QUERY_SEARCH_RESULT * pResults;// Offset=0x24 Size=0x4
};

struct _XDEVICERENAMEPARAM// Size=0xc (Id=2608)
{
    unsigned long DeviceID;// Offset=0x0 Size=0x4
    wchar_t * pwszName;// Offset=0x4 Size=0x4
    unsigned long cchName;// Offset=0x8 Size=0x4
};

struct _P_ADD_AFFILIATES_MSG// Size=0x36 (Id=2609)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwUserID;// Offset=0x20 Size=0x8
    unsigned long dwListFlags;// Offset=0x28 Size=0x4
    unsigned long dwTitleID;// Offset=0x2c Size=0x4
    unsigned short cwAffiliates;// Offset=0x30 Size=0x2
    unsigned long long * pqwAffilliateIDs;// Offset=0x32 Size=0x4
};

union _KPCR_PAGE// Size=0x1000 (Id=2610)
{
    struct _KPCR Pcr;// Offset=0x0 Size=0x2d8
    unsigned char __align0[40];// Offset=0x2d8 Size=0x28
    unsigned long long IdleThreadData[0];
    unsigned char PcrAsUCHARs[4096];// Offset=0x0 Size=0x1000
};

struct _XGI_CREATEENUM_MSG// Size=0x20 (Id=2611)
{
    unsigned long dwTitleId;// Offset=0x0 Size=0x4
    unsigned long dwUserIndex;// Offset=0x4 Size=0x4
    unsigned long long xuid;// Offset=0x8 Size=0x8
    unsigned long dwDetailFlags;// Offset=0x10 Size=0x4
    unsigned long dwStartingIndex;// Offset=0x14 Size=0x4
    struct _XENUMERATOR_XGI * pxenum;// Offset=0x18 Size=0x4
};

struct CFFOLDER// Size=0x8 (Id=2612)
{
    unsigned long coffCabStart;// Offset=0x0 Size=0x4
    unsigned short cCFData;// Offset=0x4 Size=0x2
    short typeCompress;// Offset=0x6 Size=0x2
};

struct _KDEVICE_QUEUE_ENTRY// Size=0x10 (Id=2613)
{
    struct _LIST_ENTRY DeviceListEntry;// Offset=0x0 Size=0x8
    unsigned long SortKey;// Offset=0x8 Size=0x4
    unsigned char Inserted;// Offset=0xc Size=0x1
};

struct _XCONTENT_METADATA_MEDIA_DATA// Size=0x24 (Id=2614)
{
    unsigned char SeriesId[16];// Offset=0x0 Size=0x10
    unsigned char SeasonId[16];// Offset=0x10 Size=0x10
    unsigned short SeasonNumber;// Offset=0x20 Size=0x2
    unsigned short EpisodeNumber;// Offset=0x22 Size=0x2
};

struct _XMICON4// Size=0x8 (Id=2615)
{
    union // Size=0x8 (Id=0)
    {
        struct // Size=0x8 (Id=0)
        {
            long long x:20;// Offset=0x0 Size=0x8 BitOffset=0x0 BitSize=0x14
            long long y:20;// Offset=0x0 Size=0x8 BitOffset=0x14 BitSize=0x14
            long long z:20;// Offset=0x0 Size=0x8 BitOffset=0x28 BitSize=0x14
            long long w:4;// Offset=0x0 Size=0x8 BitOffset=0x3c BitSize=0x4
        };
        unsigned long long v;// Offset=0x0 Size=0x8
    };
};

struct _XMSG_SEND_RESULT// Size=0x6 (Id=2616)
{
    unsigned short cRecipients;// Offset=0x0 Size=0x2
    struct _XMSG_SEND_RECIPIENT_RESULT * pRecipients;// Offset=0x2 Size=0x4
};

struct _HV_IMAGE_IMPORT_TABLE// Size=0x24 (Id=2617)
{
    unsigned char NextImportDigest[20];// Offset=0x0 Size=0x14
    unsigned long ModuleNumber;// Offset=0x14 Size=0x4
    unsigned long Version[2];// Offset=0x18 Size=0x8
    unsigned char Unused;// Offset=0x20 Size=0x1
    unsigned char ModuleIndex;// Offset=0x21 Size=0x1
    unsigned short ImportCount;// Offset=0x22 Size=0x2
};

struct _RTL_HEAP_TAG_INFO// Size=0xc (Id=2618)
{
    unsigned long NumberOfAllocations;// Offset=0x0 Size=0x4
    unsigned long NumberOfFrees;// Offset=0x4 Size=0x4
    unsigned long BytesAllocated;// Offset=0x8 Size=0x4
};

struct _XMSHORT2// Size=0x4 (Id=2619)
{
    short x;// Offset=0x0 Size=0x2
    short y;// Offset=0x2 Size=0x2
};

struct _P_FIND_USER_REPLY_MSG// Size=0x18 (Id=2620)
{
    unsigned long long qwFoundID;// Offset=0x0 Size=0x8
    char szGamerTag[16];// Offset=0x8 Size=0x10
};

struct CFRESERVE// Size=0x4 (Id=2621)
{
    unsigned short cbCFHeader;// Offset=0x0 Size=0x2
    unsigned char cbCFFolder;// Offset=0x2 Size=0x1
    unsigned char cbCFData;// Offset=0x3 Size=0x1
};

struct _GET_SESSION_RESULTS// Size=0x50 (Id=2622)
{
    unsigned long long qwHostUserID;// Offset=0x0 Size=0x8
    unsigned long dwTitleID;// Offset=0x8 Size=0x4
    unsigned long dwTitleVersion;// Offset=0xc Size=0x4
    unsigned long dwTitleRegion;// Offset=0x10 Size=0x4
    struct XNADDR xnaddr;// Offset=0x14 Size=0x24
    struct XNKID xkid;// Offset=0x38 Size=0x8
    struct XNKEY xnkey;// Offset=0x40 Size=0x10
};

struct _XSIGNATURE_GENERIC_BLOCK// Size=0x6 (Id=2623)
{
    unsigned short wBlockLength;// Offset=0x0 Size=0x2
    unsigned char * pbBlock;// Offset=0x2 Size=0x4
};

struct IDirectXFileDataReference// Size=0x4 (Id=2624)
{
    struct IDirectXFileDataReferenceVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct PostAttribute// Size=0x58 (Id=2625)
{
    unsigned int Deref;// Offset=0x0 Size=0x4
    enum SA_YesNoMaybe Valid;// Offset=0x4 Size=0x4
    enum SA_YesNoMaybe Null;// Offset=0x8 Size=0x4
    enum SA_YesNoMaybe Tainted;// Offset=0xc Size=0x4
    enum SA_AccessType Access;// Offset=0x10 Size=0x4
    unsigned int ValidElementsConst;// Offset=0x14 Size=0x4
    unsigned int ValidBytesConst;// Offset=0x18 Size=0x4
    wchar_t * ValidElements;// Offset=0x1c Size=0x4
    wchar_t * ValidBytes;// Offset=0x20 Size=0x4
    wchar_t * ValidElementsLength;// Offset=0x24 Size=0x4
    wchar_t * ValidBytesLength;// Offset=0x28 Size=0x4
    unsigned int WritableElementsConst;// Offset=0x2c Size=0x4
    unsigned int WritableBytesConst;// Offset=0x30 Size=0x4
    wchar_t * WritableElements;// Offset=0x34 Size=0x4
    wchar_t * WritableBytes;// Offset=0x38 Size=0x4
    wchar_t * WritableElementsLength;// Offset=0x3c Size=0x4
    wchar_t * WritableBytesLength;// Offset=0x40 Size=0x4
    unsigned int ElementSizeConst;// Offset=0x44 Size=0x4
    wchar_t * ElementSize;// Offset=0x48 Size=0x4
    enum SA_YesNoMaybe NullTerminated;// Offset=0x4c Size=0x4
    enum SA_YesNoMaybe MustCheck;// Offset=0x50 Size=0x4
    wchar_t * Condition;// Offset=0x54 Size=0x4
};

struct _XMSG_DETAILS_RESULTS// Size=0x40 (Id=2626)
{
    struct _Q_MESSAGE_SUMMARY summary;// Offset=0x0 Size=0x34
    struct _XMSG_DETAILS details;// Offset=0x34 Size=0xc
};

struct _XSTORAGE_UPLOAD_FROM_DIRECTORY_PARAMS_INTERNAL// Size=0x14 (Id=2627)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long dwServerPathLength;// Offset=0x4 Size=0x4
    unsigned short * wszServerPath;// Offset=0x8 Size=0x4
    unsigned long dwLocalPathLength;// Offset=0xc Size=0x4
    char * szLocalPath;// Offset=0x10 Size=0x4
};

struct _DMDVD// Size=0x10 (Id=2628)
{
    union _ULARGE_INTEGER Timestamp;// Offset=0x0 Size=0x8
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            unsigned long BlockCount:7;// Offset=0x8 Size=0x4 BitOffset=0x19 BitSize=0x7
            unsigned long LBA:24;// Offset=0x8 Size=0x4 BitOffset=0x1 BitSize=0x18
            unsigned long InProgress:1;// Offset=0x8 Size=0x4 BitOffset=0x0 BitSize=0x1
        };
        unsigned long Parameters;// Offset=0x8 Size=0x4
    };
    unsigned long ResponseTime;// Offset=0xc Size=0x4
};

struct _XARB_REPORT_BYTE_BUNDLE// Size=0x8 (Id=2629)
{
    unsigned long cbBundle;// Offset=0x0 Size=0x4
    unsigned char * pBundle;// Offset=0x4 Size=0x4
};

struct _XGI_CREATESTATSENUM_MSG// Size=0x8 (Id=2630)
{
    unsigned long dwTitleId;// Offset=0x0 Size=0x4
    struct _XENUMERATOR_STATS * pStatsEnum;// Offset=0x4 Size=0x4
};

struct _XONLINE_TEAM_MEMBER// Size=0x23 (Id=2631)
{
    unsigned long long qwMemberID;// Offset=0x0 Size=0x8
    unsigned char cbMemberName;// Offset=0x8 Size=0x1
    int fMember;// Offset=0x9 Size=0x4
    unsigned long dwMemberPriv;// Offset=0xd Size=0x4
    unsigned short cbMemberData;// Offset=0x11 Size=0x2
    unsigned long long ftJoined;// Offset=0x13 Size=0x8
    char * szMemberName;// Offset=0x1b Size=0x4
    unsigned char * pbMemberData;// Offset=0x1f Size=0x4
};

struct XGI_SESSIONSEARCH_MSG// Size=0x20 (Id=2632)
{
    unsigned long dwProcedureIndex;// Offset=0x0 Size=0x4
    unsigned long dwUserIndex;// Offset=0x4 Size=0x4
    unsigned long dwNumResults;// Offset=0x8 Size=0x4
    unsigned short wNumProperties;// Offset=0xc Size=0x2
    unsigned short wNumContexts;// Offset=0xe Size=0x2
    struct _XUSER_PROPERTY * pSearchProperties;// Offset=0x10 Size=0x4
    struct _XUSER_CONTEXT * pSearchContexts;// Offset=0x14 Size=0x4
    unsigned long cbResultsBuffer;// Offset=0x18 Size=0x4
    struct _XSESSION_SEARCHRESULT_HEADER * pSearchResults;// Offset=0x1c Size=0x4
};

struct _VERIFY_TOKEN_REQUEST// Size=0x1e (Id=2633)
{
    unsigned long long xuid;// Offset=0x0 Size=0x8
    unsigned long long qwMachineId;// Offset=0x8 Size=0x8
    unsigned short wBillingTokenLength;// Offset=0x10 Size=0x2
    unsigned short * wszBillingToken;// Offset=0x12 Size=0x4
    unsigned long dwStoreId;// Offset=0x16 Size=0x4
    struct _VERIFY_TOKEN_RESPONSE * pResponse;// Offset=0x1a Size=0x4
};

struct _DM_HDD_READWRITE_REQUEST_DATA// Size=0xc (Id=2634)
{
    unsigned long ReadWrite;// Offset=0x0 Size=0x4
    unsigned long StartSector;// Offset=0x4 Size=0x4
    unsigned long SectorCount;// Offset=0x8 Size=0x4
};

struct _ACCOUNT_SET_STATUS_REQUEST// Size=0x2c (Id=2635)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned long dwNewTermsOfService;// Offset=0x8 Size=0x4
    unsigned long dwForceNameChangeRequired;// Offset=0xc Size=0x4
    struct _FILETIME ftSuspendedUntil;// Offset=0x10 Size=0x8
    unsigned short wTotalDaysSuspended;// Offset=0x18 Size=0x2
    struct _FILETIME ftVoiceBannedUntil;// Offset=0x1a Size=0x8
    unsigned short wTotalDaysVoiceBanned;// Offset=0x22 Size=0x2
    unsigned long dwBillingHr;// Offset=0x24 Size=0x4
    unsigned long dwResetPassword;// Offset=0x28 Size=0x4
};

struct _LSP_ENUMERATE_REQUEST// Size=0x16 (Id=2636)
{
    unsigned long dwTitleId;// Offset=0x0 Size=0x4
    unsigned short wServerInfoLength;// Offset=0x4 Size=0x2
    char * szServerInfo;// Offset=0x6 Size=0x4
    unsigned long dwResultIndex;// Offset=0xa Size=0x4
    unsigned long dwResultCount;// Offset=0xe Size=0x4
    struct _LSP_ENUMERATE_REPLY * pResponse;// Offset=0x12 Size=0x4
};

struct XGI_PREPAREGAMERTILES_MSG// Size=0xc (Id=2637)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long dwNumXuids;// Offset=0x4 Size=0x4
    unsigned long long * rgXuids;// Offset=0x8 Size=0x4
};

struct _XSWAPDISC_ERROR_TEXT// Size=0xc (Id=2638)
{
    wchar_t * wszTitle;// Offset=0x0 Size=0x4
    wchar_t * wszText;// Offset=0x4 Size=0x4
    wchar_t * wszButton;// Offset=0x8 Size=0x4
};

struct ID3DXAnimationSetVtbl// Size=0x2c (Id=2639)
{
    HRESULT  ( * QueryInterface)(struct ID3DXAnimationSet * ,const struct _GUID * ,void ** );// Offset=0x0 Size=0x4
    unsigned long  ( * AddRef)(struct ID3DXAnimationSet * );// Offset=0x4 Size=0x4
    unsigned long  ( * Release)(struct ID3DXAnimationSet * );// Offset=0x8 Size=0x4
    char *  ( * GetName)(struct ID3DXAnimationSet * );// Offset=0xc Size=0x4
    float  ( * GetPeriod)(struct ID3DXAnimationSet * );// Offset=0x10 Size=0x4
    float  ( * GetPeriodicPosition)(struct ID3DXAnimationSet * ,float );// Offset=0x14 Size=0x4
    unsigned int  ( * GetNumAnimations)(struct ID3DXAnimationSet * );// Offset=0x18 Size=0x4
    HRESULT  ( * GetAnimationNameByIndex)(struct ID3DXAnimationSet * ,unsigned int ,char ** );// Offset=0x1c Size=0x4
    HRESULT  ( * GetAnimationIndexByName)(struct ID3DXAnimationSet * ,char * ,unsigned int * );// Offset=0x20 Size=0x4
    HRESULT  ( * GetSRT)(struct ID3DXAnimationSet * ,float ,unsigned int ,struct _D3DVECTOR * ,struct D3DXQUATERNION * ,struct _D3DVECTOR * );// Offset=0x24 Size=0x4
    HRESULT  ( * GetCallback)(struct ID3DXAnimationSet * ,float ,unsigned long ,float * ,void ** );// Offset=0x28 Size=0x4
};

struct _XPARTY_USER_LIST// Size=0xf08 (Id=2640)
{
    unsigned long dwUserCount;// Offset=0x0 Size=0x4
    unsigned char __align0[4];// Offset=0x4 Size=0x4
    struct _XPARTY_USER_INFO Users[32];// Offset=0x8 Size=0xf00
};

struct _DRIVER_OBJECT// Size=0x38 (Id=2641)
{
    void  ( * DriverStartIo)(struct _DEVICE_OBJECT * ,struct _IRP * );// Offset=0x0 Size=0x4
    void  ( * DriverDeleteDevice)(struct _DEVICE_OBJECT * );// Offset=0x4 Size=0x4
    long  ( * DriverDismountVolume)(struct _DEVICE_OBJECT * );// Offset=0x8 Size=0x4
    long  ( * MajorFunction)[11];// Offset=0xc Size=0x2c
};

struct _DM_SETTINGS// Size=0xc (Id=2642)
{
    unsigned long StructureSize;// Offset=0x0 Size=0x4
    unsigned long SettingFlags;// Offset=0x4 Size=0x4
    unsigned long VideoStandard;// Offset=0x8 Size=0x4
};

struct _XDASHLAUNCHDATA_XAMUIAPP// Size=0x3f0 (Id=2643)
{
    unsigned long dwID;// Offset=0x0 Size=0x4
    unsigned char Reserved[1004];// Offset=0x4 Size=0x3ec
};

struct XVOICE_EXTENSION// Size=0x0 (Id=2644)
{
};

struct D3DDevice// Size=0x2a80 (Id=2645)
{
    struct _D3DTAGCOLLECTION m_Pending;// Offset=0x0 Size=0x28
    unsigned long long m_Predicated_PendingMask2;// Offset=0x28 Size=0x8
    unsigned long * m_pRing;// Offset=0x30 Size=0x4
    unsigned long * m_pRingLimit;// Offset=0x34 Size=0x4
    unsigned long * m_pRingGuarantee;// Offset=0x38 Size=0x4
    unsigned long m_ReferenceCount;// Offset=0x3c Size=0x4
    void  ( * m_SetRenderStateCall)[101];// Offset=0x40 Size=0x194
    void  ( * m_SetSamplerStateCall)[20];// Offset=0x1d4 Size=0x50
    unsigned long  ( * m_GetRenderStateCall)[101];// Offset=0x224 Size=0x194
    unsigned long  ( * m_GetSamplerStateCall)[20];// Offset=0x3b8 Size=0x50
    unsigned char __align0[120];// Offset=0x408 Size=0x78
    struct _D3DConstants m_Constants;// Offset=0x480 Size=0x23a0
    float m_ClipPlanes[6][4];// Offset=0x2820 Size=0x60
    struct GPU_DESTINATIONPACKET m_DestinationPacket;// Offset=0x2880 Size=0x40
    struct GPU_WINDOWPACKET m_WindowPacket;// Offset=0x28c0 Size=0xc
    struct GPU_VALUESPACKET m_ValuesPacket;// Offset=0x28cc Size=0x54
    struct GPU_PROGRAMPACKET m_ProgramPacket;// Offset=0x2920 Size=0x14
    struct GPU_CONTROLPACKET m_ControlPacket;// Offset=0x2934 Size=0x30
    struct GPU_TESSELLATORPACKET m_TessellatorPacket;// Offset=0x2964 Size=0x54
    struct GPU_MISCPACKET m_MiscPacket;// Offset=0x29b8 Size=0x98
    struct GPU_POINTPACKET m_PointPacket;// Offset=0x2a50 Size=0x20
};

struct _XMUSHORT4// Size=0x8 (Id=2646)
{
    unsigned short x;// Offset=0x0 Size=0x2
    unsigned short y;// Offset=0x2 Size=0x2
    unsigned short z;// Offset=0x4 Size=0x2
    unsigned short w;// Offset=0x6 Size=0x2
};

struct _MIID_OFFERID_PAIR// Size=0x20 (Id=2647)
{
    struct _GUID MediaInstanceID;// Offset=0x0 Size=0x10
    struct _GUID OfferID;// Offset=0x10 Size=0x10
};

struct _XUIDWITHFLAGS// Size=0xc (Id=2648)
{
    unsigned long long qwUserID;// Offset=0x0 Size=0x8
    unsigned long dwUserFlags;// Offset=0x8 Size=0x4
};

struct LIVEBASE_SETPRESENCE_MSG// Size=0x118 (Id=2649)
{
    unsigned long long xuidUser;// Offset=0x0 Size=0x8
    unsigned long dwPresenceMode;// Offset=0x8 Size=0x4
    unsigned long dwNumContexts;// Offset=0xc Size=0x4
    unsigned long dwNumProperties;// Offset=0x10 Size=0x4
    unsigned char rgbPayload[256];// Offset=0x14 Size=0x100
};

struct _XMATCH_SEARCH// Size=0x38 (Id=2650)
{
    unsigned long dwMessageLength;// Offset=0x0 Size=0x4
    unsigned long dwTitleID;// Offset=0x4 Size=0x4
    unsigned long dwProcedureIndex;// Offset=0x8 Size=0x4
    struct XNADDR ClientAddress;// Offset=0xc Size=0x24
    unsigned short wNumUsers;// Offset=0x30 Size=0x2
    unsigned short wFlags;// Offset=0x32 Size=0x2
    unsigned long dwNumParameters;// Offset=0x34 Size=0x4
};

struct XGI_WRITEGAMERTILE_MSG// Size=0x18 (Id=2651)
{
    int fForEnumerate;// Offset=0x0 Size=0x4
    unsigned long dwUserIndex;// Offset=0x4 Size=0x4
    unsigned long dwTitleId;// Offset=0x8 Size=0x4
    unsigned long dwImageId;// Offset=0xc Size=0x4
    unsigned long dwImageIdSmall;// Offset=0x10 Size=0x4
    unsigned long dwFlags;// Offset=0x14 Size=0x4
};

struct _XAM_CACHE_OPEN_FILE// Size=0x248 (Id=2652)
{
    unsigned long Flags;// Offset=0x0 Size=0x4
    enum _XAM_CACHE_FILE_TYPE FileType;// Offset=0x4 Size=0x4
    unsigned long dwIdentifier;// Offset=0x8 Size=0x4
    unsigned char __align0[4];// Offset=0xc Size=0x4
    unsigned long long qwIdentifier;// Offset=0x10 Size=0x8
    unsigned long long qwVersion;// Offset=0x18 Size=0x8
    unsigned long cbSize;// Offset=0x20 Size=0x4
    void * hFile;// Offset=0x24 Size=0x4
    char FilePath[260];// Offset=0x28 Size=0x104
    void  ( * OnCacheDeviceRemoved)(struct _XAM_CACHE_OPEN_FILE * );// Offset=0x12c Size=0x4
    unsigned long Context;// Offset=0x130 Size=0x4
    unsigned long Reserved[2];// Offset=0x134 Size=0x8
    void * pvMountedPackage;// Offset=0x13c Size=0x4
    char PackageFilePath[260];// Offset=0x140 Size=0x104
};

struct _P_PEER_SESSION_MSG// Size=0x34 (Id=2653)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwUserID;// Offset=0x20 Size=0x8
    unsigned long long qwHostUserID;// Offset=0x28 Size=0x8
    struct _GET_SESSION_RESULTS * pResults;// Offset=0x30 Size=0x4
};

struct _P_TEAM_LIST_MEMBERS_MSG// Size=0x3c (Id=2654)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwUserID;// Offset=0x20 Size=0x8
    unsigned long dwTitleID;// Offset=0x28 Size=0x4
    unsigned long long qwTeamID;// Offset=0x2c Size=0x8
    int fShowRecruits;// Offset=0x34 Size=0x4
    struct _TEAM_MEM_ENUM_RESULTS * pvResults;// Offset=0x38 Size=0x4
};

struct _XCONTENT_REFERRAL_REQUEST// Size=0x20 (Id=2655)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned char abContentId[20];// Offset=0x8 Size=0x14
    struct _XCONTENT_REFERRAL_RESPONSE * pResults;// Offset=0x1c Size=0x4
};

struct XGI_SESSIONMODIFYSKILL_MSG// Size=0x18 (Id=2656)
{
    struct tagSESSION_STRUCT * pSessionStruct;// Offset=0x0 Size=0x4
    unsigned long dwNumXuids;// Offset=0x4 Size=0x4
    unsigned long long * rgXuid;// Offset=0x8 Size=0x4
    unsigned long dwReserved1;// Offset=0xc Size=0x4
    unsigned long dwReserved2;// Offset=0x10 Size=0x4
    unsigned long dwReserved3;// Offset=0x14 Size=0x4
};

struct _P_CANCEL_MSG_INTERNAL// Size=0x32 (Id=2657)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwUserID;// Offset=0x20 Size=0x8
    struct XNKID SessionID;// Offset=0x28 Size=0x8
    unsigned short cInvitees;// Offset=0x30 Size=0x2
};

struct _XONLINE_ATTRIBUTE_BLOB// Size=0x6 (Id=2658)
{
    unsigned short Length;// Offset=0x0 Size=0x2
    unsigned char * pbValue;// Offset=0x2 Size=0x4
};

struct _XSIGNATURE_MEDIA_LICENSE// Size=0x2c (Id=2659)
{
    struct _MIID_OFFERID_PAIR mediaOfferID;// Offset=0x0 Size=0x20
    unsigned short wLicenseType;// Offset=0x20 Size=0x2
    unsigned short wLicenseBlockCount;// Offset=0x22 Size=0x2
    struct _XSIGNATURE_GENERIC_BLOCK * pLicenseBlocks;// Offset=0x24 Size=0x4
    HRESULT hr;// Offset=0x28 Size=0x4
};

struct _XAM_BOOT_DATA_BLOCK// Size=0x314 (Id=2660)
{
    enum _XAM_BOOT_REASON Reason;// Offset=0x0 Size=0x4
    unsigned long Flags;// Offset=0x4 Size=0x4
    void * ImagePhysicalBase;// Offset=0x8 Size=0x4
    unsigned long ImageSize;// Offset=0xc Size=0x4
    char ImageName[256];// Offset=0x10 Size=0x100
    char DDrive[256];// Offset=0x110 Size=0x100
    char CommandLine[256];// Offset=0x210 Size=0x100
    unsigned long MinVersion;// Offset=0x310 Size=0x4
};

struct IPersistVtbl// Size=0x10 (Id=2661)
{
    HRESULT  ( * QueryInterface)(struct IPersist * ,const struct _GUID * ,void ** );// Offset=0x0 Size=0x4
    unsigned long  ( * AddRef)(struct IPersist * );// Offset=0x4 Size=0x4
    unsigned long  ( * Release)(struct IPersist * );// Offset=0x8 Size=0x4
    HRESULT  ( * GetClassID)(struct IPersist * ,struct _GUID * );// Offset=0xc Size=0x4
};

struct FormatStringAttribute// Size=0x8 (Id=2662)
{
    wchar_t * Style;// Offset=0x0 Size=0x4
    wchar_t * UnformattedAlternative;// Offset=0x4 Size=0x4
};

struct _XMSG_DETAILS_REQUEST// Size=0x1034 (Id=2663)
{
    unsigned long long XuidUser;// Offset=0x0 Size=0x8
    unsigned long dwMessageID;// Offset=0x8 Size=0x4
    unsigned long dwFlagsToSet;// Offset=0xc Size=0x4
    unsigned long dwFlagsToClear;// Offset=0x10 Size=0x4
    unsigned long cbResults;// Offset=0x14 Size=0x4
    struct _XMSG_DETAILS_BLOB pResults[1];// Offset=0x18 Size=0x1000
    struct _XOVERLAPPED pXOverlapped[1];// Offset=0x1018 Size=0x1c
};

struct _PLAYTIMERGUIDE_PARAMS// Size=0xc (Id=2664)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    enum HUDSCENE eHudType;// Offset=0x4 Size=0x4
    struct _XOVERLAPPED * pOverlapped;// Offset=0x8 Size=0x4
};

struct IDirectXFileVtbl// Size=0x18 (Id=2665)
{
    HRESULT  ( * QueryInterface)(struct IDirectXFile * ,const struct _GUID * ,void ** );// Offset=0x0 Size=0x4
    unsigned long  ( * AddRef)(struct IDirectXFile * );// Offset=0x4 Size=0x4
    unsigned long  ( * Release)(struct IDirectXFile * );// Offset=0x8 Size=0x4
    HRESULT  ( * CreateEnumObject)(struct IDirectXFile * ,void * ,unsigned long ,struct IDirectXFileEnumObject ** );// Offset=0xc Size=0x4
    HRESULT  ( * CreateSaveObject)(struct IDirectXFile * ,char * ,unsigned long ,struct IDirectXFileSaveObject ** );// Offset=0x10 Size=0x4
    HRESULT  ( * RegisterTemplates)(struct IDirectXFile * ,void * ,unsigned long );// Offset=0x14 Size=0x4
};

struct _PASSPORT_CHANGE_WINDOWS_LIVE_ID_REQUEST// Size=0x62 (Id=2666)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned long long qwMachineId;// Offset=0x8 Size=0x8
    unsigned long dwTitleId;// Offset=0x10 Size=0x4
    struct _PASSPORT_SESSION_TOKEN pOldSessionToken[1];// Offset=0x14 Size=0x1c
    unsigned short wOldPassportMemberNameLength;// Offset=0x30 Size=0x2
    char * szOldPassportMemberName;// Offset=0x32 Size=0x4
    struct _PASSPORT_SESSION_TOKEN pNewSessionToken[1];// Offset=0x36 Size=0x1c
    unsigned short wNewPassportMemberNameLength;// Offset=0x52 Size=0x2
    char * szNewPassportMemberName;// Offset=0x54 Size=0x4
    int fTransferBalance;// Offset=0x58 Size=0x4
    unsigned short wReservedBytesLength;// Offset=0x5c Size=0x2
    unsigned char * pbReservedBytes;// Offset=0x5e Size=0x4
};

struct IDirectXFileBinary// Size=0x4 (Id=2667)
{
    struct IDirectXFileBinaryVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct _XARB_REPORT_STATS_BUNDLE// Size=0xe (Id=2668)
{
    unsigned long cbStats;// Offset=0x0 Size=0x4
    struct _XSTATS_POST_REQUEST Stats;// Offset=0x4 Size=0xa
};

struct XAMINSTRUMENTATION_FORMAT// Size=0x18 (Id=2669)
{
    wchar_t * wszSourceId;// Offset=0x0 Size=0x4
    int fTimestamp;// Offset=0x4 Size=0x4
    int fSeqNum;// Offset=0x8 Size=0x4
    unsigned char cFields;// Offset=0xc Size=0x1
    unsigned char rgFieldTypes[10];// Offset=0xd Size=0xa
};

struct _XUSER_PLAYERLIST_USER// Size=0x30 (Id=2670)
{
    unsigned long long qwPlayerID;// Offset=0x0 Size=0x8
    unsigned long dwFlags;// Offset=0x8 Size=0x4
    unsigned long dwTitleID;// Offset=0xc Size=0x4
    unsigned long mtUpdated;// Offset=0x10 Size=0x4
    unsigned long dwRating;// Offset=0x14 Size=0x4
    char szGamertag[16];// Offset=0x18 Size=0x10
    unsigned char fPendingAdd;// Offset=0x28 Size=0x1
    unsigned char __align0[1];// Offset=0x29 Size=0x1
    unsigned short wNextPending;// Offset=0x2a Size=0x2
};

struct _Q_LIST_REPLY_MSG// Size=0x46 (Id=2671)
{
    struct _BASE_MSG_HEADER MsgHeader;// Offset=0x0 Size=0x20
    unsigned long long qwUserID;// Offset=0x20 Size=0x8
    unsigned short wQType;// Offset=0x28 Size=0x2
    HRESULT hr;// Offset=0x2a Size=0x4
    unsigned long dwNextItemID;// Offset=0x2e Size=0x4
    unsigned short wQLeft;// Offset=0x32 Size=0x2
    unsigned short wNumItems;// Offset=0x34 Size=0x2
    unsigned long dwTotalItemDataSize;// Offset=0x36 Size=0x4
    unsigned long cdwQVals;// Offset=0x3a Size=0x4
    unsigned long * rgdwQVals;// Offset=0x3e Size=0x4
    struct _Q_LIST_ITEM * rgItems;// Offset=0x42 Size=0x4
};

struct _GET_LINKED_GAMERTAG_REQUEST// Size=0x20 (Id=2672)
{
    unsigned char pSignedPuid[28];// Offset=0x0 Size=0x1c
    struct _GET_LINKED_GAMERTAG_RESPONSE * pResponse;// Offset=0x1c Size=0x4
};

struct ID3DXAnimationCallbackHandlerVtbl// Size=0x4 (Id=2673)
{
    HRESULT  ( * HandleCallback)(struct ID3DXAnimationCallbackHandler * ,unsigned int ,void * );// Offset=0x0 Size=0x4
};

struct _KD_PHYSICAL_PORT// Size=0xc (Id=2674)
{
    unsigned long  ( * Initialize)(unsigned long );// Offset=0x0 Size=0x4
    unsigned long  ( * ReceivePacket)(unsigned long ,struct _STRING * ,struct _STRING * ,unsigned long * );// Offset=0x4 Size=0x4
    void  ( * SendPacket)(unsigned long ,struct _STRING * ,struct _STRING * );// Offset=0x8 Size=0x4
};

struct _ABCH_GET_CONTACTLIST_GAMERTAGS_RESPONSE// Size=0x6 (Id=2675)
{
    unsigned short wABCHContactlistItemCount;// Offset=0x0 Size=0x2
    struct _ABCH_GET_CONTACTLIST_ITEM * pABCHContactlistItems;// Offset=0x2 Size=0x4
};

struct _HV_IMAGE_EXPORT_TABLE// Size=0x2c (Id=2676)
{
    unsigned long Magic[3];// Offset=0x0 Size=0xc
    unsigned long ModuleNumber[2];// Offset=0xc Size=0x8
    unsigned long Version[3];// Offset=0x14 Size=0xc
    unsigned long ImageBaseAddress;// Offset=0x20 Size=0x4
    unsigned long Count;// Offset=0x24 Size=0x4
    unsigned long Base;// Offset=0x28 Size=0x4
};

struct _RTL_HEAP_TAG// Size=0x40 (Id=2677)
{
    unsigned long NumberOfAllocations;// Offset=0x0 Size=0x4
    unsigned long NumberOfFrees;// Offset=0x4 Size=0x4
    unsigned long BytesAllocated;// Offset=0x8 Size=0x4
    unsigned short TagIndex;// Offset=0xc Size=0x2
    unsigned short CreatorBackTraceIndex;// Offset=0xe Size=0x2
    wchar_t TagName[24];// Offset=0x10 Size=0x30
};

struct _XPARTY_DIGRAPH// Size=0x104 (Id=2678)
{
    unsigned long vertexCount;// Offset=0x0 Size=0x4
    int edges[8][8];// Offset=0x4 Size=0x100
};

struct _XMUICON4// Size=0x8 (Id=2679)
{
    union // Size=0x8 (Id=0)
    {
        struct // Size=0x8 (Id=0)
        {
            unsigned long long x:20;// Offset=0x0 Size=0x8 BitOffset=0x0 BitSize=0x14
            unsigned long long y:20;// Offset=0x0 Size=0x8 BitOffset=0x14 BitSize=0x14
            unsigned long long z:20;// Offset=0x0 Size=0x8 BitOffset=0x28 BitSize=0x14
            unsigned long long w:4;// Offset=0x0 Size=0x8 BitOffset=0x3c BitSize=0x4
        };
        unsigned long long v;// Offset=0x0 Size=0x8
    };
};

struct XAMINSTRUMENTATION_FORMAT_EX// Size=0x1c (Id=2680)
{
    char * szSourceId;// Offset=0x0 Size=0x4
    unsigned long dwFlags;// Offset=0x4 Size=0x4
    unsigned char cFields;// Offset=0x8 Size=0x1
    unsigned char rgFieldTypes[16];// Offset=0x9 Size=0x10
};

struct _SUBSCRIPTION_ENUMERATE_RESPONSE// Size=0xa (Id=2681)
{
    unsigned short wOffersReturned;// Offset=0x0 Size=0x2
    struct _BASIC_SUBSCRIPTION_INFO * pInfos;// Offset=0x2 Size=0x4
    unsigned long dwOffersTotal;// Offset=0x6 Size=0x4
};

struct _XMICO4// Size=0x8 (Id=2682)
{
    union // Size=0x8 (Id=0)
    {
        struct // Size=0x8 (Id=0)
        {
            long long x:20;// Offset=0x0 Size=0x8 BitOffset=0x0 BitSize=0x14
            long long y:20;// Offset=0x0 Size=0x8 BitOffset=0x14 BitSize=0x14
            long long z:20;// Offset=0x0 Size=0x8 BitOffset=0x28 BitSize=0x14
            long long w:4;// Offset=0x0 Size=0x8 BitOffset=0x3c BitSize=0x4
        };
        unsigned long long v;// Offset=0x0 Size=0x8
    };
};

struct _XSTATS_RESET_REQUEST// Size=0x10 (Id=2683)
{
    unsigned long dwTitleId;// Offset=0x0 Size=0x4
    unsigned long long qwUserId;// Offset=0x4 Size=0x8
    unsigned long dwLeaderBoardId;// Offset=0xc Size=0x4
};

struct _EX_TITLE_TERMINATE_REGISTRATION// Size=0x10 (Id=2684)
{
    void  ( * NotificationRoutine)(struct _EX_TITLE_TERMINATE_REGISTRATION * );// Offset=0x0 Size=0x4
    long Priority;// Offset=0x4 Size=0x4
    struct _LIST_ENTRY ListEntry;// Offset=0x8 Size=0x8
};

struct _XE_CONSOLE_SIGNATURE// Size=0x228 (Id=2685)
{
    struct _XE_CONSOLE_CERTIFICATE Cert;// Offset=0x0 Size=0x1a8
    unsigned char Signature[128];// Offset=0x1a8 Size=0x80
};

struct XUSERP_GET_EXTENDED_STATE// Size=0x14 (Id=2686)
{
    unsigned long long xuid;// Offset=0x0 Size=0x8
    unsigned char * pbOutState;// Offset=0x8 Size=0x4
    unsigned long offsetState;// Offset=0xc Size=0x4
    unsigned long sizeState;// Offset=0x10 Size=0x4
};

struct XGI_USERSETPROPERTY_MSG// Size=0x20 (Id=2687)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned char __align0[4];// Offset=0x4 Size=0x4
    unsigned long long xuid;// Offset=0x8 Size=0x8
    unsigned long dwPropertyId;// Offset=0x10 Size=0x4
    unsigned long cbValue;// Offset=0x14 Size=0x4
    void * pvValue;// Offset=0x18 Size=0x4
};

struct _XHTTP_REQUEST_RESPONSE// Size=0x8 (Id=2688)
{
    unsigned long long cbResponse;// Offset=0x0 Size=0x8
};

struct _XMSTV_CREATE_CERTIFICATE_REPLY// Size=0x18 (Id=2689)
{
    unsigned short wAVCertificateSize;// Offset=0x0 Size=0x2
    unsigned char * AVCertificate;// Offset=0x2 Size=0x4
    unsigned short wAVSerializedCertificateSize;// Offset=0x6 Size=0x2
    unsigned char * AVSerializedCertificate;// Offset=0x8 Size=0x4
    unsigned short wAuthCertificateSize;// Offset=0xc Size=0x2
    unsigned char * AuthCertificate;// Offset=0xe Size=0x4
    unsigned short wAuthSerializedCertificateSize;// Offset=0x12 Size=0x2
    unsigned char * AuthSerializedCertificate;// Offset=0x14 Size=0x4
};

struct _EALARM// Size=0x10 (Id=2690)
{
    union _LARGE_INTEGER AlarmTime;// Offset=0x0 Size=0x8
    struct _LIST_ENTRY ListEntry;// Offset=0x8 Size=0x8
};

struct _XUIBRUSH// Size=0x0 (Id=2691)
{
};

struct _CDROM_AUDIO_CONTROL// Size=0x4 (Id=2692)
{
    unsigned char LbaFormat;// Offset=0x0 Size=0x1
    unsigned char __align0[1];// Offset=0x1 Size=0x1
    unsigned short LogicalBlocksPerSecond;// Offset=0x2 Size=0x2
};

struct _XMATCH_DEAD_XBOX// Size=0x40 (Id=2693)
{
    unsigned long dwMessageLength;// Offset=0x0 Size=0x4
    struct _SGADDR sgaddr;// Offset=0x4 Size=0x14
    unsigned long dwTitleID;// Offset=0x18 Size=0x4
    unsigned long dwTitleRegion;// Offset=0x1c Size=0x4
    unsigned long long aqwUserID[4];// Offset=0x20 Size=0x20
};

struct _P_INVITE_ACTION_ITEM// Size=0x14 (Id=2694)
{
    unsigned long long qwTargetID;// Offset=0x0 Size=0x8
    unsigned long dwContext;// Offset=0x8 Size=0x4
    struct XNKID SessionID;// Offset=0xc Size=0x8
};

struct _P_QUERY_AFFILIATES_REPLY_DATA_MSG// Size=0x2c (Id=2695)
{
    unsigned long long qwAffiliateID;// Offset=0x0 Size=0x8
    unsigned long dwListFlags;// Offset=0x8 Size=0x4
    unsigned long dwTitleID;// Offset=0xc Size=0x4
    unsigned long long qwSessionID;// Offset=0x10 Size=0x8
    unsigned long mtDateUpdated;// Offset=0x18 Size=0x4
    char szGamerTag[16];// Offset=0x1c Size=0x10
};

struct ID3DXBaseEffectVtbl// Size=0xec (Id=2696)
{
    HRESULT  ( * QueryInterface)(struct ID3DXBaseEffect * ,const struct _GUID * ,void ** );// Offset=0x0 Size=0x4
    unsigned long  ( * AddRef)(struct ID3DXBaseEffect * );// Offset=0x4 Size=0x4
    unsigned long  ( * Release)(struct ID3DXBaseEffect * );// Offset=0x8 Size=0x4
    HRESULT  ( * GetDesc)(struct ID3DXBaseEffect * ,struct _D3DXEFFECT_DESC * );// Offset=0xc Size=0x4
    HRESULT  ( * GetParameterDesc)(struct ID3DXBaseEffect * ,unsigned int ,struct _D3DXPARAMETER_DESC * );// Offset=0x10 Size=0x4
    HRESULT  ( * GetTechniqueDesc)(struct ID3DXBaseEffect * ,unsigned int ,struct _D3DXTECHNIQUE_DESC * );// Offset=0x14 Size=0x4
    HRESULT  ( * GetPassDesc)(struct ID3DXBaseEffect * ,unsigned int ,struct _D3DXPASS_DESC * );// Offset=0x18 Size=0x4
    HRESULT  ( * GetFunctionDesc)(struct ID3DXBaseEffect * ,unsigned int ,struct _D3DXFUNCTION_DESC * );// Offset=0x1c Size=0x4
    unsigned int  ( * GetParameter)(struct ID3DXBaseEffect * ,unsigned int ,unsigned int );// Offset=0x20 Size=0x4
    unsigned int  ( * GetParameterByName)(struct ID3DXBaseEffect * ,unsigned int ,char * );// Offset=0x24 Size=0x4
    unsigned int  ( * GetParameterBySemantic)(struct ID3DXBaseEffect * ,unsigned int ,char * );// Offset=0x28 Size=0x4
    unsigned int  ( * GetParameterElement)(struct ID3DXBaseEffect * ,unsigned int ,unsigned int );// Offset=0x2c Size=0x4
    unsigned int  ( * GetTechnique)(struct ID3DXBaseEffect * ,unsigned int );// Offset=0x30 Size=0x4
    unsigned int  ( * GetTechniqueByName)(struct ID3DXBaseEffect * ,char * );// Offset=0x34 Size=0x4
    unsigned int  ( * GetPass)(struct ID3DXBaseEffect * ,unsigned int ,unsigned int );// Offset=0x38 Size=0x4
    unsigned int  ( * GetPassByName)(struct ID3DXBaseEffect * ,unsigned int ,char * );// Offset=0x3c Size=0x4
    unsigned int  ( * GetFunction)(struct ID3DXBaseEffect * ,unsigned int );// Offset=0x40 Size=0x4
    unsigned int  ( * GetFunctionByName)(struct ID3DXBaseEffect * ,char * );// Offset=0x44 Size=0x4
    unsigned int  ( * GetAnnotation)(struct ID3DXBaseEffect * ,unsigned int ,unsigned int );// Offset=0x48 Size=0x4
    unsigned int  ( * GetAnnotationByName)(struct ID3DXBaseEffect * ,unsigned int ,char * );// Offset=0x4c Size=0x4
    HRESULT  ( * SetValue)(struct ID3DXBaseEffect * ,unsigned int ,void * ,unsigned int );// Offset=0x50 Size=0x4
    HRESULT  ( * GetValue)(struct ID3DXBaseEffect * ,unsigned int ,void * ,unsigned int );// Offset=0x54 Size=0x4
    HRESULT  ( * SetBool)(struct ID3DXBaseEffect * ,unsigned int ,int );// Offset=0x58 Size=0x4
    HRESULT  ( * GetBool)(struct ID3DXBaseEffect * ,unsigned int ,int * );// Offset=0x5c Size=0x4
    HRESULT  ( * SetBoolArray)(struct ID3DXBaseEffect * ,unsigned int ,int * ,unsigned int );// Offset=0x60 Size=0x4
    HRESULT  ( * GetBoolArray)(struct ID3DXBaseEffect * ,unsigned int ,int * ,unsigned int );// Offset=0x64 Size=0x4
    HRESULT  ( * SetInt)(struct ID3DXBaseEffect * ,unsigned int ,int );// Offset=0x68 Size=0x4
    HRESULT  ( * GetInt)(struct ID3DXBaseEffect * ,unsigned int ,int * );// Offset=0x6c Size=0x4
    HRESULT  ( * SetIntArray)(struct ID3DXBaseEffect * ,unsigned int ,int * ,unsigned int );// Offset=0x70 Size=0x4
    HRESULT  ( * GetIntArray)(struct ID3DXBaseEffect * ,unsigned int ,int * ,unsigned int );// Offset=0x74 Size=0x4
    HRESULT  ( * SetFloat)(struct ID3DXBaseEffect * ,unsigned int ,float );// Offset=0x78 Size=0x4
    HRESULT  ( * GetFloat)(struct ID3DXBaseEffect * ,unsigned int ,float * );// Offset=0x7c Size=0x4
    HRESULT  ( * SetFloatArray)(struct ID3DXBaseEffect * ,unsigned int ,float * ,unsigned int );// Offset=0x80 Size=0x4
    HRESULT  ( * GetFloatArray)(struct ID3DXBaseEffect * ,unsigned int ,float * ,unsigned int );// Offset=0x84 Size=0x4
    HRESULT  ( * SetVector)(struct ID3DXBaseEffect * ,unsigned int ,struct D3DXVECTOR4 * );// Offset=0x88 Size=0x4
    HRESULT  ( * GetVector)(struct ID3DXBaseEffect * ,unsigned int ,struct D3DXVECTOR4 * );// Offset=0x8c Size=0x4
    HRESULT  ( * SetVectorArray)(struct ID3DXBaseEffect * ,unsigned int ,struct D3DXVECTOR4 * ,unsigned int );// Offset=0x90 Size=0x4
    HRESULT  ( * GetVectorArray)(struct ID3DXBaseEffect * ,unsigned int ,struct D3DXVECTOR4 * ,unsigned int );// Offset=0x94 Size=0x4
    HRESULT  ( * SetMatrix)(struct ID3DXBaseEffect * ,unsigned int ,struct _D3DMATRIX * );// Offset=0x98 Size=0x4
    HRESULT  ( * GetMatrix)(struct ID3DXBaseEffect * ,unsigned int ,struct _D3DMATRIX * );// Offset=0x9c Size=0x4
    HRESULT  ( * SetMatrixArray)(struct ID3DXBaseEffect * ,unsigned int ,struct _D3DMATRIX * ,unsigned int );// Offset=0xa0 Size=0x4
    HRESULT  ( * GetMatrixArray)(struct ID3DXBaseEffect * ,unsigned int ,struct _D3DMATRIX * ,unsigned int );// Offset=0xa4 Size=0x4
    HRESULT  ( * SetMatrixPointerArray)(struct ID3DXBaseEffect * ,unsigned int ,struct _D3DMATRIX ** ,unsigned int );// Offset=0xa8 Size=0x4
    HRESULT  ( * GetMatrixPointerArray)(struct ID3DXBaseEffect * ,unsigned int ,struct _D3DMATRIX ** ,unsigned int );// Offset=0xac Size=0x4
    HRESULT  ( * SetMatrixTranspose)(struct ID3DXBaseEffect * ,unsigned int ,struct _D3DMATRIX * );// Offset=0xb0 Size=0x4
    HRESULT  ( * GetMatrixTranspose)(struct ID3DXBaseEffect * ,unsigned int ,struct _D3DMATRIX * );// Offset=0xb4 Size=0x4
    HRESULT  ( * SetMatrixTransposeArray)(struct ID3DXBaseEffect * ,unsigned int ,struct _D3DMATRIX * ,unsigned int );// Offset=0xb8 Size=0x4
    HRESULT  ( * GetMatrixTransposeArray)(struct ID3DXBaseEffect * ,unsigned int ,struct _D3DMATRIX * ,unsigned int );// Offset=0xbc Size=0x4
    HRESULT  ( * SetMatrixTransposePointerArray)(struct ID3DXBaseEffect * ,unsigned int ,struct _D3DMATRIX ** ,unsigned int );// Offset=0xc0 Size=0x4
    HRESULT  ( * GetMatrixTransposePointerArray)(struct ID3DXBaseEffect * ,unsigned int ,struct _D3DMATRIX ** ,unsigned int );// Offset=0xc4 Size=0x4
    HRESULT  ( * SetString)(struct ID3DXBaseEffect * ,unsigned int ,char * );// Offset=0xc8 Size=0x4
    HRESULT  ( * GetString)(struct ID3DXBaseEffect * ,unsigned int ,char ** );// Offset=0xcc Size=0x4
    HRESULT  ( * SetTexture)(struct ID3DXBaseEffect * ,unsigned int ,struct D3DBaseTexture * );// Offset=0xd0 Size=0x4
    HRESULT  ( * GetTexture)(struct ID3DXBaseEffect * ,unsigned int ,struct D3DBaseTexture ** );// Offset=0xd4 Size=0x4
    HRESULT  ( * SetPixelShader)(struct ID3DXBaseEffect * ,unsigned int ,struct D3DPixelShader * );// Offset=0xd8 Size=0x4
    HRESULT  ( * GetPixelShader)(struct ID3DXBaseEffect * ,unsigned int ,struct D3DPixelShader ** );// Offset=0xdc Size=0x4
    HRESULT  ( * SetVertexShader)(struct ID3DXBaseEffect * ,unsigned int ,struct D3DVertexShader * );// Offset=0xe0 Size=0x4
    HRESULT  ( * GetVertexShader)(struct ID3DXBaseEffect * ,unsigned int ,struct D3DVertexShader ** );// Offset=0xe4 Size=0x4
    HRESULT  ( * SetArrayRange)(struct ID3DXBaseEffect * ,unsigned int ,unsigned int ,unsigned int );// Offset=0xe8 Size=0x4
};

struct XGI_READSETTINGS_MSG// Size=0x28 (Id=2697)
{
    struct _XOVERLAPPED * pXOverlapped;// Offset=0x0 Size=0x4
    unsigned long dwTitleId;// Offset=0x4 Size=0x4
    unsigned long dwUserIndex;// Offset=0x8 Size=0x4
    unsigned long dwNumFor;// Offset=0xc Size=0x4
    unsigned long long * pxuidFor;// Offset=0x10 Size=0x4
    unsigned long dwNumSettingIds;// Offset=0x14 Size=0x4
    unsigned long * pSettingIds;// Offset=0x18 Size=0x4
    unsigned long cbResults;// Offset=0x1c Size=0x4
    struct _XUSER_READ_PROFILE_SETTING_RESULT * pResults;// Offset=0x20 Size=0x4
    unsigned long dwFlags;// Offset=0x24 Size=0x4
};

struct ID3DXBaseEffect// Size=0x4 (Id=2698)
{
    struct ID3DXBaseEffectVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct _ACCOUNT_CHANGE_GAMERTAG_RESPONSE// Size=0x10 (Id=2699)
{
    unsigned char abKey[16];// Offset=0x0 Size=0x10
};

struct _DUMP_FRAME_BUFFER_INFO// Size=0x1c (Id=2700)
{
    void * FrameBuffer;// Offset=0x0 Size=0x4
    unsigned long Pitch;// Offset=0x4 Size=0x4
    unsigned long Height;// Offset=0x8 Size=0x4
    unsigned long Width;// Offset=0xc Size=0x4
    unsigned long Format;// Offset=0x10 Size=0x4
    unsigned long Size;// Offset=0x14 Size=0x4
    unsigned char ReadOnly;// Offset=0x18 Size=0x1
};

struct ID3DXInclude// Size=0x4 (Id=2701)
{
    struct ID3DXIncludeVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct _XSTORAGE_UPLOAD_REQUEST// Size=0x60 (Id=2702)
{
    struct _XSTORAGE_ACCESS_TOKEN pStorageAccessToken[1];// Offset=0x0 Size=0x1c
    struct _XSTORAGE_PATH_STRING pStoragePathString[1];// Offset=0x1c Size=0x6
    struct _XSTORAGE_ACCESS_TOKEN_WRITE pStorageAccessTokenWrite[1];// Offset=0x22 Size=0x1a
    unsigned long dwTitleId;// Offset=0x3c Size=0x4
    unsigned long dwTitleVersion;// Offset=0x40 Size=0x4
    unsigned char bCountryId;// Offset=0x44 Size=0x1
    unsigned char bCompressionType;// Offset=0x45 Size=0x1
    unsigned long dwContentType;// Offset=0x46 Size=0x4
    unsigned char * prgbDigest;// Offset=0x4a Size=0x4
    unsigned char * prgbLiveSignature;// Offset=0x4e Size=0x4
    unsigned long dwInstallSize;// Offset=0x52 Size=0x4
    unsigned short wAttributesSize;// Offset=0x56 Size=0x2
    unsigned long dwPackageSize;// Offset=0x58 Size=0x4
    unsigned char * prgbAttributes;// Offset=0x5c Size=0x4
};

struct XECRYPT_RSA// Size=0x10 (Id=2703)
{
    unsigned long cqw;// Offset=0x0 Size=0x4
    unsigned long dwPubExp;// Offset=0x4 Size=0x4
    unsigned long long qwReserved;// Offset=0x8 Size=0x8
};

struct XGI_READWRITETILE_MSG// Size=0x28 (Id=2704)
{
    enum XTILETYPE eTileType;// Offset=0x0 Size=0x4
    unsigned long dwTitleId;// Offset=0x4 Size=0x4
    unsigned long long qwImageId;// Offset=0x8 Size=0x8
    unsigned long dwUserIndex;// Offset=0x10 Size=0x4
    unsigned char * pbImage;// Offset=0x14 Size=0x4
    unsigned long * pcbBuffer;// Offset=0x18 Size=0x4
    unsigned long cbBuffer;// Offset=0x1c Size=0x4
    unsigned long dwPitch;// Offset=0x20 Size=0x4
    unsigned long dwHeight;// Offset=0x24 Size=0x4
};

struct D3DXVECTOR3_16F// Size=0x6 (Id=2705)
{
    struct D3DXFLOAT16 x;// Offset=0x0 Size=0x2
    struct D3DXFLOAT16 y;// Offset=0x2 Size=0x2
    struct D3DXFLOAT16 z;// Offset=0x4 Size=0x2
};

struct _XPERSISTENTMEMPARAMS// Size=0x14 (Id=2706)
{
    unsigned long dwSize;// Offset=0x0 Size=0x4
    struct _XPERSISTENTMEMBUFFER * pMemBuffers;// Offset=0x4 Size=0x4
    unsigned long dwNumMemBuffers;// Offset=0x8 Size=0x4
    unsigned int * pSockets;// Offset=0xc Size=0x4
    unsigned long dwNumSockets;// Offset=0x10 Size=0x4
};

struct _GENERIC_LIST_CREATE_RESPONSE// Size=0xc (Id=2707)
{
    unsigned long nListId;// Offset=0x0 Size=0x4
    struct _FILETIME ftLastModified;// Offset=0x4 Size=0x8
};

struct _GENERIC_LIST_GRANT_ACCESS_REQUEST// Size=0x18 (Id=2708)
{
    unsigned long long xUserId;// Offset=0x0 Size=0x8
    unsigned long nListType;// Offset=0x8 Size=0x4
    unsigned long nListId;// Offset=0xc Size=0x4
    unsigned long long ulMachineId;// Offset=0x10 Size=0x8
};

struct _P_CANCEL_MSG// Size=0x36 (Id=2709)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwUserID;// Offset=0x20 Size=0x8
    struct XNKID SessionID;// Offset=0x28 Size=0x8
    unsigned short cInvitees;// Offset=0x30 Size=0x2
    unsigned long long * pqwInviteeIDs;// Offset=0x32 Size=0x4
};

struct _Q_MESSAGE_SUMMARY_2// Size=0x5c (Id=2710)
{
    unsigned long long qwSenderID;// Offset=0x0 Size=0x8
    unsigned long long qwSenderContext;// Offset=0x8 Size=0x8
    unsigned long mtSentTime;// Offset=0x10 Size=0x4
    unsigned long dwMessageID;// Offset=0x14 Size=0x4
    unsigned long dwMessageFlags;// Offset=0x18 Size=0x4
    unsigned long dwSenderTitleID;// Offset=0x1c Size=0x4
    unsigned short wExpireMinutes;// Offset=0x20 Size=0x2
    unsigned short cbDetails;// Offset=0x22 Size=0x2
    unsigned char bMessageType;// Offset=0x24 Size=0x1
    char szSenderName[15];// Offset=0x25 Size=0xf
    wchar_t szSubject[20];// Offset=0x34 Size=0x28
};

struct _DMREGISTERPERFCOUNTERPARAMBLOCK// Size=0xc (Id=2711)
{
    char * szName;// Offset=0x0 Size=0x4
    unsigned long dwType;// Offset=0x4 Size=0x4
    void * pvArg;// Offset=0x8 Size=0x4
};

struct _OFFER_PURCHASE_REQUEST// Size=0x32 (Id=2712)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned char bCountryId;// Offset=0x8 Size=0x1
    unsigned short wLanguageId;// Offset=0x9 Size=0x2
    unsigned char bUserTier;// Offset=0xb Size=0x1
    unsigned long long qwMachineId;// Offset=0xc Size=0x8
    unsigned long cOfferIDs;// Offset=0x14 Size=0x4
    unsigned long long * pOfferIDs;// Offset=0x18 Size=0x4
    unsigned long dwPaymentType;// Offset=0x1c Size=0x4
    unsigned short wPaymentInstrumentId;// Offset=0x20 Size=0x2
    unsigned short * wszPaymentInstrumentId;// Offset=0x22 Size=0x4
    unsigned short wTokenLength;// Offset=0x26 Size=0x2
    unsigned short * wszToken;// Offset=0x28 Size=0x4
    unsigned short wEncryptedPasswordLen;// Offset=0x2c Size=0x2
    char * szEncryptedPassword;// Offset=0x2e Size=0x4
};

struct XECRYPT_MD5_STATE// Size=0x54 (Id=2713)
{
    unsigned long count;// Offset=0x0 Size=0x4
    unsigned long buf[4];// Offset=0x4 Size=0x10
    unsigned char in[64];// Offset=0x14 Size=0x40
};

struct _XPROFILE_SETTING_SYNC_RESULT// Size=0x10 (Id=2714)
{
    struct _FILETIME ftVersion;// Offset=0x0 Size=0x8
    unsigned short wTotalSettings;// Offset=0x8 Size=0x2
    unsigned short wSettingsLen;// Offset=0xa Size=0x2
    struct _XUSER_ONLINE_PROFILE_SETTING * pSettings;// Offset=0xc Size=0x4
};

struct XGI_READSPAINFO_MSG// Size=0x18 (Id=2715)
{
    void * pvSpaData;// Offset=0x0 Size=0x4
    unsigned long ulSpaSize;// Offset=0x4 Size=0x4
    unsigned long cchTitleName;// Offset=0x8 Size=0x4
    unsigned short * pwszTitleName;// Offset=0xc Size=0x4
    unsigned long * pcbTitleImage;// Offset=0x10 Size=0x4
    unsigned char * pbTitleImage;// Offset=0x14 Size=0x4
};

struct IStream// Size=0x4 (Id=2716)
{
    struct IStreamVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct _PRESENCE_SET_STATE// Size=0x1c (Id=2717)
{
    unsigned long long UserXuid;// Offset=0x0 Size=0x8
    unsigned long dwStateFlags;// Offset=0x8 Size=0x4
    struct XNKID sessionID;// Offset=0xc Size=0x8
    unsigned long cbState;// Offset=0x14 Size=0x4
    unsigned char * pbState;// Offset=0x18 Size=0x4
};

struct _XPRESENCE_SYNC_SUBS_RESPONSE// Size=0xa (Id=2718)
{
    HRESULT hr;// Offset=0x0 Size=0x4
    unsigned short cResults;// Offset=0x4 Size=0x2
    struct _XPRESENCE_SYNC_SUB_RESULT * pResults;// Offset=0x6 Size=0x4
};

struct _QUERY_REMOVEID_REQUEST// Size=0x20 (Id=2719)
{
    unsigned long dwTitleId;// Offset=0x0 Size=0x4
    unsigned long long qwUserId;// Offset=0x4 Size=0x8
    unsigned long long qwTeamId;// Offset=0xc Size=0x8
    unsigned long dwDatasetId;// Offset=0x14 Size=0x4
    unsigned long long qwEntityId;// Offset=0x18 Size=0x8
};

struct _XCONTENT_SIGNATURE// Size=0x228 (Id=2720)
{
    unsigned char Signature[256];// Offset=0x0 Size=0x100
    unsigned char Reserved[296];// Offset=0x100 Size=0x128
};

struct IClassFactoryVtbl// Size=0x14 (Id=2721)
{
    HRESULT  ( * QueryInterface)(struct IClassFactory * ,const struct _GUID * ,void ** );// Offset=0x0 Size=0x4
    unsigned long  ( * AddRef)(struct IClassFactory * );// Offset=0x4 Size=0x4
    unsigned long  ( * Release)(struct IClassFactory * );// Offset=0x8 Size=0x4
    HRESULT  ( * CreateInstance)(struct IClassFactory * ,struct IUnknown * ,const struct _GUID * ,void ** );// Offset=0xc Size=0x4
    HRESULT  ( * LockServer)(struct IClassFactory * ,int );// Offset=0x10 Size=0x4
};

struct _P_ADD_2_MSG// Size=0x3e (Id=2722)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwSenderID;// Offset=0x20 Size=0x8
    unsigned long long qwBuddyID;// Offset=0x28 Size=0x8
    unsigned long dwMessageFlags;// Offset=0x30 Size=0x4
    unsigned short cbDetails;// Offset=0x34 Size=0x2
    char * szBuddyAcctName;// Offset=0x36 Size=0x4
    struct _XMSG_DETAILS * pDetails;// Offset=0x3a Size=0x4
};

struct _STF_HASH_BLOCK// Size=0x1000 (Id=2723)
{
    struct _STF_HASH_ENTRY Entries[170];// Offset=0x0 Size=0xff0
    unsigned long NumberOfCommittedBlocks;// Offset=0xff0 Size=0x4
    unsigned char Padding[12];// Offset=0xff4 Size=0xc
};

struct _XCONTENT_DATA_INTERNAL// Size=0x200 (Id=2724)
{
    unsigned long DeviceID;// Offset=0x0 Size=0x4
    unsigned long dwContentType;// Offset=0x4 Size=0x4
    wchar_t szDisplayName[128];// Offset=0x8 Size=0x100
    char szFileName[42];// Offset=0x108 Size=0x2a
    unsigned char __align0[6];// Offset=0x132 Size=0x6
    unsigned long long xuid;// Offset=0x138 Size=0x8
    unsigned long dwTitleId;// Offset=0x140 Size=0x4
    unsigned long dwLicenseMask;// Offset=0x144 Size=0x4
    unsigned long long ullContentSize;// Offset=0x148 Size=0x8
    struct _FILETIME ftCreationTime;// Offset=0x150 Size=0x8
    wchar_t szTitleName[64];// Offset=0x158 Size=0x80
    unsigned char rgSeriesId[16];// Offset=0x1d8 Size=0x10
    unsigned char rgSeasonId[16];// Offset=0x1e8 Size=0x10
    unsigned short wSeasonNumber;// Offset=0x1f8 Size=0x2
    struct // Size=0x2 (Id=0)
    {
        unsigned short wEpisodeNumber:14;// Offset=0x1fa Size=0x2 BitOffset=0x2 BitSize=0xe
        unsigned short fCorrupt:1;// Offset=0x1fa Size=0x2 BitOffset=0x1 BitSize=0x1
        unsigned short fPartial:1;// Offset=0x1fa Size=0x2 BitOffset=0x0 BitSize=0x1
    };
};

struct _XGI_VIEWRESET_MSG// Size=0x8 (Id=2725)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long dwViewId;// Offset=0x4 Size=0x4
};

struct _USER_ACCOUNT_STATUS_INFO// Size=0x20 (Id=2726)
{
    int bNewTermsOfService;// Offset=0x0 Size=0x4
    int bForcedNameChangeRequired;// Offset=0x4 Size=0x4
    struct _FILETIME ftSuspendedUntil;// Offset=0x8 Size=0x8
    unsigned short wTotalDaysSuspended;// Offset=0x10 Size=0x2
    struct _FILETIME ftVoiceBannedUntil;// Offset=0x12 Size=0x8
    unsigned short wTotalDaysVoiceBanned;// Offset=0x1a Size=0x2
    HRESULT hrBillingAccountStatus;// Offset=0x1c Size=0x4
};

struct _XWMDRM_CERTIFICATE_BLOCK// Size=0x6 (Id=2727)
{
    unsigned short wBlockSize;// Offset=0x0 Size=0x2
    unsigned char * pbBlock;// Offset=0x2 Size=0x4
};

struct _DepartmentData// Size=0x1c (Id=2728)
{
    struct _EntryBaseData baseData;// Offset=0x0 Size=0x1c
};

struct IDirectXFileBinaryVtbl// Size=0x20 (Id=2729)
{
    HRESULT  ( * QueryInterface)(struct IDirectXFileBinary * ,const struct _GUID * ,void ** );// Offset=0x0 Size=0x4
    unsigned long  ( * AddRef)(struct IDirectXFileBinary * );// Offset=0x4 Size=0x4
    unsigned long  ( * Release)(struct IDirectXFileBinary * );// Offset=0x8 Size=0x4
    HRESULT  ( * GetName)(struct IDirectXFileBinary * ,char * ,unsigned long * );// Offset=0xc Size=0x4
    HRESULT  ( * GetId)(struct IDirectXFileBinary * ,struct _GUID * );// Offset=0x10 Size=0x4
    HRESULT  ( * GetSize)(struct IDirectXFileBinary * ,unsigned long * );// Offset=0x14 Size=0x4
    HRESULT  ( * GetMimeType)(struct IDirectXFileBinary * ,char ** );// Offset=0x18 Size=0x4
    HRESULT  ( * Read)(struct IDirectXFileBinary * ,void * ,unsigned long ,unsigned long * );// Offset=0x1c Size=0x4
};

struct XECRYPT_DES_STATE// Size=0x80 (Id=2730)
{
    unsigned long keytab[16][2];// Offset=0x0 Size=0x80
};

struct XECRYPT_AES_STATE// Size=0x160 (Id=2731)
{
    unsigned char keytabenc[11][4][4];// Offset=0x0 Size=0xb0
    unsigned char keytabdec[11][4][4];// Offset=0xb0 Size=0xb0
};

struct XECRYPT_RSAPRV_1024// Size=0x1d0 (Id=2732)
{
    struct XECRYPT_RSA Rsa;// Offset=0x0 Size=0x10
    unsigned long long aqwM[16];// Offset=0x10 Size=0x80
    unsigned long long aqwP[8];// Offset=0x90 Size=0x40
    unsigned long long aqwQ[8];// Offset=0xd0 Size=0x40
    unsigned long long aqwDP[8];// Offset=0x110 Size=0x40
    unsigned long long aqwDQ[8];// Offset=0x150 Size=0x40
    unsigned long long aqwCR[8];// Offset=0x190 Size=0x40
};

struct XECRYPT_RSAPRV_4096// Size=0x710 (Id=2733)
{
    struct XECRYPT_RSA Rsa;// Offset=0x0 Size=0x10
    unsigned long long aqwM[64];// Offset=0x10 Size=0x200
    unsigned long long aqwP[32];// Offset=0x210 Size=0x100
    unsigned long long aqwQ[32];// Offset=0x310 Size=0x100
    unsigned long long aqwDP[32];// Offset=0x410 Size=0x100
    unsigned long long aqwDQ[32];// Offset=0x510 Size=0x100
    unsigned long long aqwCR[32];// Offset=0x610 Size=0x100
};

struct XECRYPT_DH// Size=0x8 (Id=2734)
{
    unsigned long cqw;// Offset=0x0 Size=0x4
    unsigned long dwReserved;// Offset=0x4 Size=0x4
};

struct XECRYPT_ECPUB_512// Size=0x1c8 (Id=2735)
{
    struct XECRYPT_ECPUB EcPub;// Offset=0x0 Size=0x8
    unsigned long long aqwM[8];// Offset=0x8 Size=0x40
    unsigned long long aqwC[16];// Offset=0x48 Size=0x80
    unsigned long long aqwG[16];// Offset=0xc8 Size=0x80
    unsigned long long aqwGP[16];// Offset=0x148 Size=0x80
};

struct XGI_USERGETPROPERTY_MSG// Size=0x20 (Id=2736)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned char __align0[4];// Offset=0x4 Size=0x4
    unsigned long long xuid;// Offset=0x8 Size=0x8
    unsigned long * pcbActual;// Offset=0x10 Size=0x4
    struct _XUSER_CONTEXT * pContext;// Offset=0x14 Size=0x4
    struct _XUSER_PROPERTY * pProperty;// Offset=0x18 Size=0x4
};

struct XUSER_ACHIEVEMENT// Size=0x8 (Id=2737)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long dwAchievementId;// Offset=0x4 Size=0x4
};

struct XGI_WRITEACHIEVEMENT_MSG// Size=0x8 (Id=2738)
{
    unsigned long dwNumAchievements;// Offset=0x0 Size=0x4
    struct XUSER_ACHIEVEMENT * pAchievements;// Offset=0x4 Size=0x4
};

struct XGI_CLEARTITLE_MSG// Size=0xc (Id=2739)
{
    unsigned long dwTitleId;// Offset=0x0 Size=0x4
    unsigned long dwUserIndex;// Offset=0x4 Size=0x4
    unsigned long dwFlags;// Offset=0x8 Size=0x4
};

struct XGI_SESSIONREGISTER_MSG// Size=0x20 (Id=2740)
{
    struct tagSESSION_STRUCT * pSessionStruct;// Offset=0x0 Size=0x4
    unsigned long dwFlags;// Offset=0x4 Size=0x4
    unsigned long long qwSessionNonce;// Offset=0x8 Size=0x8
    unsigned long dwSessionDurationSec;// Offset=0x10 Size=0x4
    unsigned long cbResultsBuffer;// Offset=0x14 Size=0x4
    struct _XSESSION_REGISTRATION_RESULTS * pResults;// Offset=0x18 Size=0x4
};

struct XGI_SESSIONDETAILS_MSG// Size=0x18 (Id=2741)
{
    struct tagSESSION_STRUCT * pSessionStruct;// Offset=0x0 Size=0x4
    unsigned long * pcbResultsBuffer;// Offset=0x4 Size=0x4
    struct _XSESSION_LOCAL_DETAILS * pSessionDetails;// Offset=0x8 Size=0x4
    unsigned long dwReserved1;// Offset=0xc Size=0x4
    unsigned long dwReserved2;// Offset=0x10 Size=0x4
    unsigned long dwReserved3;// Offset=0x14 Size=0x4
};

struct XGI_SESSIONSPLIT_MSG// Size=0x18 (Id=2742)
{
    struct tagSESSION_STRUCT * pSessionStruct;// Offset=0x0 Size=0x4
    struct _XSESSION_INFO * pSessionInfo;// Offset=0x4 Size=0x4
    unsigned long dwUserIndex;// Offset=0x8 Size=0x4
    unsigned long dwReserved1;// Offset=0xc Size=0x4
    unsigned long dwReserved2;// Offset=0x10 Size=0x4
    unsigned long dwReserved3;// Offset=0x14 Size=0x4
};

struct _XSESSION_VIEW_PROPERTIES// Size=0xc (Id=2743)
{
    unsigned long dwViewId;// Offset=0x0 Size=0x4
    unsigned long dwNumProperties;// Offset=0x4 Size=0x4
    struct _XUSER_PROPERTY * pProperties;// Offset=0x8 Size=0x4
};

struct XGI_STATSWRITE_MSG// Size=0x18 (Id=2744)
{
    struct tagSESSION_STRUCT * pSessionStruct;// Offset=0x0 Size=0x4
    unsigned char __align0[4];// Offset=0x4 Size=0x4
    unsigned long long xuid;// Offset=0x8 Size=0x8
    unsigned long dwNumViews;// Offset=0x10 Size=0x4
    struct _XSESSION_VIEW_PROPERTIES * pViews;// Offset=0x14 Size=0x4
};

struct XUSERP_SET_EXTENDED_STATE// Size=0x4c (Id=2745)
{
    unsigned long long xuid;// Offset=0x0 Size=0x8
    unsigned char abStateDelta[60];// Offset=0x8 Size=0x3c
    unsigned long offsetState;// Offset=0x44 Size=0x4
    unsigned long sizeState;// Offset=0x48 Size=0x4
};

struct XGI_INVALIDATESETTING_MSG// Size=0x18 (Id=2746)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned char __align0[4];// Offset=0x4 Size=0x4
    unsigned long long xuidTarget;// Offset=0x8 Size=0x8
    unsigned long dwSettingId;// Offset=0x10 Size=0x4
};

struct XGI_SETPROFILEREADTESTHOOK_MSG// Size=0x4 (Id=2747)
{
    void * pXProfileReadOnlineSettings;// Offset=0x0 Size=0x4
};

struct XGI_GETLASTPROFILESYNC_MSG// Size=0x8 (Id=2748)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long * pdwLastSync;// Offset=0x4 Size=0x4
};

struct CFFOLDER_HMAC// Size=0x24 (Id=2749)
{
    struct CFFOLDER cffolder;// Offset=0x0 Size=0x8
    struct _RC4_SHA_HEADER hmac;// Offset=0x8 Size=0x1c
};

struct BSAFE_PUB_KEY// Size=0x14 (Id=2750)
{
    unsigned long magic;// Offset=0x0 Size=0x4
    unsigned long keylen;// Offset=0x4 Size=0x4
    unsigned long bitlen;// Offset=0x8 Size=0x4
    unsigned long datalen;// Offset=0xc Size=0x4
    unsigned long pubexp;// Offset=0x10 Size=0x4
};

struct XGI_READWRITETILE2_MSG// Size=0x38 (Id=2751)
{
    enum XTILETYPE eTileType;// Offset=0x0 Size=0x4
    unsigned long dwTitleId;// Offset=0x4 Size=0x4
    unsigned long long qwImageId;// Offset=0x8 Size=0x8
    unsigned long dwUserIndex;// Offset=0x10 Size=0x4
    unsigned char * pbImage;// Offset=0x14 Size=0x4
    unsigned long * pcbBuffer;// Offset=0x18 Size=0x4
    unsigned long cbBuffer;// Offset=0x1c Size=0x4
    unsigned long dwPitch;// Offset=0x20 Size=0x4
    unsigned long dwHeight;// Offset=0x24 Size=0x4
    int fSmall;// Offset=0x28 Size=0x4
    struct _XUSER_DATA * pKey;// Offset=0x2c Size=0x4
    unsigned long dwInternalFlags;// Offset=0x30 Size=0x4
};

struct XGI_SYNC_MSG// Size=0x4 (Id=2752)
{
    unsigned long dwUserIndexMask;// Offset=0x0 Size=0x4
};

struct ID3DXFileSaveObject// Size=0x4 (Id=2753)
{
    struct ID3DXFileSaveObjectVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct _XSTORAGE_PATH_STRING// Size=0x6 (Id=2754)
{
    unsigned short wNumPathChars;// Offset=0x0 Size=0x2
    unsigned short * pwszPath;// Offset=0x2 Size=0x4
};

struct _XMBYTEN4// Size=0x4 (Id=2755)
{
    union // Size=0x4 (Id=0)
    {
        char x;// Offset=0x0 Size=0x1
        char y;// Offset=0x1 Size=0x1
        char z;// Offset=0x2 Size=0x1
        char w;// Offset=0x3 Size=0x1
        unsigned int v;// Offset=0x0 Size=0x4
    };
};

struct _XNET_LOGON_TITLE// Size=0x24 (Id=2756)
{
    unsigned long dwTitleId;// Offset=0x0 Size=0x4
    unsigned long dwTitleVersion;// Offset=0x4 Size=0x4
    unsigned long dwTitleGameRegion;// Offset=0x8 Size=0x4
    unsigned long dwMediaId;// Offset=0xc Size=0x4
    struct _XNET_LOGON_CUSTOM_SERVICE_ID_LIST ServiceIdList;// Offset=0x10 Size=0x14
};

struct _QUERY_SEARCH_RESULT// Size=0x10 (Id=2757)
{
    unsigned long dwTotalResults;// Offset=0x0 Size=0x4
    unsigned long dwReturnedResults;// Offset=0x4 Size=0x4
    unsigned long dwNumResultAttributes;// Offset=0x8 Size=0x4
    struct _XONLINE_QUERY_ATTRIBUTE * pAttributes;// Offset=0xc Size=0x4
};

struct _LDRX_PATCH_DESCRIPTOR// Size=0x20 (Id=2758)
{
    struct _LIST_ENTRY ListEntry;// Offset=0x0 Size=0x8
    struct _STRING PathName;// Offset=0x8 Size=0x8
    struct _STRING Prefix;// Offset=0x10 Size=0x8
    struct _STRING Suffix;// Offset=0x18 Size=0x8
};

struct D3DXFLOAT16// Size=0x2 (Id=2759)
{
    unsigned short value;// Offset=0x0 Size=0x2
};

struct _PURCHASE_OFFER_PRICE// Size=0x18 (Id=2760)
{
    struct _GUID OfferID;// Offset=0x0 Size=0x10
    unsigned long dwMediaType;// Offset=0x10 Size=0x4
    unsigned long dwPrice;// Offset=0x14 Size=0x4
};

struct _D3DXFRAME// Size=0x50 (Id=2761)
{
    char * Name;// Offset=0x0 Size=0x4
    struct _D3DMATRIX TransformationMatrix;// Offset=0x4 Size=0x40
    struct _D3DXMESHCONTAINER * pMeshContainer;// Offset=0x44 Size=0x4
    struct _D3DXFRAME * pFrameSibling;// Offset=0x48 Size=0x4
    struct _D3DXFRAME * pFrameFirstChild;// Offset=0x4c Size=0x4
};

struct _DOWNLOAD_QUEUE_DELETE_ITEMS_REQUEST// Size=0x1e (Id=2762)
{
    unsigned long long xUserId;// Offset=0x0 Size=0x8
    unsigned long nQueueId;// Offset=0x8 Size=0x4
    struct _FILETIME ftLastModified;// Offset=0xc Size=0x8
    unsigned short wNumIds;// Offset=0x14 Size=0x2
    struct _GUID * pItemIds;// Offset=0x16 Size=0x4
    struct _DOWNLOAD_QUEUE_DELETE_ITEMS_RESPONSE * pResponse;// Offset=0x1a Size=0x4
};

struct _DM_SATA_CHANNEL_DATA// Size=0x20 (Id=2763)
{
    unsigned long Size;// Offset=0x0 Size=0x4
    unsigned long Version;// Offset=0x4 Size=0x4
    struct _SATA_CHANNEL_EXTENSION * ChannelExtension;// Offset=0x8 Size=0x4
    void  ( * StartPacketRoutine)(struct _SATA_CHANNEL_EXTENSION * ,struct _IRP * );// Offset=0xc Size=0x4
    void  ( * StartNextPacketRoutine)(struct _SATA_CHANNEL_EXTENSION * );// Offset=0x10 Size=0x4
    void  ( * AbortPacketRoutine)(struct _SATA_CHANNEL_EXTENSION * );// Offset=0x14 Size=0x4
    void  ( * RetryPacketRoutine)(struct _SATA_CHANNEL_EXTENSION * );// Offset=0x18 Size=0x4
    void  ( * ResetDeviceRoutine)(struct _SATA_CHANNEL_EXTENSION * );// Offset=0x1c Size=0x4
};

struct _AP21_MEASUREMENT_OUTPUT// Size=0x10 (Id=2764)
{
    unsigned char * Buffer[2];// Offset=0x0 Size=0x8
    unsigned long TimeReadComplete[2];// Offset=0x8 Size=0x8
};

struct _P_REPLY_BUDDY// Size=0xf (Id=2765)
{
    unsigned long long qwBuddyID;// Offset=0x0 Size=0x8
    unsigned short cbAcctName;// Offset=0x8 Size=0x2
    unsigned char bStatus;// Offset=0xa Size=0x1
    char * szAcctName;// Offset=0xb Size=0x4
};

struct _Q_SEND_MESSAGE_MSG// Size=0x5a (Id=2766)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwUserID;// Offset=0x20 Size=0x8
    unsigned long long qwSenderContext;// Offset=0x28 Size=0x8
    unsigned long dwMessageFlags;// Offset=0x30 Size=0x4
    unsigned long dwSenderTitleID;// Offset=0x34 Size=0x4
    unsigned short wExpireMinutes;// Offset=0x38 Size=0x2
    unsigned short cbDetails;// Offset=0x3a Size=0x2
    unsigned short cRecipients;// Offset=0x3c Size=0x2
    unsigned char bMessageType;// Offset=0x3e Size=0x1
    char szSenderName[15];// Offset=0x3f Size=0xf
    unsigned long long * qwRecipientIDs;// Offset=0x4e Size=0x4
    struct _XMSG_DETAILS * pDetails;// Offset=0x52 Size=0x4
    struct _XMSG_SEND_RESULT * pResults;// Offset=0x56 Size=0x4
};

struct _PASSPORT_GET_BUDDY_GAMERTAG_REQUEST// Size=0x12 (Id=2767)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned short wBuddyPassportMemberNameLength;// Offset=0x8 Size=0x2
    char * szBuddyPassportMemberName;// Offset=0xa Size=0x4
    struct _PASSPORT_GET_BUDDY_GAMERTAG_RESPONSE * pResult;// Offset=0xe Size=0x4
};

struct _MESSAGEBOX_PARAMS// Size=0x41c (Id=2768)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    enum HUDSCENE eHudType;// Offset=0x4 Size=0x4
    wchar_t szTitle[32];// Offset=0x8 Size=0x40
    wchar_t szText[384];// Offset=0x48 Size=0x300
    unsigned long cButtons;// Offset=0x348 Size=0x4
    wchar_t rgButtons[3][32];// Offset=0x34c Size=0xc0
    unsigned long dwFocusButton;// Offset=0x40c Size=0x4
    unsigned long dwFlags;// Offset=0x410 Size=0x4
    struct _MESSAGEBOX_RESULT * pResult;// Offset=0x414 Size=0x4
    struct _XOVERLAPPED * pOverlapped;// Offset=0x418 Size=0x4
};

struct _MIGRATE_XBOX1_USER_RESPONSE// Size=0x32 (Id=2769)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned char abXenonKey[16];// Offset=0x8 Size=0x10
    unsigned short wGamertagLength;// Offset=0x18 Size=0x2
    unsigned short * wszGamertag;// Offset=0x1a Size=0x4
    unsigned short wDomainLength;// Offset=0x1e Size=0x2
    unsigned short * wszDomain;// Offset=0x20 Size=0x4
    unsigned short wRealmLength;// Offset=0x24 Size=0x2
    unsigned short * wszRealm;// Offset=0x26 Size=0x4
    unsigned long dwParentalControlGroupId;// Offset=0x2a Size=0x4
    unsigned long dwCultureId;// Offset=0x2e Size=0x4
};

struct _XPARTY_GET_STATE_PARAMS// Size=0x8 (Id=2770)
{
    enum _XPARTY_STATE_TYPE * pState;// Offset=0x0 Size=0x4
    enum XPARTY_ERROR_TYPE * pLastError;// Offset=0x4 Size=0x4
};

struct ID3DXEffectPoolVtbl// Size=0xc (Id=2771)
{
    HRESULT  ( * QueryInterface)(struct ID3DXEffectPool * ,const struct _GUID * ,void ** );// Offset=0x0 Size=0x4
    unsigned long  ( * AddRef)(struct ID3DXEffectPool * );// Offset=0x4 Size=0x4
    unsigned long  ( * Release)(struct ID3DXEffectPool * );// Offset=0x8 Size=0x4
};

struct _XMSG_PROPERTY_ATTACHMENT// Size=0x10 (Id=2772)
{
    unsigned long cbAttach;// Offset=0x0 Size=0x4
    unsigned long dwAttachFlags;// Offset=0x4 Size=0x4
    unsigned long cbAttachUrl;// Offset=0x8 Size=0x4
    char szAttachUrl;// Offset=0xc Size=0x1
};

struct _PASSPORT_GET_MEMBER_NAME_REQUEST// Size=0xc (Id=2773)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    struct _PASSPORT_GET_MEMBER_NAME_RESPONSE * pResult;// Offset=0x8 Size=0x4
};

struct ID3DXConstantTable// Size=0x4 (Id=2774)
{
    struct ID3DXConstantTableVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct _ADD_PAYMENT_INSTRUMENT_REQUEST// Size=0x84 (Id=2775)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned long long qwMachineId;// Offset=0x8 Size=0x8
    struct _ADDRESS_INFO addressInfo;// Offset=0x10 Size=0x24
    struct _PHONE_INFO phoneInfo;// Offset=0x34 Size=0x12
    unsigned char bPaymentTypeId;// Offset=0x46 Size=0x1
    struct _CREDIT_CARD_INFO creditCardInfo;// Offset=0x47 Size=0x1b
    struct _DIRECT_DEBIT_INFO directDebitInfo;// Offset=0x62 Size=0x1e
    struct _ADD_PAYMENT_INSTRUMENT_RESPONSE * pResponse;// Offset=0x80 Size=0x4
};

struct ID3DXAllocateHierarchyVtbl// Size=0x10 (Id=2776)
{
    HRESULT  ( * CreateFrame)(struct ID3DXAllocateHierarchy * ,char * ,struct _D3DXFRAME ** );// Offset=0x0 Size=0x4
    HRESULT  ( * CreateMeshContainer)(struct ID3DXAllocateHierarchy * ,char * ,struct _D3DXMESHDATA * ,struct _D3DXMATERIAL * ,struct _D3DXEFFECTINSTANCE * ,unsigned long ,unsigned long * ,struct ID3DXSkinInfo * ,struct _D3DXMESHCONTAINER ** );// Offset=0x4 Size=0x4
    HRESULT  ( * DestroyFrame)(struct ID3DXAllocateHierarchy * ,struct _D3DXFRAME * );// Offset=0x8 Size=0x4
    HRESULT  ( * DestroyMeshContainer)(struct ID3DXAllocateHierarchy * ,struct _D3DXMESHCONTAINER * );// Offset=0xc Size=0x4
};

struct _XMSG_DETAILS_BLOB// Size=0x1000 (Id=2777)
{
    unsigned char rgbDetailsBlob[4096];// Offset=0x0 Size=0x1000
};

struct IClassFactory// Size=0x4 (Id=2778)
{
    struct IClassFactoryVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct ID3DXFileEnumObjectVtbl// Size=0x20 (Id=2779)
{
    HRESULT  ( * QueryInterface)(struct ID3DXFileEnumObject * ,const struct _GUID * ,void ** );// Offset=0x0 Size=0x4
    unsigned long  ( * AddRef)(struct ID3DXFileEnumObject * );// Offset=0x4 Size=0x4
    unsigned long  ( * Release)(struct ID3DXFileEnumObject * );// Offset=0x8 Size=0x4
    HRESULT  ( * GetFile)(struct ID3DXFileEnumObject * ,struct ID3DXFile ** );// Offset=0xc Size=0x4
    HRESULT  ( * GetChildren)(struct ID3DXFileEnumObject * ,unsigned long * );// Offset=0x10 Size=0x4
    HRESULT  ( * GetChild)(struct ID3DXFileEnumObject * ,unsigned long ,struct ID3DXFileData ** );// Offset=0x14 Size=0x4
    HRESULT  ( * GetDataObjectById)(struct ID3DXFileEnumObject * ,const struct _GUID * ,struct ID3DXFileData ** );// Offset=0x18 Size=0x4
    HRESULT  ( * GetDataObjectByName)(struct ID3DXFileEnumObject * ,char * ,struct ID3DXFileData ** );// Offset=0x1c Size=0x4
};

struct _XPNGDECODE_PARAMS// Size=0x1c (Id=2780)
{
    unsigned char * pbInputBuffer;// Offset=0x0 Size=0x4
    unsigned long dwInputBufferLen;// Offset=0x4 Size=0x4
    unsigned char * pbOutputTextureBits;// Offset=0x8 Size=0x4
    unsigned long cbOutputTextureBits;// Offset=0xc Size=0x4
    struct D3DTexture * pOutputTexture;// Offset=0x10 Size=0x4
    struct _XUIBRUSH ** phOutputTextureBrush;// Offset=0x14 Size=0x4
    struct _XOVERLAPPED * pOverlapped;// Offset=0x18 Size=0x4
};

struct _XMUSHORTN4// Size=0x8 (Id=2781)
{
    unsigned short x;// Offset=0x0 Size=0x2
    unsigned short y;// Offset=0x2 Size=0x2
    unsigned short z;// Offset=0x4 Size=0x2
    unsigned short w;// Offset=0x6 Size=0x2
};

struct _XMUSHORT2// Size=0x4 (Id=2782)
{
    unsigned short x;// Offset=0x0 Size=0x2
    unsigned short y;// Offset=0x2 Size=0x2
};

union _unnamed_2783// Size=0x8 (Id=2783)
{
    unsigned long long ForwarderString;// Offset=0x0 Size=0x8
    unsigned long long Function;// Offset=0x0 Size=0x8
    unsigned long long Ordinal;// Offset=0x0 Size=0x8
    unsigned long long AddressOfData;// Offset=0x0 Size=0x8
};

struct _IMAGE_THUNK_DATA64// Size=0x8 (Id=2784)
{
    union _unnamed_2783 u1;// Offset=0x0 Size=0x8
};

struct _CONSUME_ASSETS_REQUEST// Size=0x1c (Id=2785)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned long long qwMachineId;// Offset=0x8 Size=0x8
    unsigned long dwTitleId;// Offset=0x10 Size=0x4
    unsigned long cAssets;// Offset=0x14 Size=0x4
    struct _XMARKETPLACE_ASSET * pAssets;// Offset=0x18 Size=0x4
};

struct _RAW_DUMP_INFO// Size=0x46 (Id=2786)
{
    unsigned long Signature;// Offset=0x0 Size=0x4
    struct // Size=0x2 (Id=0)
    {
        unsigned char IsValid:1;// Offset=0x4 Size=0x1 BitOffset=0x7 BitSize=0x1
        unsigned char IsProcessed:1;// Offset=0x4 Size=0x1 BitOffset=0x6 BitSize=0x1
        unsigned char Location:3;// Offset=0x4 Size=0x1 BitOffset=0x3 BitSize=0x3
        unsigned char Format:3;// Offset=0x4 Size=0x1 BitOffset=0x0 BitSize=0x3
        unsigned char ProcessDumpLocation:4;// Offset=0x5 Size=0x1 BitOffset=0x4 BitSize=0x4
    };
    unsigned char BucketData[64];// Offset=0x6 Size=0x40
};

struct _XIPTV_DVR_QUERY_STATUS_MSG_ARGS// Size=0x4 (Id=2787)
{
    struct _XIPTV_DVR_QUERY_STATUS * Status;// Offset=0x0 Size=0x4
};

struct _XSIGNER_HEADER// Size=0x130 (Id=2788)
{
    unsigned long HeaderID;// Offset=0x0 Size=0x4
    unsigned long HeaderVersion;// Offset=0x4 Size=0x4
    unsigned long HeaderSize;// Offset=0x8 Size=0x4
    struct _FILETIME DateTimeSigned;// Offset=0xc Size=0x8
    unsigned long FileSize;// Offset=0x14 Size=0x4
    unsigned long Flags;// Offset=0x18 Size=0x4
    unsigned char FileHash[20];// Offset=0x1c Size=0x14
    unsigned char Signature[256];// Offset=0x30 Size=0x100
};

struct _XCONFIG_CONSOLE_SETTINGS// Size=0x144 (Id=2789)
{
    unsigned long CheckSum;// Offset=0x0 Size=0x4
    unsigned long Version;// Offset=0x4 Size=0x4
    short ScreenSaver;// Offset=0x8 Size=0x2
    short AutoShutOff;// Offset=0xa Size=0x2
    unsigned char WirelessSettings[256];// Offset=0xc Size=0x100
    unsigned long CameraSettings;// Offset=0x10c Size=0x4
    unsigned char CameraSettingsReserved[28];// Offset=0x110 Size=0x1c
    struct _XCONFIG_PLAYTIMERDATA PlayTimerData;// Offset=0x12c Size=0x14
    short MediaDisableAutoLaunch;// Offset=0x140 Size=0x2
    short KeyboardLayout;// Offset=0x142 Size=0x2
};

struct _KWAIT_BLOCK// Size=0x18 (Id=2790)
{
    struct _LIST_ENTRY WaitListEntry;// Offset=0x0 Size=0x8
    struct _KTHREAD * Thread;// Offset=0x8 Size=0x4
    void * Object;// Offset=0xc Size=0x4
    struct _KWAIT_BLOCK * NextWaitBlock;// Offset=0x10 Size=0x4
    unsigned short WaitKey;// Offset=0x14 Size=0x2
    unsigned short WaitType;// Offset=0x16 Size=0x2
};

struct _XHTTP_REQUEST_DOWNLOAD_TO_CACHE_PARAMS// Size=0x72e (Id=2791)
{
    struct _XHTTP_REQUEST pRequest[1];// Offset=0x0 Size=0x70a
    unsigned long cbRequestData;// Offset=0x70a Size=0x4
    unsigned long dwRequestDataPointer;// Offset=0x70e Size=0x4
    unsigned long dwCacheFileType;// Offset=0x712 Size=0x4
    unsigned long dwCacheIdentifier;// Offset=0x716 Size=0x4
    unsigned long long qwCacheIdentifier;// Offset=0x71a Size=0x8
    unsigned long long qwCacheVersion;// Offset=0x722 Size=0x8
    struct _XHTTP_REQUEST_DOWNLOAD_TO_CACHE_RESULTS * pResults;// Offset=0x72a Size=0x4
};

struct XMEDIAPACKET// Size=0x18 (Id=2792)
{
    long Status;// Offset=0x0 Size=0x4
    unsigned long Offset;// Offset=0x4 Size=0x4
    unsigned char * Buffer;// Offset=0x8 Size=0x4
    unsigned long Length;// Offset=0xc Size=0x4
    unsigned long Resrvd;// Offset=0x10 Size=0x4
    enum XMEDIAFORMAT Format;// Offset=0x14 Size=0x4
};

struct _HV_PAGE_INFO// Size=0x18 (Id=2793)
{
    unsigned long PageDescription;// Offset=0x0 Size=0x4
    unsigned char DataDigest[20];// Offset=0x4 Size=0x14
};

struct D3DVertexBuffer// Size=0x20 (Id=2794)
{
    unsigned long Common;// Offset=0x0 Size=0x4
    unsigned long ReferenceCount;// Offset=0x4 Size=0x4
    unsigned long Fence;// Offset=0x8 Size=0x4
    unsigned long ReadFence;// Offset=0xc Size=0x4
    unsigned long Identifier;// Offset=0x10 Size=0x4
    unsigned long BaseFlush;// Offset=0x14 Size=0x4
    union GPUVERTEX_FETCH_CONSTANT Format;// Offset=0x18 Size=0x8
};

struct IStreamVtbl// Size=0x38 (Id=2795)
{
    HRESULT  ( * QueryInterface)(struct IStream * ,const struct _GUID * ,void ** );// Offset=0x0 Size=0x4
    unsigned long  ( * AddRef)(struct IStream * );// Offset=0x4 Size=0x4
    unsigned long  ( * Release)(struct IStream * );// Offset=0x8 Size=0x4
    HRESULT  ( * Read)(struct IStream * ,void * ,unsigned long ,unsigned long * );// Offset=0xc Size=0x4
    HRESULT  ( * Write)(struct IStream * ,void * ,unsigned long ,unsigned long * );// Offset=0x10 Size=0x4
    HRESULT  ( * Seek)(struct IStream * ,union _LARGE_INTEGER ,unsigned long ,union _ULARGE_INTEGER * );// Offset=0x14 Size=0x4
    HRESULT  ( * SetSize)(struct IStream * ,union _ULARGE_INTEGER );// Offset=0x18 Size=0x4
    HRESULT  ( * CopyTo)(struct IStream * ,struct IStream * ,union _ULARGE_INTEGER ,union _ULARGE_INTEGER * ,union _ULARGE_INTEGER * );// Offset=0x1c Size=0x4
    HRESULT  ( * Commit)(struct IStream * ,unsigned long );// Offset=0x20 Size=0x4
    HRESULT  ( * Revert)(struct IStream * );// Offset=0x24 Size=0x4
    HRESULT  ( * LockRegion)(struct IStream * ,union _ULARGE_INTEGER ,union _ULARGE_INTEGER ,unsigned long );// Offset=0x28 Size=0x4
    HRESULT  ( * UnlockRegion)(struct IStream * ,union _ULARGE_INTEGER ,union _ULARGE_INTEGER ,unsigned long );// Offset=0x2c Size=0x4
    HRESULT  ( * Stat)(struct IStream * ,struct tagSTATSTG * ,unsigned long );// Offset=0x30 Size=0x4
    HRESULT  ( * Clone)(struct IStream * ,struct IStream ** );// Offset=0x34 Size=0x4
};

struct _XONLINE_MATCH_SEARCHRESULT_HEADER// Size=0x10 (Id=2796)
{
    unsigned long dwReserved;// Offset=0x0 Size=0x4
    unsigned short NumSearchResults;// Offset=0x4 Size=0x2
    unsigned short Flags;// Offset=0x6 Size=0x2
    unsigned long LoggingThreshold;// Offset=0x8 Size=0x4
    struct _XONLINE_MATCH_SEARCHRESULT * pResults;// Offset=0xc Size=0x4
};

struct _XONLINE_QUERY_ATTRIBUTE// Size=0x10 (Id=2797)
{
    unsigned long dwAttributeID;// Offset=0x0 Size=0x4
    union _XONLINE_QUERY_ATTRIBUTE_DATA info;// Offset=0x4 Size=0xc
};

struct _GET_USER_SUBSCRIPTION_DETAILS_RESPONSE// Size=0xf5 (Id=2798)
{
    unsigned short wSubscriptionIdLength;// Offset=0x0 Size=0x2
    unsigned short * wszSubscriptionId;// Offset=0x2 Size=0x4
    unsigned short wDescriptionLength;// Offset=0x6 Size=0x2
    unsigned short * wszDescription;// Offset=0x8 Size=0x4
    unsigned char bCurrentOfferStatus;// Offset=0xc Size=0x1
    unsigned char bDelayedCancel;// Offset=0xd Size=0x1
    unsigned short wFriendlyNameLength;// Offset=0xe Size=0x2
    unsigned short * wszFriendlyName;// Offset=0x10 Size=0x4
    unsigned char bAnniversaryDate;// Offset=0x14 Size=0x1
    struct _FILETIME ftPurchaseDate;// Offset=0x15 Size=0x8
    struct _FILETIME ftActivationDate;// Offset=0x1d Size=0x8
    struct _FILETIME ftEndDate;// Offset=0x25 Size=0x8
    unsigned char bHasViolations;// Offset=0x2d Size=0x1
    unsigned long dwRenewalGracePeriod;// Offset=0x2e Size=0x4
    unsigned char bRenewalOfferStatus;// Offset=0x32 Size=0x1
    unsigned long long qwRenewalOfferId;// Offset=0x33 Size=0x8
    struct _GET_USER_SUBSCRIPTION_DETAILS_DATA currentOfferDetails;// Offset=0x3b Size=0x16
    struct _GET_USER_SUBSCRIPTION_DETAILS_DATA renewalOfferDetails;// Offset=0x51 Size=0x16
    struct _PAYMENT_INSTRUMENT_INFO paymentInstrument;// Offset=0x67 Size=0x8e
};

struct D3DPixelShader// Size=0x18 (Id=2799)
{
    unsigned long Common;// Offset=0x0 Size=0x4
    unsigned long ReferenceCount;// Offset=0x4 Size=0x4
    unsigned long Fence;// Offset=0x8 Size=0x4
    unsigned long ReadFence;// Offset=0xc Size=0x4
    unsigned long Identifier;// Offset=0x10 Size=0x4
    unsigned long BaseFlush;// Offset=0x14 Size=0x4
};

struct D3DXPLANE// Size=0x10 (Id=2800)
{
    float a;// Offset=0x0 Size=0x4
    float b;// Offset=0x4 Size=0x4
    float c;// Offset=0x8 Size=0x4
    float d;// Offset=0xc Size=0x4
};

struct _XMFLOAT3X3// Size=0x24 (Id=2801)
{
    union // Size=0x24 (Id=0)
    {
        float _11;// Offset=0x0 Size=0x4
        float _12;// Offset=0x4 Size=0x4
        float _13;// Offset=0x8 Size=0x4
        float _21;// Offset=0xc Size=0x4
        float _22;// Offset=0x10 Size=0x4
        float _23;// Offset=0x14 Size=0x4
        float _31;// Offset=0x18 Size=0x4
        float _32;// Offset=0x1c Size=0x4
        float _33;// Offset=0x20 Size=0x4
        float m[3][3];// Offset=0x0 Size=0x24
    };
};

struct _ACCOUNT_RESERVE_GAMERTAG_REQUEST// Size=0x15 (Id=2802)
{
    unsigned long long qwMachineId;// Offset=0x0 Size=0x8
    unsigned char bCountryId;// Offset=0x8 Size=0x1
    unsigned short wMaxSuggestedNames;// Offset=0x9 Size=0x2
    unsigned short wGamertagLength;// Offset=0xb Size=0x2
    unsigned short * wszGamertag;// Offset=0xd Size=0x4
    struct _ACCOUNT_RESERVE_GAMERTAG_RESPONSE * pResponse;// Offset=0x11 Size=0x4
};

struct _XONLINE_TEAM// Size=0x32 (Id=2803)
{
    unsigned long long qwTeamID;// Offset=0x0 Size=0x8
    unsigned long dwNumMembers;// Offset=0x8 Size=0x4
    unsigned short cbTeamName;// Offset=0xc Size=0x2
    unsigned short cbTeamDescription;// Offset=0xe Size=0x2
    unsigned short cbTeamMotto;// Offset=0x10 Size=0x2
    unsigned short cbTeamURL;// Offset=0x12 Size=0x2
    unsigned short cbTeamData;// Offset=0x14 Size=0x2
    unsigned long long ftCreated;// Offset=0x16 Size=0x8
    unsigned short * wszTeamName;// Offset=0x1e Size=0x4
    unsigned short * wszTeamDescription;// Offset=0x22 Size=0x4
    unsigned short * wszTeamMotto;// Offset=0x26 Size=0x4
    unsigned short * wszTeamURL;// Offset=0x2a Size=0x4
    unsigned char * pbTeamData;// Offset=0x2e Size=0x4
};

struct _PASSPORT_GET_FRIEND_MEMBER_NAME_REQUEST// Size=0x14 (Id=2804)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned long long qwFriendUserId;// Offset=0x8 Size=0x8
    struct _PASSPORT_GET_FRIEND_MEMBER_NAME_RESPONSE * pResult;// Offset=0x10 Size=0x4
};

struct _Q_SEND_MESSAGE_MSG_INTERNAL// Size=0x4e (Id=2805)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwUserID;// Offset=0x20 Size=0x8
    unsigned long long qwSenderContext;// Offset=0x28 Size=0x8
    unsigned long dwMessageFlags;// Offset=0x30 Size=0x4
    unsigned long dwSenderTitleID;// Offset=0x34 Size=0x4
    unsigned short wExpireMinutes;// Offset=0x38 Size=0x2
    unsigned short cbDetails;// Offset=0x3a Size=0x2
    unsigned short cRecipients;// Offset=0x3c Size=0x2
    unsigned char bMessageType;// Offset=0x3e Size=0x1
    char szSenderName[15];// Offset=0x3f Size=0xf
};

struct _TRACK_DATA// Size=0x8 (Id=2806)
{
    unsigned char Reserved;// Offset=0x0 Size=0x1
    struct // Size=0x1 (Id=0)
    {
        unsigned char Control:4;// Offset=0x1 Size=0x1 BitOffset=0x0 BitSize=0x4
        unsigned char Adr:4;// Offset=0x1 Size=0x1 BitOffset=0x4 BitSize=0x4
    };
    unsigned char TrackNumber;// Offset=0x2 Size=0x1
    unsigned char Reserved1;// Offset=0x3 Size=0x1
    unsigned char Address[4];// Offset=0x4 Size=0x4
};

struct IDirectXFileObject// Size=0x4 (Id=2807)
{
    struct IDirectXFileObjectVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct D3DConstantBuffer// Size=0x20 (Id=2808)
{
    unsigned long Common;// Offset=0x0 Size=0x4
    unsigned long ReferenceCount;// Offset=0x4 Size=0x4
    unsigned long Fence;// Offset=0x8 Size=0x4
    unsigned long ReadFence;// Offset=0xc Size=0x4
    unsigned long Identifier;// Offset=0x10 Size=0x4
    unsigned long BaseFlush;// Offset=0x14 Size=0x4
    unsigned long Address;// Offset=0x18 Size=0x4
    unsigned long Size;// Offset=0x1c Size=0x4
};

struct _DVD_XGD2_DRIVE_AUTH_RESULT// Size=0x8 (Id=2809)
{
    enum _DVD_XGD2_DRIVE_AUTH_RESULT_CODE ResultCode;// Offset=0x0 Size=0x4
    long Status;// Offset=0x4 Size=0x4
};

struct _ACCOUNT_CHANGE_GAMERTAG_REQUEST// Size=0x1a (Id=2810)
{
    unsigned long long qwMachineId;// Offset=0x0 Size=0x8
    unsigned long long qwUserId;// Offset=0x8 Size=0x8
    unsigned short wGamertagLength;// Offset=0x10 Size=0x2
    unsigned short * wszGamertag;// Offset=0x12 Size=0x4
    struct _ACCOUNT_CHANGE_GAMERTAG_RESPONSE * pResponse;// Offset=0x16 Size=0x4
};

struct _MIGRATE_XBOX_COM_USER_RESPONSE// Size=0x32 (Id=2811)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned char abXenonKey[16];// Offset=0x8 Size=0x10
    unsigned short wGamertagLength;// Offset=0x18 Size=0x2
    unsigned short * wszGamertag;// Offset=0x1a Size=0x4
    unsigned short wDomainLength;// Offset=0x1e Size=0x2
    unsigned short * wszDomain;// Offset=0x20 Size=0x4
    unsigned short wRealmLength;// Offset=0x24 Size=0x2
    unsigned short * wszRealm;// Offset=0x26 Size=0x4
    unsigned long dwParentalControlGroupId;// Offset=0x2a Size=0x4
    unsigned long dwCultureId;// Offset=0x2e Size=0x4
};

struct _DVD_AP25_CHALLENGE_HISTORY// Size=0x100 (Id=2812)
{
    union // Size=0x80 (Id=0)
    {
        short Accuracy[64];// Offset=0x0 Size=0x80
        unsigned char CipherText[256];// Offset=0x0 Size=0x100
    };
};

struct ID3DXEffectStateManager// Size=0x4 (Id=2813)
{
    struct ID3DXEffectStateManagerVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct _XSIGNATURE_CERTIFY_PUBLIC_KEY_REPLY// Size=0xc (Id=2814)
{
    unsigned short wCertificateSize;// Offset=0x0 Size=0x2
    unsigned char * pbCertificate;// Offset=0x2 Size=0x4
    unsigned short wSerializedCertificateSize;// Offset=0x6 Size=0x2
    unsigned char * pbSerializedCertificate;// Offset=0x8 Size=0x4
};

struct ID3DXFragmentLinker// Size=0x4 (Id=2815)
{
    struct ID3DXFragmentLinkerVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct ID3DXMatrixStackVtbl// Size=0x48 (Id=2816)
{
    HRESULT  ( * QueryInterface)(struct ID3DXMatrixStack * ,const struct _GUID * ,void ** );// Offset=0x0 Size=0x4
    unsigned long  ( * AddRef)(struct ID3DXMatrixStack * );// Offset=0x4 Size=0x4
    unsigned long  ( * Release)(struct ID3DXMatrixStack * );// Offset=0x8 Size=0x4
    HRESULT  ( * Pop)(struct ID3DXMatrixStack * );// Offset=0xc Size=0x4
    HRESULT  ( * Push)(struct ID3DXMatrixStack * );// Offset=0x10 Size=0x4
    HRESULT  ( * LoadIdentity)(struct ID3DXMatrixStack * );// Offset=0x14 Size=0x4
    HRESULT  ( * LoadMatrix)(struct ID3DXMatrixStack * ,struct _D3DMATRIX * );// Offset=0x18 Size=0x4
    HRESULT  ( * MultMatrix)(struct ID3DXMatrixStack * ,struct _D3DMATRIX * );// Offset=0x1c Size=0x4
    HRESULT  ( * MultMatrixLocal)(struct ID3DXMatrixStack * ,struct _D3DMATRIX * );// Offset=0x20 Size=0x4
    HRESULT  ( * RotateAxis)(struct ID3DXMatrixStack * ,struct _D3DVECTOR * ,float );// Offset=0x24 Size=0x4
    HRESULT  ( * RotateAxisLocal)(struct ID3DXMatrixStack * ,struct _D3DVECTOR * ,float );// Offset=0x28 Size=0x4
    HRESULT  ( * RotateYawPitchRoll)(struct ID3DXMatrixStack * ,float ,float ,float );// Offset=0x2c Size=0x4
    HRESULT  ( * RotateYawPitchRollLocal)(struct ID3DXMatrixStack * ,float ,float ,float );// Offset=0x30 Size=0x4
    HRESULT  ( * Scale)(struct ID3DXMatrixStack * ,float ,float ,float );// Offset=0x34 Size=0x4
    HRESULT  ( * ScaleLocal)(struct ID3DXMatrixStack * ,float ,float ,float );// Offset=0x38 Size=0x4
    HRESULT  ( * Translate)(struct ID3DXMatrixStack * ,float ,float ,float );// Offset=0x3c Size=0x4
    HRESULT  ( * TranslateLocal)(struct ID3DXMatrixStack * ,float ,float ,float );// Offset=0x40 Size=0x4
    struct _D3DMATRIX *  ( * GetTop)(struct ID3DXMatrixStack * );// Offset=0x44 Size=0x4
};

struct _MM_DEVKIT_STATISTICS// Size=0x90 (Id=2817)
{
    unsigned long Length;// Offset=0x0 Size=0x4
    struct _MM_STATISTICS MemoryStatistics;// Offset=0x4 Size=0x68
    unsigned long TitleAvailableDebugPages;// Offset=0x6c Size=0x4
    unsigned long TitleTotalDebugPages;// Offset=0x70 Size=0x4
    unsigned long SystemAvailableDebugPages;// Offset=0x74 Size=0x4
    unsigned long SystemTotalDebugPages;// Offset=0x78 Size=0x4
    unsigned long TotalRetailPages;// Offset=0x7c Size=0x4
    unsigned long TitleTotalRetailPhysicalPages;// Offset=0x80 Size=0x4
    unsigned long TitleTotalDevkitPhysicalPages;// Offset=0x84 Size=0x4
    unsigned long SystemTotalRetailPhysicalPages;// Offset=0x88 Size=0x4
    unsigned long SystemTotalDevkitPhysicalPages;// Offset=0x8c Size=0x4
};

struct D3DCommandBuffer// Size=0x68 (Id=2818)
{
    unsigned long Common;// Offset=0x0 Size=0x4
    unsigned long ReferenceCount;// Offset=0x4 Size=0x4
    unsigned long Fence;// Offset=0x8 Size=0x4
    unsigned long ReadFence;// Offset=0xc Size=0x4
    unsigned long Identifier;// Offset=0x10 Size=0x4
    unsigned long BaseFlush;// Offset=0x14 Size=0x4
    struct _D3DTAGCOLLECTION m_Inherited;// Offset=0x18 Size=0x28
    struct _D3DTAGCOLLECTION m_Persisted;// Offset=0x40 Size=0x28
};

struct ID3DXSaveUserDataVtbl// Size=0x18 (Id=2819)
{
    HRESULT  ( * AddFrameChildData)(struct _D3DXFRAME * ,struct IDirectXFileSaveObject * ,struct IDirectXFileData * );// Offset=0x0 Size=0x4
    HRESULT  ( * AddMeshChildData)(struct _D3DXMESHCONTAINER * ,struct IDirectXFileSaveObject * ,struct IDirectXFileData * );// Offset=0x4 Size=0x4
    HRESULT  ( * AddTopLevelDataObjectsPre)(struct IDirectXFileSaveObject * );// Offset=0x8 Size=0x4
    HRESULT  ( * AddTopLevelDataObjectsPost)(struct IDirectXFileSaveObject * );// Offset=0xc Size=0x4
    HRESULT  ( * RegisterTemplates)(struct IDirectXFile * );// Offset=0x10 Size=0x4
    HRESULT  ( * SaveTemplates)(struct IDirectXFileSaveObject * );// Offset=0x14 Size=0x4
};

struct _GENERIC_LIST_MODIFY_LIST_RESPONSE// Size=0x8 (Id=2820)
{
    struct _FILETIME ftLastModified;// Offset=0x0 Size=0x8
};

struct IDirectXFileDataReferenceVtbl// Size=0x18 (Id=2821)
{
    HRESULT  ( * QueryInterface)(struct IDirectXFileDataReference * ,const struct _GUID * ,void ** );// Offset=0x0 Size=0x4
    unsigned long  ( * AddRef)(struct IDirectXFileDataReference * );// Offset=0x4 Size=0x4
    unsigned long  ( * Release)(struct IDirectXFileDataReference * );// Offset=0x8 Size=0x4
    HRESULT  ( * GetName)(struct IDirectXFileDataReference * ,char * ,unsigned long * );// Offset=0xc Size=0x4
    HRESULT  ( * GetId)(struct IDirectXFileDataReference * ,struct _GUID * );// Offset=0x10 Size=0x4
    HRESULT  ( * Resolve)(struct IDirectXFileDataReference * ,struct IDirectXFileData ** );// Offset=0x14 Size=0x4
};

struct _XPARTY_KICK_USER_PARAMS// Size=0x8 (Id=2822)
{
    unsigned long long xuid;// Offset=0x0 Size=0x8
};

union _unnamed_2823// Size=0x2 (Id=2823)
{
    struct // Size=0x2 (Id=0)
    {
        unsigned short SMARTFeatureSupport:1;// Offset=0x0 Size=0x2 BitOffset=0x0 BitSize=0x1
        unsigned short SecurityModeFeatureSupport:1;// Offset=0x0 Size=0x2 BitOffset=0x1 BitSize=0x1
        unsigned short RemovableMediaFeatureSupport:1;// Offset=0x0 Size=0x2 BitOffset=0x2 BitSize=0x1
        unsigned short PowerManagementFeatureSupport:1;// Offset=0x0 Size=0x2 BitOffset=0x3 BitSize=0x1
        unsigned short PacketFeatureSupport:1;// Offset=0x0 Size=0x2 BitOffset=0x4 BitSize=0x1
        unsigned short WriteCacheFeatureSupport:1;// Offset=0x0 Size=0x2 BitOffset=0x5 BitSize=0x1
        unsigned short LookAheadFeatureSupport:1;// Offset=0x0 Size=0x2 BitOffset=0x6 BitSize=0x1
        unsigned short ReleaseInterruptSupport:1;// Offset=0x0 Size=0x2 BitOffset=0x7 BitSize=0x1
        unsigned short ServiceInterruptSupport:1;// Offset=0x0 Size=0x2 BitOffset=0x8 BitSize=0x1
        unsigned short DeviceResetCommandSupport:1;// Offset=0x0 Size=0x2 BitOffset=0x9 BitSize=0x1
        unsigned short HostProtectedAreaFeatureSupport:1;// Offset=0x0 Size=0x2 BitOffset=0xa BitSize=0x1
        unsigned short Reserved13:1;// Offset=0x0 Size=0x2 BitOffset=0xb BitSize=0x1
        unsigned short WriteBufferCommandSupport:1;// Offset=0x0 Size=0x2 BitOffset=0xc BitSize=0x1
        unsigned short ReadBufferCommandSupport:1;// Offset=0x0 Size=0x2 BitOffset=0xd BitSize=0x1
        unsigned short NopCommandSupport:1;// Offset=0x0 Size=0x2 BitOffset=0xe BitSize=0x1
        unsigned short Reserved14:1;// Offset=0x0 Size=0x2 BitOffset=0xf BitSize=0x1
    };
    unsigned short AsUSHORT;// Offset=0x0 Size=0x2
};

union _unnamed_2824// Size=0x2 (Id=2824)
{
    struct // Size=0x2 (Id=0)
    {
        unsigned short DownloadMicrocodeCommandSupport:1;// Offset=0x0 Size=0x2 BitOffset=0x0 BitSize=0x1
        unsigned short DmaQueuedCommandSupport:1;// Offset=0x0 Size=0x2 BitOffset=0x1 BitSize=0x1
        unsigned short CFAFeatureSupport:1;// Offset=0x0 Size=0x2 BitOffset=0x2 BitSize=0x1
        unsigned short AdvancedPowerManagementFeatureSupport:1;// Offset=0x0 Size=0x2 BitOffset=0x3 BitSize=0x1
        unsigned short MediaStatusNotificationFeatureSupport:1;// Offset=0x0 Size=0x2 BitOffset=0x4 BitSize=0x1
        unsigned short PowerFromStandbyFeatureSupport:1;// Offset=0x0 Size=0x2 BitOffset=0x5 BitSize=0x1
        unsigned short SetFeaturesAfterPowerUpRequired:1;// Offset=0x0 Size=0x2 BitOffset=0x6 BitSize=0x1
        unsigned short AddressOffsetReservedAreaBoot:1;// Offset=0x0 Size=0x2 BitOffset=0x7 BitSize=0x1
        unsigned short SetMaximumCommandSupport:1;// Offset=0x0 Size=0x2 BitOffset=0x8 BitSize=0x1
        unsigned short AcousticManagementFeatureSupport:1;// Offset=0x0 Size=0x2 BitOffset=0x9 BitSize=0x1
        unsigned short Lba48BitFeatureSupport:1;// Offset=0x0 Size=0x2 BitOffset=0xa BitSize=0x1
        unsigned short DeviceConfigOverlapFeatureSupport:1;// Offset=0x0 Size=0x2 BitOffset=0xb BitSize=0x1
        unsigned short FlushCacheCommandSupport:1;// Offset=0x0 Size=0x2 BitOffset=0xc BitSize=0x1
        unsigned short FlushCacheExtCommandSupport:1;// Offset=0x0 Size=0x2 BitOffset=0xd BitSize=0x1
        unsigned short Reserved15:2;// Offset=0x0 Size=0x2 BitOffset=0xe BitSize=0x2
    };
    unsigned short AsUSHORT;// Offset=0x0 Size=0x2
};

union _unnamed_2825// Size=0x2 (Id=2825)
{
    unsigned short AsUSHORT;// Offset=0x0 Size=0x2
};

union _unnamed_2826// Size=0x2 (Id=2826)
{
    struct // Size=0x2 (Id=0)
    {
        unsigned short SMARTFeatureEnabled:1;// Offset=0x0 Size=0x2 BitOffset=0x0 BitSize=0x1
        unsigned short SecurityModeFeatureEnabled:1;// Offset=0x0 Size=0x2 BitOffset=0x1 BitSize=0x1
        unsigned short RemovableMediaFeatureEnabled:1;// Offset=0x0 Size=0x2 BitOffset=0x2 BitSize=0x1
        unsigned short PowerManagementFeatureEnabled:1;// Offset=0x0 Size=0x2 BitOffset=0x3 BitSize=0x1
        unsigned short PacketFeatureEnabled:1;// Offset=0x0 Size=0x2 BitOffset=0x4 BitSize=0x1
        unsigned short WriteCacheFeatureEnabled:1;// Offset=0x0 Size=0x2 BitOffset=0x5 BitSize=0x1
        unsigned short LookAheadFeatureEnabled:1;// Offset=0x0 Size=0x2 BitOffset=0x6 BitSize=0x1
        unsigned short ReleaseInterruptEnabled:1;// Offset=0x0 Size=0x2 BitOffset=0x7 BitSize=0x1
        unsigned short ServiceInterruptEnabled:1;// Offset=0x0 Size=0x2 BitOffset=0x8 BitSize=0x1
        unsigned short DeviceResetCommandEnabled:1;// Offset=0x0 Size=0x2 BitOffset=0x9 BitSize=0x1
        unsigned short HostProtectedAreaFeatureEnabled:1;// Offset=0x0 Size=0x2 BitOffset=0xa BitSize=0x1
        unsigned short Reserved16:1;// Offset=0x0 Size=0x2 BitOffset=0xb BitSize=0x1
        unsigned short WriteBufferCommandEnabled:1;// Offset=0x0 Size=0x2 BitOffset=0xc BitSize=0x1
        unsigned short ReadBufferCommandEnabled:1;// Offset=0x0 Size=0x2 BitOffset=0xd BitSize=0x1
        unsigned short NopCommandEnabled:1;// Offset=0x0 Size=0x2 BitOffset=0xe BitSize=0x1
        unsigned short Reserved17:1;// Offset=0x0 Size=0x2 BitOffset=0xf BitSize=0x1
    };
    unsigned short AsUSHORT;// Offset=0x0 Size=0x2
};

union _unnamed_2827// Size=0x2 (Id=2827)
{
    struct // Size=0x2 (Id=0)
    {
        unsigned short DownloadMicrocodeCommandEnabled:1;// Offset=0x0 Size=0x2 BitOffset=0x0 BitSize=0x1
        unsigned short DmaQueuedCommandEnabled:1;// Offset=0x0 Size=0x2 BitOffset=0x1 BitSize=0x1
        unsigned short CFAFeatureEnabled:1;// Offset=0x0 Size=0x2 BitOffset=0x2 BitSize=0x1
        unsigned short AdvancedPowerManagementFeatureEnabled:1;// Offset=0x0 Size=0x2 BitOffset=0x3 BitSize=0x1
        unsigned short MediaStatusNotificationFeatureEnabled:1;// Offset=0x0 Size=0x2 BitOffset=0x4 BitSize=0x1
        unsigned short PowerFromStandbyFeatureEnabled:1;// Offset=0x0 Size=0x2 BitOffset=0x5 BitSize=0x1
        unsigned short SetFeaturesAfterPowerUpRequired2:1;// Offset=0x0 Size=0x2 BitOffset=0x6 BitSize=0x1
        unsigned short AddressOffsetReservedAreaBoot2:1;// Offset=0x0 Size=0x2 BitOffset=0x7 BitSize=0x1
        unsigned short SetMaximumCommandEnabled:1;// Offset=0x0 Size=0x2 BitOffset=0x8 BitSize=0x1
        unsigned short AcousticManagementFeatureEnabled:1;// Offset=0x0 Size=0x2 BitOffset=0x9 BitSize=0x1
        unsigned short Lba48BitFeatureEnabled:1;// Offset=0x0 Size=0x2 BitOffset=0xa BitSize=0x1
        unsigned short DeviceConfigOverlapFeatureEnabled:1;// Offset=0x0 Size=0x2 BitOffset=0xb BitSize=0x1
        unsigned short FlushCacheCommandEnabled:1;// Offset=0x0 Size=0x2 BitOffset=0xc BitSize=0x1
        unsigned short FlushCacheExtCommandEnabled:1;// Offset=0x0 Size=0x2 BitOffset=0xd BitSize=0x1
        unsigned short Reserved18:2;// Offset=0x0 Size=0x2 BitOffset=0xe BitSize=0x2
    };
    unsigned short AsUSHORT;// Offset=0x0 Size=0x2
};

struct _IDE_IDENTIFY_DATA// Size=0x200 (Id=2828)
{
    unsigned short GeneralConfiguration;// Offset=0x0 Size=0x2
    unsigned short NumberOfCylinders;// Offset=0x2 Size=0x2
    unsigned short Reserved1;// Offset=0x4 Size=0x2
    unsigned short NumberOfHeads;// Offset=0x6 Size=0x2
    unsigned short Reserved2[2];// Offset=0x8 Size=0x4
    unsigned short NumberOfSectorsPerTrack;// Offset=0xc Size=0x2
    unsigned short Reserved3[3];// Offset=0xe Size=0x6
    unsigned char SerialNumber[20];// Offset=0x14 Size=0x14
    unsigned short Reserved4[3];// Offset=0x28 Size=0x6
    unsigned char FirmwareRevision[8];// Offset=0x2e Size=0x8
    unsigned char ModelNumber[40];// Offset=0x36 Size=0x28
    struct // Size=0x2 (Id=0)
    {
        unsigned short MaximumBlockTransfer:8;// Offset=0x5e Size=0x2 BitOffset=0x0 BitSize=0x8
        unsigned short Reserved5:8;// Offset=0x5e Size=0x2 BitOffset=0x8 BitSize=0x8
    };
    unsigned short Reserved6;// Offset=0x60 Size=0x2
    unsigned short Capabilities;// Offset=0x62 Size=0x2
    unsigned short Reserved7;// Offset=0x64 Size=0x2
    struct // Size=0x2 (Id=0)
    {
        unsigned short Reserved8:8;// Offset=0x66 Size=0x2 BitOffset=0x0 BitSize=0x8
        unsigned short PioCycleTimingMode:8;// Offset=0x66 Size=0x2 BitOffset=0x8 BitSize=0x8
    };
    unsigned short Reserved9;// Offset=0x68 Size=0x2
    struct // Size=0x2 (Id=0)
    {
        unsigned short TranslationFieldsValid:3;// Offset=0x6a Size=0x2 BitOffset=0x0 BitSize=0x3
        unsigned short Reserved10:13;// Offset=0x6a Size=0x2 BitOffset=0x3 BitSize=0xd
    };
    unsigned short NumberOfCurrentCylinders;// Offset=0x6c Size=0x2
    unsigned short NumberOfCurrentHeads;// Offset=0x6e Size=0x2
    unsigned short CurrentSectorsPerTrack;// Offset=0x70 Size=0x2
    unsigned long CurrentSectorCapacity;// Offset=0x72 Size=0x4
    unsigned short CurrentMultiSectorSetting;// Offset=0x76 Size=0x2
    unsigned long UserAddressableSectors;// Offset=0x78 Size=0x4
    struct // Size=0x6 (Id=0)
    {
        unsigned short SingleWordDMASupport:8;// Offset=0x7c Size=0x2 BitOffset=0x0 BitSize=0x8
        unsigned short SingleWordDMAActive:8;// Offset=0x7c Size=0x2 BitOffset=0x8 BitSize=0x8
        unsigned short MultiWordDMASupport:8;// Offset=0x7e Size=0x2 BitOffset=0x0 BitSize=0x8
        unsigned short MultiWordDMAActive:8;// Offset=0x7e Size=0x2 BitOffset=0x8 BitSize=0x8
        unsigned short AdvancedPIOModes:8;// Offset=0x80 Size=0x2 BitOffset=0x0 BitSize=0x8
        unsigned short Reserved11:8;// Offset=0x80 Size=0x2 BitOffset=0x8 BitSize=0x8
    };
    unsigned short MinimumMWXferCycleTime;// Offset=0x82 Size=0x2
    unsigned short RecommendedMWXferCycleTime;// Offset=0x84 Size=0x2
    unsigned short MinimumPIOCycleTime;// Offset=0x86 Size=0x2
    unsigned short MinimumPIOCycleTimeIORDY;// Offset=0x88 Size=0x2
    unsigned short Reserved12[11];// Offset=0x8a Size=0x16
    unsigned short MajorRevision;// Offset=0xa0 Size=0x2
    unsigned short MinorRevision;// Offset=0xa2 Size=0x2
    union _unnamed_2823 Support1;// Offset=0xa4 Size=0x2
    union _unnamed_2824 Support2;// Offset=0xa6 Size=0x2
    union _unnamed_2825 Support3;// Offset=0xa8 Size=0x2
    union _unnamed_2826 Enabled1;// Offset=0xaa Size=0x2
    union _unnamed_2827 Enabled2;// Offset=0xac Size=0x2
    union _unnamed_2825 Enabled3;// Offset=0xae Size=0x2
    struct // Size=0x2 (Id=0)
    {
        unsigned short UltraDMASupport:8;// Offset=0xb0 Size=0x2 BitOffset=0x0 BitSize=0x8
        unsigned short UltraDMAActive:8;// Offset=0xb0 Size=0x2 BitOffset=0x8 BitSize=0x8
    };
    unsigned short Reserved19[11];// Offset=0xb2 Size=0x16
    unsigned long UserAddressableSectors48Bit[2];// Offset=0xc8 Size=0x8
    unsigned short Reserved20[23];// Offset=0xd0 Size=0x2e
    struct // Size=0x4 (Id=0)
    {
        unsigned short MediaStatusNotification:2;// Offset=0xfe Size=0x2 BitOffset=0x0 BitSize=0x2
        unsigned short Reserved21:6;// Offset=0xfe Size=0x2 BitOffset=0x2 BitSize=0x6
        unsigned short DeviceWriteProtect:1;// Offset=0xfe Size=0x2 BitOffset=0x8 BitSize=0x1
        unsigned short Reserved22:7;// Offset=0xfe Size=0x2 BitOffset=0x9 BitSize=0x7
        unsigned short SecuritySupported:1;// Offset=0x100 Size=0x2 BitOffset=0x0 BitSize=0x1
        unsigned short SecurityEnabled:1;// Offset=0x100 Size=0x2 BitOffset=0x1 BitSize=0x1
        unsigned short SecurityLocked:1;// Offset=0x100 Size=0x2 BitOffset=0x2 BitSize=0x1
        unsigned short SecurityFrozen:1;// Offset=0x100 Size=0x2 BitOffset=0x3 BitSize=0x1
        unsigned short SecurityCountExpired:1;// Offset=0x100 Size=0x2 BitOffset=0x4 BitSize=0x1
        unsigned short SecurityEraseSupported:1;// Offset=0x100 Size=0x2 BitOffset=0x5 BitSize=0x1
        unsigned short Reserved23:2;// Offset=0x100 Size=0x2 BitOffset=0x6 BitSize=0x2
        unsigned short SecurityLevel:1;// Offset=0x100 Size=0x2 BitOffset=0x8 BitSize=0x1
        unsigned short Reserved24:7;// Offset=0x100 Size=0x2 BitOffset=0x9 BitSize=0x7
    };
    unsigned short Reserved25[127];// Offset=0x102 Size=0xfe
};

struct _SCSI_PASS_THROUGH_DIRECT// Size=0x24 (Id=2829)
{
    unsigned short Length;// Offset=0x0 Size=0x2
    unsigned char ScsiStatus;// Offset=0x2 Size=0x1
    unsigned char PathId;// Offset=0x3 Size=0x1
    unsigned char TargetId;// Offset=0x4 Size=0x1
    unsigned char Lun;// Offset=0x5 Size=0x1
    unsigned char CdbLength;// Offset=0x6 Size=0x1
    unsigned char DataIn;// Offset=0x7 Size=0x1
    unsigned long DataTransferLength;// Offset=0x8 Size=0x4
    unsigned long TimeOutValue;// Offset=0xc Size=0x4
    void * DataBuffer;// Offset=0x10 Size=0x4
    unsigned char Cdb[16];// Offset=0x14 Size=0x10
};

struct _XUSER_ONLINE_PROFILE_SETTING// Size=0x16 (Id=2830)
{
    unsigned long source;// Offset=0x0 Size=0x4
    unsigned long long qwUserId;// Offset=0x4 Size=0x8
    unsigned long dwSettingId;// Offset=0xc Size=0x4
    unsigned short cbSize;// Offset=0x10 Size=0x2
    unsigned char * pbValue;// Offset=0x12 Size=0x4
};

struct _DVD_AP25_CHALLENGE_TABLE_HEADER// Size=0x40 (Id=2831)
{
    struct _RC4_HMAC_HEADER Header;// Offset=0x0 Size=0x18
    unsigned long Size;// Offset=0x18 Size=0x4
    unsigned long Version;// Offset=0x1c Size=0x4
    unsigned long long UnlockPeriod;// Offset=0x20 Size=0x8
    unsigned long long DateStamp;// Offset=0x28 Size=0x8
    unsigned short Flags;// Offset=0x30 Size=0x2
    unsigned char CountOfSets;// Offset=0x32 Size=0x1
    unsigned char UpdateSequence;// Offset=0x33 Size=0x1
    unsigned short ResponseTolerance;// Offset=0x34 Size=0x2
    unsigned char Reserved[10];// Offset=0x36 Size=0xa
};

struct ID3DXPatchMesh// Size=0x4 (Id=2832)
{
    struct ID3DXPatchMeshVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct ID3DXLineVtbl// Size=0x50 (Id=2833)
{
    HRESULT  ( * QueryInterface)(struct ID3DXLine * ,const struct _GUID * ,void ** );// Offset=0x0 Size=0x4
    unsigned long  ( * AddRef)(struct ID3DXLine * );// Offset=0x4 Size=0x4
    unsigned long  ( * Release)(struct ID3DXLine * );// Offset=0x8 Size=0x4
    HRESULT  ( * GetDevice)(struct ID3DXLine * ,struct D3DDevice ** );// Offset=0xc Size=0x4
    HRESULT  ( * Begin)(struct ID3DXLine * );// Offset=0x10 Size=0x4
    HRESULT  ( * Draw)(struct ID3DXLine * ,struct D3DXVECTOR2 * ,unsigned long ,unsigned long );// Offset=0x14 Size=0x4
    HRESULT  ( * DrawTransform)(struct ID3DXLine * ,struct _D3DVECTOR * ,unsigned long ,struct _D3DMATRIX * ,unsigned long );// Offset=0x18 Size=0x4
    HRESULT  ( * SetPattern)(struct ID3DXLine * ,unsigned long );// Offset=0x1c Size=0x4
    unsigned long  ( * GetPattern)(struct ID3DXLine * );// Offset=0x20 Size=0x4
    HRESULT  ( * SetPatternScale)(struct ID3DXLine * ,float );// Offset=0x24 Size=0x4
    float  ( * GetPatternScale)(struct ID3DXLine * );// Offset=0x28 Size=0x4
    HRESULT  ( * SetWidth)(struct ID3DXLine * ,float );// Offset=0x2c Size=0x4
    float  ( * GetWidth)(struct ID3DXLine * );// Offset=0x30 Size=0x4
    HRESULT  ( * SetAntialias)(struct ID3DXLine * ,int );// Offset=0x34 Size=0x4
    int  ( * GetAntialias)(struct ID3DXLine * );// Offset=0x38 Size=0x4
    HRESULT  ( * SetGLLines)(struct ID3DXLine * ,int );// Offset=0x3c Size=0x4
    int  ( * GetGLLines)(struct ID3DXLine * );// Offset=0x40 Size=0x4
    HRESULT  ( * End)(struct ID3DXLine * );// Offset=0x44 Size=0x4
    HRESULT  ( * OnLostDevice)(struct ID3DXLine * );// Offset=0x48 Size=0x4
    HRESULT  ( * OnResetDevice)(struct ID3DXLine * );// Offset=0x4c Size=0x4
};

struct _GET_POINTS_BALANCE_REQUEST// Size=0x14 (Id=2834)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned long long qwMachineId;// Offset=0x8 Size=0x8
    struct _GET_POINTS_BALANCE_RESPONSE * pResults;// Offset=0x10 Size=0x4
};

struct _XCONTENT_MOUNTED_PACKAGE// Size=0x98ac (Id=2835)
{
    void * pvFsDeviceObject;// Offset=0x0 Size=0x4
    void * pvFsBlockCache;// Offset=0x4 Size=0x4
    struct _LIST_ENTRY leMountedPackages;// Offset=0x8 Size=0x8
    unsigned long dwFlags;// Offset=0x10 Size=0x4
    void * hPackageFile;// Offset=0x14 Size=0x4
    unsigned long dwOpenRefCount;// Offset=0x18 Size=0x4
    struct _RTL_CRITICAL_SECTION csHeaderLock;// Offset=0x1c Size=0x1c
    struct _XCONTENT_HEADER ContentHeader;// Offset=0x38 Size=0x344
    struct _XCONTENT_METADATA ContentMetaData;// Offset=0x37c Size=0x93d6
    unsigned char __align0[2];// Offset=0x9752 Size=0x2
    unsigned char * pbOtherMetaData;// Offset=0x9754 Size=0x4
    unsigned long dwOtherMetaDataSize;// Offset=0x9758 Size=0x4
    unsigned long DeviceIDLocked;// Offset=0x975c Size=0x4
    char szFsDeviceName[64];// Offset=0x9760 Size=0x40
    char szPackageFilePath[260];// Offset=0x97a0 Size=0x104
    unsigned long dwLicenseMaskLast;// Offset=0x98a4 Size=0x4
    unsigned long dwModifiedMetadataOffset;// Offset=0x98a8 Size=0x4
};

struct _DIRECT_DEBIT_INFO// Size=0x1e (Id=2836)
{
    unsigned short wAccountHolderNameLength;// Offset=0x0 Size=0x2
    unsigned short * wszAccountHolderName;// Offset=0x2 Size=0x4
    unsigned short wAccountNumberLength;// Offset=0x6 Size=0x2
    unsigned short * wszAccountNumber;// Offset=0x8 Size=0x4
    unsigned short wBankCodeLength;// Offset=0xc Size=0x2
    unsigned short * wszBankCode;// Offset=0xe Size=0x4
    unsigned short wBranchCodeLength;// Offset=0x12 Size=0x2
    unsigned short * wszBranchCode;// Offset=0x14 Size=0x4
    unsigned short wCheckDigitsLength;// Offset=0x18 Size=0x2
    unsigned short * wszCheckDigits;// Offset=0x1a Size=0x4
};

struct IPersistStream// Size=0x4 (Id=2837)
{
    struct IPersistStreamVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct IPersist// Size=0x4 (Id=2838)
{
    struct IPersistVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct _PASSPORT_CREATE_REQUEST// Size=0x1f (Id=2839)
{
    unsigned short wPassportMemberNameLength;// Offset=0x0 Size=0x2
    char * szPassportMemberName;// Offset=0x2 Size=0x4
    unsigned short wSecretQuestionLength;// Offset=0x6 Size=0x2
    unsigned short * szSecretQuestion;// Offset=0x8 Size=0x4
    unsigned short wEncryptedPasswordLength;// Offset=0xc Size=0x2
    unsigned char * pbEncryptedPassword;// Offset=0xe Size=0x4
    unsigned char bCountryId;// Offset=0x12 Size=0x1
    struct _FILETIME ftBirthdate;// Offset=0x13 Size=0x8
    struct _PASSPORT_SESSION_TOKEN * pSessionToken;// Offset=0x1b Size=0x4
};

struct D3DLineTexture// Size=0x34 (Id=2840)
{
    unsigned long Common;// Offset=0x0 Size=0x4
    unsigned long ReferenceCount;// Offset=0x4 Size=0x4
    unsigned long Fence;// Offset=0x8 Size=0x4
    unsigned long ReadFence;// Offset=0xc Size=0x4
    unsigned long Identifier;// Offset=0x10 Size=0x4
    unsigned long BaseFlush;// Offset=0x14 Size=0x4
    unsigned long MipFlush;// Offset=0x18 Size=0x4
    union GPUTEXTURE_FETCH_CONSTANT Format;// Offset=0x1c Size=0x18
};

struct D3DTexture// Size=0x34 (Id=2841)
{
    unsigned long Common;// Offset=0x0 Size=0x4
    unsigned long ReferenceCount;// Offset=0x4 Size=0x4
    unsigned long Fence;// Offset=0x8 Size=0x4
    unsigned long ReadFence;// Offset=0xc Size=0x4
    unsigned long Identifier;// Offset=0x10 Size=0x4
    unsigned long BaseFlush;// Offset=0x14 Size=0x4
    unsigned long MipFlush;// Offset=0x18 Size=0x4
    union GPUTEXTURE_FETCH_CONSTANT Format;// Offset=0x1c Size=0x18
};

struct ID3DXPMeshVtbl// Size=0x9c (Id=2842)
{
    HRESULT  ( * QueryInterface)(struct ID3DXPMesh * ,const struct _GUID * ,void ** );// Offset=0x0 Size=0x4
    unsigned long  ( * AddRef)(struct ID3DXPMesh * );// Offset=0x4 Size=0x4
    unsigned long  ( * Release)(struct ID3DXPMesh * );// Offset=0x8 Size=0x4
    HRESULT  ( * DrawSubset)(struct ID3DXPMesh * ,unsigned long );// Offset=0xc Size=0x4
    unsigned long  ( * GetNumFaces)(struct ID3DXPMesh * );// Offset=0x10 Size=0x4
    unsigned long  ( * GetNumVertices)(struct ID3DXPMesh * );// Offset=0x14 Size=0x4
    unsigned long  ( * GetFVF)(struct ID3DXPMesh * );// Offset=0x18 Size=0x4
    HRESULT  ( * GetDeclaration)(struct ID3DXPMesh * ,struct _D3DVERTEXELEMENT9 * );// Offset=0x1c Size=0x4
    unsigned long  ( * GetNumBytesPerVertex)(struct ID3DXPMesh * );// Offset=0x20 Size=0x4
    unsigned long  ( * GetOptions)(struct ID3DXPMesh * );// Offset=0x24 Size=0x4
    HRESULT  ( * GetDevice)(struct ID3DXPMesh * ,struct D3DDevice ** );// Offset=0x28 Size=0x4
    HRESULT  ( * CloneMeshFVF)(struct ID3DXPMesh * ,unsigned long ,unsigned long ,struct D3DDevice * ,struct ID3DXMesh ** );// Offset=0x2c Size=0x4
    HRESULT  ( * CloneMesh)(struct ID3DXPMesh * ,unsigned long ,struct _D3DVERTEXELEMENT9 * ,struct D3DDevice * ,struct ID3DXMesh ** );// Offset=0x30 Size=0x4
    HRESULT  ( * GetVertexBuffer)(struct ID3DXPMesh * ,struct D3DVertexBuffer ** );// Offset=0x34 Size=0x4
    HRESULT  ( * GetIndexBuffer)(struct ID3DXPMesh * ,struct D3DIndexBuffer ** );// Offset=0x38 Size=0x4
    HRESULT  ( * LockVertexBuffer)(struct ID3DXPMesh * ,unsigned long ,void ** );// Offset=0x3c Size=0x4
    HRESULT  ( * UnlockVertexBuffer)(struct ID3DXPMesh * );// Offset=0x40 Size=0x4
    HRESULT  ( * LockIndexBuffer)(struct ID3DXPMesh * ,unsigned long ,void ** );// Offset=0x44 Size=0x4
    HRESULT  ( * UnlockIndexBuffer)(struct ID3DXPMesh * );// Offset=0x48 Size=0x4
    HRESULT  ( * GetAttributeTable)(struct ID3DXPMesh * ,struct _D3DXATTRIBUTERANGE * ,unsigned long * );// Offset=0x4c Size=0x4
    HRESULT  ( * ConvertPointRepsToAdjacency)(struct ID3DXPMesh * ,unsigned long * ,unsigned long * );// Offset=0x50 Size=0x4
    HRESULT  ( * ConvertAdjacencyToPointReps)(struct ID3DXPMesh * ,unsigned long * ,unsigned long * );// Offset=0x54 Size=0x4
    HRESULT  ( * GenerateAdjacency)(struct ID3DXPMesh * ,float ,unsigned long * );// Offset=0x58 Size=0x4
    HRESULT  ( * UpdateSemantics)(struct ID3DXPMesh * ,struct _D3DVERTEXELEMENT9 * );// Offset=0x5c Size=0x4
    HRESULT  ( * ClonePMeshFVF)(struct ID3DXPMesh * ,unsigned long ,unsigned long ,struct D3DDevice * ,struct ID3DXPMesh ** );// Offset=0x60 Size=0x4
    HRESULT  ( * ClonePMesh)(struct ID3DXPMesh * ,unsigned long ,struct _D3DVERTEXELEMENT9 * ,struct D3DDevice * ,struct ID3DXPMesh ** );// Offset=0x64 Size=0x4
    HRESULT  ( * SetNumFaces)(struct ID3DXPMesh * ,unsigned long );// Offset=0x68 Size=0x4
    HRESULT  ( * SetNumVertices)(struct ID3DXPMesh * ,unsigned long );// Offset=0x6c Size=0x4
    unsigned long  ( * GetMaxFaces)(struct ID3DXPMesh * );// Offset=0x70 Size=0x4
    unsigned long  ( * GetMinFaces)(struct ID3DXPMesh * );// Offset=0x74 Size=0x4
    unsigned long  ( * GetMaxVertices)(struct ID3DXPMesh * );// Offset=0x78 Size=0x4
    unsigned long  ( * GetMinVertices)(struct ID3DXPMesh * );// Offset=0x7c Size=0x4
    HRESULT  ( * Save)(struct ID3DXPMesh * ,struct IStream * ,struct _D3DXMATERIAL * ,struct _D3DXEFFECTINSTANCE * ,unsigned long );// Offset=0x80 Size=0x4
    HRESULT  ( * Optimize)(struct ID3DXPMesh * ,unsigned long ,unsigned long * ,unsigned long * ,struct ID3DXBuffer ** ,struct ID3DXMesh ** );// Offset=0x84 Size=0x4
    HRESULT  ( * OptimizeBaseLOD)(struct ID3DXPMesh * ,unsigned long ,unsigned long * );// Offset=0x88 Size=0x4
    HRESULT  ( * TrimByFaces)(struct ID3DXPMesh * ,unsigned long ,unsigned long ,unsigned long * ,unsigned long * );// Offset=0x8c Size=0x4
    HRESULT  ( * TrimByVertices)(struct ID3DXPMesh * ,unsigned long ,unsigned long ,unsigned long * ,unsigned long * );// Offset=0x90 Size=0x4
    HRESULT  ( * GetAdjacency)(struct ID3DXPMesh * ,unsigned long * );// Offset=0x94 Size=0x4
    HRESULT  ( * GenerateVertexHistory)(struct ID3DXPMesh * ,unsigned long * );// Offset=0x98 Size=0x4
};

struct ID3DXAnimationSet// Size=0x4 (Id=2843)
{
    struct ID3DXAnimationSetVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct IDirectXFileDataVtbl// Size=0x2c (Id=2844)
{
    HRESULT  ( * QueryInterface)(struct IDirectXFileData * ,const struct _GUID * ,void ** );// Offset=0x0 Size=0x4
    unsigned long  ( * AddRef)(struct IDirectXFileData * );// Offset=0x4 Size=0x4
    unsigned long  ( * Release)(struct IDirectXFileData * );// Offset=0x8 Size=0x4
    HRESULT  ( * GetName)(struct IDirectXFileData * ,char * ,unsigned long * );// Offset=0xc Size=0x4
    HRESULT  ( * GetId)(struct IDirectXFileData * ,struct _GUID * );// Offset=0x10 Size=0x4
    HRESULT  ( * GetData)(struct IDirectXFileData * ,char * ,unsigned long * ,void ** );// Offset=0x14 Size=0x4
    HRESULT  ( * GetType)(struct IDirectXFileData * ,struct _GUID ** );// Offset=0x18 Size=0x4
    HRESULT  ( * GetNextObject)(struct IDirectXFileData * ,struct IDirectXFileObject ** );// Offset=0x1c Size=0x4
    HRESULT  ( * AddDataObject)(struct IDirectXFileData * ,struct IDirectXFileData * );// Offset=0x20 Size=0x4
    HRESULT  ( * AddDataReference)(struct IDirectXFileData * ,char * ,struct _GUID * );// Offset=0x24 Size=0x4
    HRESULT  ( * AddBinaryObject)(struct IDirectXFileData * ,char * ,struct _GUID * ,char * ,void * ,unsigned long );// Offset=0x28 Size=0x4
};

struct ID3DXFileSaveObjectVtbl// Size=0x18 (Id=2845)
{
    HRESULT  ( * QueryInterface)(struct ID3DXFileSaveObject * ,const struct _GUID * ,void ** );// Offset=0x0 Size=0x4
    unsigned long  ( * AddRef)(struct ID3DXFileSaveObject * );// Offset=0x4 Size=0x4
    unsigned long  ( * Release)(struct ID3DXFileSaveObject * );// Offset=0x8 Size=0x4
    HRESULT  ( * GetFile)(struct ID3DXFileSaveObject * ,struct ID3DXFile ** );// Offset=0xc Size=0x4
    HRESULT  ( * AddDataObject)(struct ID3DXFileSaveObject * ,const struct _GUID * ,char * ,struct _GUID * ,unsigned long ,void * ,struct ID3DXFileSaveData ** );// Offset=0x10 Size=0x4
    HRESULT  ( * Save)(struct ID3DXFileSaveObject * );// Offset=0x14 Size=0x4
};

struct _HEAP_FREE_ENTRY_EXTRA// Size=0x4 (Id=2846)
{
    unsigned short TagIndex;// Offset=0x0 Size=0x2
    unsigned short FreeBackTraceIndex;// Offset=0x2 Size=0x2
};

union _unnamed_2847// Size=0x1c (Id=2847)
{
    struct _RTL_CRITICAL_SECTION CriticalSection;// Offset=0x0 Size=0x1c
};

struct _HEAP_LOCK// Size=0x1c (Id=2848)
{
    union _unnamed_2847 Lock;// Offset=0x0 Size=0x1c
};

struct _HEAP_STOP_ON_TAG// Size=0x4 (Id=2849)
{
    union // Size=0x4 (Id=0)
    {
        unsigned long HeapAndTagIndex;// Offset=0x0 Size=0x4
        unsigned short TagIndex;// Offset=0x0 Size=0x2
        unsigned short HeapIndex;// Offset=0x2 Size=0x2
    };
};

struct _HEAP_VIRTUAL_ALLOC_ENTRY// Size=0x30 (Id=2850)
{
    struct _LIST_ENTRY Entry;// Offset=0x0 Size=0x8
    struct _HEAP_ENTRY_EXTRA ExtraStuff;// Offset=0x8 Size=0x10
    unsigned long CommitSize;// Offset=0x18 Size=0x4
    unsigned long ReserveSize;// Offset=0x1c Size=0x4
    struct _HEAP_ENTRY BusyBlock;// Offset=0x20 Size=0x10
};

struct _HEAP_ENTRY_EXTRA// Size=0x10 (Id=2851)
{
    union // Size=0x8 (Id=0)
    {
        unsigned short AllocatorBackTraceIndex;// Offset=0x0 Size=0x2
        unsigned short TagIndex;// Offset=0x2 Size=0x2
        unsigned long Settable;// Offset=0x4 Size=0x4
        unsigned long long ZeroInit;// Offset=0x0 Size=0x8
    };
    unsigned long long ZeroInit1;// Offset=0x8 Size=0x8
};

struct _HEAP_TAG_ENTRY// Size=0x40 (Id=2852)
{
    unsigned long Allocs;// Offset=0x0 Size=0x4
    unsigned long Frees;// Offset=0x4 Size=0x4
    unsigned long Size;// Offset=0x8 Size=0x4
    unsigned short TagIndex;// Offset=0xc Size=0x2
    unsigned short CreatorBackTraceIndex;// Offset=0xe Size=0x2
    wchar_t TagName[24];// Offset=0x10 Size=0x30
};

struct _HEAP_PSEUDO_TAG_ENTRY// Size=0xc (Id=2853)
{
    unsigned long Allocs;// Offset=0x0 Size=0x4
    unsigned long Frees;// Offset=0x4 Size=0x4
    unsigned long Size;// Offset=0x8 Size=0x4
};

struct _HEAP_SEGMENT// Size=0x48 (Id=2854)
{
    struct _HEAP_ENTRY Entry;// Offset=0x0 Size=0x10
    unsigned long Signature;// Offset=0x10 Size=0x4
    unsigned long Flags;// Offset=0x14 Size=0x4
    struct _HEAP * Heap;// Offset=0x18 Size=0x4
    unsigned long LargestUnCommittedRange;// Offset=0x1c Size=0x4
    void * BaseAddress;// Offset=0x20 Size=0x4
    unsigned long NumberOfPages;// Offset=0x24 Size=0x4
    struct _HEAP_ENTRY * FirstEntry;// Offset=0x28 Size=0x4
    struct _HEAP_ENTRY * LastValidEntry;// Offset=0x2c Size=0x4
    unsigned long NumberOfUnCommittedPages;// Offset=0x30 Size=0x4
    unsigned long NumberOfUnCommittedRanges;// Offset=0x34 Size=0x4
    struct _HEAP_UNCOMMMTTED_RANGE * UnCommittedRanges;// Offset=0x38 Size=0x4
    unsigned short AllocatorBackTraceIndex;// Offset=0x3c Size=0x2
    unsigned short Reserved;// Offset=0x3e Size=0x2
    struct _HEAP_ENTRY * LastEntryInSegment;// Offset=0x40 Size=0x4
};

struct _HEAP_UCR_SEGMENT// Size=0x10 (Id=2855)
{
    struct _HEAP_UCR_SEGMENT * Next;// Offset=0x0 Size=0x4
    unsigned long ReservedSize;// Offset=0x4 Size=0x4
    unsigned long CommittedSize;// Offset=0x8 Size=0x4
    unsigned long filler;// Offset=0xc Size=0x4
};

struct _HEAP// Size=0x598 (Id=2856)
{
    struct _HEAP_ENTRY Entry;// Offset=0x0 Size=0x10
    unsigned long Signature;// Offset=0x10 Size=0x4
    unsigned long Flags;// Offset=0x14 Size=0x4
    unsigned long ForceFlags;// Offset=0x18 Size=0x4
    unsigned long VirtualMemoryThreshold;// Offset=0x1c Size=0x4
    unsigned long SegmentReserve;// Offset=0x20 Size=0x4
    unsigned long SegmentCommit;// Offset=0x24 Size=0x4
    unsigned long DeCommitFreeBlockThreshold;// Offset=0x28 Size=0x4
    unsigned long DeCommitTotalFreeThreshold;// Offset=0x2c Size=0x4
    unsigned long TotalFreeSize;// Offset=0x30 Size=0x4
    unsigned long MaximumAllocationSize;// Offset=0x34 Size=0x4
    unsigned short ProcessHeapsListIndex;// Offset=0x38 Size=0x2
    unsigned short HeaderValidateLength;// Offset=0x3a Size=0x2
    void * HeaderValidateCopy;// Offset=0x3c Size=0x4
    unsigned short NextAvailableTagIndex;// Offset=0x40 Size=0x2
    unsigned short MaximumTagIndex;// Offset=0x42 Size=0x2
    struct _HEAP_TAG_ENTRY * TagEntries;// Offset=0x44 Size=0x4
    struct _HEAP_UCR_SEGMENT * UCRSegments;// Offset=0x48 Size=0x4
    struct _HEAP_UNCOMMMTTED_RANGE * UnusedUnCommittedRanges;// Offset=0x4c Size=0x4
    unsigned long AlignRound;// Offset=0x50 Size=0x4
    unsigned long AlignMask;// Offset=0x54 Size=0x4
    struct _LIST_ENTRY VirtualAllocdBlocks;// Offset=0x58 Size=0x8
    struct _HEAP_SEGMENT * Segments[64];// Offset=0x60 Size=0x100
    unsigned long FreeListsInUseUlong[4];// Offset=0x160 Size=0x10
    unsigned short FreeListsInUseTerminate;// Offset=0x170 Size=0x2
    unsigned short AllocatorBackTraceIndex;// Offset=0x172 Size=0x2
    unsigned char Reserved1[7];// Offset=0x174 Size=0x7
    unsigned char ProcessType;// Offset=0x17b Size=0x1
    struct _HEAP_PSEUDO_TAG_ENTRY * PseudoTagEntries;// Offset=0x17c Size=0x4
    struct _LIST_ENTRY FreeLists[128];// Offset=0x180 Size=0x400
    struct _HEAP_LOCK * LockVariable;// Offset=0x580 Size=0x4
    long  ( * CommitRoutine)(void * ,void ** ,unsigned long * );// Offset=0x584 Size=0x4
    void * Lookaside;// Offset=0x588 Size=0x4
    unsigned long LookasideLockCount;// Offset=0x58c Size=0x4
    enum _MEMORY_REGION_TYPE MemoryRegionType;// Offset=0x590 Size=0x4
};

struct _HEAP_ENTRY// Size=0x10 (Id=2857)
{
    unsigned short Size;// Offset=0x0 Size=0x2
    unsigned short PreviousSize;// Offset=0x2 Size=0x2
    unsigned char SegmentIndex;// Offset=0x4 Size=0x1
    unsigned char Flags;// Offset=0x5 Size=0x1
    unsigned char UnusedBytes;// Offset=0x6 Size=0x1
    unsigned char SmallTagIndex;// Offset=0x7 Size=0x1
    union // Size=0x8 (Id=0)
    {
        unsigned long long Reserved1;// Offset=0x8 Size=0x8
        unsigned long AllocAttributes;// Offset=0x8 Size=0x4
    };
};

struct _HEAP_STOP_ON_VALUES// Size=0x18 (Id=2858)
{
    unsigned long AllocAddress;// Offset=0x0 Size=0x4
    struct _HEAP_STOP_ON_TAG AllocTag;// Offset=0x4 Size=0x4
    unsigned long ReAllocAddress;// Offset=0x8 Size=0x4
    struct _HEAP_STOP_ON_TAG ReAllocTag;// Offset=0xc Size=0x4
    unsigned long FreeAddress;// Offset=0x10 Size=0x4
    struct _HEAP_STOP_ON_TAG FreeTag;// Offset=0x14 Size=0x4
};

struct _HEAP_UNCOMMMTTED_RANGE// Size=0x10 (Id=2859)
{
    struct _HEAP_UNCOMMMTTED_RANGE * Next;// Offset=0x0 Size=0x4
    unsigned long Address;// Offset=0x4 Size=0x4
    unsigned long Size;// Offset=0x8 Size=0x4
    unsigned long filler;// Offset=0xc Size=0x4
};

struct _HEAP_FREE_ENTRY// Size=0x18 (Id=2860)
{
    unsigned short Size;// Offset=0x0 Size=0x2
    unsigned short PreviousSize;// Offset=0x2 Size=0x2
    unsigned char SegmentIndex;// Offset=0x4 Size=0x1
    unsigned char Flags;// Offset=0x5 Size=0x1
    unsigned char Index_UNUSED;// Offset=0x6 Size=0x1
    unsigned char Mask_UNUSED;// Offset=0x7 Size=0x1
    struct _LIST_ENTRY FreeList;// Offset=0x8 Size=0x8
    unsigned long long Reserved1;// Offset=0x10 Size=0x8
};

enum XUI_SEEK_OPTIONS
{
    XUI_SEEK_FROM_START=1,
    XUI_SEEK_FROM_CURRENT=2,
    XUI_SEEK_FROM_END=4
};

enum XUI_CONTROL_NAVIGATE
{
    XUI_CONTROL_NAVIGATE_UP=0,
    XUI_CONTROL_NAVIGATE_DOWN=1,
    XUI_CONTROL_NAVIGATE_LEFT=2,
    XUI_CONTROL_NAVIGATE_RIGHT=3,
    XUI_CONTROL_NAVIGATE_TABFORWARD=4,
    XUI_CONTROL_NAVIGATE_TABBACKWARD=5
};

enum XUI_CONTROL_LINK
{
    XUI_CONTROL_LINK_NEXT=0,
    XUI_CONTROL_LINK_PREV=1,
    XUI_CONTROL_LINK_FIRST_CHILD=2,
    XUI_CONTROL_LINK_LAST_CHILD=3
};

enum XUI_SCROLLEND_STATE
{
    XUI_SCROLLEND_STATE_NOMORE=0,
    XUI_SCROLLEND_STATE_MORE=1,
    XUI_SCROLLEND_STATE_SCROLLING=2
};

enum ASYNC_TASK_STATE
{
    TASK_STATE_INITIALIZED=0,
    TASK_STATE_SERIALIZE=1,
    TASK_STATE_THROTTLE=2,
    TASK_STATE_PREPARE_REQUEST=3,
    TASK_STATE_BUILD_REQUEST=4,
    TASK_STATE_SUBMIT_REQUEST=5,
    TASK_STATE_PROCESS_HTTP_HEADERS=6,
    TASK_STATE_PROCESS_RESPONSE_HEADER=7,
    TASK_STATE_PROCESS_RESPONSE_HEADER_THROTTLED=8,
    TASK_STATE_PROCESS_RESPONSE_DATA=9,
    TASK_STATE_PROCESS_RESPONSE_DATA_THROTTLED=10,
    TASK_STATE_CLEANUP=11,
    TASK_STATE_INVALID=12
};

enum _XNQOSAGGREGATETYPE
{
    XNQOSAGGREGATETYPE_AVG_RTT=1,
    XNQOSAGGREGATETYPE_MIN_RTT=2,
    XNQOSAGGREGATETYPE_MAX_RTT=3,
    XNQOSAGGREGATETYPE_AVG_UPBITSPERSEC=4,
    XNQOSAGGREGATETYPE_MIN_UPBITSPERSEC=5,
    XNQOSAGGREGATETYPE_MAX_UPBITSPERSEC=6,
    XNQOSAGGREGATETYPE_AVG_DNBITSPERSEC=7,
    XNQOSAGGREGATETYPE_MIN_DNBITSPERSEC=8,
    XNQOSAGGREGATETYPE_MAX_DNBITSPERSEC=9,
    XNQOSAGGREGATETYPE_AVG_UPPACKETLOSSPER10000=10,
    XNQOSAGGREGATETYPE_AVG_DNPACKETLOSSPER10000=11
};

enum XUI_LINECOUNT
{
    XUI_LINECOUNT_ALL=0,
    XUI_LINECOUNT_VISIBLE=1,
    XUI_LINECOUNT_MAX_VISIBLE=2
};

enum XUI_SMOOTHSCROLL_ORIENTATION
{
    XUI_SMOOTHSCROLL_VERTICAL=0,
    XUI_SMOOTHSCROLL_HORIZONTAL=1
};

enum XMSG_OP_TYPE
{
    xmotInvalid=0,
    xmotGetSummary=1,
    xmotEnumerate=2,
    xmotWrongUser=3
};

enum XUI_LISTITEM_LAYOUT
{
    XUI_LISTITEM_LAYOUT_MULTI_VERTICAL=0,
    XUI_LISTITEM_LAYOUT_MULTI_HORIZONTAL=1,
    XUI_LISTITEM_LAYOUT_SINGLE_VERTICAL=2,
    XUI_LISTITEM_LAYOUT_SINGLE_HORIZONTAL=3,
    XUI_LISTITEM_LAYOUT_GRID_VERTICAL=4,
    XUI_LISTITEM_LAYOUT_GRID_HORIZONTAL=5
};

enum XUI_ELEMENT_PROPERTY_TYPE
{
    XUI_EPT_EMPTY=0,
    XUI_EPT_BOOL=1,
    XUI_EPT_INTEGER=2,
    XUI_EPT_UNSIGNED=3,
    XUI_EPT_FLOAT=4,
    XUI_EPT_STRING=5,
    XUI_EPT_COLOR=6,
    XUI_EPT_VECTOR=7,
    XUI_EPT_QUATERNION=8,
    XUI_EPT_OBJECT=9,
    XUI_EPT_CUSTOM=10
};

enum XUI_NAMEDFRAME_COMMAND
{
    XUI_COMMAND_PLAY=0,
    XUI_COMMAND_STOP=1,
    XUI_COMMAND_GOTO=2,
    XUI_COMMAND_GOTOANDPLAY=3,
    XUI_COMMAND_GOTOANDSTOP=4
};

enum XUI_INTERPOLATE
{
    XUI_INTERPOLATE_LINEAR=0,
    XUI_INTERPOLATE_NONE=1,
    XUI_INTERPOLATE_EASE=2
};

enum XUI_SCROLLEND_DIRECTION
{
    XUI_SCROLLEND_DIRECTION_UP=0,
    XUI_SCROLLEND_DIRECTION_DOWN=1,
    XUI_SCROLLEND_DIRECTION_LEFT=2,
    XUI_SCROLLEND_DIRECTION_RIGHT=3
};

enum _XDIRCRAWL_STATE
{
    XDIRCRAWL_STATE_INVALID=0,
    XDIRCRAWL_STATE_CALLER_HANDLING_FILE=1,
    XDIRCRAWL_STATE_RUNNING=2,
    XDIRCRAWL_STATE_DONE=3
};

enum XUI_SCROLLBAR_DIRECTION
{
    XUI_SCROLLBAR_VERTICAL=0,
    XUI_SCROLLBAR_HORIZONTAL=1
};

enum XNOTIFICATION_DEQUEUE_STATE
{
    Dequeue_ProcessReply=0,
    Dequeue_TaskDone=1
};

enum XRL_TRANSACTION_STATE
{
    XRL_TRANSACTION_STATE_INVALID=0,
    XRL_TRANSACTION_STATE_SENDING_REQUEST=1,
    XRL_TRANSACTION_STATE_WAITING_FOR_SEND_DATA=2,
    XRL_TRANSACTION_STATE_RECEIVING_HEADERS=3,
    XRL_TRANSACTION_STATE_PROCESSING_HEADERS=4,
    XRL_TRANSACTION_STATE_RECEIVING_BODY=5,
    XRL_TRANSACTION_STATE_PROCESSING_BODY=6,
    XRL_TRANSACTION_STATE_DONE=7
};

enum XUI_BLEND_MODE
{
    XUI_BLEND_DEFAULT=0,
    XUI_BLEND_NORMAL=1,
    XUI_BLEND_MULTIPLY=2,
    XUI_BLEND_DARKEN=3,
    XUI_BLEND_LIGHTEN=4,
    XUI_BLEND_ADD=5,
    XUI_BLEND_SUBTRACT=6
};

enum _XNCALLER_TYPE
{
    XNCALLER_INVALID=0,
    XNCALLER_TITLE=1,
    XNCALLER_SYSAPP=2,
    XNCALLER_XBDM=3,
    XNCALLER_PERSISTING=3,
    XNCALLER_TEST=4,
    NUM_XNCALLER_TYPES=4
};

enum XUI_FILL_TYPE
{
    XUI_FILL_NONE=0,
    XUI_FILL_SOLID=1,
    XUI_FILL_LINEAR_GRADIENT=2,
    XUI_FILL_RADIAL_GRADIENT=3,
    XUI_FILL_TEXTURE=4
};

enum lzx_block_type
{
    BLOCKTYPE_INVALID=0,
    BLOCKTYPE_VERBATIM=1,
    BLOCKTYPE_ALIGNED=2,
    BLOCKTYPE_UNCOMPRESSED=3
};

enum decoder_state
{
    DEC_STATE_UNKNOWN=0,
    DEC_STATE_START_NEW_BLOCK=1,
    DEC_STATE_DECODING_DATA=2
};

enum XUI_ITEMCOUNT
{
    XUI_ITEMCOUNT_ALL=0,
    XUI_ITEMCOUNT_VISIBLE=1,
    XUI_ITEMCOUNT_CHECKED=2,
    XUI_ITEMCOUNT_MAX_VISIBLE=3,
    XUI_ITEMCOUNT_MAX_LINES=4,
    XUI_ITEMCOUNT_MAX_PER_LINE=5
};

enum XUI_CONTENT_TYPE
{
    XUI_CONTENT_NONE=0,
    XUI_CONTENT_OBJ=1,
    XUI_CONTENT_BRUSH=2
};

enum _XCAB_STREAM_UNPACK_STATE
{
    XCAB_STREAM_UNPACK_STATE_INVALID=0,
    XCAB_STREAM_UNPACK_STATE_CONTENT_HEADER=1,
    XCAB_STREAM_UNPACK_STATE_CALLER_VERIFYING_HEADER=2,
    XCAB_STREAM_UNPACK_STATE_FOLDERS=3,
    XCAB_STREAM_UNPACK_STATE_CALLER_WRITING_INITIAL_CACHE=4,
    XCAB_STREAM_UNPACK_STATE_FILE_HEADER=5,
    XCAB_STREAM_UNPACK_STATE_FILE_NAME=6,
    XCAB_STREAM_UNPACK_STATE_CALLER_WRITING_FILE_CACHE_BLOCK=7,
    XCAB_STREAM_UNPACK_STATE_CALLER_HANDLING_NEW_FILE=8,
    XCAB_STREAM_UNPACK_STATE_CALLER_READING_CACHE_BLOCK=9,
    XCAB_STREAM_UNPACK_STATE_PRE_DATA_PADDING=10,
    XCAB_STREAM_UNPACK_STATE_CALLER_HANDLING_FILE_DATA_BEGIN=11,
    XCAB_STREAM_UNPACK_STATE_DATA_HEADER=12,
    XCAB_STREAM_UNPACK_STATE_DATA_BLOCK=13,
    XCAB_STREAM_UNPACK_STATE_CALLER_HANDLING_FILE_DATA=14,
    XCAB_STREAM_UNPACK_STATE_CALLER_HANDLING_FILE_DATA_END=15,
    XCAB_STREAM_UNPACK_STATE_DONE=16
};

enum PKCS1PADERR
{
    PKCS1PADERR_SUCCEEDED=0,
    PKCS1PADERR_MESSAGE_TOO_LONG=1,
    PKCS1PADERR_ENCODED_MESSAGE_TOO_SMALL=2,
    PKCS1PADERR_INVALID_PARAMETER=3,
    PKCS1PADERR_INVALID_PADDING=4,
    PKCS1PADERR_BUFFER_TOO_SMALL=5,
    PKCS1PADERR_INVALID_HASH_TYPE=6
};

enum PKCS1PADHASH
{
    PKCS1PADHASH_SHA1=1
};

struct XUIMessageSoundVolume// Size=0x4 (Id=2889)
{
    float fVolume;// Offset=0x0 Size=0x4
};

struct _DUMP_BASIC_SERVICES// Size=0x1c (Id=2890)
{
    unsigned long  ( * GetHardwareThreadContext)(unsigned long ,struct _CONTEXT * );// Offset=0x0 Size=0x4
    void  ( * ResetGetHardwareThreadContext)();// Offset=0x4 Size=0x4
    unsigned long  ( * GetImagePageTableEntry)(unsigned long );// Offset=0x8 Size=0x4
    void  ( * CollectBucketData)(unsigned char * ,struct _EXCEPTION_RECORD * ,struct _CONTEXT * ,unsigned long );// Offset=0xc Size=0x4
    void  ( * InitProgressBar)(unsigned long );// Offset=0x10 Size=0x4
    void  ( * IncrementProgressBar)();// Offset=0x14 Size=0x4
    void  ( * DbgPrintf)(char * ,<btNoType> );// Offset=0x18 Size=0x4
};

struct _PURCHASE_OFFERS_REQUEST// Size=0x2c (Id=2891)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned long long qwMachineId;// Offset=0x8 Size=0x8
    unsigned long dwOfferCount;// Offset=0x10 Size=0x4
    struct _PURCHASE_OFFER_PRICE * pOffers;// Offset=0x14 Size=0x4
    unsigned long dwPaymentType;// Offset=0x18 Size=0x4
    unsigned short wPaymentInstrumentId;// Offset=0x1c Size=0x2
    wchar_t * wszPaymentInstrumentId;// Offset=0x1e Size=0x4
    unsigned short wTokenLength;// Offset=0x22 Size=0x2
    wchar_t * wszToken;// Offset=0x24 Size=0x4
    unsigned long dwStore;// Offset=0x28 Size=0x4
};

struct _XNPROUTEENTRY// Size=0x18 (Id=2892)
{
    unsigned long dwFlags;// Offset=0x0 Size=0x4
    unsigned long dwMetric;// Offset=0x4 Size=0x4
    struct in_addr inaddrDest;// Offset=0x8 Size=0x4
    struct in_addr inaddrMask;// Offset=0xc Size=0x4
    struct in_addr inaddrGateway;// Offset=0x10 Size=0x4
    struct in_addr inaddrInterface;// Offset=0x14 Size=0x4
};

struct _CREATE_LIVE_ACCOUNT_REQUEST// Size=0xfd (Id=2893)
{
    unsigned long long qwMachineId;// Offset=0x0 Size=0x8
    unsigned long long qwOfflineXuid;// Offset=0x8 Size=0x8
    unsigned long dwTitleId;// Offset=0x10 Size=0x4
    unsigned short wFirstNameLength;// Offset=0x14 Size=0x2
    wchar_t * wszFirstName;// Offset=0x16 Size=0x4
    unsigned short wLastNameLength;// Offset=0x1a Size=0x2
    wchar_t * wszLastName;// Offset=0x1c Size=0x4
    unsigned short wGamertagLength;// Offset=0x20 Size=0x2
    wchar_t * wszGamertag;// Offset=0x22 Size=0x4
    unsigned char abSignedUserPassportPuid[28];// Offset=0x26 Size=0x1c
    unsigned char abSignedOwnerPassportPuid[28];// Offset=0x42 Size=0x1c
    unsigned long long qwOfferId;// Offset=0x5e Size=0x8
    unsigned short wBillingTokenLength;// Offset=0x66 Size=0x2
    wchar_t * wszBillingToken;// Offset=0x68 Size=0x4
    struct _FILETIME ftBirthdate;// Offset=0x6c Size=0x8
    unsigned short wEmailLength;// Offset=0x74 Size=0x2
    wchar_t * wszEmail;// Offset=0x76 Size=0x4
    unsigned short wLanguageId;// Offset=0x7a Size=0x2
    unsigned char bCountryId;// Offset=0x7c Size=0x1
    unsigned long dwParentalControlGroupId;// Offset=0x7d Size=0x4
    unsigned char bMsftOptIn;// Offset=0x81 Size=0x1
    unsigned char bPartnerOptIn;// Offset=0x82 Size=0x1
    struct _ADDRESS_INFO address;// Offset=0x83 Size=0x24
    struct _PHONE_INFO phone;// Offset=0xa7 Size=0x12
    unsigned char bPaymentTypeId;// Offset=0xb9 Size=0x1
    struct _CREDIT_CARD_INFO creditCard;// Offset=0xba Size=0x1b
    struct _DIRECT_DEBIT_INFO directDebit;// Offset=0xd5 Size=0x1e
    unsigned short wReservedBytesLength;// Offset=0xf3 Size=0x2
    unsigned char * pbReservedBytes;// Offset=0xf5 Size=0x4
    struct _CREATE_LIVE_ACCOUNT_RESPONSE * pResponse;// Offset=0xf9 Size=0x4
};

struct _INGAME_OFFER_PRICE// Size=0xe (Id=2894)
{
    unsigned long dwPaymentType;// Offset=0x0 Size=0x4
    unsigned long dwPrice;// Offset=0x4 Size=0x4
    unsigned short wPriceTextLength;// Offset=0x8 Size=0x2
    wchar_t * wszPriceText;// Offset=0xa Size=0x4
};

struct XUIElementPropDef// Size=0x30 (Id=2895)
{
    void * operator new(unsigned int ,void * );
    void * operator new(unsigned int );
    void * operator new[](unsigned int );
    void operator delete(void * );
    void operator delete[](void * );
    unsigned long dwFlags;// Offset=0x0 Size=0x4
    unsigned long dwId;// Offset=0x4 Size=0x4
    unsigned long dwOffset;// Offset=0x8 Size=0x4
    unsigned long dwExtra;// Offset=0xc Size=0x4
    wchar_t * szPropName;// Offset=0x10 Size=0x4
    enum XUI_ELEMENT_PROPERTY_TYPE Type;// Offset=0x14 Size=0x4
    struct XUIElementPropVal * pDefaultVal;// Offset=0x18 Size=0x4
    struct XUICustomPropHandler * pCustomHandler;// Offset=0x1c Size=0x4
    HRESULT  ( * pfnGetProp)(unsigned long ,void * ,struct XUIElementPropVal * );// Offset=0x20 Size=0x4
    HRESULT  ( * pfnSetProp)(unsigned long ,void * ,struct XUIElementPropVal * );// Offset=0x24 Size=0x4
    struct XUIElementPropDef *  ( * pfnGetPropDef)(unsigned long * );// Offset=0x28 Size=0x4
    HRESULT  ( * pfnGetCount)(void * ,unsigned long * );// Offset=0x2c Size=0x4
};

class CXuiElementImplBase// Size=0x4 (Id=2896)
{
    protected HRESULT ObjectProc(struct XUIMessage * );
    protected HRESULT DispatchMessageMap(struct XUIMessage * );
    protected HRESULT _ObjectProc(struct _XUIOBJ * ,struct XUIMessage * ,void * );
    protected struct XUIElementPropDef * _GetPropDef(unsigned long * );
    public HRESULT OnCreate();
    public void CXuiElementImplBase(class CXuiElementImplBase & );
    public void CXuiElementImplBase();
    public class CXuiElementImplBase & operator=(class CXuiElementImplBase & );
};

class CXuiElementImplBase// Size=0x4 (Id=2897)
{
    protected HRESULT ObjectProc(struct XUIMessage * );
    protected HRESULT DispatchMessageMap(struct XUIMessage * );
    protected HRESULT _ObjectProc(struct _XUIOBJ * ,struct XUIMessage * ,void * );
    protected struct XUIElementPropDef * _GetPropDef(unsigned long * );
    public HRESULT OnCreate();
    public void CXuiElementImplBase(class CXuiElementImplBase & );
    public void CXuiElementImplBase();
    public class CXuiElementImplBase & operator=(class CXuiElementImplBase & );
};

struct _XCONTENT_DATA_INTERNAL : public _XCONTENT_DATA// Size=0x200 (Id=2898)
{
    unsigned char __align0[312];// Offset=0x0 Size=0x138
    unsigned long long xuid;// Offset=0x138 Size=0x8
    unsigned long dwTitleId;// Offset=0x140 Size=0x4
    unsigned long dwLicenseMask;// Offset=0x144 Size=0x4
    unsigned long long ullContentSize;// Offset=0x148 Size=0x8
    struct _FILETIME ftCreationTime;// Offset=0x150 Size=0x8
    wchar_t szTitleName[64];// Offset=0x158 Size=0x80
    unsigned char rgSeriesId[16];// Offset=0x1d8 Size=0x10
    unsigned char rgSeasonId[16];// Offset=0x1e8 Size=0x10
    unsigned short wSeasonNumber;// Offset=0x1f8 Size=0x2
    struct // Size=0x2 (Id=0)
    {
        unsigned short wEpisodeNumber:14;// Offset=0x1fa Size=0x2 BitOffset=0x2 BitSize=0xe
        unsigned short fCorrupt:1;// Offset=0x1fa Size=0x2 BitOffset=0x1 BitSize=0x1
        unsigned short fPartial:1;// Offset=0x1fa Size=0x2 BitOffset=0x0 BitSize=0x1
    };
};

struct XUIMessageCaretPosition// Size=0x4 (Id=2899)
{
    unsigned int nPosition;// Offset=0x0 Size=0x4
};

struct _XSHOWFIRSTRUNWELCOMEUI_PARAMS : public _HUD_PARAMS// Size=0xc (Id=2900)
{
    unsigned char __align0[8];// Offset=0x0 Size=0x8
    struct _XOVERLAPPED * pOverlapped;// Offset=0x8 Size=0x4
};

struct _XNPXMITRECVSTATS// Size=0x18 (Id=2901)
{
    unsigned long long qwNumXmitBytes;// Offset=0x0 Size=0x8
    unsigned long long qwNumRecvBytes;// Offset=0x8 Size=0x8
    unsigned long dwNumXmitFrames;// Offset=0x10 Size=0x4
    unsigned long dwNumRecvFrames;// Offset=0x14 Size=0x4
};

struct XUICharMetrics// Size=0x14 (Id=2902)
{
    void * operator new(unsigned int ,void * );
    void * operator new(unsigned int );
    void * operator new[](unsigned int );
    void operator delete(void * );
    void operator delete[](void * );
    float fMinX;// Offset=0x0 Size=0x4
    float fMinY;// Offset=0x4 Size=0x4
    float fMaxX;// Offset=0x8 Size=0x4
    float fMaxY;// Offset=0xc Size=0x4
    float fAdvance;// Offset=0x10 Size=0x4
};

struct LIVEBASE_EXPIREMARKETPLACECOUNTSCACHE_MSG// Size=0x4 (Id=2903)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
};

struct XGI_READSTRINGS_MSG// Size=0x18 (Id=2904)
{
    unsigned long dwTitleId;// Offset=0x0 Size=0x4
    unsigned long dwUserIndex;// Offset=0x4 Size=0x4
    unsigned long dwNumStrings;// Offset=0x8 Size=0x4
    struct _STRING_WITH_HRESULT * pStrings;// Offset=0xc Size=0x4
    unsigned long cchStringBuffer;// Offset=0x10 Size=0x4
    wchar_t * pwszStringBuffer;// Offset=0x14 Size=0x4
};

class CXuiEdit : public CXuiControl// Size=0x4 (Id=2905)
{
    public void CXuiEdit(struct _XUIOBJ * );
    public void CXuiEdit();
    public HRESULT InsertText(unsigned int ,wchar_t * );
    public HRESULT DeleteText(unsigned int ,unsigned int );
    public HRESULT GetLineIndex(unsigned int ,unsigned int * );
    public HRESULT SetTextFormatInfo(int ,struct XUITextFormatInfo * );
    public HRESULT GetTextFormatInfo(int * ,struct XUITextFormatInfo ** );
    public HRESULT SetTextLimit(unsigned int );
    public unsigned int GetTextLimit();
    public HRESULT SetReadOnly(int );
    public int GetReadOnly();
    public HRESULT SetCaretPosition(unsigned int );
    public unsigned int GetCaretPosition();
    public unsigned int GetLineCount();
    public unsigned int GetVisibleLineCount(int );
    public unsigned int GetMaxVisibleLineCount();
    public HRESULT SetTopLine(unsigned int ,int );
    public unsigned int GetTopLine(int );
    public HRESULT GetVSmoothScroll(int * ,float * ,float * ,float * );
    public HRESULT SetVSmoothScroll(int ,float ,float ,float );
    public void Attach(struct _XUIOBJ * );
};

struct _D3DXMACRO// Size=0x8 (Id=2906)
{
    char * Name;// Offset=0x0 Size=0x4
    char * Definition;// Offset=0x4 Size=0x4
};

struct _INGAME_CONTENT_INFO// Size=0x5a (Id=2907)
{
    unsigned long long qwOfferID;// Offset=0x0 Size=0x8
    unsigned short wOfferNameLength;// Offset=0x8 Size=0x2
    wchar_t * wszOfferName;// Offset=0xa Size=0x4
    unsigned long dwOfferType;// Offset=0xe Size=0x4
    unsigned char contentId[20];// Offset=0x12 Size=0x14
    unsigned long dwLicenseMask;// Offset=0x26 Size=0x4
    unsigned long dwTitleID;// Offset=0x2a Size=0x4
    unsigned long dwTitleCategory;// Offset=0x2e Size=0x4
    unsigned short wTitleNameLength;// Offset=0x32 Size=0x2
    wchar_t * wszTitleName;// Offset=0x34 Size=0x4
    unsigned char bTierRequired;// Offset=0x38 Size=0x1
    unsigned short wEmsGameRating;// Offset=0x39 Size=0x2
    unsigned short wResponseFlags;// Offset=0x3b Size=0x2
    unsigned long dwPackageSize;// Offset=0x3d Size=0x4
    unsigned long dwInstallSize;// Offset=0x41 Size=0x4
    unsigned long dwSellTextLength;// Offset=0x45 Size=0x4
    wchar_t * wszSellText;// Offset=0x49 Size=0x4
    unsigned long dwAssetID;// Offset=0x4d Size=0x4
    unsigned long dwPurchaseQuantity;// Offset=0x51 Size=0x4
    unsigned char bPricesLength;// Offset=0x55 Size=0x1
    struct _INGAME_OFFER_PRICE * pPrices;// Offset=0x56 Size=0x4
};

struct XUIMessageTopLine// Size=0x8 (Id=2908)
{
    unsigned int nLineIndex;// Offset=0x0 Size=0x4
    int bSmoothScroll;// Offset=0x4 Size=0x4
};

struct _GENERIC_LIST_INFO// Size=0x1f (Id=2909)
{
    unsigned long nListType;// Offset=0x0 Size=0x4
    unsigned long nListId;// Offset=0x4 Size=0x4
    struct _FILETIME ftLastModified;// Offset=0x8 Size=0x8
    unsigned long nTotalItems;// Offset=0x10 Size=0x4
    unsigned char bNameLength;// Offset=0x14 Size=0x1
    unsigned short wXmlLength;// Offset=0x15 Size=0x2
    wchar_t * szName;// Offset=0x17 Size=0x4
    wchar_t * XmlProperties;// Offset=0x1b Size=0x4
};

struct XUIElementPropVal// Size=0x14 (Id=2910)
{
    void * operator new(unsigned int ,void * );
    void * operator new(unsigned int );
    void * operator new[](unsigned int );
    void operator delete(void * );
    void operator delete[](void * );
    enum XUI_ELEMENT_PROPERTY_TYPE type;// Offset=0x0 Size=0x4
    union // Size=0x14 (Id=0)
    {
        int bVal;// Offset=0x4 Size=0x4
        int nVal;// Offset=0x4 Size=0x4
        unsigned int uVal;// Offset=0x4 Size=0x4
        float fVal;// Offset=0x4 Size=0x4
        wchar_t * szVal;// Offset=0x4 Size=0x4
        struct _D3DVECTOR vecVal;// Offset=0x4 Size=0xc
        struct XUIQuaternion quatVal;// Offset=0x4 Size=0x10
        struct IXUIPropObj * pObj;// Offset=0x4 Size=0x4
        struct XUIElementPropVal::_unnamed_3382::<unnamed-type-CustomVal> CustomVal;// Offset=0x4 Size=0x8
        void XUIElementPropVal(struct D3DXQUATERNION & );
        void XUIElementPropVal(struct D3DXVECTOR3 & );
        void XUIElementPropVal(float );
        void XUIElementPropVal(unsigned int );
        void XUIElementPropVal(int );
        void XUIElementPropVal();
        void ~XUIElementPropVal();
        void Clear();
        void Reset();
        void SetVal(void * ,struct XUICustomPropHandler * );
        void SetVal(struct IXUIPropObj * );
        void SetVal(struct D3DXQUATERNION * );
        void SetVal(struct D3DXQUATERNION & );
        void SetVal(struct XUIQuaternion * );
        void SetVal(struct D3DXVECTOR3 * );
        void SetVal(struct _D3DVECTOR & );
        void SetVal(struct _D3DVECTOR * );
        HRESULT SetVal(wchar_t * );
        void SetVal(float );
        void SetVal(unsigned int );
        void SetVal(int );
        void SetVal(bool );
        void SetBoolVal(int );
        void SetColorVal(unsigned char ,unsigned char ,unsigned char ,unsigned char );
        void SetColorVal(unsigned int );
        HRESULT Copy(struct XUIElementPropVal * );
        HRESULT GetStringLen(unsigned int * );
        HRESULT ToString(wchar_t ** );
        HRESULT ToBinary(struct XUIMemoryBuffer * );
        int IsEqual(struct XUIElementPropVal * );
        void * __vecDelDtor(unsigned int );
    };
};

struct IXUIPropObj// Size=0x4 (Id=2911)
{
    struct XUIElementPropDef * GetPropDef(unsigned long * );
    HRESULT GetPropertyId(wchar_t * ,unsigned long * );
    HRESULT GetPropertyDef(wchar_t * ,struct XUIElementPropDef ** );
    HRESULT GetPropertyRef(unsigned long ,void ** );
    HRESULT GetProperty(unsigned long ,unsigned long ,struct XUIElementPropVal * );
    HRESULT SetProperty(unsigned long ,unsigned long ,struct XUIElementPropVal * );
    HRESULT GetPropertyCount(unsigned long ,unsigned long * );
    void IXUIPropObj(struct IXUIPropObj & );
    void IXUIPropObj();
    struct IXUIPropObj & operator=(struct IXUIPropObj & );
};

struct IXUIPropObj// Size=0x4 (Id=2912)
{
    struct XUIElementPropDef * GetPropDef(unsigned long * );
    HRESULT GetPropertyId(wchar_t * ,unsigned long * );
    HRESULT GetPropertyDef(wchar_t * ,struct XUIElementPropDef ** );
    HRESULT GetPropertyRef(unsigned long ,void ** );
    HRESULT GetProperty(unsigned long ,unsigned long ,struct XUIElementPropVal * );
    HRESULT SetProperty(unsigned long ,unsigned long ,struct XUIElementPropVal * );
    HRESULT GetPropertyCount(unsigned long ,unsigned long * );
    void IXUIPropObj(struct IXUIPropObj & );
    void IXUIPropObj();
    struct IXUIPropObj & operator=(struct IXUIPropObj & );
};

struct _ACCOUNT_VERIFY_BILLING_INFO_REQUEST// Size=0x36 (Id=2913)
{
    unsigned long long qwMachineId;// Offset=0x0 Size=0x8
    unsigned short wGamertagLength;// Offset=0x8 Size=0x2
    wchar_t * wszGamertag;// Offset=0xa Size=0x4
    struct _PHONE_INFO phone;// Offset=0xe Size=0x12
    unsigned short wPostalCodeLength;// Offset=0x20 Size=0x2
    wchar_t * wszPostalCode;// Offset=0x22 Size=0x4
    unsigned short wAccountHolderNameLength;// Offset=0x26 Size=0x2
    wchar_t * wszAccountHolderName;// Offset=0x28 Size=0x4
    unsigned short wAccountNumberLength;// Offset=0x2c Size=0x2
    wchar_t * wszAccountNumber;// Offset=0x2e Size=0x4
    struct _ACCOUNT_VERIFY_BILLING_INFO_RESPONSE * pResponse;// Offset=0x32 Size=0x4
};

struct _XUICLASS// Size=0x0 (Id=2914)
{
};

class CXuiBase// Size=0x4 (Id=2915)
{
    public struct _XUIOBJ * m_hObj;// Offset=0x0 Size=0x4
    public void CXuiBase(struct _XUIOBJ * );
    public void CXuiBase();
    public struct _XUIOBJ * operator struct _XUIOBJ *();
    public void Attach(struct _XUIOBJ * );
    public int IsValid();
    public int IsValidObject();
    public struct _XUICLASS * GetClass();
    public HRESULT Destroy();
    public int IsInstanceOf(struct _XUICLASS * );
    public struct _XUIOBJ * DynamicCast(struct _XUICLASS * );
    public HRESULT SendMessage(struct XUIMessage * );
    public HRESULT BubbleMessage(struct XUIMessage * );
    public HRESULT BroadcastMessage(struct XUIMessage * );
    public struct _XUIOBJ * GetOuter();
    public struct _XUIOBJ * GetBase();
    public HRESULT SetTimer(unsigned long ,unsigned long );
    public HRESULT KillTimer(unsigned long );
};

struct _RTL_HEAP_ENTRY// Size=0x10 (Id=2916)
{
    union // Size=0x8 (Id=0)
    {
        unsigned long Size;// Offset=0x0 Size=0x4
        unsigned short Flags;// Offset=0x4 Size=0x2
        unsigned short AllocatorBackTraceIndex;// Offset=0x6 Size=0x2
        union <unnamed-type-u>// Size=0x8 (Id=30919)
        {
            struct <unnamed-type-s1>// Size=0x8 (Id=30920)
            {
                unsigned long Settable;// Offset=0x0 Size=0x4
                unsigned long Tag;// Offset=0x4 Size=0x4
            };
            struct _RTL_HEAP_ENTRY::<unnamed-type-u>::<unnamed-type-s1> s1;// Offset=0x0 Size=0x8
            struct <unnamed-type-s2>// Size=0x8 (Id=30924)
            {
                unsigned long CommittedSize;// Offset=0x0 Size=0x4
                void * FirstBlock;// Offset=0x4 Size=0x4
            };
            struct _RTL_HEAP_ENTRY::<unnamed-type-u>::<unnamed-type-s2> s2;// Offset=0x0 Size=0x8
        };
    };
    union _RTL_HEAP_ENTRY::<unnamed-type-u> u;// Offset=0x8 Size=0x8
};

struct XUIMessageTransition// Size=0xc (Id=2917)
{
    unsigned long dwTransType;// Offset=0x0 Size=0x4
    int bStartedSelfTransition;// Offset=0x4 Size=0x4
    unsigned long dwTransAction;// Offset=0x8 Size=0x4
};

struct XUIMessageItemEnable// Size=0x8 (Id=2918)
{
    int iItem;// Offset=0x0 Size=0x4
    int bEnabled;// Offset=0x4 Size=0x4
};

struct IXMedia2XmvPlayer// Size=0x0 (Id=2919)
{
};

class CXuiVideo : public CXuiElement// Size=0x4 (Id=2920)
{
    public void CXuiVideo(struct _XUIOBJ * );
    public void CXuiVideo();
    public int IsPaused();
    public HRESULT Pause(int );
    public HRESULT Play(wchar_t * );
    public HRESULT SetPlayer(struct IXMedia2XmvPlayer * );
    public HRESULT Mute(int );
    public int IsMuted();
    public HRESULT SetVolume(float );
    public float GetVolume();
    public void Attach(struct _XUIOBJ * );
};

struct _XNQOSMEASUREMENTS// Size=0x48 (Id=2921)
{
    unsigned long dwFlags;// Offset=0x0 Size=0x4
    unsigned long dwDurationMs;// Offset=0x4 Size=0x4
    unsigned long dwRttMs;// Offset=0x8 Size=0x4
    unsigned long dwUpBitsPerSec;// Offset=0xc Size=0x4
    unsigned long dwDnBitsPerSec;// Offset=0x10 Size=0x4
    unsigned long dwUpPacketsSent;// Offset=0x14 Size=0x4
    unsigned long dwUpPacketsLost;// Offset=0x18 Size=0x4
    unsigned long dwDnPacketsAttempted;// Offset=0x1c Size=0x4
    unsigned long dwDnPacketsReceived;// Offset=0x20 Size=0x4
    unsigned long dwUpBytesSent;// Offset=0x24 Size=0x4
    unsigned long dwUpBytesLost;// Offset=0x28 Size=0x4
    unsigned long dwDnBytesAttempted;// Offset=0x2c Size=0x4
    unsigned long dwDnBytesReceived;// Offset=0x30 Size=0x4
    unsigned char Reserved[20];// Offset=0x34 Size=0x14
};

struct _DUMP_MEDIA_SERVICES// Size=0x1c (Id=2922)
{
    long  ( * OpenMedia)();// Offset=0x0 Size=0x4
    long  ( * WriteMedia)(unsigned long ,unsigned char * ,unsigned long ,unsigned long );// Offset=0x4 Size=0x4
    long  ( * ReadMedia)(unsigned long ,unsigned char * ,unsigned long ,unsigned long );// Offset=0x8 Size=0x4
    long  ( * WriteMediaPhysical)(unsigned long ,unsigned long ,unsigned long );// Offset=0xc Size=0x4
    long  ( * CloseMedia)();// Offset=0x10 Size=0x4
    unsigned long MediaSize;// Offset=0x14 Size=0x4
    unsigned char Location;// Offset=0x18 Size=0x1
};

struct _XUISTRINGTABLE// Size=0x0 (Id=2923)
{
};

class CXuiStringTable// Size=0x4 (Id=2924)
{
    public void CXuiStringTable();
    public void ~CXuiStringTable();
    public void Clear();
    public HRESULT Load(void * );
    public HRESULT Load(wchar_t * );
    public wchar_t * Lookup(unsigned int );
    public wchar_t * Lookup(wchar_t * );
    protected struct _XUISTRINGTABLE * m_hStringTable;// Offset=0x0 Size=0x4
    public void * __vecDelDtor(unsigned int );
};

struct XUIMessageGetSoundState// Size=0x4 (Id=2925)
{
    unsigned long dwState;// Offset=0x0 Size=0x4
};

struct XUIMessageItemCount// Size=0x8 (Id=2926)
{
    enum XUI_ITEMCOUNT nType;// Offset=0x0 Size=0x4
    int cItems;// Offset=0x4 Size=0x4
};

struct _XVIRTUALKBDUI_PARAMS// Size=0x24 (Id=2927)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long cchResultText;// Offset=0x4 Size=0x4
    unsigned long dwFlags;// Offset=0x8 Size=0x4
    unsigned long dwSessionID;// Offset=0xc Size=0x4
    wchar_t * pDefaultText;// Offset=0x10 Size=0x4
    wchar_t * pTitleText;// Offset=0x14 Size=0x4
    wchar_t * pDescriptionText;// Offset=0x18 Size=0x4
    wchar_t * pResultText;// Offset=0x1c Size=0x4
    struct _XOVERLAPPED * pOverlapped;// Offset=0x20 Size=0x4
};

struct XPRESENCE_ENUM_CONTEXT// Size=0x330 (Id=2928)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long cPeers;// Offset=0x4 Size=0x4
    unsigned long long rgPeers[100];// Offset=0x8 Size=0x320
    unsigned long dwStartingIndex;// Offset=0x328 Size=0x4
    unsigned long dwPeersToReturn;// Offset=0x32c Size=0x4
};

struct IXuiResourceManager// Size=0x4 (Id=2929)
{
    void AddRef();
    unsigned int Release();
    wchar_t * GetName();
    int IsTransport();
    HRESULT Init(struct IXuiResourceReader * );
    HRESULT Open(wchar_t * ,struct IXuiResourceReader ** );
    HRESULT GetFileAttributesA(wchar_t * ,struct _WIN32_FILE_ATTRIBUTE_DATA * );
    void IXuiResourceManager(struct IXuiResourceManager & );
    void IXuiResourceManager();
    struct IXuiResourceManager & operator=(struct IXuiResourceManager & );
};

struct IXuiResourceManager// Size=0x4 (Id=2930)
{
    void AddRef();
    unsigned int Release();
    wchar_t * GetName();
    int IsTransport();
    HRESULT Init(struct IXuiResourceReader * );
    HRESULT Open(wchar_t * ,struct IXuiResourceReader ** );
    HRESULT GetFileAttributesA(wchar_t * ,struct _WIN32_FILE_ATTRIBUTE_DATA * );
    void IXuiResourceManager(struct IXuiResourceManager & );
    void IXuiResourceManager();
    struct IXuiResourceManager & operator=(struct IXuiResourceManager & );
};

struct XUIMessage// Size=0x14 (Id=2931)
{
    unsigned long cbSize;// Offset=0x0 Size=0x4
    unsigned long dwMessage;// Offset=0x4 Size=0x4
    int bHandled;// Offset=0x8 Size=0x4
    unsigned int cbData;// Offset=0xc Size=0x4
    void * pvData;// Offset=0x10 Size=0x4
};

struct _WHOLESALE_INFO// Size=0x18 (Id=2932)
{
    unsigned short wAccountHolderNameLength;// Offset=0x0 Size=0x2
    wchar_t * wszAccountHolderName;// Offset=0x2 Size=0x4
    unsigned short wReferenceIdLength;// Offset=0x6 Size=0x2
    wchar_t * wszReferenceId;// Offset=0x8 Size=0x4
    unsigned short wPartnerLength;// Offset=0xc Size=0x2
    wchar_t * wszPartner;// Offset=0xe Size=0x4
    unsigned short wEncryptedPasswordLength;// Offset=0x12 Size=0x2
    wchar_t * wszEncryptedPassword;// Offset=0x14 Size=0x4
};

struct _XPARTY_REJOIN_PARAMS : public _XPARTY_JOIN_SHARED_PARAMS// Size=0x68 (Id=2933)
{
    unsigned char __align0[80];// Offset=0x0 Size=0x50
    unsigned long dwUserIndexCount;// Offset=0x50 Size=0x4
    unsigned long dwUserIndices[4];// Offset=0x54 Size=0x10
};

class CXStorageDownloadToMemory : public CXStorageDownloadParent// Size=0x1fd8 (Id=2934)
{
    public void CXStorageDownloadToMemory(class CXStorageDownloadToMemory & );
    public void CXStorageDownloadToMemory();
    public HRESULT CustomInitialize();
    public void CustomCleanup();
    public unsigned long CustomGetObjectSize();
    public HRESULT CustomPrepareRequest();
    public HRESULT CustomContinueBuildRequest();
    public HRESULT CustomContinueProcessHttpHeaders();
    public void StorageDownloadGetServerPath(wchar_t ** );
    public HRESULT StorageDownloadProcessResponseHeader();
    public HRESULT StorageDownloadContinueProcessResponseData();
    public void StorageDownloadHandleSignatureVerified();
    public HRESULT StorageDownloadComplete();
    private unsigned char __align0[7712];// Offset=0x0 Size=0x1e20
    private unsigned long long m_xuidUser;// Offset=0x1e20 Size=0x8
    private unsigned long m_dwServerPathLength;// Offset=0x1e28 Size=0x4
    private wchar_t * m_pwszServerPath;// Offset=0x1e2c Size=0x4
    private unsigned char * m_pbBuffer;// Offset=0x1e30 Size=0x4
    private unsigned long m_dwBufferSize;// Offset=0x1e34 Size=0x4
    private class CXStorageDownloadWorker * m_pDownloadSubTask;// Offset=0x1e38 Size=0x4
    private struct _STORAGE_DL_RESPONSE_BUFFER m_StorageDlResponseBuffer;// Offset=0x1e3c Size=0x198
    public void ~CXStorageDownloadToMemory();
    public class CXStorageDownloadToMemory & operator=(class CXStorageDownloadToMemory & );
    public void * __vecDelDtor(unsigned int );
};

class CXStorageDownloadToMemory : public CXStorageDownloadParent// Size=0x1fd8 (Id=2935)
{
    public void CXStorageDownloadToMemory(class CXStorageDownloadToMemory & );
    public void CXStorageDownloadToMemory();
    public HRESULT CustomInitialize();
    public void CustomCleanup();
    public unsigned long CustomGetObjectSize();
    public HRESULT CustomPrepareRequest();
    public HRESULT CustomContinueBuildRequest();
    public HRESULT CustomContinueProcessHttpHeaders();
    public void StorageDownloadGetServerPath(wchar_t ** );
    public HRESULT StorageDownloadProcessResponseHeader();
    public HRESULT StorageDownloadContinueProcessResponseData();
    public void StorageDownloadHandleSignatureVerified();
    public HRESULT StorageDownloadComplete();
    private unsigned char __align0[7712];// Offset=0x0 Size=0x1e20
    private unsigned long long m_xuidUser;// Offset=0x1e20 Size=0x8
    private unsigned long m_dwServerPathLength;// Offset=0x1e28 Size=0x4
    private wchar_t * m_pwszServerPath;// Offset=0x1e2c Size=0x4
    private unsigned char * m_pbBuffer;// Offset=0x1e30 Size=0x4
    private unsigned long m_dwBufferSize;// Offset=0x1e34 Size=0x4
    private class CXStorageDownloadWorker * m_pDownloadSubTask;// Offset=0x1e38 Size=0x4
    private struct _STORAGE_DL_RESPONSE_BUFFER m_StorageDlResponseBuffer;// Offset=0x1e3c Size=0x198
    public void ~CXStorageDownloadToMemory();
    public class CXStorageDownloadToMemory & operator=(class CXStorageDownloadToMemory & );
    public void * __vecDelDtor(unsigned int );
};

struct _UPDATE_PAYMENT_INSTRUMENT_REQUEST// Size=0x85 (Id=2936)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned long long qwMachineId;// Offset=0x8 Size=0x8
    unsigned short wPaymentInstrumentIdLength;// Offset=0x10 Size=0x2
    wchar_t * wszPaymentInstrumentId;// Offset=0x12 Size=0x4
    struct _ADDRESS_INFO addressInfo;// Offset=0x16 Size=0x24
    struct _PHONE_INFO phoneInfo;// Offset=0x3a Size=0x12
    struct _CREDIT_CARD_INFO creditCardInfo;// Offset=0x4c Size=0x1b
    struct _DIRECT_DEBIT_INFO directDebitInfo;// Offset=0x67 Size=0x1e
};

struct _PAYMENT_INSTRUMENT_INFO// Size=0x8e (Id=2937)
{
    unsigned short wPaymentInstrumentIdLength;// Offset=0x0 Size=0x2
    wchar_t * wszPaymentInstrumentId;// Offset=0x2 Size=0x4
    unsigned char bPaymentTypeId;// Offset=0x6 Size=0x1
    struct _ADDRESS_INFO address;// Offset=0x7 Size=0x24
    struct _PHONE_INFO phone;// Offset=0x2b Size=0x12
    struct _CREDIT_CARD_INFO creditCard;// Offset=0x3d Size=0x1b
    struct _DIRECT_DEBIT_INFO directDebit;// Offset=0x58 Size=0x1e
    struct _WHOLESALE_INFO wholesale;// Offset=0x76 Size=0x18
};

struct _ABCH_GET_CONTACTLIST_ITEM// Size=0x1c (Id=2938)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned short wGamertagLength;// Offset=0x8 Size=0x2
    char * szGamertag;// Offset=0xa Size=0x4
    unsigned short wPmnLength;// Offset=0xe Size=0x2
    char * szPmn;// Offset=0x10 Size=0x4
    unsigned short wDisplayNameLength;// Offset=0x14 Size=0x2
    wchar_t * wszDisplayName;// Offset=0x16 Size=0x4
    unsigned short wResponseFlags;// Offset=0x1a Size=0x2
};

struct _DOWNLOAD_QUEUE_MODIFY_QUEUE_REQUEST// Size=0x1e (Id=2939)
{
    unsigned long long xUserId;// Offset=0x0 Size=0x8
    unsigned long nQueueId;// Offset=0x8 Size=0x4
    struct _FILETIME ftLastModified;// Offset=0xc Size=0x8
    unsigned short wXmlLength;// Offset=0x14 Size=0x2
    wchar_t * XmlProperties;// Offset=0x16 Size=0x4
    struct _DOWNLOAD_QUEUE_MODIFY_QUEUE_RESPONSE * pResponse;// Offset=0x1a Size=0x4
};

class CXStorageTask : public CXLiveSubTask// Size=0x1e70 (Id=2940)
{
    public void CXStorageTask(class CXStorageTask & );
    public void CXStorageTask();
    public HRESULT GetStorageDomainFromPath(wchar_t * ,wchar_t * ,unsigned long * );
    public HRESULT StorageBuildServerPath(struct _XSTORAGE_BUILD_SERVER_PATH * );
    public void ~CXStorageTask();
    public class CXStorageTask & operator=(class CXStorageTask & );
    public void * __vecDelDtor(unsigned int );
};

class CXStorageTask : public CXLiveSubTask// Size=0x1e70 (Id=2941)
{
    public void CXStorageTask(class CXStorageTask & );
    public void CXStorageTask();
    public HRESULT GetStorageDomainFromPath(wchar_t * ,wchar_t * ,unsigned long * );
    public HRESULT StorageBuildServerPath(struct _XSTORAGE_BUILD_SERVER_PATH * );
    public void ~CXStorageTask();
    public class CXStorageTask & operator=(class CXStorageTask & );
    public void * __vecDelDtor(unsigned int );
};

struct IXuiResourceReaderVTBL// Size=0x2c (Id=2942)
{
    void  ( * AddRef)(struct IXuiResourceReader * );// Offset=0x0 Size=0x4
    unsigned int  ( * Release)(struct IXuiResourceReader * );// Offset=0x4 Size=0x4
    struct IXuiResourceManager *  ( * GetManager)(struct IXuiResourceReader * );// Offset=0x8 Size=0x4
    HRESULT  ( * SetManager)(struct IXuiResourceReader * ,struct IXuiResourceManager * );// Offset=0xc Size=0x4
    unsigned int  ( * GetTotalSize)(struct IXuiResourceReader * );// Offset=0x10 Size=0x4
    unsigned int  ( * GetRemainingBytes)(struct IXuiResourceReader * );// Offset=0x14 Size=0x4
    HRESULT  ( * Read)(struct IXuiResourceReader * ,unsigned char * ,unsigned int ,unsigned int * );// Offset=0x18 Size=0x4
    HRESULT  ( * Seek)(struct IXuiResourceReader * ,unsigned int ,int );// Offset=0x1c Size=0x4
    HRESULT  ( * GetBuffer)(struct IXuiResourceReader * ,unsigned char ** );// Offset=0x20 Size=0x4
    HRESULT  ( * ReleaseBuffer)(struct IXuiResourceReader * );// Offset=0x24 Size=0x4
    HRESULT  ( * Duplicate)(struct IXuiResourceReader * ,struct IXuiResourceReader ** );// Offset=0x28 Size=0x4
};

struct _XUSER_PLAYERLIST_INTERNAL// Size=0x998 (Id=2943)
{
    unsigned long long qwUserID;// Offset=0x0 Size=0x8
    unsigned short cNum;// Offset=0x8 Size=0x2
    unsigned short wPendingHead;// Offset=0xa Size=0x2
    unsigned short cPending;// Offset=0xc Size=0x2
    unsigned char __align0[2];// Offset=0xe Size=0x2
    struct // Size=0x4 (Id=0)
    {
        unsigned long fPendingIO:1;// Offset=0x10 Size=0x4 BitOffset=0x1f BitSize=0x1
        unsigned long fWrongUser:1;// Offset=0x10 Size=0x4 BitOffset=0x1e BitSize=0x1
        unsigned long fSynchronize:1;// Offset=0x10 Size=0x4 BitOffset=0x1d BitSize=0x1
        unsigned long fPendingSync:1;// Offset=0x10 Size=0x4 BitOffset=0x1c BitSize=0x1
        unsigned long fSynchronized:1;// Offset=0x10 Size=0x4 BitOffset=0x1b BitSize=0x1
        unsigned long fSubsEnabled:1;// Offset=0x10 Size=0x4 BitOffset=0x1a BitSize=0x1
        unsigned long fSubscribed:1;// Offset=0x10 Size=0x4 BitOffset=0x19 BitSize=0x1
    };
    struct _XOVERLAPPED Overlapped;// Offset=0x14 Size=0x1c
    struct _P_QUERY_AFFILIATES_REPLY_MSG * pBuffer;// Offset=0x30 Size=0x4
    unsigned char __align1[4];// Offset=0x34 Size=0x4
    struct _XUSER_PLAYERLIST_USER_INTERNAL PlayerList[50];// Offset=0x38 Size=0x960
};

struct XUIMessageSetScrollBarItemData// Size=0xc (Id=2944)
{
    unsigned long nTotalItems;// Offset=0x0 Size=0x4
    unsigned long nTopItem;// Offset=0x4 Size=0x4
    unsigned long nItemsPerPage;// Offset=0x8 Size=0x4
};

class CXuiElement : public CXuiBase// Size=0x4 (Id=2945)
{
    public void CXuiElement(struct _XUIOBJ * );
    public void CXuiElement();
    public void ElementFromPoint(struct tagPOINT ,class CXuiElement * );
    public struct _XUIOBJ * ElementFromPoint(struct tagPOINT );
    public HRESULT AddChild(struct _XUIOBJ * );
    public HRESULT Unlink();
    public HRESULT GetParent(class CXuiElement * );
    public HRESULT GetParent(struct _XUIOBJ ** );
    public HRESULT GetFirstChild(class CXuiElement * );
    public HRESULT GetFirstChild(struct _XUIOBJ ** );
    public HRESULT GetLastChild(class CXuiElement * );
    public HRESULT GetLastChild(struct _XUIOBJ ** );
    public HRESULT GetNext(class CXuiElement * );
    public HRESULT GetNext(struct _XUIOBJ ** );
    public HRESULT GetPrev(class CXuiElement * );
    public HRESULT GetPrev(struct _XUIOBJ ** );
    public HRESULT InsertChild(struct _XUIOBJ * ,struct _XUIOBJ * ,struct _XUIOBJ * );
    public HRESULT GetXForm(struct D3DXMATRIX * );
    public HRESULT GetFullXForm(struct D3DXMATRIX * );
    public HRESULT GetBounds(float * ,float * );
    public HRESULT SetBounds(float ,float );
    public HRESULT GetPosition(struct D3DXVECTOR3 * );
    public HRESULT SetPosition(struct D3DXVECTOR3 * );
    public HRESULT GetScale(struct D3DXVECTOR3 * );
    public HRESULT SetScale(struct D3DXVECTOR3 * );
    public HRESULT GetRotation(struct D3DXQUATERNION * );
    public HRESULT SetRotation(struct D3DXQUATERNION * );
    public HRESULT GetOpacity(float * );
    public HRESULT SetOpacity(float );
    public HRESULT SetPivot(struct D3DXVECTOR3 * );
    public HRESULT GetPivot(struct D3DXVECTOR3 * );
    public HRESULT GetId(wchar_t ** );
    public HRESULT GetChildById(wchar_t * ,class CXuiElement * );
    public HRESULT GetChildById(wchar_t * ,struct _XUIOBJ ** );
    public int IsDescendant(struct _XUIOBJ * );
    public HRESULT SetUserData(void * );
    public HRESULT GetUserData(void ** );
    public HRESULT GetAnchor(unsigned int * );
    public int IsShown();
    public HRESULT SetShow(int );
    public HRESULT BeginRender(struct XUIMessageRender * ,struct XUIRenderStruct * );
    public HRESULT EndRender(struct XUIMessageRender * ,struct XUIRenderStruct * );
    public HRESULT RenderChildren(struct XUIMessageRender * );
    public HRESULT SetBlendMode(enum XUI_BLEND_MODE );
    public HRESULT GetBlendMode(enum XUI_BLEND_MODE * );
    public HRESULT SetColorWriteFlags(unsigned long );
    public HRESULT GetColorWriteFlags(unsigned long * );
    public HRESULT EnableInput(int );
    public int InputEnabled();
    public HRESULT DiscardResources(unsigned long );
    public HRESULT SetTimeline(struct XUITimeline * );
    public HRESULT SetSubtimeline(struct XUISubtimeline * ,int );
    public HRESULT GetTimeline(struct XUITimeline ** );
    public HRESULT StopTimeline(int );
    public HRESULT PlayTimeline(int ,int ,int ,int ,int );
    public HRESULT FindNamedFrame(wchar_t * ,int * );
    public HRESULT DisallowRecursiveTimelineControl(int );
    public HRESULT InitFocus(unsigned char ,int );
    public HRESULT SetFocus(unsigned char );
    public struct _XUIOBJ * GetFocus(unsigned char );
    public HRESULT WantFocus(int * );
    public int HasFocus();
    public int TreeHasFocus();
    public struct _XUIOBJ * TreeGetFocus();
    public unsigned char GetFocusUser(struct _XUIOBJ * );
    public unsigned char GetFocusUser();
    public HRESULT SetPressed(int ,unsigned char );
    public int IgnorePress(unsigned char );
    public wchar_t * GetVisualPrefix();
    public HRESULT SetVisualPrefix(wchar_t * );
    public wchar_t * GetBasePath();
    public HRESULT SetBasePath(wchar_t * );
    public HRESULT SkinChanged(struct _XUIOBJ * );
    public HRESULT LocaleChanged(struct _XUIOBJ * );
    public int HitTest(struct tagPOINT );
    public HRESULT ShowMessageBox(struct _XUIOBJ * ,wchar_t * ,wchar_t * ,int ,wchar_t ** );
    public HRESULT ShowMessageBox(wchar_t * ,wchar_t * ,int ,wchar_t ** );
    public HRESULT ShowMessageBoxEx(wchar_t * ,struct _XUIOBJ * ,wchar_t * ,wchar_t * ,int ,wchar_t ** ,int ,unsigned long ,struct _XUIOBJ ** );
    public void Attach(struct _XUIOBJ * );
};

struct _StoreData// Size=0x20 (Id=2946)
{
    struct _EntryBaseData baseData;// Offset=0x0 Size=0x1c
    wchar_t * pwszTabName;// Offset=0x1c Size=0x4
};

class CXStorageDownloadWorker : public CXStorageTask// Size=0x1f10 (Id=2947)
{
    public void CXStorageDownloadWorker(class CXStorageDownloadWorker & );
    public void CXStorageDownloadWorker();
    public HRESULT CustomInitialize();
    public void CustomCleanup();
    public unsigned long CustomGetObjectSize();
    public HRESULT CustomPrepareRequest();
    public HRESULT CustomHandleHttpHeadersComplete(unsigned long ,unsigned long long );
    public HRESULT CustomHandleResponseHeaderComplete(HRESULT );
    public HRESULT CustomContinueResponseData();
    public unsigned long CustomGetMaxReceiveChunkSize();
    public HRESULT StartXSignatureVerifySubtask(struct _XSIGNATURE_TO_VERIFY * );
    public void SetStorageDownloadReceiveRateLimit(unsigned long );
    union // Size=0x1e78 (Id=0)
    {
        struct CXLiveAsyncTaskInternal::RECEIVERATELIMITDATA s_StorageDownloadReceiveRateLimitData;// Offset=0x0 Size=0x18
        HRESULT HandleResponseData();
        HRESULT HandleResponseDataComplete();
        unsigned char __align0[7768];// Offset=0x18 Size=0x1e58
        class CXLiveSubTask * m_pSubTask;// Offset=0x1e70 Size=0x4
        int m_fHaveData;// Offset=0x1e74 Size=0x4
        struct RESOLVE_NAME_RESPONSE_BUFFER// Size=0x98 (Id=31363)
        {
            struct _XRESOLVE_NAME_RESPONSE Response;// Offset=0x0 Size=0x1a
            wchar_t awcStringBuffer[63];// Offset=0x1a Size=0x7e
        };
        unsigned char __align1[7648];// Offset=0x98 Size=0x1de0
    };
    union // Size=0x98 (Id=0)
    {
        struct CXStorageDownloadWorker::RESOLVE_NAME_RESPONSE_BUFFER m_ResolveNameResponseBuffer;// Offset=0x1e78 Size=0x98
        struct _XSIGNATURE_VERIFY_RESPONSE m_SignatureVerifyResponse;// Offset=0x1e78 Size=0x4
    };
    public void ~CXStorageDownloadWorker();
    public class CXStorageDownloadWorker & operator=(class CXStorageDownloadWorker & );
    public void * __vecDelDtor(unsigned int );
};

class CXStorageDownloadWorker : public CXStorageTask// Size=0x1f10 (Id=2948)
{
    public void CXStorageDownloadWorker(class CXStorageDownloadWorker & );
    public void CXStorageDownloadWorker();
    public HRESULT CustomInitialize();
    public void CustomCleanup();
    public unsigned long CustomGetObjectSize();
    public HRESULT CustomPrepareRequest();
    public HRESULT CustomHandleHttpHeadersComplete(unsigned long ,unsigned long long );
    public HRESULT CustomHandleResponseHeaderComplete(HRESULT );
    public HRESULT CustomContinueResponseData();
    public unsigned long CustomGetMaxReceiveChunkSize();
    public HRESULT StartXSignatureVerifySubtask(struct _XSIGNATURE_TO_VERIFY * );
    public void SetStorageDownloadReceiveRateLimit(unsigned long );
    union // Size=0x1e78 (Id=0)
    {
        struct CXLiveAsyncTaskInternal::RECEIVERATELIMITDATA s_StorageDownloadReceiveRateLimitData;// Offset=0x0 Size=0x18
        HRESULT HandleResponseData();
        HRESULT HandleResponseDataComplete();
        unsigned char __align0[7768];// Offset=0x18 Size=0x1e58
        class CXLiveSubTask * m_pSubTask;// Offset=0x1e70 Size=0x4
        int m_fHaveData;// Offset=0x1e74 Size=0x4
        struct RESOLVE_NAME_RESPONSE_BUFFER// Size=0x98 (Id=31363)
        {
            struct _XRESOLVE_NAME_RESPONSE Response;// Offset=0x0 Size=0x1a
            wchar_t awcStringBuffer[63];// Offset=0x1a Size=0x7e
        };
        unsigned char __align1[7648];// Offset=0x98 Size=0x1de0
    };
    union // Size=0x98 (Id=0)
    {
        struct CXStorageDownloadWorker::RESOLVE_NAME_RESPONSE_BUFFER m_ResolveNameResponseBuffer;// Offset=0x1e78 Size=0x98
        struct _XSIGNATURE_VERIFY_RESPONSE m_SignatureVerifyResponse;// Offset=0x1e78 Size=0x4
    };
    public void ~CXStorageDownloadWorker();
    public class CXStorageDownloadWorker & operator=(class CXStorageDownloadWorker & );
    public void * __vecDelDtor(unsigned int );
};

struct _XSIGNATURE_TO_VERIFY// Size=0x78 (Id=2949)
{
    unsigned char rgbDigest[20];// Offset=0x0 Size=0x14
    unsigned char rgbOnlineSignature[100];// Offset=0x14 Size=0x64
};

struct CXStorageDownloadWorker::RESOLVE_NAME_RESPONSE_BUFFER// Size=0x98 (Id=2950)
{
    struct _XRESOLVE_NAME_RESPONSE Response;// Offset=0x0 Size=0x1a
    wchar_t awcStringBuffer[63];// Offset=0x1a Size=0x7e
};

struct SCHEMA_CONFORMING_INFO// Size=0x2 (Id=2951)
{
    struct // Size=0x1 (Id=0)
    {
        unsigned char ConformsToIndex:6;// Offset=0x0 Size=0x1 BitOffset=0x0 BitSize=0x6
        unsigned char UTF8:1;// Offset=0x0 Size=0x1 BitOffset=0x6 BitSize=0x1
        unsigned char FixedArray:1;// Offset=0x0 Size=0x1 BitOffset=0x7 BitSize=0x1
    };
    unsigned char Reserved;// Offset=0x1 Size=0x1
};

struct XUIMessageChar// Size=0xc (Id=2952)
{
    wchar_t wch;// Offset=0x0 Size=0x2
    unsigned char __align0[2];// Offset=0x2 Size=0x2
    unsigned long dwFlags;// Offset=0x4 Size=0x4
    unsigned char UserIndex;// Offset=0x8 Size=0x1
};

struct _ACCOUNT_SUGGESTED_GAMERTAG// Size=0x6 (Id=2953)
{
    unsigned short wGamertagLength;// Offset=0x0 Size=0x2
    wchar_t * wszGamertag;// Offset=0x2 Size=0x4
};

struct XUIGradientStop// Size=0x8 (Id=2954)
{
    void * operator new(unsigned int ,void * );
    void * operator new(unsigned int );
    void * operator new[](unsigned int );
    void operator delete(void * );
    void operator delete[](void * );
    unsigned long dwColor;// Offset=0x0 Size=0x4
    float fPos;// Offset=0x4 Size=0x4
    void XUIGradientStop();
};

struct XUIMessageChecked// Size=0x4 (Id=2955)
{
    struct _XUIOBJ * hChecked;// Offset=0x0 Size=0x4
};

struct XUIMessageItemHandle// Size=0x8 (Id=2956)
{
    int iItem;// Offset=0x0 Size=0x4
    struct _XUIOBJ * hItem;// Offset=0x4 Size=0x4
};

struct ID3D10ShaderResourceView// Size=0x0 (Id=2957)
{
};

struct ID3D10Texture2D// Size=0x0 (Id=2958)
{
};

struct IXuiTexture// Size=0x4 (Id=2959)
{
    unsigned long AddRef();
    unsigned long Release();
    struct D3DTexture * GetD3D9Texture();
    struct ID3D10ShaderResourceView * GetD3D10View();
    struct ID3D10Texture2D * GetD3D10Texture();
    HRESULT GetDimensions(unsigned int ,unsigned int * ,unsigned int * );
    void IXuiTexture(struct IXuiTexture & );
    void IXuiTexture();
    struct IXuiTexture & operator=(struct IXuiTexture & );
};

struct IXuiTexture// Size=0x4 (Id=2960)
{
    unsigned long AddRef();
    unsigned long Release();
    struct D3DTexture * GetD3D9Texture();
    struct ID3D10ShaderResourceView * GetD3D10View();
    struct ID3D10Texture2D * GetD3D10Texture();
    HRESULT GetDimensions(unsigned int ,unsigned int * ,unsigned int * );
    void IXuiTexture(struct IXuiTexture & );
    void IXuiTexture();
    struct IXuiTexture & operator=(struct IXuiTexture & );
};

struct SCHEMA_HEADER// Size=0x2c (Id=2961)
{
    unsigned short SchemaVersionMajor;// Offset=0x0 Size=0x2
    unsigned short SchemaVersionMinor;// Offset=0x2 Size=0x2
    unsigned long ToolVersion;// Offset=0x4 Size=0x4
    unsigned long Flags;// Offset=0x8 Size=0x4
    unsigned long CompressedSize;// Offset=0xc Size=0x4
    unsigned long UncompressedSize;// Offset=0x10 Size=0x4
    unsigned long ConstantsTableOffset;// Offset=0x14 Size=0x4
    unsigned short ConstantsTableSize;// Offset=0x18 Size=0x2
    unsigned short ConstantSize;// Offset=0x1a Size=0x2
    unsigned long UrlTableOffset;// Offset=0x1c Size=0x4
    unsigned short UrlTableSize;// Offset=0x20 Size=0x2
    unsigned short UrlTableDataSize;// Offset=0x22 Size=0x2
    unsigned short HeaderSize;// Offset=0x24 Size=0x2
    unsigned short ExtensionDataSize;// Offset=0x26 Size=0x2
    unsigned short SchemaTableEntries;// Offset=0x28 Size=0x2
    unsigned short SchemaTableEntrySize;// Offset=0x2a Size=0x2
};

struct XMESSAGING_LARGEPROP// Size=0x108 (Id=2962)
{
    unsigned short wPropIndex;// Offset=0x0 Size=0x2
    unsigned char __align0[2];// Offset=0x2 Size=0x2
    union // Size=0x4 (Id=0)
    {
        void * pvMemory;// Offset=0x4 Size=0x4
        char szDirPath[260];// Offset=0x4 Size=0x104
    };
};

struct XUIMessageSourceImage// Size=0x1c (Id=2963)
{
    int iItem;// Offset=0x0 Size=0x4
    int iData;// Offset=0x4 Size=0x4
    int bItemData;// Offset=0x8 Size=0x4
    int bDirty;// Offset=0xc Size=0x4
    wchar_t * szPath;// Offset=0x10 Size=0x4
    struct _XUIBRUSH * hBrush;// Offset=0x14 Size=0x4
    struct _XUIOBJ * hObj;// Offset=0x18 Size=0x4
};

struct _GENERIC_LIST_CREATE_REQUEST// Size=0x1b (Id=2964)
{
    unsigned long long xUserId;// Offset=0x0 Size=0x8
    unsigned long nListType;// Offset=0x8 Size=0x4
    unsigned char bNameLength;// Offset=0xc Size=0x1
    unsigned short wXmlLength;// Offset=0xd Size=0x2
    wchar_t * szName;// Offset=0xf Size=0x4
    wchar_t * XmlProperties;// Offset=0x13 Size=0x4
    struct _GENERIC_LIST_CREATE_RESPONSE * pResponse;// Offset=0x17 Size=0x4
};

struct XUIInitParams// Size=0xc (Id=2965)
{
    unsigned long cbSize;// Offset=0x0 Size=0x4
    unsigned long dwFlags;// Offset=0x4 Size=0x4
    struct IXUIRuntimeHooks * pHooks;// Offset=0x8 Size=0x4
};

struct XUICustomPropHandler// Size=0x20 (Id=2966)
{
    HRESULT  ( * Set)(void * ,void * ,void * );// Offset=0x0 Size=0x4
    HRESULT  ( * Get)(void * ,void * ,void * );// Offset=0x4 Size=0x4
    HRESULT  ( * ToString)(void * ,wchar_t ** ,void * );// Offset=0x8 Size=0x4
    HRESULT  ( * FromString)(void * ,wchar_t * ,void * );// Offset=0xc Size=0x4
    HRESULT  ( * ToBinary)(void * ,struct XUIMemoryBuffer * ,void * );// Offset=0x10 Size=0x4
    HRESULT  ( * FromBinary)(void * ,unsigned char * ,unsigned int ,void * );// Offset=0x14 Size=0x4
    int  ( * IsEqual)(void * ,void * ,void * );// Offset=0x18 Size=0x4
    HRESULT  ( * ShowUI)(void * ,struct IXUIPropObj * ,struct HWND__ * );// Offset=0x1c Size=0x4
};

struct XGI_READSTRING_MSG// Size=0x20 (Id=2967)
{
    unsigned long dwTitleId;// Offset=0x0 Size=0x4
    unsigned char __align0[4];// Offset=0x4 Size=0x4
    unsigned long long qwId;// Offset=0x8 Size=0x8
    unsigned long dwUserIndex;// Offset=0x10 Size=0x4
    wchar_t * pwsz;// Offset=0x14 Size=0x4
    unsigned long * pcch;// Offset=0x18 Size=0x4
};

struct XUIMessageFocus// Size=0x8 (Id=2968)
{
    struct _XUIOBJ * hOther;// Offset=0x0 Size=0x4
    unsigned char UserIndex;// Offset=0x4 Size=0x1
};

struct _XONLINE_PRESENCE_SYSTEM// Size=0xa9 (Id=2969)
{
    unsigned short wUserId;// Offset=0x0 Size=0x2
    unsigned long long xuid;// Offset=0x2 Size=0x8
    unsigned long dwState;// Offset=0xa Size=0x4
    struct XNKID sessionID;// Offset=0xe Size=0x8
    unsigned long dwTitleID;// Offset=0x16 Size=0x4
    struct _FILETIME ftUserTime;// Offset=0x1a Size=0x8
    unsigned short cchRichPresence;// Offset=0x22 Size=0x2
    wchar_t wszRichPresence[64];// Offset=0x24 Size=0x80
    unsigned long dwLruIndex;// Offset=0xa4 Size=0x4
    unsigned char bRefCount;// Offset=0xa8 Size=0x1
};

struct _XCONTENT_METADATA// Size=0x93d6 (Id=2970)
{
    union // Size=0x13cd (Id=0)
    {
        unsigned long ContentType;// Offset=0x0 Size=0x4
        unsigned long ContentMetadataVersion;// Offset=0x4 Size=0x4
        union _LARGE_INTEGER ContentSize;// Offset=0x8 Size=0x8
        struct _XEX_EXECUTION_ID ExecutionId;// Offset=0x10 Size=0x18
        unsigned char ConsoleId[5];// Offset=0x28 Size=0x5
        unsigned long long Creator;// Offset=0x2d Size=0x8
        union // Size=0x24 (Id=0)
        {
            struct _STF_VOLUME_DESCRIPTOR StfsVolumeDescriptor;// Offset=0x35 Size=0x24
            struct _SVOD_DEVICE_DESCRIPTOR SvodVolumeDescriptor;// Offset=0x35 Size=0x24
        };
        unsigned long DataFiles;// Offset=0x59 Size=0x4
        unsigned long long DataFilesSize;// Offset=0x5d Size=0x8
        enum _XCONTENT_VOLUME_TYPE VolumeType;// Offset=0x65 Size=0x4
        unsigned char Reserved2[44];// Offset=0x69 Size=0x2c
        struct _XCONTENT_METADATA_MEDIA_DATA MediaData;// Offset=0x95 Size=0x24
        unsigned char DeviceId[20];// Offset=0xb9 Size=0x14
        wchar_t DisplayName[9][128];// Offset=0xcd Size=0x900
        wchar_t Description[9][128];// Offset=0x9cd Size=0x900
        wchar_t Publisher[64];// Offset=0x12cd Size=0x80
        wchar_t TitleName[64];// Offset=0x134d Size=0x80
        union <unnamed-type-Flags>// Size=0x1 (Id=31515)
        {
            struct _XCONTENT_TRANSFERFLAGS Bits;// Offset=0x0 Size=0x1
            unsigned char FlagsAsBYTE;// Offset=0x0 Size=0x1
        };
        unsigned char __align0[5068];// Offset=0x1 Size=0x13cc
    };
    union _XCONTENT_METADATA::<unnamed-type-Flags> Flags;// Offset=0x13cd Size=0x1
    unsigned long ThumbnailSize;// Offset=0x13ce Size=0x4
    unsigned long TitleThumbnailSize;// Offset=0x13d2 Size=0x4
    unsigned char Thumbnail[15616];// Offset=0x13d6 Size=0x3d00
    wchar_t DisplayNameEx[3][128];// Offset=0x50d6 Size=0x300
    unsigned char TitleThumbnail[15616];// Offset=0x53d6 Size=0x3d00
    wchar_t DescriptionEx[3][128];// Offset=0x90d6 Size=0x300
};

union _XCONTENT_METADATA::<unnamed-type-Flags>// Size=0x1 (Id=2971)
{
    struct _XCONTENT_TRANSFERFLAGS Bits;// Offset=0x0 Size=0x1
    unsigned char FlagsAsBYTE;// Offset=0x0 Size=0x1
};

class CUnmarshaller// Size=0x1198 (Id=2972)
{
    public void CUnmarshaller();
    public void ~CUnmarshaller();
    public HRESULT Initialize(class CSchemaData * ,unsigned long ,class CSchemaData * ,unsigned long ,unsigned long ,class CLittleEndianBuffer * ,unsigned char * ,unsigned long );
    public HRESULT Unmarshal();
    public unsigned long GetUnmarshalledDataSize();
    public HRESULT GetSecondaryHr();
    protected class CSchemaData * m_pSchemaData;// Offset=0x0 Size=0x4
    protected class CSchemaData * m_pXDKSchema;// Offset=0x4 Size=0x4
    protected unsigned long m_dwXDKSchemaIndex;// Offset=0x8 Size=0x4
    protected class CLittleEndianBuffer * m_pWireBuffer;// Offset=0xc Size=0x4
    protected class CSchemaAccess m_SchemaBuffer;// Offset=0x10 Size=0x18
    protected class COutputBuffer m_OutputBuffer;// Offset=0x28 Size=0xc
    private unsigned char __align0[4];// Offset=0x34 Size=0x4
    protected class CConformanceList m_ConformanceList;// Offset=0x38 Size=0x400
    protected unsigned long m_CurrentScope;// Offset=0x438 Size=0x4
    protected class CScopeItem m_rgScopeStack[16];// Offset=0x43c Size=0x540
    protected unsigned long m_SchemaCheckpoint;// Offset=0x97c Size=0x4
    protected unsigned long m_OutputCheckpoint;// Offset=0x980 Size=0x4
    protected unsigned long m_WireCheckpoint;// Offset=0x984 Size=0x4
    protected unsigned long m_BaseOutputBufferCheckpoint;// Offset=0x988 Size=0x4
    protected unsigned long m_dwCounter;// Offset=0x98c Size=0x4
    protected HRESULT m_hrSecondary;// Offset=0x990 Size=0x4
    protected wchar_t m_TempBuffer[1024];// Offset=0x994 Size=0x800
    protected HRESULT InjectLinkPointer(unsigned long );
    protected HRESULT ReserveSpace(unsigned long ,unsigned long ,class COutputBuffer * );
    protected HRESULT RecursiveUnmarshal(unsigned long );
    protected void SetCheckpoint(unsigned long ,unsigned long );
    protected void RestoreCheckpoint(unsigned long );
    public void * __vecDelDtor(unsigned int );
};

struct XUIMessageSetBackScene// Size=0x8 (Id=2973)
{
    struct _XUIOBJ * hBackScene;// Offset=0x0 Size=0x4
    struct _XUIOBJ * hOldBackScene;// Offset=0x4 Size=0x4
};

struct _XPARTY_USER_INFO_INTERNAL : public _XPARTY_USER_INFO// Size=0x80 (Id=2974)
{
    unsigned char __align0[120];// Offset=0x0 Size=0x78
    unsigned long dwPeerId;// Offset=0x78 Size=0x4
    unsigned long dwMuteMask;// Offset=0x7c Size=0x4
};

struct XUIMessageEnableState// Size=0x4 (Id=2975)
{
    int bEnabled;// Offset=0x0 Size=0x4
};

struct XUIMessageItemOverride// Size=0x10 (Id=2976)
{
    int iItem;// Offset=0x0 Size=0x4
    unsigned long dwFlags;// Offset=0x4 Size=0x4
    float fWidth;// Offset=0x8 Size=0x4
    float fHeight;// Offset=0xc Size=0x4
};

struct XUIMessageCheckState// Size=0x4 (Id=2977)
{
    int bChecked;// Offset=0x0 Size=0x4
};

struct XnSockInfo// Size=0x28 (Id=2978)
{
    unsigned int Socket;// Offset=0x0 Size=0x4
    enum _XNCALLER_TYPE CallerType;// Offset=0x4 Size=0x4
    unsigned long dwInfoFlags;// Offset=0x8 Size=0x4
    int iAddressFamily;// Offset=0xc Size=0x4
    int iSocketType;// Offset=0x10 Size=0x4
    int iProtocol;// Offset=0x14 Size=0x4
    struct in_addr inaddrLocal;// Offset=0x18 Size=0x4
    struct in_addr inaddrRemote;// Offset=0x1c Size=0x4
    unsigned short wLocalPort;// Offset=0x20 Size=0x2
    unsigned short wRemotePort;// Offset=0x22 Size=0x2
    unsigned char bTcpState;// Offset=0x24 Size=0x1
    unsigned char bReserved1;// Offset=0x25 Size=0x1
    unsigned char bReserved2;// Offset=0x26 Size=0x1
    unsigned char bReserved3;// Offset=0x27 Size=0x1
};

struct XUIMessageSourceHtml// Size=0x14 (Id=2979)
{
    unsigned long dwUnique;// Offset=0x0 Size=0x4
    int iItem;// Offset=0x4 Size=0x4
    int iData;// Offset=0x8 Size=0x4
    int bItemData;// Offset=0xc Size=0x4
    wchar_t * szHtml;// Offset=0x10 Size=0x4
};

struct XUIMessageLineCount// Size=0xc (Id=2980)
{
    enum XUI_LINECOUNT nType;// Offset=0x0 Size=0x4
    unsigned int nCount;// Offset=0x4 Size=0x4
    int bSmoothScroll;// Offset=0x8 Size=0x4
};

struct _GET_USER_SUBSCRIPTION_DETAILS_REQUEST// Size=0x22 (Id=2981)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned long long qwMachineId;// Offset=0x8 Size=0x8
    unsigned long long qwOfferId;// Offset=0x10 Size=0x8
    unsigned short wInstanceIdLength;// Offset=0x18 Size=0x2
    wchar_t * wszInstanceId;// Offset=0x1a Size=0x4
    struct _GET_USER_SUBSCRIPTION_DETAILS_RESPONSE * pResponse;// Offset=0x1e Size=0x4
};

struct _PASSPORT_GET_USER_DATA_RESPONSE// Size=0x51 (Id=2982)
{
    unsigned short wFirstNameLength;// Offset=0x0 Size=0x2
    wchar_t * wszFirstName;// Offset=0x2 Size=0x4
    unsigned short wLastNameLength;// Offset=0x6 Size=0x2
    wchar_t * wszLastName;// Offset=0x8 Size=0x4
    struct _FILETIME ftBirthdate;// Offset=0xc Size=0x8
    struct _ADDRESS_INFO address;// Offset=0x14 Size=0x24
    struct _PHONE_INFO phone;// Offset=0x38 Size=0x12
    unsigned char bCountryId;// Offset=0x4a Size=0x1
    unsigned short wEmailLength;// Offset=0x4b Size=0x2
    wchar_t * wszEmail;// Offset=0x4d Size=0x4
};

struct _XUIFONT// Size=0x0 (Id=2983)
{
};

struct XUIMessageSetTeletypeCount// Size=0x4 (Id=2984)
{
    int nCount;// Offset=0x0 Size=0x4
};

struct _ADD_PAYMENT_INSTRUMENT_RESPONSE// Size=0x6 (Id=2985)
{
    unsigned short wPaymentInstrumentIdLength;// Offset=0x0 Size=0x2
    wchar_t * wszPaymentInstrumentId;// Offset=0x2 Size=0x4
};

struct XUIMessageNavReturn// Size=0x4 (Id=2986)
{
    struct _XUIOBJ * hScene;// Offset=0x0 Size=0x4
};

struct XUICacheSceneAsyncThreadData// Size=0x10 (Id=2987)
{
    class CXuiSceneCache * pThis;// Offset=0x0 Size=0x4
    struct XUICacheSceneAsync * pScenes;// Offset=0x4 Size=0x4
    unsigned long dwCount;// Offset=0x8 Size=0x4
    struct _XOVERLAPPED * pOverlapped;// Offset=0xc Size=0x4
};

struct _ACCOUNT_LINK_XBOX1_ACCOUNT_REQUEST// Size=0x6e (Id=2988)
{
    unsigned long long qwMachineId;// Offset=0x0 Size=0x8
    unsigned long dwTitleId;// Offset=0x8 Size=0x4
    unsigned short wGamertagLength;// Offset=0xc Size=0x2
    wchar_t * wszGamertag;// Offset=0xe Size=0x4
    struct _PASSPORT_SESSION_TOKEN pUserSessionToken[1];// Offset=0x12 Size=0x1c
    struct _PASSPORT_SESSION_TOKEN pParentSessionToken[1];// Offset=0x2e Size=0x1c
    struct _PHONE_INFO phoneInfo;// Offset=0x4a Size=0x12
    unsigned short wPostalCodeLength;// Offset=0x5c Size=0x2
    wchar_t * wszPostalCode;// Offset=0x5e Size=0x4
    unsigned short wAccountHolderNameLength;// Offset=0x62 Size=0x2
    wchar_t * wszAccountHolderName;// Offset=0x64 Size=0x4
    unsigned short wAccountNumberLength;// Offset=0x68 Size=0x2
    wchar_t * wszAccountNumber;// Offset=0x6a Size=0x4
};

class CXStorageUploadParent : public CXLiveAsyncTaskInternal// Size=0x1e20 (Id=2989)
{
    public void CXStorageUploadParent(class CXStorageUploadParent & );
    public void CXStorageUploadParent();
    public void StorageUploadGetServerPath(wchar_t ** );
    public unsigned long StorageUploadGetSize();
    public HRESULT StorageUploadGetNextBlock(unsigned char ** ,unsigned long * );
    public void ~CXStorageUploadParent();
    public class CXStorageUploadParent & operator=(class CXStorageUploadParent & );
    public void * __vecDelDtor(unsigned int );
};

class CXStorageUploadParent : public CXLiveAsyncTaskInternal// Size=0x1e20 (Id=2990)
{
    public void CXStorageUploadParent(class CXStorageUploadParent & );
    public void CXStorageUploadParent();
    public void StorageUploadGetServerPath(wchar_t ** );
    public unsigned long StorageUploadGetSize();
    public HRESULT StorageUploadGetNextBlock(unsigned char ** ,unsigned long * );
    public void ~CXStorageUploadParent();
    public class CXStorageUploadParent & operator=(class CXStorageUploadParent & );
    public void * __vecDelDtor(unsigned int );
};

struct _XPARTY_JOIN_PARAMS : public _XPARTY_JOIN_SHARED_PARAMS// Size=0x58 (Id=2991)
{
    unsigned char __align0[80];// Offset=0x0 Size=0x50
    unsigned long dwPrimaryUserIndex;// Offset=0x50 Size=0x4
};

struct XUIMessageNavInfo// Size=0x14 (Id=2992)
{
    int iItem;// Offset=0x0 Size=0x4
    wchar_t * szNavPath;// Offset=0x4 Size=0x4
    int bStayVisible;// Offset=0x8 Size=0x4
    unsigned int nSrcTransIndex;// Offset=0xc Size=0x4
    unsigned int nDestTransIndex;// Offset=0x10 Size=0x4
};

struct XUIMessageMessageBoxReturn// Size=0x4 (Id=2993)
{
    int nButton;// Offset=0x0 Size=0x4
};

struct _XNPSOCKETSECURITY// Size=0x10 (Id=2994)
{
    unsigned int Socket;// Offset=0x0 Size=0x4
    unsigned long dwFlags;// Offset=0x4 Size=0x4
    unsigned long dwNumKeys;// Offset=0x8 Size=0x4
    struct XNKID * pxnkids;// Offset=0xc Size=0x4
};

struct __PASSPORT_GET_PUID_FROM_MEMBERNAME_REQUEST// Size=0xa (Id=2995)
{
    unsigned short wMemberNameLength;// Offset=0x0 Size=0x2
    wchar_t * wszMemberName;// Offset=0x2 Size=0x4
    struct __PASSPORT_GET_PUID_FROM_MEMBERNAME_RESPONSE * pResult;// Offset=0x6 Size=0x4
};

class CXContentDownload : public CContentAndUpdateBase// Size=0x36c70 (Id=2996)
{
    public void CXContentDownload(class CXContentDownload & );
    public void CXContentDownload();
    public HRESULT CustomInitialize();
    public void CustomCleanup();
    public unsigned long CustomGetObjectSize();
    public HRESULT CustomPrepareRequest();
    public HRESULT CustomContinueBuildRequest();
    public HRESULT CustomContinueResponseData();
    public HRESULT ContentAndUpdateOpenInProgressPackage();
    public HRESULT ContentAndUpdateCreateInstallerPackage();
    public HRESULT ContentAndUpdateHandleResponseDataComplete();
    public HRESULT GetInProgressMetadata(class CArgumentList * );
    private HRESULT OpenInProgressPackageInternal(char * ,unsigned char * ,struct _XCONTENT_HEADER * ,struct _XCONTENT_METADATA * ,unsigned char * ,unsigned long * ,struct _XCONTENT_MOUNTED_PACKAGE ** );
    private void MapToContentReferral(struct FIND_MEDIA_INSTANCE_URLS_RESPONSE_BUFFER * ,struct REFERRAL_RESPONSE_BUFFER * );
    private int IsUpdateRedirect();
    struct REFRESH_LICENSE_RESPONSE_BUFFER// Size=0x806 (Id=31707)
    {
        struct _XCONTENT_REFRESH_LICENSE_RESPONSE Response;// Offset=0x0 Size=0x6
        unsigned char abContentHeaderBuffer[2048];// Offset=0x6 Size=0x800
    };
    private unsigned char __align0[173522];// Offset=0x806 Size=0x2a5d2
    private struct FIND_MEDIA_INSTANCE_URLS_RESPONSE_BUFFER m_FindMediaInstanceResponseBuffer;// Offset=0x2add8 Size=0x156c
    private struct REFERRAL_RESPONSE_BUFFER m_ReferralResponseBuffer;// Offset=0x2c344 Size=0x1512
    union // Size=0x806 (Id=0)
    {
        struct CXContentDownload::REFRESH_LICENSE_RESPONSE_BUFFER m_RefreshLicenseResponseBuffer;// Offset=0x2d856 Size=0x806
        struct _XCONTENT_METADATA m_ContentMetaData;// Offset=0x2d856 Size=0x93d6
    };
    private unsigned char __align1[4];// Offset=0x36c2c Size=0x4
    private unsigned long long m_qwUserId;// Offset=0x36c30 Size=0x8
    private unsigned char m_abContentId[20];// Offset=0x36c38 Size=0x14
    private struct _GUID m_MediaInstanceId;// Offset=0x36c4c Size=0x10
    private unsigned long m_dwTargetDirectoryLength;// Offset=0x36c5c Size=0x4
    private char * m_pszTargetDirectoryPath;// Offset=0x36c60 Size=0x4
    private unsigned long m_dwFlags;// Offset=0x36c64 Size=0x4
    private class CXLiveSubTask * m_pSubTask;// Offset=0x36c68 Size=0x4
    private struct _XCONTENT_HEADER * m_pContentHeader;// Offset=0x36c6c Size=0x4
    public void ~CXContentDownload();
    public class CXContentDownload & operator=(class CXContentDownload & );
    public void * __vecDelDtor(unsigned int );
};

class CXContentDownload : public CContentAndUpdateBase// Size=0x36c70 (Id=2997)
{
    public void CXContentDownload(class CXContentDownload & );
    public void CXContentDownload();
    public HRESULT CustomInitialize();
    public void CustomCleanup();
    public unsigned long CustomGetObjectSize();
    public HRESULT CustomPrepareRequest();
    public HRESULT CustomContinueBuildRequest();
    public HRESULT CustomContinueResponseData();
    public HRESULT ContentAndUpdateOpenInProgressPackage();
    public HRESULT ContentAndUpdateCreateInstallerPackage();
    public HRESULT ContentAndUpdateHandleResponseDataComplete();
    public HRESULT GetInProgressMetadata(class CArgumentList * );
    private HRESULT OpenInProgressPackageInternal(char * ,unsigned char * ,struct _XCONTENT_HEADER * ,struct _XCONTENT_METADATA * ,unsigned char * ,unsigned long * ,struct _XCONTENT_MOUNTED_PACKAGE ** );
    private void MapToContentReferral(struct FIND_MEDIA_INSTANCE_URLS_RESPONSE_BUFFER * ,struct REFERRAL_RESPONSE_BUFFER * );
    private int IsUpdateRedirect();
    struct REFRESH_LICENSE_RESPONSE_BUFFER// Size=0x806 (Id=31707)
    {
        struct _XCONTENT_REFRESH_LICENSE_RESPONSE Response;// Offset=0x0 Size=0x6
        unsigned char abContentHeaderBuffer[2048];// Offset=0x6 Size=0x800
    };
    private unsigned char __align0[173522];// Offset=0x806 Size=0x2a5d2
    private struct FIND_MEDIA_INSTANCE_URLS_RESPONSE_BUFFER m_FindMediaInstanceResponseBuffer;// Offset=0x2add8 Size=0x156c
    private struct REFERRAL_RESPONSE_BUFFER m_ReferralResponseBuffer;// Offset=0x2c344 Size=0x1512
    union // Size=0x806 (Id=0)
    {
        struct CXContentDownload::REFRESH_LICENSE_RESPONSE_BUFFER m_RefreshLicenseResponseBuffer;// Offset=0x2d856 Size=0x806
        struct _XCONTENT_METADATA m_ContentMetaData;// Offset=0x2d856 Size=0x93d6
    };
    private unsigned char __align1[4];// Offset=0x36c2c Size=0x4
    private unsigned long long m_qwUserId;// Offset=0x36c30 Size=0x8
    private unsigned char m_abContentId[20];// Offset=0x36c38 Size=0x14
    private struct _GUID m_MediaInstanceId;// Offset=0x36c4c Size=0x10
    private unsigned long m_dwTargetDirectoryLength;// Offset=0x36c5c Size=0x4
    private char * m_pszTargetDirectoryPath;// Offset=0x36c60 Size=0x4
    private unsigned long m_dwFlags;// Offset=0x36c64 Size=0x4
    private class CXLiveSubTask * m_pSubTask;// Offset=0x36c68 Size=0x4
    private struct _XCONTENT_HEADER * m_pContentHeader;// Offset=0x36c6c Size=0x4
    public void ~CXContentDownload();
    public class CXContentDownload & operator=(class CXContentDownload & );
    public void * __vecDelDtor(unsigned int );
};

struct FIND_MEDIA_INSTANCE_URLS_RESPONSE_BUFFER// Size=0x156c (Id=2998)
{
    struct _FIND_MEDIA_INSTANCE_URLS_RESPONSE Response;// Offset=0x0 Size=0x8
    struct _MEDIA_INSTANCE_URLS acMediaInstances[1];// Offset=0x8 Size=0x164
    struct _TYPED_MEDIA_URL acUrls[10];// Offset=0x16c Size=0x78
    char acUrlsStrBuffers[10][500];// Offset=0x1e4 Size=0x1388
};

struct CXContentDownload::REFRESH_LICENSE_RESPONSE_BUFFER// Size=0x806 (Id=2999)
{
    struct _XCONTENT_REFRESH_LICENSE_RESPONSE Response;// Offset=0x0 Size=0x6
    unsigned char abContentHeaderBuffer[2048];// Offset=0x6 Size=0x800
};

struct IXuiResourceReader// Size=0x4 (Id=3000)
{
    void AddRef();
    unsigned int Release();
    struct IXuiResourceManager * GetManager();
    HRESULT SetManager(struct IXuiResourceManager * );
    unsigned int GetTotalSize();
    unsigned int GetRemainingBytes();
    HRESULT Read(unsigned char * ,unsigned int ,unsigned int * );
    HRESULT Seek(unsigned int ,int );
    HRESULT GetBuffer(unsigned char ** );
    HRESULT ReleaseBuffer();
    HRESULT Duplicate(struct IXuiResourceReader ** );
    void IXuiResourceReader(struct IXuiResourceReader & );
    void IXuiResourceReader();
    struct IXuiResourceReader & operator=(struct IXuiResourceReader & );
};

struct IXuiResourceReader// Size=0x4 (Id=3001)
{
    void AddRef();
    unsigned int Release();
    struct IXuiResourceManager * GetManager();
    HRESULT SetManager(struct IXuiResourceManager * );
    unsigned int GetTotalSize();
    unsigned int GetRemainingBytes();
    HRESULT Read(unsigned char * ,unsigned int ,unsigned int * );
    HRESULT Seek(unsigned int ,int );
    HRESULT GetBuffer(unsigned char ** );
    HRESULT ReleaseBuffer();
    HRESULT Duplicate(struct IXuiResourceReader ** );
    void IXuiResourceReader(struct IXuiResourceReader & );
    void IXuiResourceReader();
    struct IXuiResourceReader & operator=(struct IXuiResourceReader & );
};

struct XUIFigurePoint// Size=0x1c (Id=3002)
{
    struct D3DXVECTOR2 point;// Offset=0x0 Size=0x8
    struct D3DXVECTOR2 ptCtl1;// Offset=0x8 Size=0x8
    struct D3DXVECTOR2 ptCtl2;// Offset=0x10 Size=0x8
    int bSmooth;// Offset=0x18 Size=0x4
    void XUIFigurePoint();
    struct XUIFigurePoint & operator=(struct XUIFigurePoint & );
};

struct XUIFigurePoint// Size=0x1c (Id=3003)
{
    struct D3DXVECTOR2 point;// Offset=0x0 Size=0x8
    struct D3DXVECTOR2 ptCtl1;// Offset=0x8 Size=0x8
    struct D3DXVECTOR2 ptCtl2;// Offset=0x10 Size=0x8
    int bSmooth;// Offset=0x18 Size=0x4
    void XUIFigurePoint();
    struct XUIFigurePoint & operator=(struct XUIFigurePoint & );
};

struct _RC4_SHA_HEADER// Size=0x1c (Id=3004)
{
    unsigned char Checksum[20];// Offset=0x0 Size=0x14
    unsigned char Confounder[8];// Offset=0x14 Size=0x8
};

class CXCabCryptHelper// Size=0x1d4 (Id=3005)
{
    public void InitializeDecryption(struct _RC4_SHA_HEADER * ,unsigned long ,unsigned char * ,unsigned long );
    public HRESULT Decrypt(unsigned char * ,unsigned long );
    public HRESULT FinishDecryptionAndVerify();
    public HRESULT InitDecryptAndVerify(struct _RC4_SHA_HEADER * ,unsigned char * ,unsigned long ,unsigned char * ,unsigned long );
    public void InitializeEncryption(unsigned char * ,unsigned long );
    public void Encrypt(unsigned char * ,unsigned long );
    public void FinishEncryption(struct _RC4_SHA_HEADER * );
    public void InitEncryptAndFinish(unsigned char * ,unsigned long ,unsigned char * ,unsigned long ,struct _RC4_SHA_HEADER * );
    public unsigned long GetDataRemaining();
    public HRESULT VerifyPKCS1Signature(unsigned char * ,unsigned long ,unsigned char * ,unsigned long ,unsigned char * ,unsigned long ,unsigned char * ,unsigned long );
    union // Size=0x20 (Id=0)
    {
        unsigned long m_dwTotalSize;// Offset=0x0 Size=0x4
        unsigned long m_dwSizeProcessed;// Offset=0x4 Size=0x4
        int m_fEncrypted;// Offset=0x8 Size=0x4
        unsigned char m_abOriginalChecksum[20];// Offset=0xc Size=0x14
        union <unnamed-type-m_State>// Size=0xb0 (Id=31803)
        {
            struct XECRYPT_HMACSHA_STATE HmacShaState;// Offset=0x0 Size=0xb0
            struct XECRYPT_SHA_STATE ShaState;// Offset=0x0 Size=0x58
        };
    };
    private union CXCabCryptHelper::<unnamed-type-m_State> m_State;// Offset=0x20 Size=0xb0
    private struct XECRYPT_RC4_STATE m_Rc4State;// Offset=0xd0 Size=0x102
};

union CXCabCryptHelper::<unnamed-type-m_State>// Size=0xb0 (Id=3006)
{
    union // Size=0xb0 (Id=0)
    {
        struct XECRYPT_HMACSHA_STATE HmacShaState;// Offset=0x0 Size=0xb0
        struct XECRYPT_SHA_STATE ShaState;// Offset=0x0 Size=0x58
    };
};

struct _PASSPORT_GET_FRIEND_MEMBER_NAME_RESPONSE// Size=0x6 (Id=3007)
{
    unsigned short wFriendPmnLength;// Offset=0x0 Size=0x2
    wchar_t * wszFriendPmn;// Offset=0x2 Size=0x4
};

struct XUIMessageFigureGetCount// Size=0x4 (Id=3008)
{
    int nCount;// Offset=0x0 Size=0x4
};

struct XUINotifyValueChanging// Size=0x8 (Id=3009)
{
    int nOldValue;// Offset=0x0 Size=0x4
    int nNewValue;// Offset=0x4 Size=0x4
};

struct _XSHOWFRIENDSUI_PARAMS// Size=0x650 (Id=3010)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long dwFlags;// Offset=0x4 Size=0x4
    struct _XOVERLAPPED * pOverlapped;// Offset=0x8 Size=0x4
    unsigned char __align0[4];// Offset=0xc Size=0x4
    union // Size=0x650 (Id=0)
    {
        struct _XSHOWFRIENDSUI_PARAMS::_unnamed_3016::<unnamed-type-chat> chat;// Offset=0x10 Size=0x4
        struct _XSHOWFRIENDSUI_PARAMS::_unnamed_3015::<unnamed-type-msg> msg;// Offset=0x10 Size=0x640
        struct _XSHOWFRIENDSUI_PARAMS::_unnamed_3014::<unnamed-type-playerList> playerList;// Offset=0x10 Size=0x16c
        struct _XSHOWFRIENDSUI_PARAMS::_unnamed_3013::<unnamed-type-recentmsgs> recentmsgs;// Offset=0x10 Size=0x10
        struct _XSHOWFRIENDSUI_PARAMS::_unnamed_3012::<unnamed-type-quickchat> quickchat;// Offset=0x10 Size=0x4
        struct _XSHOWFRIENDSUI_PARAMS::_unnamed_3011::<unnamed-type-communitysessions> communitysessions;// Offset=0x10 Size=0x4
    };
};

struct _XSHOWFRIENDSUI_PARAMS::_unnamed_3011::<unnamed-type-communitysessions>// Size=0x4 (Id=3011)
{
    unsigned long dwCommunitySessionsFlags;// Offset=0x0 Size=0x4
};

struct _XSHOWFRIENDSUI_PARAMS::_unnamed_3012::<unnamed-type-quickchat>// Size=0x4 (Id=3012)
{
    unsigned long dwSessionID;// Offset=0x0 Size=0x4
};

struct _XSHOWFRIENDSUI_PARAMS::_unnamed_3013::<unnamed-type-recentmsgs>// Size=0x10 (Id=3013)
{
    unsigned long long qwParam;// Offset=0x0 Size=0x8
    unsigned long dwChannel;// Offset=0x8 Size=0x4
};

struct _XSHOWFRIENDSUI_PARAMS::_unnamed_3014::<unnamed-type-playerList>// Size=0x16c (Id=3014)
{
    wchar_t szTitle[36];// Offset=0x0 Size=0x48
    wchar_t szDescription[83];// Offset=0x48 Size=0xa6
    unsigned char __align0[2];// Offset=0xee Size=0x2
    unsigned char * pbImage;// Offset=0xf0 Size=0x4
    unsigned long cbImage;// Offset=0xf4 Size=0x4
    struct XPLAYERLIST_USER * pPlayers;// Offset=0xf8 Size=0x4
    unsigned long cPlayers;// Offset=0xfc Size=0x4
    struct XPLAYERLIST_BUTTON xButton;// Offset=0x100 Size=0x34
    struct XPLAYERLIST_BUTTON yButton;// Offset=0x134 Size=0x34
    struct XPLAYERLIST_RESULT * pResults;// Offset=0x168 Size=0x4
};

struct _XSHOWFRIENDSUI_PARAMS::_unnamed_3015::<unnamed-type-msg>// Size=0x640 (Id=3015)
{
    unsigned long long rgXuidRecipients[100];// Offset=0x0 Size=0x320
    unsigned int cRecipients;// Offset=0x320 Size=0x4
    wchar_t szText[256];// Offset=0x324 Size=0x200
    wchar_t szTitle[31];// Offset=0x524 Size=0x3e
    wchar_t szGameMessage[97];// Offset=0x562 Size=0xc2
    unsigned char * pbImage;// Offset=0x624 Size=0x4
    unsigned long cbImage;// Offset=0x628 Size=0x4
    struct XMSG_CUSTOMACTION * pCustomActions;// Offset=0x62c Size=0x4
    unsigned long cCustomActions;// Offset=0x630 Size=0x4
    unsigned char * pbCustomPayload;// Offset=0x634 Size=0x4
    unsigned long cbCustomPayload;// Offset=0x638 Size=0x4
    unsigned long dwExpireMinutes;// Offset=0x63c Size=0x4
};

struct _XSHOWFRIENDSUI_PARAMS::_unnamed_3016::<unnamed-type-chat>// Size=0x4 (Id=3016)
{
    unsigned long dwChannel;// Offset=0x0 Size=0x4
};

struct _XUIDC// Size=0x0 (Id=3017)
{
};

struct XUIMessageFigureVertexPoint// Size=0xc (Id=3018)
{
    struct D3DXVECTOR2 point;// Offset=0x0 Size=0x8
    int nVertex;// Offset=0x8 Size=0x4
    void XUIMessageFigureVertexPoint();
    struct XUIMessageFigureVertexPoint & operator=(struct XUIMessageFigureVertexPoint & );
};

struct XUIMessageFigureVertexPoint// Size=0xc (Id=3019)
{
    struct D3DXVECTOR2 point;// Offset=0x0 Size=0x8
    int nVertex;// Offset=0x8 Size=0x4
    void XUIMessageFigureVertexPoint();
    struct XUIMessageFigureVertexPoint & operator=(struct XUIMessageFigureVertexPoint & );
};

struct XUIMessageFigurePointIndex// Size=0x8 (Id=3020)
{
    int nPointIndex;// Offset=0x0 Size=0x4
    int nOtherIndex;// Offset=0x4 Size=0x4
};

struct XUIMessageRender// Size=0x14 (Id=3021)
{
    struct _XUIDC * hDC;// Offset=0x0 Size=0x4
    unsigned long dwColorFactor;// Offset=0x4 Size=0x4
    enum XUI_BLEND_MODE nBlendMode;// Offset=0x8 Size=0x4
    unsigned long dwColorWriteFlags;// Offset=0xc Size=0x4
    unsigned long dwRenderFlags;// Offset=0x10 Size=0x4
};

struct ORDINAL_TO_INDEX// Size=0x4 (Id=3022)
{
    unsigned short wOrdinal;// Offset=0x0 Size=0x2
    unsigned short wIndex;// Offset=0x2 Size=0x2
};

struct XUIObjectData// Size=0x2c (Id=3023)
{
    void * operator new(unsigned int ,void * );
    void * operator new(unsigned int );
    void * operator new[](unsigned int );
    void operator delete(void * );
    void operator delete[](void * );
    wchar_t * m_szClassName;// Offset=0x0 Size=0x4
    struct XUIAllocatedArray * m_pPropArray;// Offset=0x4 Size=0x4
    struct XUIAllocatedArray * m_pChildArray;// Offset=0x8 Size=0x4
    struct XUINamedframeData * m_pNamedFrames;// Offset=0xc Size=0x4
    int m_nNumNamedFrames;// Offset=0x10 Size=0x4
    struct XUINamedFrame * m_pRuntimeNamedFrames;// Offset=0x14 Size=0x4
    unsigned long m_dwRefs;// Offset=0x18 Size=0x4
    int m_nNumTimelines;// Offset=0x1c Size=0x4
    struct XUISubtimelineData * m_pTimelines;// Offset=0x20 Size=0x4
    unsigned long m_dwFlags;// Offset=0x24 Size=0x4
    void * m_pLoadData;// Offset=0x28 Size=0x4
    void XUIObjectData();
    void ~XUIObjectData();
    unsigned long AddRef();
    unsigned long Release();
    int GetNumProps();
    struct XUIPropertyData * GetPropAddr(int );
    struct XUIObjectData * GetChild(int );
    int GetNumChildren();
    void * __vecDelDtor(unsigned int );
};

struct _XNQOSHISTORYENTRY// Size=0x64 (Id=3024)
{
    unsigned long dwFlags;// Offset=0x0 Size=0x4
    unsigned long dwTitleId;// Offset=0x4 Size=0x4
    unsigned long dwTitleVersion;// Offset=0x8 Size=0x4
    unsigned long dwServiceID;// Offset=0xc Size=0x4
    union _LARGE_INTEGER liTimestamp;// Offset=0x10 Size=0x8
    struct in_addr inaddrRemote;// Offset=0x18 Size=0x4
    struct _XNQOSMEASUREMENTS Measurements;// Offset=0x1c Size=0x48
};

class CXMsgSendBase : public CXStorageUploadParent// Size=0x2038 (Id=3025)
{
    public void CXMsgSendBase(class CXMsgSendBase & );
    public void CXMsgSendBase();
    public HRESULT CustomInitialize();
    public void CustomCleanup();
    public HRESULT CustomPrepareRequest();
    public HRESULT CustomContinueBuildRequest();
    public HRESULT CustomContinueProcessHttpHeaders();
    public void StorageUploadGetServerPath(wchar_t ** );
    public unsigned long StorageUploadGetSize();
    public HRESULT StorageUploadGetNextBlock(unsigned char ** ,unsigned long * );
    public HRESULT MsgBaseBuildSendSubTask(class CXLiveSubTask ** );
    public unsigned long long * GetSenderXuid();
    public void SetSenderXuid(unsigned long long * );
    public struct XMESSAGING_MSG * GetMessage();
    public void SetMessage(struct XMESSAGING_MSG * );
    public void MessagingBuildAttachmentPaths();
    public unsigned long MessagingGetDetailsSize();
    private unsigned char __align0[7712];// Offset=0x0 Size=0x1e20
    private unsigned long long m_xuidSender;// Offset=0x1e20 Size=0x8
    private struct XMESSAGING_MSG * m_pMessage;// Offset=0x1e28 Size=0x4
    private unsigned char * m_pbBuffer;// Offset=0x1e2c Size=0x4
    private unsigned long m_dwBufferSize;// Offset=0x1e30 Size=0x4
    private class CXLiveSubTask * m_pMsgSubTask;// Offset=0x1e34 Size=0x4
    private wchar_t m_wszCurrentStorageFileName[255];// Offset=0x1e38 Size=0x1fe
    public void ~CXMsgSendBase();
    public class CXMsgSendBase & operator=(class CXMsgSendBase & );
    public void * __vecDelDtor(unsigned int );
};

class CXMsgSendBase : public CXStorageUploadParent// Size=0x2038 (Id=3026)
{
    public void CXMsgSendBase(class CXMsgSendBase & );
    public void CXMsgSendBase();
    public HRESULT CustomInitialize();
    public void CustomCleanup();
    public HRESULT CustomPrepareRequest();
    public HRESULT CustomContinueBuildRequest();
    public HRESULT CustomContinueProcessHttpHeaders();
    public void StorageUploadGetServerPath(wchar_t ** );
    public unsigned long StorageUploadGetSize();
    public HRESULT StorageUploadGetNextBlock(unsigned char ** ,unsigned long * );
    public HRESULT MsgBaseBuildSendSubTask(class CXLiveSubTask ** );
    public unsigned long long * GetSenderXuid();
    public void SetSenderXuid(unsigned long long * );
    public struct XMESSAGING_MSG * GetMessage();
    public void SetMessage(struct XMESSAGING_MSG * );
    public void MessagingBuildAttachmentPaths();
    public unsigned long MessagingGetDetailsSize();
    private unsigned char __align0[7712];// Offset=0x0 Size=0x1e20
    private unsigned long long m_xuidSender;// Offset=0x1e20 Size=0x8
    private struct XMESSAGING_MSG * m_pMessage;// Offset=0x1e28 Size=0x4
    private unsigned char * m_pbBuffer;// Offset=0x1e2c Size=0x4
    private unsigned long m_dwBufferSize;// Offset=0x1e30 Size=0x4
    private class CXLiveSubTask * m_pMsgSubTask;// Offset=0x1e34 Size=0x4
    private wchar_t m_wszCurrentStorageFileName[255];// Offset=0x1e38 Size=0x1fe
    public void ~CXMsgSendBase();
    public class CXMsgSendBase & operator=(class CXMsgSendBase & );
    public void * __vecDelDtor(unsigned int );
};

struct _STRING_WITH_HRESULT// Size=0x10 (Id=3027)
{
    unsigned long dwStringId;// Offset=0x0 Size=0x4
    HRESULT hr;// Offset=0x4 Size=0x4
    unsigned long cch;// Offset=0x8 Size=0x4
    wchar_t * pwsz;// Offset=0xc Size=0x4
};

struct _XNPGREYLISTADDRESSENTRY// Size=0x8 (Id=3028)
{
    struct in_addr GreyListAddr;// Offset=0x0 Size=0x4
    struct in_addr GreyListMask;// Offset=0x4 Size=0x4
};

struct XUIMessageGetSetVisualPrefix// Size=0x4 (Id=3029)
{
    wchar_t * szPrefix;// Offset=0x0 Size=0x4
};

struct _SET_ACCOUNT_INFO_REQUEST// Size=0x64 (Id=3030)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned long long qwMachineId;// Offset=0x8 Size=0x8
    unsigned short wFirstNameLength;// Offset=0x10 Size=0x2
    wchar_t * wszFirstName;// Offset=0x12 Size=0x4
    unsigned short wLastNameLength;// Offset=0x16 Size=0x2
    wchar_t * wszLastName;// Offset=0x18 Size=0x4
    struct _FILETIME ftBirthdate;// Offset=0x1c Size=0x8
    unsigned short wEmailLength;// Offset=0x24 Size=0x2
    wchar_t * wszEmail;// Offset=0x26 Size=0x4
    struct _ADDRESS_INFO address;// Offset=0x2a Size=0x24
    struct _PHONE_INFO phone;// Offset=0x4e Size=0x12
    unsigned short wLanguageId;// Offset=0x60 Size=0x2
    unsigned char bMsftOptIn;// Offset=0x62 Size=0x1
    unsigned char bParterOptIn;// Offset=0x63 Size=0x1
};

class CXLiveSubTask : public CXLiveAsyncTaskInternal// Size=0x1e70 (Id=3031)
{
    public unsigned long CustomGetObjectSize();
    public struct CXLiveAsyncTaskInternal::RECEIVERATELIMITDATA * CustomSelectReceiveRateLimitData();
    public class CXLiveAsyncTask * GetAsyncTask();
    public class CXLiveAsyncTaskInternal * GetAsyncTaskInternal();
    public void Finish();
    public class CXLiveAsyncTaskInternal * GetParentTask();
    public void SetParentTask(class CXLiveAsyncTaskInternal * );
    public class CLittleEndianBuffer * GetWireBuffer();
    private unsigned char __align0[7712];// Offset=0x0 Size=0x1e20
    private class CXLiveAsyncTask m_AsyncTask;// Offset=0x1e20 Size=0x4c
    private class CXLiveAsyncTaskInternal * m_pParentTask;// Offset=0x1e6c Size=0x4
    public void CXLiveSubTask(class CXLiveSubTask & );
    public void CXLiveSubTask();
    public void ~CXLiveSubTask();
    public class CXLiveSubTask & operator=(class CXLiveSubTask & );
    public void * __vecDelDtor(unsigned int );
};

class CXLiveSubTask : public CXLiveAsyncTaskInternal// Size=0x1e70 (Id=3032)
{
    public unsigned long CustomGetObjectSize();
    public struct CXLiveAsyncTaskInternal::RECEIVERATELIMITDATA * CustomSelectReceiveRateLimitData();
    public class CXLiveAsyncTask * GetAsyncTask();
    public class CXLiveAsyncTaskInternal * GetAsyncTaskInternal();
    public void Finish();
    public class CXLiveAsyncTaskInternal * GetParentTask();
    public void SetParentTask(class CXLiveAsyncTaskInternal * );
    public class CLittleEndianBuffer * GetWireBuffer();
    private unsigned char __align0[7712];// Offset=0x0 Size=0x1e20
    private class CXLiveAsyncTask m_AsyncTask;// Offset=0x1e20 Size=0x4c
    private class CXLiveAsyncTaskInternal * m_pParentTask;// Offset=0x1e6c Size=0x4
    public void CXLiveSubTask(class CXLiveSubTask & );
    public void CXLiveSubTask();
    public void ~CXLiveSubTask();
    public class CXLiveSubTask & operator=(class CXLiveSubTask & );
    public void * __vecDelDtor(unsigned int );
};

class CXStorageMiscWorker : public CXStorageTask// Size=0x1f10 (Id=3033)
{
    public void CXStorageMiscWorker(class CXStorageMiscWorker & );
    public void CXStorageMiscWorker();
    public HRESULT CustomInitialize();
    public void CustomCleanup();
    public unsigned long CustomGetObjectSize();
    union // Size=0x1e74 (Id=0)
    {
        unsigned char __align0[7792];// Offset=0x0 Size=0x1e70
        class CXLiveSubTask * m_pSubTask;// Offset=0x1e70 Size=0x4
        struct RESOLVE_NAME_RESPONSE_BUFFER// Size=0x98 (Id=32026)
        {
            struct _XRESOLVE_NAME_RESPONSE Response;// Offset=0x0 Size=0x1a
            wchar_t awcStringBuffer[63];// Offset=0x1a Size=0x7e
        };
        unsigned char __align1[7644];// Offset=0x98 Size=0x1ddc
    };
    private struct CXStorageMiscWorker::RESOLVE_NAME_RESPONSE_BUFFER m_ResolveNameResponseBuffer;// Offset=0x1e74 Size=0x98
    public void ~CXStorageMiscWorker();
    public class CXStorageMiscWorker & operator=(class CXStorageMiscWorker & );
    public void * __vecDelDtor(unsigned int );
};

class CXStorageMiscWorker : public CXStorageTask// Size=0x1f10 (Id=3034)
{
    public void CXStorageMiscWorker(class CXStorageMiscWorker & );
    public void CXStorageMiscWorker();
    public HRESULT CustomInitialize();
    public void CustomCleanup();
    public unsigned long CustomGetObjectSize();
    union // Size=0x1e74 (Id=0)
    {
        unsigned char __align0[7792];// Offset=0x0 Size=0x1e70
        class CXLiveSubTask * m_pSubTask;// Offset=0x1e70 Size=0x4
        struct RESOLVE_NAME_RESPONSE_BUFFER// Size=0x98 (Id=32026)
        {
            struct _XRESOLVE_NAME_RESPONSE Response;// Offset=0x0 Size=0x1a
            wchar_t awcStringBuffer[63];// Offset=0x1a Size=0x7e
        };
        unsigned char __align1[7644];// Offset=0x98 Size=0x1ddc
    };
    private struct CXStorageMiscWorker::RESOLVE_NAME_RESPONSE_BUFFER m_ResolveNameResponseBuffer;// Offset=0x1e74 Size=0x98
    public void ~CXStorageMiscWorker();
    public class CXStorageMiscWorker & operator=(class CXStorageMiscWorker & );
    public void * __vecDelDtor(unsigned int );
};

struct CXStorageMiscWorker::RESOLVE_NAME_RESPONSE_BUFFER// Size=0x98 (Id=3035)
{
    struct _XRESOLVE_NAME_RESPONSE Response;// Offset=0x0 Size=0x1a
    wchar_t awcStringBuffer[63];// Offset=0x1a Size=0x7e
};

struct _XONLINE_ATTRIBUTE_STRING// Size=0x6 (Id=3036)
{
    unsigned short Length;// Offset=0x0 Size=0x2
    wchar_t * lpValue;// Offset=0x2 Size=0x4
};

struct _XMSG_USER_INFO// Size=0x2d44 (Id=3037)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long fLoggedOn:1;// Offset=0x0 Size=0x4 BitOffset=0x1f BitSize=0x1
        unsigned long fInitialMessagelistBuildNeeded:1;// Offset=0x0 Size=0x4 BitOffset=0x1e BitSize=0x1
        unsigned long fFullEnumerationNeeded:1;// Offset=0x0 Size=0x4 BitOffset=0x1d BitSize=0x1
    };
    enum XMSG_OP_TYPE OpType;// Offset=0x4 Size=0x4
    struct _XOVERLAPPED xov;// Offset=0x8 Size=0x1c
    void * pvOpResults;// Offset=0x24 Size=0x4
    unsigned char cNewMessages;// Offset=0x28 Size=0x1
    unsigned char cDeletedMessages;// Offset=0x29 Size=0x1
    unsigned short cMessages;// Offset=0x2a Size=0x2
    unsigned long dwNewMessageSeqNum;// Offset=0x2c Size=0x4
    unsigned long dwDeletedMessageSeqNum;// Offset=0x30 Size=0x4
    unsigned long rgdwNewMessageIDs[3];// Offset=0x34 Size=0xc
    unsigned long rgdwNewMessageTypeAndFlags[3];// Offset=0x40 Size=0xc
    unsigned long rgdwDeletedMessageIDs[3];// Offset=0x4c Size=0xc
    struct _Q_MESSAGE_SUMMARY_2 Messagelist[125];// Offset=0x58 Size=0x2cec
};

struct _MARKETPLACE_COUNTS_USER_CACHE// Size=0x118 (Id=3038)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned long dwTitleId;// Offset=0x8 Size=0x4
    unsigned char __align0[4];// Offset=0xc Size=0x4
    unsigned long long ftLastServerCall;// Offset=0x10 Size=0x8
    unsigned long rgCachedNewOffers[32];// Offset=0x18 Size=0x80
    unsigned long rgCachedTotalOffers[32];// Offset=0x98 Size=0x80
};

struct URL_COMPONENTS// Size=0x3c (Id=3039)
{
    unsigned long dwStructSize;// Offset=0x0 Size=0x4
    wchar_t * lpszScheme;// Offset=0x4 Size=0x4
    unsigned long dwSchemeLength;// Offset=0x8 Size=0x4
    int nScheme;// Offset=0xc Size=0x4
    wchar_t * lpszHostName;// Offset=0x10 Size=0x4
    unsigned long dwHostNameLength;// Offset=0x14 Size=0x4
    unsigned short nPort;// Offset=0x18 Size=0x2
    unsigned char __align0[2];// Offset=0x1a Size=0x2
    wchar_t * lpszUserName;// Offset=0x1c Size=0x4
    unsigned long dwUserNameLength;// Offset=0x20 Size=0x4
    wchar_t * lpszPassword;// Offset=0x24 Size=0x4
    unsigned long dwPasswordLength;// Offset=0x28 Size=0x4
    wchar_t * lpszUrlPath;// Offset=0x2c Size=0x4
    unsigned long dwUrlPathLength;// Offset=0x30 Size=0x4
    wchar_t * lpszExtraInfo;// Offset=0x34 Size=0x4
    unsigned long dwExtraInfoLength;// Offset=0x38 Size=0x4
};

struct XUIMessageGetLineIndex// Size=0x8 (Id=3040)
{
    unsigned int nLine;// Offset=0x0 Size=0x4
    unsigned int nIndex;// Offset=0x4 Size=0x4
};

struct TypefaceDescriptor// Size=0x14 (Id=3041)
{
    wchar_t * szTypeface;// Offset=0x0 Size=0x4
    wchar_t * szLocator;// Offset=0x4 Size=0x4
    wchar_t * szReserved1;// Offset=0x8 Size=0x4
    float fBaselineAdjust;// Offset=0xc Size=0x4
    wchar_t * szFallbackTypeface;// Offset=0x10 Size=0x4
};

struct XUICacheSceneAsync// Size=0x8 (Id=3042)
{
    wchar_t * pszFullPath;// Offset=0x0 Size=0x4
    int nCacheLevels;// Offset=0x4 Size=0x4
};

class CXuiListImpl : public CXuiElementImplBase, public CXuiList// Size=0x8 (Id=3043)
{
    public void CXuiListImpl(class CXuiListImpl & );
    public void CXuiListImpl();
    public class CXuiListImpl & operator=(class CXuiListImpl & );
};

class CXuiListImpl : public CXuiElementImplBase, public CXuiList// Size=0x8 (Id=3044)
{
    public void CXuiListImpl(class CXuiListImpl & );
    public void CXuiListImpl();
    public class CXuiListImpl & operator=(class CXuiListImpl & );
};

struct XUIMessageInit// Size=0x4 (Id=3045)
{
    void * pvInitData;// Offset=0x0 Size=0x4
};

struct _XMSG_INVITE_SEND_PARAMS// Size=0x18 (Id=3046)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long dwNumInvitees;// Offset=0x4 Size=0x4
    unsigned long long * pXuidInvitees;// Offset=0x8 Size=0x4
    unsigned long cchText;// Offset=0xc Size=0x4
    wchar_t * pszText;// Offset=0x10 Size=0x4
    void * hMsg;// Offset=0x14 Size=0x4
};

class CXLiveMuteList// Size=0x3f90 (Id=3047)
{
    public void CXLiveMuteList();
    public void SetParent(class CXLiveFriends * );
    public void Lock();
    public void Unlock();
    public unsigned long AddMuteListUser(unsigned long ,unsigned long long );
    private void RemoveMuteListUser(struct _XONLINE_MUTELIST_INTERNAL * ,unsigned short );
    public unsigned long RemoveMuteListUser(unsigned long ,unsigned long long );
    public unsigned long QueryMuteListUser(unsigned long ,unsigned long long ,int * );
    public unsigned long GetVersion(unsigned long );
    public void ResetList(struct _XONLINE_MUTELIST_INTERNAL * );
    public HRESULT RebuildMuteList(unsigned long ,unsigned short ,unsigned long ,struct _P_REPLY_BLOCK * );
    public unsigned short OnUpdateCache(unsigned long ,struct _P_REPLY_BLOCK * );
    public void DoWork();
    public void CancelTasksAtLogoff();
    public int AreAnyTasksActive();
    public HRESULT ProcessChangeSigninUsers(unsigned long * ,unsigned long long * );
    public int AreAnyRemovedUserTasksActive();
    private int FindMuteListUser(struct _XONLINE_MUTELIST_INTERNAL * ,unsigned long long ,unsigned short * );
    private void InsertMuteListUser(struct _XONLINE_MUTELIST_INTERNAL * ,unsigned short ,unsigned long long ,int );
    private void AddToPendingQueue(struct _XONLINE_MUTELIST_INTERNAL * ,unsigned short ,int );
    private void RemoveFromPendingQueue(struct _XONLINE_MUTELIST_INTERNAL * ,unsigned short );
    private void RecycleAgeValue(struct _XONLINE_MUTELIST_INTERNAL * ,unsigned short );
    private void RemoveOldestUser(struct _XONLINE_MUTELIST_INTERNAL * );
    private struct _XONLINE_MUTELIST_INTERNAL m_MuteListBuffers[4];// Offset=0x0 Size=0x3f60
    private struct _XONLINE_MUTELIST_INTERNAL * m_MuteLists[4];// Offset=0x3f60 Size=0x10
    private struct _RTL_CRITICAL_SECTION m_csLock;// Offset=0x3f70 Size=0x1c
    private class CXLiveFriends * m_pFriends;// Offset=0x3f8c Size=0x4
};

struct _XUIRESOURCE// Size=0x0 (Id=3048)
{
};

struct _XMSG_PROPERTY_STRING// Size=0x8 (Id=3049)
{
    unsigned short cbString;// Offset=0x0 Size=0x2
    unsigned char __align0[2];// Offset=0x2 Size=0x2
    wchar_t * szString;// Offset=0x4 Size=0x4
};

class CArgumentList// Size=0x208 (Id=3050)
{
    public void CArgumentList();
    public void Reset();
    public unsigned long GetCount();
    union // Size=0x30 (Id=0)
    {
        unsigned long AddArgument(void * );// Offset=0x0 Size=0x30
        class CArgument * GetArgument(unsigned long );
        class CArgument m_rgArguments[32];// Offset=0x0 Size=0x200
    };
    protected unsigned long m_Arguments;// Offset=0x200 Size=0x4
};

struct SCHEMA_UNION_INFO// Size=0x2 (Id=3051)
{
    struct // Size=0x1 (Id=0)
    {
        unsigned char SelectorIndex:6;// Offset=0x0 Size=0x1 BitOffset=0x0 BitSize=0x6
        unsigned char SwitchIsMasked:1;// Offset=0x0 Size=0x1 BitOffset=0x6 BitSize=0x1
        unsigned char FailOnDefault:1;// Offset=0x0 Size=0x1 BitOffset=0x7 BitSize=0x1
    };
    unsigned char NumSwitchArms;// Offset=0x1 Size=0x1
};

struct XUINotifyPress// Size=0x1 (Id=3052)
{
    unsigned char UserIndex;// Offset=0x0 Size=0x1
};

struct _PASSPORT_SECRET_QUESTION// Size=0x6 (Id=3053)
{
    unsigned short wSecretQuestionLength;// Offset=0x0 Size=0x2
    wchar_t * szSecretQuestion;// Offset=0x2 Size=0x4
};

struct _OFFER_PRICE// Size=0x13 (Id=3054)
{
    unsigned long dwPaymentType;// Offset=0x0 Size=0x4
    unsigned char bTaxType;// Offset=0x4 Size=0x1
    unsigned long dwWholePrice;// Offset=0x5 Size=0x4
    unsigned long dwFractionalPrice;// Offset=0x9 Size=0x4
    unsigned short wPriceTextLength;// Offset=0xd Size=0x2
    wchar_t * wszPriceText;// Offset=0xf Size=0x4
};

class CXMessageSend : public CXMsgSendBase// Size=0x2360 (Id=3055)
{
    public void CXMessageSend(class CXMessageSend & );
    public void CXMessageSend();
    public HRESULT CustomInitialize();
    public void CustomCleanup();
    public unsigned long CustomGetObjectSize();
    public HRESULT MsgBaseBuildSendSubTask(class CXLiveSubTask ** );
    private unsigned char __align0[8248];// Offset=0x0 Size=0x2038
    private unsigned long long m_aqwPuidRecipients[100];// Offset=0x2038 Size=0x320
    private unsigned long m_dwNumRecipients;// Offset=0x2358 Size=0x4
    public void ~CXMessageSend();
    public class CXMessageSend & operator=(class CXMessageSend & );
    public void * __vecDelDtor(unsigned int );
};

class CXMessageSend : public CXMsgSendBase// Size=0x2360 (Id=3056)
{
    public void CXMessageSend(class CXMessageSend & );
    public void CXMessageSend();
    public HRESULT CustomInitialize();
    public void CustomCleanup();
    public unsigned long CustomGetObjectSize();
    public HRESULT MsgBaseBuildSendSubTask(class CXLiveSubTask ** );
    private unsigned char __align0[8248];// Offset=0x0 Size=0x2038
    private unsigned long long m_aqwPuidRecipients[100];// Offset=0x2038 Size=0x320
    private unsigned long m_dwNumRecipients;// Offset=0x2358 Size=0x4
    public void ~CXMessageSend();
    public class CXMessageSend & operator=(class CXMessageSend & );
    public void * __vecDelDtor(unsigned int );
};

struct _XUISHAPE// Size=0x0 (Id=3057)
{
};

struct _XONLINE_USER_TEAM// Size=0x12 (Id=3058)
{
    unsigned long long qwTeamID;// Offset=0x0 Size=0x8
    int fMember;// Offset=0x8 Size=0x4
    unsigned short cbTeamName;// Offset=0xc Size=0x2
    wchar_t * wszTeamName;// Offset=0xe Size=0x4
};

struct _XNQOSPROFILE// Size=0x24 (Id=3059)
{
    unsigned short wFlags;// Offset=0x0 Size=0x2
    unsigned char abEnetGateway[6];// Offset=0x2 Size=0x6
    union _LARGE_INTEGER liLastEntryTimestamp;// Offset=0x8 Size=0x8
    struct in_addr ina;// Offset=0x10 Size=0x4
    struct in_addr inaMask;// Offset=0x14 Size=0x4
    struct in_addr inaGateway;// Offset=0x18 Size=0x4
    struct in_addr inaPublic;// Offset=0x1c Size=0x4
    unsigned short wLocalPort;// Offset=0x20 Size=0x2
    unsigned short wPublicPort;// Offset=0x22 Size=0x2
};

struct XUIMessageDiscardResources// Size=0x4 (Id=3060)
{
    unsigned long dwFlags;// Offset=0x0 Size=0x4
};

struct _RECOVER_ACCOUNT_RESPONSE// Size=0x32 (Id=3061)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned long long qwOfflineXuid;// Offset=0x8 Size=0x8
    unsigned char pKey[16];// Offset=0x10 Size=0x10
    unsigned short wGamertagLength;// Offset=0x20 Size=0x2
    wchar_t * wszGamertag;// Offset=0x22 Size=0x4
    unsigned short wDomainLength;// Offset=0x26 Size=0x2
    wchar_t * wszDomain;// Offset=0x28 Size=0x4
    unsigned short wRealmLength;// Offset=0x2c Size=0x2
    wchar_t * wszRealm;// Offset=0x2e Size=0x4
};

struct XUIHtmlScrollInfo// Size=0x14 (Id=3062)
{
    int bScrolling;// Offset=0x0 Size=0x4
    int nPos;// Offset=0x4 Size=0x4
    int nTarget;// Offset=0x8 Size=0x4
    int nStep;// Offset=0xc Size=0x4
    int nMax;// Offset=0x10 Size=0x4
};

struct _XPROFILE_ACHIEVEMENT_SYNC_REQUEST// Size=0x36 (Id=3063)
{
    unsigned long dwAchievementId;// Offset=0x0 Size=0x4
    struct _FILETIME ftAchieved;// Offset=0x4 Size=0x8
    unsigned long dwSequence;// Offset=0xc Size=0x4
    unsigned long dwFlags;// Offset=0x10 Size=0x4
    unsigned char bType;// Offset=0x14 Size=0x1
    unsigned long dwCred;// Offset=0x15 Size=0x4
    unsigned long dwImageId;// Offset=0x19 Size=0x4
    unsigned char cbTitleLen;// Offset=0x1d Size=0x1
    wchar_t * pszTitle;// Offset=0x1e Size=0x4
    unsigned char cbDescriptionLen;// Offset=0x22 Size=0x1
    wchar_t * pszDescription;// Offset=0x23 Size=0x4
    unsigned char cbHowToLen;// Offset=0x27 Size=0x1
    wchar_t * pszHowTo;// Offset=0x28 Size=0x4
    unsigned char bNextIdsLen;// Offset=0x2c Size=0x1
    unsigned long * pdwNextIds;// Offset=0x2d Size=0x4
    unsigned char bReplaceIdsLen;// Offset=0x31 Size=0x1
    unsigned long * pdwReplaceIds;// Offset=0x32 Size=0x4
};

struct _XNPLISTCHANGES// Size=0x10 (Id=3064)
{
    unsigned long dwActiveSocketChangeNum;// Offset=0x0 Size=0x4
    unsigned long dwSecAssocChangeNum;// Offset=0x4 Size=0x4
    unsigned long dwKeyChangeNum;// Offset=0x8 Size=0x4
    unsigned long dwQosLookupChangeNum;// Offset=0xc Size=0x4
};

class CXuiComboBox : public CXuiControl// Size=0x4 (Id=3065)
{
    public void CXuiComboBox(struct _XUIOBJ * );
    public void CXuiComboBox();
    public struct _XUIOBJ * GetListObject();
    public struct _XUIOBJ * GetValueObject();
    public void Attach(struct _XUIOBJ * );
};

struct XUIMessageInsDelItems// Size=0x8 (Id=3066)
{
    int iAtItem;// Offset=0x0 Size=0x4
    int cItems;// Offset=0x4 Size=0x4
};

struct _CREDIT_CARD_INFO// Size=0x1b (Id=3067)
{
    unsigned char bCardTypeId;// Offset=0x0 Size=0x1
    unsigned short wAccountHolderNameLength;// Offset=0x1 Size=0x2
    wchar_t * wszAccountHolderName;// Offset=0x3 Size=0x4
    unsigned short wAccountNumberLength;// Offset=0x7 Size=0x2
    wchar_t * wszAccountNumber;// Offset=0x9 Size=0x4
    unsigned short wCCVNumberLength;// Offset=0xd Size=0x2
    wchar_t * wszCCVNumber;// Offset=0xf Size=0x4
    struct _FILETIME ftExpirationDate;// Offset=0x13 Size=0x8
};

struct _XONLINE_CACHE_CFFILE// Size=0x114 (Id=3068)
{
    struct CFFILE cffile;// Offset=0x0 Size=0x10
    char szFileName[260];// Offset=0x10 Size=0x104
};

struct _PASSPORT_GET_BUDDY_GAMERTAG_RESPONSE// Size=0xe (Id=3069)
{
    unsigned long long qwBuddyUserId;// Offset=0x0 Size=0x8
    unsigned short wBuddyGamertagLength;// Offset=0x8 Size=0x2
    wchar_t * wszBuddyGamertag;// Offset=0xa Size=0x4
};

struct _GET_LINKED_GAMERTAG_RESPONSE// Size=0xe (Id=3070)
{
    unsigned long long qwUserPuid;// Offset=0x0 Size=0x8
    unsigned short wGamertagLength;// Offset=0x8 Size=0x2
    wchar_t * wszGamertag;// Offset=0xa Size=0x4
};

struct _XPROFILE_ACHIEVEMENT// Size=0x36 (Id=3071)
{
    unsigned long dwAchievementId;// Offset=0x0 Size=0x4
    struct _FILETIME ftAchieved;// Offset=0x4 Size=0x8
    unsigned long dwSequence;// Offset=0xc Size=0x4
    unsigned long dwFlags;// Offset=0x10 Size=0x4
    unsigned char bType;// Offset=0x14 Size=0x1
    unsigned long dwCred;// Offset=0x15 Size=0x4
    unsigned long dwImageId;// Offset=0x19 Size=0x4
    unsigned char cbTitleLen;// Offset=0x1d Size=0x1
    wchar_t * pszTitle;// Offset=0x1e Size=0x4
    unsigned char cbDescriptionLen;// Offset=0x22 Size=0x1
    wchar_t * pszDescription;// Offset=0x23 Size=0x4
    unsigned char cbHowToLen;// Offset=0x27 Size=0x1
    wchar_t * pszHowTo;// Offset=0x28 Size=0x4
    unsigned char bNextIdsLen;// Offset=0x2c Size=0x1
    unsigned long * pdwNextIds;// Offset=0x2d Size=0x4
    unsigned char bReplaceIdsLen;// Offset=0x31 Size=0x1
    unsigned long * pdwReplaceIds;// Offset=0x32 Size=0x4
};

struct _XMARKETPLACE_PROPNODE// Size=0x14 (Id=3072)
{
    wchar_t * pszName;// Offset=0x0 Size=0x4
    unsigned short wPropType;// Offset=0x4 Size=0x2
    unsigned char __align0[2];// Offset=0x6 Size=0x2
    struct _XMARKETPLACE_PROPNODE * pNext;// Offset=0x8 Size=0x4
    struct _XMARKETPLACE_PROPNODE * pChild;// Offset=0xc Size=0x4
    struct _XMARKETPLACE_PROPNODE * pParent;// Offset=0x10 Size=0x4
};

struct XUIMessageNavForward// Size=0x4 (Id=3073)
{
    struct _XUIOBJ * hScene;// Offset=0x0 Size=0x4
};

struct _XONLINE_QUERY_ATTRIBUTE_STRING// Size=0x8 (Id=3074)
{
    unsigned long Length;// Offset=0x0 Size=0x4
    wchar_t * lpValue;// Offset=0x4 Size=0x4
};

struct XUIMessageChildAdded// Size=0x4 (Id=3075)
{
    struct _XUIOBJ * hChild;// Offset=0x0 Size=0x4
};

struct XUIMessageItemCheck// Size=0x8 (Id=3076)
{
    int iItem;// Offset=0x0 Size=0x4
    int bChecked;// Offset=0x4 Size=0x4
};

class CCritSect// Size=0x1c (Id=3077)
{
    public void CCritSect();
    public void ~CCritSect();
    public void Enter();
    public void Leave();
    public int TryEnter();
    public int IsOwned();
    public int HasOwner();
    private struct _RTL_CRITICAL_SECTION m_cs;// Offset=0x0 Size=0x1c
    public void * __vecDelDtor(unsigned int );
};

class CCritSect// Size=0x1c (Id=3078)
{
    public void CCritSect();
    public void ~CCritSect();
    public void Enter();
    public void Leave();
    public int TryEnter();
    public int IsOwned();
    public int HasOwner();
    private struct _RTL_CRITICAL_SECTION m_cs;// Offset=0x0 Size=0x1c
    public void * __vecDelDtor(unsigned int );
};

class CNativeEndianBuffer : public CBaseEndianBuffer// Size=0x14 (Id=3079)
{
    public void CNativeEndianBuffer();
    public void ~CNativeEndianBuffer();
    public void Bind(unsigned char * ,unsigned long ,unsigned long );
    public void * __vecDelDtor(unsigned int );
};

struct XINVITE_INFO_INTERNAL : public _XINVITE_INFO// Size=0x60 (Id=3080)
{
    unsigned char __align0[84];// Offset=0x0 Size=0x54
    struct _FILETIME ftAccepted;// Offset=0x54 Size=0x8
    int fReadByTitle;// Offset=0x5c Size=0x4
};

struct XNetCapFrame// Size=0x8 (Id=3081)
{
    unsigned int cbSize;// Offset=0x0 Size=0x4
    unsigned long dwTick;// Offset=0x4 Size=0x4
};

struct XUIMessageWantFocus// Size=0x4 (Id=3082)
{
    int bWantFocus;// Offset=0x0 Size=0x4
};

class CXFriendsRequest : public CXMsgSendBase// Size=0x2058 (Id=3083)
{
    public void CXFriendsRequest(class CXFriendsRequest & );
    public void CXFriendsRequest();
    public HRESULT CustomInitialize();
    public void CustomCleanup();
    public unsigned long CustomGetObjectSize();
    public HRESULT MsgBaseBuildSendSubTask(class CXLiveSubTask ** );
    private unsigned char __align0[8248];// Offset=0x0 Size=0x2038
    private void * m_hMsgCreated;// Offset=0x2038 Size=0x4
    private unsigned char __align1[4];// Offset=0x203c Size=0x4
    private unsigned long long m_qwBuddyID;// Offset=0x2040 Size=0x8
    private char m_szUserName[16];// Offset=0x2048 Size=0x10
    public void ~CXFriendsRequest();
    public class CXFriendsRequest & operator=(class CXFriendsRequest & );
    public void * __vecDelDtor(unsigned int );
};

class CXFriendsRequest : public CXMsgSendBase// Size=0x2058 (Id=3084)
{
    public void CXFriendsRequest(class CXFriendsRequest & );
    public void CXFriendsRequest();
    public HRESULT CustomInitialize();
    public void CustomCleanup();
    public unsigned long CustomGetObjectSize();
    public HRESULT MsgBaseBuildSendSubTask(class CXLiveSubTask ** );
    private unsigned char __align0[8248];// Offset=0x0 Size=0x2038
    private void * m_hMsgCreated;// Offset=0x2038 Size=0x4
    private unsigned char __align1[4];// Offset=0x203c Size=0x4
    private unsigned long long m_qwBuddyID;// Offset=0x2040 Size=0x8
    private char m_szUserName[16];// Offset=0x2048 Size=0x10
    public void ~CXFriendsRequest();
    public class CXFriendsRequest & operator=(class CXFriendsRequest & );
    public void * __vecDelDtor(unsigned int );
};

struct XUIMessageGetBounds// Size=0x8 (Id=3085)
{
    float fWidth;// Offset=0x0 Size=0x4
    float fHeight;// Offset=0x4 Size=0x4
};

struct _POSTAL_CODE_MATCH// Size=0x18 (Id=3086)
{
    unsigned short wPostalCodeLength;// Offset=0x0 Size=0x2
    wchar_t * wszPostalCode;// Offset=0x2 Size=0x4
    unsigned short wStateLength;// Offset=0x6 Size=0x2
    wchar_t * wszState;// Offset=0x8 Size=0x4
    unsigned short wCityLength;// Offset=0xc Size=0x2
    wchar_t * wszCity;// Offset=0xe Size=0x4
    unsigned short wStreetLength;// Offset=0x12 Size=0x2
    wchar_t * wszStreet;// Offset=0x14 Size=0x4
};

struct _XOKERBINFO// Size=0x0 (Id=3087)
{
};

struct _XOTSKERBINFO// Size=0x0 (Id=3088)
{
};

struct IXoCallback// Size=0x4 (Id=3089)
{
    int XoKerbBuildApReq(unsigned long ,union _LARGE_INTEGER * ,unsigned char * ,unsigned int ,unsigned char * ,unsigned int * );
    int XoKerbCrackApRep(unsigned long ,union _LARGE_INTEGER * ,unsigned int ,unsigned char * ,unsigned int ,unsigned char * ,unsigned int );
    struct _XOKERBINFO * XoKerbGetInfo(unsigned long );
    unsigned long XoGetServiceIpa(unsigned long );
    int XoKerbCrackApReq(unsigned char * ,unsigned int ,unsigned char * ,union _LARGE_INTEGER * ,unsigned long * ,struct _XOTSKERBINFO * );
    int XoKerbBuildApRep(unsigned char * ,union _LARGE_INTEGER ,unsigned long ,struct _XOTSKERBINFO * ,unsigned char * ,unsigned int * );
    void IXoCallback(struct IXoCallback & );
    void IXoCallback();
    struct IXoCallback & operator=(struct IXoCallback & );
};

struct IXoCallback// Size=0x4 (Id=3090)
{
    int XoKerbBuildApReq(unsigned long ,union _LARGE_INTEGER * ,unsigned char * ,unsigned int ,unsigned char * ,unsigned int * );
    int XoKerbCrackApRep(unsigned long ,union _LARGE_INTEGER * ,unsigned int ,unsigned char * ,unsigned int ,unsigned char * ,unsigned int );
    struct _XOKERBINFO * XoKerbGetInfo(unsigned long );
    unsigned long XoGetServiceIpa(unsigned long );
    int XoKerbCrackApReq(unsigned char * ,unsigned int ,unsigned char * ,union _LARGE_INTEGER * ,unsigned long * ,struct _XOTSKERBINFO * );
    int XoKerbBuildApRep(unsigned char * ,union _LARGE_INTEGER ,unsigned long ,struct _XOTSKERBINFO * ,unsigned char * ,unsigned int * );
    void IXoCallback(struct IXoCallback & );
    void IXoCallback();
    struct IXoCallback & operator=(struct IXoCallback & );
};

struct SCHEMA_ARGUMENT_INFO// Size=0x1 (Id=3091)
{
    struct // Size=0x1 (Id=0)
    {
        unsigned char ArgumentIndex:5;// Offset=0x0 Size=0x1 BitOffset=0x0 BitSize=0x5
        unsigned char NoEmit:1;// Offset=0x0 Size=0x1 BitOffset=0x5 BitSize=0x1
        unsigned char Reserved:2;// Offset=0x0 Size=0x1 BitOffset=0x6 BitSize=0x2
    };
};

struct _XSTORAGE_DOWNLOAD_TO_DIRECTORY_PARAMS_INTERNAL// Size=0x1c (Id=3092)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long dwServerPathLength;// Offset=0x4 Size=0x4
    wchar_t * wszServerPath;// Offset=0x8 Size=0x4
    unsigned long dwDisplayNameLength;// Offset=0xc Size=0x4
    wchar_t * wszDisplayName;// Offset=0x10 Size=0x4
    unsigned long DeviceID;// Offset=0x14 Size=0x4
    struct _XSTORAGE_DOWNLOAD_TO_DIRECTORY_RESULTS_INTERNAL * pResults;// Offset=0x18 Size=0x4
};

struct _XUITEX// Size=0x0 (Id=3093)
{
};

struct _XSHOWSTOREPICKERUI_PARAMS : public _HUD_PARAMS// Size=0xc (Id=3094)
{
    unsigned char __align0[8];// Offset=0x0 Size=0x8
    unsigned long dwTabToFocus;// Offset=0x8 Size=0x4
};

class CConformanceList// Size=0x400 (Id=3095)
{
    public void CConformanceList();
    public void Reset();
    union // Size=0x10c (Id=0)
    {
        HRESULT EstablishConformanceInfo(unsigned long ,unsigned long ,unsigned long long ,unsigned long ,struct SCHEMA_CONFORMANCE_INFO * ,unsigned char * );// Offset=0x0 Size=0x7c
        HRESULT AcquireConformanceInfo(unsigned long ,class CConformanceInfo ** );// Offset=0x0 Size=0x50
        HRESULT ReleaseConformanceInfo(unsigned long );// Offset=0x0 Size=0x5c
        HRESULT GetConformingScopeAndValue(struct SCHEMA_DESCRIPTOR ,class CSchemaAccess * ,struct SCHEMA_CONFORMING_INFO * ,unsigned long * );// Offset=0x0 Size=0x10c
        HRESULT UpdateConformance(unsigned long ,unsigned long long ,int );// Offset=0x0 Size=0xf0
        class CConformanceInfo * GetConformanceInfo(unsigned long );
        class CConformanceInfo m_rgConformanceInfo[64];// Offset=0x0 Size=0x400
    };
};

struct _XONLINE_PRESENCE_INTERNAL// Size=0xa4 (Id=3096)
{
    unsigned short wUserId;// Offset=0x0 Size=0x2
    unsigned long long xuid;// Offset=0x2 Size=0x8
    unsigned long dwState;// Offset=0xa Size=0x4
    struct XNKID sessionID;// Offset=0xe Size=0x8
    unsigned long dwTitleID;// Offset=0x16 Size=0x4
    struct _FILETIME ftUserTime;// Offset=0x1a Size=0x8
    unsigned short cchRichPresence;// Offset=0x22 Size=0x2
    wchar_t wszRichPresence[64];// Offset=0x24 Size=0x80
};

class CXUpdateDownload : public CContentAndUpdateBase// Size=0x35928 (Id=3097)
{
    public void CXUpdateDownload(class CXUpdateDownload & );
    public void CXUpdateDownload();
    public HRESULT CustomInitialize();
    public void CustomCleanup();
    public unsigned long CustomGetObjectSize();
    public HRESULT CustomPrepareRequest();
    public HRESULT CustomContinueBuildRequest();
    public HRESULT CustomContinueResponseData();
    public HRESULT ContentAndUpdateOpenInProgressPackage();
    public HRESULT ContentAndUpdateCreateInstallerPackage();
    public HRESULT ContentAndUpdateHandleResponseDataComplete();
    union // Size=0x1518 (Id=0)
    {
        struct REFERRAL_RESPONSE_BUFFER// Size=0x1518 (Id=32499)
        {
            struct _XUPDATE_REFERRAL_RESPONSE Response;// Offset=0x0 Size=0x140
            struct _XREFERRAL_LOCATION ReferralLocationsBuffer[10];// Offset=0x140 Size=0x50
            char acUrlsBuffer[5000];// Offset=0x190 Size=0x1388
        };
        struct REFRESH_LICENSE_RESPONSE_BUFFER// Size=0x806 (Id=32505)
        {
            struct _XCONTENT_REFRESH_LICENSE_RESPONSE Response;// Offset=0x0 Size=0x6
            unsigned char abContentHeaderBuffer[2048];// Offset=0x6 Size=0x800
        };
        unsigned char __align0[173522];// Offset=0x806 Size=0x2a5d2
    };
    private struct CXUpdateDownload::REFERRAL_RESPONSE_BUFFER m_ReferralResponseBuffer;// Offset=0x2add8 Size=0x1518
    union // Size=0x806 (Id=0)
    {
        struct CXUpdateDownload::REFRESH_LICENSE_RESPONSE_BUFFER m_RefreshLicenseResponseBuffer;// Offset=0x2c2f0 Size=0x806
        struct _XCONTENT_METADATA m_ContentMetaData;// Offset=0x2c2f0 Size=0x93d6
    };
    private unsigned char __align1[2];// Offset=0x356c6 Size=0x2
    private unsigned long m_dwTitleId;// Offset=0x356c8 Size=0x4
    private unsigned long m_dwVersion;// Offset=0x356cc Size=0x4
    private class CXLiveSubTask * m_pSubTask;// Offset=0x356d0 Size=0x4
    private unsigned char __align2[4];// Offset=0x356d4 Size=0x4
    private struct _XAM_CACHE_OPEN_FILE m_CacheOpenFile;// Offset=0x356d8 Size=0x248
    private struct _XCONTENT_HEADER * m_pContentHeader;// Offset=0x35920 Size=0x4
    public void ~CXUpdateDownload();
    public class CXUpdateDownload & operator=(class CXUpdateDownload & );
    public void * __vecDelDtor(unsigned int );
};

class CXUpdateDownload : public CContentAndUpdateBase// Size=0x35928 (Id=3098)
{
    public void CXUpdateDownload(class CXUpdateDownload & );
    public void CXUpdateDownload();
    public HRESULT CustomInitialize();
    public void CustomCleanup();
    public unsigned long CustomGetObjectSize();
    public HRESULT CustomPrepareRequest();
    public HRESULT CustomContinueBuildRequest();
    public HRESULT CustomContinueResponseData();
    public HRESULT ContentAndUpdateOpenInProgressPackage();
    public HRESULT ContentAndUpdateCreateInstallerPackage();
    public HRESULT ContentAndUpdateHandleResponseDataComplete();
    union // Size=0x1518 (Id=0)
    {
        struct REFERRAL_RESPONSE_BUFFER// Size=0x1518 (Id=32499)
        {
            struct _XUPDATE_REFERRAL_RESPONSE Response;// Offset=0x0 Size=0x140
            struct _XREFERRAL_LOCATION ReferralLocationsBuffer[10];// Offset=0x140 Size=0x50
            char acUrlsBuffer[5000];// Offset=0x190 Size=0x1388
        };
        struct REFRESH_LICENSE_RESPONSE_BUFFER// Size=0x806 (Id=32505)
        {
            struct _XCONTENT_REFRESH_LICENSE_RESPONSE Response;// Offset=0x0 Size=0x6
            unsigned char abContentHeaderBuffer[2048];// Offset=0x6 Size=0x800
        };
        unsigned char __align0[173522];// Offset=0x806 Size=0x2a5d2
    };
    private struct CXUpdateDownload::REFERRAL_RESPONSE_BUFFER m_ReferralResponseBuffer;// Offset=0x2add8 Size=0x1518
    union // Size=0x806 (Id=0)
    {
        struct CXUpdateDownload::REFRESH_LICENSE_RESPONSE_BUFFER m_RefreshLicenseResponseBuffer;// Offset=0x2c2f0 Size=0x806
        struct _XCONTENT_METADATA m_ContentMetaData;// Offset=0x2c2f0 Size=0x93d6
    };
    private unsigned char __align1[2];// Offset=0x356c6 Size=0x2
    private unsigned long m_dwTitleId;// Offset=0x356c8 Size=0x4
    private unsigned long m_dwVersion;// Offset=0x356cc Size=0x4
    private class CXLiveSubTask * m_pSubTask;// Offset=0x356d0 Size=0x4
    private unsigned char __align2[4];// Offset=0x356d4 Size=0x4
    private struct _XAM_CACHE_OPEN_FILE m_CacheOpenFile;// Offset=0x356d8 Size=0x248
    private struct _XCONTENT_HEADER * m_pContentHeader;// Offset=0x35920 Size=0x4
    public void ~CXUpdateDownload();
    public class CXUpdateDownload & operator=(class CXUpdateDownload & );
    public void * __vecDelDtor(unsigned int );
};

struct CXUpdateDownload::REFRESH_LICENSE_RESPONSE_BUFFER// Size=0x806 (Id=3099)
{
    struct _XCONTENT_REFRESH_LICENSE_RESPONSE Response;// Offset=0x0 Size=0x6
    unsigned char abContentHeaderBuffer[2048];// Offset=0x6 Size=0x800
};

struct CXUpdateDownload::REFERRAL_RESPONSE_BUFFER// Size=0x1518 (Id=3100)
{
    struct _XUPDATE_REFERRAL_RESPONSE Response;// Offset=0x0 Size=0x140
    struct _XREFERRAL_LOCATION ReferralLocationsBuffer[10];// Offset=0x140 Size=0x50
    char acUrlsBuffer[5000];// Offset=0x190 Size=0x1388
};

struct _MIGRATE_XBOX_COM_USER_REQUEST// Size=0xc7 (Id=3101)
{
    struct _PASSPORT_SESSION_TOKEN pUserSessionToken[1];// Offset=0x0 Size=0x1c
    unsigned long long qwOfflineXuid;// Offset=0x1c Size=0x8
    unsigned long dwTitleId;// Offset=0x24 Size=0x4
    unsigned long long qwMachineId;// Offset=0x28 Size=0x8
    unsigned char bCountryId;// Offset=0x30 Size=0x1
    unsigned short wLanguageId;// Offset=0x31 Size=0x2
    unsigned long long qwOfferId;// Offset=0x33 Size=0x8
    unsigned short wBillingTokenLength;// Offset=0x3b Size=0x2
    wchar_t * wszBillingToken;// Offset=0x3d Size=0x4
    unsigned short wFirstNameLength;// Offset=0x41 Size=0x2
    wchar_t * wszFirstName;// Offset=0x43 Size=0x4
    unsigned short wLastNameLength;// Offset=0x47 Size=0x2
    wchar_t * wszLastName;// Offset=0x49 Size=0x4
    unsigned short wEmailLength;// Offset=0x4d Size=0x2
    wchar_t * wszEmail;// Offset=0x4f Size=0x4
    struct _ADDRESS_INFO address;// Offset=0x53 Size=0x24
    struct _PHONE_INFO phone;// Offset=0x77 Size=0x12
    unsigned char bPaymentTypeId;// Offset=0x89 Size=0x1
    struct _CREDIT_CARD_INFO creditCard;// Offset=0x8a Size=0x1b
    struct _DIRECT_DEBIT_INFO directDebit;// Offset=0xa5 Size=0x1e
    struct _MIGRATE_XBOX_COM_USER_RESPONSE * pResponse;// Offset=0xc3 Size=0x4
};

struct XNOTIFICATION_DEQUEUE// Size=0x64 (Id=3102)
{
    int fInProgress;// Offset=0x0 Size=0x4
    HRESULT hr;// Offset=0x4 Size=0x4
    enum XNOTIFICATION_DEQUEUE_STATE DequeueState;// Offset=0x8 Size=0x4
    struct _Q_DEQUEUE_MSG DequeueMsg;// Offset=0xc Size=0x34
    unsigned long dwUserIndex;// Offset=0x40 Size=0x4
    struct _Q_LIST_REPLY_MSG * pReply;// Offset=0x44 Size=0x4
    struct _XOVERLAPPED xov;// Offset=0x48 Size=0x1c
};

struct XUINamedFrame// Size=0x10 (Id=3103)
{
    void * operator new(unsigned int ,void * );
    void * operator new(unsigned int );
    void * operator new[](unsigned int );
    void operator delete(void * );
    void operator delete[](void * );
    wchar_t * m_szName;// Offset=0x0 Size=0x4
    unsigned long m_dwFrame;// Offset=0x4 Size=0x4
    enum XUI_NAMEDFRAME_COMMAND m_nCommand;// Offset=0x8 Size=0x4
    int m_nTargetFrame;// Offset=0xc Size=0x4
    void XUINamedFrame();
    void ~XUINamedFrame();
    void * __vecDelDtor(unsigned int );
};

class CXLivePlayerList// Size=0x2698 (Id=3104)
{
    public void CXLivePlayerList();
    public HRESULT OnSysTitleShutdown();
    public HRESULT OnSysTitleStartup();
    private void Lock();
    private void Unlock();
    public unsigned long AddPlayerListUser(unsigned long ,unsigned long long ,unsigned long ,unsigned long ,unsigned long ,char * );
    public unsigned long UpdatePlayerListUser(unsigned long ,unsigned long long ,unsigned long ,unsigned long ,char * );
    public void ResetList(struct _XUSER_PLAYERLIST_INTERNAL * );
    public HRESULT DownloadPlayerList(unsigned long );
    private void ProcessPlayerListDownload(unsigned long );
    private void AddPresenceSubscriptions(unsigned long ,unsigned long long * ,unsigned long );
    private void RemovePresenceSubscriptions(unsigned long ,unsigned long long * ,unsigned long );
    public HRESULT CreateEnumerator(struct _XUSER_ENUMPLAYER_MSG * );
    public HRESULT Enumerate(struct _XENUMERATEPARAM * ,struct _XOVERLAPPED * );
    public void SetEnablePresenceSubscriptions(unsigned long ,int );
    public void SetNotification(class CXLiveNotification * );
    public void DoWork();
    public void CancelTasksAtLogoff();
    public int AreAnyTasksActive();
    public HRESULT ProcessChangeSigninUsers(unsigned long * ,unsigned long long * );
    public int AreAnyRemovedUserTasksActive();
    private int FindPlayerListUser(struct _XUSER_PLAYERLIST_INTERNAL * ,unsigned long long ,unsigned short * );
    private void InsertPlayerListUser(struct _XUSER_PLAYERLIST_INTERNAL * ,unsigned short ,unsigned long long ,unsigned long ,unsigned long ,unsigned long ,unsigned long ,char * ,int );
    private void RemovePlayerListUser(struct _XUSER_PLAYERLIST_INTERNAL * ,unsigned short );
    private void AddToPendingQueue(struct _XUSER_PLAYERLIST_INTERNAL * ,unsigned short );
    private void RemoveFromPendingQueue(struct _XUSER_PLAYERLIST_INTERNAL * ,unsigned short );
    private int m_fCanSubscribe;// Offset=0x0 Size=0x4
    private class CXLiveNotification * m_pNotification;// Offset=0x4 Size=0x4
    private struct _XUSER_PLAYERLIST_INTERNAL m_PlayerListBuffers[4];// Offset=0x8 Size=0x2660
    private struct _XUSER_PLAYERLIST_INTERNAL * m_PlayerLists[4];// Offset=0x2668 Size=0x10
    private struct _RTL_CRITICAL_SECTION m_csLock;// Offset=0x2678 Size=0x1c
};

struct XUIImageInfo// Size=0x1c (Id=3105)
{
    void * operator new(unsigned int ,void * );
    void * operator new(unsigned int );
    void * operator new[](unsigned int );
    void operator delete(void * );
    void operator delete[](void * );
    unsigned int Width;// Offset=0x0 Size=0x4
    unsigned int Height;// Offset=0x4 Size=0x4
    unsigned int Depth;// Offset=0x8 Size=0x4
    unsigned int MipLevels;// Offset=0xc Size=0x4
    unsigned int ImageFileFormat;// Offset=0x10 Size=0x4
    enum _D3DFORMAT Format;// Offset=0x14 Size=0x4
    enum _D3DRESOURCETYPE ResourceType;// Offset=0x18 Size=0x4
};

class CXLivePresence// Size=0x0 (Id=3106)
{
};

struct XONLINE_FRIEND_INTERNAL : public _XONLINE_FRIEND// Size=0xdc (Id=3107)
{
    unsigned char __align0[196];// Offset=0x0 Size=0xc4
    unsigned char bReserved;// Offset=0xc4 Size=0x1
    unsigned char __align1[3];// Offset=0xc5 Size=0x3
    unsigned long dwReserved[4];// Offset=0xc8 Size=0x10
    unsigned long dwChangeVer;// Offset=0xd8 Size=0x4
};

struct XONLINE_FRIEND_LIST_INTERNAL// Size=0x5620 (Id=3108)
{
    unsigned long long qwUserID;// Offset=0x0 Size=0x8
    unsigned long dwVersion;// Offset=0x8 Size=0x4
    unsigned short cNum;// Offset=0xc Size=0x2
    unsigned char __align0[2];// Offset=0xe Size=0x2
    unsigned long dwReserved[8];// Offset=0x10 Size=0x20
    struct XONLINE_FRIEND_INTERNAL Friendlist[100];// Offset=0x30 Size=0x55f0
};

class CXLiveFriends// Size=0x19848 (Id=3109)
{
    public void CXLiveFriends();
    public void ~CXLiveFriends();
    public void InitializeFromCache(unsigned long ,unsigned long * ,unsigned long * );
    public HRESULT ProcessAliveReply(unsigned long ,unsigned long ,unsigned short ,struct _P_REPLY_BUDDY * ,unsigned long ,unsigned short ,struct _P_REPLY_BLOCK * );
    public unsigned long RelevantQFlagChanges(unsigned long );
    public HRESULT ProcessNotifications(unsigned long ,unsigned short ,unsigned short ,struct _Q_LIST_ITEM * );
    public HRESULT ProcessChangeSigninUsers(unsigned long * ,unsigned long long * );
    public int AreAnyRemovedUserTasksActive();
    public void Initialize(class CXLiveNotification * ,class CXLivePresence * );
    public HRESULT CreateEnumerator(class CArgumentList * );
    public HRESULT Enumerate(void * ,struct _XOVERLAPPED * );
    public void CancelTasksAtLogoff();
    public int AreAnyTasksActive();
    public int IsFriend(unsigned long ,unsigned long long ,int );
    public struct _XONLINE_FRIEND * GetFriendRecord(unsigned long ,unsigned long long ,struct _XONLINE_FRIEND * );
    public unsigned long AddMuteListUser(unsigned long ,unsigned long long );
    public unsigned long RemoveMuteListUser(unsigned long ,unsigned long long );
    public unsigned long QueryMuteListUser(unsigned long ,unsigned long long ,int * );
    public void DoWork();
    public void UpdateCacheFile(unsigned long );
    protected void ClearSentInvites(unsigned long );
    public void ClearSentInvites(unsigned long long );
    public HRESULT GetFriendsListInfo(unsigned long long ,struct _XUSER_FRIENDS_LIST_INFO * );
    protected void Lock();
    protected void Unlock();
    protected HRESULT RebuildFriendList(unsigned long ,unsigned short ,unsigned long ,struct _P_REPLY_BUDDY * );
    protected int GetFriendIndex(unsigned long ,unsigned long long ,unsigned long * ,int );
    protected int OrderFriends(struct XONLINE_FRIEND_INTERNAL * ,struct XONLINE_FRIEND_INTERNAL * );
    protected HRESULT SortFriends(struct XONLINE_FRIEND_LIST_INTERNAL * );
    protected HRESULT ResortFriend(struct XONLINE_FRIEND_LIST_INTERNAL * ,unsigned long );
    protected HRESULT AddFriend(unsigned long ,unsigned long long ,unsigned char * ,unsigned long ,unsigned long ,unsigned long );
    protected HRESULT RemoveFriend(unsigned long ,unsigned long long ,unsigned long );
    protected HRESULT UpdateFriendPresence(unsigned long ,unsigned long long ,unsigned long ,unsigned long ,unsigned long ,struct XNKID ,unsigned short ,wchar_t * ,struct XONLINE_FRIEND_INTERNAL ** ,unsigned long * );
    protected int IsFriendListConsistent(struct XONLINE_FRIEND_LIST_INTERNAL * ,int );
    protected void SetFriendFlags(unsigned long ,unsigned long ,unsigned long long ,unsigned long ,unsigned long );
    protected void SetFriendInvite(unsigned long ,unsigned long ,unsigned long long ,unsigned long ,struct XNKID ,struct _FILETIME ,struct XONLINE_FRIEND_INTERNAL ** );
    protected void ClearFriendInvite(unsigned long ,unsigned long ,unsigned long long ,struct XNKID );
    protected void ReadCacheFile(unsigned long );
    protected class CXLiveNotification * m_pNotification;// Offset=0x0 Size=0x4
    protected class CXLivePresence * m_pPresence;// Offset=0x4 Size=0x4
    protected struct XONLINE_FRIEND_LIST_INTERNAL m_FriendListBuffers[4];// Offset=0x8 Size=0x15880
    protected struct XONLINE_FRIEND_LIST_INTERNAL * m_FriendLists[4];// Offset=0x15888 Size=0x10
    protected class CXLiveMuteList m_MuteList;// Offset=0x15898 Size=0x3f90
    protected struct _RTL_CRITICAL_SECTION m_cs;// Offset=0x19828 Size=0x1c
    public void * __vecDelDtor(unsigned int );
};

struct XUIContentInfo// Size=0xc (Id=3110)
{
    unsigned long cbSize;// Offset=0x0 Size=0x4
    enum XUI_CONTENT_TYPE nType;// Offset=0x4 Size=0x4
    union // Size=0x4 (Id=0)
    {
        struct _XUIOBJ * hObj;// Offset=0x8 Size=0x4
        struct _XUIBRUSH * hBrush;// Offset=0x8 Size=0x4
    };
};

struct _GET_USER_SUBSCRIPTION_DETAILS_DATA// Size=0x16 (Id=3111)
{
    unsigned long dwWholePart;// Offset=0x0 Size=0x4
    unsigned char bFractionalPart;// Offset=0x4 Size=0x1
    unsigned char bCurrencyFormat;// Offset=0x5 Size=0x1
    unsigned short wISOCodeLength;// Offset=0x6 Size=0x2
    wchar_t * wszISOCode;// Offset=0x8 Size=0x4
    unsigned short wFormattedPriceLength;// Offset=0xc Size=0x2
    wchar_t * wszFormattedPrice;// Offset=0xe Size=0x4
    unsigned long dwOfferingDetails;// Offset=0x12 Size=0x4
};

class CXStorageDownloadParent : public CXLiveAsyncTaskInternal// Size=0x1e20 (Id=3112)
{
    public void CXStorageDownloadParent(class CXStorageDownloadParent & );
    public void CXStorageDownloadParent();
    public void StorageDownloadGetServerPath(wchar_t ** );
    public HRESULT StorageDownloadProcessResponseHeader();
    public HRESULT StorageDownloadContinueProcessResponseData();
    public void StorageDownloadHandleSignatureVerified();
    public HRESULT StorageDownloadComplete();
    public void ~CXStorageDownloadParent();
    public class CXStorageDownloadParent & operator=(class CXStorageDownloadParent & );
    public void * __vecDelDtor(unsigned int );
};

class CXStorageDownloadParent : public CXLiveAsyncTaskInternal// Size=0x1e20 (Id=3113)
{
    public void CXStorageDownloadParent(class CXStorageDownloadParent & );
    public void CXStorageDownloadParent();
    public void StorageDownloadGetServerPath(wchar_t ** );
    public HRESULT StorageDownloadProcessResponseHeader();
    public HRESULT StorageDownloadContinueProcessResponseData();
    public void StorageDownloadHandleSignatureVerified();
    public HRESULT StorageDownloadComplete();
    public void ~CXStorageDownloadParent();
    public class CXStorageDownloadParent & operator=(class CXStorageDownloadParent & );
    public void * __vecDelDtor(unsigned int );
};

struct _UPDATE_PARENTAL_CONTROLS_STRUCT// Size=0x4e (Id=3114)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned long rgGrantPrivileges[8];// Offset=0x8 Size=0x20
    unsigned long rgRestrictPrivileges[8];// Offset=0x28 Size=0x20
    unsigned short wSourceLength;// Offset=0x48 Size=0x2
    wchar_t * wszSource;// Offset=0x4a Size=0x4
};

class COutputBuffer// Size=0xc (Id=3115)
{
    public void COutputBuffer();
    public void Bind(unsigned char * ,unsigned long );
    public void Reset();
    public unsigned long GetBufferSize();
    public unsigned long GetWrittenSize();
    public unsigned char * GetCurrentBuffer();
    public HRESULT WriteByte(unsigned char );
    public HRESULT WriteWord(unsigned short );
    public HRESULT WriteDword(unsigned long );
    public HRESULT WriteQword(unsigned long long );
    public HRESULT WritePtr(void * );
    public HRESULT WriteData(unsigned char * ,unsigned long );
    public HRESULT ReserveSpace(unsigned char ** ,unsigned long );
    public HRESULT SetWrittenSize(unsigned long );
    public HRESULT AdvanceBuffer(unsigned char * );
    protected unsigned char * m_pbBuffer;// Offset=0x0 Size=0x4
    protected unsigned long m_cbBuffer;// Offset=0x4 Size=0x4
    protected unsigned long m_cbWritten;// Offset=0x8 Size=0x4
};

class CSchemaAccess : public CLittleEndianBuffer// Size=0x18 (Id=3116)
{
    public void CSchemaAccess();
    union // Size=0x78 (Id=0)
    {
        HRESULT BindToSchema(class CSchemaData * ,unsigned long ,int );// Offset=0x0 Size=0x78
        HRESULT GetDescriptor(struct SCHEMA_DESCRIPTOR * );// Offset=0x0 Size=0x2c
        HRESULT GetArgumentInfo(struct SCHEMA_ARGUMENT_INFO * );// Offset=0x0 Size=0x2c
        HRESULT GetConformanceInfo(struct SCHEMA_CONFORMANCE_INFO * );// Offset=0x0 Size=0x58
        HRESULT GetConformingInfo(struct SCHEMA_CONFORMING_INFO * );// Offset=0x0 Size=0x2c
        HRESULT GetUnionInfo(struct SCHEMA_UNION_INFO * ,unsigned short * );// Offset=0x0 Size=0x50
        HRESULT SkipScope(unsigned long );// Offset=0x0 Size=0x340
    };
    public HRESULT LookupConstantFromTable(unsigned short ,unsigned long * );
    protected class CSchemaData * m_pSchemaData;// Offset=0x14 Size=0x4
    public void ~CSchemaAccess();
    public void * __vecDelDtor(unsigned int );
};

struct XNKID// Size=0x8 (Id=3117)
{
    unsigned char ab[8];// Offset=0x0 Size=0x8
};

class CSharedResource<unsigned char *>// Size=0x0 (Id=3118)
{
};

class CXLiveNotification// Size=0x870 (Id=3119)
{
    public HRESULT NotificationInit(class CXLivePresence * ,class CXLiveFriends * ,class CXLiveMessaging * ,class CXLivePlayerList * );
    public HRESULT OnSysTitleShutdown();
    public int AliveEstablished();
    public int IsValidUserXuid(unsigned long long ,unsigned long * );
    public unsigned long GetGuestCount(unsigned long long );
    public HRESULT ServiceNotification();
    public HRESULT SourceNotification(unsigned long ,unsigned short ,unsigned short ,struct _Q_LIST_ITEM * );
    public struct XNOTIFICATION_USER * GetNotificationUserInfo(unsigned long );
    public void SetAcceptedGameInviteInfo(struct _XINVITE_INFO * );
    public int GetAcceptedGameInviteInfo(unsigned long long ,struct _XINVITE_INFO * );
    public HRESULT SetState(class CArgumentList * );
    public HRESULT GetState(class CArgumentList * );
    public HRESULT SetPresence(struct LIVEBASE_SETPRESENCE_MSG * );
    public HRESULT UpdateStateFlags(class CArgumentList * );
    public HRESULT SetGameSession(class CArgumentList * );
    public HRESULT EnsurePeerPresenceKey();
    public void ClearPeerPresenceKey();
    public HRESULT GetSession(class CXLiveAsyncTask * ,class CArgumentList * );
    public HRESULT StartPresenceUserChange(struct _XNET_LOGON_USER * );
    public void Disconnect();
    public void NotificationTerm();
    public HRESULT QueuePopupNotification(unsigned long ,unsigned long ,char * ,int ,unsigned long long );
    public void CancelTasksAtLogoff();
    public int AreAnyTasksActive();
    public HRESULT GetLogonUsers(struct _XNET_LOGON_USER * );
    public void SetExtendedState(struct XUSERP_SET_EXTENDED_STATE * ,struct _XOVERLAPPED * );
    public void GetExtendedState(struct XUSERP_GET_EXTENDED_STATE * ,struct _XOVERLAPPED * );
    public int IsConnectionServiceSettingUpdated();
    public void AllowConnectionServiceSettingUpdate();
    public HRESULT UpdateConnectionServiceSetting();
    public int IsConnectionServiceEnabled();
    protected HRESULT DeadUsersContinue();
    protected HRESULT AliveContinue();
    protected HRESULT NotificationContinue();
    protected HRESULT NotificationProcessQValChanges();
    protected HRESULT NotificationSendDequeue(unsigned long ,unsigned long );
    protected HRESULT DequeueContinue();
    protected struct XNOTIFICATION_USER * GetUserFromSeqNum(unsigned long ,unsigned long * );
    protected unsigned long FindFirstChangedQueue(unsigned long );
    protected HRESULT UpdateSessionId(unsigned long ,struct XNKID * );
    struct // Size=0x4 (Id=0)
    {
        unsigned long m_fPresenceUsersEstablished:1;// Offset=0x0 Size=0x4 BitOffset=0x1f BitSize=0x1
        unsigned long m_fPresenceDeadUsersInProgress:1;// Offset=0x0 Size=0x4 BitOffset=0x1e BitSize=0x1
        unsigned long m_fPresenceAlivesInProgress:1;// Offset=0x0 Size=0x4 BitOffset=0x1d BitSize=0x1
        unsigned long m_fPresenceLogoffInProgress:1;// Offset=0x0 Size=0x4 BitOffset=0x1c BitSize=0x1
    };
    protected struct _XOVERLAPPED m_xov;// Offset=0x4 Size=0x1c
    protected unsigned long m_dwAliveRepliesExpected;// Offset=0x20 Size=0x4
    protected struct _XPRESENCE_ALIVE_REPLY * m_pAliveReply;// Offset=0x24 Size=0x4
    protected unsigned long m_iCurrentUser;// Offset=0x28 Size=0x4
    protected struct XNKID m_xnkidPeer;// Offset=0x2c Size=0x8
    protected struct XNKEY m_xnkeyPeer;// Offset=0x34 Size=0x10
    protected struct _XNET_LOGON_USER m_LogonUsers[4];// Offset=0x44 Size=0x1a0
    protected class CXLivePresence * m_pPresence;// Offset=0x1e4 Size=0x4
    protected class CXLiveFriends * m_pFriends;// Offset=0x1e8 Size=0x4
    protected class CXLivePlayerList * m_pPlayerList;// Offset=0x1ec Size=0x4
    protected class CXLiveMessaging * m_pMessaging;// Offset=0x1f0 Size=0x4
    protected struct XINVITE_INFO_INTERNAL m_GameInviteInfo;// Offset=0x1f4 Size=0x60
    protected unsigned long m_spinLock;// Offset=0x254 Size=0x4
    protected struct XNOTIFICATION_USER m_NotifUsers[4];// Offset=0x258 Size=0x5a0
    protected unsigned long m_dwPresenceTitleId;// Offset=0x7f8 Size=0x4
    protected struct XNOTIFICATION_DEQUEUE m_SendDequeue;// Offset=0x7fc Size=0x64
    protected class CSharedResource<unsigned char *> * m_pSharedBuffer;// Offset=0x860 Size=0x4
    private int m_fConnectionServiceSettingRetrieved;// Offset=0x864 Size=0x4
    private int m_fConnectionServiceEnabled;// Offset=0x868 Size=0x4
};

class CXuiListItemImpl : public CXuiElementImplBase, public CXuiListItem// Size=0x8 (Id=3120)
{
    public void CXuiListItemImpl(class CXuiListItemImpl & );
    public void CXuiListItemImpl();
    public class CXuiListItemImpl & operator=(class CXuiListItemImpl & );
};

class CXuiListItemImpl : public CXuiElementImplBase, public CXuiListItem// Size=0x8 (Id=3121)
{
    public void CXuiListItemImpl(class CXuiListItemImpl & );
    public void CXuiListItemImpl();
    public class CXuiListItemImpl & operator=(class CXuiListItemImpl & );
};

class CXuiComboBoxImpl : public CXuiElementImplBase, public CXuiComboBox// Size=0x8 (Id=3122)
{
    public void CXuiComboBoxImpl(class CXuiComboBoxImpl & );
    public void CXuiComboBoxImpl();
    public class CXuiComboBoxImpl & operator=(class CXuiComboBoxImpl & );
};

class CXuiComboBoxImpl : public CXuiElementImplBase, public CXuiComboBox// Size=0x8 (Id=3123)
{
    public void CXuiComboBoxImpl(class CXuiComboBoxImpl & );
    public void CXuiComboBoxImpl();
    public class CXuiComboBoxImpl & operator=(class CXuiComboBoxImpl & );
};

struct _XNQOSHISTORYHEADER// Size=0x180 (Id=3124)
{
    unsigned long dwFlashVer;// Offset=0x0 Size=0x4
    unsigned char abHash[20];// Offset=0x4 Size=0x14
    unsigned char abConfounder[8];// Offset=0x18 Size=0x8
    union _LARGE_INTEGER liLastLiveQosLookupUploadTime;// Offset=0x20 Size=0x8
    union _LARGE_INTEGER liLastOtherQosLookupUploadTime;// Offset=0x28 Size=0x8
    unsigned char abReserved[48];// Offset=0x30 Size=0x30
    struct _XNQOSPROFILE aProfiles[8];// Offset=0x60 Size=0x120
};

struct XUIMessageTopItem// Size=0x4 (Id=3125)
{
    int iTopItem;// Offset=0x0 Size=0x4
};

struct _BASIC_CONTENT_INFO// Size=0x62 (Id=3126)
{
    unsigned long long qwOfferID;// Offset=0x0 Size=0x8
    unsigned long long qwPreviewOfferID;// Offset=0x8 Size=0x8
    unsigned short wOfferNameLength;// Offset=0x10 Size=0x2
    wchar_t * wszOfferName;// Offset=0x12 Size=0x4
    unsigned long dwOfferType;// Offset=0x16 Size=0x4
    unsigned char contentId[20];// Offset=0x1a Size=0x14
    unsigned long dwLicenseMask;// Offset=0x2e Size=0x4
    unsigned long dwTitleID;// Offset=0x32 Size=0x4
    unsigned long dwTitleCategory;// Offset=0x36 Size=0x4
    unsigned short wTitleNameLength;// Offset=0x3a Size=0x2
    wchar_t * wszTitleName;// Offset=0x3c Size=0x4
    unsigned char bTierRequired;// Offset=0x40 Size=0x1
    unsigned short wGameRating;// Offset=0x41 Size=0x2
    unsigned short wResponseFlags;// Offset=0x43 Size=0x2
    unsigned long dwPackageSize;// Offset=0x45 Size=0x4
    unsigned long dwInstallSize;// Offset=0x49 Size=0x4
    unsigned long dwSellTextLength;// Offset=0x4d Size=0x4
    wchar_t * wszSellText;// Offset=0x51 Size=0x4
    unsigned long dwAssetID;// Offset=0x55 Size=0x4
    unsigned long dwPurchaseQuantity;// Offset=0x59 Size=0x4
    unsigned char bPricesLength;// Offset=0x5d Size=0x1
    struct _OFFER_PRICE * pPrices;// Offset=0x5e Size=0x4
};

struct _XMARKETPLACE_ELEMENT// Size=0xc (Id=3127)
{
    union // Size=0x4 (Id=0)
    {
        int iValue;// Offset=0x0 Size=0x4
        unsigned long dwValue;// Offset=0x0 Size=0x4
        char * pszUtf8Value;// Offset=0x0 Size=0x4
        wchar_t * pszValue;// Offset=0x0 Size=0x4
        unsigned long long * pUllValue;// Offset=0x0 Size=0x4
        struct _XMARKETPLACE_DATA * pBinaryValue;// Offset=0x0 Size=0x4
        struct _GUID * pGUIDValue;// Offset=0x0 Size=0x4
        struct _XMARKETPLACE_TABLE * pTable;// Offset=0x0 Size=0x4
    };
    unsigned short fValueSet;// Offset=0x4 Size=0x2
    unsigned short wPropType;// Offset=0x6 Size=0x2
    struct _XMARKETPLACE_ELEMENT * pNext;// Offset=0x8 Size=0x4
};

struct _D3DPRESENT_PARAMETERS_// Size=0x7c (Id=3128)
{
    unsigned int BackBufferWidth;// Offset=0x0 Size=0x4
    unsigned int BackBufferHeight;// Offset=0x4 Size=0x4
    enum _D3DFORMAT BackBufferFormat;// Offset=0x8 Size=0x4
    unsigned int BackBufferCount;// Offset=0xc Size=0x4
    enum _D3DMULTISAMPLE_TYPE MultiSampleType;// Offset=0x10 Size=0x4
    unsigned long MultiSampleQuality;// Offset=0x14 Size=0x4
    enum _D3DSWAPEFFECT SwapEffect;// Offset=0x18 Size=0x4
    struct HWND__ * hDeviceWindow;// Offset=0x1c Size=0x4
    int Windowed;// Offset=0x20 Size=0x4
    int EnableAutoDepthStencil;// Offset=0x24 Size=0x4
    enum _D3DFORMAT AutoDepthStencilFormat;// Offset=0x28 Size=0x4
    unsigned long Flags;// Offset=0x2c Size=0x4
    unsigned int FullScreen_RefreshRateInHz;// Offset=0x30 Size=0x4
    unsigned int PresentationInterval;// Offset=0x34 Size=0x4
    int DisableAutoBackBuffer;// Offset=0x38 Size=0x4
    int DisableAutoFrontBuffer;// Offset=0x3c Size=0x4
    enum _D3DFORMAT FrontBufferFormat;// Offset=0x40 Size=0x4
    enum _D3DCOLORSPACE FrontBufferColorSpace;// Offset=0x44 Size=0x4
    struct _D3DRING_BUFFER_PARAMETERS RingBufferParameters;// Offset=0x48 Size=0x18
    struct _D3DVIDEO_SCALER_PARAMETERS VideoScalerParameters;// Offset=0x60 Size=0x1c
};

struct XUIRenderInitParams// Size=0x1c (Id=3129)
{
    unsigned long cbSize;// Offset=0x0 Size=0x4
    unsigned long dwFlags;// Offset=0x4 Size=0x4
    struct D3DDevice * pDevice;// Offset=0x8 Size=0x4
    struct IXuiDevice * pXuiDevice;// Offset=0xc Size=0x4
    HRESULT  ( * pfnTextureLoader)(struct IXuiDevice * ,wchar_t * ,struct XUIImageInfo * ,struct D3DTexture ** );// Offset=0x10 Size=0x4
    struct _D3DPRESENT_PARAMETERS_ * pPresentParams;// Offset=0x14 Size=0x4
    HRESULT  ( * pfnShaderCompiler)(char * ,unsigned int ,struct _D3DXMACRO * ,struct ID3DXInclude * ,char * ,char * ,unsigned long ,struct ID3DXBuffer ** ,struct ID3DXBuffer ** ,struct ID3DXConstantTable ** );// Offset=0x18 Size=0x4
};

struct _GENERIC_LIST_ITEM// Size=0x18 (Id=3130)
{
    struct _GUID guidId;// Offset=0x0 Size=0x10
    unsigned short wPriority;// Offset=0x10 Size=0x2
    unsigned short wXmlLength;// Offset=0x12 Size=0x2
    wchar_t * XmlProperties;// Offset=0x14 Size=0x4
};

struct _XUSER_PLAYERLIST_USER_INTERNAL// Size=0x30 (Id=3131)
{
    unsigned long long qwPlayerID;// Offset=0x0 Size=0x8
    unsigned long dwFlags;// Offset=0x8 Size=0x4
    unsigned long dwTitleID;// Offset=0xc Size=0x4
    unsigned long mtUpdated;// Offset=0x10 Size=0x4
    unsigned long dwRating;// Offset=0x14 Size=0x4
    char szGamertag[16];// Offset=0x18 Size=0x10
    unsigned char fPendingAdd;// Offset=0x28 Size=0x1
    unsigned char __align0[1];// Offset=0x29 Size=0x1
    unsigned short wNextPending;// Offset=0x2a Size=0x2
};

struct _P_PRESENCE_2_ITEM// Size=0x28 (Id=3132)
{
    unsigned long long qwUserID;// Offset=0x0 Size=0x8
    unsigned long dwTitleID;// Offset=0x8 Size=0x4
    unsigned long dwState;// Offset=0xc Size=0x4
    struct XNKID MatchSessionID;// Offset=0x10 Size=0x8
    unsigned long mtUserTime;// Offset=0x18 Size=0x4
    unsigned short cbRichPresence;// Offset=0x1c Size=0x2
    unsigned short cbData;// Offset=0x1e Size=0x2
    wchar_t * wszRichPresence;// Offset=0x20 Size=0x4
    unsigned char * rgbData;// Offset=0x24 Size=0x4
};

struct _XLIVEHIVE_GET_LIVE_CONFIG_REQUEST// Size=0xa (Id=3133)
{
    unsigned short uConfigNameLen;// Offset=0x0 Size=0x2
    wchar_t * szConfigName;// Offset=0x2 Size=0x4
    struct _XLIVEHIVE_GET_LIVE_CONFIG_RESPONSE * pResponse;// Offset=0x6 Size=0x4
};

struct TypefaceDescriptor// Size=0x14 (Id=3134)
{
    wchar_t * szTypeface;// Offset=0x0 Size=0x4
    wchar_t * szLocator;// Offset=0x4 Size=0x4
    wchar_t * szReserved1;// Offset=0x8 Size=0x4
    float fBaselineAdjust;// Offset=0xc Size=0x4
    wchar_t * szFallbackTypeface;// Offset=0x10 Size=0x4
};

struct IXuiFontRenderer// Size=0x4 (Id=3135)
{
    HRESULT Init(float );
    void Term();
    HRESULT GetCaps(unsigned long * );
    HRESULT CreateFont(struct TypefaceDescriptor * ,float ,unsigned long ,unsigned long ,void ** );
    void ReleaseFont(void * );
    HRESULT GetFontMetrics(void * ,struct XUIFontMetrics * );
    HRESULT GetCharMetrics(void * ,wchar_t ,struct XUICharMetrics * );
    HRESULT DrawCharToTexture(void * ,wchar_t ,struct _XUIDC * ,struct IXuiTexture * ,unsigned int ,unsigned int ,unsigned int ,unsigned int ,unsigned int ,unsigned int );
    HRESULT DrawCharsToDevice(void * ,struct CharData * ,unsigned long ,struct tagRECT * ,struct _XUIDC * ,struct D3DXMATRIX * );
    void IXuiFontRenderer(struct IXuiFontRenderer & );
    void IXuiFontRenderer();
    struct IXuiFontRenderer & operator=(struct IXuiFontRenderer & );
};

struct IXuiFontRenderer// Size=0x4 (Id=3136)
{
    HRESULT Init(float );
    void Term();
    HRESULT GetCaps(unsigned long * );
    HRESULT CreateFont(struct TypefaceDescriptor * ,float ,unsigned long ,unsigned long ,void ** );
    void ReleaseFont(void * );
    HRESULT GetFontMetrics(void * ,struct XUIFontMetrics * );
    HRESULT GetCharMetrics(void * ,wchar_t ,struct XUICharMetrics * );
    HRESULT DrawCharToTexture(void * ,wchar_t ,struct _XUIDC * ,struct IXuiTexture * ,unsigned int ,unsigned int ,unsigned int ,unsigned int ,unsigned int ,unsigned int );
    HRESULT DrawCharsToDevice(void * ,struct CharData * ,unsigned long ,struct tagRECT * ,struct _XUIDC * ,struct D3DXMATRIX * );
    void IXuiFontRenderer(struct IXuiFontRenderer & );
    void IXuiFontRenderer();
    struct IXuiFontRenderer & operator=(struct IXuiFontRenderer & );
};

struct XNetConfigSectorHeader// Size=0x1c (Id=3137)
{
    unsigned char abHash[20];// Offset=0x0 Size=0x14
    unsigned char abConfounder[8];// Offset=0x14 Size=0x8
};

class CXDirectoryCrawler// Size=0x258 (Id=3138)
{
    public HRESULT Initialize(char * ,unsigned long );
    public HRESULT Reset();
    public void Cleanup();
    public HRESULT Continue();
    public void DoFileHandled();
    public char * GetCurrentFileName();
    public char * GetCurrentFilePath();
    public unsigned long GetCurrentFileNameLength();
    public void GetCurrentFileSize(union _LARGE_INTEGER * );
    union // Size=0x148 (Id=0)
    {
        struct FILE_DIRECTORY_INFO_BUFFER// Size=0x148 (Id=33156)
        {
            struct _FILE_DIRECTORY_INFORMATION FileDirectoryInfo;// Offset=0x0 Size=0x48
            unsigned char ocFileName[256];// Offset=0x48 Size=0x100
        };
        enum _XDIRCRAWL_STATE m_State;// Offset=0x0 Size=0x4
        char m_szPath[260];// Offset=0x4 Size=0x104
        unsigned long m_dwPathPrefixLength;// Offset=0x108 Size=0x4
        void * m_hFind;// Offset=0x10c Size=0x4
        struct CXDirectoryCrawler::FILE_DIRECTORY_INFO_BUFFER m_FileDirectoryInfoBuffer;// Offset=0x110 Size=0x148
    };
};

struct CXDirectoryCrawler::FILE_DIRECTORY_INFO_BUFFER// Size=0x148 (Id=3139)
{
    struct _FILE_DIRECTORY_INFORMATION FileDirectoryInfo;// Offset=0x0 Size=0x48
    unsigned char ocFileName[256];// Offset=0x48 Size=0x100
};

class CXuiNavButtonImpl : public CXuiElementImplBase, public CXuiNavButton// Size=0x8 (Id=3140)
{
    public void CXuiNavButtonImpl(class CXuiNavButtonImpl & );
    public void CXuiNavButtonImpl();
    public class CXuiNavButtonImpl & operator=(class CXuiNavButtonImpl & );
};

class CXuiNavButtonImpl : public CXuiElementImplBase, public CXuiNavButton// Size=0x8 (Id=3141)
{
    public void CXuiNavButtonImpl(class CXuiNavButtonImpl & );
    public void CXuiNavButtonImpl();
    public class CXuiNavButtonImpl & operator=(class CXuiNavButtonImpl & );
};

struct _DOWNLOAD_QUEUE_CREATE_REQUEST// Size=0x17 (Id=3142)
{
    unsigned long long xUserId;// Offset=0x0 Size=0x8
    unsigned char bNameLength;// Offset=0x8 Size=0x1
    unsigned short wXmlLength;// Offset=0x9 Size=0x2
    wchar_t * szName;// Offset=0xb Size=0x4
    wchar_t * XmlProperties;// Offset=0xf Size=0x4
    struct _DOWNLOAD_QUEUE_CREATE_RESPONSE * pResponse;// Offset=0x13 Size=0x4
};

struct _STORAGE_DL_RESPONSE_BUFFER// Size=0x198 (Id=3143)
{
    struct _XSTORAGE_DOWNLOAD_RESPONSE StorageDownloadResponse;// Offset=0x0 Size=0x98
    unsigned char abAttributes[256];// Offset=0x98 Size=0x100
};

class CXLiveOffering// Size=0x460 (Id=3144)
{
    public void CXLiveOffering();
    public HRESULT XContentGetMarketplaceCounts(struct LIVEBASE_CONTENTAVAILABLE_MSG * ,struct _XOVERLAPPED * );
    public HRESULT _XContentGetMarketplaceCounts(struct LIVEBASE_CONTENTAVAILABLE_MSG * ,struct _XOVERLAPPED * );
    public HRESULT UpdateAccessTimes(struct LIVEBASE_UPDATEACCESSTIMES_MSG * ,struct _XOVERLAPPED * );
    public HRESULT _XOfferingExpireMarketplaceCountsCache(struct LIVEBASE_EXPIREMARKETPLACECOUNTSCACHE_MSG * ,struct _XOVERLAPPED * );
    public void CancelTasksAtLogoff();
    public int AreAnyTasksActive();
    protected struct _MARKETPLACE_COUNTS_USER_CACHE m_rgUserCache[4];// Offset=0x0 Size=0x460
};

class CXuiTabSceneImpl : public CXuiElementImplBase, public CXuiTabScene// Size=0x8 (Id=3145)
{
    public void CXuiTabSceneImpl(class CXuiTabSceneImpl & );
    public void CXuiTabSceneImpl();
    public class CXuiTabSceneImpl & operator=(class CXuiTabSceneImpl & );
};

class CXuiTabSceneImpl : public CXuiElementImplBase, public CXuiTabScene// Size=0x8 (Id=3146)
{
    public void CXuiTabSceneImpl(class CXuiTabSceneImpl & );
    public void CXuiTabSceneImpl();
    public class CXuiTabSceneImpl & operator=(class CXuiTabSceneImpl & );
};

class CXuiMultiApp : public CXuiModule// Size=0x40 (Id=3147)
{
    public void CXuiMultiApp(class CXuiMultiApp & );
    public void CXuiMultiApp();
    public void SetDC(struct _XUIDC * );
    public void ~CXuiMultiApp();
    public class CXuiMultiApp & operator=(class CXuiMultiApp & );
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class CXuiMultiApp : public CXuiModule// Size=0x40 (Id=3148)
{
    public void CXuiMultiApp(class CXuiMultiApp & );
    public void CXuiMultiApp();
    public void SetDC(struct _XUIDC * );
    public void ~CXuiMultiApp();
    public class CXuiMultiApp & operator=(class CXuiMultiApp & );
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

struct XUIMessageSizeChanging// Size=0x10 (Id=3149)
{
    float fCurrWidth;// Offset=0x0 Size=0x4
    float fCurrHeight;// Offset=0x4 Size=0x4
    float fNewWidth;// Offset=0x8 Size=0x4
    float fNewHeight;// Offset=0xc Size=0x4
};

struct _XONLINE_MUTELIST_INTERNAL// Size=0xfd8 (Id=3150)
{
    unsigned long long qwUserID;// Offset=0x0 Size=0x8
    unsigned long dwVersion;// Offset=0x8 Size=0x4
    unsigned short cNum;// Offset=0xc Size=0x2
    unsigned short wPendingHead;// Offset=0xe Size=0x2
    unsigned short cPending;// Offset=0x10 Size=0x2
    unsigned short wNextAge;// Offset=0x12 Size=0x2
    struct // Size=0x4 (Id=0)
    {
        unsigned long fPendingIO:1;// Offset=0x14 Size=0x4 BitOffset=0x1f BitSize=0x1
        unsigned long fWrongUser:1;// Offset=0x14 Size=0x4 BitOffset=0x1e BitSize=0x1
    };
    struct _XOVERLAPPED Overlapped;// Offset=0x18 Size=0x1c
    unsigned char __align0[4];// Offset=0x34 Size=0x4
    struct XONLINE_MUTELIST_USER_INTERNAL MuteList[250];// Offset=0x38 Size=0xfa0
};

struct _XCONTENT_HEADER// Size=0x344 (Id=3151)
{
    union // Size=0x4 (Id=0)
    {
        enum _XCONTENT_SIGNATURE_TYPE SignatureType;// Offset=0x0 Size=0x4
        union <unnamed-type-Signature>// Size=0x228 (Id=33242)
        {
            struct _XE_CONSOLE_SIGNATURE ConsoleSignature;// Offset=0x0 Size=0x228
            struct _XCONTENT_SIGNATURE ContentSignature;// Offset=0x0 Size=0x228
        };
    };
    union _XCONTENT_HEADER::<unnamed-type-Signature> Signature;// Offset=0x4 Size=0x228
    struct _XCONTENT_LICENSE LicenseDescriptors[16];// Offset=0x22c Size=0x100
    unsigned char ContentId[20];// Offset=0x32c Size=0x14
    unsigned long SizeOfHeaders;// Offset=0x340 Size=0x4
};

struct XUIMessageSoundMute// Size=0x4 (Id=3152)
{
    int bMute;// Offset=0x0 Size=0x4
};

struct XUITextFormatInfo// Size=0x10 (Id=3153)
{
    int nStart;// Offset=0x0 Size=0x4
    int nEnd;// Offset=0x4 Size=0x4
    struct _XUIBRUSH * hBrush;// Offset=0x8 Size=0x4
    unsigned long dwTextColor;// Offset=0xc Size=0x4
};

class CXuiModule// Size=0x40 (Id=3154)
{
    public void CXuiModule(class CXuiModule & );
    public void CXuiModule();
    public void ~CXuiModule();
    public HRESULT Init(HRESULT  ( * )(struct IXuiDevice * ,wchar_t * ,struct XUIImageInfo * ,struct D3DTexture ** ),struct XUIInitParams * );
    public HRESULT Init();
    public HRESULT InitShared(struct D3DDevice * ,struct _D3DPRESENT_PARAMETERS_ * ,HRESULT  ( * )(struct IXuiDevice * ,wchar_t * ,struct XUIImageInfo * ,struct D3DTexture ** ),struct XUIInitParams * );
    public HRESULT InitShared(struct D3DDevice * ,struct _D3DPRESENT_PARAMETERS_ * );
    public HRESULT InitEx(struct XUIRenderInitParams * ,struct XUIInitParams * );
    public void Uninit();
    public HRESULT RegisterDefaultTypeface(wchar_t * ,wchar_t * ,wchar_t * ,float ,wchar_t * );
    public HRESULT RegisterTypeface(wchar_t * ,wchar_t * ,wchar_t * ,float ,wchar_t * );
    public HRESULT LoadSkin(wchar_t * ,wchar_t * );
    public HRESULT LoadFirstScene(wchar_t * ,wchar_t * ,void * ,struct _XUIOBJ ** ,unsigned char );
    public int Run();
    public void RunFrame(float );
    public void RunFrame();
    public HRESULT ProcessInput();
    public void Quit();
    public void Resume();
    public struct _XUIDC * GetDC();
    public void GetRootObj(class CXuiElement * );
    public struct _XUIOBJ * GetRootObj();
    public HRESULT Render();
    public HRESULT PreRender();
    private unsigned char __align0[8];// Offset=0x0 Size=0x8
    protected struct _XUIOBJ * m_hObjRoot;// Offset=0x8 Size=0x4
    protected struct _XUIDC * m_hDC;// Offset=0xc Size=0x4
    protected int m_bXuiInited;// Offset=0x10 Size=0x4
    protected int m_bInitRuntime;// Offset=0x14 Size=0x4
    protected int m_bQuit;// Offset=0x18 Size=0x4
    private unsigned char __align1[4];// Offset=0x1c Size=0x4
    protected class CXuiAnimRunner m_animRunner;// Offset=0x20 Size=0x10
    protected int m_bSkinLoaded;// Offset=0x30 Size=0x4
    protected int m_bDefaultTypefaceRegistered;// Offset=0x34 Size=0x4
    protected int m_bUsingEffects;// Offset=0x38 Size=0x4
    protected HRESULT RegisterXuiClasses();
    protected HRESULT UnregisterXuiClasses();
    protected HRESULT CreateMainCanvas();
    protected HRESULT InitCommon(struct XUIInitParams * );
    public class CXuiModule & operator=(class CXuiModule & );
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class CXuiModule// Size=0x40 (Id=3155)
{
    public void CXuiModule(class CXuiModule & );
    public void CXuiModule();
    public void ~CXuiModule();
    public HRESULT Init(HRESULT  ( * )(struct IXuiDevice * ,wchar_t * ,struct XUIImageInfo * ,struct D3DTexture ** ),struct XUIInitParams * );
    public HRESULT Init();
    public HRESULT InitShared(struct D3DDevice * ,struct _D3DPRESENT_PARAMETERS_ * ,HRESULT  ( * )(struct IXuiDevice * ,wchar_t * ,struct XUIImageInfo * ,struct D3DTexture ** ),struct XUIInitParams * );
    public HRESULT InitShared(struct D3DDevice * ,struct _D3DPRESENT_PARAMETERS_ * );
    public HRESULT InitEx(struct XUIRenderInitParams * ,struct XUIInitParams * );
    public void Uninit();
    public HRESULT RegisterDefaultTypeface(wchar_t * ,wchar_t * ,wchar_t * ,float ,wchar_t * );
    public HRESULT RegisterTypeface(wchar_t * ,wchar_t * ,wchar_t * ,float ,wchar_t * );
    public HRESULT LoadSkin(wchar_t * ,wchar_t * );
    public HRESULT LoadFirstScene(wchar_t * ,wchar_t * ,void * ,struct _XUIOBJ ** ,unsigned char );
    public int Run();
    public void RunFrame(float );
    public void RunFrame();
    public HRESULT ProcessInput();
    public void Quit();
    public void Resume();
    public struct _XUIDC * GetDC();
    public void GetRootObj(class CXuiElement * );
    public struct _XUIOBJ * GetRootObj();
    public HRESULT Render();
    public HRESULT PreRender();
    private unsigned char __align0[8];// Offset=0x0 Size=0x8
    protected struct _XUIOBJ * m_hObjRoot;// Offset=0x8 Size=0x4
    protected struct _XUIDC * m_hDC;// Offset=0xc Size=0x4
    protected int m_bXuiInited;// Offset=0x10 Size=0x4
    protected int m_bInitRuntime;// Offset=0x14 Size=0x4
    protected int m_bQuit;// Offset=0x18 Size=0x4
    private unsigned char __align1[4];// Offset=0x1c Size=0x4
    protected class CXuiAnimRunner m_animRunner;// Offset=0x20 Size=0x10
    protected int m_bSkinLoaded;// Offset=0x30 Size=0x4
    protected int m_bDefaultTypefaceRegistered;// Offset=0x34 Size=0x4
    protected int m_bUsingEffects;// Offset=0x38 Size=0x4
    protected HRESULT RegisterXuiClasses();
    protected HRESULT UnregisterXuiClasses();
    protected HRESULT CreateMainCanvas();
    protected HRESULT InitCommon(struct XUIInitParams * );
    public class CXuiModule & operator=(class CXuiModule & );
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

struct _VERIFY_BILLING_TOKEN_REQUEST// Size=0x13 (Id=3156)
{
    unsigned char bCountryId;// Offset=0x0 Size=0x1
    unsigned short wBillingTokenLength;// Offset=0x1 Size=0x2
    wchar_t * wszBillingToken;// Offset=0x3 Size=0x4
    unsigned long long userPuid;// Offset=0x7 Size=0x8
    struct _VERIFY_BILLING_TOKEN_RESPONSE * pResponse;// Offset=0xf Size=0x4
};

struct _GENERIC_LIST_ITEM_MODIFICATION_INFO// Size=0x16 (Id=3157)
{
    struct _GUID guidId;// Offset=0x0 Size=0x10
    unsigned short wXmlLength;// Offset=0x10 Size=0x2
    wchar_t * XmlProperties;// Offset=0x12 Size=0x4
};

struct _XRESOLVE_DOMAIN_STRING// Size=0x6 (Id=3158)
{
    unsigned short wNumStringChars;// Offset=0x0 Size=0x2
    wchar_t * pwszString;// Offset=0x2 Size=0x4
};

struct _XSIGNATURE_CERTIFY_PUBLIC_KEY_REQUEST// Size=0x122 (Id=3159)
{
    unsigned short wAppIdLength;// Offset=0x0 Size=0x2
    wchar_t * wszAppId;// Offset=0x2 Size=0x4
    unsigned long long qwUserID;// Offset=0x6 Size=0x8
    unsigned char abPublicKey[272];// Offset=0xe Size=0x110
    struct _XSIGNATURE_CERTIFY_PUBLIC_KEY_REPLY * pResponse;// Offset=0x11e Size=0x4
};

class CXuiHtmlElement : public CXuiElement// Size=0x4 (Id=3160)
{
    public void CXuiHtmlElement(struct _XUIOBJ * );
    public void CXuiHtmlElement();
    public wchar_t * GetText();
    public HRESULT SetText(wchar_t * );
    public void Attach(struct _XUIOBJ * );
    public HRESULT GetContentDims(struct XUIContentDims * );
    public HRESULT SetVScrollPos(int );
};

struct _VERIFY_PARENT_CREDIT_CARD_REQUEST// Size=0x94 (Id=3161)
{
    unsigned long long qwMachineId;// Offset=0x0 Size=0x8
    unsigned long dwTitleId;// Offset=0x8 Size=0x4
    struct _PASSPORT_SESSION_TOKEN pParentSessionToken[1];// Offset=0xc Size=0x1c
    unsigned short wParentPassportMemberNameLength;// Offset=0x28 Size=0x2
    char * szParentPassportMemberName;// Offset=0x2a Size=0x4
    unsigned short wLanguageId;// Offset=0x2e Size=0x2
    unsigned char bCountryId;// Offset=0x30 Size=0x1
    unsigned short wFirstNameLength;// Offset=0x31 Size=0x2
    wchar_t * wszFirstName;// Offset=0x33 Size=0x4
    unsigned short wLastNameLength;// Offset=0x37 Size=0x2
    wchar_t * wszLastName;// Offset=0x39 Size=0x4
    unsigned short wEmailLength;// Offset=0x3d Size=0x2
    wchar_t * wszEmail;// Offset=0x3f Size=0x4
    struct _ADDRESS_INFO address;// Offset=0x43 Size=0x24
    struct _PHONE_INFO phone;// Offset=0x67 Size=0x12
    struct _CREDIT_CARD_INFO creditCardInfo;// Offset=0x79 Size=0x1b
};

class CXuiScrollBar : public CXuiControl// Size=0x4 (Id=3162)
{
    public void CXuiScrollBar(struct _XUIOBJ * );
    public void CXuiScrollBar();
    public HRESULT SetItemData(unsigned long ,unsigned long ,unsigned long );
    public void Attach(struct _XUIOBJ * );
};

struct SYSUIINIT// Size=0x4 (Id=3163)
{
    struct _XUIOBJ * hAppCanvas;// Offset=0x0 Size=0x4
};

class CXStorageUploadWorker : public CXStorageTask// Size=0x1f10 (Id=3164)
{
    public void CXStorageUploadWorker(class CXStorageUploadWorker & );
    public void CXStorageUploadWorker();
    public HRESULT CustomInitialize();
    public void CustomCleanup();
    public unsigned long CustomGetObjectSize();
    public HRESULT CustomPrepareRequest();
    public HRESULT CustomContinueSubmitRequest();
    union // Size=0x1e74 (Id=0)
    {
        unsigned char __align0[7792];// Offset=0x0 Size=0x1e70
        class CXLiveSubTask * m_pSubTask;// Offset=0x1e70 Size=0x4
        struct RESOLVE_NAME_RESPONSE_BUFFER// Size=0x98 (Id=33391)
        {
            struct _XRESOLVE_NAME_RESPONSE Response;// Offset=0x0 Size=0x1a
            wchar_t awcStringBuffer[63];// Offset=0x1a Size=0x7e
        };
        unsigned char __align1[7644];// Offset=0x98 Size=0x1ddc
    };
    private struct CXStorageUploadWorker::RESOLVE_NAME_RESPONSE_BUFFER m_ResolveNameResponseBuffer;// Offset=0x1e74 Size=0x98
    public void ~CXStorageUploadWorker();
    public class CXStorageUploadWorker & operator=(class CXStorageUploadWorker & );
    public void * __vecDelDtor(unsigned int );
};

class CXStorageUploadWorker : public CXStorageTask// Size=0x1f10 (Id=3165)
{
    public void CXStorageUploadWorker(class CXStorageUploadWorker & );
    public void CXStorageUploadWorker();
    public HRESULT CustomInitialize();
    public void CustomCleanup();
    public unsigned long CustomGetObjectSize();
    public HRESULT CustomPrepareRequest();
    public HRESULT CustomContinueSubmitRequest();
    union // Size=0x1e74 (Id=0)
    {
        unsigned char __align0[7792];// Offset=0x0 Size=0x1e70
        class CXLiveSubTask * m_pSubTask;// Offset=0x1e70 Size=0x4
        struct RESOLVE_NAME_RESPONSE_BUFFER// Size=0x98 (Id=33391)
        {
            struct _XRESOLVE_NAME_RESPONSE Response;// Offset=0x0 Size=0x1a
            wchar_t awcStringBuffer[63];// Offset=0x1a Size=0x7e
        };
        unsigned char __align1[7644];// Offset=0x98 Size=0x1ddc
    };
    private struct CXStorageUploadWorker::RESOLVE_NAME_RESPONSE_BUFFER m_ResolveNameResponseBuffer;// Offset=0x1e74 Size=0x98
    public void ~CXStorageUploadWorker();
    public class CXStorageUploadWorker & operator=(class CXStorageUploadWorker & );
    public void * __vecDelDtor(unsigned int );
};

struct CXStorageUploadWorker::RESOLVE_NAME_RESPONSE_BUFFER// Size=0x98 (Id=3166)
{
    struct _XRESOLVE_NAME_RESPONSE Response;// Offset=0x0 Size=0x1a
    wchar_t awcStringBuffer[63];// Offset=0x1a Size=0x7e
};

class CListEntry : public _LIST_ENTRY// Size=0x8 (Id=3167)
{
    public void CListEntry();
    public class CListEntry * Next();
    public class CListEntry * Previous();
};

class CBaseEndianBuffer// Size=0x14 (Id=3168)
{
    public void CBaseEndianBuffer();
    public void ~CBaseEndianBuffer();
    union // Size=0xac (Id=0)
    {
        void Bind(unsigned char * ,unsigned long ,unsigned long ,int );// Offset=0x0 Size=0x1c
        HRESULT Rebind(unsigned char * ,unsigned long );
        void Reset();
        void Rewind();
        HRESULT Append(unsigned char * ,unsigned long );
        HRESULT AppendInPlace(unsigned long );
        void GetAppendLocationAndSize(unsigned char ** ,unsigned long * );
        unsigned char * GetBuffer();
        unsigned char * GetCurrentBufferLocation();
        unsigned long GetBufferSize();
        unsigned long GetConsumed();
        unsigned long GetRemainingSize();
        unsigned long GetAppendableSize();
        HRESULT SeekTo(unsigned long );// Offset=0x0 Size=0x24
        HRESULT SeekToRelative(long );
        HRESULT GetByte(unsigned char * );// Offset=0x0 Size=0x58
        HRESULT GetWord(unsigned short * );// Offset=0x0 Size=0x30
        HRESULT GetDword(unsigned long * );
        HRESULT GetQword(unsigned long long * );
        HRESULT GetFloat(float * );
        HRESULT GetDouble(float * );
        HRESULT GetValue(unsigned long long * ,unsigned long );
        HRESULT GetString(char * ,unsigned long * );
        HRESULT GetUnicodeString(wchar_t * ,unsigned long * );
        HRESULT GetData(unsigned char * ,unsigned long * );// Offset=0x0 Size=0x4c
        HRESULT GetStringPointer(char ** ,unsigned long * );
        HRESULT GetUnicodeStringPointer(wchar_t ** ,unsigned long * );
        HRESULT GetDataPointer(unsigned char ** ,unsigned long * );// Offset=0x0 Size=0x4
        HRESULT WriteBytes(unsigned char * ,unsigned long );// Offset=0x0 Size=0x74
        HRESULT WriteWords(unsigned short * ,unsigned long );// Offset=0x0 Size=0x80
        HRESULT WriteDwords(unsigned long * ,unsigned long );// Offset=0x0 Size=0x88
        HRESULT WriteQwords(unsigned long long * ,unsigned long );// Offset=0x0 Size=0xac
        HRESULT AppendBytes(unsigned long );// Offset=0x0 Size=0x34
        unsigned char * m_pbBuffer;// Offset=0x0 Size=0x4
        unsigned long m_cbBuffer;// Offset=0x4 Size=0x4
        unsigned long m_cbAvailable;// Offset=0x8 Size=0x4
        unsigned long m_cbConsumed;// Offset=0xc Size=0x4
        int m_fReverseEndian;// Offset=0x10 Size=0x4
        HRESULT GetPointerAndAdvance(unsigned char ** ,unsigned long * );// Offset=0x0 Size=0x50
        HRESULT GetStringPointerAndAdvance(unsigned char ** ,unsigned long * ,int );
        HRESULT GetDataAndAdvance(void * ,unsigned long * ,int );// Offset=0x0 Size=0xd8
    };
    protected HRESULT GetStringAndAdvance(void * ,unsigned long * ,int );
    public void * __vecDelDtor(unsigned int );
};

struct _RTL_HEAP_WALK_ENTRY// Size=0x1c (Id=3169)
{
    void * DataAddress;// Offset=0x0 Size=0x4
    unsigned long DataSize;// Offset=0x4 Size=0x4
    unsigned char OverheadBytes;// Offset=0x8 Size=0x1
    unsigned char SegmentIndex;// Offset=0x9 Size=0x1
    unsigned short Flags;// Offset=0xa Size=0x2
    union // Size=0x10 (Id=0)
    {
        struct _RTL_HEAP_WALK_ENTRY::_unnamed_3171::<unnamed-type-Block> Block;// Offset=0xc Size=0x10
        struct _RTL_HEAP_WALK_ENTRY::_unnamed_3170::<unnamed-type-Segment> Segment;// Offset=0xc Size=0x10
    };
};

struct _RTL_HEAP_WALK_ENTRY::_unnamed_3170::<unnamed-type-Segment>// Size=0x10 (Id=3170)
{
    unsigned long CommittedSize;// Offset=0x0 Size=0x4
    unsigned long UnCommittedSize;// Offset=0x4 Size=0x4
    void * FirstEntry;// Offset=0x8 Size=0x4
    void * LastEntry;// Offset=0xc Size=0x4
};

struct _RTL_HEAP_WALK_ENTRY::_unnamed_3171::<unnamed-type-Block>// Size=0x10 (Id=3171)
{
    unsigned long Settable;// Offset=0x0 Size=0x4
    unsigned short TagIndex;// Offset=0x4 Size=0x2
    unsigned short AllocatorBackTraceIndex;// Offset=0x6 Size=0x2
    unsigned long Reserved[2];// Offset=0x8 Size=0x8
};

struct _XUSAGE_STORE_REQUEST// Size=0xc (Id=3172)
{
    unsigned long dwXMLSize;// Offset=0x0 Size=0x4
    wchar_t * wszXML;// Offset=0x4 Size=0x4
    struct _XUSAGE_STORE_RESULT * pResult;// Offset=0x8 Size=0x4
};

class CXStorageUploadFromMemory : public CXStorageUploadParent// Size=0x1e40 (Id=3173)
{
    public void CXStorageUploadFromMemory(class CXStorageUploadFromMemory & );
    public void CXStorageUploadFromMemory();
    public HRESULT CustomInitialize();
    public void CustomCleanup();
    public unsigned long CustomGetObjectSize();
    public HRESULT CustomPrepareRequest();
    public HRESULT CustomContinueBuildRequest();
    public HRESULT CustomContinueProcessHttpHeaders();
    public void StorageUploadGetServerPath(wchar_t ** );
    public unsigned long StorageUploadGetSize();
    public HRESULT StorageUploadGetNextBlock(unsigned char ** ,unsigned long * );
    private unsigned char __align0[7712];// Offset=0x0 Size=0x1e20
    private unsigned long long m_xuidUser;// Offset=0x1e20 Size=0x8
    private unsigned long m_dwServerPathLength;// Offset=0x1e28 Size=0x4
    private wchar_t * m_pwszServerPath;// Offset=0x1e2c Size=0x4
    private unsigned char * m_pbBuffer;// Offset=0x1e30 Size=0x4
    private unsigned long m_dwBufferSize;// Offset=0x1e34 Size=0x4
    private class CXStorageUploadWorker * m_pUploadSubTask;// Offset=0x1e38 Size=0x4
    public void ~CXStorageUploadFromMemory();
    public class CXStorageUploadFromMemory & operator=(class CXStorageUploadFromMemory & );
    public void * __vecDelDtor(unsigned int );
};

class CXStorageUploadFromMemory : public CXStorageUploadParent// Size=0x1e40 (Id=3174)
{
    public void CXStorageUploadFromMemory(class CXStorageUploadFromMemory & );
    public void CXStorageUploadFromMemory();
    public HRESULT CustomInitialize();
    public void CustomCleanup();
    public unsigned long CustomGetObjectSize();
    public HRESULT CustomPrepareRequest();
    public HRESULT CustomContinueBuildRequest();
    public HRESULT CustomContinueProcessHttpHeaders();
    public void StorageUploadGetServerPath(wchar_t ** );
    public unsigned long StorageUploadGetSize();
    public HRESULT StorageUploadGetNextBlock(unsigned char ** ,unsigned long * );
    private unsigned char __align0[7712];// Offset=0x0 Size=0x1e20
    private unsigned long long m_xuidUser;// Offset=0x1e20 Size=0x8
    private unsigned long m_dwServerPathLength;// Offset=0x1e28 Size=0x4
    private wchar_t * m_pwszServerPath;// Offset=0x1e2c Size=0x4
    private unsigned char * m_pbBuffer;// Offset=0x1e30 Size=0x4
    private unsigned long m_dwBufferSize;// Offset=0x1e34 Size=0x4
    private class CXStorageUploadWorker * m_pUploadSubTask;// Offset=0x1e38 Size=0x4
    public void ~CXStorageUploadFromMemory();
    public class CXStorageUploadFromMemory & operator=(class CXStorageUploadFromMemory & );
    public void * __vecDelDtor(unsigned int );
};

struct XnTitleState// Size=0x20 (Id=3175)
{
    unsigned char * pbBuffer;// Offset=0x0 Size=0x4
    unsigned long dwBufferSize;// Offset=0x4 Size=0x4
    unsigned int * paSockets;// Offset=0x8 Size=0x4
    unsigned long dwNumSockets;// Offset=0xc Size=0x4
    struct in_addr * painaddrs;// Offset=0x10 Size=0x4
    unsigned long dwNumInAddrs;// Offset=0x14 Size=0x4
    struct XNKID * paxnkids;// Offset=0x18 Size=0x4
    unsigned long dwNumXnkids;// Offset=0x1c Size=0x4
};

struct XNetConfigPppoe// Size=0x18c (Id=3176)
{
    char achServer[40];// Offset=0x0 Size=0x28
    unsigned int cpchService;// Offset=0x28 Size=0x4
    char * apchService[8];// Offset=0x2c Size=0x20
    char achBuffer[320];// Offset=0x4c Size=0x140
};

class CXHttpDownloadToFile : public CXHttpDownloadBase// Size=0x1e30 (Id=3177)
{
    public void CXHttpDownloadToFile(class CXHttpDownloadToFile & );
    public void CXHttpDownloadToFile();
    public HRESULT CustomInitialize();
    public void CustomCleanup();
    public unsigned long CustomGetObjectSize();
    protected HRESULT HandleResponseData();
    private unsigned char __align0[7720];// Offset=0x0 Size=0x1e28
    protected void * m_hFile;// Offset=0x1e28 Size=0x4
    public void ~CXHttpDownloadToFile();
    public class CXHttpDownloadToFile & operator=(class CXHttpDownloadToFile & );
    public void * __vecDelDtor(unsigned int );
};

class CXHttpDownloadToFile : public CXHttpDownloadBase// Size=0x1e30 (Id=3178)
{
    public void CXHttpDownloadToFile(class CXHttpDownloadToFile & );
    public void CXHttpDownloadToFile();
    public HRESULT CustomInitialize();
    public void CustomCleanup();
    public unsigned long CustomGetObjectSize();
    protected HRESULT HandleResponseData();
    private unsigned char __align0[7720];// Offset=0x0 Size=0x1e28
    protected void * m_hFile;// Offset=0x1e28 Size=0x4
    public void ~CXHttpDownloadToFile();
    public class CXHttpDownloadToFile & operator=(class CXHttpDownloadToFile & );
    public void * __vecDelDtor(unsigned int );
};

struct _PASSPORT_GET_MEMBER_NAME_RESPONSE// Size=0x12 (Id=3179)
{
    unsigned short wUserPmnLength;// Offset=0x0 Size=0x2
    wchar_t * wszUserPmn;// Offset=0x2 Size=0x4
    unsigned short wParentPmnLength;// Offset=0x6 Size=0x2
    wchar_t * wszParentPmn;// Offset=0x8 Size=0x4
    unsigned short wCidLength;// Offset=0xc Size=0x2
    wchar_t * wszCid;// Offset=0xe Size=0x4
};

struct XUINotifyComboBoxListOpening// Size=0x14 (Id=3180)
{
    float fX;// Offset=0x0 Size=0x4
    float fY;// Offset=0x4 Size=0x4
    float fWidth;// Offset=0x8 Size=0x4
    float fHeight;// Offset=0xc Size=0x4
    int bOpening;// Offset=0x10 Size=0x4
};

struct _PHONE_INFO// Size=0x12 (Id=3181)
{
    unsigned short wPhonePrefixLength;// Offset=0x0 Size=0x2
    wchar_t * wszPhonePrefix;// Offset=0x2 Size=0x4
    unsigned short wPhoneNumberLength;// Offset=0x6 Size=0x2
    wchar_t * wszPhoneNumber;// Offset=0x8 Size=0x4
    unsigned short wPhoneExtensionLength;// Offset=0xc Size=0x2
    wchar_t * wszPhoneExtension;// Offset=0xe Size=0x4
};

struct XUIMessageSmoothScroll// Size=0x18 (Id=3182)
{
    enum XUI_SMOOTHSCROLL_ORIENTATION orientation;// Offset=0x0 Size=0x4
    int bEnabled;// Offset=0x4 Size=0x4
    float fBaseSpeed;// Offset=0x8 Size=0x4
    float fAccel;// Offset=0xc Size=0x4
    float fMaxSpeed;// Offset=0x10 Size=0x4
    float fVelocity;// Offset=0x14 Size=0x4
};

class CSchemaInMemory : public CSchemaData// Size=0x4c (Id=3183)
{
    public HRESULT Bind(unsigned char * ,unsigned long );// Offset=0x0 Size=0xc4
    public void CSchemaInMemory();
};

struct _XMSG_INVITE_SEND_MESSAGE_PARAMS// Size=0x18 (Id=3184)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long dwNumInvitees;// Offset=0x4 Size=0x4
    unsigned long long * pXuidInvitees;// Offset=0x8 Size=0x4
    unsigned long cchText;// Offset=0xc Size=0x4
    wchar_t * pszText;// Offset=0x10 Size=0x4
    void * hMsg;// Offset=0x14 Size=0x4
};

struct XUIMessageGetSetBasePath// Size=0x4 (Id=3185)
{
    wchar_t * szPath;// Offset=0x0 Size=0x4
};

struct _XNPARPENTRY// Size=0x10 (Id=3186)
{
    unsigned long dwFlags;// Offset=0x0 Size=0x4
    struct in_addr inaddr;// Offset=0x4 Size=0x4
    unsigned char abEnet[6];// Offset=0x8 Size=0x6
};

struct _EntryBaseData// Size=0x1c (Id=3187)
{
    wchar_t * pwszName;// Offset=0x0 Size=0x4
    enum ActionType eType;// Offset=0x4 Size=0x4
    wchar_t * pwszParam;// Offset=0x8 Size=0x4
    wchar_t * pwszParam2;// Offset=0xc Size=0x4
    wchar_t * pwszParam3;// Offset=0x10 Size=0x4
    wchar_t * pwszParam4;// Offset=0x14 Size=0x4
    wchar_t * pwszParam5;// Offset=0x18 Size=0x4
};

struct XUIMessageContentDims// Size=0x10 (Id=3188)
{
    struct XUIContentDims contentDims;// Offset=0x0 Size=0x10
};

struct _GET_ACCOUNT_INFO_RESPONSE// Size=0x56 (Id=3189)
{
    unsigned short wFirstNameLength;// Offset=0x0 Size=0x2
    wchar_t * wszFirstName;// Offset=0x2 Size=0x4
    unsigned short wLastNameLength;// Offset=0x6 Size=0x2
    wchar_t * wszLastName;// Offset=0x8 Size=0x4
    struct _FILETIME ftBirthdate;// Offset=0xc Size=0x8
    unsigned short wEmailLength;// Offset=0x14 Size=0x2
    wchar_t * wszEmail;// Offset=0x16 Size=0x4
    struct _ADDRESS_INFO addressInfo;// Offset=0x1a Size=0x24
    struct _PHONE_INFO phoneInfo;// Offset=0x3e Size=0x12
    unsigned short wLanguageId;// Offset=0x50 Size=0x2
    unsigned char bCountryId;// Offset=0x52 Size=0x1
    unsigned char bMsftOptIn;// Offset=0x53 Size=0x1
    unsigned char bParterOptIn;// Offset=0x54 Size=0x1
    unsigned char bIsLightWeight;// Offset=0x55 Size=0x1
};

struct XnQosLookupInfo// Size=0x88 (Id=3190)
{
    struct XNQOS * pxnqos;// Offset=0x0 Size=0x4
    enum _XNCALLER_TYPE CallerType;// Offset=0x4 Size=0x4
    unsigned long dwInfoFlags;// Offset=0x8 Size=0x4
    struct in_addr inaddrTarget;// Offset=0xc Size=0x4
    unsigned short wTargetPort;// Offset=0x10 Size=0x2
    unsigned char bState;// Offset=0x12 Size=0x1
    unsigned char bRetry;// Offset=0x13 Size=0x1
    struct in_addr inaddrSec;// Offset=0x14 Size=0x4
    unsigned long dwNumProbesRequest;// Offset=0x18 Size=0x4
    unsigned long dwNumProbesXmit;// Offset=0x1c Size=0x4
    unsigned long dwNumProbesRecv;// Offset=0x20 Size=0x4
    unsigned long dwDataReceived;// Offset=0x24 Size=0x4
    unsigned long dwBitsPerSec;// Offset=0x28 Size=0x4
    struct XNKID xnkid;// Offset=0x2c Size=0x8
    struct XNADDR xnaddr;// Offset=0x34 Size=0x24
    unsigned char abReserved[48];// Offset=0x58 Size=0x30
};

struct CFFILE// Size=0x10 (Id=3191)
{
    long cbFile;// Offset=0x0 Size=0x4
    unsigned long uoffFolderStart;// Offset=0x4 Size=0x4
    unsigned short iFolder;// Offset=0x8 Size=0x2
    unsigned short date;// Offset=0xa Size=0x2
    unsigned short time;// Offset=0xc Size=0x2
    unsigned short attribs;// Offset=0xe Size=0x2
};

class CXCabStreamUnpacker// Size=0x10ce8 (Id=3192)
{
    public void Initialize(class CLittleEndianBuffer * ,unsigned char * ,unsigned long ,unsigned char * ,unsigned long ,unsigned char * ,unsigned long ,char * );
    public HRESULT PrepareToResume(struct _XONLINECONTENT_RESUME_HEADER * );
    public void AbortResume();
    public void Cleanup();
    public HRESULT Continue();
    public enum _XCAB_STREAM_UNPACK_STATE GetState();
    public int IsResuming();
    public int IsSingleFile();
    public void GetBytesProcessed(union _LARGE_INTEGER * );
    public unsigned long GetCabSize();
    public unsigned long GetSymmetricKeySize();
    public unsigned long GetPublicKeySize();
    public struct _XSIGNATURE_TO_VERIFY * GetHeaderSignatureForVerification();
    public void DoHeaderVerified();
    public unsigned long GetTotalCacheDataSize();
    public HRESULT GetInitialCacheDataBlock(unsigned char * ,unsigned long * );
    public unsigned long GetTotalFileDataCacheBlocksSize();
    public HRESULT ResumeCacheDataBlock(unsigned char * ,unsigned long * );
    public int GetUpdatedProgressCache(struct _XONLINECONTENT_RESUME_HEADER * );
    public void DoInitialCacheWritten();
    public void GetFileDataCacheBlock(unsigned long * ,unsigned char ** ,unsigned long * );
    public void DoFileDataCacheBlockWritten();
    public void GetCurrentFileName(char * ,unsigned long );
    public void GetCurrentFileSize(union _LARGE_INTEGER * );
    public void DoNewFileHandled();
    public void GetReadCacheBlock(unsigned long * ,unsigned char ** ,unsigned long * );
    public HRESULT DoCacheBlockHasBeenRead();
    public HRESULT DoFileDataBeginHandled();
    public void GetCurrentData(unsigned char ** ,unsigned long * );
    public HRESULT DoFileDataHandled();
    public void DoFileDataEndHandled();
    public unsigned long GetResumeDataSize();
    private HRESULT ContinueContentHeader();
    private HRESULT ContinueFolders();
    private HRESULT ContinueFileHeader();
    private HRESULT ContinueFileName();
    private HRESULT ContinuePreDataPadding();
    private HRESULT ContinueDataHeader();
    private HRESULT ContinueDataBlock();
    private HRESULT ValidateContentHeader();
    private HRESULT ValidateFileHeader(struct CFFILE * );
    private HRESULT ValidateDataHeader();
    union // Size=0x1020 (Id=0)
    {
        enum _XCAB_STREAM_UNPACK_STATE m_State;// Offset=0x0 Size=0x4
        struct // Size=0x4 (Id=0)
        {
            unsigned long m_fResuming:1;// Offset=0x4 Size=0x4 BitOffset=0x1f BitSize=0x1
            unsigned long m_fResumedFileHeaders:1;// Offset=0x4 Size=0x4 BitOffset=0x1e BitSize=0x1
            unsigned long m_fSingleFile:1;// Offset=0x4 Size=0x4 BitOffset=0x1d BitSize=0x1
        };
        class CLittleEndianBuffer * m_pSourceBuffer;// Offset=0x8 Size=0x4
        unsigned char __align0[4];// Offset=0xc Size=0x4
        union _LARGE_INTEGER m_liBytesProcessed;// Offset=0x10 Size=0x8
        struct XONLINECONTENT_HEADER m_ContentHeader;// Offset=0x18 Size=0x60
        struct _XSIGNATURE_TO_VERIFY m_ContentHeaderSignature;// Offset=0x78 Size=0x78
        struct CFFOLDER_HMAC m_aCfFolderHmac[100];// Offset=0xf0 Size=0xe10
        unsigned long m_dwCurrentFolder;// Offset=0xf00 Size=0x4
        unsigned long m_dwCurrentFileIndex;// Offset=0xf04 Size=0x4
        struct _XONLINE_CACHE_CFFILE m_CurrentFile;// Offset=0xf08 Size=0x114
        unsigned long m_dwFileNameReceived;// Offset=0x101c Size=0x4
        union <unnamed-type-m_SavedFileInfo>// Size=0x114 (Id=33801)
        {
            struct CFFILE cffileNext;// Offset=0x0 Size=0x10
            struct _XONLINE_CACHE_CFFILE PreviousCached;// Offset=0x0 Size=0x114
        };
        unsigned char __align1[3852];// Offset=0x114 Size=0xf0c
    };
    private union CXCabStreamUnpacker::<unnamed-type-m_SavedFileInfo> m_SavedFileInfo;// Offset=0x1020 Size=0x114
    private unsigned char __align2[4];// Offset=0x1134 Size=0x4
    private union _LARGE_INTEGER m_liTotalFileSize;// Offset=0x1138 Size=0x8
    private union _LARGE_INTEGER m_liCurrentFileOffset;// Offset=0x1140 Size=0x8
    private struct CFDATA m_CurrentCfData;// Offset=0x1148 Size=0x8
    private unsigned long m_dwCurrentFileDataOffset;// Offset=0x1150 Size=0x4
    private unsigned long m_dwResumeFileIndex;// Offset=0x1154 Size=0x4
    private union _LARGE_INTEGER m_liResumeFileOffset;// Offset=0x1158 Size=0x8
    private union _LARGE_INTEGER m_liResumeProcessedOffset;// Offset=0x1160 Size=0x8
    private class CXCabCryptHelper m_CabCryptHelper;// Offset=0x1168 Size=0x1d4
    private unsigned char * m_pbSymmetricKey;// Offset=0x133c Size=0x4
    private unsigned long m_dwSymmetricKeySize;// Offset=0x1340 Size=0x4
    private unsigned char * m_pbPublicKey;// Offset=0x1344 Size=0x4
    private unsigned long m_dwPublicKeySize;// Offset=0x1348 Size=0x4
    private struct t_decoder_context m_LzxDecoderContext;// Offset=0x134c Size=0x7994
    private unsigned char m_abDecompressed[32768];// Offset=0x8ce0 Size=0x8000
    private unsigned long m_dwDecompressedSize;// Offset=0x10ce0 Size=0x4
};

union CXCabStreamUnpacker::<unnamed-type-m_SavedFileInfo>// Size=0x114 (Id=3193)
{
    struct CFFILE cffileNext;// Offset=0x0 Size=0x10
    struct _XONLINE_CACHE_CFFILE PreviousCached;// Offset=0x0 Size=0x114
};

struct _IRP// Size=0x60 (Id=3194)
{
    union // Size=0x30 (Id=0)
    {
        short Type;// Offset=0x0 Size=0x2
        unsigned short Size;// Offset=0x2 Size=0x2
        unsigned long Flags;// Offset=0x4 Size=0x4
        struct _LIST_ENTRY ThreadListEntry;// Offset=0x8 Size=0x8
        struct _IO_STATUS_BLOCK IoStatus;// Offset=0x10 Size=0x8
        char StackCount;// Offset=0x18 Size=0x1
        char CurrentLocation;// Offset=0x19 Size=0x1
        unsigned char PendingReturned;// Offset=0x1a Size=0x1
        unsigned char Cancel;// Offset=0x1b Size=0x1
        void * UserBuffer;// Offset=0x1c Size=0x4
        struct _IO_STATUS_BLOCK * UserIosb;// Offset=0x20 Size=0x4
        struct _KEVENT * UserEvent;// Offset=0x24 Size=0x4
        union <unnamed-type-Overlay>// Size=0x8 (Id=33832)
        {
            struct <unnamed-type-AsynchronousParameters>// Size=0x8 (Id=33833)
            {
                void  ( * UserApcRoutine)(void * ,struct _IO_STATUS_BLOCK * ,unsigned long );// Offset=0x0 Size=0x4
                void * UserApcContext;// Offset=0x4 Size=0x4
            };
            struct _IRP::<unnamed-type-Overlay>::<unnamed-type-AsynchronousParameters> AsynchronousParameters;// Offset=0x0 Size=0x8
            union _LARGE_INTEGER AllocationSize;// Offset=0x0 Size=0x8
        };
        unsigned char __align0[32];// Offset=0x8 Size=0x20
        union _IRP::<unnamed-type-Overlay> Overlay;// Offset=0x28 Size=0x8
        union <unnamed-type-Tail>// Size=0x28 (Id=33839)
        {
            struct <unnamed-type-Overlay>// Size=0x28 (Id=33840)
            {
                struct _KDEVICE_QUEUE_ENTRY DeviceQueueEntry;// Offset=0x0 Size=0x10
                struct _LIST_ENTRY DeviceListEntry;// Offset=0x0 Size=0x8
                void * DriverContext[4];// Offset=0x0 Size=0x10
                unsigned long LockedBufferLength;// Offset=0x10 Size=0x4
                struct _KTHREAD * Thread;// Offset=0x14 Size=0x4
                struct _LIST_ENTRY ListEntry;// Offset=0x18 Size=0x8
                struct _IO_STACK_LOCATION * CurrentStackLocation;// Offset=0x20 Size=0x4
                unsigned long PacketType;// Offset=0x20 Size=0x4
                struct _FILE_OBJECT * OriginalFileObject;// Offset=0x24 Size=0x4
            };
            struct _IRP::<unnamed-type-Tail>::<unnamed-type-Overlay> Overlay;// Offset=0x0 Size=0x28
            struct _KAPC Apc;// Offset=0x0 Size=0x28
            void * CompletionKey;// Offset=0x0 Size=0x4
        };
        unsigned char __align1[8];// Offset=0x28 Size=0x8
    };
    union _IRP::<unnamed-type-Tail> Tail;// Offset=0x30 Size=0x28
    void  ( * CancelRoutine)(struct _DEVICE_OBJECT * ,struct _IRP * );// Offset=0x58 Size=0x4
};

union _IRP::<unnamed-type-Tail>// Size=0x28 (Id=3195)
{
    union // Size=0x28 (Id=0)
    {
        struct <unnamed-type-Overlay>// Size=0x28 (Id=33840)
        {
            struct _KDEVICE_QUEUE_ENTRY DeviceQueueEntry;// Offset=0x0 Size=0x10
            struct _LIST_ENTRY DeviceListEntry;// Offset=0x0 Size=0x8
            void * DriverContext[4];// Offset=0x0 Size=0x10
            unsigned long LockedBufferLength;// Offset=0x10 Size=0x4
            struct _KTHREAD * Thread;// Offset=0x14 Size=0x4
            struct _LIST_ENTRY ListEntry;// Offset=0x18 Size=0x8
            struct _IO_STACK_LOCATION * CurrentStackLocation;// Offset=0x20 Size=0x4
            unsigned long PacketType;// Offset=0x20 Size=0x4
            struct _FILE_OBJECT * OriginalFileObject;// Offset=0x24 Size=0x4
        };
        struct _IRP::<unnamed-type-Tail>::<unnamed-type-Overlay> Overlay;// Offset=0x0 Size=0x28
        struct _KAPC Apc;// Offset=0x0 Size=0x28
        void * CompletionKey;// Offset=0x0 Size=0x4
    };
};

struct _IRP::<unnamed-type-Tail>::<unnamed-type-Overlay>// Size=0x28 (Id=3196)
{
    union // Size=0x10 (Id=0)
    {
        struct _KDEVICE_QUEUE_ENTRY DeviceQueueEntry;// Offset=0x0 Size=0x10
        struct _LIST_ENTRY DeviceListEntry;// Offset=0x0 Size=0x8
        void * DriverContext[4];// Offset=0x0 Size=0x10
    };
    unsigned long LockedBufferLength;// Offset=0x10 Size=0x4
    struct _KTHREAD * Thread;// Offset=0x14 Size=0x4
    struct _LIST_ENTRY ListEntry;// Offset=0x18 Size=0x8
    union // Size=0x4 (Id=0)
    {
        struct _IO_STACK_LOCATION * CurrentStackLocation;// Offset=0x20 Size=0x4
        unsigned long PacketType;// Offset=0x20 Size=0x4
    };
    struct _FILE_OBJECT * OriginalFileObject;// Offset=0x24 Size=0x4
};

union _IRP::<unnamed-type-Overlay>// Size=0x8 (Id=3197)
{
    struct <unnamed-type-AsynchronousParameters>// Size=0x8 (Id=33833)
    {
        void  ( * UserApcRoutine)(void * ,struct _IO_STATUS_BLOCK * ,unsigned long );// Offset=0x0 Size=0x4
        void * UserApcContext;// Offset=0x4 Size=0x4
    };
    struct _IRP::<unnamed-type-Overlay>::<unnamed-type-AsynchronousParameters> AsynchronousParameters;// Offset=0x0 Size=0x8
    union _LARGE_INTEGER AllocationSize;// Offset=0x0 Size=0x8
};

struct _IRP::<unnamed-type-Overlay>::<unnamed-type-AsynchronousParameters>// Size=0x8 (Id=3198)
{
    void  ( * UserApcRoutine)(void * ,struct _IO_STATUS_BLOCK * ,unsigned long );// Offset=0x0 Size=0x4
    void * UserApcContext;// Offset=0x4 Size=0x4
};

struct _XLIVEBASE_GET_TASK_PROGRESS// Size=0x10 (Id=3199)
{
    struct _XOVERLAPPED * pXOverlapped;// Offset=0x0 Size=0x4
    unsigned long * pdwPercentComplete;// Offset=0x4 Size=0x4
    unsigned long long * pqwNumerator;// Offset=0x8 Size=0x4
    unsigned long long * pqwDenominator;// Offset=0xc Size=0x4
};

struct XUITimeline// Size=0x50 (Id=3200)
{
    void * operator new(unsigned int ,void * );
    void * operator new(unsigned int );
    void * operator new[](unsigned int );
    void operator delete(void * );
    void operator delete[](void * );
    struct _XUIOBJ * m_hObj;// Offset=0x0 Size=0x4
    struct XUITimelineCtl m_state;// Offset=0x4 Size=0x18
    int m_nNumTimelines;// Offset=0x1c Size=0x4
    struct XUISubtimeline * m_pTimelines;// Offset=0x20 Size=0x4
    struct XUINamedFrame * m_pNamedFrames;// Offset=0x24 Size=0x4
    int m_nNumNamedFrames;// Offset=0x28 Size=0x4
    int m_bSharedNamedFrames;// Offset=0x2c Size=0x4
    struct XUIObjectData * m_pNamedFrameOwner;// Offset=0x30 Size=0x4
    int m_nAnimLength;// Offset=0x34 Size=0x4
    unsigned long m_dwFlags;// Offset=0x38 Size=0x4
    int m_nInitialFrameOffset;// Offset=0x3c Size=0x4
    int m_nCurrNamedFrame;// Offset=0x40 Size=0x4
    int m_bStopOnNext;// Offset=0x44 Size=0x4
    int m_bPlayOnNext;// Offset=0x48 Size=0x4
    float m_fCurrTime;// Offset=0x4c Size=0x4
    void XUITimeline();
    void ~XUITimeline();
    struct XUINamedFrame * FindNamedFrame(wchar_t * );
    int FindNextNamedFrameAtTime(int ,unsigned long );
    HRESULT SetSubtimeline(struct XUISubtimeline * ,int );
    void SetTimelines(struct XUISubtimeline * ,int );
    void UpdateAnimLength();
    void Stop();
    void Play(int ,int ,int ,int ,int );
    void GotoFrame(int );
    int GetAnimLength();
    void Clear();
    void ClearTimelines();
    void Run(float );
    int IsStopped();
    void NotifyOwner(unsigned long );
    void * __vecDelDtor(unsigned int );
};

union _XCONTENT_HEADER::<unnamed-type-Signature>// Size=0x228 (Id=3201)
{
    struct _XE_CONSOLE_SIGNATURE ConsoleSignature;// Offset=0x0 Size=0x228
    struct _XCONTENT_SIGNATURE ContentSignature;// Offset=0x0 Size=0x228
};

struct XnSecAssocInfo// Size=0x78 (Id=3202)
{
    struct in_addr inaddrSec;// Offset=0x0 Size=0x4
    enum _XNCALLER_TYPE CallerType;// Offset=0x4 Size=0x4
    unsigned long dwInfoFlags;// Offset=0x8 Size=0x4
    unsigned long dwReserved1;// Offset=0xc Size=0x4
    struct XNKID xnkid;// Offset=0x10 Size=0x8
    struct XNADDR xnaddr;// Offset=0x18 Size=0x24
    unsigned long dwServiceId;// Offset=0x3c Size=0x4
    struct in_addr inaddrRemote;// Offset=0x40 Size=0x4
    unsigned short wRemotePort;// Offset=0x44 Size=0x2
    unsigned char bState;// Offset=0x46 Size=0x1
    unsigned char bReserved2;// Offset=0x47 Size=0x1
    struct in_addr inaddrNat;// Offset=0x48 Size=0x4
    unsigned short wNatPort;// Offset=0x4c Size=0x2
    unsigned char abReserved3[42];// Offset=0x4e Size=0x2a
};

struct _XSTORAGE_DOWNLOAD_TO_MEMORY_PARAMS// Size=0x18 (Id=3203)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long dwServerPathLength;// Offset=0x4 Size=0x4
    wchar_t * wszServerPath;// Offset=0x8 Size=0x4
    unsigned long dwBufferSize;// Offset=0xc Size=0x4
    unsigned long dwBufferPointer;// Offset=0x10 Size=0x4
    struct _XSTORAGE_DOWNLOAD_TO_MEMORY_RESULTS * pResults;// Offset=0x14 Size=0x4
};

struct _REMOVE_PAYMENT_INSTRUMENT_REQUEST// Size=0x16 (Id=3204)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned long long qwMachineId;// Offset=0x8 Size=0x8
    unsigned short wPaymentInstrumentIdLength;// Offset=0x10 Size=0x2
    wchar_t * wszPaymentInstrumentId;// Offset=0x12 Size=0x4
};

struct XUIMessageHittest// Size=0xc (Id=3205)
{
    struct tagPOINT pt;// Offset=0x0 Size=0x8
    int bHit;// Offset=0x8 Size=0x4
};

class CXPackageDownload : public CContentAndUpdateBase// Size=0x341d8 (Id=3206)
{
    public void CXPackageDownload(class CXPackageDownload & );
    public void CXPackageDownload();
    public HRESULT CustomInitialize();
    public unsigned long CustomGetObjectSize();
    public HRESULT CustomPrepareRequest();
    public HRESULT CustomContinueBuildRequest();
    public HRESULT ContentAndUpdateOpenInProgressPackage();
    public HRESULT ContentAndUpdateCreateInstallerPackage();
    public HRESULT ContentAndUpdateHandleResponseDataComplete();
    private unsigned char __align0[175576];// Offset=0x0 Size=0x2add8
    private unsigned long m_dwUrlLength;// Offset=0x2add8 Size=0x4
    private char * m_pszUrl;// Offset=0x2addc Size=0x4
    private unsigned long m_dwPackagePathLength;// Offset=0x2ade0 Size=0x4
    private char * m_pszPackagePath;// Offset=0x2ade4 Size=0x4
    private unsigned long long m_qwPackageId;// Offset=0x2ade8 Size=0x8
    private unsigned long m_dwPackageVersion;// Offset=0x2adf0 Size=0x4
    private unsigned long m_dwPackageSize;// Offset=0x2adf4 Size=0x4
    private struct _XREFERRAL_LOCATION m_ReferralLocation;// Offset=0x2adf8 Size=0x8
    private struct _XCONTENT_METADATA m_ContentMetaData;// Offset=0x2ae00 Size=0x93d6
    public void ~CXPackageDownload();
    public class CXPackageDownload & operator=(class CXPackageDownload & );
    public void * __vecDelDtor(unsigned int );
};

class CXPackageDownload : public CContentAndUpdateBase// Size=0x341d8 (Id=3207)
{
    public void CXPackageDownload(class CXPackageDownload & );
    public void CXPackageDownload();
    public HRESULT CustomInitialize();
    public unsigned long CustomGetObjectSize();
    public HRESULT CustomPrepareRequest();
    public HRESULT CustomContinueBuildRequest();
    public HRESULT ContentAndUpdateOpenInProgressPackage();
    public HRESULT ContentAndUpdateCreateInstallerPackage();
    public HRESULT ContentAndUpdateHandleResponseDataComplete();
    private unsigned char __align0[175576];// Offset=0x0 Size=0x2add8
    private unsigned long m_dwUrlLength;// Offset=0x2add8 Size=0x4
    private char * m_pszUrl;// Offset=0x2addc Size=0x4
    private unsigned long m_dwPackagePathLength;// Offset=0x2ade0 Size=0x4
    private char * m_pszPackagePath;// Offset=0x2ade4 Size=0x4
    private unsigned long long m_qwPackageId;// Offset=0x2ade8 Size=0x8
    private unsigned long m_dwPackageVersion;// Offset=0x2adf0 Size=0x4
    private unsigned long m_dwPackageSize;// Offset=0x2adf4 Size=0x4
    private struct _XREFERRAL_LOCATION m_ReferralLocation;// Offset=0x2adf8 Size=0x8
    private struct _XCONTENT_METADATA m_ContentMetaData;// Offset=0x2ae00 Size=0x93d6
    public void ~CXPackageDownload();
    public class CXPackageDownload & operator=(class CXPackageDownload & );
    public void * __vecDelDtor(unsigned int );
};

struct XUITimelineCtl// Size=0x18 (Id=3208)
{
    void * operator new(unsigned int ,void * );
    void * operator new(unsigned int );
    void * operator new[](unsigned int );
    void operator delete(void * );
    void operator delete[](void * );
    unsigned long m_nState;// Offset=0x0 Size=0x4
    int m_nRangeStart;// Offset=0x4 Size=0x4
    int m_nRangeEnd;// Offset=0x8 Size=0x4
    int m_bLoop;// Offset=0xc Size=0x4
    int m_nNotifyStart;// Offset=0x10 Size=0x4
    int m_nNotifyEnd;// Offset=0x14 Size=0x4
    void XUITimelineCtl();
    void Reset();
};

struct XUITimelinePropPath// Size=0xc (Id=3209)
{
    void * operator new(unsigned int ,void * );
    void * operator new(unsigned int );
    void * operator new[](unsigned int );
    void operator delete(void * );
    void operator delete[](void * );
    unsigned long m_dwFlags;// Offset=0x0 Size=0x4
    int m_nPathDepth;// Offset=0x4 Size=0x4
    struct XUIElementPropDef ** m_ppPropDefs;// Offset=0x8 Size=0x4
    void XUITimelinePropPath();
    void ~XUITimelinePropPath();
    void Clear();
    HRESULT CopyTo(struct XUITimelinePropPath * );
    void * __vecDelDtor(unsigned int );
};

struct XUITimelinePropPath// Size=0xc (Id=3210)
{
    void * operator new(unsigned int ,void * );
    void * operator new(unsigned int );
    void * operator new[](unsigned int );
    void operator delete(void * );
    void operator delete[](void * );
    unsigned long m_dwFlags;// Offset=0x0 Size=0x4
    int m_nPathDepth;// Offset=0x4 Size=0x4
    struct XUIElementPropDef ** m_ppPropDefs;// Offset=0x8 Size=0x4
    void XUITimelinePropPath();
    void ~XUITimelinePropPath();
    void Clear();
    HRESULT CopyTo(struct XUITimelinePropPath * );
    void * __vecDelDtor(unsigned int );
};

struct SCHEMA_HEADER// Size=0x2c (Id=3211)
{
    unsigned short SchemaVersionMajor;// Offset=0x0 Size=0x2
    unsigned short SchemaVersionMinor;// Offset=0x2 Size=0x2
    unsigned long ToolVersion;// Offset=0x4 Size=0x4
    unsigned long Flags;// Offset=0x8 Size=0x4
    unsigned long CompressedSize;// Offset=0xc Size=0x4
    unsigned long UncompressedSize;// Offset=0x10 Size=0x4
    unsigned long ConstantsTableOffset;// Offset=0x14 Size=0x4
    unsigned short ConstantsTableSize;// Offset=0x18 Size=0x2
    unsigned short ConstantSize;// Offset=0x1a Size=0x2
    unsigned long UrlTableOffset;// Offset=0x1c Size=0x4
    unsigned short UrlTableSize;// Offset=0x20 Size=0x2
    unsigned short UrlTableDataSize;// Offset=0x22 Size=0x2
    unsigned short HeaderSize;// Offset=0x24 Size=0x2
    unsigned short ExtensionDataSize;// Offset=0x26 Size=0x2
    unsigned short SchemaTableEntries;// Offset=0x28 Size=0x2
    unsigned short SchemaTableEntrySize;// Offset=0x2a Size=0x2
};

class CSchemaData// Size=0x4c (Id=3212)
{
    public void CSchemaData();
    public unsigned long GetNumSchemaEntries();
    public struct ORDINAL_TO_INDEX * GetOrdinalTable();
    union // Size=0x58 (Id=0)
    {
        HRESULT GetSchemaEntry(unsigned long ,struct SCHEMA_TABLE_ENTRY * );// Offset=0x0 Size=0x58
        HRESULT GetSchemaData(struct SCHEMA_TABLE_ENTRY * ,int ,unsigned char ** ,unsigned long * );
        HRESULT LookupConstantFromTable(unsigned short ,unsigned long * );// Offset=0x0 Size=0x34
        HRESULT LookupUrlFromTable(unsigned short ,char ** );
        struct SCHEMA_HEADER * GetHeader();
        void Dump();
        struct SCHEMA_HEADER m_Header;// Offset=0x0 Size=0x2c
        struct ORDINAL_TO_INDEX * m_lpOrdinalToIndex;// Offset=0x2c Size=0x4
        struct SCHEMA_TABLE_ENTRY * m_lpTableEntries;// Offset=0x30 Size=0x4
        unsigned char * m_lpSchemaData;// Offset=0x34 Size=0x4
        unsigned long m_SchemaDataSize;// Offset=0x38 Size=0x4
        unsigned char * m_pbExtensionData;// Offset=0x3c Size=0x4
        unsigned long * m_lpConstantList;// Offset=0x40 Size=0x4
        unsigned short * m_lpUrlOffsets;// Offset=0x44 Size=0x4
        char * m_lpUrlData;// Offset=0x48 Size=0x4
    };
};

struct _BASIC_SUBSCRIPTION_INFO// Size=0x45 (Id=3213)
{
    unsigned long long qwOfferID;// Offset=0x0 Size=0x8
    unsigned short wOfferNameLength;// Offset=0x8 Size=0x2
    wchar_t * wszOfferName;// Offset=0xa Size=0x4
    unsigned long dwOfferType;// Offset=0xe Size=0x4
    unsigned char bRelationType;// Offset=0x12 Size=0x1
    unsigned char bConvertMode;// Offset=0x13 Size=0x1
    unsigned short wInstanceIdLength;// Offset=0x14 Size=0x2
    wchar_t * wszInstanceId;// Offset=0x16 Size=0x4
    unsigned long dwTitleID;// Offset=0x1a Size=0x4
    unsigned long dwTitleCategories;// Offset=0x1e Size=0x4
    unsigned short wTitleNameLength;// Offset=0x22 Size=0x2
    wchar_t * wszTitleName;// Offset=0x24 Size=0x4
    unsigned short wGameRating;// Offset=0x28 Size=0x2
    unsigned char bDuration;// Offset=0x2a Size=0x1
    unsigned char bFrequency;// Offset=0x2b Size=0x1
    unsigned char bTierProvided;// Offset=0x2c Size=0x1
    unsigned char bTierRequired;// Offset=0x2d Size=0x1
    unsigned long dwSellTextLength;// Offset=0x2e Size=0x4
    wchar_t * wszSellText;// Offset=0x32 Size=0x4
    unsigned long long qwRelatedOfferID;// Offset=0x36 Size=0x8
    unsigned short wResponseFlags;// Offset=0x3e Size=0x2
    unsigned char bPricesLength;// Offset=0x40 Size=0x1
    struct _OFFER_PRICE * pPrices;// Offset=0x41 Size=0x4
};

struct _P_TEAM_MANAGE_TEAM_MSG// Size=0x52 (Id=3214)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwUserID;// Offset=0x20 Size=0x8
    unsigned long dwTitleID;// Offset=0x28 Size=0x4
    unsigned long long qwTeamID;// Offset=0x2c Size=0x8
    unsigned short cbTeamName;// Offset=0x34 Size=0x2
    unsigned short cbTeamDescription;// Offset=0x36 Size=0x2
    unsigned short cbTeamMotto;// Offset=0x38 Size=0x2
    unsigned short cbTeamURL;// Offset=0x3a Size=0x2
    unsigned short cbTeamData;// Offset=0x3c Size=0x2
    wchar_t * wszTeamName;// Offset=0x3e Size=0x4
    wchar_t * wszTeamDescription;// Offset=0x42 Size=0x4
    wchar_t * wszTeamMotto;// Offset=0x46 Size=0x4
    wchar_t * wszTeamURL;// Offset=0x4a Size=0x4
    unsigned char * pbTeamData;// Offset=0x4e Size=0x4
};

struct _P_TEAM_CREATE_MSG// Size=0x58 (Id=3215)
{
    unsigned long dwMsgType;// Offset=0x0 Size=0x4
    unsigned long dwMsgLen;// Offset=0x4 Size=0x4
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct _SGADDR sgaddr;// Offset=0xc Size=0x14
    unsigned long long qwUserID;// Offset=0x20 Size=0x8
    unsigned long dwTitleID;// Offset=0x28 Size=0x4
    unsigned long dwMaxMembers;// Offset=0x2c Size=0x4
    unsigned short cbTeamName;// Offset=0x30 Size=0x2
    unsigned short cbTeamDescription;// Offset=0x32 Size=0x2
    unsigned short cbTeamMotto;// Offset=0x34 Size=0x2
    unsigned short cbTeamURL;// Offset=0x36 Size=0x2
    unsigned short cbTeamData;// Offset=0x38 Size=0x2
    unsigned short cbCreatorData;// Offset=0x3a Size=0x2
    wchar_t * wszTeamName;// Offset=0x3c Size=0x4
    wchar_t * wszTeamDescription;// Offset=0x40 Size=0x4
    wchar_t * wszTeamMotto;// Offset=0x44 Size=0x4
    wchar_t * wszTeamURL;// Offset=0x48 Size=0x4
    unsigned char * pbTeamData;// Offset=0x4c Size=0x4
    unsigned char * pbCreatorData;// Offset=0x50 Size=0x4
    struct _TEAM_CREATE_RESULTS * pvResults;// Offset=0x54 Size=0x4
};

struct _ACCOUNT_GET_USER_TYPE_REQUEST// Size=0x12 (Id=3216)
{
    unsigned long long qwMachineId;// Offset=0x0 Size=0x8
    unsigned short wGamertagLength;// Offset=0x8 Size=0x2
    wchar_t * wszGamertag;// Offset=0xa Size=0x4
    struct _ACCOUNT_GET_USER_TYPE_RESPONSE * pResponse;// Offset=0xe Size=0x4
};

struct _GET_POSTAL_CODE_REQUEST// Size=0xb (Id=3217)
{
    unsigned char bCountryId;// Offset=0x0 Size=0x1
    unsigned short wPostalCodeLength;// Offset=0x1 Size=0x2
    wchar_t * wszPostalCode;// Offset=0x3 Size=0x4
    struct _GET_POSTAL_CODE_RESPONSE * pResponse;// Offset=0x7 Size=0x4
};

class CXHttpDownloadBase : public CXLiveAsyncTaskInternal// Size=0x1e28 (Id=3218)
{
    public void CXHttpDownloadBase(class CXHttpDownloadBase & );
    public void CXHttpDownloadBase();
    public HRESULT CustomInitialize();
    public unsigned long CustomGetObjectSize();
    public struct CXLiveAsyncTaskInternal::RECEIVERATELIMITDATA * CustomSelectReceiveRateLimitData();
    public HRESULT CustomPrepareRequest();
    public HRESULT CustomHandleResponseHeaderComplete(HRESULT );
    public HRESULT CustomContinueResponseData();
    public unsigned long CustomGetMaxReceiveChunkSize();
    protected HRESULT HandleResponseData();
    protected HRESULT GetParametersFromMarshalledRequest(class CNativeEndianBuffer * );
    union // Size=0x1e24 (Id=0)
    {
        unsigned char __align0[7712];// Offset=0x0 Size=0x1e20
        struct _XHTTP_REQUEST * m_pRequest;// Offset=0x1e20 Size=0x4
        struct CXLiveAsyncTaskInternal::RECEIVERATELIMITDATA sm_httpDownloadReceiveRateLimitData;// Offset=0x0 Size=0x18
        void ~CXHttpDownloadBase();
        class CXHttpDownloadBase & operator=(class CXHttpDownloadBase & );
        void * __vecDelDtor(unsigned int );
    };
};

struct _XHTTP_REQUEST// Size=0x70a (Id=3219)
{
    unsigned long dwFlags;// Offset=0x0 Size=0x4
    unsigned long dwServiceId;// Offset=0x4 Size=0x4
    char szHost[512];// Offset=0x8 Size=0x200
    unsigned short wPort;// Offset=0x208 Size=0x2
    char szUrl[1024];// Offset=0x20a Size=0x400
    char szExtraHeaders[256];// Offset=0x60a Size=0x100
};

class CXHttpDownloadBase : public CXLiveAsyncTaskInternal// Size=0x1e28 (Id=3220)
{
    public void CXHttpDownloadBase(class CXHttpDownloadBase & );
    public void CXHttpDownloadBase();
    public HRESULT CustomInitialize();
    public unsigned long CustomGetObjectSize();
    public struct CXLiveAsyncTaskInternal::RECEIVERATELIMITDATA * CustomSelectReceiveRateLimitData();
    public HRESULT CustomPrepareRequest();
    public HRESULT CustomHandleResponseHeaderComplete(HRESULT );
    public HRESULT CustomContinueResponseData();
    public unsigned long CustomGetMaxReceiveChunkSize();
    protected HRESULT HandleResponseData();
    protected HRESULT GetParametersFromMarshalledRequest(class CNativeEndianBuffer * );
    union // Size=0x1e24 (Id=0)
    {
        unsigned char __align0[7712];// Offset=0x0 Size=0x1e20
        struct _XHTTP_REQUEST * m_pRequest;// Offset=0x1e20 Size=0x4
        struct CXLiveAsyncTaskInternal::RECEIVERATELIMITDATA sm_httpDownloadReceiveRateLimitData;// Offset=0x0 Size=0x18
        void ~CXHttpDownloadBase();
        class CXHttpDownloadBase & operator=(class CXHttpDownloadBase & );
        void * __vecDelDtor(unsigned int );
    };
};

struct XUIAllocatedArray// Size=0x8 (Id=3221)
{
    int m_nCount;// Offset=0x0 Size=0x4
    unsigned long m_dwElemSize;// Offset=0x4 Size=0x4
    void * GetElement(unsigned int );
};

struct _XCONTENT_METADATA_INSTALLER// Size=0x15f4 (Id=3222)
{
    union // Size=0x4 (Id=0)
    {
        enum _INSTALLER_METADATA_TYPE MetaDataType;// Offset=0x0 Size=0x4
        union <unnamed-type-MetaData>// Size=0x15f0 (Id=34156)
        {
            struct _XCONTENT_METADATA_INSTALLER_SYSTEM_UPDATE SystemUpdate;// Offset=0x0 Size=0x15f0
            struct _XCONTENT_METADATA_INSTALLER_TITLE_UPDATE TitleUpdate;// Offset=0x0 Size=0x15f0
            struct _XCONTENT_METADATA_INSTALLER_PROGRESS_CACHE InstallProgressCache;// Offset=0x0 Size=0x15f0
        };
    };
    union _XCONTENT_METADATA_INSTALLER::<unnamed-type-MetaData> MetaData;// Offset=0x4 Size=0x15f0
};

union _XCONTENT_METADATA_INSTALLER::<unnamed-type-MetaData>// Size=0x15f0 (Id=3223)
{
    struct _XCONTENT_METADATA_INSTALLER_SYSTEM_UPDATE SystemUpdate;// Offset=0x0 Size=0x15f0
    struct _XCONTENT_METADATA_INSTALLER_TITLE_UPDATE TitleUpdate;// Offset=0x0 Size=0x15f0
    struct _XCONTENT_METADATA_INSTALLER_PROGRESS_CACHE InstallProgressCache;// Offset=0x0 Size=0x15f0
};

struct IXuiResourceManagerVTBL// Size=0x1c (Id=3224)
{
    void  ( * AddRef)(struct IXuiResourceManager * );// Offset=0x0 Size=0x4
    unsigned int  ( * Release)(struct IXuiResourceManager * );// Offset=0x4 Size=0x4
    wchar_t *  ( * GetName)(struct IXuiResourceManager * );// Offset=0x8 Size=0x4
    int  ( * IsTransport)(struct IXuiResourceManager * );// Offset=0xc Size=0x4
    HRESULT  ( * Init)(struct IXuiResourceManager * ,struct IXuiResourceReader * );// Offset=0x10 Size=0x4
    HRESULT  ( * Open)(struct IXuiResourceManager * ,wchar_t * ,struct IXuiResourceReader ** );// Offset=0x14 Size=0x4
    HRESULT  ( * GetFileAttributesA)(struct IXuiResourceManager * ,wchar_t * ,struct _WIN32_FILE_ATTRIBUTE_DATA * );// Offset=0x18 Size=0x4
};

struct _Q_MESSAGE_SUMMARY_2// Size=0x5c (Id=3225)
{
    unsigned long long qwSenderID;// Offset=0x0 Size=0x8
    unsigned long long qwSenderContext;// Offset=0x8 Size=0x8
    unsigned long mtSentTime;// Offset=0x10 Size=0x4
    unsigned long dwMessageID;// Offset=0x14 Size=0x4
    unsigned long dwMessageFlags;// Offset=0x18 Size=0x4
    unsigned long dwSenderTitleID;// Offset=0x1c Size=0x4
    unsigned short wExpireMinutes;// Offset=0x20 Size=0x2
    unsigned short cbDetails;// Offset=0x22 Size=0x2
    unsigned char bMessageType;// Offset=0x24 Size=0x1
    char szSenderName[15];// Offset=0x25 Size=0xf
    wchar_t szSubject[20];// Offset=0x34 Size=0x28
};

struct _FILETIME// Size=0x8 (Id=3226)
{
    unsigned long dwHighDateTime;// Offset=0x0 Size=0x4
    unsigned long dwLowDateTime;// Offset=0x4 Size=0x4
};

class CXLiveMessaging// Size=0xb540 (Id=3227)
{
    public void CXLiveMessaging();
    public void ResetUserInfo(struct _XMSG_USER_INFO * );
    public void RequestMessageEnumeration(unsigned long );
    public void Enter();
    public void Leave();
    public unsigned long RelevantQFlagChanges(unsigned long );
    public HRESULT ProcessChangeSigninUsers(unsigned long * ,unsigned long long * );
    public int AreAnyRemovedUserTasksActive();
    public void SetNotification(class CXLiveNotification * );
    public HRESULT ProcessMessaging();
    public HRESULT XMessageEnumerate(class CArgumentList * );
    public HRESULT XMessageSummary(class CArgumentList * );
    public HRESULT XMessageGetDetails(class CArgumentList * );
    public HRESULT XMessageDetailsGetSummary(class CArgumentList * );
    public HRESULT XMessageDetailsGetProperty(class CArgumentList * );
    public HRESULT XMessageSetFlags(class CArgumentList * );
    public HRESULT XMessageDelete(class CArgumentList * );
    public HRESULT XMessageCreate(class CArgumentList * );
    public HRESULT XMessageDestroy(class CArgumentList * );
    public HRESULT XMessageSetProperty(class CArgumentList * );
    public HRESULT XMessageGetProperty(class CArgumentList * );
    public HRESULT XMessageGameInviteAnswer(class CArgumentList * );
    public HRESULT XMessageGameInviteRevoke(class CArgumentList * );
    public HRESULT XMessageGameInviteGetAcceptedInfo(class CArgumentList * );
    public void CancelTasksAtLogoff();
    public int AreAnyTasksActive();
    public int MessagingHasMsgExpired(struct _Q_MESSAGE_SUMMARY_2 * ,struct _FILETIME * );
    public int MessagingIsMessageInUse(void * );
    public unsigned long MessagingGetMessageType(void * );
    public unsigned long MessagingGetMessageFlags(void * );
    public unsigned long long MessagingGetMessageContext(void * );
    public unsigned short MessagingGetUnusedProperties(void * );
    public unsigned short MessagingGetMsgBlobSize(void * );
    public HRESULT MessageValidateAndPrepareInviteSend(unsigned long long * ,unsigned long ,unsigned long long * ,struct XNKID ,unsigned long );
    protected HRESULT MessagingInsertSummary(unsigned long ,struct _Q_MESSAGE_SUMMARY_2 * );
    protected HRESULT MessagingRemoveSummaryByIndex(unsigned long ,unsigned long );
    protected HRESULT MessagingRemoveSummary(unsigned long ,unsigned long );
    protected HRESULT MessagingStartFullEnumeration(unsigned long );
    protected HRESULT MessagingProcessQValChanges();
    protected HRESULT MessagingDoWork();
    protected HRESULT MessagingValidateMessageSend(char * ,unsigned long ,void * ,unsigned long ,unsigned long long * );
    protected class CXLiveNotification * m_pNotification;// Offset=0x0 Size=0x4
    protected struct _RTL_CRITICAL_SECTION m_csMessaging;// Offset=0x4 Size=0x1c
    protected struct _XMSG_USER_INFO m_aMsgUserInfoBuffers[4];// Offset=0x20 Size=0xb510
    protected struct _XMSG_USER_INFO * m_apMsgUserInfos[4];// Offset=0xb530 Size=0x10
};

union _RTL_HEAP_ENTRY::<unnamed-type-u>// Size=0x8 (Id=3228)
{
    struct <unnamed-type-s1>// Size=0x8 (Id=30920)
    {
        unsigned long Settable;// Offset=0x0 Size=0x4
        unsigned long Tag;// Offset=0x4 Size=0x4
    };
    struct _RTL_HEAP_ENTRY::<unnamed-type-u>::<unnamed-type-s1> s1;// Offset=0x0 Size=0x8
    struct <unnamed-type-s2>// Size=0x8 (Id=30924)
    {
        unsigned long CommittedSize;// Offset=0x0 Size=0x4
        void * FirstBlock;// Offset=0x4 Size=0x4
    };
    struct _RTL_HEAP_ENTRY::<unnamed-type-u>::<unnamed-type-s2> s2;// Offset=0x0 Size=0x8
};

struct _RTL_HEAP_ENTRY::<unnamed-type-u>::<unnamed-type-s2>// Size=0x8 (Id=3229)
{
    unsigned long CommittedSize;// Offset=0x0 Size=0x4
    void * FirstBlock;// Offset=0x4 Size=0x4
};

struct _RTL_HEAP_ENTRY::<unnamed-type-u>::<unnamed-type-s1>// Size=0x8 (Id=3230)
{
    unsigned long Settable;// Offset=0x0 Size=0x4
    unsigned long Tag;// Offset=0x4 Size=0x4
};

struct XNetConfigParams// Size=0x1ec (Id=3231)
{
    struct XNetConfigSectorHeader Header;// Offset=0x0 Size=0x1c
    wchar_t wszName[24];// Offset=0x1c Size=0x30
    unsigned short wFlags;// Offset=0x4c Size=0x2
    unsigned char abEnet[6];// Offset=0x4e Size=0x6
    struct in_addr ina;// Offset=0x54 Size=0x4
    struct in_addr inaMask;// Offset=0x58 Size=0x4
    struct in_addr inaGateway;// Offset=0x5c Size=0x4
    struct in_addr ainaDnsServers[2];// Offset=0x60 Size=0x8
    char achDhcpHostName[40];// Offset=0x68 Size=0x28
    char achPppoeUserName[64];// Offset=0x90 Size=0x40
    char achPppoePassword[64];// Offset=0xd0 Size=0x40
    char achPppoeServer[40];// Offset=0x110 Size=0x28
    char achPppoeService[40];// Offset=0x138 Size=0x28
    union _LARGE_INTEGER liTimeOfLease;// Offset=0x160 Size=0x8
    unsigned long dwSecsInLease;// Offset=0x168 Size=0x4
    struct in_addr inaLease;// Offset=0x16c Size=0x4
    struct in_addr inaMaskLease;// Offset=0x170 Size=0x4
    struct in_addr inaServerLease;// Offset=0x174 Size=0x4
    struct in_addr ainaGatewaysLease[4];// Offset=0x178 Size=0x10
    struct in_addr ainaDnsServersLease[4];// Offset=0x188 Size=0x10
    unsigned char abEnetUPnP[6];// Offset=0x198 Size=0x6
    unsigned short wPortUPnP;// Offset=0x19e Size=0x2
    unsigned char abEnetPppoeServer[6];// Offset=0x1a0 Size=0x6
    unsigned short wPppoeSessionId;// Offset=0x1a6 Size=0x2
    unsigned char abReserved[68];// Offset=0x1a8 Size=0x44
};

class CSpinLock// Size=0x8 (Id=3232)
{
    public void CSpinLock();
    public void Enter();
    public void Leave();
    public int HasOwner();
    private unsigned long m_lock;// Offset=0x0 Size=0x4
    private unsigned char m_oldIrql;// Offset=0x4 Size=0x1
};

class CSpinLock// Size=0x8 (Id=3233)
{
    public void CSpinLock();
    public void Enter();
    public void Leave();
    public int HasOwner();
    private unsigned long m_lock;// Offset=0x0 Size=0x4
    private unsigned char m_oldIrql;// Offset=0x4 Size=0x1
};

struct IXuiTextureCache// Size=0x0 (Id=3234)
{
};

struct IXuiDevice// Size=0x4 (Id=3235)
{
    unsigned long AddRef();
    unsigned long Release();
    struct D3DDevice * GetD3DDevice();
    struct IXuiTextureCache * GetTextureCache();
    struct _D3DPRESENT_PARAMETERS_ * GetPresentParams();
    HRESULT BeginScene();
    HRESULT EndScene();
    HRESULT CreateTexture(unsigned int ,unsigned int ,unsigned int ,unsigned int ,enum _D3DFORMAT ,unsigned long ,struct D3DTexture ** ,void ** );
    HRESULT SetTexture(unsigned long ,struct D3DBaseTexture * );
    HRESULT SetVertexShaderConstantF(unsigned int ,float * ,unsigned int );
    HRESULT SetPixelShaderConstantF(unsigned int ,float * ,unsigned int );
    HRESULT Clear(unsigned long ,struct _D3DRECT * ,unsigned long ,unsigned long ,float ,unsigned long );
    HRESULT SetRenderState(enum _D3DRENDERSTATETYPE ,unsigned long );
    HRESULT SetSamplerState(unsigned long ,enum _D3DSAMPLERSTATETYPE ,unsigned long );
    HRESULT SetVertexDeclaration(struct D3DVertexDeclaration * );
    HRESULT SetVertexShader(struct D3DVertexShader * );
    HRESULT SetPixelShader(struct D3DPixelShader * );
    HRESULT CreateRenderTarget(unsigned int ,unsigned int ,enum _D3DFORMAT ,enum _D3DMULTISAMPLE_TYPE ,unsigned long ,int ,struct D3DSurface ** ,struct _D3DSURFACE_PARAMETERS * );
    HRESULT Resolve(unsigned long ,struct _D3DRECT * ,struct D3DBaseTexture * ,struct _D3DPOINT * ,unsigned int ,unsigned int ,struct __vector4 * ,float ,unsigned long ,struct _D3DRESOLVE_PARAMETERS * );
    HRESULT GetDepthStencilSurface(struct D3DSurface ** );
    HRESULT SetDepthStencilSurface(struct D3DSurface * );
    HRESULT SetRenderTarget(unsigned long ,struct D3DSurface * );
    HRESULT GetRenderTarget(unsigned long ,struct D3DSurface ** );
    HRESULT Present(struct tagRECT * ,struct tagRECT * ,struct HWND__ * ,void * );
    HRESULT CreateVertexShader(unsigned long * ,struct D3DVertexShader ** );
    HRESULT CreatePixelShader(unsigned long * ,struct D3DPixelShader ** );
    HRESULT CreateVertexDeclaration(struct _D3DVERTEXELEMENT9 * ,struct D3DVertexDeclaration ** );
    HRESULT GetViewport(struct _D3DVIEWPORT9 * );
    HRESULT DrawPrimitiveUP(enum _D3DPRIMITIVETYPE ,unsigned int ,void * ,unsigned int );
    HRESULT DrawIndexedPrimitiveUP(enum _D3DPRIMITIVETYPE ,unsigned int ,unsigned int ,unsigned int ,void * ,enum _D3DFORMAT ,void * ,unsigned int );
    HRESULT BeginVertices(enum _D3DPRIMITIVETYPE ,unsigned int ,unsigned int ,void ** );
    HRESULT EndVertices();
    HRESULT LockTextureRect(struct D3DTexture * ,unsigned int ,struct _D3DLOCKED_RECT * ,struct tagRECT * ,unsigned long );
    HRESULT UnlockTextureRect(struct D3DTexture * ,unsigned int );
    HRESULT SetClipPlane(unsigned long ,float * );
    HRESULT CalculateTextureMemorySize(struct IXuiTexture * ,unsigned long * );
    void IXuiDevice(struct IXuiDevice & );
    void IXuiDevice();
    struct IXuiDevice & operator=(struct IXuiDevice & );
};

struct IXuiDevice// Size=0x4 (Id=3236)
{
    unsigned long AddRef();
    unsigned long Release();
    struct D3DDevice * GetD3DDevice();
    struct IXuiTextureCache * GetTextureCache();
    struct _D3DPRESENT_PARAMETERS_ * GetPresentParams();
    HRESULT BeginScene();
    HRESULT EndScene();
    HRESULT CreateTexture(unsigned int ,unsigned int ,unsigned int ,unsigned int ,enum _D3DFORMAT ,unsigned long ,struct D3DTexture ** ,void ** );
    HRESULT SetTexture(unsigned long ,struct D3DBaseTexture * );
    HRESULT SetVertexShaderConstantF(unsigned int ,float * ,unsigned int );
    HRESULT SetPixelShaderConstantF(unsigned int ,float * ,unsigned int );
    HRESULT Clear(unsigned long ,struct _D3DRECT * ,unsigned long ,unsigned long ,float ,unsigned long );
    HRESULT SetRenderState(enum _D3DRENDERSTATETYPE ,unsigned long );
    HRESULT SetSamplerState(unsigned long ,enum _D3DSAMPLERSTATETYPE ,unsigned long );
    HRESULT SetVertexDeclaration(struct D3DVertexDeclaration * );
    HRESULT SetVertexShader(struct D3DVertexShader * );
    HRESULT SetPixelShader(struct D3DPixelShader * );
    HRESULT CreateRenderTarget(unsigned int ,unsigned int ,enum _D3DFORMAT ,enum _D3DMULTISAMPLE_TYPE ,unsigned long ,int ,struct D3DSurface ** ,struct _D3DSURFACE_PARAMETERS * );
    HRESULT Resolve(unsigned long ,struct _D3DRECT * ,struct D3DBaseTexture * ,struct _D3DPOINT * ,unsigned int ,unsigned int ,struct __vector4 * ,float ,unsigned long ,struct _D3DRESOLVE_PARAMETERS * );
    HRESULT GetDepthStencilSurface(struct D3DSurface ** );
    HRESULT SetDepthStencilSurface(struct D3DSurface * );
    HRESULT SetRenderTarget(unsigned long ,struct D3DSurface * );
    HRESULT GetRenderTarget(unsigned long ,struct D3DSurface ** );
    HRESULT Present(struct tagRECT * ,struct tagRECT * ,struct HWND__ * ,void * );
    HRESULT CreateVertexShader(unsigned long * ,struct D3DVertexShader ** );
    HRESULT CreatePixelShader(unsigned long * ,struct D3DPixelShader ** );
    HRESULT CreateVertexDeclaration(struct _D3DVERTEXELEMENT9 * ,struct D3DVertexDeclaration ** );
    HRESULT GetViewport(struct _D3DVIEWPORT9 * );
    HRESULT DrawPrimitiveUP(enum _D3DPRIMITIVETYPE ,unsigned int ,void * ,unsigned int );
    HRESULT DrawIndexedPrimitiveUP(enum _D3DPRIMITIVETYPE ,unsigned int ,unsigned int ,unsigned int ,void * ,enum _D3DFORMAT ,void * ,unsigned int );
    HRESULT BeginVertices(enum _D3DPRIMITIVETYPE ,unsigned int ,unsigned int ,void ** );
    HRESULT EndVertices();
    HRESULT LockTextureRect(struct D3DTexture * ,unsigned int ,struct _D3DLOCKED_RECT * ,struct tagRECT * ,unsigned long );
    HRESULT UnlockTextureRect(struct D3DTexture * ,unsigned int );
    HRESULT SetClipPlane(unsigned long ,float * );
    HRESULT CalculateTextureMemorySize(struct IXuiTexture * ,unsigned long * );
    void IXuiDevice(struct IXuiDevice & );
    void IXuiDevice();
    struct IXuiDevice & operator=(struct IXuiDevice & );
};

struct XUIMessagePressState// Size=0x4 (Id=3237)
{
    int bPressed;// Offset=0x0 Size=0x4
};

class CXuiHtmlControl : public CXuiControl// Size=0x4 (Id=3238)
{
    public void CXuiHtmlControl(struct _XUIOBJ * );
    public void CXuiHtmlControl();
    public void Attach(struct _XUIOBJ * );
    public HRESULT GetContentDims(struct XUIContentDims * );
    public HRESULT SetVScrollPos(int );
    public HRESULT VScrollBy(int );
    public HRESULT SetLineHeight(int );
    public HRESULT GetVScrollInfo(struct XUIHtmlScrollInfo * );
    public HRESULT GetVSmoothScroll(int * ,float * ,float * ,float * );
    public HRESULT SetVSmoothScroll(int ,float ,float ,float );
};

struct XUIKeyFrame// Size=0x1c (Id=3239)
{
    void * operator new(unsigned int ,void * );
    void * operator new(unsigned int );
    void * operator new[](unsigned int );
    void operator delete(void * );
    void operator delete[](void * );
    unsigned long m_dwFrame;// Offset=0x0 Size=0x4
    enum XUI_INTERPOLATE m_nInterpolationType;// Offset=0x4 Size=0x4
    struct D3DXVECTOR2 m_vEaseIn;// Offset=0x8 Size=0x8
    struct D3DXVECTOR2 m_vEaseOut;// Offset=0x10 Size=0x8
    struct XUIElementPropVal * m_pPropVals;// Offset=0x18 Size=0x4
    void XUIKeyFrame();
    void ~XUIKeyFrame();
    void SetPropVals(struct XUIElementPropVal * );
    struct XUIKeyFrame & operator=(struct XUIKeyFrame & );
    void * __vecDelDtor(unsigned int );
};

struct XUIKeyFrame// Size=0x1c (Id=3240)
{
    void * operator new(unsigned int ,void * );
    void * operator new(unsigned int );
    void * operator new[](unsigned int );
    void operator delete(void * );
    void operator delete[](void * );
    unsigned long m_dwFrame;// Offset=0x0 Size=0x4
    enum XUI_INTERPOLATE m_nInterpolationType;// Offset=0x4 Size=0x4
    struct D3DXVECTOR2 m_vEaseIn;// Offset=0x8 Size=0x8
    struct D3DXVECTOR2 m_vEaseOut;// Offset=0x10 Size=0x8
    struct XUIElementPropVal * m_pPropVals;// Offset=0x18 Size=0x4
    void XUIKeyFrame();
    void ~XUIKeyFrame();
    void SetPropVals(struct XUIElementPropVal * );
    struct XUIKeyFrame & operator=(struct XUIKeyFrame & );
    void * __vecDelDtor(unsigned int );
};

class CXuiControl : public CXuiElement// Size=0x4 (Id=3241)
{
    public void CXuiControl(struct _XUIOBJ * );
    public void CXuiControl();
    public int IsEnabled();
    public HRESULT SetEnable(int );
    public int IsPressed();
    public HRESULT SetPress(int );
    public HRESULT GetVisual(struct _XUIOBJ ** );
    public HRESULT DestroyVisual();
    public HRESULT AttachVisual();
    public HRESULT PlayStandardVisual();
    public HRESULT PlayStandardVisualOnFocusChanging(int );
    public HRESULT PlayVisualRange(wchar_t * ,wchar_t * ,wchar_t * );
    public HRESULT PlayOptionalVisual(wchar_t * ,wchar_t * ,wchar_t * ,wchar_t * );
    public HRESULT PlayVisual();
    public HRESULT PlayVisualOnFocusChanging(int );
    public wchar_t * GetText();
    public HRESULT SetText(wchar_t * );
    public HRESULT SetImage(struct _XUIOBJ * );
    public HRESULT SetImage(struct _XUIBRUSH * );
    public HRESULT SetImage(wchar_t * );
    public HRESULT GetImage(struct _XUIOBJ ** );
    public HRESULT GetImage(struct _XUIBRUSH ** );
    public HRESULT GetImage(wchar_t ** );
    public int GetItemAssociation();
    public HRESULT SetItemAssociation(int );
    public int WantsUnfocusedInput();
    public struct _XUIOBJ * GetNavigation(enum XUI_CONTROL_NAVIGATE ,int ,int );
    public struct _XUIOBJ * GetLink(enum XUI_CONTROL_LINK ,int ,int );
    public int Press(unsigned char );
    public int IsNavButton();
    public int IsBackButton();
    public void Attach(struct _XUIOBJ * );
};

struct XUISubtimelineProp// Size=0xc (Id=3242)
{
    void * operator new(unsigned int ,void * );
    void * operator new(unsigned int );
    void * operator new[](unsigned int );
    void operator delete(void * );
    void operator delete[](void * );
    struct IXUIPropObj * m_pObj;// Offset=0x0 Size=0x4
    struct XUIElementPropDef * m_pPropDef;// Offset=0x4 Size=0x4
    int m_nIndex;// Offset=0x8 Size=0x4
};

struct _XONLINE_LOGON_PARAMS// Size=0x1c8 (Id=3243)
{
    struct _XNET_LOGON_USER rgLogonUsers[4];// Offset=0x0 Size=0x1a0
    struct _XNET_LOGON_TITLE LogonTitle;// Offset=0x1a0 Size=0x24
    unsigned long dwFlags;// Offset=0x1c4 Size=0x4
};

class CXuiAnimRunner// Size=0x10 (Id=3244)
{
    public void CXuiAnimRunner();
    public void Reset();
    public void Resume();
    public void Run(unsigned long );
    public void Run();
    public void GetLastFrameTime(union _LARGE_INTEGER * );
    public float GetDeltaTime();
    protected union _LARGE_INTEGER m_liTicksPerSecond;// Offset=0x0 Size=0x8
    protected union _LARGE_INTEGER m_liLastFrameTime;// Offset=0x8 Size=0x8
};

struct XUISubtimeline// Size=0x44 (Id=3245)
{
    void * operator new(unsigned int ,void * );
    void * operator new(unsigned int );
    void * operator new[](unsigned int );
    void operator delete(void * );
    void operator delete[](void * );
    struct XUITimelineCtl m_state;// Offset=0x0 Size=0x18
    struct _XUIOBJ * m_hObj;// Offset=0x18 Size=0x4
    int m_nNumKeyFrames;// Offset=0x1c Size=0x4
    struct XUIKeyFrame * m_pKeyFrames;// Offset=0x20 Size=0x4
    int m_nAnimLength;// Offset=0x24 Size=0x4
    unsigned long m_dwFlags;// Offset=0x28 Size=0x4
    int m_nInitialFrameOffset;// Offset=0x2c Size=0x4
    float m_fCurrTime;// Offset=0x30 Size=0x4
    int m_nNumProps;// Offset=0x34 Size=0x4
    struct XUISubtimelineProp * m_pProps;// Offset=0x38 Size=0x4
    int m_bSharedKeyFrames;// Offset=0x3c Size=0x4
    struct XUIObjectData * m_pKeyFrameOwner;// Offset=0x40 Size=0x4
    void XUISubtimeline();
    void ~XUISubtimeline();
    void Reset();
    void Detach(struct XUISubtimeline * );
    void SetKeyFrames(struct XUIKeyFrame * ,int ,int ,struct XUIObjectData * );
    void Play(int ,int ,int ,int ,int );
    void Run(float );
    int IsStopped();
    void GotoFrame(int );
    int GetAnimLength();
    void Clear();
    void NotifyOwner(unsigned long );
    void * __vecDelDtor(unsigned int );
};

struct _OFFER_PURCHASE_GAMERTAG_REQUEST// Size=0x30 (Id=3246)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned char bCountryId;// Offset=0x8 Size=0x1
    unsigned short wLanguageId;// Offset=0x9 Size=0x2
    unsigned char bUserTier;// Offset=0xb Size=0x1
    unsigned long long qwMachineId;// Offset=0xc Size=0x8
    unsigned long long qwOfferID;// Offset=0x14 Size=0x8
    unsigned long dwPaymentType;// Offset=0x1c Size=0x4
    unsigned short wTokenLength;// Offset=0x20 Size=0x2
    wchar_t * wszToken;// Offset=0x22 Size=0x4
    unsigned short wGamertagLength;// Offset=0x26 Size=0x2
    wchar_t * wszGamertag;// Offset=0x28 Size=0x4
    struct _OFFER_PURCHASE_GAMERTAG_RESPONSE * pResults;// Offset=0x2c Size=0x4
};

struct XUIRenderStats// Size=0x18 (Id=3247)
{
    void * operator new(unsigned int ,void * );
    void * operator new(unsigned int );
    void * operator new[](unsigned int );
    void operator delete(void * );
    void operator delete[](void * );
    unsigned long dwFaces;// Offset=0x0 Size=0x4
    unsigned long dwVerts;// Offset=0x4 Size=0x4
    unsigned long dwNumCachedTextures;// Offset=0x8 Size=0x4
    unsigned long dwTextureMemory;// Offset=0xc Size=0x4
    unsigned long dwNumUnusedTextures;// Offset=0x10 Size=0x4
    unsigned long dwUnusedTextureMemory;// Offset=0x14 Size=0x4
};

struct _STF_HASH_ENTRY// Size=0x18 (Id=3248)
{
    unsigned char Hash[20];// Offset=0x0 Size=0x14
    union // Size=0x18 (Id=0)
    {
        struct _STF_HASH_ENTRY::_unnamed_3250::<unnamed-type-Level0> Level0;// Offset=0x14 Size=0x4
        struct _STF_HASH_ENTRY::_unnamed_3249::<unnamed-type-LevelN> LevelN;// Offset=0x14 Size=0x4
        unsigned long LevelAsULONG;// Offset=0x14 Size=0x4
    };
};

struct _STF_HASH_ENTRY::_unnamed_3249::<unnamed-type-LevelN>// Size=0x4 (Id=3249)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long NumberOfFreeBlocks:15;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xf
        unsigned long NumberOfFreePendingBlocks:15;// Offset=0x0 Size=0x4 BitOffset=0xf BitSize=0xf
        unsigned long ActiveIndex:1;// Offset=0x0 Size=0x4 BitOffset=0x1e BitSize=0x1
        unsigned long Writeable:1;// Offset=0x0 Size=0x4 BitOffset=0x1f BitSize=0x1
    };
};

struct _STF_HASH_ENTRY::_unnamed_3250::<unnamed-type-Level0>// Size=0x4 (Id=3250)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long NextBlockNumber:24;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x18
        unsigned long State:2;// Offset=0x0 Size=0x4 BitOffset=0x1e BitSize=0x2
    };
};

struct XUINotifyFocus// Size=0x4 (Id=3251)
{
    struct _XUIOBJ * hObjOther;// Offset=0x0 Size=0x4
};

struct _CHANGE_SUBSCRIPTION_PAYMENT_INSTRUMENT_REQUEST// Size=0x1c (Id=3252)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned long long qwMachineId;// Offset=0x8 Size=0x8
    unsigned short wInstanceIdLength;// Offset=0x10 Size=0x2
    wchar_t * wszInstanceId;// Offset=0x12 Size=0x4
    unsigned short wPaymentInstrumentIdLength;// Offset=0x16 Size=0x2
    wchar_t * wszPaymentInstrumentId;// Offset=0x18 Size=0x4
};

struct XUIMessageSourceText// Size=0x28 (Id=3253)
{
    int iItem;// Offset=0x0 Size=0x4
    int iData;// Offset=0x4 Size=0x4
    int bItemData;// Offset=0x8 Size=0x4
    wchar_t * szText;// Offset=0xc Size=0x4
    float fPointSizeOverride;// Offset=0x10 Size=0x4
    int bDisplay;// Offset=0x14 Size=0x4
    float fVScroll;// Offset=0x18 Size=0x4
    unsigned long dwStyleFlags;// Offset=0x1c Size=0x4
    int nTextFormatInfo;// Offset=0x20 Size=0x4
    struct XUITextFormatInfo * pTextFormatInfo;// Offset=0x24 Size=0x4
};

class CXuiElementImpl : public CXuiElementImplBase, public CXuiElement// Size=0x8 (Id=3254)
{
    public void CXuiElementImpl(class CXuiElementImpl & );
    public void CXuiElementImpl();
    public class CXuiElementImpl & operator=(class CXuiElementImpl & );
};

class CXuiElementImpl : public CXuiElementImplBase, public CXuiElement// Size=0x8 (Id=3255)
{
    public void CXuiElementImpl(class CXuiElementImpl & );
    public void CXuiElementImpl();
    public class CXuiElementImpl & operator=(class CXuiElementImpl & );
};

struct _XPROFILE_TITLE// Size=0x26 (Id=3256)
{
    unsigned long dwTitleId;// Offset=0x0 Size=0x4
    unsigned short cbTitleName;// Offset=0x4 Size=0x2
    wchar_t * pszTitleName;// Offset=0x6 Size=0x4
    struct _FILETIME ftLastPlayed;// Offset=0xa Size=0x8
    unsigned long dwCredEarned;// Offset=0x12 Size=0x4
    unsigned short wAchievementsEarned;// Offset=0x16 Size=0x2
    unsigned short wAchievementsPossible;// Offset=0x18 Size=0x2
    unsigned long dwCredPossible;// Offset=0x1a Size=0x4
    unsigned long dwSequence;// Offset=0x1e Size=0x4
    unsigned long dwMinutesPlayedOnline;// Offset=0x22 Size=0x4
};

struct _XSTORAGE_DELETE_PARAMS// Size=0xc (Id=3257)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long dwServerPathLength;// Offset=0x4 Size=0x4
    wchar_t * wszServerPath;// Offset=0x8 Size=0x4
};

struct _XLIVEBASE_ASYNC_MESSAGE// Size=0x28 (Id=3258)
{
    class CXLiveAsyncTask * pAsyncTask;// Offset=0x0 Size=0x4
    unsigned char __align0[4];// Offset=0x4 Size=0x4
    unsigned long long qwCurrentNumerator;// Offset=0x8 Size=0x8
    unsigned long long qwCurrentDenominator;// Offset=0x10 Size=0x8
    unsigned long long qwLastNumerator;// Offset=0x18 Size=0x8
    unsigned long long qwLastDenominator;// Offset=0x20 Size=0x8
};

struct XUIRect// Size=0x10 (Id=3259)
{
    void * operator new(unsigned int ,void * );
    void * operator new(unsigned int );
    void * operator new[](unsigned int );
    void operator delete(void * );
    void operator delete[](void * );
    float left;// Offset=0x0 Size=0x4
    float top;// Offset=0x4 Size=0x4
    float right;// Offset=0x8 Size=0x4
    float bottom;// Offset=0xc Size=0x4
    void XUIRect(float ,float ,float ,float );
    void XUIRect();
    float GetWidth();
    float GetHeight();
    int Contains(struct D3DXVECTOR2 & );
};

struct XUIRect// Size=0x10 (Id=3260)
{
    void * operator new(unsigned int ,void * );
    void * operator new(unsigned int );
    void * operator new[](unsigned int );
    void operator delete(void * );
    void operator delete[](void * );
    float left;// Offset=0x0 Size=0x4
    float top;// Offset=0x4 Size=0x4
    float right;// Offset=0x8 Size=0x4
    float bottom;// Offset=0xc Size=0x4
    void XUIRect(float ,float ,float ,float );
    void XUIRect();
    float GetWidth();
    float GetHeight();
    int Contains(struct D3DXVECTOR2 & );
};

struct XUIMemoryBuffer// Size=0xc (Id=3261)
{
    void * operator new(unsigned int ,void * );
    void * operator new(unsigned int );
    void * operator new[](unsigned int );
    void operator delete(void * );
    void operator delete[](void * );
    unsigned char * m_pb;// Offset=0x0 Size=0x4
    unsigned int m_cbUsed;// Offset=0x4 Size=0x4
    unsigned int m_cbTotal;// Offset=0x8 Size=0x4
    void XUIMemoryBuffer();
    void ~XUIMemoryBuffer();
    unsigned int Append(struct XUIMemoryBuffer * );
    unsigned int Append(wchar_t * );
    unsigned int Append(float );
    unsigned int Append(int );
    unsigned int Append(unsigned short );
    unsigned int Append(unsigned long );
    unsigned int Append(unsigned char );
    unsigned int Append(unsigned int );
    unsigned int Append(void * ,unsigned int );
    unsigned int AppendBool(int );
    unsigned int RewindBytes(unsigned int );
    void WriteByte(unsigned long ,unsigned char );
    void WriteUshort(unsigned long ,unsigned short );
    void WriteUlong(unsigned long ,unsigned long );
    unsigned char * Data();
    unsigned int Size();
    int Init(unsigned int );
    void * __vecDelDtor(unsigned int );
};

class CMediaStreamASFParser// Size=0x88 (Id=3262)
{
    public void CMediaStreamASFParser(class CMediaStreamASFParser & );
    public void CMediaStreamASFParser();
    union // Size=0x60 (Id=0)
    {
        struct ASF_FILE_PROPERTIES_OBJECT// Size=0x60 (Id=34696)
        {
            struct _GUID guid;// Offset=0x0 Size=0x10
            unsigned long long qwSize;// Offset=0x10 Size=0x8
            struct _GUID fileId;// Offset=0x18 Size=0x10
            unsigned long long qwFileSize;// Offset=0x28 Size=0x8
            unsigned long long qwCreationDate;// Offset=0x30 Size=0x8
            unsigned long long qwcDataPackets;// Offset=0x38 Size=0x8
            unsigned long long qwPlayDuration;// Offset=0x40 Size=0x8
            unsigned long long qwSendDuration;// Offset=0x48 Size=0x8
            unsigned long long qwPreroll;// Offset=0x50 Size=0x8
            unsigned long dwFlags;// Offset=0x58 Size=0x4
        };
        union ASFObjectUnion// Size=0x60 (Id=34707)
        {
            struct _GUID guid;// Offset=0x0 Size=0x10
            unsigned long long qwSize;// Offset=0x10 Size=0x8
            struct CMediaStreamASFParser::ASF_FILE_PROPERTIES_OBJECT fileProperties;// Offset=0x0 Size=0x60
        };
        union CMediaStreamASFParser::ASFObjectUnion m_curObject;// Offset=0x0 Size=0x60
    };
    public unsigned long m_dwOffset;// Offset=0x60 Size=0x4
    private unsigned char __align0[4];// Offset=0x64 Size=0x4
    public unsigned long long m_qwCurObjBytesRemaining;// Offset=0x68 Size=0x8
    public unsigned long m_dwMsDuration;// Offset=0x70 Size=0x4
    public unsigned long m_dwHeaderSize;// Offset=0x74 Size=0x4
    public unsigned long long m_qwDataSize;// Offset=0x78 Size=0x8
    public int m_bError;// Offset=0x80 Size=0x4
    public void Reset();
    public void NewData(unsigned char * ,unsigned long );
    public void ReadObject(unsigned char * ,unsigned long ,unsigned long & );
};

class CMediaStreamASFParser// Size=0x88 (Id=3263)
{
    public void CMediaStreamASFParser(class CMediaStreamASFParser & );
    public void CMediaStreamASFParser();
    union // Size=0x60 (Id=0)
    {
        struct ASF_FILE_PROPERTIES_OBJECT// Size=0x60 (Id=34696)
        {
            struct _GUID guid;// Offset=0x0 Size=0x10
            unsigned long long qwSize;// Offset=0x10 Size=0x8
            struct _GUID fileId;// Offset=0x18 Size=0x10
            unsigned long long qwFileSize;// Offset=0x28 Size=0x8
            unsigned long long qwCreationDate;// Offset=0x30 Size=0x8
            unsigned long long qwcDataPackets;// Offset=0x38 Size=0x8
            unsigned long long qwPlayDuration;// Offset=0x40 Size=0x8
            unsigned long long qwSendDuration;// Offset=0x48 Size=0x8
            unsigned long long qwPreroll;// Offset=0x50 Size=0x8
            unsigned long dwFlags;// Offset=0x58 Size=0x4
        };
        union ASFObjectUnion// Size=0x60 (Id=34707)
        {
            struct _GUID guid;// Offset=0x0 Size=0x10
            unsigned long long qwSize;// Offset=0x10 Size=0x8
            struct CMediaStreamASFParser::ASF_FILE_PROPERTIES_OBJECT fileProperties;// Offset=0x0 Size=0x60
        };
        union CMediaStreamASFParser::ASFObjectUnion m_curObject;// Offset=0x0 Size=0x60
    };
    public unsigned long m_dwOffset;// Offset=0x60 Size=0x4
    private unsigned char __align0[4];// Offset=0x64 Size=0x4
    public unsigned long long m_qwCurObjBytesRemaining;// Offset=0x68 Size=0x8
    public unsigned long m_dwMsDuration;// Offset=0x70 Size=0x4
    public unsigned long m_dwHeaderSize;// Offset=0x74 Size=0x4
    public unsigned long long m_qwDataSize;// Offset=0x78 Size=0x8
    public int m_bError;// Offset=0x80 Size=0x4
    public void Reset();
    public void NewData(unsigned char * ,unsigned long );
    public void ReadObject(unsigned char * ,unsigned long ,unsigned long & );
};

union CMediaStreamASFParser::ASFObjectUnion// Size=0x60 (Id=3264)
{
    struct _GUID guid;// Offset=0x0 Size=0x10
    unsigned long long qwSize;// Offset=0x10 Size=0x8
    struct CMediaStreamASFParser::ASF_FILE_PROPERTIES_OBJECT fileProperties;// Offset=0x0 Size=0x60
};

struct CMediaStreamASFParser::ASF_FILE_PROPERTIES_OBJECT// Size=0x60 (Id=3265)
{
    struct _GUID guid;// Offset=0x0 Size=0x10
    unsigned long long qwSize;// Offset=0x10 Size=0x8
    struct _GUID fileId;// Offset=0x18 Size=0x10
    unsigned long long qwFileSize;// Offset=0x28 Size=0x8
    unsigned long long qwCreationDate;// Offset=0x30 Size=0x8
    unsigned long long qwcDataPackets;// Offset=0x38 Size=0x8
    unsigned long long qwPlayDuration;// Offset=0x40 Size=0x8
    unsigned long long qwSendDuration;// Offset=0x48 Size=0x8
    unsigned long long qwPreroll;// Offset=0x50 Size=0x8
    unsigned long dwFlags;// Offset=0x58 Size=0x4
};

struct _ACCOUNT_VERIFY_BILLING_INFO_RESPONSE// Size=0x5d (Id=3266)
{
    unsigned long long qwUserPuid;// Offset=0x0 Size=0x8
    unsigned short wFirstNameLength;// Offset=0x8 Size=0x2
    wchar_t * wszFirstName;// Offset=0xa Size=0x4
    unsigned short wLastNameLength;// Offset=0xe Size=0x2
    wchar_t * wszLastName;// Offset=0x10 Size=0x4
    struct _FILETIME ftBirthdate;// Offset=0x14 Size=0x8
    unsigned short wEmailLength;// Offset=0x1c Size=0x2
    wchar_t * wszEmail;// Offset=0x1e Size=0x4
    struct _ADDRESS_INFO addressInfo;// Offset=0x22 Size=0x24
    struct _PHONE_INFO phoneInfo;// Offset=0x46 Size=0x12
    unsigned short wLanguageId;// Offset=0x58 Size=0x2
    unsigned char bCountryId;// Offset=0x5a Size=0x1
    unsigned char bMsftOptIn;// Offset=0x5b Size=0x1
    unsigned char bParterOptIn;// Offset=0x5c Size=0x1
};

struct _XSTORAGE_UPLOAD_FROM_MEMORY_PARAMS// Size=0x14 (Id=3267)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long dwServerPathLength;// Offset=0x4 Size=0x4
    wchar_t * wszServerPath;// Offset=0x8 Size=0x4
    unsigned long dwBufferSize;// Offset=0xc Size=0x4
    unsigned long dwBufferPointer;// Offset=0x10 Size=0x4
};

class CXStorageDownloadToDirectory : public CXStorageDownloadParent// Size=0x1adf8 (Id=3268)
{
    public void CXStorageDownloadToDirectory(class CXStorageDownloadToDirectory & );
    public void CXStorageDownloadToDirectory();
    public HRESULT CustomInitialize();
    public void CustomCleanup();
    public unsigned long CustomGetObjectSize();
    public struct CXLiveAsyncTaskInternal::RECEIVERATELIMITDATA * CustomSelectReceiveRateLimitData();
    public HRESULT CustomPrepareRequest();
    public HRESULT CustomContinueBuildRequest();
    public HRESULT CustomContinueProcessHttpHeaders();
    public void StorageDownloadGetServerPath(wchar_t ** );
    public HRESULT StorageDownloadProcessResponseHeader();
    public HRESULT StorageDownloadContinueProcessResponseData();
    public void StorageDownloadHandleSignatureVerified();
    public HRESULT StorageDownloadComplete();
    private HRESULT StartSignatureVerification();
    private HRESULT StartInitialCacheWrite();
    private HRESULT StartFileCacheBlockWrite();
    private HRESULT StartNewFile();
    private HRESULT StartCacheBlockRead();
    private HRESULT StartFileDataBegin();
    private HRESULT StartWriteData();
    private HRESULT StartFileDataEnd();
    private unsigned char __align0[7712];// Offset=0x0 Size=0x1e20
    private unsigned long m_dwUserIndex;// Offset=0x1e20 Size=0x4
    private unsigned char __align1[4];// Offset=0x1e24 Size=0x4
    private unsigned long long m_xuidUser;// Offset=0x1e28 Size=0x8
    private unsigned long m_dwServerPathLength;// Offset=0x1e30 Size=0x4
    private wchar_t * m_pwszServerPath;// Offset=0x1e34 Size=0x4
    private unsigned long m_dwDisplayNameLength;// Offset=0x1e38 Size=0x4
    private wchar_t * m_pwszDisplayName;// Offset=0x1e3c Size=0x4
    private unsigned long m_DeviceID;// Offset=0x1e40 Size=0x4
    private int m_fContentLinkCreated;// Offset=0x1e44 Size=0x4
    private class CXStorageDownloadWorker * m_pDownloadSubTask;// Offset=0x1e48 Size=0x4
    private struct _STORAGE_DL_RESPONSE_BUFFER m_StorageDlResponseBuffer;// Offset=0x1e4c Size=0x198
    private unsigned char __align2[4];// Offset=0x1fe4 Size=0x4
    private class CXCabStreamUnpacker m_CabStreamUnpacker;// Offset=0x1fe8 Size=0x10ce8
    private unsigned char m_abLzxBuffer[33029];// Offset=0x12cd0 Size=0x8105
    private unsigned char __align3[3];// Offset=0x1add5 Size=0x3
    private void * m_hCacheFile;// Offset=0x1add8 Size=0x4
    private unsigned char __align4[4];// Offset=0x1addc Size=0x4
    private union _LARGE_INTEGER m_liCurrentCacheOffset;// Offset=0x1ade0 Size=0x8
    private void * m_hCurrentFile;// Offset=0x1ade8 Size=0x4
    private unsigned char __align5[4];// Offset=0x1adec Size=0x4
    private union _LARGE_INTEGER m_liCurrentFileOffset;// Offset=0x1adf0 Size=0x8
    public void ~CXStorageDownloadToDirectory();
    public class CXStorageDownloadToDirectory & operator=(class CXStorageDownloadToDirectory & );
    public void * __vecDelDtor(unsigned int );
};

class CXStorageDownloadToDirectory : public CXStorageDownloadParent// Size=0x1adf8 (Id=3269)
{
    public void CXStorageDownloadToDirectory(class CXStorageDownloadToDirectory & );
    public void CXStorageDownloadToDirectory();
    public HRESULT CustomInitialize();
    public void CustomCleanup();
    public unsigned long CustomGetObjectSize();
    public struct CXLiveAsyncTaskInternal::RECEIVERATELIMITDATA * CustomSelectReceiveRateLimitData();
    public HRESULT CustomPrepareRequest();
    public HRESULT CustomContinueBuildRequest();
    public HRESULT CustomContinueProcessHttpHeaders();
    public void StorageDownloadGetServerPath(wchar_t ** );
    public HRESULT StorageDownloadProcessResponseHeader();
    public HRESULT StorageDownloadContinueProcessResponseData();
    public void StorageDownloadHandleSignatureVerified();
    public HRESULT StorageDownloadComplete();
    private HRESULT StartSignatureVerification();
    private HRESULT StartInitialCacheWrite();
    private HRESULT StartFileCacheBlockWrite();
    private HRESULT StartNewFile();
    private HRESULT StartCacheBlockRead();
    private HRESULT StartFileDataBegin();
    private HRESULT StartWriteData();
    private HRESULT StartFileDataEnd();
    private unsigned char __align0[7712];// Offset=0x0 Size=0x1e20
    private unsigned long m_dwUserIndex;// Offset=0x1e20 Size=0x4
    private unsigned char __align1[4];// Offset=0x1e24 Size=0x4
    private unsigned long long m_xuidUser;// Offset=0x1e28 Size=0x8
    private unsigned long m_dwServerPathLength;// Offset=0x1e30 Size=0x4
    private wchar_t * m_pwszServerPath;// Offset=0x1e34 Size=0x4
    private unsigned long m_dwDisplayNameLength;// Offset=0x1e38 Size=0x4
    private wchar_t * m_pwszDisplayName;// Offset=0x1e3c Size=0x4
    private unsigned long m_DeviceID;// Offset=0x1e40 Size=0x4
    private int m_fContentLinkCreated;// Offset=0x1e44 Size=0x4
    private class CXStorageDownloadWorker * m_pDownloadSubTask;// Offset=0x1e48 Size=0x4
    private struct _STORAGE_DL_RESPONSE_BUFFER m_StorageDlResponseBuffer;// Offset=0x1e4c Size=0x198
    private unsigned char __align2[4];// Offset=0x1fe4 Size=0x4
    private class CXCabStreamUnpacker m_CabStreamUnpacker;// Offset=0x1fe8 Size=0x10ce8
    private unsigned char m_abLzxBuffer[33029];// Offset=0x12cd0 Size=0x8105
    private unsigned char __align3[3];// Offset=0x1add5 Size=0x3
    private void * m_hCacheFile;// Offset=0x1add8 Size=0x4
    private unsigned char __align4[4];// Offset=0x1addc Size=0x4
    private union _LARGE_INTEGER m_liCurrentCacheOffset;// Offset=0x1ade0 Size=0x8
    private void * m_hCurrentFile;// Offset=0x1ade8 Size=0x4
    private unsigned char __align5[4];// Offset=0x1adec Size=0x4
    private union _LARGE_INTEGER m_liCurrentFileOffset;// Offset=0x1adf0 Size=0x8
    public void ~CXStorageDownloadToDirectory();
    public class CXStorageDownloadToDirectory & operator=(class CXStorageDownloadToDirectory & );
    public void * __vecDelDtor(unsigned int );
};

struct XUIMessageControlGetLink// Size=0x10 (Id=3270)
{
    enum XUI_CONTROL_LINK nRelationship;// Offset=0x0 Size=0x4
    struct _XUIOBJ * hObjSource;// Offset=0x4 Size=0x4
    struct _XUIOBJ * hObjDest;// Offset=0x8 Size=0x4
    int bSkipNavigate;// Offset=0xc Size=0x4
};

struct _XNPLINKSTATUSOVERRIDE// Size=0x8 (Id=3271)
{
    unsigned long dwAndFlags;// Offset=0x0 Size=0x4
    unsigned long dwOrFlags;// Offset=0x4 Size=0x4
};

struct CharData// Size=0x14 (Id=3272)
{
    wchar_t wch;// Offset=0x0 Size=0x2
    unsigned char __align0[2];// Offset=0x2 Size=0x2
    unsigned long dwStyle;// Offset=0x4 Size=0x4
    unsigned long dwColor;// Offset=0x8 Size=0x4
    float x;// Offset=0xc Size=0x4
    float y;// Offset=0x10 Size=0x4
};

class CXMarketplaceOfferContentEnumerate// Size=0x1 (Id=3273)
{
    public HRESULT Enumerate(void * ,struct _XOVERLAPPED * );
    public void ReleaseResources(void * );
    private void CopyResult(struct _INGAME_CONTENT_INFO * ,struct _XMARKETPLACE_CONTENTOFFER_INFO * ,unsigned char ** );
    private HRESULT CallMarketplaceOfferContentEnumerate(unsigned long ,struct _XENUMERATORCONTENTOFFER * ,unsigned long ,struct _XMARKETPLACE_CONTENTOFFER_INFO * ,unsigned long * );
};

struct XUIMessageGetHtmlLinkVisited// Size=0x8 (Id=3274)
{
    wchar_t * szLink;// Offset=0x0 Size=0x4
    int bVisited;// Offset=0x4 Size=0x4
};

struct sockaddr_in// Size=0x10 (Id=3275)
{
    short sin_family;// Offset=0x0 Size=0x2
    unsigned short sin_port;// Offset=0x2 Size=0x2
    struct in_addr sin_addr;// Offset=0x4 Size=0x4
    char sin_zero[8];// Offset=0x8 Size=0x8
};

struct _XONLINE_SERVICE_INFO// Size=0xc (Id=3276)
{
    unsigned long dwServiceID;// Offset=0x0 Size=0x4
    struct in_addr serviceIP;// Offset=0x4 Size=0x4
    unsigned short wServicePort;// Offset=0x8 Size=0x2
    unsigned short wReserved;// Offset=0xa Size=0x2
};

class CXrlConnection// Size=0x10 (Id=3277)
{
    public void CXrlConnection();
    public void ~CXrlConnection();
    public void Initialize();
    public void Deinitialize();
    public HRESULT Startup(char * ,unsigned short ,char * ,int );
    public HRESULT Startup(struct sockaddr_in * ,char * ,int );
    public HRESULT Startup(struct _XONLINE_SERVICE_INFO * );
    public HRESULT SetSocketReadBufferSize(unsigned long );
    public void Cleanup();
    protected void * GetSessionHandle();
    protected void * GetConnectHandle();
    protected unsigned long GetServiceID();
    protected class CXrlTransaction * GetTransaction();
    protected void SetTransaction(class CXrlTransaction * );
    protected HRESULT GetDestAddress(struct sockaddr_in * );
    private void * m_hSession;// Offset=0x0 Size=0x4
    private void * m_hConnect;// Offset=0x4 Size=0x4
    private unsigned long m_dwServiceID;// Offset=0x8 Size=0x4
    private class CXrlTransaction * m_pTransaction;// Offset=0xc Size=0x4
    public void * __vecDelDtor(unsigned int );
};

struct _IO_STACK_LOCATION// Size=0x24 (Id=3278)
{
    union // Size=0x4 (Id=0)
    {
        unsigned char MajorFunction;// Offset=0x0 Size=0x1
        unsigned char MinorFunction;// Offset=0x1 Size=0x1
        unsigned char Flags;// Offset=0x2 Size=0x1
        unsigned char Control;// Offset=0x3 Size=0x1
        union <unnamed-type-Parameters>// Size=0x10 (Id=34861)
        {
            struct <unnamed-type-Create>// Size=0x10 (Id=34862)
            {
                unsigned long DesiredAccess;// Offset=0x0 Size=0x4
                unsigned long Options;// Offset=0x4 Size=0x4
                unsigned short FileAttributes;// Offset=0x8 Size=0x2
                unsigned short ShareAccess;// Offset=0xa Size=0x2
                struct _STRING * RemainingName;// Offset=0xc Size=0x4
            };
            struct _IO_STACK_LOCATION::<unnamed-type-Parameters>::<unnamed-type-Create> Create;// Offset=0x0 Size=0x10
            struct <unnamed-type-Read>// Size=0x10 (Id=34869)
            {
                unsigned long Length;// Offset=0x0 Size=0x4
                unsigned long BufferOffset;// Offset=0x4 Size=0x4
                void * CacheBuffer;// Offset=0x4 Size=0x4
                union _LARGE_INTEGER ByteOffset;// Offset=0x8 Size=0x8
            };
            struct _IO_STACK_LOCATION::<unnamed-type-Parameters>::<unnamed-type-Read> Read;// Offset=0x0 Size=0x10
            struct <unnamed-type-Write>// Size=0x10 (Id=34875)
            {
                unsigned long Length;// Offset=0x0 Size=0x4
                unsigned long BufferOffset;// Offset=0x4 Size=0x4
                void * CacheBuffer;// Offset=0x4 Size=0x4
                union _LARGE_INTEGER ByteOffset;// Offset=0x8 Size=0x8
            };
            struct _IO_STACK_LOCATION::<unnamed-type-Parameters>::<unnamed-type-Write> Write;// Offset=0x0 Size=0x10
            struct <unnamed-type-QueryDirectory>// Size=0x8 (Id=34881)
            {
                unsigned long Length;// Offset=0x0 Size=0x4
                struct _STRING * FileName;// Offset=0x4 Size=0x4
            };
            struct _IO_STACK_LOCATION::<unnamed-type-Parameters>::<unnamed-type-QueryDirectory> QueryDirectory;// Offset=0x0 Size=0x8
            struct <unnamed-type-QueryFile>// Size=0x8 (Id=34885)
            {
                unsigned long Length;// Offset=0x0 Size=0x4
                enum _FILE_INFORMATION_CLASS FileInformationClass;// Offset=0x4 Size=0x4
            };
            struct _IO_STACK_LOCATION::<unnamed-type-Parameters>::<unnamed-type-QueryFile> QueryFile;// Offset=0x0 Size=0x8
            struct <unnamed-type-SetFile>// Size=0xc (Id=34889)
            {
                unsigned long Length;// Offset=0x0 Size=0x4
                enum _FILE_INFORMATION_CLASS FileInformationClass;// Offset=0x4 Size=0x4
                struct _FILE_OBJECT * FileObject;// Offset=0x8 Size=0x4
            };
            struct _IO_STACK_LOCATION::<unnamed-type-Parameters>::<unnamed-type-SetFile> SetFile;// Offset=0x0 Size=0xc
            struct <unnamed-type-QueryVolume>// Size=0x8 (Id=34894)
            {
                unsigned long Length;// Offset=0x0 Size=0x4
                enum _FSINFOCLASS FsInformationClass;// Offset=0x4 Size=0x4
            };
            struct _IO_STACK_LOCATION::<unnamed-type-Parameters>::<unnamed-type-QueryVolume> QueryVolume;// Offset=0x0 Size=0x8
            struct <unnamed-type-SetVolume>// Size=0x8 (Id=34898)
            {
                unsigned long Length;// Offset=0x0 Size=0x4
                enum _FSINFOCLASS FsInformationClass;// Offset=0x4 Size=0x4
            };
            struct _IO_STACK_LOCATION::<unnamed-type-Parameters>::<unnamed-type-SetVolume> SetVolume;// Offset=0x0 Size=0x8
            struct <unnamed-type-DeviceIoControl>// Size=0x10 (Id=34902)
            {
                unsigned long OutputBufferLength;// Offset=0x0 Size=0x4
                void * InputBuffer;// Offset=0x4 Size=0x4
                unsigned long InputBufferLength;// Offset=0x8 Size=0x4
                unsigned long IoControlCode;// Offset=0xc Size=0x4
            };
            struct _IO_STACK_LOCATION::<unnamed-type-Parameters>::<unnamed-type-DeviceIoControl> DeviceIoControl;// Offset=0x0 Size=0x10
            struct <unnamed-type-SectorIo>// Size=0x10 (Id=34908)
            {
                unsigned long Length;// Offset=0x0 Size=0x4
                unsigned char * Buffer;// Offset=0x4 Size=0x4
                unsigned long SectorNumber;// Offset=0x8 Size=0x4
                unsigned long BufferOffset;// Offset=0xc Size=0x4
            };
            struct _IO_STACK_LOCATION::<unnamed-type-Parameters>::<unnamed-type-SectorIo> SectorIo;// Offset=0x0 Size=0x10
            struct <unnamed-type-Others>// Size=0x10 (Id=34914)
            {
                void * Argument1;// Offset=0x0 Size=0x4
                void * Argument2;// Offset=0x4 Size=0x4
                void * Argument3;// Offset=0x8 Size=0x4
                void * Argument4;// Offset=0xc Size=0x4
            };
            struct _IO_STACK_LOCATION::<unnamed-type-Parameters>::<unnamed-type-Others> Others;// Offset=0x0 Size=0x10
        };
    };
    union _IO_STACK_LOCATION::<unnamed-type-Parameters> Parameters;// Offset=0x4 Size=0x10
    struct _DEVICE_OBJECT * DeviceObject;// Offset=0x14 Size=0x4
    struct _FILE_OBJECT * FileObject;// Offset=0x18 Size=0x4
    long  ( * CompletionRoutine)(struct _DEVICE_OBJECT * ,struct _IRP * ,void * );// Offset=0x1c Size=0x4
    void * Context;// Offset=0x20 Size=0x4
};

union _IO_STACK_LOCATION::<unnamed-type-Parameters>// Size=0x10 (Id=3279)
{
    struct <unnamed-type-Create>// Size=0x10 (Id=34862)
    {
        unsigned long DesiredAccess;// Offset=0x0 Size=0x4
        unsigned long Options;// Offset=0x4 Size=0x4
        unsigned short FileAttributes;// Offset=0x8 Size=0x2
        unsigned short ShareAccess;// Offset=0xa Size=0x2
        struct _STRING * RemainingName;// Offset=0xc Size=0x4
    };
    struct _IO_STACK_LOCATION::<unnamed-type-Parameters>::<unnamed-type-Create> Create;// Offset=0x0 Size=0x10
    struct <unnamed-type-Read>// Size=0x10 (Id=34869)
    {
        unsigned long Length;// Offset=0x0 Size=0x4
        unsigned long BufferOffset;// Offset=0x4 Size=0x4
        void * CacheBuffer;// Offset=0x4 Size=0x4
        union _LARGE_INTEGER ByteOffset;// Offset=0x8 Size=0x8
    };
    struct _IO_STACK_LOCATION::<unnamed-type-Parameters>::<unnamed-type-Read> Read;// Offset=0x0 Size=0x10
    struct <unnamed-type-Write>// Size=0x10 (Id=34875)
    {
        unsigned long Length;// Offset=0x0 Size=0x4
        unsigned long BufferOffset;// Offset=0x4 Size=0x4
        void * CacheBuffer;// Offset=0x4 Size=0x4
        union _LARGE_INTEGER ByteOffset;// Offset=0x8 Size=0x8
    };
    struct _IO_STACK_LOCATION::<unnamed-type-Parameters>::<unnamed-type-Write> Write;// Offset=0x0 Size=0x10
    struct <unnamed-type-QueryDirectory>// Size=0x8 (Id=34881)
    {
        unsigned long Length;// Offset=0x0 Size=0x4
        struct _STRING * FileName;// Offset=0x4 Size=0x4
    };
    struct _IO_STACK_LOCATION::<unnamed-type-Parameters>::<unnamed-type-QueryDirectory> QueryDirectory;// Offset=0x0 Size=0x8
    struct <unnamed-type-QueryFile>// Size=0x8 (Id=34885)
    {
        unsigned long Length;// Offset=0x0 Size=0x4
        enum _FILE_INFORMATION_CLASS FileInformationClass;// Offset=0x4 Size=0x4
    };
    struct _IO_STACK_LOCATION::<unnamed-type-Parameters>::<unnamed-type-QueryFile> QueryFile;// Offset=0x0 Size=0x8
    struct <unnamed-type-SetFile>// Size=0xc (Id=34889)
    {
        unsigned long Length;// Offset=0x0 Size=0x4
        enum _FILE_INFORMATION_CLASS FileInformationClass;// Offset=0x4 Size=0x4
        struct _FILE_OBJECT * FileObject;// Offset=0x8 Size=0x4
    };
    struct _IO_STACK_LOCATION::<unnamed-type-Parameters>::<unnamed-type-SetFile> SetFile;// Offset=0x0 Size=0xc
    struct <unnamed-type-QueryVolume>// Size=0x8 (Id=34894)
    {
        unsigned long Length;// Offset=0x0 Size=0x4
        enum _FSINFOCLASS FsInformationClass;// Offset=0x4 Size=0x4
    };
    struct _IO_STACK_LOCATION::<unnamed-type-Parameters>::<unnamed-type-QueryVolume> QueryVolume;// Offset=0x0 Size=0x8
    struct <unnamed-type-SetVolume>// Size=0x8 (Id=34898)
    {
        unsigned long Length;// Offset=0x0 Size=0x4
        enum _FSINFOCLASS FsInformationClass;// Offset=0x4 Size=0x4
    };
    struct _IO_STACK_LOCATION::<unnamed-type-Parameters>::<unnamed-type-SetVolume> SetVolume;// Offset=0x0 Size=0x8
    struct <unnamed-type-DeviceIoControl>// Size=0x10 (Id=34902)
    {
        unsigned long OutputBufferLength;// Offset=0x0 Size=0x4
        void * InputBuffer;// Offset=0x4 Size=0x4
        unsigned long InputBufferLength;// Offset=0x8 Size=0x4
        unsigned long IoControlCode;// Offset=0xc Size=0x4
    };
    struct _IO_STACK_LOCATION::<unnamed-type-Parameters>::<unnamed-type-DeviceIoControl> DeviceIoControl;// Offset=0x0 Size=0x10
    struct <unnamed-type-SectorIo>// Size=0x10 (Id=34908)
    {
        unsigned long Length;// Offset=0x0 Size=0x4
        unsigned char * Buffer;// Offset=0x4 Size=0x4
        unsigned long SectorNumber;// Offset=0x8 Size=0x4
        unsigned long BufferOffset;// Offset=0xc Size=0x4
    };
    struct _IO_STACK_LOCATION::<unnamed-type-Parameters>::<unnamed-type-SectorIo> SectorIo;// Offset=0x0 Size=0x10
    struct <unnamed-type-Others>// Size=0x10 (Id=34914)
    {
        void * Argument1;// Offset=0x0 Size=0x4
        void * Argument2;// Offset=0x4 Size=0x4
        void * Argument3;// Offset=0x8 Size=0x4
        void * Argument4;// Offset=0xc Size=0x4
    };
    struct _IO_STACK_LOCATION::<unnamed-type-Parameters>::<unnamed-type-Others> Others;// Offset=0x0 Size=0x10
};

struct _IO_STACK_LOCATION::<unnamed-type-Parameters>::<unnamed-type-Others>// Size=0x10 (Id=3280)
{
    void * Argument1;// Offset=0x0 Size=0x4
    void * Argument2;// Offset=0x4 Size=0x4
    void * Argument3;// Offset=0x8 Size=0x4
    void * Argument4;// Offset=0xc Size=0x4
};

struct _IO_STACK_LOCATION::<unnamed-type-Parameters>::<unnamed-type-SectorIo>// Size=0x10 (Id=3281)
{
    unsigned long Length;// Offset=0x0 Size=0x4
    unsigned char * Buffer;// Offset=0x4 Size=0x4
    unsigned long SectorNumber;// Offset=0x8 Size=0x4
    unsigned long BufferOffset;// Offset=0xc Size=0x4
};

struct _IO_STACK_LOCATION::<unnamed-type-Parameters>::<unnamed-type-DeviceIoControl>// Size=0x10 (Id=3282)
{
    unsigned long OutputBufferLength;// Offset=0x0 Size=0x4
    void * InputBuffer;// Offset=0x4 Size=0x4
    unsigned long InputBufferLength;// Offset=0x8 Size=0x4
    unsigned long IoControlCode;// Offset=0xc Size=0x4
};

struct _IO_STACK_LOCATION::<unnamed-type-Parameters>::<unnamed-type-SetVolume>// Size=0x8 (Id=3283)
{
    unsigned long Length;// Offset=0x0 Size=0x4
    enum _FSINFOCLASS FsInformationClass;// Offset=0x4 Size=0x4
};

struct _IO_STACK_LOCATION::<unnamed-type-Parameters>::<unnamed-type-QueryVolume>// Size=0x8 (Id=3284)
{
    unsigned long Length;// Offset=0x0 Size=0x4
    enum _FSINFOCLASS FsInformationClass;// Offset=0x4 Size=0x4
};

struct _IO_STACK_LOCATION::<unnamed-type-Parameters>::<unnamed-type-SetFile>// Size=0xc (Id=3285)
{
    unsigned long Length;// Offset=0x0 Size=0x4
    enum _FILE_INFORMATION_CLASS FileInformationClass;// Offset=0x4 Size=0x4
    struct _FILE_OBJECT * FileObject;// Offset=0x8 Size=0x4
};

struct _IO_STACK_LOCATION::<unnamed-type-Parameters>::<unnamed-type-QueryFile>// Size=0x8 (Id=3286)
{
    unsigned long Length;// Offset=0x0 Size=0x4
    enum _FILE_INFORMATION_CLASS FileInformationClass;// Offset=0x4 Size=0x4
};

struct _IO_STACK_LOCATION::<unnamed-type-Parameters>::<unnamed-type-QueryDirectory>// Size=0x8 (Id=3287)
{
    unsigned long Length;// Offset=0x0 Size=0x4
    struct _STRING * FileName;// Offset=0x4 Size=0x4
};

struct _IO_STACK_LOCATION::<unnamed-type-Parameters>::<unnamed-type-Write>// Size=0x10 (Id=3288)
{
    unsigned long Length;// Offset=0x0 Size=0x4
    union // Size=0x4 (Id=0)
    {
        unsigned long BufferOffset;// Offset=0x4 Size=0x4
        void * CacheBuffer;// Offset=0x4 Size=0x4
    };
    union _LARGE_INTEGER ByteOffset;// Offset=0x8 Size=0x8
};

struct _IO_STACK_LOCATION::<unnamed-type-Parameters>::<unnamed-type-Read>// Size=0x10 (Id=3289)
{
    unsigned long Length;// Offset=0x0 Size=0x4
    union // Size=0x4 (Id=0)
    {
        unsigned long BufferOffset;// Offset=0x4 Size=0x4
        void * CacheBuffer;// Offset=0x4 Size=0x4
    };
    union _LARGE_INTEGER ByteOffset;// Offset=0x8 Size=0x8
};

struct _IO_STACK_LOCATION::<unnamed-type-Parameters>::<unnamed-type-Create>// Size=0x10 (Id=3290)
{
    unsigned long DesiredAccess;// Offset=0x0 Size=0x4
    unsigned long Options;// Offset=0x4 Size=0x4
    unsigned short FileAttributes;// Offset=0x8 Size=0x2
    unsigned short ShareAccess;// Offset=0xa Size=0x2
    struct _STRING * RemainingName;// Offset=0xc Size=0x4
};

class CXrlTransaction// Size=0xc2c (Id=3291)
{
    public void CXrlTransaction();
    public void ~CXrlTransaction();
    public enum XRL_TRANSACTION_STATE GetState();
    public void Initialize();
    public void Deinitialize();
    public HRESULT Submit(class CXrlConnection * ,unsigned long ,char * ,char * ,unsigned char * ,unsigned long ,unsigned long ,unsigned char * ,unsigned long ,unsigned long );
    public HRESULT SubmitLiveBaseOrdinal(class CXrlConnection * ,unsigned long ,char * ,char * ,unsigned char * ,unsigned long ,unsigned long ,unsigned char * ,unsigned long ,unsigned long ,unsigned long );
    public HRESULT Continue();
    public HRESULT GetRequestDataRemaining(unsigned long * );
    public HRESULT ResumeRequest(unsigned char * ,unsigned long );
    public HRESULT GetResponseStatusCode(unsigned long * );
    public HRESULT GetResponseContentLength(unsigned long * );
    public HRESULT GetResponseContentLength64(unsigned long long * );
    public HRESULT GetResponseContentLengthRemaining(unsigned long * );
    public HRESULT GetResponseContentLengthRemaining64(unsigned long long * );
    public void GetResponseContentLengthRemainingIgnoreState(unsigned long long * );
    public HRESULT GetResponseContentRange(unsigned long * ,unsigned long * );
    public HRESULT GetResponseContentRange64(unsigned long long * ,unsigned long long * );
    public HRESULT GetResponseLastModified(struct _FILETIME * );
    public HRESULT GetResponseHeaderXErr(HRESULT * );
    public HRESULT GetResponseHeaderXDelay(unsigned long * );
    public HRESULT GetResponseHeaderXDelayFlags(unsigned long * );
    public HRESULT GetResponseCustomHeaderString(char * ,char * ,unsigned long * );
    public HRESULT GetResponseCustomHeaderNumber(char * ,unsigned long * );
    public HRESULT GetResponseCustomHeaderSystemTime(char * ,struct _SYSTEMTIME * );
    public HRESULT GetResponseCustomHeaderFileTime(char * ,struct _FILETIME * );
    public HRESULT GetRawResponseHeaders(unsigned char * ,unsigned long * );
    public HRESULT GetResponseData(unsigned char ** ,unsigned long * );
    public HRESULT ResumeResponse(unsigned char * ,unsigned long );
    public HRESULT QueryOption(unsigned long ,void * ,unsigned long * );
    public HRESULT SetOption(unsigned long ,void * ,unsigned long );
    union // Size=0x8 (Id=0)
    {
        const unsigned long long c_UnknownContentLength;// Offset=0x0 Size=0x8
        void StatusCallback(void * ,unsigned long ,unsigned long ,void * ,unsigned long );
        void Reset();
        HRESULT GetResponseHeader(unsigned long ,char * ,void * ,unsigned long * );
        enum XRL_TRANSACTION_STATE m_State;// Offset=0x0 Size=0x4
        class CXrlConnection * m_pConnection;// Offset=0x4 Size=0x4
    };
    private void * m_hRequest;// Offset=0x8 Size=0x4
    private unsigned long m_dwRequestDataRemaining;// Offset=0xc Size=0x4
    private unsigned char * m_pbResponseBuffer;// Offset=0x10 Size=0x4
    private unsigned long m_dwResponseBufferSize;// Offset=0x14 Size=0x4
    private unsigned long long m_qwContentLengthRemaining;// Offset=0x18 Size=0x8
    private HRESULT m_hrResult;// Offset=0x20 Size=0x4
    private unsigned char * m_pbCurrentRead;// Offset=0x24 Size=0x4
    private unsigned long m_dwBytesReceived;// Offset=0x28 Size=0x4
    private unsigned char m_abRequestHandleBuffer[3072];// Offset=0x2c Size=0xc00
    public void * __vecDelDtor(unsigned int );
};

class CXuiList : public CXuiControl// Size=0x4 (Id=3292)
{
    public void CXuiList(struct _XUIOBJ * );
    public void CXuiList();
    public int GetCurSel(class CXuiControl * );
    public int GetCurSel(class CXuiElement * );
    public int GetCurSel(struct _XUIOBJ ** );
    public int GetCurSel();
    public HRESULT SetCurSel(int );
    public HRESULT SetCurSelVisible(int );
    public int IsItemVisible(int );
    public void GetItemControl(int ,class CXuiControl * );
    public struct _XUIOBJ * GetItemControl(int );
    public int GetItemCount();
    public int GetVisibleItemCount();
    public int GetCheckedItemCount();
    public int GetMaxVisibleItemCount();
    public int GetMaxLinesItemCount();
    public int GetMaxPerLineItemCount();
    public int GetTopItem();
    public HRESULT SetTopItem(int );
    public HRESULT InsertItems(int ,int );
    public HRESULT DeleteItems(int ,int );
    public int IsItemChecked(int );
    public HRESULT SetItemCheck(int ,int );
    public int IsItemEnabled(int );
    public HRESULT SetItemEnable(int ,int );
    public HRESULT SetText(int ,wchar_t * );
    public wchar_t * GetText(int );
    public HRESULT SetImage(int ,struct _XUIOBJ * );
    public HRESULT SetImage(int ,struct _XUIBRUSH * );
    public HRESULT SetImage(int ,wchar_t * );
    public HRESULT GetImage(int ,struct _XUIOBJ ** );
    public HRESULT GetImage(int ,struct _XUIBRUSH ** );
    public HRESULT GetImage(int ,wchar_t ** );
    public int GetItemCheck(int );
    public HRESULT GetNavInfo(int ,wchar_t ** ,int * ,unsigned int * ,unsigned int * );
    public HRESULT SetNavInfo(int ,wchar_t * ,int ,unsigned int ,unsigned int );
    public void Attach(struct _XUIOBJ * );
};

struct CERT_DER_ENTRY// Size=0x8 (Id=3293)
{
    unsigned char * pCert;// Offset=0x0 Size=0x4
    unsigned long dwSize;// Offset=0x4 Size=0x4
};

struct _GENERIC_LIST_MODIFY_LIST_REQUEST// Size=0x22 (Id=3294)
{
    unsigned long long xUserId;// Offset=0x0 Size=0x8
    unsigned long nListType;// Offset=0x8 Size=0x4
    unsigned long nListId;// Offset=0xc Size=0x4
    struct _FILETIME ftLastModified;// Offset=0x10 Size=0x8
    unsigned short wXmlLength;// Offset=0x18 Size=0x2
    wchar_t * XmlProperties;// Offset=0x1a Size=0x4
    struct _GENERIC_LIST_MODIFY_LIST_RESPONSE * pResponse;// Offset=0x1e Size=0x4
};

class CXuiNavButton : public CXuiControl// Size=0x4 (Id=3295)
{
    public void CXuiNavButton(struct _XUIOBJ * );
    public void CXuiNavButton();
    public wchar_t * GetPressPath();
    public int GetStayVisible();
    public HRESULT GetTransIndices(unsigned int * ,unsigned int * );
    public HRESULT GetNavInfo(wchar_t ** ,int * ,unsigned int * ,unsigned int * );
    public HRESULT SetNavInfo(wchar_t * ,int ,unsigned int ,unsigned int );
    public void Attach(struct _XUIOBJ * );
};

struct _XSTORAGE_ENUMERATE_PARAMS// Size=0x18 (Id=3296)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long dwServerPathLength;// Offset=0x4 Size=0x4
    wchar_t * wszServerPath;// Offset=0x8 Size=0x4
    unsigned long dwStartingIndex;// Offset=0xc Size=0x4
    unsigned long dwMaxResultsToReturn;// Offset=0x10 Size=0x4
    struct _XSTORAGE_ENUMERATE_RESULTS * pResults;// Offset=0x14 Size=0x4
};

class CXStorageEnumerate : public CXStorageMiscParent// Size=0x1e40 (Id=3297)
{
    public void CXStorageEnumerate(class CXStorageEnumerate & );
    public void CXStorageEnumerate();
    public HRESULT CustomInitialize();
    public void CustomCleanup();
    public unsigned long CustomGetObjectSize();
    public HRESULT CustomPrepareRequest();
    public HRESULT CustomContinueBuildRequest();
    public HRESULT CustomContinueProcessHttpHeaders();
    public void StorageMiscGetServerPath(wchar_t ** );
    private unsigned char __align0[7712];// Offset=0x0 Size=0x1e20
    private unsigned long long m_xuidUser;// Offset=0x1e20 Size=0x8
    private unsigned long m_dwServerPathLength;// Offset=0x1e28 Size=0x4
    private wchar_t * m_pwszServerPath;// Offset=0x1e2c Size=0x4
    private unsigned long m_dwStartingIndex;// Offset=0x1e30 Size=0x4
    private unsigned long m_dwMaxResultsToReturn;// Offset=0x1e34 Size=0x4
    private class CXLiveSubTask * m_pSubTask;// Offset=0x1e38 Size=0x4
    public void ~CXStorageEnumerate();
    public class CXStorageEnumerate & operator=(class CXStorageEnumerate & );
    public void * __vecDelDtor(unsigned int );
};

class CXStorageEnumerate : public CXStorageMiscParent// Size=0x1e40 (Id=3298)
{
    public void CXStorageEnumerate(class CXStorageEnumerate & );
    public void CXStorageEnumerate();
    public HRESULT CustomInitialize();
    public void CustomCleanup();
    public unsigned long CustomGetObjectSize();
    public HRESULT CustomPrepareRequest();
    public HRESULT CustomContinueBuildRequest();
    public HRESULT CustomContinueProcessHttpHeaders();
    public void StorageMiscGetServerPath(wchar_t ** );
    private unsigned char __align0[7712];// Offset=0x0 Size=0x1e20
    private unsigned long long m_xuidUser;// Offset=0x1e20 Size=0x8
    private unsigned long m_dwServerPathLength;// Offset=0x1e28 Size=0x4
    private wchar_t * m_pwszServerPath;// Offset=0x1e2c Size=0x4
    private unsigned long m_dwStartingIndex;// Offset=0x1e30 Size=0x4
    private unsigned long m_dwMaxResultsToReturn;// Offset=0x1e34 Size=0x4
    private class CXLiveSubTask * m_pSubTask;// Offset=0x1e38 Size=0x4
    public void ~CXStorageEnumerate();
    public class CXStorageEnumerate & operator=(class CXStorageEnumerate & );
    public void * __vecDelDtor(unsigned int );
};

struct XUINotifyHtmlLinkHovering// Size=0x4 (Id=3299)
{
    int bHovering;// Offset=0x0 Size=0x4
};

struct _CSVChal// Size=0x12c (Id=3300)
{
    unsigned long _dwReserved;// Offset=0x0 Size=0x4
    unsigned long _dwNonce;// Offset=0x4 Size=0x4
    unsigned long _dwChalFlags;// Offset=0x8 Size=0x4
    unsigned char _abParams[16];// Offset=0xc Size=0x10
    unsigned char _abPkSig[256];// Offset=0x1c Size=0x100
    unsigned short _wVersion;// Offset=0x11c Size=0x2
    unsigned short _wSize;// Offset=0x11e Size=0x2
    unsigned short _wChalId;// Offset=0x120 Size=0x2
    unsigned short _wChalVer;// Offset=0x122 Size=0x2
    unsigned long _dwChalSize;// Offset=0x124 Size=0x4
    unsigned long _dwContext;// Offset=0x128 Size=0x4
};

class CXuiRadioGroup : public CXuiControl// Size=0x4 (Id=3301)
{
    public void CXuiRadioGroup(struct _XUIOBJ * );
    public void CXuiRadioGroup();
    public int GetCurSel(class CXuiElement * );
    public int GetCurSel(struct _XUIOBJ ** );
    public int GetCurSel();
    public HRESULT SetCurSel(int );
    public struct _XUIOBJ * GetItemControl(int );
    public struct _XUIOBJ * GetChecked();
    public HRESULT SetChecked(struct _XUIOBJ * );
    public void Attach(struct _XUIOBJ * );
};

struct _XONLINE_CONFIG_TASK_PRI_PARAMS// Size=0xc (Id=3302)
{
    struct _XOVERLAPPED * pOverlappedToSetOrGet;// Offset=0x0 Size=0x4
    int fSet;// Offset=0x4 Size=0x4
    int fForeground;// Offset=0x8 Size=0x4
};

struct IXUIPropObjVTBL// Size=0x1c (Id=3303)
{
    struct XUIElementPropDef *  ( * GetPropDef)(struct IXUIPropObj * ,unsigned long * );// Offset=0x0 Size=0x4
    HRESULT  ( * GetPropertyId)(struct IXUIPropObj * ,wchar_t * ,unsigned long * );// Offset=0x4 Size=0x4
    HRESULT  ( * GetPropertyDef)(struct IXUIPropObj * ,wchar_t * ,struct XUIElementPropDef ** );// Offset=0x8 Size=0x4
    HRESULT  ( * GetPropertyRef)(struct IXUIPropObj * ,unsigned long ,void ** );// Offset=0xc Size=0x4
    HRESULT  ( * GetProperty)(struct IXUIPropObj * ,unsigned long ,unsigned long ,struct XUIElementPropVal * );// Offset=0x10 Size=0x4
    HRESULT  ( * SetProperty)(struct IXUIPropObj * ,unsigned long ,unsigned long ,struct XUIElementPropVal * );// Offset=0x14 Size=0x4
    HRESULT  ( * GetPropertyCount)(struct IXUIPropObj * ,unsigned long ,unsigned long * );// Offset=0x18 Size=0x4
};

class CXuiTextElement : public CXuiElement// Size=0x4 (Id=3304)
{
    public void CXuiTextElement(struct _XUIOBJ * );
    public void CXuiTextElement();
    public HRESULT SetText(wchar_t * );
    public wchar_t * GetText();
    public HRESULT MeasureText(wchar_t * ,struct XUIRect * );
    public void Attach(struct _XUIOBJ * );
};

struct _XNTOOLCALLBACKS// Size=0x10 (Id=3305)
{
    unsigned long dwStructSize;// Offset=0x0 Size=0x4
    unsigned long dwMaxTcpMss;// Offset=0x4 Size=0x4
    void * pvCallbackUserData;// Offset=0x8 Size=0x4
    int  ( * pfnToolIpProxyXmitCallback)(void * ,unsigned char * ,unsigned int * );// Offset=0xc Size=0x4
};

class CXuiSceneImpl : public CXuiElementImplBase, public CXuiScene// Size=0x8 (Id=3306)
{
    public void CXuiSceneImpl(class CXuiSceneImpl & );
    public void CXuiSceneImpl();
    public class CXuiSceneImpl & operator=(class CXuiSceneImpl & );
};

class CXuiSceneImpl : public CXuiElementImplBase, public CXuiScene// Size=0x8 (Id=3307)
{
    public void CXuiSceneImpl(class CXuiSceneImpl & );
    public void CXuiSceneImpl();
    public class CXuiSceneImpl & operator=(class CXuiSceneImpl & );
};

class CXLiveAsyncTaskInternal// Size=0x1e20 (Id=3308)
{
    union // Size=0x1e1c (Id=0)
    {
        struct REQUESTTHROTTLEDATA// Size=0x1c (Id=35211)
        {
            unsigned long dwOrdinal;// Offset=0x0 Size=0x4
            unsigned long dwThrottleDelayMs;// Offset=0x4 Size=0x4
            unsigned long dwThrottleFlags;// Offset=0x8 Size=0x4
            struct _LIST_ENTRY leQueue;// Offset=0xc Size=0x8
            unsigned long dwLastThrottleTime;// Offset=0x14 Size=0x4
            struct CXLiveAsyncTaskInternal::REQUESTTHROTTLEDATA * pNext;// Offset=0x18 Size=0x4
        };
        struct RECEIVERATELIMITDATA// Size=0x18 (Id=35219)
        {
            unsigned long dwRefCount;// Offset=0x0 Size=0x4
            unsigned long dwActiveCount;// Offset=0x4 Size=0x4
            unsigned long dwReceiveByteLimitPerPeriod;// Offset=0x8 Size=0x4
            unsigned long dwReceivePeriodStartTick;// Offset=0xc Size=0x4
            unsigned long dwReceivePeriodBytes;// Offset=0x10 Size=0x4
            struct CXLiveAsyncTaskInternal::RECEIVERATELIMITDATA * pParentData;// Offset=0x14 Size=0x4
        };
        void CXLiveAsyncTaskInternal(class CXLiveAsyncTaskInternal & );
        void CXLiveAsyncTaskInternal();
        HRESULT CustomInitialize();
        void CustomCleanup();
        unsigned long CustomGetObjectSize();
        struct CXLiveAsyncTaskInternal::RECEIVERATELIMITDATA * CustomSelectReceiveRateLimitData();
        HRESULT CustomPrepareRequest();
        HRESULT CustomContinueBuildRequest();
        HRESULT CustomContinueSubmitRequest();
        HRESULT CustomContinueProcessHttpHeaders();
        HRESULT CustomHandleHttpHeadersComplete(unsigned long ,unsigned long long );
        HRESULT CustomContinueProcessResponseHeader();
        HRESULT CustomHandleResponseHeaderComplete(HRESULT );
        HRESULT CustomContinueResponseData();
        unsigned long CustomGetMaxReceiveChunkSize();
        HRESULT CustomCheckForRecoverableError(HRESULT );
        HRESULT InitializeInternal(class CXLiveAsyncTask * ,class CSchemaData * ,struct _XLIVEBASE_ASYNC_MESSAGE * );
        HRESULT Continue();
        void CancelAndCleanup();
        void DoCompletion();
        void IncrementProgressNumerator(unsigned long long );
        void IncrementProgressDenominator(unsigned long long );
        void LogInstrumentationEvent(HRESULT );
        HRESULT InitializeThrottling();
        void CleanupThrottling();
        HRESULT LookupThrottleData(unsigned long ,struct CXLiveAsyncTaskInternal::REQUESTTHROTTLEDATA ** );
        HRESULT GetRequestThrottleSettings(unsigned long ,struct _XONLINE_REQUEST_THROTTLE_SETTINGS * );
        HRESULT SetRequestThrottleSettings(unsigned long ,struct _XONLINE_REQUEST_THROTTLE_SETTINGS * );
        void SetRequestThrottleDelayAndFlags(unsigned long ,unsigned long ,unsigned long ,int );
        HRESULT SetupTaskThrottle(class CXLiveAsyncTaskInternal * );
        void FinishTaskThrottle(class CXLiveAsyncTaskInternal * );
        int HasTaskRequestThrottleExpired(class CXLiveAsyncTaskInternal * );
        void AdvanceReceiveRateLimitPeriod(class CXLiveAsyncTaskInternal * );
        void AdvanceReceiveRateLimitPeriodTo(struct CXLiveAsyncTaskInternal::RECEIVERATELIMITDATA * ,unsigned long );
        unsigned long CheckReceiveRateLimit(class CXLiveAsyncTaskInternal * );
        void CountDataAgainstReceiveRateLimit(class CXLiveAsyncTaskInternal * ,unsigned long );
        void SetReceiveRateLimit(struct CXLiveAsyncTaskInternal::RECEIVERATELIMITDATA * ,unsigned long );
        void SetGlobalReceiveRateLimit(unsigned long );
        HRESULT GetTaskProgress(struct _XLIVEBASE_GET_TASK_PROGRESS * );
        class CXLiveAsyncTask * GetExternal();
        struct _XOVERLAPPED * GetOverlapped();
        HRESULT GetFinalResult();
        unsigned long GetSchemaIndex();
        struct _LIST_ENTRY * GetTaskListEntry();
        struct _LIST_ENTRY * GetThrottleListEntry();
        struct _XLIVEBASE_ASYNC_MESSAGE * GetXLiveBaseAsyncMessage();
        int IsOnTitleBehalf();
        int IsConfigurablePriority();
        int IsHighPriority();
        void SetHighPriority(int );
        class CXLiveAsyncTaskInternal * GetFromTaskListEntry(struct _LIST_ENTRY * );
        class CXLiveAsyncTaskInternal * GetFromThrottleListEntry(struct _LIST_ENTRY * );
        HRESULT SubmitRequest(struct _XONLINE_SERVICE_INFO * ,unsigned long ,char * ,char * ,unsigned long ,unsigned long ,unsigned long );
        HRESULT ResumeResponse();
        class CXLiveSubTask * GetFirstSubTask(unsigned long * );
        class CXLiveAsyncTask * m_pExternal;// Offset=0x8 Size=0x4
        struct _XLIVEBASE_ASYNC_MESSAGE * m_pXLiveBaseAsyncMessage;// Offset=0xc Size=0x4
        enum ASYNC_TASK_STATE m_State;// Offset=0x10 Size=0x4
        struct _LIST_ENTRY m_leTasks;// Offset=0x14 Size=0x8
        struct _LIST_ENTRY m_leThrottle;// Offset=0x1c Size=0x8
        class CSchemaData * m_pCurrentSchema;// Offset=0x24 Size=0x4
        unsigned long m_dwSchemaIndex;// Offset=0x28 Size=0x4
        unsigned long m_HttpStatus;// Offset=0x2c Size=0x4
        HRESULT m_hrFinal;// Offset=0x30 Size=0x4
        HRESULT m_hrXErr;// Offset=0x34 Size=0x4
        struct CXLiveAsyncTaskInternal::RECEIVERATELIMITDATA * m_pReceiveRateLimitData;// Offset=0x38 Size=0x4
        class CXrlConnection m_XrlConnection;// Offset=0x3c Size=0x10
        class CXrlTransaction m_XrlTransaction;// Offset=0x4c Size=0xc2c
        class CUnmarshaller m_Unmarshaller;// Offset=0xc78 Size=0x1198
        unsigned char m_abTaskObjectPadding[12];// Offset=0x1e10 Size=0xc
        struct _RTL_CRITICAL_SECTION s_csThrottle;// Offset=0x0 Size=0x1c
        struct CXLiveAsyncTaskInternal::REQUESTTHROTTLEDATA * s_paRequestThrottleData;// Offset=0x0 Size=0x4
        unsigned long s_dwRequestThrottleDataIndex;// Offset=0x0 Size=0x4
        struct CXLiveAsyncTaskInternal::REQUESTTHROTTLEDATA ** s_ppRequestThrottleDataBuckets;// Offset=0x0 Size=0x4
        struct CXLiveAsyncTaskInternal::RECEIVERATELIMITDATA s_GlobalReceiveRateLimitData;// Offset=0x0 Size=0x18
        unsigned long s_dwInitTime;// Offset=0x0 Size=0x4
        void ~CXLiveAsyncTaskInternal();
        class CXLiveAsyncTaskInternal & operator=(class CXLiveAsyncTaskInternal & );
        void * __vecDelDtor(unsigned int );
    };
};

class CXLiveAsyncTaskInternal// Size=0x1e20 (Id=3309)
{
    union // Size=0x1e1c (Id=0)
    {
        struct REQUESTTHROTTLEDATA// Size=0x1c (Id=35211)
        {
            unsigned long dwOrdinal;// Offset=0x0 Size=0x4
            unsigned long dwThrottleDelayMs;// Offset=0x4 Size=0x4
            unsigned long dwThrottleFlags;// Offset=0x8 Size=0x4
            struct _LIST_ENTRY leQueue;// Offset=0xc Size=0x8
            unsigned long dwLastThrottleTime;// Offset=0x14 Size=0x4
            struct CXLiveAsyncTaskInternal::REQUESTTHROTTLEDATA * pNext;// Offset=0x18 Size=0x4
        };
        struct RECEIVERATELIMITDATA// Size=0x18 (Id=35219)
        {
            unsigned long dwRefCount;// Offset=0x0 Size=0x4
            unsigned long dwActiveCount;// Offset=0x4 Size=0x4
            unsigned long dwReceiveByteLimitPerPeriod;// Offset=0x8 Size=0x4
            unsigned long dwReceivePeriodStartTick;// Offset=0xc Size=0x4
            unsigned long dwReceivePeriodBytes;// Offset=0x10 Size=0x4
            struct CXLiveAsyncTaskInternal::RECEIVERATELIMITDATA * pParentData;// Offset=0x14 Size=0x4
        };
        void CXLiveAsyncTaskInternal(class CXLiveAsyncTaskInternal & );
        void CXLiveAsyncTaskInternal();
        HRESULT CustomInitialize();
        void CustomCleanup();
        unsigned long CustomGetObjectSize();
        struct CXLiveAsyncTaskInternal::RECEIVERATELIMITDATA * CustomSelectReceiveRateLimitData();
        HRESULT CustomPrepareRequest();
        HRESULT CustomContinueBuildRequest();
        HRESULT CustomContinueSubmitRequest();
        HRESULT CustomContinueProcessHttpHeaders();
        HRESULT CustomHandleHttpHeadersComplete(unsigned long ,unsigned long long );
        HRESULT CustomContinueProcessResponseHeader();
        HRESULT CustomHandleResponseHeaderComplete(HRESULT );
        HRESULT CustomContinueResponseData();
        unsigned long CustomGetMaxReceiveChunkSize();
        HRESULT CustomCheckForRecoverableError(HRESULT );
        HRESULT InitializeInternal(class CXLiveAsyncTask * ,class CSchemaData * ,struct _XLIVEBASE_ASYNC_MESSAGE * );
        HRESULT Continue();
        void CancelAndCleanup();
        void DoCompletion();
        void IncrementProgressNumerator(unsigned long long );
        void IncrementProgressDenominator(unsigned long long );
        void LogInstrumentationEvent(HRESULT );
        HRESULT InitializeThrottling();
        void CleanupThrottling();
        HRESULT LookupThrottleData(unsigned long ,struct CXLiveAsyncTaskInternal::REQUESTTHROTTLEDATA ** );
        HRESULT GetRequestThrottleSettings(unsigned long ,struct _XONLINE_REQUEST_THROTTLE_SETTINGS * );
        HRESULT SetRequestThrottleSettings(unsigned long ,struct _XONLINE_REQUEST_THROTTLE_SETTINGS * );
        void SetRequestThrottleDelayAndFlags(unsigned long ,unsigned long ,unsigned long ,int );
        HRESULT SetupTaskThrottle(class CXLiveAsyncTaskInternal * );
        void FinishTaskThrottle(class CXLiveAsyncTaskInternal * );
        int HasTaskRequestThrottleExpired(class CXLiveAsyncTaskInternal * );
        void AdvanceReceiveRateLimitPeriod(class CXLiveAsyncTaskInternal * );
        void AdvanceReceiveRateLimitPeriodTo(struct CXLiveAsyncTaskInternal::RECEIVERATELIMITDATA * ,unsigned long );
        unsigned long CheckReceiveRateLimit(class CXLiveAsyncTaskInternal * );
        void CountDataAgainstReceiveRateLimit(class CXLiveAsyncTaskInternal * ,unsigned long );
        void SetReceiveRateLimit(struct CXLiveAsyncTaskInternal::RECEIVERATELIMITDATA * ,unsigned long );
        void SetGlobalReceiveRateLimit(unsigned long );
        HRESULT GetTaskProgress(struct _XLIVEBASE_GET_TASK_PROGRESS * );
        class CXLiveAsyncTask * GetExternal();
        struct _XOVERLAPPED * GetOverlapped();
        HRESULT GetFinalResult();
        unsigned long GetSchemaIndex();
        struct _LIST_ENTRY * GetTaskListEntry();
        struct _LIST_ENTRY * GetThrottleListEntry();
        struct _XLIVEBASE_ASYNC_MESSAGE * GetXLiveBaseAsyncMessage();
        int IsOnTitleBehalf();
        int IsConfigurablePriority();
        int IsHighPriority();
        void SetHighPriority(int );
        class CXLiveAsyncTaskInternal * GetFromTaskListEntry(struct _LIST_ENTRY * );
        class CXLiveAsyncTaskInternal * GetFromThrottleListEntry(struct _LIST_ENTRY * );
        HRESULT SubmitRequest(struct _XONLINE_SERVICE_INFO * ,unsigned long ,char * ,char * ,unsigned long ,unsigned long ,unsigned long );
        HRESULT ResumeResponse();
        class CXLiveSubTask * GetFirstSubTask(unsigned long * );
        class CXLiveAsyncTask * m_pExternal;// Offset=0x8 Size=0x4
        struct _XLIVEBASE_ASYNC_MESSAGE * m_pXLiveBaseAsyncMessage;// Offset=0xc Size=0x4
        enum ASYNC_TASK_STATE m_State;// Offset=0x10 Size=0x4
        struct _LIST_ENTRY m_leTasks;// Offset=0x14 Size=0x8
        struct _LIST_ENTRY m_leThrottle;// Offset=0x1c Size=0x8
        class CSchemaData * m_pCurrentSchema;// Offset=0x24 Size=0x4
        unsigned long m_dwSchemaIndex;// Offset=0x28 Size=0x4
        unsigned long m_HttpStatus;// Offset=0x2c Size=0x4
        HRESULT m_hrFinal;// Offset=0x30 Size=0x4
        HRESULT m_hrXErr;// Offset=0x34 Size=0x4
        struct CXLiveAsyncTaskInternal::RECEIVERATELIMITDATA * m_pReceiveRateLimitData;// Offset=0x38 Size=0x4
        class CXrlConnection m_XrlConnection;// Offset=0x3c Size=0x10
        class CXrlTransaction m_XrlTransaction;// Offset=0x4c Size=0xc2c
        class CUnmarshaller m_Unmarshaller;// Offset=0xc78 Size=0x1198
        unsigned char m_abTaskObjectPadding[12];// Offset=0x1e10 Size=0xc
        struct _RTL_CRITICAL_SECTION s_csThrottle;// Offset=0x0 Size=0x1c
        struct CXLiveAsyncTaskInternal::REQUESTTHROTTLEDATA * s_paRequestThrottleData;// Offset=0x0 Size=0x4
        unsigned long s_dwRequestThrottleDataIndex;// Offset=0x0 Size=0x4
        struct CXLiveAsyncTaskInternal::REQUESTTHROTTLEDATA ** s_ppRequestThrottleDataBuckets;// Offset=0x0 Size=0x4
        struct CXLiveAsyncTaskInternal::RECEIVERATELIMITDATA s_GlobalReceiveRateLimitData;// Offset=0x0 Size=0x18
        unsigned long s_dwInitTime;// Offset=0x0 Size=0x4
        void ~CXLiveAsyncTaskInternal();
        class CXLiveAsyncTaskInternal & operator=(class CXLiveAsyncTaskInternal & );
        void * __vecDelDtor(unsigned int );
    };
};

struct _XONLINE_REQUEST_THROTTLE_SETTINGS// Size=0x8 (Id=3310)
{
    unsigned long dwThrottleDelayMs;// Offset=0x0 Size=0x4
    unsigned long dwThrottleFlags;// Offset=0x4 Size=0x4
};

struct CXLiveAsyncTaskInternal::RECEIVERATELIMITDATA// Size=0x18 (Id=3311)
{
    unsigned long dwRefCount;// Offset=0x0 Size=0x4
    unsigned long dwActiveCount;// Offset=0x4 Size=0x4
    unsigned long dwReceiveByteLimitPerPeriod;// Offset=0x8 Size=0x4
    unsigned long dwReceivePeriodStartTick;// Offset=0xc Size=0x4
    unsigned long dwReceivePeriodBytes;// Offset=0x10 Size=0x4
    struct CXLiveAsyncTaskInternal::RECEIVERATELIMITDATA * pParentData;// Offset=0x14 Size=0x4
};

struct CXLiveAsyncTaskInternal::REQUESTTHROTTLEDATA// Size=0x1c (Id=3312)
{
    unsigned long dwOrdinal;// Offset=0x0 Size=0x4
    unsigned long dwThrottleDelayMs;// Offset=0x4 Size=0x4
    unsigned long dwThrottleFlags;// Offset=0x8 Size=0x4
    struct _LIST_ENTRY leQueue;// Offset=0xc Size=0x8
    unsigned long dwLastThrottleTime;// Offset=0x14 Size=0x4
    struct CXLiveAsyncTaskInternal::REQUESTTHROTTLEDATA * pNext;// Offset=0x18 Size=0x4
};

struct SCHEMA_EXTENDED_ATTRIBUTES// Size=0x1 (Id=3313)
{
    struct // Size=0x1 (Id=0)
    {
        unsigned char IsHresult:1;// Offset=0x0 Size=0x1 BitOffset=0x0 BitSize=0x1
        unsigned char IsHidden:1;// Offset=0x0 Size=0x1 BitOffset=0x1 BitSize=0x1
        unsigned char Reserved:6;// Offset=0x0 Size=0x1 BitOffset=0x2 BitSize=0x6
    };
};

struct XUIMessageScroll// Size=0x4 (Id=3314)
{
    int nPos;// Offset=0x0 Size=0x4
};

struct _XSTORAGE_UPLOAD_FROM_DIRECTORY_PARAMS_INTERNAL// Size=0x14 (Id=3315)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long dwServerPathLength;// Offset=0x4 Size=0x4
    wchar_t * wszServerPath;// Offset=0x8 Size=0x4
    unsigned long dwLocalPathLength;// Offset=0xc Size=0x4
    char * szLocalPath;// Offset=0x10 Size=0x4
};

struct XUIMessageTimer// Size=0x4 (Id=3316)
{
    unsigned long nId;// Offset=0x0 Size=0x4
};

struct _VERIFY_TOKEN_REQUEST// Size=0x1e (Id=3317)
{
    unsigned long long xuid;// Offset=0x0 Size=0x8
    unsigned long long qwMachineId;// Offset=0x8 Size=0x8
    unsigned short wBillingTokenLength;// Offset=0x10 Size=0x2
    wchar_t * wszBillingToken;// Offset=0x12 Size=0x4
    unsigned long dwStoreId;// Offset=0x16 Size=0x4
    struct _VERIFY_TOKEN_RESPONSE * pResponse;// Offset=0x1a Size=0x4
};

struct XUIMessageChildSaving// Size=0x8 (Id=3318)
{
    struct _XUIOBJ * hChild;// Offset=0x0 Size=0x4
    int bDeny;// Offset=0x4 Size=0x4
};

class CXStorageUploadFromDirectory : public CXStorageUploadParent// Size=0x14a90 (Id=3319)
{
    public void CXStorageUploadFromDirectory(class CXStorageUploadFromDirectory & );
    public void CXStorageUploadFromDirectory();
    public HRESULT CustomInitialize();
    public void CustomCleanup();
    public unsigned long CustomGetObjectSize();
    public HRESULT CustomPrepareRequest();
    public HRESULT CustomContinueBuildRequest();
    public HRESULT CustomContinueProcessHttpHeaders();
    public void StorageUploadGetServerPath(wchar_t ** );
    public unsigned long StorageUploadGetSize();
    public HRESULT StorageUploadGetNextBlock(unsigned char ** ,unsigned long * );
    private HRESULT HandleNewFile();
    private unsigned char __align0[7712];// Offset=0x0 Size=0x1e20
    private unsigned long long m_xuidUser;// Offset=0x1e20 Size=0x8
    private unsigned long m_dwServerPathLength;// Offset=0x1e28 Size=0x4
    private wchar_t * m_pwszServerPath;// Offset=0x1e2c Size=0x4
    private unsigned long m_dwLocalPathLength;// Offset=0x1e30 Size=0x4
    private char * m_pszLocalPath;// Offset=0x1e34 Size=0x4
    private class CXDirectoryCrawler m_DirectoryCrawler;// Offset=0x1e38 Size=0x258
    private void * m_hCurrentFile;// Offset=0x2090 Size=0x4
    private unsigned char __align1[4];// Offset=0x2094 Size=0x4
    private union _LARGE_INTEGER m_liCurrentFileOffset;// Offset=0x2098 Size=0x8
    private class CXStorageUploadWorker * m_pUploadSubTask;// Offset=0x20a0 Size=0x4
    struct // Size=0x4 (Id=0)
    {
        unsigned long m_fSentContentHeader:1;// Offset=0x20a4 Size=0x4 BitOffset=0x1f BitSize=0x1
        unsigned long m_fSentFoldersList:1;// Offset=0x20a4 Size=0x4 BitOffset=0x1e BitSize=0x1
        unsigned long m_fSentFilesList:1;// Offset=0x20a4 Size=0x4 BitOffset=0x1d BitSize=0x1
    };
    private unsigned long m_dwCabSize;// Offset=0x20a8 Size=0x4
    private struct XONLINECONTENT_HEADER m_ContentHeader;// Offset=0x20ac Size=0x60
    private struct _RC4_SHA_HEADER m_Rc4ShaHeader;// Offset=0x210c Size=0x1c
    private unsigned long m_dwCheckpoint;// Offset=0x2128 Size=0x4
    private unsigned char m_abPkSignature[256];// Offset=0x212c Size=0x100
    private struct _XSIGNATURE_TO_VERIFY m_ContentHeaderSignature;// Offset=0x222c Size=0x78
    private struct CFFOLDER_HMAC m_aCfFolderHmac[100];// Offset=0x22a4 Size=0xe10
    private unsigned long m_dwCurrentFolder;// Offset=0x30b4 Size=0x4
    private unsigned char m_abCfFilesBuffer[70656];// Offset=0x30b8 Size=0x11400
    private unsigned char * m_pbCurrentFileHeader;// Offset=0x144b8 Size=0x4
    private class CXCabCryptHelper m_CabCryptHelper;// Offset=0x144bc Size=0x1d4
    private unsigned char m_abTempBuffer[1024];// Offset=0x14690 Size=0x400
    public void ~CXStorageUploadFromDirectory();
    public class CXStorageUploadFromDirectory & operator=(class CXStorageUploadFromDirectory & );
    public void * __vecDelDtor(unsigned int );
};

class CXStorageUploadFromDirectory : public CXStorageUploadParent// Size=0x14a90 (Id=3320)
{
    public void CXStorageUploadFromDirectory(class CXStorageUploadFromDirectory & );
    public void CXStorageUploadFromDirectory();
    public HRESULT CustomInitialize();
    public void CustomCleanup();
    public unsigned long CustomGetObjectSize();
    public HRESULT CustomPrepareRequest();
    public HRESULT CustomContinueBuildRequest();
    public HRESULT CustomContinueProcessHttpHeaders();
    public void StorageUploadGetServerPath(wchar_t ** );
    public unsigned long StorageUploadGetSize();
    public HRESULT StorageUploadGetNextBlock(unsigned char ** ,unsigned long * );
    private HRESULT HandleNewFile();
    private unsigned char __align0[7712];// Offset=0x0 Size=0x1e20
    private unsigned long long m_xuidUser;// Offset=0x1e20 Size=0x8
    private unsigned long m_dwServerPathLength;// Offset=0x1e28 Size=0x4
    private wchar_t * m_pwszServerPath;// Offset=0x1e2c Size=0x4
    private unsigned long m_dwLocalPathLength;// Offset=0x1e30 Size=0x4
    private char * m_pszLocalPath;// Offset=0x1e34 Size=0x4
    private class CXDirectoryCrawler m_DirectoryCrawler;// Offset=0x1e38 Size=0x258
    private void * m_hCurrentFile;// Offset=0x2090 Size=0x4
    private unsigned char __align1[4];// Offset=0x2094 Size=0x4
    private union _LARGE_INTEGER m_liCurrentFileOffset;// Offset=0x2098 Size=0x8
    private class CXStorageUploadWorker * m_pUploadSubTask;// Offset=0x20a0 Size=0x4
    struct // Size=0x4 (Id=0)
    {
        unsigned long m_fSentContentHeader:1;// Offset=0x20a4 Size=0x4 BitOffset=0x1f BitSize=0x1
        unsigned long m_fSentFoldersList:1;// Offset=0x20a4 Size=0x4 BitOffset=0x1e BitSize=0x1
        unsigned long m_fSentFilesList:1;// Offset=0x20a4 Size=0x4 BitOffset=0x1d BitSize=0x1
    };
    private unsigned long m_dwCabSize;// Offset=0x20a8 Size=0x4
    private struct XONLINECONTENT_HEADER m_ContentHeader;// Offset=0x20ac Size=0x60
    private struct _RC4_SHA_HEADER m_Rc4ShaHeader;// Offset=0x210c Size=0x1c
    private unsigned long m_dwCheckpoint;// Offset=0x2128 Size=0x4
    private unsigned char m_abPkSignature[256];// Offset=0x212c Size=0x100
    private struct _XSIGNATURE_TO_VERIFY m_ContentHeaderSignature;// Offset=0x222c Size=0x78
    private struct CFFOLDER_HMAC m_aCfFolderHmac[100];// Offset=0x22a4 Size=0xe10
    private unsigned long m_dwCurrentFolder;// Offset=0x30b4 Size=0x4
    private unsigned char m_abCfFilesBuffer[70656];// Offset=0x30b8 Size=0x11400
    private unsigned char * m_pbCurrentFileHeader;// Offset=0x144b8 Size=0x4
    private class CXCabCryptHelper m_CabCryptHelper;// Offset=0x144bc Size=0x1d4
    private unsigned char m_abTempBuffer[1024];// Offset=0x14690 Size=0x400
    public void ~CXStorageUploadFromDirectory();
    public class CXStorageUploadFromDirectory & operator=(class CXStorageUploadFromDirectory & );
    public void * __vecDelDtor(unsigned int );
};

class CArgument// Size=0x10 (Id=3321)
{
    public unsigned long GetNativeSize();
    public unsigned long long GetArgumentQword();
    public unsigned long GetArgumentDword();
    public unsigned short GetArgumentWord();
    public unsigned char GetArgumentByte();
    public unsigned char * GetArgumentPtr();
    public void SetValue(unsigned long ,unsigned long long );
    protected unsigned long m_NativeSize;// Offset=0x0 Size=0x4
    private unsigned char __align0[4];// Offset=0x4 Size=0x4
    protected unsigned long long m_ArgumentValue;// Offset=0x8 Size=0x8
};

struct XNetLogonMachineAccount// Size=0x1ec (Id=3322)
{
    struct XNetConfigSectorHeader Header;// Offset=0x0 Size=0x1c
    unsigned long dwServiceNetworkID;// Offset=0x1c Size=0x4
    unsigned long long qwId;// Offset=0x20 Size=0x8
    char szGamertag[16];// Offset=0x28 Size=0x10
    char szDomain[20];// Offset=0x38 Size=0x14
    char szKerberosRealm[24];// Offset=0x4c Size=0x18
    unsigned char abKey[16];// Offset=0x64 Size=0x10
    unsigned char bCountryIdOfLastLogon;// Offset=0x74 Size=0x1
    unsigned char abReserved[375];// Offset=0x75 Size=0x177
};

class CMarshaller// Size=0x440 (Id=3323)
{
    public void CMarshaller();
    public void ~CMarshaller();
    union // Size=0x43c (Id=0)
    {
        HRESULT Initialize(class CSchemaData * ,unsigned long ,unsigned long ,class CArgumentList * ,unsigned char * ,unsigned long ,int );// Offset=0x0 Size=0xc0
        HRESULT Marshal();// Offset=0x0 Size=0x30
        unsigned long GetMarshalledSize();
        class CSchemaData * m_pSchemaData;// Offset=0x0 Size=0x4
        class CArgumentList * m_pArgumentList;// Offset=0x4 Size=0x4
        class CBaseEndianBuffer m_WireBuffer;// Offset=0x8 Size=0x14
        class CSchemaAccess m_SchemaBuffer;// Offset=0x1c Size=0x18
        unsigned char __align0[4];// Offset=0x34 Size=0x4
        class CConformanceList m_ConformanceList;// Offset=0x38 Size=0x400
        unsigned long m_dwCounter;// Offset=0x438 Size=0x4
        HRESULT GetArgumentFromSchema(unsigned long ,class CArgument ** ,int * );// Offset=0x0 Size=0x80
        HRESULT RecursiveMarshal(unsigned long ,unsigned char ** );// Offset=0x0 Size=0x7d0
    };
    public void * __vecDelDtor(unsigned int );
};

class CXMessageDownloadAttachmentToMemory : public CXStorageDownloadParent// Size=0x21d0 (Id=3324)
{
    public void CXMessageDownloadAttachmentToMemory(class CXMessageDownloadAttachmentToMemory & );
    public void CXMessageDownloadAttachmentToMemory();
    public HRESULT CustomInitialize();
    public void CustomCleanup();
    public unsigned long CustomGetObjectSize();
    public HRESULT CustomPrepareRequest();
    public HRESULT CustomContinueBuildRequest();
    public HRESULT CustomContinueProcessHttpHeaders();
    public void StorageDownloadGetServerPath(wchar_t ** );
    public HRESULT StorageDownloadProcessResponseHeader();
    public HRESULT StorageDownloadContinueProcessResponseData();
    public void StorageDownloadHandleSignatureVerified();
    public HRESULT StorageDownloadComplete();
    private unsigned char __align0[7712];// Offset=0x0 Size=0x1e20
    private unsigned long long m_xuidUser;// Offset=0x1e20 Size=0x8
    private wchar_t m_wszServerPath[255];// Offset=0x1e28 Size=0x1fe
    private unsigned char __align1[2];// Offset=0x2026 Size=0x2
    private unsigned long m_dwServerPathLength;// Offset=0x2028 Size=0x4
    private unsigned char * m_pbBuffer;// Offset=0x202c Size=0x4
    private unsigned long m_dwBufferSize;// Offset=0x2030 Size=0x4
    private class CXStorageDownloadWorker * m_pDownloadSubTask;// Offset=0x2034 Size=0x4
    private struct _STORAGE_DL_RESPONSE_BUFFER m_StorageDlResponseBuffer;// Offset=0x2038 Size=0x198
    public void ~CXMessageDownloadAttachmentToMemory();
    public class CXMessageDownloadAttachmentToMemory & operator=(class CXMessageDownloadAttachmentToMemory & );
    public void * __vecDelDtor(unsigned int );
};

class CXMessageDownloadAttachmentToMemory : public CXStorageDownloadParent// Size=0x21d0 (Id=3325)
{
    public void CXMessageDownloadAttachmentToMemory(class CXMessageDownloadAttachmentToMemory & );
    public void CXMessageDownloadAttachmentToMemory();
    public HRESULT CustomInitialize();
    public void CustomCleanup();
    public unsigned long CustomGetObjectSize();
    public HRESULT CustomPrepareRequest();
    public HRESULT CustomContinueBuildRequest();
    public HRESULT CustomContinueProcessHttpHeaders();
    public void StorageDownloadGetServerPath(wchar_t ** );
    public HRESULT StorageDownloadProcessResponseHeader();
    public HRESULT StorageDownloadContinueProcessResponseData();
    public void StorageDownloadHandleSignatureVerified();
    public HRESULT StorageDownloadComplete();
    private unsigned char __align0[7712];// Offset=0x0 Size=0x1e20
    private unsigned long long m_xuidUser;// Offset=0x1e20 Size=0x8
    private wchar_t m_wszServerPath[255];// Offset=0x1e28 Size=0x1fe
    private unsigned char __align1[2];// Offset=0x2026 Size=0x2
    private unsigned long m_dwServerPathLength;// Offset=0x2028 Size=0x4
    private unsigned char * m_pbBuffer;// Offset=0x202c Size=0x4
    private unsigned long m_dwBufferSize;// Offset=0x2030 Size=0x4
    private class CXStorageDownloadWorker * m_pDownloadSubTask;// Offset=0x2034 Size=0x4
    private struct _STORAGE_DL_RESPONSE_BUFFER m_StorageDlResponseBuffer;// Offset=0x2038 Size=0x198
    public void ~CXMessageDownloadAttachmentToMemory();
    public class CXMessageDownloadAttachmentToMemory & operator=(class CXMessageDownloadAttachmentToMemory & );
    public void * __vecDelDtor(unsigned int );
};

struct XUISubtimelineData// Size=0x20 (Id=3326)
{
    void * operator new(unsigned int ,void * );
    void * operator new(unsigned int );
    void * operator new[](unsigned int );
    void operator delete(void * );
    void operator delete[](void * );
    unsigned long m_dwFlags;// Offset=0x0 Size=0x4
    wchar_t * m_szId;// Offset=0x4 Size=0x4
    int m_nNumProps;// Offset=0x8 Size=0x4
    struct XUITimelinePropPath * m_pPropPaths;// Offset=0xc Size=0x4
    int * m_pnIndices;// Offset=0x10 Size=0x4
    int m_nNumKeyFrames;// Offset=0x14 Size=0x4
    struct XUIKeyframeData * m_pKeyFrames;// Offset=0x18 Size=0x4
    struct XUIKeyFrame * m_pRuntimeKeyFrames;// Offset=0x1c Size=0x4
    void XUISubtimelineData();
    void ~XUISubtimelineData();
    void Clear();
    HRESULT SetId(wchar_t * );
    HRESULT CopyTo(struct XUISubtimelineData * );
    void * __vecDelDtor(unsigned int );
};

class CContentReferralUpdateRedirect : public CXLiveSubTask// Size=0x1e70 (Id=3327)
{
    public void CContentReferralUpdateRedirect(class CContentReferralUpdateRedirect & );
    public void CContentReferralUpdateRedirect();
    public HRESULT CustomPrepareRequest();
    public void ~CContentReferralUpdateRedirect();
    public class CContentReferralUpdateRedirect & operator=(class CContentReferralUpdateRedirect & );
    public void * __vecDelDtor(unsigned int );
};

class CContentReferralUpdateRedirect : public CXLiveSubTask// Size=0x1e70 (Id=3328)
{
    public void CContentReferralUpdateRedirect(class CContentReferralUpdateRedirect & );
    public void CContentReferralUpdateRedirect();
    public HRESULT CustomPrepareRequest();
    public void ~CContentReferralUpdateRedirect();
    public class CContentReferralUpdateRedirect & operator=(class CContentReferralUpdateRedirect & );
    public void * __vecDelDtor(unsigned int );
};

class CXLiveAsyncTask// Size=0x4c (Id=3329)
{
    union // Size=0xe0 (Id=0)
    {
        HRESULT Initialize(unsigned long ,class CSchemaData * ,unsigned long ,unsigned long ,class CXLiveAsyncTaskInternal * ,unsigned long ,unsigned long ,unsigned long ,unsigned char * ,unsigned long ,unsigned char * ,unsigned long ,unsigned char * ,unsigned long ,struct _XOVERLAPPED * );// Offset=0x0 Size=0xe0
        void SetPendingState();
        void SetMarshalledRequestSize(unsigned long );
        void SetMarshalledRequest(unsigned char * );
        unsigned char * GetMarshalledRequest();
        unsigned long GetMarshalledRequestSize();
        unsigned long GetTotalRequestBufferSize();
        void SetOverlapped(struct _XOVERLAPPED * );
        struct _XOVERLAPPED * GetOverlapped();
        unsigned char * GetResultsBuffer();
        unsigned long GetResultsBufferSize();
        class CLittleEndianBuffer * GetWireBuffer();
        class CXLiveAsyncTaskInternal * GetInternalTask();
        unsigned long GetInternalTaskSize();
        int IsCallerAlloc();
        int IsHighPriority();
        void SetHighPriority(int );
        unsigned long m_dwOrdinal;// Offset=0x0 Size=0x4
        class CSchemaData * m_pXDKSchema;// Offset=0x4 Size=0x4
        unsigned long m_dwXDKSchemaIndex;// Offset=0x8 Size=0x4
        unsigned long m_dwFlags;// Offset=0xc Size=0x4
        class CXLiveAsyncTaskInternal * m_pInternal;// Offset=0x10 Size=0x4
        unsigned long m_dwInternalTaskSize;// Offset=0x14 Size=0x4
        unsigned char * m_pbMarshalledRequest;// Offset=0x18 Size=0x4
        unsigned long m_cbMarshalledRequest;// Offset=0x1c Size=0x4
        unsigned long m_cbTotalRequestBuffer;// Offset=0x20 Size=0x4
        unsigned long m_dwCounter;// Offset=0x24 Size=0x4
        unsigned long m_dwLogonID;// Offset=0x28 Size=0x4
        unsigned char * m_pbResults;// Offset=0x2c Size=0x4
        unsigned long m_cbResults;// Offset=0x30 Size=0x4
        class CLittleEndianBuffer m_WireBuffer;// Offset=0x34 Size=0x14
        struct _XOVERLAPPED * m_pxov;// Offset=0x48 Size=0x4
        void CXLiveAsyncTask();
        void ~CXLiveAsyncTask();
        void * __vecDelDtor(unsigned int );
    };
};

struct XUIContentDims// Size=0x10 (Id=3330)
{
    int nContentWidth;// Offset=0x0 Size=0x4
    int nContentHeight;// Offset=0x4 Size=0x4
    int nPageWidth;// Offset=0x8 Size=0x4
    int nPageHeight;// Offset=0xc Size=0x4
};

struct _PLAYTIMERGUIDE_PARAMS : public _HUD_PARAMS// Size=0xc (Id=3331)
{
    unsigned char __align0[8];// Offset=0x0 Size=0x8
    struct _XOVERLAPPED * pOverlapped;// Offset=0x8 Size=0x4
};

struct _XSTORAGE_BUILD_SERVER_PATH// Size=0x28 (Id=3332)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned char __align0[4];// Offset=0x4 Size=0x4
    unsigned long long xuidUser;// Offset=0x8 Size=0x8
    enum _XSTORAGE_FACILITY StorageFacility;// Offset=0x10 Size=0x4
    void * pvStorageFacilityInfo;// Offset=0x14 Size=0x4
    unsigned long dwStorageFacilityInfoSize;// Offset=0x18 Size=0x4
    wchar_t * pwszItemName;// Offset=0x1c Size=0x4
    wchar_t * pwszServerPath;// Offset=0x20 Size=0x4
    unsigned long * pdwServerPathLength;// Offset=0x24 Size=0x4
};

struct t_decoder_context// Size=0x7994 (Id=3333)
{
    unsigned char * dec_mem_window;// Offset=0x0 Size=0x4
    unsigned long dec_window_size;// Offset=0x4 Size=0x4
    unsigned long dec_window_mask;// Offset=0x8 Size=0x4
    unsigned long dec_last_matchpos_offset[3];// Offset=0xc Size=0xc
    short dec_main_tree_table[1024];// Offset=0x18 Size=0x800
    short dec_secondary_length_tree_table[256];// Offset=0x818 Size=0x200
    unsigned char dec_main_tree_len[2584];// Offset=0xa18 Size=0xa18
    unsigned char dec_secondary_length_tree_len[249];// Offset=0x1430 Size=0xf9
    unsigned char pad1[3];// Offset=0x1529 Size=0x3
    char dec_aligned_table[128];// Offset=0x152c Size=0x80
    unsigned char dec_aligned_len[8];// Offset=0x15ac Size=0x8
    short dec_main_tree_left_right[10336];// Offset=0x15b4 Size=0x50c0
    short dec_secondary_length_tree_left_right[996];// Offset=0x6674 Size=0x7c8
    unsigned char * dec_input_curpos;// Offset=0x6e3c Size=0x4
    unsigned char * dec_end_input_pos;// Offset=0x6e40 Size=0x4
    unsigned char * dec_output_buffer;// Offset=0x6e44 Size=0x4
    long dec_position_at_start;// Offset=0x6e48 Size=0x4
    unsigned char dec_main_tree_prev_len[2584];// Offset=0x6e4c Size=0xa18
    unsigned char dec_secondary_length_tree_prev_len[249];// Offset=0x7864 Size=0xf9
    unsigned char __align0[3];// Offset=0x795d Size=0x3
    unsigned long dec_bitbuf;// Offset=0x7960 Size=0x4
    char dec_bitcount;// Offset=0x7964 Size=0x1
    unsigned char __align1[3];// Offset=0x7965 Size=0x3
    unsigned long dec_num_position_slots;// Offset=0x7968 Size=0x4
    bool dec_first_time_this_group;// Offset=0x796c Size=0x1
    bool dec_error_condition;// Offset=0x796d Size=0x1
    unsigned char __align2[2];// Offset=0x796e Size=0x2
    long dec_bufpos;// Offset=0x7970 Size=0x4
    unsigned long dec_current_file_size;// Offset=0x7974 Size=0x4
    unsigned long dec_instr_pos;// Offset=0x7978 Size=0x4
    unsigned long dec_num_cfdata_frames;// Offset=0x797c Size=0x4
    long dec_original_block_size;// Offset=0x7980 Size=0x4
    long dec_block_size;// Offset=0x7984 Size=0x4
    enum lzx_block_type dec_block_type;// Offset=0x7988 Size=0x4
    enum decoder_state dec_decoder_state;// Offset=0x798c Size=0x4
    bool dec_extra_long_matches;// Offset=0x7990 Size=0x1
};

struct _XNPXNKIDSECURITY// Size=0x14 (Id=3334)
{
    struct XNKID xnkid;// Offset=0x0 Size=0x8
    unsigned long dwFlags;// Offset=0x8 Size=0x4
    unsigned long dwNumSockets;// Offset=0xc Size=0x4
    unsigned int * pSockets;// Offset=0x10 Size=0x4
};

struct XUIMessageShowstate// Size=0x4 (Id=3335)
{
    int bShow;// Offset=0x0 Size=0x4
};

struct XUIMessageDisableFocusRecursion// Size=0x4 (Id=3336)
{
    int bDisable;// Offset=0x0 Size=0x4
};

struct XUIMessageFigurePoint// Size=0xc (Id=3337)
{
    int nPointIndex;// Offset=0x0 Size=0x4
    struct XUIFigurePoint * pPoint;// Offset=0x4 Size=0x4
    int nCount;// Offset=0x8 Size=0x4
};

class CXuiListItem : public CXuiControl// Size=0x4 (Id=3338)
{
    public void CXuiListItem(struct _XUIOBJ * );
    public void CXuiListItem();
    public HRESULT GetLayout(enum XUI_LISTITEM_LAYOUT * );
    public void Attach(struct _XUIOBJ * );
};

struct _XNPGREYLISTADDRESSES// Size=0x8 (Id=3339)
{
    unsigned long dwGreyListEntryCount;// Offset=0x0 Size=0x4
    struct _XNPGREYLISTADDRESSENTRY * pGreyListAddrs;// Offset=0x4 Size=0x4
};

struct XUIClass// Size=0x28 (Id=3340)
{
    unsigned long cbSize;// Offset=0x0 Size=0x4
    wchar_t * szClassName;// Offset=0x4 Size=0x4
    wchar_t * szBaseClassName;// Offset=0x8 Size=0x4
    wchar_t * szClassDetails;// Offset=0xc Size=0x4
    struct XUIObjectMethods Methods;// Offset=0x10 Size=0xc
    struct XUIElementPropDef * pPropDefs;// Offset=0x1c Size=0x4
    unsigned long dwPropDefCount;// Offset=0x20 Size=0x4
    int bExtensionClass;// Offset=0x24 Size=0x4
};

struct XNetConfigStatus// Size=0x3a (Id=3341)
{
    unsigned long dwFlags;// Offset=0x0 Size=0x4
    struct in_addr ina;// Offset=0x4 Size=0x4
    struct in_addr inaMask;// Offset=0x8 Size=0x4
    struct in_addr ainaGateways[4];// Offset=0xc Size=0x10
    struct in_addr ainaDnsServers[4];// Offset=0x1c Size=0x10
    unsigned int cConfigPppoe;// Offset=0x2c Size=0x4
    struct XNetConfigPppoe * pConfigPppoe;// Offset=0x30 Size=0x4
    int fConfigUPnP;// Offset=0x34 Size=0x4
    unsigned short wPortUPnP;// Offset=0x38 Size=0x2
};

struct XUIMessageDeleteText// Size=0x8 (Id=3342)
{
    unsigned int nIndex;// Offset=0x0 Size=0x4
    unsigned int nCount;// Offset=0x4 Size=0x4
};

struct XUIMessageInput// Size=0x10 (Id=3343)
{
    unsigned long dwKeyCode;// Offset=0x0 Size=0x4
    wchar_t wch;// Offset=0x4 Size=0x2
    unsigned char __align0[2];// Offset=0x6 Size=0x2
    unsigned long dwFlags;// Offset=0x8 Size=0x4
    unsigned char UserIndex;// Offset=0xc Size=0x1
};

struct SCHEMA_DESCRIPTOR// Size=0x1 (Id=3344)
{
    struct // Size=0x1 (Id=0)
    {
        unsigned char DataSize:2;// Offset=0x0 Size=0x1 BitOffset=0x0 BitSize=0x2
        unsigned char EntityType:2;// Offset=0x0 Size=0x1 BitOffset=0x2 BitSize=0x2
        unsigned char IsConformance:1;// Offset=0x0 Size=0x1 BitOffset=0x4 BitSize=0x1
        unsigned char IsArray:1;// Offset=0x0 Size=0x1 BitOffset=0x5 BitSize=0x1
        unsigned char HasPropID:1;// Offset=0x0 Size=0x1 BitOffset=0x6 BitSize=0x1
        unsigned char IsArg:1;// Offset=0x0 Size=0x1 BitOffset=0x7 BitSize=0x1
    };
};

class CXLspEnumerate// Size=0x1 (Id=3345)
{
    public HRESULT Enumerate(void * ,struct _XOVERLAPPED * );
    public void ReleaseResources(void * );
    private void CopyResult(struct _LSP_ENUMERATE_SERVER_INFO * ,struct XTITLE_SERVER_INFO * );
    private HRESULT CallLspEnumerate(unsigned long ,char * ,unsigned char * ,unsigned long ,unsigned long ,struct XTITLE_SERVER_INFO * ,unsigned long * );
};

class CXuiTabScene : public CXuiScene// Size=0x4 (Id=3346)
{
    public void CXuiTabScene(struct _XUIOBJ * );
    public void CXuiTabScene();
    public HRESULT EnableTabbing(int );
    public HRESULT GotoNext();
    public HRESULT GotoPrev();
    public HRESULT Goto(unsigned int ,int );
    public unsigned int GetCount();
    public int CanUserTab();
    public unsigned int GetCurrentTab(struct _XUIOBJ ** );
    public void Attach(struct _XUIOBJ * );
};

struct XUINotifyPressing// Size=0xc (Id=3347)
{
    int bInPress;// Offset=0x0 Size=0x4
    int bSkipPress;// Offset=0x4 Size=0x4
    unsigned char UserIndex;// Offset=0x8 Size=0x1
};

struct XUIMessagePlayVisual// Size=0x10 (Id=3348)
{
    int bFocusChanging;// Offset=0x0 Size=0x4
    int bGettingFocus;// Offset=0x4 Size=0x4
    int bHoverChanging;// Offset=0x8 Size=0x4
    int bGettingHover;// Offset=0xc Size=0x4
};

struct FIND_MEDIA_INSTANCE_URLS_RESPONSE_BUFFER// Size=0x156c (Id=3349)
{
    struct _FIND_MEDIA_INSTANCE_URLS_RESPONSE Response;// Offset=0x0 Size=0x8
    struct _MEDIA_INSTANCE_URLS acMediaInstances[1];// Offset=0x8 Size=0x164
    struct _TYPED_MEDIA_URL acUrls[10];// Offset=0x16c Size=0x78
    char acUrlsStrBuffers[10][500];// Offset=0x1e4 Size=0x1388
};

struct _OFFER_PURCHASE_REQUEST// Size=0x32 (Id=3350)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned char bCountryId;// Offset=0x8 Size=0x1
    unsigned short wLanguageId;// Offset=0x9 Size=0x2
    unsigned char bUserTier;// Offset=0xb Size=0x1
    unsigned long long qwMachineId;// Offset=0xc Size=0x8
    unsigned long cOfferIDs;// Offset=0x14 Size=0x4
    unsigned long long * pOfferIDs;// Offset=0x18 Size=0x4
    unsigned long dwPaymentType;// Offset=0x1c Size=0x4
    unsigned short wPaymentInstrumentId;// Offset=0x20 Size=0x2
    wchar_t * wszPaymentInstrumentId;// Offset=0x22 Size=0x4
    unsigned short wTokenLength;// Offset=0x26 Size=0x2
    wchar_t * wszToken;// Offset=0x28 Size=0x4
    unsigned short wEncryptedPasswordLen;// Offset=0x2c Size=0x2
    char * szEncryptedPassword;// Offset=0x2e Size=0x4
};

class CXuiScene : public CXuiControl// Size=0x4 (Id=3351)
{
    public void CXuiScene(struct _XUIOBJ * );
    public void CXuiScene();
    public void GetBackScene(class CXuiElement * );
    public struct _XUIOBJ * GetBackScene();
    public void SetBackScene(struct _XUIOBJ * ,class CXuiElement * );
    public HRESULT SceneCreate(wchar_t * ,class CXuiElement * ,void * );
    public HRESULT SceneCreate(wchar_t * ,struct _XUIOBJ ** ,void * );
    public HRESULT SceneCreate(wchar_t * ,wchar_t * ,class CXuiElement * ,void * );
    public HRESULT SceneCreate(wchar_t * ,wchar_t * ,struct _XUIOBJ ** ,void * );
    public HRESULT NavigateFirst(struct _XUIOBJ * ,struct _XUIOBJ * ,unsigned char );
    public HRESULT NavigateForward(struct _XUIOBJ * ,int ,unsigned char );
    public HRESULT NavigateBack(struct _XUIOBJ * ,unsigned char );
    public HRESULT NavigateBack(unsigned char );
    public HRESULT NavigateBackToFirst(unsigned char );
    public HRESULT InterruptTransitions();
    public HRESULT PlayToTransition();
    public HRESULT PlayFromTransition(unsigned long );
    public HRESULT PlayBackToTransition();
    public HRESULT PlayBackFromTransition();
    public HRESULT SetTransIndex(unsigned long ,unsigned int );
    public int IsInTransition();
    public int GetCurSel(class CXuiElement * );
    public int GetCurSel(struct _XUIOBJ ** );
    public int GetCurSel();
    public HRESULT SetCurSel(int );
    public struct _XUIOBJ * GetItemControl(int );
    public void Attach(struct _XUIOBJ * );
};

struct XGI_READSPAINFO_MSG// Size=0x18 (Id=3352)
{
    void * pvSpaData;// Offset=0x0 Size=0x4
    unsigned long ulSpaSize;// Offset=0x4 Size=0x4
    unsigned long cchTitleName;// Offset=0x8 Size=0x4
    wchar_t * pwszTitleName;// Offset=0xc Size=0x4
    unsigned long * pcbTitleImage;// Offset=0x10 Size=0x4
    unsigned char * pbTitleImage;// Offset=0x14 Size=0x4
};

struct IXUIRuntimeHooks// Size=0x4 (Id=3353)
{
    HRESULT RewriteResourceLocator(wchar_t * ,wchar_t ** );
    HRESULT FindClassByName(wchar_t * ,struct _XUICLASS ** );
    HRESULT GetTextPresenterText(struct _XUIOBJ * ,wchar_t ** );
    HRESULT LogMessage(HRESULT ,wchar_t * );
    void IXUIRuntimeHooks(struct IXUIRuntimeHooks & );
    void IXUIRuntimeHooks();
    struct IXUIRuntimeHooks & operator=(struct IXUIRuntimeHooks & );
};

struct IXUIRuntimeHooks// Size=0x4 (Id=3354)
{
    HRESULT RewriteResourceLocator(wchar_t * ,wchar_t ** );
    HRESULT FindClassByName(wchar_t * ,struct _XUICLASS ** );
    HRESULT GetTextPresenterText(struct _XUIOBJ * ,wchar_t ** );
    HRESULT LogMessage(HRESULT ,wchar_t * );
    void IXUIRuntimeHooks(struct IXUIRuntimeHooks & );
    void IXUIRuntimeHooks();
    struct IXUIRuntimeHooks & operator=(struct IXUIRuntimeHooks & );
};

class CXHttpDownloadToCache : public CXHttpDownloadToFile// Size=0x2078 (Id=3355)
{
    public void CXHttpDownloadToCache(class CXHttpDownloadToCache & );
    public void CXHttpDownloadToCache();
    public HRESULT CustomInitialize();
    public void CustomCleanup();
    public unsigned long CustomGetObjectSize();
    public HRESULT CustomHandleHttpHeadersComplete(unsigned long ,unsigned long long );
    private unsigned char __align0[7728];// Offset=0x0 Size=0x1e30
    private struct _XAM_CACHE_OPEN_FILE m_xcof;// Offset=0x1e30 Size=0x248
    public void ~CXHttpDownloadToCache();
    public class CXHttpDownloadToCache & operator=(class CXHttpDownloadToCache & );
    public void * __vecDelDtor(unsigned int );
};

class CXHttpDownloadToCache : public CXHttpDownloadToFile// Size=0x2078 (Id=3356)
{
    public void CXHttpDownloadToCache(class CXHttpDownloadToCache & );
    public void CXHttpDownloadToCache();
    public HRESULT CustomInitialize();
    public void CustomCleanup();
    public unsigned long CustomGetObjectSize();
    public HRESULT CustomHandleHttpHeadersComplete(unsigned long ,unsigned long long );
    private unsigned char __align0[7728];// Offset=0x0 Size=0x1e30
    private struct _XAM_CACHE_OPEN_FILE m_xcof;// Offset=0x1e30 Size=0x248
    public void ~CXHttpDownloadToCache();
    public class CXHttpDownloadToCache & operator=(class CXHttpDownloadToCache & );
    public void * __vecDelDtor(unsigned int );
};

struct XUINotifyValueChanged// Size=0x4 (Id=3357)
{
    int nValue;// Offset=0x0 Size=0x4
};

struct XNetCapBuffer// Size=0x10 (Id=3358)
{
    unsigned int cbCap;// Offset=0x0 Size=0x4
    unsigned char * pbCapHead;// Offset=0x4 Size=0x4
    unsigned char * pbCapTail;// Offset=0x8 Size=0x4
    unsigned int cbCapFree;// Offset=0xc Size=0x4
};

struct XUIMessagePress// Size=0xc (Id=3359)
{
    int bPressOccurred;// Offset=0x0 Size=0x4
    unsigned char UserIndex;// Offset=0x4 Size=0x1
    unsigned char __align0[3];// Offset=0x5 Size=0x3
    int bUserPress;// Offset=0x8 Size=0x4
};

struct XnKeyInfo// Size=0x28 (Id=3360)
{
    struct XNKID xnkid;// Offset=0x0 Size=0x8
    enum _XNCALLER_TYPE CallerType;// Offset=0x8 Size=0x4
    unsigned long dwInfoFlags;// Offset=0xc Size=0x4
    unsigned long dwQosListenDataSize;// Offset=0x10 Size=0x4
    unsigned long dwQosListenMaxBps;// Offset=0x14 Size=0x4
    unsigned char abReserved[16];// Offset=0x18 Size=0x10
};

struct XHTTP_ASYNC_RESULT// Size=0x8 (Id=3361)
{
    unsigned long dwResult;// Offset=0x0 Size=0x4
    unsigned long dwError;// Offset=0x4 Size=0x4
};

struct SCHEMA_TABLE_ENTRY// Size=0x18 (Id=3362)
{
    unsigned short RequestSchemaSize;// Offset=0x0 Size=0x2
    unsigned short ResponseSchemaSize;// Offset=0x2 Size=0x2
    unsigned long RequestSchemaOffset;// Offset=0x4 Size=0x4
    unsigned long ResponseSchemaOffset;// Offset=0x8 Size=0x4
    unsigned long MaxRequestAggregateSize;// Offset=0xc Size=0x4
    unsigned long MaxResponseAggregateSize;// Offset=0x10 Size=0x4
    unsigned short ServiceIDIndex;// Offset=0x14 Size=0x2
    unsigned short RequestUrlIndex;// Offset=0x16 Size=0x2
};

struct SCHEMA_CONFORMANCE_INFO// Size=0x4 (Id=3363)
{
    struct // Size=0x2 (Id=0)
    {
        unsigned char ConformanceIndex:6;// Offset=0x0 Size=0x1 BitOffset=0x0 BitSize=0x6
        unsigned char ConformanceSize:2;// Offset=0x0 Size=0x1 BitOffset=0x6 BitSize=0x2
        unsigned char ConformanceIsRaw:1;// Offset=0x1 Size=0x1 BitOffset=0x0 BitSize=0x1
        unsigned char Reserved:7;// Offset=0x1 Size=0x1 BitOffset=0x1 BitSize=0x7
    };
    unsigned short ConformanceMaxIndex;// Offset=0x2 Size=0x2
};

struct XONLINE_FRIEND_LIST_INTERNAL// Size=0x5620 (Id=3364)
{
    unsigned long long qwUserID;// Offset=0x0 Size=0x8
    unsigned long dwVersion;// Offset=0x8 Size=0x4
    unsigned short cNum;// Offset=0xc Size=0x2
    unsigned char __align0[2];// Offset=0xe Size=0x2
    unsigned long dwReserved[8];// Offset=0x10 Size=0x20
    struct XONLINE_FRIEND_INTERNAL Friendlist[100];// Offset=0x30 Size=0x55f0
};

struct XNOTIFICATION_USER// Size=0x168 (Id=3365)
{
    unsigned long long qwUserID;// Offset=0x0 Size=0x8
    unsigned long dwSeqNum;// Offset=0x8 Size=0x4
    struct // Size=0x4 (Id=0)
    {
        unsigned long fAliveDone:1;// Offset=0xc Size=0x4 BitOffset=0x1f BitSize=0x1
        unsigned long fDequeuing:1;// Offset=0xc Size=0x4 BitOffset=0x1e BitSize=0x1
    };
    unsigned long dwStateFlags;// Offset=0x10 Size=0x4
    struct XNKID xnkidSessionID;// Offset=0x14 Size=0x8
    struct XNKID xnkidInviteSessionID;// Offset=0x1c Size=0x8
    unsigned long dwSeqNewInvite;// Offset=0x24 Size=0x4
    unsigned long cbState;// Offset=0x28 Size=0x4
    unsigned char rgbState[256];// Offset=0x2c Size=0x100
    struct XUSER_EXTENDED_STATE exState;// Offset=0x12c Size=0x3c
};

struct LIVEBASE_UPDATEACCESSTIMES_MSG// Size=0xc (Id=3366)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned long dwTitleId;// Offset=0x4 Size=0x4
    unsigned long dwContentCategories;// Offset=0x8 Size=0x4
};

class CSystemApp// Size=0xc (Id=3367)
{
    public void CSystemApp(class CSystemApp & );
    public void CSystemApp(unsigned long );
    public void ~CSystemApp();
    public HRESULT MessageProc(unsigned long ,unsigned int ,unsigned int );
    public HRESULT OnSysLoad(unsigned long ,void * ,unsigned long * );
    public HRESULT OnSysUnload();
    public HRESULT OnSysPersist(void * );
    public HRESULT OnSysUpdateFrame();
    public HRESULT OnSysUIInit(struct _XUIDC * ,struct SYSUIINIT * );
    public HRESULT OnSysAsyncMessage(struct _XASYNCMESSAGE * );
    public HRESULT OnSysTitleShuttingDown();
    public HRESULT OnSysTitleShutdown();
    public HRESULT OnSysTitleStartup();
    public HRESULT OnMessageProc(unsigned long ,unsigned int ,unsigned int );
    public struct HINSTANCE__ * operator struct HINSTANCE__ *();
    public unsigned long GetAppId();
    public HRESULT BuildResourceLocator(wchar_t * ,wchar_t * ,wchar_t * ,unsigned long );
    private unsigned char __align0[4];// Offset=0x0 Size=0x4
    private struct HINSTANCE__ * _hInstance;// Offset=0x4 Size=0x4
    private unsigned long _dwAppId;// Offset=0x8 Size=0x4
    public class CSystemApp & operator=(class CSystemApp & );
    public void * __vecDelDtor(unsigned int );
};

class CSystemApp// Size=0xc (Id=3368)
{
    public void CSystemApp(class CSystemApp & );
    public void CSystemApp(unsigned long );
    public void ~CSystemApp();
    public HRESULT MessageProc(unsigned long ,unsigned int ,unsigned int );
    public HRESULT OnSysLoad(unsigned long ,void * ,unsigned long * );
    public HRESULT OnSysUnload();
    public HRESULT OnSysPersist(void * );
    public HRESULT OnSysUpdateFrame();
    public HRESULT OnSysUIInit(struct _XUIDC * ,struct SYSUIINIT * );
    public HRESULT OnSysAsyncMessage(struct _XASYNCMESSAGE * );
    public HRESULT OnSysTitleShuttingDown();
    public HRESULT OnSysTitleShutdown();
    public HRESULT OnSysTitleStartup();
    public HRESULT OnMessageProc(unsigned long ,unsigned int ,unsigned int );
    public struct HINSTANCE__ * operator struct HINSTANCE__ *();
    public unsigned long GetAppId();
    public HRESULT BuildResourceLocator(wchar_t * ,wchar_t * ,wchar_t * ,unsigned long );
    private unsigned char __align0[4];// Offset=0x0 Size=0x4
    private struct HINSTANCE__ * _hInstance;// Offset=0x4 Size=0x4
    private unsigned long _dwAppId;// Offset=0x8 Size=0x4
    public class CSystemApp & operator=(class CSystemApp & );
    public void * __vecDelDtor(unsigned int );
};

struct _XSTORAGE_PATH_STRING// Size=0x6 (Id=3369)
{
    unsigned short wNumPathChars;// Offset=0x0 Size=0x2
    wchar_t * pwszPath;// Offset=0x2 Size=0x4
};

struct XUIElementPropDef// Size=0x30 (Id=3370)
{
    void * operator new(unsigned int ,void * );
    void * operator new(unsigned int );
    void * operator new[](unsigned int );
    void operator delete(void * );
    void operator delete[](void * );
    unsigned long dwFlags;// Offset=0x0 Size=0x4
    unsigned long dwId;// Offset=0x4 Size=0x4
    unsigned long dwOffset;// Offset=0x8 Size=0x4
    unsigned long dwExtra;// Offset=0xc Size=0x4
    wchar_t * szPropName;// Offset=0x10 Size=0x4
    enum XUI_ELEMENT_PROPERTY_TYPE Type;// Offset=0x14 Size=0x4
    struct XUIElementPropVal * pDefaultVal;// Offset=0x18 Size=0x4
    struct XUICustomPropHandler * pCustomHandler;// Offset=0x1c Size=0x4
    HRESULT  ( * pfnGetProp)(unsigned long ,void * ,struct XUIElementPropVal * );// Offset=0x20 Size=0x4
    HRESULT  ( * pfnSetProp)(unsigned long ,void * ,struct XUIElementPropVal * );// Offset=0x24 Size=0x4
    struct XUIElementPropDef *  ( * pfnGetPropDef)(unsigned long * );// Offset=0x28 Size=0x4
    HRESULT  ( * pfnGetCount)(void * ,unsigned long * );// Offset=0x2c Size=0x4
};

class CXuiSound : public CXuiElement// Size=0x4 (Id=3371)
{
    public void CXuiSound(struct _XUIOBJ * );
    public void CXuiSound();
    public int IsInVisual();
    public HRESULT SetDirty();
    public int IsDirty();
    public HRESULT Play();
    public HRESULT Stop();
    public HRESULT Mute(int );
    public int IsMuted();
    public HRESULT SetVolume(float );
    public float GetVolume();
    public void Attach(struct _XUIOBJ * );
};

struct XUIMessageSetCurSel// Size=0x4 (Id=3372)
{
    int iItem;// Offset=0x0 Size=0x4
};

struct XUIMessageTimelineNotify// Size=0x4 (Id=3373)
{
    struct _XUIOBJ * hObjSource;// Offset=0x0 Size=0x4
};

struct _XINPUT_KEYSTROKE// Size=0x8 (Id=3374)
{
    unsigned short VirtualKey;// Offset=0x0 Size=0x2
    wchar_t Unicode;// Offset=0x2 Size=0x2
    unsigned short Flags;// Offset=0x4 Size=0x2
    unsigned char UserIndex;// Offset=0x6 Size=0x1
    unsigned char HidCode;// Offset=0x7 Size=0x1
};

struct IXUIAuditionHostVTBL// Size=0x10 (Id=3375)
{
    HRESULT  ( * ProcessRemoteInput)(struct IXUIAuditionHost * ,struct _XINPUT_KEYSTROKE * );// Offset=0x0 Size=0x4
    HRESULT  ( * ChangeLocale)(struct IXUIAuditionHost * );// Offset=0x4 Size=0x4
    HRESULT  ( * ChangeSkin)(struct IXUIAuditionHost * ,wchar_t * ,wchar_t * );// Offset=0x8 Size=0x4
    HRESULT  ( * ReloadResources)(struct IXUIAuditionHost * );// Offset=0xc Size=0x4
};

struct XUINotifyHtmlLinkActivated// Size=0x4 (Id=3376)
{
    wchar_t * szLinkText;// Offset=0x0 Size=0x4
};

struct _MESSAGEBOX_PARAMS : public _HUD_PARAMS// Size=0x41c (Id=3377)
{
    unsigned char __align0[8];// Offset=0x0 Size=0x8
    wchar_t szTitle[32];// Offset=0x8 Size=0x40
    wchar_t szText[384];// Offset=0x48 Size=0x300
    unsigned long cButtons;// Offset=0x348 Size=0x4
    wchar_t rgButtons[3][32];// Offset=0x34c Size=0xc0
    unsigned long dwFocusButton;// Offset=0x40c Size=0x4
    unsigned long dwFlags;// Offset=0x410 Size=0x4
    struct _MESSAGEBOX_RESULT * pResult;// Offset=0x414 Size=0x4
    struct _XOVERLAPPED * pOverlapped;// Offset=0x418 Size=0x4
};

struct XUIMessageGetBackScene// Size=0x4 (Id=3378)
{
    struct _XUIOBJ * hBackScene;// Offset=0x0 Size=0x4
};

struct _MIGRATE_XBOX1_USER_RESPONSE// Size=0x32 (Id=3379)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned char abXenonKey[16];// Offset=0x8 Size=0x10
    unsigned short wGamertagLength;// Offset=0x18 Size=0x2
    wchar_t * wszGamertag;// Offset=0x1a Size=0x4
    unsigned short wDomainLength;// Offset=0x1e Size=0x2
    wchar_t * wszDomain;// Offset=0x20 Size=0x4
    unsigned short wRealmLength;// Offset=0x24 Size=0x2
    wchar_t * wszRealm;// Offset=0x26 Size=0x4
    unsigned long dwParentalControlGroupId;// Offset=0x2a Size=0x4
    unsigned long dwCultureId;// Offset=0x2e Size=0x4
};

struct XUIQuaternion// Size=0x10 (Id=3380)
{
    void * operator new(unsigned int ,void * );
    void * operator new(unsigned int );
    void * operator new[](unsigned int );
    void operator delete(void * );
    void operator delete[](void * );
    float x;// Offset=0x0 Size=0x4
    float y;// Offset=0x4 Size=0x4
    float z;// Offset=0x8 Size=0x4
    float w;// Offset=0xc Size=0x4
    struct D3DXQUATERNION & operator struct D3DXQUATERNION &();
};

struct XUIElementPropVal// Size=0x14 (Id=3381)
{
    void * operator new(unsigned int ,void * );
    void * operator new(unsigned int );
    void * operator new[](unsigned int );
    void operator delete(void * );
    void operator delete[](void * );
    enum XUI_ELEMENT_PROPERTY_TYPE type;// Offset=0x0 Size=0x4
    union // Size=0x14 (Id=0)
    {
        int bVal;// Offset=0x4 Size=0x4
        int nVal;// Offset=0x4 Size=0x4
        unsigned int uVal;// Offset=0x4 Size=0x4
        float fVal;// Offset=0x4 Size=0x4
        wchar_t * szVal;// Offset=0x4 Size=0x4
        struct _D3DVECTOR vecVal;// Offset=0x4 Size=0xc
        struct XUIQuaternion quatVal;// Offset=0x4 Size=0x10
        struct IXUIPropObj * pObj;// Offset=0x4 Size=0x4
        struct XUIElementPropVal::_unnamed_3382::<unnamed-type-CustomVal> CustomVal;// Offset=0x4 Size=0x8
        void XUIElementPropVal(struct D3DXQUATERNION & );
        void XUIElementPropVal(struct D3DXVECTOR3 & );
        void XUIElementPropVal(float );
        void XUIElementPropVal(unsigned int );
        void XUIElementPropVal(int );
        void XUIElementPropVal();
        void ~XUIElementPropVal();
        void Clear();
        void Reset();
        void SetVal(void * ,struct XUICustomPropHandler * );
        void SetVal(struct IXUIPropObj * );
        void SetVal(struct D3DXQUATERNION * );
        void SetVal(struct D3DXQUATERNION & );
        void SetVal(struct XUIQuaternion * );
        void SetVal(struct D3DXVECTOR3 * );
        void SetVal(struct _D3DVECTOR & );
        void SetVal(struct _D3DVECTOR * );
        HRESULT SetVal(wchar_t * );
        void SetVal(float );
        void SetVal(unsigned int );
        void SetVal(int );
        void SetVal(bool );
        void SetBoolVal(int );
        void SetColorVal(unsigned char ,unsigned char ,unsigned char ,unsigned char );
        void SetColorVal(unsigned int );
        HRESULT Copy(struct XUIElementPropVal * );
        HRESULT GetStringLen(unsigned int * );
        HRESULT ToString(wchar_t ** );
        HRESULT ToBinary(struct XUIMemoryBuffer * );
        int IsEqual(struct XUIElementPropVal * );
        void * __vecDelDtor(unsigned int );
    };
};

struct XUIElementPropVal::_unnamed_3382::<unnamed-type-CustomVal>// Size=0x8 (Id=3382)
{
    void * pvCustomData;// Offset=0x0 Size=0x4
    struct XUICustomPropHandler * pHandler;// Offset=0x4 Size=0x4
};

struct _XUIPACKAGE// Size=0x0 (Id=3383)
{
};

struct REFERRAL_RESPONSE_BUFFER// Size=0x1512 (Id=3384)
{
    struct _XCONTENT_REFERRAL_RESPONSE Response;// Offset=0x0 Size=0x13a
    struct _XREFERRAL_LOCATION ReferralLocationsBuffer[10];// Offset=0x13a Size=0x50
    char acUrlsBuffer[5000];// Offset=0x18a Size=0x1388
};

class CXuiImageElement : public CXuiElement// Size=0x4 (Id=3385)
{
    public void CXuiImageElement(struct _XUIOBJ * );
    public void CXuiImageElement();
    public HRESULT SetImagePath(wchar_t * );
    public HRESULT GetImagePath(wchar_t ** );
    public HRESULT GetLastError();
    public HRESULT GetContentInfo(struct XUIContentInfo * );
    public void Attach(struct _XUIOBJ * );
};

struct XUIObjectMethods// Size=0xc (Id=3386)
{
    HRESULT  ( * ObjectProc)(struct _XUIOBJ * ,struct XUIMessage * ,void * );// Offset=0x0 Size=0x4
    HRESULT  ( * CreateInstance)(struct _XUIOBJ * ,void ** );// Offset=0x4 Size=0x4
    HRESULT  ( * DestroyInstance)(void * );// Offset=0x8 Size=0x4
};

struct XUIMessageInsertText// Size=0x8 (Id=3387)
{
    unsigned int nIndex;// Offset=0x0 Size=0x4
    wchar_t * pszText;// Offset=0x4 Size=0x4
};

struct XUIRenderStruct// Size=0x10 (Id=3388)
{
    unsigned long dwOrigColorFactor;// Offset=0x0 Size=0x4
    enum XUI_BLEND_MODE nOrigBlendMode;// Offset=0x4 Size=0x4
    unsigned long dwOrigColorWriteFlags;// Offset=0x8 Size=0x4
    void * pClippingData;// Offset=0xc Size=0x4
};

struct XUINotifyScrollBarChanged// Size=0x4 (Id=3389)
{
    int nFirstItem;// Offset=0x0 Size=0x4
};

struct XUINamedframeData// Size=0x10 (Id=3390)
{
    void * operator new(unsigned int ,void * );
    void * operator new(unsigned int );
    void * operator new[](unsigned int );
    void operator delete(void * );
    void operator delete[](void * );
    wchar_t * m_szName;// Offset=0x0 Size=0x4
    unsigned long m_dwFrame;// Offset=0x4 Size=0x4
    enum XUI_NAMEDFRAME_COMMAND m_nCommand;// Offset=0x8 Size=0x4
    wchar_t * m_szCommandParams;// Offset=0xc Size=0x4
    void XUINamedframeData();
    void ~XUINamedframeData();
    void Reset();
    HRESULT CopyTo(struct XUINamedframeData * );
    void DetachInto(struct XUINamedframeData * );
    void Clear();
    void * __vecDelDtor(unsigned int );
};

class CXuiSlider : public CXuiControl// Size=0x4 (Id=3391)
{
    public void CXuiSlider(struct _XUIOBJ * );
    public void CXuiSlider();
    public HRESULT SetRange(int ,int );
    public HRESULT GetRange(int * ,int * );
    public HRESULT SetValue(int );
    public HRESULT GetValue(int * );
    public HRESULT SetStep(int );
    public HRESULT GetStep(int * );
    public HRESULT SetAccel(int ,unsigned long );
    public HRESULT GetAccel(int * ,unsigned long * );
    public void Attach(struct _XUIOBJ * );
};

struct XUIPropertyData// Size=0x10 (Id=3392)
{
    void * operator new(unsigned int ,void * );
    void * operator new(unsigned int );
    void * operator new[](unsigned int );
    void operator delete(void * );
    void operator delete[](void * );
    unsigned short m_uFlags;// Offset=0x0 Size=0x2
    unsigned short m_uIndex;// Offset=0x2 Size=0x2
    struct XUIElementPropDef * m_pDef;// Offset=0x4 Size=0x4
    union // Size=0xc (Id=0)
    {
        wchar_t * m_szCustomValString;// Offset=0x8 Size=0x4
        struct XUIPropertyData::_unnamed_3393::XUICustomValBin m_CustomValBin;// Offset=0x8 Size=0x4
        struct XUIAllocatedArray * m_pCompoundPropArray;// Offset=0x8 Size=0x4
        unsigned long m_dwVal;// Offset=0x8 Size=0x4
        float m_fVal;// Offset=0x8 Size=0x4
        unsigned long m_dwIndexIntoTable;// Offset=0x8 Size=0x4
        struct XUIElementPropVal * m_pVal;// Offset=0x8 Size=0x4
    };
    void * m_pLoadData;// Offset=0xc Size=0x4
    void XUIPropertyData();
    void ~XUIPropertyData();
    void Reset();
    void * __vecDelDtor(unsigned int );
};

struct XUIPropertyData::_unnamed_3393::XUICustomValBin// Size=0x4 (Id=3393)
{
    unsigned char * _pb;// Offset=0x0 Size=0x4
};

struct XUIMessageMouse// Size=0x20 (Id=3394)
{
    unsigned long dwButton;// Offset=0x0 Size=0x4
    unsigned long dwFlags;// Offset=0x4 Size=0x4
    int nWheelDelta;// Offset=0x8 Size=0x4
    int x;// Offset=0xc Size=0x4
    int y;// Offset=0x10 Size=0x4
    struct D3DXVECTOR3 vLocal;// Offset=0x14 Size=0xc
    void XUIMessageMouse();
    struct XUIMessageMouse & operator=(struct XUIMessageMouse & );
};

struct XUIMessageMouse// Size=0x20 (Id=3395)
{
    unsigned long dwButton;// Offset=0x0 Size=0x4
    unsigned long dwFlags;// Offset=0x4 Size=0x4
    int nWheelDelta;// Offset=0x8 Size=0x4
    int x;// Offset=0xc Size=0x4
    int y;// Offset=0x10 Size=0x4
    struct D3DXVECTOR3 vLocal;// Offset=0x14 Size=0xc
    void XUIMessageMouse();
    struct XUIMessageMouse & operator=(struct XUIMessageMouse & );
};

class CContentAndUpdateBase : public CXLiveAsyncTaskInternal// Size=0x2add8 (Id=3396)
{
    public void CContentAndUpdateBase(class CContentAndUpdateBase & );
    public void CContentAndUpdateBase();
    public HRESULT CustomInitialize();
    public void CustomCleanup();
    public struct CXLiveAsyncTaskInternal::RECEIVERATELIMITDATA * CustomSelectReceiveRateLimitData();
    public HRESULT CustomContinueSubmitRequest();
    public HRESULT CustomHandleHttpHeadersComplete(unsigned long ,unsigned long long );
    public HRESULT CustomHandleResponseHeaderComplete(HRESULT );
    public HRESULT CustomContinueResponseData();
    public HRESULT CustomCheckForRecoverableError(HRESULT );
    public HRESULT ContentAndUpdateOpenInProgressPackage();
    public HRESULT ContentAndUpdateCreateInstallerPackage();
    public HRESULT ContentAndUpdateHandleResponseDataComplete();
    public int IsContentHeaderSignedByThisConsole(struct _XCONTENT_HEADER * );
    public struct CXLiveAsyncTaskInternal::RECEIVERATELIMITDATA s_DownloadReceiveRateLimitData;// Offset=0x0 Size=0x18
    protected HRESULT GetValidAddressFromURL(char * ,char * ,unsigned long ,unsigned short * ,char ** );
    protected void GetTemporaryContentMetaDataBuffer(struct _XCONTENT_HEADER ** );
    protected HRESULT StartDownloadOrResume(unsigned char * ,unsigned long ,unsigned char * ,unsigned long ,unsigned long ,struct _XREFERRAL_LOCATION * );
    protected HRESULT ResumeInstallerPackage(struct _XCONTENT_MOUNTED_PACKAGE * );
    protected HRESULT FinishCreateInstallerPackage(struct _XCONTENT_MOUNTED_PACKAGE * );
    protected void BuildContiguousMetaData(struct _XCONTENT_HEADER ** );
    protected HRESULT LoadInProgressMetaDataInfo(struct _XCONTENT_MOUNTED_PACKAGE * ,struct _XCONTENT_HEADER * ,struct _XCONTENT_METADATA * ,unsigned char * ,unsigned long * );
    protected HRESULT LoadFinalMetaDataInfo(struct _XCONTENT_HEADER ** );
    protected HRESULT ReplacePackageHeader(struct _XCONTENT_HEADER * );
    protected void SetMountedPackage(struct _XCONTENT_MOUNTED_PACKAGE * );
    protected void GetPackagePath(char * ,unsigned long );
    protected void DismountPackage();
    private int SortLocationsCompareCallback(void * ,void * );
    private HRESULT HandleResponseData();
    private HRESULT ContinueProcessResponseData();
    private HRESULT StartSignatureVerification();
    private HRESULT DoInitialCacheWrite();
    private HRESULT DoFileCacheBlockWrite();
    private HRESULT DoNewFile();
    private HRESULT DoCacheBlockRead();
    private HRESULT DoFileDataBegin();
    private HRESULT DoProcessData();
    private HRESULT DoFileDataEnd();
    private HRESULT DoResumeFileBegin();
    private HRESULT DoResumeFile();
    private HRESULT DoResumeFileEnd();
    private unsigned char __align0[7688];// Offset=0x18 Size=0x1e08
    struct // Size=0x4 (Id=0)
    {
        unsigned long m_fHaveData:1;// Offset=0x1e20 Size=0x4 BitOffset=0x1f BitSize=0x1
        unsigned long m_fWroteFinalHeaders:1;// Offset=0x1e20 Size=0x4 BitOffset=0x1e BitSize=0x1
        unsigned long m_fVerifyingSignature:1;// Offset=0x1e20 Size=0x4 BitOffset=0x1d BitSize=0x1
        unsigned long m_fWasResuming:1;// Offset=0x1e20 Size=0x4 BitOffset=0x1c BitSize=0x1
        unsigned long m_fCheckpointFinalHeaders:1;// Offset=0x1e20 Size=0x4 BitOffset=0x1b BitSize=0x1
    };
    private unsigned long m_dwNumLocations;// Offset=0x1e24 Size=0x4
    private struct _XREFERRAL_LOCATION * m_paReferralLocations;// Offset=0x1e28 Size=0x4
    private struct _XREFERRAL_LOCATION * m_pNextReferralLocation;// Offset=0x1e2c Size=0x4
    private struct _XCONTENT_MOUNTED_PACKAGE * m_pMountedPackage;// Offset=0x1e30 Size=0x4
    private unsigned char __align1[4];// Offset=0x1e34 Size=0x4
    private class CXCabStreamUnpacker m_CabStreamUnpacker;// Offset=0x1e38 Size=0x10ce8
    private union _LARGE_INTEGER m_liCurrentOffset;// Offset=0x12b20 Size=0x8
    private struct _FILETIME m_ftLastModified;// Offset=0x12b28 Size=0x8
    private union _LARGE_INTEGER m_liResumeOffset;// Offset=0x12b30 Size=0x8
    private union _LARGE_INTEGER m_liLastBytesProcessed;// Offset=0x12b38 Size=0x8
    private unsigned long long m_qwPreviousRemaining;// Offset=0x12b40 Size=0x8
    private struct XECRYPT_SHA_STATE m_ShaStateFinalHeader;// Offset=0x12b48 Size=0x58
    private unsigned char m_abSymmetricKey[16];// Offset=0x12ba0 Size=0x10
    private unsigned char m_abPublicKey[284];// Offset=0x12bb0 Size=0x11c
    private unsigned char m_abRecvBuffer[65536];// Offset=0x12ccc Size=0x10000
    private unsigned char m_abLzxBuffer[33029];// Offset=0x22ccc Size=0x8105
    public void ~CContentAndUpdateBase();
    public class CContentAndUpdateBase & operator=(class CContentAndUpdateBase & );
    public void * __vecDelDtor(unsigned int );
};

struct _XCONTENT_HEADER// Size=0x344 (Id=3397)
{
    union // Size=0x4 (Id=0)
    {
        enum _XCONTENT_SIGNATURE_TYPE SignatureType;// Offset=0x0 Size=0x4
        union <unnamed-type-Signature>// Size=0x228 (Id=33242)
        {
            struct _XE_CONSOLE_SIGNATURE ConsoleSignature;// Offset=0x0 Size=0x228
            struct _XCONTENT_SIGNATURE ContentSignature;// Offset=0x0 Size=0x228
        };
    };
    union _XCONTENT_HEADER::<unnamed-type-Signature> Signature;// Offset=0x4 Size=0x228
    struct _XCONTENT_LICENSE LicenseDescriptors[16];// Offset=0x22c Size=0x100
    unsigned char ContentId[20];// Offset=0x32c Size=0x14
    unsigned long SizeOfHeaders;// Offset=0x340 Size=0x4
};

struct _XREFERRAL_LOCATION// Size=0x8 (Id=3398)
{
    unsigned short wRank;// Offset=0x0 Size=0x2
    unsigned short wUrlSize;// Offset=0x2 Size=0x2
    char * pszUrl;// Offset=0x4 Size=0x4
};

class CContentAndUpdateBase : public CXLiveAsyncTaskInternal// Size=0x2add8 (Id=3399)
{
    public void CContentAndUpdateBase(class CContentAndUpdateBase & );
    public void CContentAndUpdateBase();
    public HRESULT CustomInitialize();
    public void CustomCleanup();
    public struct CXLiveAsyncTaskInternal::RECEIVERATELIMITDATA * CustomSelectReceiveRateLimitData();
    public HRESULT CustomContinueSubmitRequest();
    public HRESULT CustomHandleHttpHeadersComplete(unsigned long ,unsigned long long );
    public HRESULT CustomHandleResponseHeaderComplete(HRESULT );
    public HRESULT CustomContinueResponseData();
    public HRESULT CustomCheckForRecoverableError(HRESULT );
    public HRESULT ContentAndUpdateOpenInProgressPackage();
    public HRESULT ContentAndUpdateCreateInstallerPackage();
    public HRESULT ContentAndUpdateHandleResponseDataComplete();
    public int IsContentHeaderSignedByThisConsole(struct _XCONTENT_HEADER * );
    public struct CXLiveAsyncTaskInternal::RECEIVERATELIMITDATA s_DownloadReceiveRateLimitData;// Offset=0x0 Size=0x18
    protected HRESULT GetValidAddressFromURL(char * ,char * ,unsigned long ,unsigned short * ,char ** );
    protected void GetTemporaryContentMetaDataBuffer(struct _XCONTENT_HEADER ** );
    protected HRESULT StartDownloadOrResume(unsigned char * ,unsigned long ,unsigned char * ,unsigned long ,unsigned long ,struct _XREFERRAL_LOCATION * );
    protected HRESULT ResumeInstallerPackage(struct _XCONTENT_MOUNTED_PACKAGE * );
    protected HRESULT FinishCreateInstallerPackage(struct _XCONTENT_MOUNTED_PACKAGE * );
    protected void BuildContiguousMetaData(struct _XCONTENT_HEADER ** );
    protected HRESULT LoadInProgressMetaDataInfo(struct _XCONTENT_MOUNTED_PACKAGE * ,struct _XCONTENT_HEADER * ,struct _XCONTENT_METADATA * ,unsigned char * ,unsigned long * );
    protected HRESULT LoadFinalMetaDataInfo(struct _XCONTENT_HEADER ** );
    protected HRESULT ReplacePackageHeader(struct _XCONTENT_HEADER * );
    protected void SetMountedPackage(struct _XCONTENT_MOUNTED_PACKAGE * );
    protected void GetPackagePath(char * ,unsigned long );
    protected void DismountPackage();
    private int SortLocationsCompareCallback(void * ,void * );
    private HRESULT HandleResponseData();
    private HRESULT ContinueProcessResponseData();
    private HRESULT StartSignatureVerification();
    private HRESULT DoInitialCacheWrite();
    private HRESULT DoFileCacheBlockWrite();
    private HRESULT DoNewFile();
    private HRESULT DoCacheBlockRead();
    private HRESULT DoFileDataBegin();
    private HRESULT DoProcessData();
    private HRESULT DoFileDataEnd();
    private HRESULT DoResumeFileBegin();
    private HRESULT DoResumeFile();
    private HRESULT DoResumeFileEnd();
    private unsigned char __align0[7688];// Offset=0x18 Size=0x1e08
    struct // Size=0x4 (Id=0)
    {
        unsigned long m_fHaveData:1;// Offset=0x1e20 Size=0x4 BitOffset=0x1f BitSize=0x1
        unsigned long m_fWroteFinalHeaders:1;// Offset=0x1e20 Size=0x4 BitOffset=0x1e BitSize=0x1
        unsigned long m_fVerifyingSignature:1;// Offset=0x1e20 Size=0x4 BitOffset=0x1d BitSize=0x1
        unsigned long m_fWasResuming:1;// Offset=0x1e20 Size=0x4 BitOffset=0x1c BitSize=0x1
        unsigned long m_fCheckpointFinalHeaders:1;// Offset=0x1e20 Size=0x4 BitOffset=0x1b BitSize=0x1
    };
    private unsigned long m_dwNumLocations;// Offset=0x1e24 Size=0x4
    private struct _XREFERRAL_LOCATION * m_paReferralLocations;// Offset=0x1e28 Size=0x4
    private struct _XREFERRAL_LOCATION * m_pNextReferralLocation;// Offset=0x1e2c Size=0x4
    private struct _XCONTENT_MOUNTED_PACKAGE * m_pMountedPackage;// Offset=0x1e30 Size=0x4
    private unsigned char __align1[4];// Offset=0x1e34 Size=0x4
    private class CXCabStreamUnpacker m_CabStreamUnpacker;// Offset=0x1e38 Size=0x10ce8
    private union _LARGE_INTEGER m_liCurrentOffset;// Offset=0x12b20 Size=0x8
    private struct _FILETIME m_ftLastModified;// Offset=0x12b28 Size=0x8
    private union _LARGE_INTEGER m_liResumeOffset;// Offset=0x12b30 Size=0x8
    private union _LARGE_INTEGER m_liLastBytesProcessed;// Offset=0x12b38 Size=0x8
    private unsigned long long m_qwPreviousRemaining;// Offset=0x12b40 Size=0x8
    private struct XECRYPT_SHA_STATE m_ShaStateFinalHeader;// Offset=0x12b48 Size=0x58
    private unsigned char m_abSymmetricKey[16];// Offset=0x12ba0 Size=0x10
    private unsigned char m_abPublicKey[284];// Offset=0x12bb0 Size=0x11c
    private unsigned char m_abRecvBuffer[65536];// Offset=0x12ccc Size=0x10000
    private unsigned char m_abLzxBuffer[33029];// Offset=0x22ccc Size=0x8105
    public void ~CContentAndUpdateBase();
    public class CContentAndUpdateBase & operator=(class CContentAndUpdateBase & );
    public void * __vecDelDtor(unsigned int );
};

struct XMESSAGING_MSG// Size=0x10d4 (Id=3400)
{
    struct _XOVERLAPPED * pXOverlapped;// Offset=0x0 Size=0x4
    unsigned long dwMessageType;// Offset=0x4 Size=0x4
    unsigned long dwMessageFlags;// Offset=0x8 Size=0x4
    unsigned long dwMaxNumProperties;// Offset=0xc Size=0x4
    unsigned long dwExpireMinutes;// Offset=0x10 Size=0x4
    unsigned long dwNumLargeProps;// Offset=0x14 Size=0x4
    unsigned long cbPropValues;// Offset=0x18 Size=0x4
    unsigned long long qwSenderContext;// Offset=0x1c Size=0x8
    unsigned long long qwLargePropsUploaded;// Offset=0x24 Size=0x8
    struct _XOVERLAPPED xovLargeProp;// Offset=0x2c Size=0x1c
    struct XMESSAGING_LARGEPROP LargeProps[16];// Offset=0x48 Size=0x1080
    struct _XMSG_DETAILS Details;// Offset=0x10c8 Size=0xc
};

struct XUIMessageSuspend// Size=0x4 (Id=3401)
{
    int bSuspend;// Offset=0x0 Size=0x4
};

struct _GET_USER_SUBSCRIPTION_DETAILS_RESPONSE// Size=0xf5 (Id=3402)
{
    unsigned short wSubscriptionIdLength;// Offset=0x0 Size=0x2
    wchar_t * wszSubscriptionId;// Offset=0x2 Size=0x4
    unsigned short wDescriptionLength;// Offset=0x6 Size=0x2
    wchar_t * wszDescription;// Offset=0x8 Size=0x4
    unsigned char bCurrentOfferStatus;// Offset=0xc Size=0x1
    unsigned char bDelayedCancel;// Offset=0xd Size=0x1
    unsigned short wFriendlyNameLength;// Offset=0xe Size=0x2
    wchar_t * wszFriendlyName;// Offset=0x10 Size=0x4
    unsigned char bAnniversaryDate;// Offset=0x14 Size=0x1
    struct _FILETIME ftPurchaseDate;// Offset=0x15 Size=0x8
    struct _FILETIME ftActivationDate;// Offset=0x1d Size=0x8
    struct _FILETIME ftEndDate;// Offset=0x25 Size=0x8
    unsigned char bHasViolations;// Offset=0x2d Size=0x1
    unsigned long dwRenewalGracePeriod;// Offset=0x2e Size=0x4
    unsigned char bRenewalOfferStatus;// Offset=0x32 Size=0x1
    unsigned long long qwRenewalOfferId;// Offset=0x33 Size=0x8
    struct _GET_USER_SUBSCRIPTION_DETAILS_DATA currentOfferDetails;// Offset=0x3b Size=0x16
    struct _GET_USER_SUBSCRIPTION_DETAILS_DATA renewalOfferDetails;// Offset=0x51 Size=0x16
    struct _PAYMENT_INSTRUMENT_INFO paymentInstrument;// Offset=0x67 Size=0x8e
};

struct XUIQuaternion// Size=0x10 (Id=3403)
{
    void * operator new(unsigned int ,void * );
    void * operator new(unsigned int );
    void * operator new[](unsigned int );
    void operator delete(void * );
    void operator delete[](void * );
    float x;// Offset=0x0 Size=0x4
    float y;// Offset=0x4 Size=0x4
    float z;// Offset=0x8 Size=0x4
    float w;// Offset=0xc Size=0x4
    struct D3DXQUATERNION & operator struct D3DXQUATERNION &();
};

struct _ACCOUNT_RESERVE_GAMERTAG_REQUEST// Size=0x15 (Id=3404)
{
    unsigned long long qwMachineId;// Offset=0x0 Size=0x8
    unsigned char bCountryId;// Offset=0x8 Size=0x1
    unsigned short wMaxSuggestedNames;// Offset=0x9 Size=0x2
    unsigned short wGamertagLength;// Offset=0xb Size=0x2
    wchar_t * wszGamertag;// Offset=0xd Size=0x4
    struct _ACCOUNT_RESERVE_GAMERTAG_RESPONSE * pResponse;// Offset=0x11 Size=0x4
};

struct _XONLINE_TEAM// Size=0x32 (Id=3405)
{
    unsigned long long qwTeamID;// Offset=0x0 Size=0x8
    unsigned long dwNumMembers;// Offset=0x8 Size=0x4
    unsigned short cbTeamName;// Offset=0xc Size=0x2
    unsigned short cbTeamDescription;// Offset=0xe Size=0x2
    unsigned short cbTeamMotto;// Offset=0x10 Size=0x2
    unsigned short cbTeamURL;// Offset=0x12 Size=0x2
    unsigned short cbTeamData;// Offset=0x14 Size=0x2
    unsigned long long ftCreated;// Offset=0x16 Size=0x8
    wchar_t * wszTeamName;// Offset=0x1e Size=0x4
    wchar_t * wszTeamDescription;// Offset=0x22 Size=0x4
    wchar_t * wszTeamMotto;// Offset=0x26 Size=0x4
    wchar_t * wszTeamURL;// Offset=0x2a Size=0x4
    unsigned char * pbTeamData;// Offset=0x2e Size=0x4
};

class CHUDSceneImpl : public CXuiElementImplBase, public CXuiScene// Size=0x8 (Id=3406)
{
    public HRESULT SetLegendA(wchar_t * );
    public HRESULT SetLegendB(wchar_t * );
    public HRESULT SetLegendX(wchar_t * );
    public HRESULT SetLegendY(wchar_t * );
    protected HRESULT ObjectProc(struct XUIMessage * );
    private HRESULT SetLegend(wchar_t * ,wchar_t * );
    public void CHUDSceneImpl(class CHUDSceneImpl & );
    public void CHUDSceneImpl();
    public class CHUDSceneImpl & operator=(class CHUDSceneImpl & );
};

class CHUDSceneImpl : public CXuiElementImplBase, public CXuiScene// Size=0x8 (Id=3407)
{
    public HRESULT SetLegendA(wchar_t * );
    public HRESULT SetLegendB(wchar_t * );
    public HRESULT SetLegendX(wchar_t * );
    public HRESULT SetLegendY(wchar_t * );
    protected HRESULT ObjectProc(struct XUIMessage * );
    private HRESULT SetLegend(wchar_t * ,wchar_t * );
    public void CHUDSceneImpl(class CHUDSceneImpl & );
    public void CHUDSceneImpl();
    public class CHUDSceneImpl & operator=(class CHUDSceneImpl & );
};

struct XUIMessageGetTeletypeMax// Size=0x4 (Id=3408)
{
    int nMax;// Offset=0x0 Size=0x4
};

struct IXUIAuditionHost// Size=0x4 (Id=3409)
{
    HRESULT ProcessRemoteInput(struct _XINPUT_KEYSTROKE * );
    HRESULT ChangeLocale();
    HRESULT ChangeSkin(wchar_t * ,wchar_t * );
    HRESULT ReloadResources();
    void IXUIAuditionHost(struct IXUIAuditionHost & );
    void IXUIAuditionHost();
    struct IXUIAuditionHost & operator=(struct IXUIAuditionHost & );
};

struct IXUIAuditionHost// Size=0x4 (Id=3410)
{
    HRESULT ProcessRemoteInput(struct _XINPUT_KEYSTROKE * );
    HRESULT ChangeLocale();
    HRESULT ChangeSkin(wchar_t * ,wchar_t * );
    HRESULT ReloadResources();
    void IXUIAuditionHost(struct IXUIAuditionHost & );
    void IXUIAuditionHost();
    struct IXUIAuditionHost & operator=(struct IXUIAuditionHost & );
};

class CXHttpDownloadToMemory : public CXHttpDownloadBase// Size=0x1e38 (Id=3411)
{
    public void CXHttpDownloadToMemory(class CXHttpDownloadToMemory & );
    public void CXHttpDownloadToMemory();
    public HRESULT CustomInitialize();
    public unsigned long CustomGetObjectSize();
    public HRESULT CustomPrepareRequest();
    public HRESULT CustomHandleHttpHeadersComplete(unsigned long ,unsigned long long );
    protected HRESULT HandleResponseData();
    private unsigned char __align0[7720];// Offset=0x0 Size=0x1e28
    private unsigned long m_cbResponseBuffer;// Offset=0x1e28 Size=0x4
    private unsigned char * m_pbResponseBuffer;// Offset=0x1e2c Size=0x4
    private unsigned long m_cbDownloaded;// Offset=0x1e30 Size=0x4
    public void ~CXHttpDownloadToMemory();
    public class CXHttpDownloadToMemory & operator=(class CXHttpDownloadToMemory & );
    public void * __vecDelDtor(unsigned int );
};

class CXHttpDownloadToMemory : public CXHttpDownloadBase// Size=0x1e38 (Id=3412)
{
    public void CXHttpDownloadToMemory(class CXHttpDownloadToMemory & );
    public void CXHttpDownloadToMemory();
    public HRESULT CustomInitialize();
    public unsigned long CustomGetObjectSize();
    public HRESULT CustomPrepareRequest();
    public HRESULT CustomHandleHttpHeadersComplete(unsigned long ,unsigned long long );
    protected HRESULT HandleResponseData();
    private unsigned char __align0[7720];// Offset=0x0 Size=0x1e28
    private unsigned long m_cbResponseBuffer;// Offset=0x1e28 Size=0x4
    private unsigned char * m_pbResponseBuffer;// Offset=0x1e2c Size=0x4
    private unsigned long m_cbDownloaded;// Offset=0x1e30 Size=0x4
    public void ~CXHttpDownloadToMemory();
    public class CXHttpDownloadToMemory & operator=(class CXHttpDownloadToMemory & );
    public void * __vecDelDtor(unsigned int );
};

struct XUIFontMetrics// Size=0x18 (Id=3413)
{
    void * operator new(unsigned int ,void * );
    void * operator new(unsigned int );
    void * operator new[](unsigned int );
    void operator delete(void * );
    void operator delete[](void * );
    float fLineHeight;// Offset=0x0 Size=0x4
    float fMaxAscent;// Offset=0x4 Size=0x4
    float fMaxDescent;// Offset=0x8 Size=0x4
    float fMaxWidth;// Offset=0xc Size=0x4
    float fMaxHeight;// Offset=0x10 Size=0x4
    float fMaxAdvance;// Offset=0x14 Size=0x4
};

class CXStorageMiscParent : public CXLiveAsyncTaskInternal// Size=0x1e20 (Id=3414)
{
    public void CXStorageMiscParent(class CXStorageMiscParent & );
    public void CXStorageMiscParent();
    public void StorageMiscGetServerPath(wchar_t ** );
    public void ~CXStorageMiscParent();
    public class CXStorageMiscParent & operator=(class CXStorageMiscParent & );
    public void * __vecDelDtor(unsigned int );
};

class CXStorageMiscParent : public CXLiveAsyncTaskInternal// Size=0x1e20 (Id=3415)
{
    public void CXStorageMiscParent(class CXStorageMiscParent & );
    public void CXStorageMiscParent();
    public void StorageMiscGetServerPath(wchar_t ** );
    public void ~CXStorageMiscParent();
    public class CXStorageMiscParent & operator=(class CXStorageMiscParent & );
    public void * __vecDelDtor(unsigned int );
};

struct _ACCOUNT_CHANGE_GAMERTAG_REQUEST// Size=0x1a (Id=3416)
{
    unsigned long long qwMachineId;// Offset=0x0 Size=0x8
    unsigned long long qwUserId;// Offset=0x8 Size=0x8
    unsigned short wGamertagLength;// Offset=0x10 Size=0x2
    wchar_t * wszGamertag;// Offset=0x12 Size=0x4
    struct _ACCOUNT_CHANGE_GAMERTAG_RESPONSE * pResponse;// Offset=0x16 Size=0x4
};

struct _MIGRATE_XBOX_COM_USER_RESPONSE// Size=0x32 (Id=3417)
{
    unsigned long long qwUserId;// Offset=0x0 Size=0x8
    unsigned char abXenonKey[16];// Offset=0x8 Size=0x10
    unsigned short wGamertagLength;// Offset=0x18 Size=0x2
    wchar_t * wszGamertag;// Offset=0x1a Size=0x4
    unsigned short wDomainLength;// Offset=0x1e Size=0x2
    wchar_t * wszDomain;// Offset=0x20 Size=0x4
    unsigned short wRealmLength;// Offset=0x24 Size=0x2
    wchar_t * wszRealm;// Offset=0x26 Size=0x4
    unsigned long dwParentalControlGroupId;// Offset=0x2a Size=0x4
    unsigned long dwCultureId;// Offset=0x2e Size=0x4
};

struct XONLINE_MUTELIST_USER_INTERNAL// Size=0x10 (Id=3418)
{
    unsigned long long qwUserID;// Offset=0x0 Size=0x8
    unsigned char fPendingAdd;// Offset=0x8 Size=0x1
    unsigned char fPendingRemove;// Offset=0x9 Size=0x1
    union // Size=0x2 (Id=0)
    {
        unsigned short wAge;// Offset=0xa Size=0x2
        unsigned short wNextPending;// Offset=0xa Size=0x2
    };
};

struct XUIMessageGetTeletypeLocation// Size=0x14 (Id=3419)
{
    int nIndex;// Offset=0x0 Size=0x4
    struct XUIRect rLocation;// Offset=0x4 Size=0x10
    void XUIMessageGetTeletypeLocation();
};

class CXLiveLogon// Size=0xa4 (Id=3420)
{
    public void CXLiveLogon();
    public HRESULT LogonConnect(struct _XONLINE_LOGON_PARAMS * ,struct _XOVERLAPPED * );
    public HRESULT LogonDisconnect(HRESULT ,struct _XOVERLAPPED * );
    public HRESULT GetLogonUsers(struct _XNET_LOGON_USER * );
    public HRESULT LogonContinue();
    public void HandleAliveComplete(HRESULT );
    public HRESULT GetNatType(enum XONLINE_NAT_TYPE * );
    public HRESULT GetServiceInfo(unsigned long ,struct _XONLINE_SERVICE_INFO * );
    public HRESULT GetHrLast();
    public unsigned long GetLogonSessionID();
    public HRESULT CheckUserPrivilege(unsigned long long ,unsigned long ,int * );
    public HRESULT UsersAreFriends(unsigned long long ,unsigned long long * ,unsigned long ,int * ,class CXLiveFriends * ,struct _XOVERLAPPED * );
    public HRESULT WaitForRevocationList(int ,struct _XOVERLAPPED * );
    public void CancelGetRevocationList();
    public int IsGetRevocationListActive();
    public void ProcessGetRevocationList();
    public void TakeLock();
    public void DropLock();
    public void TakePackageCheckLock();
    public void DropPackageCheckLock();
    struct // Size=0x4 (Id=0)
    {
        unsigned long m_fLogonStartRequested:1;// Offset=0x0 Size=0x4 BitOffset=0x1f BitSize=0x1
        unsigned long m_fLogonInProgress:1;// Offset=0x0 Size=0x4 BitOffset=0x1e BitSize=0x1
        unsigned long m_fLogoffInProgress:1;// Offset=0x0 Size=0x4 BitOffset=0x1d BitSize=0x1
        unsigned long m_fLogonEstablished:1;// Offset=0x0 Size=0x4 BitOffset=0x1c BitSize=0x1
        unsigned long m_fLinkDisconnected:1;// Offset=0x0 Size=0x4 BitOffset=0x1b BitSize=0x1
        unsigned long m_fLogonWithUsers:1;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x1
        unsigned long m_fLogonTicketsOnly:1;// Offset=0x0 Size=0x4 BitOffset=0x19 BitSize=0x1
        unsigned long m_fLogonUpdateOnly:1;// Offset=0x0 Size=0x4 BitOffset=0x18 BitSize=0x1
        unsigned long m_fIndicateDisconnect:1;// Offset=0x0 Size=0x4 BitOffset=0x17 BitSize=0x1
        unsigned long m_fTaskAccelerated:1;// Offset=0x0 Size=0x4 BitOffset=0x16 BitSize=0x1
        unsigned long m_fSuPackageCheckInProgress:1;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x1
    };
    protected struct _XONLINE_LOGON_PARAMS * m_pLogonParams;// Offset=0x4 Size=0x4
    protected struct _XOVERLAPPED * m_pOverlapped;// Offset=0x8 Size=0x4
    protected HRESULT m_hrLogonStop;// Offset=0xc Size=0x4
    protected int m_bPackageUpdateSupport;// Offset=0x10 Size=0x4
    protected unsigned long m_dwSessionID;// Offset=0x14 Size=0x4
    protected HRESULT m_hrLast;// Offset=0x18 Size=0x4
    protected struct _RTL_CRITICAL_SECTION m_csLogon;// Offset=0x1c Size=0x1c
    protected unsigned long m_dwRevocationListTime;// Offset=0x38 Size=0x4
    protected struct _XOVERLAPPED m_xovGetRevocationList;// Offset=0x3c Size=0x1c
    protected struct _XGET_REVOCATION_LIST_REPLY * m_pGetRevocationListReply;// Offset=0x58 Size=0x4
    protected struct _KEVENT m_kevtRevocationListDone;// Offset=0x5c Size=0x10
    private struct _RTL_CRITICAL_SECTION m_CheckStoragePackageCs;// Offset=0x6c Size=0x1c
    private HRESULT m_CheckStoragePackageHResult;// Offset=0x88 Size=0x4
    private void * m_CheckStoragePackageXamTask;// Offset=0x8c Size=0x4
    private void * m_PackageUpdateHandle;// Offset=0x90 Size=0x4
    private unsigned int m_PackageRecheckTickStart;// Offset=0x94 Size=0x4
    private unsigned int m_PackageRecheckTickEnd;// Offset=0x98 Size=0x4
    private int m_ForceSignoutWarningGiven;// Offset=0x9c Size=0x4
    private unsigned long m_dwTimeLogonStarted;// Offset=0xa0 Size=0x4
    private HRESULT CheckStoragePackageTaskStart();
    private HRESULT CheckStoragePackageTaskWrapper(void * );
    private HRESULT CheckStoragePackageTask();
    private HRESULT CheckStoragePackageTaskContinue();
    private void CheckStoragePackageTaskClose();
};

class CXInviteSendMessage : public CXMsgSendBase// Size=0x2368 (Id=3421)
{
    public void CXInviteSendMessage(class CXInviteSendMessage & );
    public void CXInviteSendMessage();
    public HRESULT CustomInitialize();
    public void CustomCleanup();
    public unsigned long CustomGetObjectSize();
    public HRESULT MsgBaseBuildSendSubTask(class CXLiveSubTask ** );
    private unsigned char __align0[8248];// Offset=0x0 Size=0x2038
    private void * m_hMsgCreated;// Offset=0x2038 Size=0x4
    private unsigned char __align1[4];// Offset=0x203c Size=0x4
    private unsigned long long m_aqwPuidRecipients[100];// Offset=0x2040 Size=0x320
    private unsigned long m_dwNumRecipients;// Offset=0x2360 Size=0x4
    public void ~CXInviteSendMessage();
    public class CXInviteSendMessage & operator=(class CXInviteSendMessage & );
    public void * __vecDelDtor(unsigned int );
};

class CXInviteSendMessage : public CXMsgSendBase// Size=0x2368 (Id=3422)
{
    public void CXInviteSendMessage(class CXInviteSendMessage & );
    public void CXInviteSendMessage();
    public HRESULT CustomInitialize();
    public void CustomCleanup();
    public unsigned long CustomGetObjectSize();
    public HRESULT MsgBaseBuildSendSubTask(class CXLiveSubTask ** );
    private unsigned char __align0[8248];// Offset=0x0 Size=0x2038
    private void * m_hMsgCreated;// Offset=0x2038 Size=0x4
    private unsigned char __align1[4];// Offset=0x203c Size=0x4
    private unsigned long long m_aqwPuidRecipients[100];// Offset=0x2040 Size=0x320
    private unsigned long m_dwNumRecipients;// Offset=0x2360 Size=0x4
    public void ~CXInviteSendMessage();
    public class CXInviteSendMessage & operator=(class CXInviteSendMessage & );
    public void * __vecDelDtor(unsigned int );
};

struct XUIMessageControlNavigate// Size=0x10 (Id=3423)
{
    enum XUI_CONTROL_NAVIGATE nControlNavigate;// Offset=0x0 Size=0x4
    struct _XUIOBJ * hObjSource;// Offset=0x4 Size=0x4
    struct _XUIOBJ * hObjDest;// Offset=0x8 Size=0x4
    int bSkipNavigate;// Offset=0xc Size=0x4
};

struct XUIMessageParentChanged// Size=0xc (Id=3424)
{
    int bOnLink;// Offset=0x0 Size=0x4
    struct _XUIOBJ * hOldParent;// Offset=0x4 Size=0x4
    struct _XUIOBJ * hNewParent;// Offset=0x8 Size=0x4
};

class CXuiCachingModule : public CXuiModule// Size=0x80 (Id=3425)
{
    public void CXuiCachingModule(class CXuiCachingModule & );
    public void CXuiCachingModule();
    public HRESULT Init(HRESULT  ( * )(struct IXuiDevice * ,wchar_t * ,struct XUIImageInfo * ,struct D3DTexture ** ),struct XUIInitParams * );
    public HRESULT InitShared(struct D3DDevice * ,struct _D3DPRESENT_PARAMETERS_ * ,HRESULT  ( * )(struct IXuiDevice * ,wchar_t * ,struct XUIImageInfo * ,struct D3DTexture ** ),struct XUIInitParams * );
    public HRESULT InitEx(struct XUIRenderInitParams * ,struct XUIInitParams * );
    public void Uninit();
    public HRESULT CacheScene(wchar_t * ,int ,struct _XUIOBJ ** );
    public HRESULT CacheSceneAsync(struct XUICacheSceneAsync * ,unsigned long ,struct _XOVERLAPPED * ,unsigned long );
    public int ReleaseScene(struct _XUIOBJ * );
    public struct _XUIOBJ * GetSceneFromCache(wchar_t * );
    public int RemoveSceneFromCache(struct _XUIOBJ * );
    union // Size=0x7c (Id=0)
    {
        unsigned char __align0[64];// Offset=0x0 Size=0x40
        struct _XUICLASS * m_hClassNavButton;// Offset=0x40 Size=0x4
        struct _XUICLASS * m_hClassBackButton;// Offset=0x44 Size=0x4
        struct _XUICLASS * m_hClassScene;// Offset=0x48 Size=0x4
        class CXuiSceneCache m_sceneCache;// Offset=0x4c Size=0x30
        class CXuiCachingModule * s_cachingModuleInst;// Offset=0x0 Size=0x4
        HRESULT MessageFilter(struct _XUIOBJ * ,struct XUIMessage * );
        HRESULT CompleteInitialization();
        HRESULT _SceneCacheMessageFilter(struct _XUIOBJ * ,struct XUIMessage * );
        void ~CXuiCachingModule();
        class CXuiCachingModule & operator=(class CXuiCachingModule & );
        void __local_vftable_ctor_closure();
        void * __vecDelDtor(unsigned int );
    };
};

class CXuiCachingModule : public CXuiModule// Size=0x80 (Id=3426)
{
    public void CXuiCachingModule(class CXuiCachingModule & );
    public void CXuiCachingModule();
    public HRESULT Init(HRESULT  ( * )(struct IXuiDevice * ,wchar_t * ,struct XUIImageInfo * ,struct D3DTexture ** ),struct XUIInitParams * );
    public HRESULT InitShared(struct D3DDevice * ,struct _D3DPRESENT_PARAMETERS_ * ,HRESULT  ( * )(struct IXuiDevice * ,wchar_t * ,struct XUIImageInfo * ,struct D3DTexture ** ),struct XUIInitParams * );
    public HRESULT InitEx(struct XUIRenderInitParams * ,struct XUIInitParams * );
    public void Uninit();
    public HRESULT CacheScene(wchar_t * ,int ,struct _XUIOBJ ** );
    public HRESULT CacheSceneAsync(struct XUICacheSceneAsync * ,unsigned long ,struct _XOVERLAPPED * ,unsigned long );
    public int ReleaseScene(struct _XUIOBJ * );
    public struct _XUIOBJ * GetSceneFromCache(wchar_t * );
    public int RemoveSceneFromCache(struct _XUIOBJ * );
    union // Size=0x7c (Id=0)
    {
        unsigned char __align0[64];// Offset=0x0 Size=0x40
        struct _XUICLASS * m_hClassNavButton;// Offset=0x40 Size=0x4
        struct _XUICLASS * m_hClassBackButton;// Offset=0x44 Size=0x4
        struct _XUICLASS * m_hClassScene;// Offset=0x48 Size=0x4
        class CXuiSceneCache m_sceneCache;// Offset=0x4c Size=0x30
        class CXuiCachingModule * s_cachingModuleInst;// Offset=0x0 Size=0x4
        HRESULT MessageFilter(struct _XUIOBJ * ,struct XUIMessage * );
        HRESULT CompleteInitialization();
        HRESULT _SceneCacheMessageFilter(struct _XUIOBJ * ,struct XUIMessage * );
        void ~CXuiCachingModule();
        class CXuiCachingModule & operator=(class CXuiCachingModule & );
        void __local_vftable_ctor_closure();
        void * __vecDelDtor(unsigned int );
    };
};

class CConformanceInfo// Size=0x10 (Id=3427)
{
    public void CConformanceInfo();
    public void Reset();
    public unsigned long GetConformance();
    struct // Size=0x4 (Id=0)
    {
        unsigned long m_fInitialized:1;// Offset=0x0 Size=0x4 BitOffset=0x1f BitSize=0x1
        unsigned long m_fInUse:1;// Offset=0x0 Size=0x4 BitOffset=0x1e BitSize=0x1
        unsigned long m_Reserved:28;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x1c
        unsigned long m_ConformanceSize:2;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x2
    };
    public unsigned char * m_pbWrittenLocation;// Offset=0x4 Size=0x4
    public unsigned long long m_Conformance;// Offset=0x8 Size=0x8
};

class CXMarketplaceAssetEnumerate// Size=0x1 (Id=3428)
{
    public HRESULT Enumerate(void * ,struct _XOVERLAPPED * );
    public void ReleaseResources(void * );
    private HRESULT CallMarketplaceAssetEnumerate(unsigned long ,struct _XENUMERATORASSET * ,unsigned long ,struct _XMARKETPLACE_ASSET_ENUMERATE_REPLY * ,unsigned long * );
};

class CXuiCheckbox : public CXuiControl// Size=0x4 (Id=3429)
{
    public void CXuiCheckbox(struct _XUIOBJ * );
    public void CXuiCheckbox();
    public int IsChecked();
    public HRESULT SetCheck(int );
    public void Attach(struct _XUIOBJ * );
};

class CXStorageDelete : public CXStorageMiscParent// Size=0x1e38 (Id=3430)
{
    public void CXStorageDelete(class CXStorageDelete & );
    public void CXStorageDelete();
    public HRESULT CustomInitialize();
    public void CustomCleanup();
    public unsigned long CustomGetObjectSize();
    public HRESULT CustomPrepareRequest();
    public HRESULT CustomContinueBuildRequest();
    public HRESULT CustomContinueProcessHttpHeaders();
    public void StorageMiscGetServerPath(wchar_t ** );
    private unsigned char __align0[7712];// Offset=0x0 Size=0x1e20
    private unsigned long long m_xuidUser;// Offset=0x1e20 Size=0x8
    private unsigned long m_dwServerPathLength;// Offset=0x1e28 Size=0x4
    private wchar_t * m_pwszServerPath;// Offset=0x1e2c Size=0x4
    private class CXLiveSubTask * m_pSubTask;// Offset=0x1e30 Size=0x4
    public void ~CXStorageDelete();
    public class CXStorageDelete & operator=(class CXStorageDelete & );
    public void * __vecDelDtor(unsigned int );
};

class CXStorageDelete : public CXStorageMiscParent// Size=0x1e38 (Id=3431)
{
    public void CXStorageDelete(class CXStorageDelete & );
    public void CXStorageDelete();
    public HRESULT CustomInitialize();
    public void CustomCleanup();
    public unsigned long CustomGetObjectSize();
    public HRESULT CustomPrepareRequest();
    public HRESULT CustomContinueBuildRequest();
    public HRESULT CustomContinueProcessHttpHeaders();
    public void StorageMiscGetServerPath(wchar_t ** );
    private unsigned char __align0[7712];// Offset=0x0 Size=0x1e20
    private unsigned long long m_xuidUser;// Offset=0x1e20 Size=0x8
    private unsigned long m_dwServerPathLength;// Offset=0x1e28 Size=0x4
    private wchar_t * m_pwszServerPath;// Offset=0x1e2c Size=0x4
    private class CXLiveSubTask * m_pSubTask;// Offset=0x1e30 Size=0x4
    public void ~CXStorageDelete();
    public class CXStorageDelete & operator=(class CXStorageDelete & );
    public void * __vecDelDtor(unsigned int );
};

struct XUIMessageSetScrollEndState// Size=0x4 (Id=3432)
{
    enum XUI_SCROLLEND_STATE nState;// Offset=0x0 Size=0x4
};

struct XUINotifySelChanged// Size=0x8 (Id=3433)
{
    int iItem;// Offset=0x0 Size=0x4
    int iOldItem;// Offset=0x4 Size=0x4
};

class CRWLock// Size=0x38 (Id=3434)
{
    public void CRWLock();
    public void ~CRWLock();
    public bool TryEnterShared();
    public void EnterShared();
    public bool TryEnterExclusive();
    public void EnterExclusive();
    public void Leave();
    private struct _ERWLOCK m_rwLock;// Offset=0x0 Size=0x38
    public void * __vecDelDtor(unsigned int );
};

struct _CQVal// Size=0x0 (Id=3435)
{
};

struct IXUIRuntimeHooksVTBL// Size=0x10 (Id=3436)
{
    HRESULT  ( * RewriteResourceLocator)(struct IXUIRuntimeHooks * ,wchar_t * ,wchar_t ** );// Offset=0x0 Size=0x4
    HRESULT  ( * FindClassByName)(struct IXUIRuntimeHooks * ,wchar_t * ,struct _XUICLASS ** );// Offset=0x4 Size=0x4
    HRESULT  ( * GetTextPresenterText)(struct IXUIRuntimeHooks * ,struct _XUIOBJ * ,wchar_t ** );// Offset=0x8 Size=0x4
    HRESULT  ( * LogMessage)(struct IXUIRuntimeHooks * ,HRESULT ,wchar_t * );// Offset=0xc Size=0x4
};

struct XUINotify// Size=0x10 (Id=3437)
{
    unsigned long dwNotify;// Offset=0x0 Size=0x4
    struct _XUIOBJ * hObjSource;// Offset=0x4 Size=0x4
    unsigned int cbData;// Offset=0x8 Size=0x4
    void * pvData;// Offset=0xc Size=0x4
};

enum CBitrateMonitor::_unnamed_3438
{
    Measurement_Interval=5000,
    Min_Samples_Per_Measurement=3,
    Alpha_Percent=20
};

class CBitrateMonitor// Size=0x28 (Id=3439)
{
    public void CBitrateMonitor();
    public void Reset();
    public HRESULT NewSample(unsigned long );
    public HRESULT GetMeasurementDuration(unsigned long * );
    public HRESULT GetAverageBitrate(unsigned long * );
    enum _unnamed_36704
    {
        Measurement_Interval=5000,
        Min_Samples_Per_Measurement=3,
        Alpha_Percent=20
    };
    private unsigned long m_dwLastTickCount;// Offset=0x0 Size=0x4
    private unsigned long m_dwInitialTickCount;// Offset=0x4 Size=0x4
    private unsigned long long m_qwTotalNumBytes;// Offset=0x8 Size=0x8
    private unsigned long m_dwNumSamplesSinceLastMeasurement;// Offset=0x10 Size=0x4
    private unsigned long m_dwNumBytesSinceLastMeasurement;// Offset=0x14 Size=0x4
    private unsigned long m_dwLastMeasurementTickCount;// Offset=0x18 Size=0x4
    private unsigned char __align0[4];// Offset=0x1c Size=0x4
    private unsigned long long m_qwAverageBitrate;// Offset=0x20 Size=0x8
};

class CScopeItem// Size=0x54 (Id=3440)
{
    public void CScopeItem();
    public void Reset();
    public int InRecursion;// Offset=0x0 Size=0x4
    public unsigned long Checkpoint;// Offset=0x4 Size=0x4
    public unsigned long cbFlatSize;// Offset=0x8 Size=0x4
    public unsigned long dwIterator1;// Offset=0xc Size=0x4
    public unsigned long dwIterator2;// Offset=0x10 Size=0x4
    public unsigned long dwIteratorCounter1;// Offset=0x14 Size=0x4
    public unsigned long dwIteratorCounter2;// Offset=0x18 Size=0x4
    public unsigned long dwSchemaScopeRepeatPoint;// Offset=0x1c Size=0x4
    public unsigned long dwUnionSelectionValue;// Offset=0x20 Size=0x4
    public unsigned long dwCurrentScopeBegin;// Offset=0x24 Size=0x4
    public unsigned short CurrentSwitchArm;// Offset=0x28 Size=0x2
    public unsigned short PropIDIndex;// Offset=0x2a Size=0x2
    public unsigned short SelectorMask;// Offset=0x2c Size=0x2
    private unsigned char __align0[2];// Offset=0x2e Size=0x2
    struct // Size=0x4 (Id=0)
    {
        int UnionArmMatched:1;// Offset=0x30 Size=0x4 BitOffset=0x1f BitSize=0x1
        int Hidden:1;// Offset=0x30 Size=0x4 BitOffset=0x1e BitSize=0x1
        int WasHidden:1;// Offset=0x30 Size=0x4 BitOffset=0x1d BitSize=0x1
        int Reserved:29;// Offset=0x30 Size=0x4 BitOffset=0x0 BitSize=0x1d
    };
    public unsigned char * pbEndOfUnion;// Offset=0x34 Size=0x4
    public class COutputBuffer OutputBuffer;// Offset=0x38 Size=0xc
    public class COutputBuffer * pOutputBuffer;// Offset=0x44 Size=0x4
    public struct SCHEMA_DESCRIPTOR rsd;// Offset=0x48 Size=0x1
    public struct SCHEMA_DESCRIPTOR rsdMember;// Offset=0x49 Size=0x1
    public struct SCHEMA_EXTENDED_ATTRIBUTES ExtAttributes;// Offset=0x4a Size=0x1
    public struct SCHEMA_CONFORMANCE_INFO ConformanceInfo;// Offset=0x4b Size=0x4
    public struct SCHEMA_CONFORMING_INFO ConformingInfo;// Offset=0x4f Size=0x2
    public struct SCHEMA_UNION_INFO UnionInfo;// Offset=0x51 Size=0x2
};

struct XUIKeyframeData// Size=0x10 (Id=3441)
{
    void * operator new(unsigned int ,void * );
    void * operator new(unsigned int );
    void * operator new[](unsigned int );
    void operator delete(void * );
    void operator delete[](void * );
    int m_nTime;// Offset=0x0 Size=0x4
    unsigned char m_bFlags;// Offset=0x4 Size=0x1
    char m_nEaseIn;// Offset=0x5 Size=0x1
    char m_nEaseOut;// Offset=0x6 Size=0x1
    char m_nEaseScale;// Offset=0x7 Size=0x1
    int m_nNumPropVals;// Offset=0x8 Size=0x4
    struct XUIElementPropVal * m_pPropVals;// Offset=0xc Size=0x4
    void XUIKeyframeData();
    void ~XUIKeyframeData();
    void Reset();
    void Detach(struct XUIKeyframeData * );
    HRESULT CopyTo(struct XUIKeyframeData * );
    enum XUI_INTERPOLATE GetInterpolationType();
    void SetInterpolationType(enum XUI_INTERPOLATE );
    void * __vecDelDtor(unsigned int );
};

class CXContentDownloadMedia : public CXLiveAsyncTaskInternal// Size=0x17500 (Id=3442)
{
    public void CXContentDownloadMedia(class CXContentDownloadMedia & );
    public void CXContentDownloadMedia();
    public HRESULT CustomInitialize();
    public void CustomCleanup();
    public unsigned long CustomGetObjectSize();
    public struct CXLiveAsyncTaskInternal::RECEIVERATELIMITDATA * CustomSelectReceiveRateLimitData();
    public HRESULT CustomPrepareRequest();
    public HRESULT CustomContinueBuildRequest();
    public HRESULT CustomContinueSubmitRequest();
    public HRESULT CustomHandleHttpHeadersComplete(unsigned long ,unsigned long long );
    public HRESULT CustomHandleResponseHeaderComplete(HRESULT );
    public HRESULT CustomContinueResponseData();
    public HRESULT OpenExistingPackage();
    public HRESULT CreateMediaPackage();
    public HRESULT CreateInstallerPackage(struct _XCONTENT_HEADER * ,struct _XCONTENT_METADATA * ,struct _XCONTENT_MOUNTED_PACKAGE ** );
    public HRESULT GetInProgressMetadata(class CArgumentList * );
    union // Size=0x18 (Id=0)
    {
        struct CXLiveAsyncTaskInternal::RECEIVERATELIMITDATA s_ContentDownloadReceiveRateLimitData;// Offset=0x0 Size=0x18
        HRESULT GetValidAddressFromURL(char * ,char * ,unsigned long ,unsigned short * ,char ** );
        void GetTemporaryContentMetaDataBuffer(struct _XCONTENT_HEADER ** );
        void TriggerPlaybackAvailablePopup();
        int NeedBuffering();
        HRESULT OpenAsfResumeData(int );
        void CloseFileHandles();
        unsigned long wtol32(wchar_t * );
        HRESULT StartDownloadOrResume(union _LARGE_INTEGER ,unsigned long ,struct _XREFERRAL_LOCATION * );
        void SetMountedPackage(struct _XCONTENT_MOUNTED_PACKAGE * );
        void GetPackagePath(char * ,unsigned long );
        void DismountPackage();
        HRESULT HandleResponseData();
        HRESULT ContinueProcessResponseData();
        HRESULT PrepareMediaUrlRequest();
        HRESULT PrepareContentReferralRequest();
        HRESULT PrepareLicenseRefreshRequest(int );
        HRESULT HandleMediaUrlRequestResult();
        HRESULT HandleContentReferralRequestResult();
        HRESULT HandleLicenseRefreshRequestResult();
        HRESULT ReplacePackageHeader(struct _XCONTENT_HEADER * );
        HRESULT _CustomContinueResponseData();
        HRESULT OpenExistingPackageInternal(char * ,unsigned char * ,struct _XCONTENT_HEADER * ,struct _XCONTENT_METADATA * ,unsigned char * ,unsigned long * ,struct _XCONTENT_MOUNTED_PACKAGE ** );
        void FinalizeContentType();
        void FinalizeContentPackage();
        void GetWriteOffset(unsigned long * ,union _LARGE_INTEGER * ,unsigned long * );
        int IsUpdateRedirect();
        struct REFRESH_LICENSE_RESPONSE_BUFFER// Size=0x806 (Id=36838)
        {
            struct _XCONTENT_REFRESH_LICENSE_RESPONSE Response;// Offset=0x0 Size=0x6
            unsigned char abContentHeaderBuffer[2048];// Offset=0x6 Size=0x800
        };
    };
    private unsigned char __align0[5658];// Offset=0x806 Size=0x161a
    union // Size=0x3332 (Id=0)
    {
        struct FIND_MEDIA_INSTANCE_URLS_RESPONSE_BUFFER m_MediaUrlResponseBuffer;// Offset=0x1e20 Size=0x156c
        struct REFERRAL_RESPONSE_BUFFER m_ReferralResponseBuffer;// Offset=0x1e20 Size=0x1512
        struct CXContentDownloadMedia::REFRESH_LICENSE_RESPONSE_BUFFER m_RefreshLicenseResponseBuffer;// Offset=0x1e20 Size=0x806
        enum _unnamed_36844
        {
            e_MaxMediaFiles=4096,
            e_MinMediaFileSize=10485760,
            e_ContentFragmentFileSize=170459136
        };
        unsigned char __align1[3430];// Offset=0x2626 Size=0xd66
    };
    struct // Size=0x4 (Id=0)
    {
        unsigned long m_fHaveData:1;// Offset=0x338c Size=0x4 BitOffset=0x1f BitSize=0x1
    };
    private unsigned long m_dwNumLocations;// Offset=0x3390 Size=0x4
    private struct _XREFERRAL_LOCATION * m_paReferralLocations;// Offset=0x3394 Size=0x4
    private struct _XREFERRAL_LOCATION * m_pNextReferralLocation;// Offset=0x3398 Size=0x4
    private struct _XCONTENT_MOUNTED_PACKAGE * m_pMountedPackage;// Offset=0x339c Size=0x4
    private void * m_hMediaDirectory;// Offset=0x33a0 Size=0x4
    private int m_bCreatedFile;// Offset=0x33a4 Size=0x4
    private unsigned long m_dwNumMediaFiles;// Offset=0x33a8 Size=0x4
    private unsigned long m_dwFileChunkSizeBytes;// Offset=0x33ac Size=0x4
    private void * m_hMediaFile[4096];// Offset=0x33b0 Size=0x4000
    private void * m_hResumeFile;// Offset=0x73b0 Size=0x4
    private void * m_hAsfResumeFile;// Offset=0x73b4 Size=0x4
    private union _LARGE_INTEGER m_liMediaFileSize;// Offset=0x73b8 Size=0x8
    private union _LARGE_INTEGER m_liTotalBytesWritten;// Offset=0x73c0 Size=0x8
    private int m_bResumeTransfer;// Offset=0x73c8 Size=0x4
    private struct _FILETIME m_ftLastModified;// Offset=0x73cc Size=0x8
    private unsigned char __align2[4];// Offset=0x73d4 Size=0x4
    private union _LARGE_INTEGER m_liResumeOffset;// Offset=0x73d8 Size=0x8
    private union _LARGE_INTEGER m_liResumeFilesize;// Offset=0x73e0 Size=0x8
    private unsigned long m_dwContentType;// Offset=0x73e8 Size=0x4
    private unsigned char __align3[4];// Offset=0x73ec Size=0x4
    private unsigned long long m_qwUserId;// Offset=0x73f0 Size=0x8
    private unsigned char m_abContentId[20];// Offset=0x73f8 Size=0x14
    private struct _GUID m_MediaInstanceID;// Offset=0x740c Size=0x10
    private struct _XREFERRAL_LOCATION m_ReferralLocation;// Offset=0x741c Size=0x8
    private unsigned long m_dwTargetDirectoryLength;// Offset=0x7424 Size=0x4
    private char * m_pszTargetDirectoryPath;// Offset=0x7428 Size=0x4
    private char * m_pszFileName;// Offset=0x742c Size=0x4
    private unsigned long m_dwFlags;// Offset=0x7430 Size=0x4
    private class CXLiveSubTask * m_pSubTask;// Offset=0x7434 Size=0x4
    private struct _XCONTENT_HEADER * m_pContentHeader;// Offset=0x7438 Size=0x4
    private unsigned char m_abRecvBuffer[65536];// Offset=0x743c Size=0x10000
    private unsigned char __align4[4];// Offset=0x1743c Size=0x4
    private class CBitrateMonitor m_bitrateMonitor;// Offset=0x17440 Size=0x28
    private class CMediaStreamASFParser m_AsfParser;// Offset=0x17468 Size=0x88
    private unsigned long m_dwLastResumeSaveTime;// Offset=0x174f0 Size=0x4
    private unsigned long m_dwLastWireRemaining;// Offset=0x174f4 Size=0x4
    private int m_bWmvDownload;// Offset=0x174f8 Size=0x4
    private int m_bMinDownloaded;// Offset=0x174fc Size=0x4
    public void ~CXContentDownloadMedia();
    public class CXContentDownloadMedia & operator=(class CXContentDownloadMedia & );
    public void * __vecDelDtor(unsigned int );
};

class CXContentDownloadMedia : public CXLiveAsyncTaskInternal// Size=0x17500 (Id=3443)
{
    public void CXContentDownloadMedia(class CXContentDownloadMedia & );
    public void CXContentDownloadMedia();
    public HRESULT CustomInitialize();
    public void CustomCleanup();
    public unsigned long CustomGetObjectSize();
    public struct CXLiveAsyncTaskInternal::RECEIVERATELIMITDATA * CustomSelectReceiveRateLimitData();
    public HRESULT CustomPrepareRequest();
    public HRESULT CustomContinueBuildRequest();
    public HRESULT CustomContinueSubmitRequest();
    public HRESULT CustomHandleHttpHeadersComplete(unsigned long ,unsigned long long );
    public HRESULT CustomHandleResponseHeaderComplete(HRESULT );
    public HRESULT CustomContinueResponseData();
    public HRESULT OpenExistingPackage();
    public HRESULT CreateMediaPackage();
    public HRESULT CreateInstallerPackage(struct _XCONTENT_HEADER * ,struct _XCONTENT_METADATA * ,struct _XCONTENT_MOUNTED_PACKAGE ** );
    public HRESULT GetInProgressMetadata(class CArgumentList * );
    union // Size=0x18 (Id=0)
    {
        struct CXLiveAsyncTaskInternal::RECEIVERATELIMITDATA s_ContentDownloadReceiveRateLimitData;// Offset=0x0 Size=0x18
        HRESULT GetValidAddressFromURL(char * ,char * ,unsigned long ,unsigned short * ,char ** );
        void GetTemporaryContentMetaDataBuffer(struct _XCONTENT_HEADER ** );
        void TriggerPlaybackAvailablePopup();
        int NeedBuffering();
        HRESULT OpenAsfResumeData(int );
        void CloseFileHandles();
        unsigned long wtol32(wchar_t * );
        HRESULT StartDownloadOrResume(union _LARGE_INTEGER ,unsigned long ,struct _XREFERRAL_LOCATION * );
        void SetMountedPackage(struct _XCONTENT_MOUNTED_PACKAGE * );
        void GetPackagePath(char * ,unsigned long );
        void DismountPackage();
        HRESULT HandleResponseData();
        HRESULT ContinueProcessResponseData();
        HRESULT PrepareMediaUrlRequest();
        HRESULT PrepareContentReferralRequest();
        HRESULT PrepareLicenseRefreshRequest(int );
        HRESULT HandleMediaUrlRequestResult();
        HRESULT HandleContentReferralRequestResult();
        HRESULT HandleLicenseRefreshRequestResult();
        HRESULT ReplacePackageHeader(struct _XCONTENT_HEADER * );
        HRESULT _CustomContinueResponseData();
        HRESULT OpenExistingPackageInternal(char * ,unsigned char * ,struct _XCONTENT_HEADER * ,struct _XCONTENT_METADATA * ,unsigned char * ,unsigned long * ,struct _XCONTENT_MOUNTED_PACKAGE ** );
        void FinalizeContentType();
        void FinalizeContentPackage();
        void GetWriteOffset(unsigned long * ,union _LARGE_INTEGER * ,unsigned long * );
        int IsUpdateRedirect();
        struct REFRESH_LICENSE_RESPONSE_BUFFER// Size=0x806 (Id=36838)
        {
            struct _XCONTENT_REFRESH_LICENSE_RESPONSE Response;// Offset=0x0 Size=0x6
            unsigned char abContentHeaderBuffer[2048];// Offset=0x6 Size=0x800
        };
    };
    private unsigned char __align0[5658];// Offset=0x806 Size=0x161a
    union // Size=0x3332 (Id=0)
    {
        struct FIND_MEDIA_INSTANCE_URLS_RESPONSE_BUFFER m_MediaUrlResponseBuffer;// Offset=0x1e20 Size=0x156c
        struct REFERRAL_RESPONSE_BUFFER m_ReferralResponseBuffer;// Offset=0x1e20 Size=0x1512
        struct CXContentDownloadMedia::REFRESH_LICENSE_RESPONSE_BUFFER m_RefreshLicenseResponseBuffer;// Offset=0x1e20 Size=0x806
        enum _unnamed_36844
        {
            e_MaxMediaFiles=4096,
            e_MinMediaFileSize=10485760,
            e_ContentFragmentFileSize=170459136
        };
        unsigned char __align1[3430];// Offset=0x2626 Size=0xd66
    };
    struct // Size=0x4 (Id=0)
    {
        unsigned long m_fHaveData:1;// Offset=0x338c Size=0x4 BitOffset=0x1f BitSize=0x1
    };
    private unsigned long m_dwNumLocations;// Offset=0x3390 Size=0x4
    private struct _XREFERRAL_LOCATION * m_paReferralLocations;// Offset=0x3394 Size=0x4
    private struct _XREFERRAL_LOCATION * m_pNextReferralLocation;// Offset=0x3398 Size=0x4
    private struct _XCONTENT_MOUNTED_PACKAGE * m_pMountedPackage;// Offset=0x339c Size=0x4
    private void * m_hMediaDirectory;// Offset=0x33a0 Size=0x4
    private int m_bCreatedFile;// Offset=0x33a4 Size=0x4
    private unsigned long m_dwNumMediaFiles;// Offset=0x33a8 Size=0x4
    private unsigned long m_dwFileChunkSizeBytes;// Offset=0x33ac Size=0x4
    private void * m_hMediaFile[4096];// Offset=0x33b0 Size=0x4000
    private void * m_hResumeFile;// Offset=0x73b0 Size=0x4
    private void * m_hAsfResumeFile;// Offset=0x73b4 Size=0x4
    private union _LARGE_INTEGER m_liMediaFileSize;// Offset=0x73b8 Size=0x8
    private union _LARGE_INTEGER m_liTotalBytesWritten;// Offset=0x73c0 Size=0x8
    private int m_bResumeTransfer;// Offset=0x73c8 Size=0x4
    private struct _FILETIME m_ftLastModified;// Offset=0x73cc Size=0x8
    private unsigned char __align2[4];// Offset=0x73d4 Size=0x4
    private union _LARGE_INTEGER m_liResumeOffset;// Offset=0x73d8 Size=0x8
    private union _LARGE_INTEGER m_liResumeFilesize;// Offset=0x73e0 Size=0x8
    private unsigned long m_dwContentType;// Offset=0x73e8 Size=0x4
    private unsigned char __align3[4];// Offset=0x73ec Size=0x4
    private unsigned long long m_qwUserId;// Offset=0x73f0 Size=0x8
    private unsigned char m_abContentId[20];// Offset=0x73f8 Size=0x14
    private struct _GUID m_MediaInstanceID;// Offset=0x740c Size=0x10
    private struct _XREFERRAL_LOCATION m_ReferralLocation;// Offset=0x741c Size=0x8
    private unsigned long m_dwTargetDirectoryLength;// Offset=0x7424 Size=0x4
    private char * m_pszTargetDirectoryPath;// Offset=0x7428 Size=0x4
    private char * m_pszFileName;// Offset=0x742c Size=0x4
    private unsigned long m_dwFlags;// Offset=0x7430 Size=0x4
    private class CXLiveSubTask * m_pSubTask;// Offset=0x7434 Size=0x4
    private struct _XCONTENT_HEADER * m_pContentHeader;// Offset=0x7438 Size=0x4
    private unsigned char m_abRecvBuffer[65536];// Offset=0x743c Size=0x10000
    private unsigned char __align4[4];// Offset=0x1743c Size=0x4
    private class CBitrateMonitor m_bitrateMonitor;// Offset=0x17440 Size=0x28
    private class CMediaStreamASFParser m_AsfParser;// Offset=0x17468 Size=0x88
    private unsigned long m_dwLastResumeSaveTime;// Offset=0x174f0 Size=0x4
    private unsigned long m_dwLastWireRemaining;// Offset=0x174f4 Size=0x4
    private int m_bWmvDownload;// Offset=0x174f8 Size=0x4
    private int m_bMinDownloaded;// Offset=0x174fc Size=0x4
    public void ~CXContentDownloadMedia();
    public class CXContentDownloadMedia & operator=(class CXContentDownloadMedia & );
    public void * __vecDelDtor(unsigned int );
};

enum CXContentDownloadMedia::_unnamed_3444
{
    e_MaxMediaFiles=4096,
    e_MinMediaFileSize=10485760,
    e_ContentFragmentFileSize=170459136
};

struct CXContentDownloadMedia::REFRESH_LICENSE_RESPONSE_BUFFER// Size=0x806 (Id=3445)
{
    struct _XCONTENT_REFRESH_LICENSE_RESPONSE Response;// Offset=0x0 Size=0x6
    unsigned char abContentHeaderBuffer[2048];// Offset=0x6 Size=0x800
};

struct _DIRECT_DEBIT_INFO// Size=0x1e (Id=3446)
{
    unsigned short wAccountHolderNameLength;// Offset=0x0 Size=0x2
    wchar_t * wszAccountHolderName;// Offset=0x2 Size=0x4
    unsigned short wAccountNumberLength;// Offset=0x6 Size=0x2
    wchar_t * wszAccountNumber;// Offset=0x8 Size=0x4
    unsigned short wBankCodeLength;// Offset=0xc Size=0x2
    wchar_t * wszBankCode;// Offset=0xe Size=0x4
    unsigned short wBranchCodeLength;// Offset=0x12 Size=0x2
    wchar_t * wszBranchCode;// Offset=0x14 Size=0x4
    unsigned short wCheckDigitsLength;// Offset=0x18 Size=0x2
    wchar_t * wszCheckDigits;// Offset=0x1a Size=0x4
};

class CLittleEndianBuffer : public CBaseEndianBuffer// Size=0x14 (Id=3447)
{
    public void CLittleEndianBuffer();
    public void ~CLittleEndianBuffer();
    public void Bind(unsigned char * ,unsigned long ,unsigned long );
    public void * __vecDelDtor(unsigned int );
};

class CXuiControlImpl : public CXuiElementImplBase, public CXuiControl// Size=0x8 (Id=3448)
{
    public void CXuiControlImpl(class CXuiControlImpl & );
    public void CXuiControlImpl();
    public class CXuiControlImpl & operator=(class CXuiControlImpl & );
};

class CXuiControlImpl : public CXuiElementImplBase, public CXuiControl// Size=0x8 (Id=3449)
{
    public void CXuiControlImpl(class CXuiControlImpl & );
    public void CXuiControlImpl();
    public class CXuiControlImpl & operator=(class CXuiControlImpl & );
};

struct XONLINE_FRIEND_INTERNAL : public _XONLINE_FRIEND// Size=0xdc (Id=3450)
{
    unsigned char __align0[196];// Offset=0x0 Size=0xc4
    unsigned char bReserved;// Offset=0xc4 Size=0x1
    unsigned char __align1[3];// Offset=0xc5 Size=0x3
    unsigned long dwReserved[4];// Offset=0xc8 Size=0x10
    unsigned long dwChangeVer;// Offset=0xd8 Size=0x4
};

struct _PASSPORT_CREATE_REQUEST// Size=0x1f (Id=3451)
{
    unsigned short wPassportMemberNameLength;// Offset=0x0 Size=0x2
    char * szPassportMemberName;// Offset=0x2 Size=0x4
    unsigned short wSecretQuestionLength;// Offset=0x6 Size=0x2
    wchar_t * szSecretQuestion;// Offset=0x8 Size=0x4
    unsigned short wEncryptedPasswordLength;// Offset=0xc Size=0x2
    unsigned char * pbEncryptedPassword;// Offset=0xe Size=0x4
    unsigned char bCountryId;// Offset=0x12 Size=0x1
    struct _FILETIME ftBirthdate;// Offset=0x13 Size=0x8
    struct _PASSPORT_SESSION_TOKEN * pSessionToken;// Offset=0x1b Size=0x4
};

class CXuiProgressBar : public CXuiControl// Size=0x4 (Id=3452)
{
    public void CXuiProgressBar(struct _XUIOBJ * );
    public void CXuiProgressBar();
    public HRESULT SetRange(int ,int );
    public HRESULT GetRange(int * ,int * );
    public HRESULT SetValue(int );
    public HRESULT GetValue(int * );
    public void Attach(struct _XUIOBJ * );
};

class CXuiHtmlControlImpl : public CXuiElementImplBase, public CXuiHtmlControl// Size=0x8 (Id=3453)
{
    public void CXuiHtmlControlImpl(class CXuiHtmlControlImpl & );
    public void CXuiHtmlControlImpl();
    public class CXuiHtmlControlImpl & operator=(class CXuiHtmlControlImpl & );
};

class CXuiHtmlControlImpl : public CXuiElementImplBase, public CXuiHtmlControl// Size=0x8 (Id=3454)
{
    public void CXuiHtmlControlImpl(class CXuiHtmlControlImpl & );
    public void CXuiHtmlControlImpl();
    public class CXuiHtmlControlImpl & operator=(class CXuiHtmlControlImpl & );
};

struct XUIMessageGetHtmlReplacementImage// Size=0x10 (Id=3455)
{
    wchar_t * szSrcPath;// Offset=0x0 Size=0x4
    wchar_t * szFullSrcPath;// Offset=0x4 Size=0x4
    wchar_t * szReplacementPath;// Offset=0x8 Size=0x4
    int bForceReplace;// Offset=0xc Size=0x4
};

class CXuiSceneCache// Size=0x30 (Id=3456)
{
    public void CXuiSceneCache();
    public HRESULT Init();
    public void Uninit();
    public void RemoveAll();
    public HRESULT CacheScene(wchar_t * ,int ,struct _XUIOBJ ** );
    public HRESULT CacheSceneAsync(struct XUICacheSceneAsync * ,unsigned long ,struct _XOVERLAPPED * ,unsigned long );
    public HRESULT CacheNavButtonTargets(struct _XUIOBJ * ,int );
    public struct _XUIOBJ * GetSceneFromCache(wchar_t * );
    public int ReleaseScene(struct _XUIOBJ * );
    public int RemoveScene(struct _XUIOBJ * );
    public int HandleNavigation(struct _XUIOBJ * ,struct XUINotify * );
    public int IsSceneInCache(wchar_t * );
    public int IsSceneInCache(struct _XUIOBJ * );
    public HRESULT OnSkinChanged();
    public int IsDescendantOfCachedScene(struct _XUIOBJ * );
    union // Size=0x14 (Id=0)
    {
        struct SceneCacheEntry// Size=0x14 (Id=36984)
        {
            void * operator new(unsigned int ,void * );
            void * operator new(unsigned int );
            void * operator new[](unsigned int );
            void operator delete(void * );
            void operator delete[](void * );
            wchar_t * m_szFileName;// Offset=0x0 Size=0x4
            struct _XUIOBJ * m_hObj;// Offset=0x4 Size=0x4
            int m_bInUse;// Offset=0x8 Size=0x4
            struct CXuiSceneCache::SceneCacheEntry * m_pNext;// Offset=0xc Size=0x4
            struct CXuiSceneCache::SceneCacheEntry * m_pPrev;// Offset=0x10 Size=0x4
            void SceneCacheEntry();
            void ~SceneCacheEntry();
            HRESULT SetFileName(wchar_t * );
            void DetachObject();
            void * __vecDelDtor(unsigned int );
        };
        unsigned long CacheSceneAsyncThreadProc(void * );
        struct _XUICLASS * m_hClassControl;// Offset=0x0 Size=0x4
        struct _XUICLASS * m_hClassNavButton;// Offset=0x4 Size=0x4
        struct _XUICLASS * m_hClassScene;// Offset=0x8 Size=0x4
        struct _RTL_CRITICAL_SECTION m_CS;// Offset=0xc Size=0x1c
    };
    protected struct CXuiSceneCache::SceneCacheEntry * m_pHead;// Offset=0x28 Size=0x4
    protected struct CXuiSceneCache::SceneCacheEntry * m_pTail;// Offset=0x2c Size=0x4
    protected struct CXuiSceneCache::SceneCacheEntry * FindSceneInCache(struct _XUIOBJ * );
    protected struct _XUIOBJ * FindSceneObjInCache(wchar_t * );
};

struct CXuiSceneCache::SceneCacheEntry// Size=0x14 (Id=3457)
{
    void * operator new(unsigned int ,void * );
    void * operator new(unsigned int );
    void * operator new[](unsigned int );
    void operator delete(void * );
    void operator delete[](void * );
    wchar_t * m_szFileName;// Offset=0x0 Size=0x4
    struct _XUIOBJ * m_hObj;// Offset=0x4 Size=0x4
    int m_bInUse;// Offset=0x8 Size=0x4
    struct CXuiSceneCache::SceneCacheEntry * m_pNext;// Offset=0xc Size=0x4
    struct CXuiSceneCache::SceneCacheEntry * m_pPrev;// Offset=0x10 Size=0x4
    void SceneCacheEntry();
    void ~SceneCacheEntry();
    HRESULT SetFileName(wchar_t * );
    void DetachObject();
    void * __vecDelDtor(unsigned int );
};

enum _unnamed_3458
{
    XHVMISC_TAG=1619664898,
    PACKET_CONTEXT_TAG=1636433923,
    PACKET_QUEUE_TAG=1636466692,
    PACKET_PROCESSOR_TAG=1636466693,
    PACKET_BUFFER_TAG=1636466694,
    CODEC_TYPE_TAG=1686798343,
    CODEC_PROCESSOR_TAG=1686765576,
    MPPACKET_TAG=1636433929,
    PROCMODE_TAG=1636466698,
    LOCALTALKER_TAG=1636466699,
    XHVENGINE_TAG=1636466700,
    MICPROXY_TAG=1636466701,
    LOOPBACK_EXTENSION_TAG=1636466702,
    FILEOUT_EXTENSION_TAG=1636466703,
    REMOTETALKER_TAG=1636466704,
    VOICECHAT_EXTENSION_TAG=1636466705,
    XHVBATCHALLOCATOR_TAG=1636466706,
    JITTERBUF_TAG=1636466707,
    XSVENGINE_TAG=1636466708,
    XSVRTCACHE_TAG=1636466709,
    XSVSESSION_TAG=1636466710,
    XSVLTCACHE_TAG=1636466711,
    NCI_CODEC_TAG=1686765592,
    RTV_CODEC_TAG=1686765593
};

enum _unnamed_3459
{
    XAUDIODRIVERPERF_SASE_ENCODER=0,
    XAUDIODRIVERPERF_SASE_DECODER=1
};

enum XHVACTIVATIONOP
{
    XHV_NOOP=0,
    XHV_DESTROY_OP=3
};

enum PACKETSTATE
{
    PACKETSTATE_ONTIME=0,
    PACKETSTATE_LATE=1,
    PACKETSTATE_OUTOFSYNC=2,
    PACKETSTATE_MAX=3
};

enum VOICECHATSTATUS
{
    VOICECHATSTATUS_INVITE_SENT=0,
    VOICECHATSTATUS_INVITE_SENT_ACTIVE=1,
    VOICECHATSTATUS_JOINING=2,
    VOICECHATSTATUS_JOINING_ACTIVE=3,
    VOICECHATSTATUS_NONE_ACTIVE=4,
    VOICECHATSTATUS_LOCAL_ACTIVE=5,
    VOICECHATSTATUS_REMOTE_ACTIVE=6,
    VOICECHATSTATUS_BOTH_ACTIVE=7,
    VOICECHATSTATUS_TERMINATED=8
};

enum PARTYCHATSTATUS
{
    PARTYCHATSTATUS_ACTIVE=0,
    PARTYCHATSTATUS_AWAY=1
};

enum UVCHANNELTYPE
{
    UVCHANNELTYPE_UNUSED=0,
    UVCHANNELTYPE_VOICECHAT=1,
    UVCHANNELTYPE_VOICEMAIL=2,
    UVCHANNELTYPE_PARTYCHAT=3,
    UVCHANNELTYPE_GAME=4,
    UVCHANNELTYPE_COUNT=5
};

enum PROCMODE_ID
{
    INVALID_MODE=0,
    LOOPBACK_MODE=1,
    VOICECHAT_MODE=2,
    PROCMODE_ID_MAX=3,
    PROCMODE_ID_FORCE_DWORD=-1
};

enum XHV_XAUDIO_SPEED
{
    XHV_XAUDIO_SPEED_SLOW=0,
    XHV_XAUDIO_SPEED_NORMAL=1,
    XHV_XAUDIO_SPEED_FAST=2
};

struct XAUDIOSOURCEFXPACKETCALLBACK// Size=0xc (Id=3467)
{
    void * pEffectContext;// Offset=0x0 Size=0x4
    void * pPacketContext;// Offset=0x4 Size=0x4
    HRESULT Status;// Offset=0x8 Size=0x4
};

struct XAUDIOSOURCEFXINIT// Size=0x50 (Id=3468)
{
    struct XAUDIOFXINIT EffectHeader;// Offset=0x0 Size=0x8
    struct XAUDIOSOURCEFORMAT Format;// Offset=0x8 Size=0x38
    float MaxPitchShift;// Offset=0x40 Size=0x4
    unsigned char MaxPacketCount;// Offset=0x44 Size=0x1
    unsigned char Flags;// Offset=0x45 Size=0x1
    unsigned char __align0[2];// Offset=0x46 Size=0x2
    void  ( * pfnPacketCompletionCallback)(struct XAUDIOSOURCEFXPACKETCALLBACK * );// Offset=0x48 Size=0x4
    void  ( * pfnPacketLoopCallback)(struct XAUDIOSOURCEFXPACKETCALLBACK * );// Offset=0x4c Size=0x4
};

struct XAUDIODRVPERFCOUNTER// Size=0x30 (Id=3469)
{
    unsigned long long MinTicks;// Offset=0x0 Size=0x8
    unsigned long long AvgTicks;// Offset=0x8 Size=0x8
    unsigned long long MaxTicks;// Offset=0x10 Size=0x8
    unsigned long long QueryTicks;// Offset=0x18 Size=0x8
    unsigned long long TicksPerSecond;// Offset=0x20 Size=0x8
    unsigned long long FrameCount;// Offset=0x28 Size=0x8
};

struct XAUDIOVOICEPACKETCALLBACK// Size=0xc (Id=3470)
{
    void * pVoiceContext;// Offset=0x0 Size=0x4
    void * pPacketContext;// Offset=0x4 Size=0x4
    HRESULT Status;// Offset=0x8 Size=0x4
};

struct IXAudioRefCountVtbl// Size=0x8 (Id=3471)
{
    unsigned long  ( * AddRef)(struct IXAudioRefCount * );// Offset=0x0 Size=0x4
    unsigned long  ( * Release)(struct IXAudioRefCount * );// Offset=0x4 Size=0x4
};

struct XMALOOPREGION// Size=0xc (Id=3472)
{
    unsigned long LoopStart;// Offset=0x0 Size=0x4
    unsigned long LoopEnd;// Offset=0x4 Size=0x4
    unsigned char LoopSubframeEnd;// Offset=0x8 Size=0x1
    unsigned char LoopSubframeSkip;// Offset=0x9 Size=0x1
};

struct XHV_CODEC_HEADER// Size=0x2 (Id=3473)
{
    struct // Size=0x2 (Id=0)
    {
        unsigned short bMsgNo:4;// Offset=0x0 Size=0x2 BitOffset=0xc BitSize=0x4
        unsigned short wSeqNo:11;// Offset=0x0 Size=0x2 BitOffset=0x1 BitSize=0xb
        unsigned short bFriendsOnly:1;// Offset=0x0 Size=0x2 BitOffset=0x0 BitSize=0x1
    };
};

struct XAUDIOVOICEOUTPUT// Size=0x8 (Id=3474)
{
    unsigned char EntryCount;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    struct XAUDIOVOICEOUTPUTENTRY * paEntries;// Offset=0x4 Size=0x4
};

struct XAUDIOFXTABLEENTRY// Size=0xc (Id=3475)
{
    unsigned char EffectId;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    HRESULT  ( * pfnQueryEffectSize)(struct XAUDIOFXINIT * ,unsigned long * );// Offset=0x4 Size=0x4
    HRESULT  ( * pfnCreateEffect)(struct XAUDIOFXINIT * ,struct IXAudioBatchAllocator * ,struct IXAudioEffect ** );// Offset=0x8 Size=0x4
};

struct PACKET_PROCESSOR// Size=0x14 (Id=3476)
{
    struct PACKET_QUEUE FreePacketContexts;// Offset=0x0 Size=0x8
    struct PACKET_QUEUE InFlight;// Offset=0x8 Size=0x8
    struct PACKET_CONTEXT * PacketContextAllocation;// Offset=0x10 Size=0x4
};

struct XAUDIOVOICEFXCHAIN// Size=0x8 (Id=3477)
{
    unsigned char EffectCount;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    struct XAUDIOFXINIT ** papEffects;// Offset=0x4 Size=0x4
};

union XAUDIOFXPARAM// Size=0x8 (Id=3478)
{
    float Value;// Offset=0x0 Size=0x4
    unsigned long Flags;// Offset=0x0 Size=0x4
    struct XAUDIOFXDATAPARAM Data;// Offset=0x0 Size=0x8
};

struct IXHVEngineVtbl// Size=0x58 (Id=3479)
{
    unsigned long  ( * AddRef)(struct IXHVEngine * );// Offset=0x0 Size=0x4
    unsigned long  ( * Release)(struct IXHVEngine * );// Offset=0x4 Size=0x4
    HRESULT  ( * Lock)(struct IXHVEngine * ,unsigned long );// Offset=0x8 Size=0x4
    HRESULT  ( * StartLocalProcessingModes)(struct IXHVEngine * ,unsigned long ,const void ** ,unsigned long );// Offset=0xc Size=0x4
    HRESULT  ( * StopLocalProcessingModes)(struct IXHVEngine * ,unsigned long ,const void ** ,unsigned long );// Offset=0x10 Size=0x4
    HRESULT  ( * StartRemoteProcessingModes)(struct IXHVEngine * ,unsigned long long ,const void ** ,unsigned long );// Offset=0x14 Size=0x4
    HRESULT  ( * StopRemoteProcessingModes)(struct IXHVEngine * ,unsigned long long ,const void ** ,unsigned long );// Offset=0x18 Size=0x4
    HRESULT  ( * SetMaxDecodePackets)(struct IXHVEngine * ,unsigned long );// Offset=0x1c Size=0x4
    HRESULT  ( * RegisterLocalTalker)(struct IXHVEngine * ,unsigned long );// Offset=0x20 Size=0x4
    HRESULT  ( * UnregisterLocalTalker)(struct IXHVEngine * ,unsigned long );// Offset=0x24 Size=0x4
    HRESULT  ( * RegisterRemoteTalker)(struct IXHVEngine * ,unsigned long long ,struct XAUDIOVOICEFXCHAIN * ,struct XAUDIOVOICEFXCHAIN * ,void * );// Offset=0x28 Size=0x4
    HRESULT  ( * UnregisterRemoteTalker)(struct IXHVEngine * ,unsigned long long );// Offset=0x2c Size=0x4
    HRESULT  ( * GetRemoteTalkers)(struct IXHVEngine * ,unsigned long * ,unsigned long long * );// Offset=0x30 Size=0x4
    int  ( * IsHeadsetPresent)(struct IXHVEngine * ,unsigned long );// Offset=0x34 Size=0x4
    int  ( * IsLocalTalking)(struct IXHVEngine * ,unsigned long );// Offset=0x38 Size=0x4
    int  ( * IsRemoteTalking)(struct IXHVEngine * ,unsigned long long );// Offset=0x3c Size=0x4
    HRESULT  ( * SetRemoteTalkerOutputVoice)(struct IXHVEngine * ,unsigned long long ,void * );// Offset=0x40 Size=0x4
    HRESULT  ( * SetRemoteTalkerEffectParam)(struct IXHVEngine * ,unsigned long long ,int ,unsigned char ,unsigned char ,unsigned char ,union XAUDIOFXPARAM * );// Offset=0x44 Size=0x4
    unsigned long  ( * GetDataReadyFlags)(struct IXHVEngine * );// Offset=0x48 Size=0x4
    HRESULT  ( * GetLocalChatData)(struct IXHVEngine * ,unsigned long ,unsigned char * ,unsigned long * ,unsigned long * );// Offset=0x4c Size=0x4
    HRESULT  ( * SetPlaybackPriority)(struct IXHVEngine * ,unsigned long long ,unsigned long ,unsigned long );// Offset=0x50 Size=0x4
    HRESULT  ( * SubmitIncomingChatData)(struct IXHVEngine * ,unsigned long long ,unsigned char * ,unsigned long * );// Offset=0x54 Size=0x4
};

struct PACKET_QUEUE// Size=0x8 (Id=3480)
{
    struct PACKET_CONTEXT * Head;// Offset=0x0 Size=0x4
    struct PACKET_CONTEXT * Tail;// Offset=0x4 Size=0x4
};

struct IProcModeVtbl// Size=0x28 (Id=3481)
{
    HRESULT  ( * Initialize)(struct IProcMode * ,struct XHVENGINE * ,struct CODEC_PROCESSOR * ,unsigned long );// Offset=0x0 Size=0x4
    void  ( * Destroy)(struct IProcMode * );// Offset=0x4 Size=0x4
    HRESULT  ( * Start)(struct IProcMode * );// Offset=0x8 Size=0x4
    HRESULT  ( * Stop)(struct IProcMode * );// Offset=0xc Size=0x4
    HRESULT  ( * Process)(struct IProcMode * );// Offset=0x10 Size=0x4
    void  ( * GetCodecInfo)(struct IProcMode * ,struct PROCMODE_CODEC_INFO * );// Offset=0x14 Size=0x4
    HRESULT  ( * )(struct XHVENGINE * ,void * ,unsigned char ,struct IProcMode ** ) ( * GetCreationWrapper)(struct IProcMode * );// Offset=0x18 Size=0x4
    HRESULT  ( * GetNotificationData)(struct IProcMode * ,unsigned char * ,unsigned long * ,unsigned long * );// Offset=0x1c Size=0x4
    HRESULT  ( * SetOutputVoice)(struct IProcMode * ,void * );// Offset=0x20 Size=0x4
    int  ( * IsDataInCodec)(struct IProcMode * );// Offset=0x24 Size=0x4
};

struct waveformat_tag// Size=0xe (Id=3482)
{
    unsigned short wFormatTag;// Offset=0x0 Size=0x2
    unsigned short nChannels;// Offset=0x2 Size=0x2
    unsigned long nSamplesPerSec;// Offset=0x4 Size=0x4
    unsigned long nAvgBytesPerSec;// Offset=0x8 Size=0x4
    unsigned short nBlockAlign;// Offset=0xc Size=0x2
};

struct VOICECHATINFO// Size=0x28 (Id=3483)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned char __align0[4];// Offset=0x4 Size=0x4
    unsigned long long Xuid;// Offset=0x8 Size=0x8
    char szRemoteGamertag[16];// Offset=0x10 Size=0x10
    enum VOICECHATSTATUS eStatus;// Offset=0x20 Size=0x4
};

struct XAUDIOCHANNELMAP// Size=0x8 (Id=3484)
{
    unsigned char EntryCount;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    struct XAUDIOCHANNELMAPENTRY * paEntries;// Offset=0x4 Size=0x4
};

struct XAUDIOENGINEINIT// Size=0xc (Id=3485)
{
    unsigned char MaxVoiceChannelCount;// Offset=0x0 Size=0x1
    unsigned char SubmixStageCount;// Offset=0x1 Size=0x1
    unsigned char ThreadUsage;// Offset=0x2 Size=0x1
    unsigned char __align0[1];// Offset=0x3 Size=0x1
    struct XAUDIOFXTABLE * pEffectTable;// Offset=0x4 Size=0x4
    struct XAUDIOMASTERINGVOICEINIT * pMasteringVoiceInit;// Offset=0x8 Size=0x4
};

struct XMA2STREAMFORMAT// Size=0x4 (Id=3486)
{
    unsigned char Channels;// Offset=0x0 Size=0x1
    unsigned char RESERVED;// Offset=0x1 Size=0x1
    unsigned short ChannelMask;// Offset=0x2 Size=0x2
};

struct XAUDIOMASTERINGVOICEINIT// Size=0xc (Id=3487)
{
    struct XAUDIOVOICEFXCHAIN * pEffectChain;// Offset=0x0 Size=0x4
    void  ( * pfnProcessCallback)(struct XAUDIOVOICEPROCESSCALLBACK * );// Offset=0x4 Size=0x4
    void * pContext;// Offset=0x8 Size=0x4
};

struct XMASTREAMFORMAT// Size=0x14 (Id=3488)
{
    unsigned long PsuedoBytesPerSec;// Offset=0x0 Size=0x4
    unsigned long SampleRate;// Offset=0x4 Size=0x4
    unsigned long LoopStart;// Offset=0x8 Size=0x4
    unsigned long LoopEnd;// Offset=0xc Size=0x4
    unsigned char SubframeData;// Offset=0x10 Size=0x1
    unsigned char Channels;// Offset=0x11 Size=0x1
    unsigned short ChannelMask;// Offset=0x12 Size=0x2
};

struct IProcMode// Size=0x4 (Id=3489)
{
    struct IProcModeVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct XAUDIOFRAMEBUFINIT// Size=0x14 (Id=3490)
{
    unsigned char Type;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    union XAUDIOFORMAT MaxFormat;// Offset=0x4 Size=0x8
    float * pSampleBuffer;// Offset=0xc Size=0x4
    void * pContext;// Offset=0x10 Size=0x4
};

struct UVBASE_PARTYVOICERECEIVEDPARAM// Size=0x10 (Id=3491)
{
    unsigned long long Xuid;// Offset=0x0 Size=0x8
    unsigned char * pbData;// Offset=0x8 Size=0x4
    unsigned long cbData;// Offset=0xc Size=0x4
};

struct UVBASE_SWITCHTOVOICECHANNELPARAM// Size=0x28 (Id=3492)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned char __align0[4];// Offset=0x4 Size=0x4
    struct UVCHANNELID ChannelID;// Offset=0x8 Size=0x18
    unsigned long dwFlags;// Offset=0x20 Size=0x4
};

struct UVBASE_PARTYGETTALKINGMASKPARAM// Size=0x4 (Id=3493)
{
    unsigned long * pdwTalkingMaskLocal;// Offset=0x0 Size=0x4
};

struct IXAudioEffect// Size=0x4 (Id=3494)
{
    struct IXAudioEffectVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct XAUDIOSOURCEFORMAT// Size=0x38 (Id=3495)
{
    unsigned char SampleType;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    union // Size=0x38 (Id=0)
    {
        unsigned char NumStreams;// Offset=0x4 Size=0x1
        unsigned char __align1[3];// Offset=0x5 Size=0x3
        struct XAUDIOXMAFORMAT Stream[6];// Offset=0x8 Size=0x30
        unsigned char ChannelCount;// Offset=0x4 Size=0x1
        unsigned char __align2[3];// Offset=0x5 Size=0x3
        unsigned long SampleRate;// Offset=0x8 Size=0x4
    };
};

struct RTV_CODEC// Size=0x0 (Id=3496)
{
};

struct XAUDIOSOURCEFXFORMATPARAM// Size=0x3c (Id=3497)
{
    struct XAUDIOSOURCEFORMAT Format;// Offset=0x0 Size=0x38
    unsigned char Flags;// Offset=0x38 Size=0x1
};

struct VOICECHAT_EXTENSION// Size=0x4c (Id=3498)
{
    union // Size=0x20 (Id=0)
    {
        struct PROCMODE ProcMode;// Offset=0x0 Size=0x20
        struct IProcModeVtbl * lpVtbl;// Offset=0x0 Size=0x4
        union // Size=0x4 (Id=0)
        {
            struct LOCALTALKER * LocalTalker;// Offset=0x4 Size=0x4
            struct REMOTETALKER * RemoteTalker;// Offset=0x4 Size=0x4
        };
        struct CODEC_PROCESSOR * Codec;// Offset=0x8 Size=0x4
        unsigned long QueueIndex;// Offset=0xc Size=0x4
        struct PACKET_BUFFER * Packets;// Offset=0x10 Size=0x4
        unsigned long NumPackets;// Offset=0x14 Size=0x4
        int Running;// Offset=0x18 Size=0x4
        enum PROCMODE_ID ModeID;// Offset=0x1c Size=0x4
    };
    struct XHVENGINE * XHVEngine;// Offset=0x20 Size=0x4
    int RemoteMode;// Offset=0x24 Size=0x4
    struct PACKET_CONTEXT * Contexts;// Offset=0x28 Size=0x4
    struct PACKET_QUEUE InCodec;// Offset=0x2c Size=0x8
    union // Size=0x41 (Id=0)
    {
        struct PACKET_QUEUE InNotification;// Offset=0x34 Size=0x8
        unsigned char LastTalkspurt;// Offset=0x3c Size=0x1
        unsigned char __align0[1];// Offset=0x3d Size=0x1
        unsigned short SequenceNumber;// Offset=0x3e Size=0x2
        unsigned char Starved;// Offset=0x40 Size=0x1
        struct PACKET_QUEUE InVoice;// Offset=0x34 Size=0x8
        void * SourceVoice;// Offset=0x3c Size=0x4
        int Discontinuity;// Offset=0x40 Size=0x4
    };
    enum XHV_XAUDIO_SPEED PlaySpeed;// Offset=0x44 Size=0x4
    struct JITTERBUF * JitterBuf;// Offset=0x48 Size=0x4
};

struct MICPROXY// Size=0xa0 (Id=3499)
{
    struct XHVENGINE * XHVEngine;// Offset=0x0 Size=0x4
    struct LOCALTALKER * LocalTalker;// Offset=0x4 Size=0x4
    unsigned char * PCMBuffer;// Offset=0x8 Size=0x4
    unsigned long NumPackets;// Offset=0xc Size=0x4
    unsigned long LastPacketTime;// Offset=0x10 Size=0x4
    long Delta;// Offset=0x14 Size=0x4
    struct t_g726state g726State;// Offset=0x18 Size=0x36
    unsigned char __align0[2];// Offset=0x4e Size=0x2
    struct CODEC_PROCESSOR * Codecs[2];// Offset=0x50 Size=0x8
    struct PACKET_CONTEXT * Contexts[3];// Offset=0x58 Size=0xc
    struct PACKET_QUEUE Queues[3];// Offset=0x64 Size=0x18
    struct XMEDIAPACKET * CodecPackets[3];// Offset=0x7c Size=0xc
    unsigned long NumCodecs;// Offset=0x88 Size=0x4
    unsigned char Talkspurt;// Offset=0x8c Size=0x1
    unsigned char __align1[3];// Offset=0x8d Size=0x3
    int VoiceDetected;// Offset=0x90 Size=0x4
    unsigned long Sensitivity;// Offset=0x94 Size=0x4
    long Hangtime;// Offset=0x98 Size=0x4
    unsigned long Talktime;// Offset=0x9c Size=0x4
};

struct XAUDIOFXMGRINIT// Size=0x4 (Id=3500)
{
    struct XAUDIOFXTABLE * pEffectTable;// Offset=0x0 Size=0x4
};

struct XAUDIOVOICEPROCESSCALLBACK// Size=0x4 (Id=3501)
{
    void * pVoiceContext;// Offset=0x0 Size=0x4
};

struct XAUDIOMASTERINGVOICEINIT// Size=0xc (Id=3502)
{
    struct XAUDIOVOICEFXCHAIN * pEffectChain;// Offset=0x0 Size=0x4
    void  ( * pfnProcessCallback)(struct XAUDIOVOICEPROCESSCALLBACK * );// Offset=0x4 Size=0x4
    void * pContext;// Offset=0x8 Size=0x4
};

struct XAUDIOCHANNELVOLUME// Size=0x8 (Id=3503)
{
    unsigned char EntryCount;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    struct XAUDIOCHANNELVOLUMEENTRY * paEntries;// Offset=0x4 Size=0x4
};

struct XAUDIORENDERFXCALLBACK// Size=0x4 (Id=3504)
{
    void * pEffectContext;// Offset=0x0 Size=0x4
};

struct XAUDIOFXUNREGISTER// Size=0x8 (Id=3505)
{
    unsigned char EffectCount;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    unsigned char * paEffectIds;// Offset=0x4 Size=0x4
};

struct XAUDIOCHANNELVOLUMEENTRY// Size=0x8 (Id=3506)
{
    unsigned char EntryIndex;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    float Volume;// Offset=0x4 Size=0x4
};

struct XAUDIOVOICEOUTPUTVOLUME// Size=0x8 (Id=3507)
{
    unsigned char EntryCount;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    struct XAUDIOVOICEOUTPUTVOLUMEENTRY * paEntries;// Offset=0x4 Size=0x4
};

struct UVBASE_PARTYGETVOICEDATAPARAM// Size=0x14 (Id=3508)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    int * pfHasHeadset;// Offset=0x4 Size=0x4
    unsigned char * pBuffer;// Offset=0x8 Size=0x4
    unsigned short wBufferSize;// Offset=0xc Size=0x2
    unsigned char __align0[2];// Offset=0xe Size=0x2
    unsigned short * pwActualDataSize;// Offset=0x10 Size=0x4
};

struct PACKET_CONTEXT// Size=0x8 (Id=3509)
{
    struct XMEDIAPACKET * Packet;// Offset=0x0 Size=0x4
    struct PACKET_CONTEXT * Next;// Offset=0x4 Size=0x4
};

struct XAUDIOSOURCEFORMAT// Size=0x38 (Id=3510)
{
    unsigned char SampleType;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    union // Size=0x38 (Id=0)
    {
        unsigned char NumStreams;// Offset=0x4 Size=0x1
        unsigned char __align1[3];// Offset=0x5 Size=0x3
        struct XAUDIOXMAFORMAT Stream[6];// Offset=0x8 Size=0x30
        unsigned char ChannelCount;// Offset=0x4 Size=0x1
        unsigned char __align2[3];// Offset=0x5 Size=0x3
        unsigned long SampleRate;// Offset=0x8 Size=0x4
    };
};

struct XAUDIORENDERFXINIT// Size=0xc (Id=3511)
{
    struct XAUDIOFXINIT EffectHeader;// Offset=0x0 Size=0x8
    void  ( * pfnRenderCallback)(struct XAUDIORENDERFXCALLBACK * );// Offset=0x8 Size=0x4
};

struct IXAudioBatchAllocatorVtbl// Size=0x18 (Id=3512)
{
    unsigned long  ( * AddRef)(struct IXAudioBatchAllocator * );// Offset=0x0 Size=0x4
    unsigned long  ( * Release)(struct IXAudioBatchAllocator * );// Offset=0x4 Size=0x4
    void  ( * GrowHeap)(struct IXAudioBatchAllocator * ,unsigned long );// Offset=0x8 Size=0x4
    HRESULT  ( * CreateHeap)(struct IXAudioBatchAllocator * ,unsigned long );// Offset=0xc Size=0x4
    unsigned long  ( * GetFreeHeapSize)(struct IXAudioBatchAllocator * );// Offset=0x10 Size=0x4
    void *  ( * Alloc)(struct IXAudioBatchAllocator * ,unsigned long );// Offset=0x14 Size=0x4
};

struct tWAVEFORMATEX// Size=0x12 (Id=3513)
{
    unsigned short wFormatTag;// Offset=0x0 Size=0x2
    unsigned short nChannels;// Offset=0x2 Size=0x2
    unsigned long nSamplesPerSec;// Offset=0x4 Size=0x4
    unsigned long nAvgBytesPerSec;// Offset=0x8 Size=0x4
    unsigned short nBlockAlign;// Offset=0xc Size=0x2
    unsigned short wBitsPerSample;// Offset=0xe Size=0x2
    unsigned short cbSize;// Offset=0x10 Size=0x2
};

struct XSVRTCACHE// Size=0x0 (Id=3514)
{
};

struct IXHVExternalCodecVtbl// Size=0x10 (Id=3515)
{
    HRESULT  ( * Record)(struct IXHVExternalCodec * ,void * ,unsigned long * );// Offset=0x0 Size=0x4
    HRESULT  ( * Flush)(struct IXHVExternalCodec * );// Offset=0x4 Size=0x4
    HRESULT  ( * Playback)(struct IXHVExternalCodec * ,struct XAUDIOPACKET * ,int * ,unsigned char * ,unsigned long * );// Offset=0x8 Size=0x4
    HRESULT  ( * PlaybackDone)(struct IXHVExternalCodec * ,void * );// Offset=0xc Size=0x4
};

struct XAUDIOCHANNELVOLUME// Size=0x8 (Id=3516)
{
    unsigned char EntryCount;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    struct XAUDIOCHANNELVOLUMEENTRY * paEntries;// Offset=0x4 Size=0x4
};

struct CODEC_PROCESSOR// Size=0x1c (Id=3517)
{
    struct XHVENGINE * XHVEngine;// Offset=0x0 Size=0x4
    struct PACKET_PROCESSOR * InputPackets;// Offset=0x4 Size=0x4
    struct PACKET_PROCESSOR * Outputs[2];// Offset=0x8 Size=0x8
    int Running[2];// Offset=0x10 Size=0x8
    struct CODEC_TYPE * CodecType;// Offset=0x18 Size=0x4
};

struct UVBASE_CALLBACKUSERTOVOICECHATPARAM// Size=0x10 (Id=3518)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned char __align0[4];// Offset=0x4 Size=0x4
    unsigned long long Xuid;// Offset=0x8 Size=0x8
};

struct XAUDIOFXINFO// Size=0x4 (Id=3519)
{
    unsigned char DataFlow;// Offset=0x0 Size=0x1
    unsigned char __align0[1];// Offset=0x1 Size=0x1
    unsigned short TrailFrames;// Offset=0x2 Size=0x2
};

struct XAUDIOPACKET// Size=0x58 (Id=3520)
{
    void * pBuffer;// Offset=0x0 Size=0x4
    unsigned long BufferSize;// Offset=0x4 Size=0x4
    unsigned long LoopCount;// Offset=0x8 Size=0x4
    union // Size=0x14 (Id=0)
    {
        unsigned long LoopStart;// Offset=0xc Size=0x4
        unsigned long LoopLength;// Offset=0x10 Size=0x4
        struct XMALOOPREGION XMALoop[6];// Offset=0xc Size=0x48
    };
    void * pContext;// Offset=0x54 Size=0x4
};

struct XAUDIOSOURCEBUFFER// Size=0x20 (Id=3521)
{
    void * pBuffer;// Offset=0x0 Size=0x4
    unsigned long BufferSize;// Offset=0x4 Size=0x4
    unsigned long LoopCount;// Offset=0x8 Size=0x4
    unsigned long LoopBegin;// Offset=0xc Size=0x4
    unsigned long LoopEnd;// Offset=0x10 Size=0x4
    unsigned long PlayBegin;// Offset=0x14 Size=0x4
    unsigned long PlayEnd;// Offset=0x18 Size=0x4
    void * pContext;// Offset=0x1c Size=0x4
};

union XAUDIOPACKETPOSITION// Size=0x30 (Id=3522)
{
    unsigned long Position;// Offset=0x0 Size=0x4
    struct XMAPACKETPOSITION XMAPosition[6];// Offset=0x0 Size=0x30
};

struct IXAudioSourceEffectVtbl// Size=0x74 (Id=3523)
{
    unsigned long  ( * AddRef)(struct IXAudioSourceEffect * );// Offset=0x0 Size=0x4
    unsigned long  ( * Release)(struct IXAudioSourceEffect * );// Offset=0x4 Size=0x4
    HRESULT  ( * GetInfo)(struct IXAudioSourceEffect * ,struct XAUDIOFXINFO * );// Offset=0x8 Size=0x4
    HRESULT  ( * GetParam)(struct IXAudioSourceEffect * ,unsigned char ,unsigned char ,union XAUDIOFXPARAM * );// Offset=0xc Size=0x4
    HRESULT  ( * SetParam)(struct IXAudioSourceEffect * ,unsigned char ,unsigned char ,union XAUDIOFXPARAM * );// Offset=0x10 Size=0x4
    HRESULT  ( * GetContext)(struct IXAudioSourceEffect * ,void ** );// Offset=0x14 Size=0x4
    HRESULT  ( * Process)(struct IXAudioSourceEffect * ,struct IXAudioFrameBuffer * ,struct IXAudioFrameBuffer * );// Offset=0x18 Size=0x4
    HRESULT  ( * SubmitPacket)(struct IXAudioSourceEffect * ,struct XAUDIOPACKET * ,unsigned char );// Offset=0x1c Size=0x4
    HRESULT  ( * FlushPackets)(struct IXAudioSourceEffect * );// Offset=0x20 Size=0x4
    HRESULT  ( * SubmitSourceBuffer)(struct IXAudioSourceEffect * ,struct XAUDIOSOURCEBUFFER * ,unsigned char );// Offset=0x24 Size=0x4
    HRESULT  ( * FlushSourceBuffers)(struct IXAudioSourceEffect * );// Offset=0x28 Size=0x4
    HRESULT  ( * GetState)(struct IXAudioSourceEffect * ,unsigned char * );// Offset=0x2c Size=0x4
    HRESULT  ( * Start)(struct IXAudioSourceEffect * );// Offset=0x30 Size=0x4
    HRESULT  ( * Stop)(struct IXAudioSourceEffect * ,unsigned char );// Offset=0x34 Size=0x4
    HRESULT  ( * Discontinuity)(struct IXAudioSourceEffect * );// Offset=0x38 Size=0x4
    HRESULT  ( * GetPacketPosition)(struct IXAudioSourceEffect * ,union XAUDIOPACKETPOSITION * );// Offset=0x3c Size=0x4
    HRESULT  ( * SetPacketPosition)(struct IXAudioSourceEffect * ,union XAUDIOPACKETPOSITION * );// Offset=0x40 Size=0x4
    HRESULT  ( * GetPacketLoopCount)(struct IXAudioSourceEffect * ,unsigned long * );// Offset=0x44 Size=0x4
    HRESULT  ( * SetPacketLoopCount)(struct IXAudioSourceEffect * ,unsigned long );// Offset=0x48 Size=0x4
    HRESULT  ( * GetPacketContext)(struct IXAudioSourceEffect * ,void ** );// Offset=0x4c Size=0x4
    HRESULT  ( * GetStreamPosition)(struct IXAudioSourceEffect * ,unsigned long * );// Offset=0x50 Size=0x4
    HRESULT  ( * GetVolume)(struct IXAudioSourceEffect * ,float * );// Offset=0x54 Size=0x4
    HRESULT  ( * SetVolume)(struct IXAudioSourceEffect * ,float );// Offset=0x58 Size=0x4
    HRESULT  ( * GetPitch)(struct IXAudioSourceEffect * ,float * );// Offset=0x5c Size=0x4
    HRESULT  ( * SetPitch)(struct IXAudioSourceEffect * ,float );// Offset=0x60 Size=0x4
    HRESULT  ( * GetFrequencyScale)(struct IXAudioSourceEffect * ,float * );// Offset=0x64 Size=0x4
    HRESULT  ( * SetFrequencyScale)(struct IXAudioSourceEffect * ,float );// Offset=0x68 Size=0x4
    HRESULT  ( * GetFormat)(struct IXAudioSourceEffect * ,struct XAUDIOSOURCEFORMAT * ,unsigned char * );// Offset=0x6c Size=0x4
    HRESULT  ( * SetFormat)(struct IXAudioSourceEffect * ,struct XAUDIOSOURCEFORMAT * ,unsigned char );// Offset=0x70 Size=0x4
};

struct LOCALTALKER// Size=0x1d0 (Id=3524)
{
    unsigned long Port;// Offset=0x0 Size=0x4
    struct MICPROXY * MicProxy;// Offset=0x4 Size=0x4
    void * Headset;// Offset=0x8 Size=0x4
    struct IProcMode * ProcModes[2];// Offset=0xc Size=0x8
    struct IProcMode * ModeByIndex[3];// Offset=0x14 Size=0xc
    unsigned long NumProcModes;// Offset=0x20 Size=0x4
    struct CODEC_PROCESSOR * Codecs[2];// Offset=0x24 Size=0x8
    unsigned long NumCodecs;// Offset=0x2c Size=0x4
    struct PACKET_BUFFER * HeadphonePackets;// Offset=0x30 Size=0x4
    struct PACKET_QUEUE FreeHeadphonePackets;// Offset=0x34 Size=0x8
    struct PACKET_QUEUE FullHeadphonePackets;// Offset=0x3c Size=0x8
    unsigned long HeadphoneQueueLock;// Offset=0x44 Size=0x4
    long HeadphoneWriteLock;// Offset=0x48 Size=0x4
    struct PACKET_QUEUE InFlightPackets;// Offset=0x4c Size=0x8
    struct t_g726state g726State;// Offset=0x54 Size=0x36
    unsigned char __align0[2];// Offset=0x8a Size=0x2
    enum XMEDIAFORMAT RecordingFormat;// Offset=0x8c Size=0x4
    struct XHVENGINE * XHVEngine;// Offset=0x90 Size=0x4
    struct _XOVERLAPPED xoverlapped;// Offset=0x94 Size=0x1c
    struct _XUSER_READ_PROFILE_SETTING_RESULT * ProfileSettings;// Offset=0xb0 Size=0x4
    unsigned long SettingsBufferSize;// Offset=0xb4 Size=0x4
    float Volume;// Offset=0xb8 Size=0x4
    int SettingsPending;// Offset=0xbc Size=0x4
    int HeadsetPresent;// Offset=0xc0 Size=0x4
    unsigned long VoiceSettings;// Offset=0xc4 Size=0x4
    struct XHVRESAMPLER Resampler;// Offset=0xc8 Size=0x108
};

struct XHVBATCHALLOCATOR// Size=0x0 (Id=3525)
{
};

struct XAUDIOFXINIT// Size=0x8 (Id=3526)
{
    unsigned char EffectId;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    void * pContext;// Offset=0x4 Size=0x4
};

struct XAUDIOROUTERFXINIT// Size=0x10 (Id=3527)
{
    struct XAUDIOFXINIT EffectHeader;// Offset=0x0 Size=0x8
    unsigned char ChannelMapEntryCount;// Offset=0x8 Size=0x1
    unsigned char Mode;// Offset=0x9 Size=0x1
    unsigned char __align0[2];// Offset=0xa Size=0x2
    struct XAUDIOCHANNELMAP * pChannelMap;// Offset=0xc Size=0x4
};

union XAUDIOFXPARAM// Size=0x8 (Id=3528)
{
    float Value;// Offset=0x0 Size=0x4
    unsigned long Flags;// Offset=0x0 Size=0x4
    struct XAUDIOFXDATAPARAM Data;// Offset=0x0 Size=0x8
};

struct MPPACKET// Size=0x1c (Id=3529)
{
    union // Size=0x18 (Id=0)
    {
        struct XMEDIAPACKET XMediaPacket;// Offset=0x0 Size=0x18
        long Status;// Offset=0x0 Size=0x4
        unsigned long Offset;// Offset=0x4 Size=0x4
        unsigned char * Buffer;// Offset=0x8 Size=0x4
        unsigned long Length;// Offset=0xc Size=0x4
        unsigned long Resrvd;// Offset=0x10 Size=0x4
        enum XMEDIAFORMAT Format;// Offset=0x14 Size=0x4
    };
    unsigned long NumCodecsPending;// Offset=0x18 Size=0x4
};

struct XAUDIOVOICEOUTPUTENTRY// Size=0x8 (Id=3530)
{
    struct IXAudioVoice * pDestVoice;// Offset=0x0 Size=0x4
    struct XAUDIOCHANNELMAP * pChannelMap;// Offset=0x4 Size=0x4
};

struct UVBASE_SESSION_INFO// Size=0x3e (Id=3531)
{
    struct XNADDR xnAddr;// Offset=0x0 Size=0x24
    struct XNKID xnKid;// Offset=0x24 Size=0x8
    struct XNKEY xnKey;// Offset=0x2c Size=0x10
    unsigned short wPort;// Offset=0x3c Size=0x2
};

struct XAUDIOVOICEPACKETCALLBACK// Size=0xc (Id=3532)
{
    void * pVoiceContext;// Offset=0x0 Size=0x4
    void * pPacketContext;// Offset=0x4 Size=0x4
    HRESULT Status;// Offset=0x8 Size=0x4
};

struct XAUDIORENDERFXCALLBACK// Size=0x4 (Id=3533)
{
    void * pEffectContext;// Offset=0x0 Size=0x4
};

struct IXAudioRenderEffectVtbl// Size=0x20 (Id=3534)
{
    unsigned long  ( * AddRef)(struct IXAudioRenderEffect * );// Offset=0x0 Size=0x4
    unsigned long  ( * Release)(struct IXAudioRenderEffect * );// Offset=0x4 Size=0x4
    HRESULT  ( * GetInfo)(struct IXAudioRenderEffect * ,struct XAUDIOFXINFO * );// Offset=0x8 Size=0x4
    HRESULT  ( * GetParam)(struct IXAudioRenderEffect * ,unsigned char ,unsigned char ,union XAUDIOFXPARAM * );// Offset=0xc Size=0x4
    HRESULT  ( * SetParam)(struct IXAudioRenderEffect * ,unsigned char ,unsigned char ,union XAUDIOFXPARAM * );// Offset=0x10 Size=0x4
    HRESULT  ( * GetContext)(struct IXAudioRenderEffect * ,void ** );// Offset=0x14 Size=0x4
    HRESULT  ( * Process)(struct IXAudioRenderEffect * ,struct IXAudioFrameBuffer * ,struct IXAudioFrameBuffer * );// Offset=0x18 Size=0x4
    HRESULT  ( * SetCallback)(struct IXAudioRenderEffect * ,void  ( * )(struct XAUDIORENDERFXCALLBACK * ));// Offset=0x1c Size=0x4
};

struct XHV_INIT_PARAMS// Size=0x30 (Id=3535)
{
    unsigned long dwMaxRemoteTalkers;// Offset=0x0 Size=0x4
    unsigned long dwMaxLocalTalkers;// Offset=0x4 Size=0x4
    void ** localTalkerEnabledModes;// Offset=0x8 Size=0x4
    unsigned long dwNumLocalTalkerEnabledModes;// Offset=0xc Size=0x4
    void ** remoteTalkerEnabledModes;// Offset=0x10 Size=0x4
    unsigned long dwNumRemoteTalkerEnabledModes;// Offset=0x14 Size=0x4
    int bCustomVADProvided;// Offset=0x18 Size=0x4
    int bRelaxPrivileges;// Offset=0x1c Size=0x4
    void  ( * pfnMicrophoneRawDataReady)(unsigned long ,void * ,unsigned long ,int * );// Offset=0x20 Size=0x4
    struct XAUDIOVOICEFXCHAIN * pfxDefaultRemoteTalkerFX;// Offset=0x24 Size=0x4
    struct XAUDIOVOICEFXCHAIN * pfxDefaultTalkerPairFX;// Offset=0x28 Size=0x4
    struct XAUDIOVOICEFXCHAIN * pfxOutputFX;// Offset=0x2c Size=0x4
};

struct XAUDIOCHANNELMAP// Size=0x8 (Id=3536)
{
    unsigned char EntryCount;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    struct XAUDIOCHANNELMAPENTRY * paEntries;// Offset=0x4 Size=0x4
};

struct XAUDIOROUTERFXINIT// Size=0x10 (Id=3537)
{
    struct XAUDIOFXINIT EffectHeader;// Offset=0x0 Size=0x8
    unsigned char ChannelMapEntryCount;// Offset=0x8 Size=0x1
    unsigned char Mode;// Offset=0x9 Size=0x1
    unsigned char __align0[2];// Offset=0xa Size=0x2
    struct XAUDIOCHANNELMAP * pChannelMap;// Offset=0xc Size=0x4
};

struct LOOPBACK_EXTENSION// Size=0x30 (Id=3538)
{
    union // Size=0x20 (Id=0)
    {
        struct PROCMODE ProcMode;// Offset=0x0 Size=0x20
        struct IProcModeVtbl * lpVtbl;// Offset=0x0 Size=0x4
        union // Size=0x4 (Id=0)
        {
            struct LOCALTALKER * LocalTalker;// Offset=0x4 Size=0x4
            struct REMOTETALKER * RemoteTalker;// Offset=0x4 Size=0x4
        };
        struct CODEC_PROCESSOR * Codec;// Offset=0x8 Size=0x4
        unsigned long QueueIndex;// Offset=0xc Size=0x4
        struct PACKET_BUFFER * Packets;// Offset=0x10 Size=0x4
        unsigned long NumPackets;// Offset=0x14 Size=0x4
        int Running;// Offset=0x18 Size=0x4
        enum PROCMODE_ID ModeID;// Offset=0x1c Size=0x4
    };
    struct XHVENGINE * XHVEngine;// Offset=0x20 Size=0x4
    unsigned long CurrentPacket;// Offset=0x24 Size=0x4
    unsigned char LastTalkspurt;// Offset=0x28 Size=0x1
    unsigned char __align0[1];// Offset=0x29 Size=0x1
    unsigned short SequenceNumber;// Offset=0x2a Size=0x2
    struct REMOTETALKER * LoopbackTalker;// Offset=0x2c Size=0x4
};

struct NCI_VOICE_PROPERTIES_BLOCK// Size=0x64 (Id=3539)
{
    float fGain;// Offset=0x0 Size=0x4
    float fPrediction[12];// Offset=0x4 Size=0x30
    float fReflection[12];// Offset=0x34 Size=0x30
};

struct XHVENGINECREATEPARAMS// Size=0xc (Id=3540)
{
    struct XHV_INIT_PARAMS * InitParams;// Offset=0x0 Size=0x4
    void ** WorkerThread;// Offset=0x4 Size=0x4
    int NoWorkerThread;// Offset=0x8 Size=0x4
};

struct XAUDIOVOICEOUTPUTVOLUMEENTRY// Size=0x8 (Id=3541)
{
    unsigned char OutputVoiceIndex;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    struct XAUDIOCHANNELVOLUME * pVolume;// Offset=0x4 Size=0x4
};

struct REMOTETALKER// Size=0x58 (Id=3542)
{
    unsigned long long Xuid;// Offset=0x0 Size=0x8
    struct XHVENGINE * XHVEngine;// Offset=0x8 Size=0x4
    struct IProcMode * ProcModes[2];// Offset=0xc Size=0x8
    unsigned long NumProcModes;// Offset=0x14 Size=0x4
    struct CODEC_PROCESSOR * Codecs[2];// Offset=0x18 Size=0x8
    unsigned long NumCodecs;// Offset=0x20 Size=0x4
    unsigned long Priorities[4];// Offset=0x24 Size=0x10
    int VoiceDetected;// Offset=0x34 Size=0x4
    long Hangtime;// Offset=0x38 Size=0x4
    unsigned long LastTime;// Offset=0x3c Size=0x4
    unsigned char MuteFlags;// Offset=0x40 Size=0x1
    unsigned char __align0[3];// Offset=0x41 Size=0x3
    int FriendsOnly;// Offset=0x44 Size=0x4
    void * TalkerVoice;// Offset=0x48 Size=0x4
    void * TalkerOutputVoice;// Offset=0x4c Size=0x4
    void * PairVoice;// Offset=0x50 Size=0x4
};

struct XAUDIOVOICEFXCHAIN// Size=0x8 (Id=3543)
{
    unsigned char EffectCount;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    struct XAUDIOFXINIT ** papEffects;// Offset=0x4 Size=0x4
};

struct XAUDIOFXTABLE// Size=0x8 (Id=3544)
{
    unsigned char EffectCount;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    struct XAUDIOFXTABLEENTRY * paEffects;// Offset=0x4 Size=0x4
};

struct XAUDIOFXMGRINIT// Size=0x4 (Id=3545)
{
    struct XAUDIOFXTABLE * pEffectTable;// Offset=0x0 Size=0x4
};

struct XSVSESSION// Size=0x0 (Id=3546)
{
};

struct XAUDIOPERFCOUNTER// Size=0x30 (Id=3547)
{
    unsigned long long MinTicks;// Offset=0x0 Size=0x8
    unsigned long long AvgTicks;// Offset=0x8 Size=0x8
    unsigned long long MaxTicks;// Offset=0x10 Size=0x8
    unsigned long long QueryTicks;// Offset=0x18 Size=0x8
    unsigned long long TicksPerSecond;// Offset=0x20 Size=0x8
    unsigned long long FrameCount;// Offset=0x28 Size=0x8
    float GetAveragePercent();
    float GetMinimumPercent();
    float GetMaximumPercent();
};

struct XAUDIOSOURCEBUFFER// Size=0x20 (Id=3548)
{
    void * pBuffer;// Offset=0x0 Size=0x4
    unsigned long BufferSize;// Offset=0x4 Size=0x4
    unsigned long LoopCount;// Offset=0x8 Size=0x4
    unsigned long LoopBegin;// Offset=0xc Size=0x4
    unsigned long LoopEnd;// Offset=0x10 Size=0x4
    unsigned long PlayBegin;// Offset=0x14 Size=0x4
    unsigned long PlayEnd;// Offset=0x18 Size=0x4
    void * pContext;// Offset=0x1c Size=0x4
};

struct waveformat_tag// Size=0xe (Id=3549)
{
    unsigned short wFormatTag;// Offset=0x0 Size=0x2
    unsigned short nChannels;// Offset=0x2 Size=0x2
    unsigned long nSamplesPerSec;// Offset=0x4 Size=0x4
    unsigned long nAvgBytesPerSec;// Offset=0x8 Size=0x4
    unsigned short nBlockAlign;// Offset=0xc Size=0x2
};

struct IXHVExternalCodec// Size=0x4 (Id=3550)
{
    struct IXHVExternalCodecVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct XMA2WAVEFORMAT// Size=0x2c (Id=3551)
{
    unsigned char Version;// Offset=0x0 Size=0x1
    unsigned char NumStreams;// Offset=0x1 Size=0x1
    unsigned char RESERVED;// Offset=0x2 Size=0x1
    unsigned char LoopCount;// Offset=0x3 Size=0x1
    unsigned long LoopBegin;// Offset=0x4 Size=0x4
    unsigned long LoopEnd;// Offset=0x8 Size=0x4
    unsigned long SampleRate;// Offset=0xc Size=0x4
    unsigned long EncodeOptions;// Offset=0x10 Size=0x4
    unsigned long PsuedoBytesPerSec;// Offset=0x14 Size=0x4
    unsigned long BlockSizeInBytes;// Offset=0x18 Size=0x4
    unsigned long SamplesEncoded;// Offset=0x1c Size=0x4
    unsigned long SamplesInSource;// Offset=0x20 Size=0x4
    unsigned long BlockCount;// Offset=0x24 Size=0x4
    struct XMA2STREAMFORMAT Streams[1];// Offset=0x28 Size=0x4
};

struct UVBASE_CREATEVOICEMAILPARAM// Size=0x8 (Id=3552)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    struct IXHVExternalCodec * pVoicemailCodec;// Offset=0x4 Size=0x4
};

struct XAUDIOPACKET// Size=0x58 (Id=3553)
{
    void * pBuffer;// Offset=0x0 Size=0x4
    unsigned long BufferSize;// Offset=0x4 Size=0x4
    unsigned long LoopCount;// Offset=0x8 Size=0x4
    union // Size=0x14 (Id=0)
    {
        unsigned long LoopStart;// Offset=0xc Size=0x4
        unsigned long LoopLength;// Offset=0x10 Size=0x4
        struct XMALOOPREGION XMALoop[6];// Offset=0xc Size=0x48
    };
    void * pContext;// Offset=0x54 Size=0x4
};

struct XAUDIOCHANNELMAPENTRY// Size=0x8 (Id=3554)
{
    unsigned char InputChannel;// Offset=0x0 Size=0x1
    unsigned char OutputChannel;// Offset=0x1 Size=0x1
    unsigned char __align0[2];// Offset=0x2 Size=0x2
    float Volume;// Offset=0x4 Size=0x4
};

struct XAUDIODRVRENDERFXCALLBACK// Size=0x4 (Id=3555)
{
    void * pEffectContext;// Offset=0x0 Size=0x4
};

struct XAUDIOENGINEINIT// Size=0xc (Id=3556)
{
    unsigned char MaxVoiceChannelCount;// Offset=0x0 Size=0x1
    unsigned char SubmixStageCount;// Offset=0x1 Size=0x1
    unsigned char ThreadUsage;// Offset=0x2 Size=0x1
    unsigned char __align0[1];// Offset=0x3 Size=0x1
    struct XAUDIOFXTABLE * pEffectTable;// Offset=0x4 Size=0x4
    struct XAUDIOMASTERINGVOICEINIT * pMasteringVoiceInit;// Offset=0x8 Size=0x4
};

struct IXAudioEffectVtbl// Size=0x1c (Id=3557)
{
    unsigned long  ( * AddRef)(struct IXAudioEffect * );// Offset=0x0 Size=0x4
    unsigned long  ( * Release)(struct IXAudioEffect * );// Offset=0x4 Size=0x4
    HRESULT  ( * GetInfo)(struct IXAudioEffect * ,struct XAUDIOFXINFO * );// Offset=0x8 Size=0x4
    HRESULT  ( * GetParam)(struct IXAudioEffect * ,unsigned char ,unsigned char ,union XAUDIOFXPARAM * );// Offset=0xc Size=0x4
    HRESULT  ( * SetParam)(struct IXAudioEffect * ,unsigned char ,unsigned char ,union XAUDIOFXPARAM * );// Offset=0x10 Size=0x4
    HRESULT  ( * GetContext)(struct IXAudioEffect * ,void ** );// Offset=0x14 Size=0x4
    HRESULT  ( * Process)(struct IXAudioEffect * ,struct IXAudioFrameBuffer * ,struct IXAudioFrameBuffer * );// Offset=0x18 Size=0x4
};

struct XAUDIOSOURCEFXPACKETCALLBACK// Size=0xc (Id=3558)
{
    void * pEffectContext;// Offset=0x0 Size=0x4
    void * pPacketContext;// Offset=0x4 Size=0x4
    HRESULT Status;// Offset=0x8 Size=0x4
};

struct UVBASE_PARTYVOICEHEADER// Size=0x1 (Id=3559)
{
    unsigned char bUserIndex;// Offset=0x0 Size=0x1
};

struct XAUDIODRVRENDERFXCALLBACK// Size=0x4 (Id=3560)
{
    void * pEffectContext;// Offset=0x0 Size=0x4
};

struct IXAudioSourceEffect// Size=0x4 (Id=3561)
{
    struct IXAudioSourceEffectVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct XAUDIOREVERBI3DL2SETTINGS// Size=0x30 (Id=3562)
{
    long lRoom;// Offset=0x0 Size=0x4
    long lRoomHF;// Offset=0x4 Size=0x4
    float flRoomRolloffFactor;// Offset=0x8 Size=0x4
    float flDecayTime;// Offset=0xc Size=0x4
    float flDecayHFRatio;// Offset=0x10 Size=0x4
    long lReflections;// Offset=0x14 Size=0x4
    float flReflectionsDelay;// Offset=0x18 Size=0x4
    long lReverb;// Offset=0x1c Size=0x4
    float flReverbDelay;// Offset=0x20 Size=0x4
    float flDiffusion;// Offset=0x24 Size=0x4
    float flDensity;// Offset=0x28 Size=0x4
    float flHFReference;// Offset=0x2c Size=0x4
};

struct XAUDIOFXREGISTER// Size=0x8 (Id=3563)
{
    unsigned char EffectCount;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    struct XAUDIOFXTABLEENTRY * paEffects;// Offset=0x4 Size=0x4
};

struct XAUDIOPERFCOUNTER// Size=0x30 (Id=3564)
{
    unsigned long long MinTicks;// Offset=0x0 Size=0x8
    unsigned long long AvgTicks;// Offset=0x8 Size=0x8
    unsigned long long MaxTicks;// Offset=0x10 Size=0x8
    unsigned long long QueryTicks;// Offset=0x18 Size=0x8
    unsigned long long TicksPerSecond;// Offset=0x20 Size=0x8
    unsigned long long FrameCount;// Offset=0x28 Size=0x8
};

struct PARTYCHATINFO// Size=0x4 (Id=3565)
{
    enum PARTYCHATSTATUS eStatus;// Offset=0x0 Size=0x4
};

struct XMALOOPREGION// Size=0xc (Id=3566)
{
    unsigned long LoopStart;// Offset=0x0 Size=0x4
    unsigned long LoopEnd;// Offset=0x4 Size=0x4
    unsigned char LoopSubframeEnd;// Offset=0x8 Size=0x1
    unsigned char LoopSubframeSkip;// Offset=0x9 Size=0x1
};

struct XAUDIOFXDATAPARAM// Size=0x8 (Id=3567)
{
    void * pBuffer;// Offset=0x0 Size=0x4
    unsigned long BufferSize;// Offset=0x4 Size=0x4
};

struct XAUDIOSOURCEVOICEINIT// Size=0x5c (Id=3568)
{
    struct XAUDIOSOURCEFORMAT Format;// Offset=0x0 Size=0x38
    unsigned char Category;// Offset=0x38 Size=0x1
    unsigned char MaxOutputVoiceCount;// Offset=0x39 Size=0x1
    unsigned char MaxChannelMapEntryCount;// Offset=0x3a Size=0x1
    unsigned char MaxPacketCount;// Offset=0x3b Size=0x1
    float MaxPitchShift;// Offset=0x3c Size=0x4
    unsigned char Flags;// Offset=0x40 Size=0x1
    unsigned char __align0[3];// Offset=0x41 Size=0x3
    struct XAUDIOVOICEFXCHAIN * pEffectChain;// Offset=0x44 Size=0x4
    struct XAUDIOVOICEOUTPUT * pVoiceOutput;// Offset=0x48 Size=0x4
    void  ( * pfnProcessCallback)(struct XAUDIOVOICEPROCESSCALLBACK * );// Offset=0x4c Size=0x4
    void  ( * pfnPacketCompletionCallback)(struct XAUDIOVOICEPACKETCALLBACK * );// Offset=0x50 Size=0x4
    void  ( * pfnPacketLoopCallback)(struct XAUDIOVOICEPACKETCALLBACK * );// Offset=0x54 Size=0x4
    void * pContext;// Offset=0x58 Size=0x4
};

struct NCI_CODEC_INFO_BLOCK// Size=0x4c (Id=3569)
{
    unsigned short wNCIVersion;// Offset=0x0 Size=0x2
    char sCodecVersion[32];// Offset=0x2 Size=0x20
    unsigned char __align0[2];// Offset=0x22 Size=0x2
    unsigned long dwCodecClassID;// Offset=0x24 Size=0x4
    unsigned long dwCodecID;// Offset=0x28 Size=0x4
    unsigned short wExpires;// Offset=0x2c Size=0x2
    unsigned short wSamplingRate;// Offset=0x2e Size=0x2
    unsigned short wNumBitsPerSample;// Offset=0x30 Size=0x2
    unsigned short wNumSamplesPerFrame;// Offset=0x32 Size=0x2
    unsigned short wNumChannels;// Offset=0x34 Size=0x2
    unsigned short wInterleaveBlockSize;// Offset=0x36 Size=0x2
    unsigned long dwBitRate;// Offset=0x38 Size=0x4
    unsigned long dwMinPacketBits;// Offset=0x3c Size=0x4
    unsigned long dwAvgPacketBits;// Offset=0x40 Size=0x4
    unsigned long dwMaxPacketBits;// Offset=0x44 Size=0x4
    unsigned short wNumPrimeFlushFrames;// Offset=0x48 Size=0x2
    unsigned short wNumPrimeFlushSamples;// Offset=0x4a Size=0x2
};

struct UVCHANNELINFO// Size=0x30 (Id=3570)
{
    enum UVCHANNELTYPE eType;// Offset=0x0 Size=0x4
    unsigned char __align0[4];// Offset=0x4 Size=0x4
    union // Size=0x28 (Id=0)
    {
        struct VOICECHATINFO VoiceChatInfo;// Offset=0x8 Size=0x28
        struct PARTYCHATINFO PartyChatInfo;// Offset=0x8 Size=0x4
    };
};

struct pcmwaveformat_tag// Size=0x10 (Id=3571)
{
    struct waveformat_tag wf;// Offset=0x0 Size=0xe
    unsigned short wBitsPerSample;// Offset=0xe Size=0x2
};

struct IXAudioRefCount// Size=0x4 (Id=3572)
{
    struct IXAudioRefCountVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct PROCMODE_CODEC_INFO// Size=0x8 (Id=3573)
{
    struct CODEC_TYPE * CodecType;// Offset=0x0 Size=0x4
    unsigned long MaxPackets;// Offset=0x4 Size=0x4
};

struct SHORTLE// Size=0x2 (Id=3574)
{
    unsigned short value;// Offset=0x0 Size=0x2
};

struct XAUDIOFXTABLEENTRY// Size=0xc (Id=3575)
{
    unsigned char EffectId;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    HRESULT  ( * pfnQueryEffectSize)(struct XAUDIOFXINIT * ,unsigned long * );// Offset=0x4 Size=0x4
    HRESULT  ( * pfnCreateEffect)(struct XAUDIOFXINIT * ,struct IXAudioBatchAllocator * ,struct IXAudioEffect ** );// Offset=0x8 Size=0x4
};

struct NCI_CODEC// Size=0x0 (Id=3576)
{
};

struct XAUDIOSUBMIXVOICEINIT// Size=0x1c (Id=3577)
{
    union XAUDIOFORMAT Format;// Offset=0x0 Size=0x8
    unsigned char MaxOutputVoiceCount;// Offset=0x8 Size=0x1
    unsigned char MaxChannelMapEntryCount;// Offset=0x9 Size=0x1
    unsigned char SubmixStage;// Offset=0xa Size=0x1
    unsigned char __align0[1];// Offset=0xb Size=0x1
    struct XAUDIOVOICEFXCHAIN * pEffectChain;// Offset=0xc Size=0x4
    struct XAUDIOVOICEOUTPUT * pVoiceOutput;// Offset=0x10 Size=0x4
    void  ( * pfnProcessCallback)(struct XAUDIOVOICEPROCESSCALLBACK * );// Offset=0x14 Size=0x4
    void * pContext;// Offset=0x18 Size=0x4
};

union XAUDIOFORMAT// Size=0x8 (Id=3578)
{
    unsigned char SampleType;// Offset=0x0 Size=0x1
    unsigned char ChannelCount;// Offset=0x1 Size=0x1
    unsigned char __align0[2];// Offset=0x2 Size=0x2
    unsigned long SampleRate;// Offset=0x4 Size=0x4
    unsigned long long UnionValue;// Offset=0x0 Size=0x8
};

struct XAUDIOSOURCEFXFORMATPARAM// Size=0x3c (Id=3579)
{
    struct XAUDIOSOURCEFORMAT Format;// Offset=0x0 Size=0x38
    unsigned char Flags;// Offset=0x38 Size=0x1
};

struct pcmwaveformat_tag// Size=0x10 (Id=3580)
{
    struct waveformat_tag wf;// Offset=0x0 Size=0xe
    unsigned short wBitsPerSample;// Offset=0xe Size=0x2
};

struct XAUDIOFRAMEBUFINIT// Size=0x14 (Id=3581)
{
    unsigned char Type;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    union XAUDIOFORMAT MaxFormat;// Offset=0x4 Size=0x8
    float * pSampleBuffer;// Offset=0xc Size=0x4
    void * pContext;// Offset=0x10 Size=0x4
};

struct XAUDIOSUBMIXVOICEINIT// Size=0x1c (Id=3582)
{
    union XAUDIOFORMAT Format;// Offset=0x0 Size=0x8
    unsigned char MaxOutputVoiceCount;// Offset=0x8 Size=0x1
    unsigned char MaxChannelMapEntryCount;// Offset=0x9 Size=0x1
    unsigned char SubmixStage;// Offset=0xa Size=0x1
    unsigned char __align0[1];// Offset=0xb Size=0x1
    struct XAUDIOVOICEFXCHAIN * pEffectChain;// Offset=0xc Size=0x4
    struct XAUDIOVOICEOUTPUT * pVoiceOutput;// Offset=0x10 Size=0x4
    void  ( * pfnProcessCallback)(struct XAUDIOVOICEPROCESSCALLBACK * );// Offset=0x14 Size=0x4
    void * pContext;// Offset=0x18 Size=0x4
};

struct XMA2STREAMFORMAT// Size=0x4 (Id=3583)
{
    unsigned char Channels;// Offset=0x0 Size=0x1
    unsigned char RESERVED;// Offset=0x1 Size=0x1
    unsigned short ChannelMask;// Offset=0x2 Size=0x2
};

struct XAUDIODRVPERFCOUNTER// Size=0x30 (Id=3584)
{
    unsigned long long MinTicks;// Offset=0x0 Size=0x8
    unsigned long long AvgTicks;// Offset=0x8 Size=0x8
    unsigned long long MaxTicks;// Offset=0x10 Size=0x8
    unsigned long long QueryTicks;// Offset=0x18 Size=0x8
    unsigned long long TicksPerSecond;// Offset=0x20 Size=0x8
    unsigned long long FrameCount;// Offset=0x28 Size=0x8
    float GetAveragePercent();
    float GetMinimumPercent();
    float GetMaximumPercent();
};

struct XAUDIOVOICEPROCESSCALLBACK// Size=0x4 (Id=3585)
{
    void * pVoiceContext;// Offset=0x0 Size=0x4
};

struct XSVENGINE// Size=0x0 (Id=3586)
{
};

struct PACKET_BUFFER// Size=0xc (Id=3587)
{
    unsigned char * Buffer;// Offset=0x0 Size=0x4
    struct XMEDIAPACKET * Packets;// Offset=0x4 Size=0x4
    unsigned long PacketDescriptorSize;// Offset=0x8 Size=0x4
};

struct XAUDIOREVERBSETTINGS// Size=0x30 (Id=3588)
{
    unsigned long ReflectionsDelay;// Offset=0x0 Size=0x4
    unsigned char ReverbDelay;// Offset=0x4 Size=0x1
    unsigned char RearDelay;// Offset=0x5 Size=0x1
    unsigned char PositionLeft;// Offset=0x6 Size=0x1
    unsigned char PositionRight;// Offset=0x7 Size=0x1
    unsigned char PositionMatrixLeft;// Offset=0x8 Size=0x1
    unsigned char PositionMatrixRight;// Offset=0x9 Size=0x1
    unsigned char EarlyDiffusion;// Offset=0xa Size=0x1
    unsigned char LateDiffusion;// Offset=0xb Size=0x1
    unsigned char LowEQGain;// Offset=0xc Size=0x1
    unsigned char LowEQCutoff;// Offset=0xd Size=0x1
    unsigned char HighEQGain;// Offset=0xe Size=0x1
    unsigned char HighEQCutoff;// Offset=0xf Size=0x1
    float RoomFilterFreq;// Offset=0x10 Size=0x4
    float RoomFilterMain;// Offset=0x14 Size=0x4
    float RoomFilterHF;// Offset=0x18 Size=0x4
    float ReflectionsGain;// Offset=0x1c Size=0x4
    float ReverbGain;// Offset=0x20 Size=0x4
    float DecayTime;// Offset=0x24 Size=0x4
    float Density;// Offset=0x28 Size=0x4
    float RoomSize;// Offset=0x2c Size=0x4
};

union XAUDIOPACKETPOSITION// Size=0x30 (Id=3589)
{
    unsigned long Position;// Offset=0x0 Size=0x4
    struct XMAPACKETPOSITION XMAPosition[6];// Offset=0x0 Size=0x30
};

union XAUDIOFORMAT// Size=0x8 (Id=3590)
{
    unsigned char SampleType;// Offset=0x0 Size=0x1
    unsigned char ChannelCount;// Offset=0x1 Size=0x1
    unsigned char __align0[2];// Offset=0x2 Size=0x2
    unsigned long SampleRate;// Offset=0x4 Size=0x4
    unsigned long long UnionValue;// Offset=0x0 Size=0x8
};

struct XMAPACKETPOSITION// Size=0x8 (Id=3591)
{
    unsigned long ReadOffset;// Offset=0x0 Size=0x4
    unsigned short SampleIndex;// Offset=0x4 Size=0x2
};

struct XAUDIOCHANNELMAPENTRY// Size=0x8 (Id=3592)
{
    unsigned char InputChannel;// Offset=0x0 Size=0x1
    unsigned char OutputChannel;// Offset=0x1 Size=0x1
    unsigned char __align0[2];// Offset=0x2 Size=0x2
    float Volume;// Offset=0x4 Size=0x4
};

struct JITTERBUF// Size=0x180 (Id=3593)
{
    struct PACKET_BUFFER * Buffer;// Offset=0x0 Size=0x4
    struct PACKET_CONTEXT * Contexts;// Offset=0x4 Size=0x4
    unsigned long NumPackets;// Offset=0x8 Size=0x4
    unsigned char __align0[4];// Offset=0xc Size=0x4
    unsigned long long LogicalOutputTime;// Offset=0x10 Size=0x8
    unsigned long long RealStartOutputTime;// Offset=0x18 Size=0x8
    unsigned short InitialSeqNo;// Offset=0x20 Size=0x2
    unsigned char __align1[6];// Offset=0x22 Size=0x6
    unsigned long long HighWaterMark;// Offset=0x28 Size=0x8
    unsigned long long InitialHighWaterMark;// Offset=0x30 Size=0x8
    long long HangTime;// Offset=0x38 Size=0x8
    int HWMReached;// Offset=0x40 Size=0x4
    unsigned short HWMSeqCount;// Offset=0x44 Size=0x2
    unsigned short MaxSeqCount;// Offset=0x46 Size=0x2
    unsigned short MinSeqCount;// Offset=0x48 Size=0x2
    unsigned char __align2[2];// Offset=0x4a Size=0x2
    int StartTiming;// Offset=0x4c Size=0x4
    float HighWaterMarkQuality[25];// Offset=0x50 Size=0xc8
    float IdealQuality;// Offset=0x118 Size=0x8
    float FrameStrength;// Offset=0x120 Size=0x8
    float CurrentTalkspurtWeighting;// Offset=0x128 Size=0x8
    unsigned long FramesInTalkspurtCount;// Offset=0x130 Size=0x4
    unsigned char CurrentTalkspurtID;// Offset=0x134 Size=0x1
    unsigned char __align3[3];// Offset=0x135 Size=0x3
    unsigned long ErrorCount;// Offset=0x138 Size=0x4
    unsigned long LostPackets;// Offset=0x13c Size=0x4
    unsigned long PacketsPlayed;// Offset=0x140 Size=0x4
    int Synchronized;// Offset=0x144 Size=0x4
    unsigned char BackupBuffer[10];// Offset=0x148 Size=0xa
    unsigned char __align4[2];// Offset=0x152 Size=0x2
    int BackupFull;// Offset=0x154 Size=0x4
    unsigned long CurrentOOSPackets;// Offset=0x158 Size=0x4
    unsigned long MaxOOSPackets;// Offset=0x15c Size=0x4
    struct PACKET_QUEUE FreePackets;// Offset=0x160 Size=0x8
    struct PACKET_QUEUE InUsePackets;// Offset=0x168 Size=0x8
    struct PACKET_QUEUE InFlightPackets;// Offset=0x170 Size=0x8
    unsigned long SubmitAllPackets;// Offset=0x178 Size=0x4
    struct CODEC_PROCESSOR * Codec;// Offset=0x17c Size=0x4
};

struct XAUDIOFXINIT// Size=0x8 (Id=3594)
{
    unsigned char EffectId;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    void * pContext;// Offset=0x4 Size=0x4
};

struct UVBASE_CONNECTTOVOICECHATPARAM// Size=0x60 (Id=3595)
{
    unsigned long dwChannelIndex;// Offset=0x0 Size=0x4
    unsigned long dwUserIndex;// Offset=0x4 Size=0x4
    unsigned long long Xuid;// Offset=0x8 Size=0x8
    char szGamertag[16];// Offset=0x10 Size=0x10
    struct UVBASE_SESSION_INFO SessionInfo;// Offset=0x20 Size=0x3e
};

struct XAUDIORENDERDRVCLIENT// Size=0x8 (Id=3596)
{
    void  ( * pfnCallback)(struct XAUDIODRVRENDERFXCALLBACK * );// Offset=0x0 Size=0x4
    void * pContext;// Offset=0x4 Size=0x4
};

struct XAUDIOFXDATAPARAM// Size=0x8 (Id=3597)
{
    void * pBuffer;// Offset=0x0 Size=0x4
    unsigned long BufferSize;// Offset=0x4 Size=0x4
};

struct XAUDIOREVERBSETTINGS// Size=0x30 (Id=3598)
{
    unsigned long ReflectionsDelay;// Offset=0x0 Size=0x4
    unsigned char ReverbDelay;// Offset=0x4 Size=0x1
    unsigned char RearDelay;// Offset=0x5 Size=0x1
    unsigned char PositionLeft;// Offset=0x6 Size=0x1
    unsigned char PositionRight;// Offset=0x7 Size=0x1
    unsigned char PositionMatrixLeft;// Offset=0x8 Size=0x1
    unsigned char PositionMatrixRight;// Offset=0x9 Size=0x1
    unsigned char EarlyDiffusion;// Offset=0xa Size=0x1
    unsigned char LateDiffusion;// Offset=0xb Size=0x1
    unsigned char LowEQGain;// Offset=0xc Size=0x1
    unsigned char LowEQCutoff;// Offset=0xd Size=0x1
    unsigned char HighEQGain;// Offset=0xe Size=0x1
    unsigned char HighEQCutoff;// Offset=0xf Size=0x1
    float RoomFilterFreq;// Offset=0x10 Size=0x4
    float RoomFilterMain;// Offset=0x14 Size=0x4
    float RoomFilterHF;// Offset=0x18 Size=0x4
    float ReflectionsGain;// Offset=0x1c Size=0x4
    float ReverbGain;// Offset=0x20 Size=0x4
    float DecayTime;// Offset=0x24 Size=0x4
    float Density;// Offset=0x28 Size=0x4
    float RoomSize;// Offset=0x2c Size=0x4
};

struct XAUDIOFXINFO// Size=0x4 (Id=3599)
{
    unsigned char DataFlow;// Offset=0x0 Size=0x1
    unsigned char __align0[1];// Offset=0x1 Size=0x1
    unsigned short TrailFrames;// Offset=0x2 Size=0x2
};

struct XSVLTCACHE// Size=0x0 (Id=3600)
{
};

struct XAUDIOVOICEOUTPUTVOLUMEENTRY// Size=0x8 (Id=3601)
{
    unsigned char OutputVoiceIndex;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    struct XAUDIOCHANNELVOLUME * pVolume;// Offset=0x4 Size=0x4
};

struct IXAudioRouterEffect// Size=0x4 (Id=3602)
{
    struct IXAudioRouterEffectVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct XAUDIOPIXCOUNTERS// Size=0x1c (Id=3603)
{
    long ActiveVoices_Total;// Offset=0x0 Size=0x4
    long ActiveVoices_Submix;// Offset=0x4 Size=0x4
    long ActiveVoices_Source;// Offset=0x8 Size=0x4
    long ActiveVoices_PCM;// Offset=0xc Size=0x4
    long ActiveVoices_XMA;// Offset=0x10 Size=0x4
    long XMA_SamplesReady;// Offset=0x14 Size=0x4
    long XMA_SamplesUsed;// Offset=0x18 Size=0x4
};

struct FILEOUT_EXTENSION// Size=0x0 (Id=3604)
{
};

struct XAUDIOFRAMEBUFDATA// Size=0xc (Id=3605)
{
    union XAUDIOFORMAT Format;// Offset=0x0 Size=0x8
    float * pSampleBuffer;// Offset=0x8 Size=0x4
};

struct UVBASE_QUITVOICECHATPARAM// Size=0x10 (Id=3606)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    unsigned char __align0[4];// Offset=0x4 Size=0x4
    unsigned long long Xuid;// Offset=0x8 Size=0x8
};

struct XMAPACKETPOSITION// Size=0x8 (Id=3607)
{
    unsigned long ReadOffset;// Offset=0x0 Size=0x4
    unsigned short SampleIndex;// Offset=0x4 Size=0x2
};

struct t_g726state// Size=0x36 (Id=3608)
{
    short a1r;// Offset=0x0 Size=0x2
    short a2r;// Offset=0x2 Size=0x2
    short apr;// Offset=0x4 Size=0x2
    short bnr[7];// Offset=0x6 Size=0xe
    short dml;// Offset=0x14 Size=0x2
    short dms;// Offset=0x16 Size=0x2
    short dqn[7];// Offset=0x18 Size=0xe
    short pk1;// Offset=0x26 Size=0x2
    short pk2;// Offset=0x28 Size=0x2
    short sr1;// Offset=0x2a Size=0x2
    short sr2;// Offset=0x2c Size=0x2
    short tdr;// Offset=0x2e Size=0x2
    short yl_lsb;// Offset=0x30 Size=0x2
    short yl_msb;// Offset=0x32 Size=0x2
    short yup;// Offset=0x34 Size=0x2
};

struct XAUDIORENDERDRVCLIENT// Size=0x8 (Id=3609)
{
    void  ( * pfnCallback)(struct XAUDIODRVRENDERFXCALLBACK * );// Offset=0x0 Size=0x4
    void * pContext;// Offset=0x4 Size=0x4
};

struct XAUDIORENDERFXINIT// Size=0xc (Id=3610)
{
    struct XAUDIOFXINIT EffectHeader;// Offset=0x0 Size=0x8
    void  ( * pfnRenderCallback)(struct XAUDIORENDERFXCALLBACK * );// Offset=0x8 Size=0x4
};

struct NCI_CODEC_IO_BLOCK// Size=0x18 (Id=3611)
{
    short * pPCMBuffer;// Offset=0x0 Size=0x4
    unsigned short wSamplesInPCMBuffer;// Offset=0x4 Size=0x2
    unsigned char __align0[2];// Offset=0x6 Size=0x2
    unsigned char * pNellyBuffer;// Offset=0x8 Size=0x4
    unsigned short wNellyBufferSize;// Offset=0xc Size=0x2
    unsigned short wNellyBufferReadByteOffset;// Offset=0xe Size=0x2
    unsigned char chNellyBufferReadBitOffset;// Offset=0x10 Size=0x1
    unsigned char __align1[1];// Offset=0x11 Size=0x1
    unsigned short wNellyBufferWriteByteOffset;// Offset=0x12 Size=0x2
    unsigned char chNellyBufferWriteBitOffset;// Offset=0x14 Size=0x1
};

struct NMCodecPerfStruct// Size=0x28 (Id=3612)
{
    long long minTicks;// Offset=0x0 Size=0x8
    long long avgTicks;// Offset=0x8 Size=0x8
    long long maxTicks;// Offset=0x10 Size=0x8
    long long cpuTicks;// Offset=0x18 Size=0x8
    int ticksPerSecond;// Offset=0x20 Size=0x4
    unsigned int count;// Offset=0x24 Size=0x4
};

struct XMAWAVEFORMAT// Size=0x20 (Id=3613)
{
    unsigned short FormatTag;// Offset=0x0 Size=0x2
    unsigned short BitsPerSample;// Offset=0x2 Size=0x2
    unsigned short EncodeOptions;// Offset=0x4 Size=0x2
    unsigned short LargestSkip;// Offset=0x6 Size=0x2
    unsigned short NumStreams;// Offset=0x8 Size=0x2
    unsigned char LoopCount;// Offset=0xa Size=0x1
    unsigned char Version;// Offset=0xb Size=0x1
    struct XMASTREAMFORMAT XmaStreams[1];// Offset=0xc Size=0x14
};

struct XAUDIOSOURCEVOICEINIT// Size=0x5c (Id=3614)
{
    struct XAUDIOSOURCEFORMAT Format;// Offset=0x0 Size=0x38
    unsigned char Category;// Offset=0x38 Size=0x1
    unsigned char MaxOutputVoiceCount;// Offset=0x39 Size=0x1
    unsigned char MaxChannelMapEntryCount;// Offset=0x3a Size=0x1
    unsigned char MaxPacketCount;// Offset=0x3b Size=0x1
    float MaxPitchShift;// Offset=0x3c Size=0x4
    unsigned char Flags;// Offset=0x40 Size=0x1
    unsigned char __align0[3];// Offset=0x41 Size=0x3
    struct XAUDIOVOICEFXCHAIN * pEffectChain;// Offset=0x44 Size=0x4
    struct XAUDIOVOICEOUTPUT * pVoiceOutput;// Offset=0x48 Size=0x4
    void  ( * pfnProcessCallback)(struct XAUDIOVOICEPROCESSCALLBACK * );// Offset=0x4c Size=0x4
    void  ( * pfnPacketCompletionCallback)(struct XAUDIOVOICEPACKETCALLBACK * );// Offset=0x50 Size=0x4
    void  ( * pfnPacketLoopCallback)(struct XAUDIOVOICEPACKETCALLBACK * );// Offset=0x54 Size=0x4
    void * pContext;// Offset=0x58 Size=0x4
};

struct XAUDIOXMAFORMAT// Size=0x8 (Id=3615)
{
    unsigned long SampleRate;// Offset=0x0 Size=0x4
    unsigned char ChannelCount;// Offset=0x4 Size=0x1
    unsigned char DecodeBufferSize;// Offset=0x5 Size=0x1
};

struct UVCHANNELID// Size=0x18 (Id=3616)
{
    enum UVCHANNELTYPE eType;// Offset=0x0 Size=0x4
    unsigned char __align0[4];// Offset=0x4 Size=0x4
    unsigned long long Xuid;// Offset=0x8 Size=0x8
    unsigned long dwUserIndex;// Offset=0x10 Size=0x4
};

struct XHVENGINE// Size=0x8c0 (Id=3617)
{
    struct IXHVEngineVtbl * IXHVEngineVtbl;// Offset=0x0 Size=0x4
    unsigned long RefCount;// Offset=0x4 Size=0x4
    struct XHV_INIT_PARAMS InitParams;// Offset=0x8 Size=0x30
    void * OutputVoice;// Offset=0x38 Size=0x4
    void * MixVoice;// Offset=0x3c Size=0x4
    void * SilenceVoice;// Offset=0x40 Size=0x4
    float Silence[256];// Offset=0x44 Size=0x400
    int SilencePlaying;// Offset=0x444 Size=0x4
    struct LOCALTALKER * AllocatedLocalTalkers[4];// Offset=0x448 Size=0x10
    struct LOCALTALKER * LocalTalkers[4];// Offset=0x458 Size=0x10
    struct REMOTETALKER * RemoteTalkers[34];// Offset=0x468 Size=0x88
    void * WorkerThread;// Offset=0x4f0 Size=0x4
    unsigned long DataReadyFlags;// Offset=0x4f4 Size=0x4
    struct _RTL_CRITICAL_SECTION EngineLock;// Offset=0x4f8 Size=0x1c
    unsigned long ActivationFlag;// Offset=0x514 Size=0x4
    void * ActivationEvent;// Offset=0x518 Size=0x4
    int ResortRemoteTalkers;// Offset=0x51c Size=0x4
    void * NotificationListener;// Offset=0x520 Size=0x4
    int SettingsDirty;// Offset=0x524 Size=0x4
    unsigned long Round;// Offset=0x528 Size=0x4
    unsigned long MaxVoiceChatDecodes;// Offset=0x52c Size=0x4
    long PrevLocalWork[4][3];// Offset=0x530 Size=0x30
    unsigned long MaxLocalWork[4][3];// Offset=0x560 Size=0x30
    long PrevRemoteWork[34][3];// Offset=0x590 Size=0x198
    unsigned long MaxRemoteWork[34][3];// Offset=0x728 Size=0x198
};

struct XAUDIOCHANNELVOLUMEENTRY// Size=0x8 (Id=3618)
{
    unsigned char EntryIndex;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    float Volume;// Offset=0x4 Size=0x4
};

struct UVBASE_REQUESTVOICECHATPARAM// Size=0x20 (Id=3619)
{
    unsigned long dwChannelIndex;// Offset=0x0 Size=0x4
    unsigned long dwUserIndex;// Offset=0x4 Size=0x4
    unsigned long long Xuid;// Offset=0x8 Size=0x8
    char szGamertag[16];// Offset=0x10 Size=0x10
};

struct XHVRESAMPLER// Size=0x108 (Id=3620)
{
    float PreviousSamples[32];// Offset=0x0 Size=0x100
    unsigned long Offset;// Offset=0x100 Size=0x4
};

struct XAUDIOVOICEOUTPUTENTRY// Size=0x8 (Id=3621)
{
    void * pDestVoice;// Offset=0x0 Size=0x4
    struct XAUDIOCHANNELMAP * pChannelMap;// Offset=0x4 Size=0x4
};

struct XHVOUTPUTEFFECT// Size=0x181c (Id=3622)
{
    struct IXAudioEffectVtbl * lpVtbl;// Offset=0x0 Size=0x4
    unsigned long RefCount;// Offset=0x4 Size=0x4
    struct XHVENGINE * XHVEngine;// Offset=0x8 Size=0x4
    short AccumBuffer[4][768];// Offset=0xc Size=0x1800
    unsigned long AccumBufferIndex[4];// Offset=0x180c Size=0x10
};

struct XAUDIOFXREGISTER// Size=0x8 (Id=3623)
{
    unsigned char EffectCount;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    struct XAUDIOFXTABLEENTRY * paEffects;// Offset=0x4 Size=0x4
};

struct XMASTREAMFORMAT// Size=0x14 (Id=3624)
{
    unsigned long PsuedoBytesPerSec;// Offset=0x0 Size=0x4
    unsigned long SampleRate;// Offset=0x4 Size=0x4
    unsigned long LoopStart;// Offset=0x8 Size=0x4
    unsigned long LoopEnd;// Offset=0xc Size=0x4
    unsigned char SubframeData;// Offset=0x10 Size=0x1
    unsigned char Channels;// Offset=0x11 Size=0x1
    unsigned short ChannelMask;// Offset=0x12 Size=0x2
};

struct XAUDIOFXTABLE// Size=0x8 (Id=3625)
{
    unsigned char EffectCount;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    struct XAUDIOFXTABLEENTRY * paEffects;// Offset=0x4 Size=0x4
};

struct XMA2WAVEFORMAT// Size=0x2c (Id=3626)
{
    unsigned char Version;// Offset=0x0 Size=0x1
    unsigned char NumStreams;// Offset=0x1 Size=0x1
    unsigned char RESERVED;// Offset=0x2 Size=0x1
    unsigned char LoopCount;// Offset=0x3 Size=0x1
    unsigned long LoopBegin;// Offset=0x4 Size=0x4
    unsigned long LoopEnd;// Offset=0x8 Size=0x4
    unsigned long SampleRate;// Offset=0xc Size=0x4
    unsigned long EncodeOptions;// Offset=0x10 Size=0x4
    unsigned long PsuedoBytesPerSec;// Offset=0x14 Size=0x4
    unsigned long BlockSizeInBytes;// Offset=0x18 Size=0x4
    unsigned long SamplesEncoded;// Offset=0x1c Size=0x4
    unsigned long SamplesInSource;// Offset=0x20 Size=0x4
    unsigned long BlockCount;// Offset=0x24 Size=0x4
    struct XMA2STREAMFORMAT Streams[1];// Offset=0x28 Size=0x4
};

struct XAUDIOREVERBI3DL2SETTINGS// Size=0x30 (Id=3627)
{
    long lRoom;// Offset=0x0 Size=0x4
    long lRoomHF;// Offset=0x4 Size=0x4
    float flRoomRolloffFactor;// Offset=0x8 Size=0x4
    float flDecayTime;// Offset=0xc Size=0x4
    float flDecayHFRatio;// Offset=0x10 Size=0x4
    long lReflections;// Offset=0x14 Size=0x4
    float flReflectionsDelay;// Offset=0x18 Size=0x4
    long lReverb;// Offset=0x1c Size=0x4
    float flReverbDelay;// Offset=0x20 Size=0x4
    float flDiffusion;// Offset=0x24 Size=0x4
    float flDensity;// Offset=0x28 Size=0x4
    float flHFReference;// Offset=0x2c Size=0x4
};

struct IXAudioBatchAllocator// Size=0x4 (Id=3628)
{
    struct IXAudioBatchAllocatorVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct XAUDIOXMAFORMAT// Size=0x8 (Id=3629)
{
    unsigned long SampleRate;// Offset=0x0 Size=0x4
    unsigned char ChannelCount;// Offset=0x4 Size=0x1
    unsigned char DecodeBufferSize;// Offset=0x5 Size=0x1
};

struct CODEC_TYPE// Size=0x20 (Id=3630)
{
    HRESULT  ( * CreateProc)(void * );// Offset=0x0 Size=0x4
    HRESULT  ( * DestroyProc)(void * );// Offset=0x4 Size=0x4
    HRESULT  ( * ProcessProc)(void * ,unsigned long );// Offset=0x8 Size=0x4
    unsigned long CodecTypeIndex;// Offset=0xc Size=0x4
    unsigned long CodecSize;// Offset=0x10 Size=0x4
    unsigned long FrameAlignment;// Offset=0x14 Size=0x4
    unsigned long InputFrameSize;// Offset=0x18 Size=0x4
    unsigned long OutputFrameSize;// Offset=0x1c Size=0x4
};

struct XAUDIOPIXCOUNTERS// Size=0x1c (Id=3631)
{
    long ActiveVoices_Total;// Offset=0x0 Size=0x4
    long ActiveVoices_Submix;// Offset=0x4 Size=0x4
    long ActiveVoices_Source;// Offset=0x8 Size=0x4
    long ActiveVoices_PCM;// Offset=0xc Size=0x4
    long ActiveVoices_XMA;// Offset=0x10 Size=0x4
    long XMA_SamplesReady;// Offset=0x14 Size=0x4
    long XMA_SamplesUsed;// Offset=0x18 Size=0x4
};

struct IXHVEngine// Size=0x4 (Id=3632)
{
    struct IXHVEngineVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct PROCMODE// Size=0x20 (Id=3633)
{
    struct IProcModeVtbl * lpVtbl;// Offset=0x0 Size=0x4
    union // Size=0x4 (Id=0)
    {
        struct LOCALTALKER * LocalTalker;// Offset=0x4 Size=0x4
        struct REMOTETALKER * RemoteTalker;// Offset=0x4 Size=0x4
    };
    struct CODEC_PROCESSOR * Codec;// Offset=0x8 Size=0x4
    unsigned long QueueIndex;// Offset=0xc Size=0x4
    struct PACKET_BUFFER * Packets;// Offset=0x10 Size=0x4
    unsigned long NumPackets;// Offset=0x14 Size=0x4
    int Running;// Offset=0x18 Size=0x4
    enum PROCMODE_ID ModeID;// Offset=0x1c Size=0x4
};

struct IXAudioRouterEffectVtbl// Size=0x34 (Id=3634)
{
    unsigned long  ( * AddRef)(struct IXAudioRouterEffect * );// Offset=0x0 Size=0x4
    unsigned long  ( * Release)(struct IXAudioRouterEffect * );// Offset=0x4 Size=0x4
    HRESULT  ( * GetInfo)(struct IXAudioRouterEffect * ,struct XAUDIOFXINFO * );// Offset=0x8 Size=0x4
    HRESULT  ( * GetParam)(struct IXAudioRouterEffect * ,unsigned char ,unsigned char ,union XAUDIOFXPARAM * );// Offset=0xc Size=0x4
    HRESULT  ( * SetParam)(struct IXAudioRouterEffect * ,unsigned char ,unsigned char ,union XAUDIOFXPARAM * );// Offset=0x10 Size=0x4
    HRESULT  ( * GetContext)(struct IXAudioRouterEffect * ,void ** );// Offset=0x14 Size=0x4
    HRESULT  ( * Process)(struct IXAudioRouterEffect * ,struct IXAudioFrameBuffer * ,struct IXAudioFrameBuffer * );// Offset=0x18 Size=0x4
    HRESULT  ( * GetMode)(struct IXAudioRouterEffect * ,unsigned char * );// Offset=0x1c Size=0x4
    HRESULT  ( * SetMode)(struct IXAudioRouterEffect * ,unsigned char );// Offset=0x20 Size=0x4
    HRESULT  ( * GetChannelMap)(struct IXAudioRouterEffect * ,struct XAUDIOCHANNELMAP * ,unsigned long ,unsigned long * );// Offset=0x24 Size=0x4
    HRESULT  ( * SetChannelMap)(struct IXAudioRouterEffect * ,struct XAUDIOCHANNELMAP * );// Offset=0x28 Size=0x4
    HRESULT  ( * GetChannelVolume)(struct IXAudioRouterEffect * ,struct XAUDIOCHANNELVOLUME * );// Offset=0x2c Size=0x4
    HRESULT  ( * SetChannelVolume)(struct IXAudioRouterEffect * ,struct XAUDIOCHANNELVOLUME * );// Offset=0x30 Size=0x4
};

struct UVBASE_ENUMERATEVOICECHATSPARAM// Size=0xc (Id=3635)
{
    unsigned long dwUserIndex;// Offset=0x0 Size=0x4
    struct VOICECHATINFO * pVoiceChats;// Offset=0x4 Size=0x4
    unsigned long * pdwUsed;// Offset=0x8 Size=0x4
};

struct XAUDIOVOICEOUTPUT// Size=0x8 (Id=3636)
{
    unsigned char EntryCount;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    struct XAUDIOVOICEOUTPUTENTRY * paEntries;// Offset=0x4 Size=0x4
};

struct tWAVEFORMATEX// Size=0x12 (Id=3637)
{
    unsigned short wFormatTag;// Offset=0x0 Size=0x2
    unsigned short nChannels;// Offset=0x2 Size=0x2
    unsigned long nSamplesPerSec;// Offset=0x4 Size=0x4
    unsigned long nAvgBytesPerSec;// Offset=0x8 Size=0x4
    unsigned short nBlockAlign;// Offset=0xc Size=0x2
    unsigned short wBitsPerSample;// Offset=0xe Size=0x2
    unsigned short cbSize;// Offset=0x10 Size=0x2
};

struct XAUDIOSOURCEFXINIT// Size=0x50 (Id=3638)
{
    struct XAUDIOFXINIT EffectHeader;// Offset=0x0 Size=0x8
    struct XAUDIOSOURCEFORMAT Format;// Offset=0x8 Size=0x38
    float MaxPitchShift;// Offset=0x40 Size=0x4
    unsigned char MaxPacketCount;// Offset=0x44 Size=0x1
    unsigned char Flags;// Offset=0x45 Size=0x1
    unsigned char __align0[2];// Offset=0x46 Size=0x2
    void  ( * pfnPacketCompletionCallback)(struct XAUDIOSOURCEFXPACKETCALLBACK * );// Offset=0x48 Size=0x4
    void  ( * pfnPacketLoopCallback)(struct XAUDIOSOURCEFXPACKETCALLBACK * );// Offset=0x4c Size=0x4
};

struct XAUDIOFXUNREGISTER// Size=0x8 (Id=3639)
{
    unsigned char EffectCount;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    unsigned char * paEffectIds;// Offset=0x4 Size=0x4
};

struct IXAudioRenderEffect// Size=0x4 (Id=3640)
{
    struct IXAudioRenderEffectVtbl * lpVtbl;// Offset=0x0 Size=0x4
};

struct XAUDIOVOICEOUTPUTVOLUME// Size=0x8 (Id=3641)
{
    unsigned char EntryCount;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    struct XAUDIOVOICEOUTPUTVOLUMEENTRY * paEntries;// Offset=0x4 Size=0x4
};

struct XAUDIOFRAMEBUFDATA// Size=0xc (Id=3642)
{
    union XAUDIOFORMAT Format;// Offset=0x0 Size=0x8
    float * pSampleBuffer;// Offset=0x8 Size=0x4
};

struct JBPACKET// Size=0x20 (Id=3643)
{
    union // Size=0x18 (Id=0)
    {
        struct XMEDIAPACKET XMediaPacket;// Offset=0x0 Size=0x18
        long Status;// Offset=0x0 Size=0x4
        unsigned long Offset;// Offset=0x4 Size=0x4
        unsigned char * Buffer;// Offset=0x8 Size=0x4
        unsigned long Length;// Offset=0xc Size=0x4
        unsigned long Resrvd;// Offset=0x10 Size=0x4
        enum XMEDIAFORMAT Format;// Offset=0x14 Size=0x4
    };
    unsigned long long Timestamp;// Offset=0x18 Size=0x8
};

struct UVBASE_ENUMERATECHANNELSPARAM// Size=0x8 (Id=3644)
{
    struct UVCHANNELINFO * pChannelInfo;// Offset=0x0 Size=0x4
    struct UVCHANNELID * pActiveChannel;// Offset=0x4 Size=0x4
};

struct tm// Size=0x24 (Id=3645)
{
    int tm_sec;// Offset=0x0 Size=0x4
    int tm_min;// Offset=0x4 Size=0x4
    int tm_hour;// Offset=0x8 Size=0x4
    int tm_mday;// Offset=0xc Size=0x4
    int tm_mon;// Offset=0x10 Size=0x4
    int tm_year;// Offset=0x14 Size=0x4
    int tm_wday;// Offset=0x18 Size=0x4
    int tm_yday;// Offset=0x1c Size=0x4
    int tm_isdst;// Offset=0x20 Size=0x4
};

enum RecordType
{
    Record_End=0,
    Record_Version=1,
    Record_RestoreRanges=2,
    Record_RangeError=3,
    Record_FrontBuffer=4,
    Record_InitialMemory=5,
    Record_CpuModifiedMemory=6,
    Record_CommandBuffer=7,
    Record_XpsMemory=8,
    Record_FenceAddress=9,
    Record_MAX=10
};

enum CP_OP
{
    CP_OP_NOP=16,
    CP_OP_PAINT=145,
    CP_OP_SMALL_TEXT=147,
    CP_OP_BITBLT=146,
    CP_OP_HOSTDATA_BLT=148,
    CP_OP_POLYLINE=149,
    CP_OP_POLYSCANLINES=152,
    CP_OP_NEXTCHAR=25,
    CP_OP_PLY_NEXTSCAN=29,
    CP_OP_SET_SCISSORS=30,
    CP_OP_REG_RMW=33,
    CP_OP_PAINT_MULTI=154,
    CP_OP_BITBLT_MULTI=155,
    CP_OP_TRANS_BITBLT=156,
    CP_OP_WAIT_FOR_IDLE=38,
    CP_OP_LOAD_PALETTE=44,
    CP_OP_3D_DRAW_INDX_2=54,
    CP_OP_MPEG_INDEX=58,
    CP_OP_DRAW_INDX=34,
    CP_OP_VIZ_QUERY=35,
    CP_OP_LOAD_EXECUTE=36,
    CP_OP_SET_STATE=37,
    CP_OP_IM_LOAD=39,
    CP_OP_IM_LOAD_IMMEDIATE=43,
    CP_OP_SET_CONSTANT=45,
    CP_OP_CONST_PREFETCH=73,
    CP_OP_LOAD_ALU_CONSTANT=47,
    CP_OP_INVALIDATE_STATE=59,
    CP_OP_WAIT_REG_MEM=60,
    CP_OP_WAIT_REG_EQ=82,
    CP_OP_WAIT_REG_GTE=83,
    CP_OP_MEM_WRITE=61,
    CP_OP_COND_WRITE=69,
    CP_OP_EVENT_WRITE=70,
    CP_OP_EVENT_WRITE_SHD=88,
    CP_OP_EVENT_WRITE_CFL=89,
    CP_OP_EVENT_WRITE_SER=90,
    CP_OP_EVENT_WRITE_ZPD=91,
    CP_OP_REG_TO_MEM=62,
    CP_OP_INDIRECT_BUFFER=63,
    CP_OP_INDIRECT_BUFFER_PFD=55,
    CP_OP_CP_INTERRUPT=64,
    CP_OP_CPU_INTERRUPT=84,
    CP_OP_HOSTDATA_BLT2=193,
    CP_OP_HOSTDATA_BLT_PNTR=194,
    CP_OP_IB_PREAMBLE=67,
    CP_OP_IB_PREFETCH_START=22,
    CP_OP_IB_PREFETCH_END=23,
    CP_OP_SUBLK_PREFETCH=31,
    CP_OP_INSTR_PREFETCH=32,
    CP_OP_INSTR_MATCH=71,
    CP_OP_MICRO_PREFETCH=68,
    CP_OP_INCR_UPDATE_STATE=85,
    CP_OP_INCR_UPDATE_CONST=86,
    CP_OP_INCR_UPDATE_INSTR=87,
    CP_OP_ME_INIT=72,
    CP_OP_GRADFILL_3D=202,
    CP_OP_ALPHABLEND_3D=203,
    CP_OP_AAFONT=205,
    CP_OP_MEM_WRITE_CNTR=79,
    CP_OP_OLD_SET_BIN_MASK=80,
    CP_OP_OLD_SET_BIN_SELECT=81,
    CP_OP_TYPE0=125,
    CP_OP_TYPE2=126,
    CP_OP_CONTEXT_UPDATE=94,
    CP_OP_SET_BIN_MASK_LO=96,
    CP_OP_SET_BIN_MASK_HI=97,
    CP_OP_SET_BIN_SELECT_LO=98,
    CP_OP_SET_BIN_SELECT_HI=99
};

enum _PixDataOpcodesType
{
    PIXOP_Clear=0,
    PIXOP_DrawVert=1048577,
    PIXOP_DrawVertUP=2,
    PIXOP_DrawIVert=1048579,
    PIXOP_DrawIVertUP=4,
    PIXOP_Swap=5,
    PIXOP_VBlank=6,
    PIXOP_VBlankMissed=7,
    PIXOP_VBlankSwap=8,
    PIXOP_ActiveResourceLock=9,
    PIXOP_ResourceLock=10,
    PIXOP_PrimaryOverrun=11,
    PIXOP_SecondaryOverrun=12,
    PIXOP_BlockOnTime=13,
    PIXOP_BlockUntilIdle=14,
    PIXOP_SwapThrottle=15,
    PIXOP_LockVertex=16,
    PIXOP_LockIndex=17,
    PIXOP_LockTexture=18,
    PIXOP_LockSurface=19,
    PIXOP_UserEvent=20,
    PIXOP_UserMarker=21,
    PIXOP_UserString=22,
    PIXOP_Resolve=1048599,
    PIXOP_Last=24,
    PIXOP_QPCFreq=25,
    PIXOP_SingleR300=26,
    PIXOP_CModel=27,
    PIXOP_CModelFrame=28,
    PIXOP_CModelStatsColumn=29,
    PIXOP_CModelImage=30,
    PIXOP_CModelCompressedImage=31,
    PIXOP_CModelData=32,
    PIXOP_ClearF=1048609,
    PIXOP_CModelRenderData=34,
    PIXOP_EmulatorImageNative=35,
    PIXOP_EmulatorCompressedImageNative=36,
    PIXOP_XPS=37,
    PIXOP_BlockOnResourceRelease=38,
    PIXOP_BlockOnVertexBufferRelease=39,
    PIXOP_BlockOnIndexBufferRelease=40,
    PIXOP_BlockOnTextureRelease=41,
    PIXOP_BlockOnSurfaceRelease=42,
    PIXOP_BlockOnVertexShaderRelease=43,
    PIXOP_BlockOnPixelShaderRelease=44,
    PIXOP_BlockOnResourceLock=45,
    PIXOP_BlockOnVertexBufferLock=46,
    PIXOP_BlockOnIndexBufferLock=47,
    PIXOP_BlockOnTextureLock=48,
    PIXOP_BlockOnResourceBusy=49,
    PIXOP_SysMon=50,
    PIXOP_LockVolume=51,
    PIXOP_GPU=52,
    PIXOP_DrawTessVertices=1048629,
    PIXOP_DrawITessVertices=1048630,
    PIXOP_GPUSync=1048631,
    PIXOP_Kickoff=56,
    PIXOP_Synchronize=57,
    PIXOP_BeginVertices=1048634,
    PIXOP_SyncToVBlank=1048635,
    PIXOP_GPUBegin=1048636,
    PIXOP_PIXOverhead=61,
    PIXOP_PIXThreadPage0=62,
    PIXOP_PIXThreadPage1=63,
    PIXOP_PIXThreadPage2=64,
    PIXOP_PIXThreadPage3=65,
    PIXOP_PIXThreadPage4=66,
    PIXOP_PIXThreadPage5=67,
    PIXOP_PIXThreadedTiming=68,
    PIXOP_ContextSwap=69,
    PIXOP_InitialThreads=70,
    PIXOP_XAMCommandBuffer=1048647,
    PIXOP_Truncated=72,
    PIXOP_BeginIVertices=1048649,
    PIXOP_ThreadName=74,
    PIXOP_BatchCommands=75,
    PIXOP_TimeStamp=76,
    PIXOP_ImageBufferHeader=77,
    PIXOP_ImageHeaderName=78,
    PIXOP_EDRAMClear=79,
    PIXOP_InsertCallback=1048656,
    PIXOP_SetRenderTarget=81,
    PIXOP_BeginTiling=82,
    PIXOP_EndTiling=83,
    PIXOP_BeginZPass=84,
    PIXOP_EndZPass=85,
    PIXOP_TileCount=86,
    PIXOP_BlockOnCommandBufferRelease=87,
    PIXOP_BlockOnCommandBufferLock=88,
    PIXOP_BlockOnConstantBufferRelease=89,
    PIXOP_BlockOnConstantBufferLock=90,
    PIXOP_LockConstantBuffer=91,
    PIXOP_OnePassTileCount=92,
    PIXOP_UpdbData=93,
    PIXOP_DrPixCounterData=94,
    PIXOP_Chunk=95,
    PIXOP_Timebase=96,
    PIXOP_SysMonState=97,
    PIXOP_DrPixRawCounterData=98,
    PIXOP_FrameTimestamp=99,
    PIXOP_MissingCounterData=100,
    PIXOP_UserCounter=101,
    PIXOP_ModuleInfo=102,
    PIXOP_ModulePdbInfo=103,
    PIXOP_InsertBlockOnAsyncResources=1048680,
    PIXOP_RawDataFile=105,
    PIXOP_MovieGammaRamp=106,
    PIXOP_MovieVideoData=107,
    PIXOP_MovieAudioData=108,
    PIXOP_MovieRestart=109,
    PIXOP_Nop=110,
    PIXOP_ResourceCapture=111,
    PIXOP_ResourceThumbnailDescription=112,
    PIXOP_ResourceThumbnailData=113,
    PIXOP_ResourceEndAutoSave=114,
    PIXOP_ResourceTextureNameGroup=115,
    PIXOP_ResourceTextureDimensionsGroup=116,
    PIXOP_ResourceNewTextureUsageInfo=117,
    PIXOP_ResourceUpdateTextureUsageInfo=118,
    PIXOP_ResourceNewUnusedTextureInfo=119,
    PIXOP_ResourceUpdateUnusedTextureInfo=120,
    PIXOP_ResourceError=121,
    PIXOP_ResourceTextureNameAddr=122,
    PIXOP_ResourceNewResolveTargetInfo=123,
    PIXOP_ResourceUpdateResolveTargetInfo=124,
    PIXOP_ResourceScreenshotDescription=125,
    PIXOP_ResourceScreenshotData=126
};

enum RecordResourceType
{
    Resource_VertexBuffer=0,
    Resource_IndexBuffer=1,
    Resource_Texture=2,
    Resource_Context=3,
    Resource_Shader=4,
    Resource_Export=5,
    Resource_AluConstants=6,
    Resource_MAX=7
};

enum PIXMeta
{
    PIXMeta_SetResolveDestTexture=65536,
    PIXMeta_ClearResolveDestTexture=65537,
    PIXMeta_Clear=65538,
    PIXMeta_DrawPrimitiveUP=65539,
    PIXMeta_DrawIndexedPrimitiveUP=65540,
    PIXMeta_BeginVertices=65541,
    PIXMeta_BeginIndexedVertices=65542,
    PIXMeta_GameCertEdramClear=65543,
    PIXMeta_Unused4=65544,
    PIXMeta_OobComment=65545,
    PIXMeta_OobMetaData=65546,
    PIXMeta_SecondaryRingBuffer=65547,
    PIXMeta_BeginIndirectBuffer=65548,
    PIXMeta_EndIndirectBuffer=65549,
    PIXMeta_PatchVertexShaderToMatchPixelShader=65550,
    PIXMeta_PatchVertexShaderToMatchVertexDeclarationFast=65551,
    PIXMeta_PatchVertexShaderToMatchVertexDeclarationSlow=65552,
    PIXMeta_VertexShaderDebuggerHint=65553,
    PIXMeta_PixelShaderDebuggerHint=65554,
    PIXMeta_VertexShaderDebuggerHintShort=65555,
    PIXMeta_PixelShaderDebuggerHintShort=65556,
    PIXMeta_UserBeginEvent=65557,
    PIXMeta_UserEndEvent=65558,
    PIXMeta_SetRenderTarget=65559,
    PIXMeta_PatchVertexShaderToMatchPixelShader_Undo=65560,
    PIXMeta_SetShaderGPRAllocationBegin=65561,
    PIXMeta_SetShaderGPRAllocationEnd=65562,
    PIXMeta_BeginTiling=65563,
    PIXMeta_EndTiling=65564,
    PIXMeta_UserMarkerEvent=65565,
    PIXMeta_BeginZPass=65566,
    PIXMeta_EndZPass=65567,
    PIXMeta_XpsBegin=65568,
    PIXMeta_XpsEnd=65569,
    PIXMeta_BeginRunCommandBuffer=65570,
    PIXMeta_EndRunCommandBuffer=65571,
    PIXMeta_FXLiteDependency=65572,
    PIXMeta_IndirectLoadShader=65573,
    PIXMeta_IndirectLoadAluConstant=65574,
    PIXMeta_IndirectReserved=65575,
    PIXMeta_BeginClear=65576,
    PIXMeta_EndClear=65577,
    PIXMeta_TileInfo=65578,
    PIXMeta_DisableTiling=65579,
    PIXMeta_ReenableTiling=65580,
    PIXMeta_BeginExport_Begin=65581,
    PIXMeta_BeginExport_End=65582,
    PIXMeta_EndExport_Begin=65583,
    PIXMeta_EndExport_End=65584,
    PIXMeta_InsertBlockOnAsyncResourcesBegin=65585,
    PIXMeta_InsertBlockOnAsyncResourcesEnd=65586,
    PIXMeta_IgnoreTexture=65587,
    PIXMeta_StopIgnoringTexture=65588,
    PIXMeta_IgnoreMemoryRange=65589,
    PIXMeta_StopIgnoringMemoryRange=65590,
    PIXMeta_SetTextureName=65591,
    PIXMeta_ReportNewTexture=65592,
    PIXMeta_ReportDeletedTexture=65593,
    PIXMeta_EndResourceCapture=65594,
    PIXMeta_SynchronizeResourceCaptureThreads=65595,
    PIXMeta_SwapTexture=65596
};

struct _D3DFILTER_PARAMETERS// Size=0xc (Id=3651)
{
    float Nyquist;// Offset=0x0 Size=0x4
    float FlickerFilter;// Offset=0x4 Size=0x4
    union // Size=0xc (Id=0)
    {
        float Beta;// Offset=0x8 Size=0x4
        float Sigma;// Offset=0x8 Size=0x4
        float Lobe;// Offset=0x8 Size=0x4
    };
};

struct _D3DPRIVATE_RECT// Size=0x10 (Id=3652)
{
    long x1;// Offset=0x0 Size=0x4
    long y1;// Offset=0x4 Size=0x4
    long x2;// Offset=0x8 Size=0x4
    long y2;// Offset=0xc Size=0x4
};

struct PIX_FRAME_DIFF// Size=0x4 (Id=3653)
{
    struct // Size=0x4 (Id=0)
    {
        int Diff:24;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x18
    };
};

class XConfigStatisticSettings// Size=0x1 (Id=3654)
{
    public long GetXUIDMACAddress(char * );
    public long SetXUIDMACAddress(char * );
    public long GetXUIDCount(unsigned long & );
    public long SetXUIDCount(const unsigned long );
    public long GetODDFailures(unsigned char * );
    public long SetODDFailures(unsigned char * );
    public long GetBugCheckData(unsigned char * );
    public long SetBugCheckData(unsigned char * );
    public long GetTemperatureData(unsigned char * );
    public long SetTemperatureData(unsigned char * );
    public long GetHDDSmartData(char * );
    public long SetHDDSmartData(char * );
    public long GetUEMErrors(char * );
    public long SetUEMErrors(char * );
    public long GetFPMErrors(char * );
    public long SetFPMErrors(char * );
    public long GetLastReportTime(unsigned long long & );
    public long SetLastReportTime(const unsigned long long );
};

struct _D3DPRIVATE_SCALER_PARAMETERS// Size=0x38 (Id=3655)
{
    struct _D3DPRIVATE_RECT ScalerSourceRect;// Offset=0x0 Size=0x10
    unsigned long ScaledOutputWidth;// Offset=0x10 Size=0x4
    unsigned long ScaledOutputHeight;// Offset=0x14 Size=0x4
    enum _D3DFILTER_TYPE VerticalFilterType;// Offset=0x18 Size=0x4
    struct _D3DFILTER_PARAMETERS VerticalFilterParameters;// Offset=0x1c Size=0xc
    enum _D3DFILTER_TYPE HorizontalFilterType;// Offset=0x28 Size=0x4
    struct _D3DFILTER_PARAMETERS HorizontalFilterParameters;// Offset=0x2c Size=0xc
};

class XConfigXPlayerSettings// Size=0x1 (Id=3656)
{
    public long GetVolumeId(unsigned long ,unsigned long ,char * ,unsigned long );
    public long SetVolumeId(unsigned long ,unsigned long ,const char * ,unsigned long );
    public long GetBookmark(unsigned long ,unsigned long ,char * ,unsigned long );
    public long SetBookmark(unsigned long ,unsigned long ,const char * ,unsigned long );
};

struct RecordHeader// Size=0x14 (Id=3657)
{
    enum RecordType Type;// Offset=0x0 Size=0x4
    unsigned long Size;// Offset=0x4 Size=0x4
    unsigned long Offset;// Offset=0x8 Size=0x4
    unsigned long ModifyFence;// Offset=0xc Size=0x4
    unsigned long KickOffFence;// Offset=0x10 Size=0x4
};

enum VGT_DI_MAJOR_MODE_SELECT
{
    DI_MAJOR_MODE_0=0,
    DI_MAJOR_MODE_1=1
};

struct _XBMOVIE_CAPTURE_FRAME_INFO// Size=0x10 (Id=3659)
{
    unsigned long Identifier;// Offset=0x0 Size=0x4
    unsigned long Flags;// Offset=0x4 Size=0x4
    unsigned long VideoTimeStamp;// Offset=0x8 Size=0x4
    unsigned long AudioSampleCount;// Offset=0xc Size=0x4
};

class XConfigSystemSettings// Size=0x1 (Id=3660)
{
    public long GetAlarmTime(unsigned long long & );
    public long SetAlarmTime(const unsigned long long );
    public long GetPreviousFlashVersion(unsigned long & );
    public long SetPreviousFlashVersion(const unsigned long );
};

struct _XCONFIG_PLAYTIMERDATA// Size=0x14 (Id=3661)
{
    union _ULARGE_INTEGER uliResetDate;// Offset=0x0 Size=0x8
    unsigned long dwPlayTimerFrequency;// Offset=0x8 Size=0x4
    unsigned long dwTotalPlayTime;// Offset=0xc Size=0x4
    unsigned long dwRemainingPlayTime;// Offset=0x10 Size=0x4
};

class XConfigConsoleSettings// Size=0x1 (Id=3662)
{
    public long GetScreenSaver(short & );
    public long SetScreenSaver(const short );
    public long SetMediaDisableAutoLaunch(const short );
    public long GetMediaDisableAutoLaunch(short & );
    public long GetAutoShutOff(short & );
    public long SetAutoShutOff(const short );
    public long GetCameraSettings(unsigned long & );
    public long SetCameraSettings(const unsigned long );
    public long GetPlayTimerData(struct _XCONFIG_PLAYTIMERDATA & );
    public long SetPlayTimerData(const struct _XCONFIG_PLAYTIMERDATA );
    public long SetKeyboardLayout(const short );
    public long GetKeyboardLayout(short & );
};

struct RecordRangeError// Size=0xc (Id=3663)
{
    unsigned long Primitive;// Offset=0x0 Size=0x4
    enum RecordResourceType Type;// Offset=0x4 Size=0x4
    unsigned long Offset;// Offset=0x8 Size=0x4
};

class XConfigStaticSettings// Size=0x1 (Id=3664)
{
    public long GetSMCConfig(char * );
    public long SetSMCConfig(char * );
    public long GetFirstPowerOnDate(char * );
    public long SetFirstPowerOnDate(char * );
};

class XConfigMediaCenterSettings// Size=0x1 (Id=3665)
{
    public long GetMediaPlayer(char * );
    public long SetMediaPlayer(char * );
    public long GetXeSledVersion(char * );
    public long SetXeSledVersion(char * );
    public long GetXeSledTrustSecret(char * );
    public long SetXeSledTrustSecret(char * );
    public long GetXeSledTrustCode(char * );
    public long SetXeSledTrustCode(char * );
    public long GetXeSledHostID(char * );
    public long SetXeSledHostID(char * );
    public long GetXeSledKey(char * );
    public long SetXeSledKey(char * );
    public long GetXeSledHostMACAddress(char * );
    public long SetXeSledHostMACAddress(char * );
    public long GetServerUUID(char * );
    public long SetServerUUID(char * );
    public long GetServerName(char * );
    public long SetServerName(char * );
    public long GetServerFlag(char * );
    public long SetServerFlag(char * );
};

struct _CERTINIT// Size=0x1c (Id=3666)
{
    unsigned long  ( * g_pfnCertTell)(unsigned long ,void * );// Offset=0x0 Size=0x4
    void  ( * g_pfnCertSetEvent)(enum _CertEvents );// Offset=0x4 Size=0x4
    void *  ( * g_pfnCertMemAlloc)(unsigned long );// Offset=0x8 Size=0x4
    void *  ( * g_pfnCertMemAllocNoZero)(unsigned long );// Offset=0xc Size=0x4
    void  ( * g_pfnCertMemFree)(void * );// Offset=0x10 Size=0x4
    void  ( * g_pfnCertReadReq)(unsigned long ,unsigned long );// Offset=0x14 Size=0x4
    void  ( * g_pfnCertReadComplete)(long );// Offset=0x18 Size=0x4
};

class XConfigSecuredSettings// Size=0x1 (Id=3667)
{
    public long GetConsoleSerialNumber(char * );
    public long GetMoboSerialNumber(char * );
    public long GetMACAddress(unsigned char * );
    public long SetMACAddress(unsigned char * );
    public long GetAVRegion(unsigned long & );
    public long SetAVRegion(const unsigned long );
    public long GetSystemFlags(unsigned long & );
    public long SetSystemFlags(const unsigned long );
    public long GetGameRegion(unsigned short & );
    public long SetGameRegion(const unsigned short );
    public long GetDVDRegion(unsigned long & );
    public long SetDVDRegion(const unsigned long );
    public long GetResetKey(unsigned long & );
    public long SetResetKey(const unsigned long );
};

enum _PixGroupsType
{
    PIXGROUP_GraphicsTiming=1,
    PIXGROUP_GraphicsCModel=2,
    PIXGROUP_UserTiming=4,
    PIXGROUP_UserOther=8,
    PIXGROUP_XAudioTiming=16,
    PIXGROUP_Resource=32
};

struct _UCODE_PASS_HEADER// Size=0x8 (Id=3669)
{
    unsigned long definitionTableOffset;// Offset=0x0 Size=0x4
    unsigned long microcodeOffset;// Offset=0x4 Size=0x4
};

enum _D3DFILTER_TYPE
{
    D3DFILTER_DEFAULT=0,
    D3DFILTER_CATMULL=1,
    D3DFILTER_KAISER=2,
    D3DFILTER_GAUSSIAN=3,
    D3DFILTER_MITCHELL=4,
    D3DFILTER_LANCZOS=5,
    D3DFILTER_BILINEAR=6,
    D3DFILTER_POINT=7,
    D3DFILTER_FORCE_DWORD=134217727
};

union _UCODE_CONTROLFLOWCONSTANTSMASK// Size=0x4 (Id=3671)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned int IntegerConstantsUsed:16;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x10
        unsigned int BooleanConstantsUsed:4;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x4
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

class XConfigIPTVSettings// Size=0x1 (Id=3672)
{
    public long GetServiceProviderName(wchar_t * );
    public long SetServiceProviderName(wchar_t * );
    public long GetProvisioningServerURL(wchar_t * );
    public long SetProvisioningServerURL(wchar_t * );
    public long GetSupportInfo(wchar_t * );
    public long SetSupportInfo(wchar_t * );
    public long GetBootstrapServerURL(wchar_t * );
    public long SetBootstrapServerURL(wchar_t * );
};

struct XShaderPDBHint// Size=0xc (Id=3673)
{
    unsigned long Hint[3];// Offset=0x0 Size=0xc
};

struct XMicrocodeBuilder// Size=0x1 (Id=3674)
{
    unsigned long AddRef();
    unsigned long Release();
    void Initialize(unsigned long );
    void StartPass(unsigned long );
    void EndPass();
    void SetProgramControl(union GPU_PROGRAMCONTROL ,union GPU_CONTEXTMISC );
    void SetPDBHint(struct XShaderPDBHint * );
    void SetPDBBuilder(struct IShaderPDBBuilder * );
    void DefineBooleanConstant(unsigned long ,int );
    void DefineIntegerConstant(unsigned long ,int * );
    void DefineFloatConstant(unsigned long ,float * );
    void SetConstantTable(void * ,unsigned long );
    void DeclareIndexSemantic(unsigned long ,unsigned long ,unsigned long );
    void DeclareInterpolatorSemantic(unsigned long ,unsigned long ,unsigned long );
    unsigned long AddTFetch(union GPUTEXTURE_FETCH_INSTRUCTION * );
    unsigned long AddVFetch(union GPUVERTEX_FETCH_INSTRUCTION * ,int );
    unsigned long AddVFetchWithSemantic(union GPUVERTEX_FETCH_INSTRUCTION * ,unsigned long ,int );
    unsigned long AddALU(union GPUALU_INSTRUCTION * );
    unsigned long AddFlow(union GPUFLOW_INSTRUCTION * );
    void AddDebuggerHint(unsigned long ,char * );
    void SetSerialize(unsigned long ,int );
    int GetSerialize(unsigned long );
    unsigned long GetNextFlowAddress();
    unsigned long GetNextFlowAddressWithoutSerializing();
    unsigned long GetNextALUAddress();
    unsigned long GetCurrentFlowAddress();
    unsigned long GetCurrentFlowAddressWithoutSerializing();
    union GPUFLOW_INSTRUCTION * GetFlow(unsigned long );
    union GPUSHADER_INSTRUCTION * GetALU(unsigned long ,int * );
    unsigned long GetLastExecALUCount();
    void Finish();
    unsigned long GetMicrocodeSize();
    HRESULT GetMicrocode(void * ,unsigned long ,unsigned long * );
};

struct _UCODE_R500VSUCODE// Size=0x24 (Id=3675)
{
    struct _UCODE_R500UCODE_COMMON common;// Offset=0x0 Size=0x18
    unsigned long dwVSIndexDeclarationCount;// Offset=0x18 Size=0x4
    unsigned long dwVSInputDeclarationCount;// Offset=0x1c Size=0x4
    unsigned long dwVSOutputPatchCount;// Offset=0x20 Size=0x4
};

enum _CertEvents
{
    CE_D3DSwap=0,
    CE_D3DResume=1,
    CE_D3DSuspend=2
};

struct XpsGlobal// Size=0x30 (Id=3677)
{
    long Cookie;// Offset=0x0 Size=0x4
    unsigned long * pPrimaryRingBuffer;// Offset=0x4 Size=0x4
    unsigned long PrimaryRingBufferIndex;// Offset=0x8 Size=0x4
    unsigned long PrimaryRingBufferIndexMask;// Offset=0xc Size=0x4
    void  ( * pCallback)(struct D3DXpsThread * ,void * ,void * ,unsigned long );// Offset=0x10 Size=0x4
    void * pCallbackContext;// Offset=0x14 Size=0x4
    unsigned long NextInstanceIndex;// Offset=0x18 Size=0x4
    unsigned long SubmitInstanceCount;// Offset=0x1c Size=0x4
    void * pSubmitData;// Offset=0x20 Size=0x4
    unsigned long * pCommand;// Offset=0x24 Size=0x4
    long ThreadCount;// Offset=0x28 Size=0x4
    long IdleThreadCount;// Offset=0x2c Size=0x4
};

struct _UCODE_R500_DEBUGGER_HINT_HEADER// Size=0x8 (Id=3678)
{
    unsigned long Timestamp;// Offset=0x0 Size=0x4
    unsigned long HintSize;// Offset=0x4 Size=0x4
    unsigned long HintData[0];
};

struct _UCODE_HEADER// Size=0x24 (Id=3679)
{
    union UCODE_SHADER_COOKIE Cookie;// Offset=0x0 Size=0x4
    unsigned long CachedSize;// Offset=0x4 Size=0x4
    unsigned long PhysicalSize;// Offset=0x8 Size=0x4
    unsigned long DebuggerHintOffset;// Offset=0xc Size=0x4
    unsigned long constantTableOffset;// Offset=0x10 Size=0x4
    struct _UCODE_PASS_HEADER Pass[2];// Offset=0x14 Size=0x10
};

struct _UCODE_HEADER// Size=0x24 (Id=3680)
{
    union UCODE_SHADER_COOKIE Cookie;// Offset=0x0 Size=0x4
    unsigned long CachedSize;// Offset=0x4 Size=0x4
    unsigned long PhysicalSize;// Offset=0x8 Size=0x4
    unsigned long DebuggerHintOffset;// Offset=0xc Size=0x4
    unsigned long constantTableOffset;// Offset=0x10 Size=0x4
    struct _UCODE_PASS_HEADER Pass[2];// Offset=0x14 Size=0x10
};

struct IShaderPDBBuilder// Size=0x4 (Id=3681)
{
    unsigned long AddRef();
    unsigned long Release();
    void BeginPass(int );
    void EndPass(unsigned long );
    void RemapVariableRegisters(unsigned long * );
    void AddVfetch(unsigned long ,unsigned long ,unsigned long ,unsigned long ,int );
    void AddInterpolator(unsigned long ,unsigned long ,unsigned long );
    void IShaderPDBBuilder(struct IShaderPDBBuilder & );
    void IShaderPDBBuilder();
    struct IShaderPDBBuilder & operator=(struct IShaderPDBBuilder & );
};

struct IShaderPDBBuilder// Size=0x4 (Id=3682)
{
    unsigned long AddRef();
    unsigned long Release();
    void BeginPass(int );
    void EndPass(unsigned long );
    void RemapVariableRegisters(unsigned long * );
    void AddVfetch(unsigned long ,unsigned long ,unsigned long ,unsigned long ,int );
    void AddInterpolator(unsigned long ,unsigned long ,unsigned long );
    void IShaderPDBBuilder(struct IShaderPDBBuilder & );
    void IShaderPDBBuilder();
    struct IShaderPDBBuilder & operator=(struct IShaderPDBBuilder & );
};

struct XShaderPDBHint// Size=0xc (Id=3683)
{
    unsigned long Hint[3];// Offset=0x0 Size=0xc
};

struct D3D::WorkerState// Size=0xf8 (Id=3684)
{
    unsigned long TilingFlags;// Offset=0x0 Size=0x4
    unsigned long Tiles;// Offset=0x4 Size=0x4
    struct _D3DRECT TileRects[15];// Offset=0x8 Size=0xf0
};

struct D3D::RingBufferState// Size=0x18 (Id=3685)
{
    unsigned long * pRing;// Offset=0x0 Size=0x4
    unsigned long * pRingLimit;// Offset=0x4 Size=0x4
    unsigned long * pSegmentStart;// Offset=0x8 Size=0x4
    unsigned long * pNextSecondaryStart;// Offset=0xc Size=0x4
    unsigned long * pRingAlloc;// Offset=0x10 Size=0x4
    unsigned long RingWrap;// Offset=0x14 Size=0x4
};

enum D3D::LazyState
{
    Lazy_VertexShaderConstants=16384,
    Lazy_PixelShaderConstants=81920,
    Lazy_FetchConstants=204832,
    Lazy_VertexFetchConstants=198202,
    Lazy_TextureFetchConstants=203296,
    Lazy_MiscConstants=262663,
    Lazy_FlowConstants=262407,
    Lazy_Reserved0=262408,
    Lazy_LoadShaders=132139,
    Lazy_LoadPixelShader=131371,
    Lazy_LoadVertexShader=131372,
    Lazy_ZPassEdramMode=131373,
    Lazy_HiZEnable=131374,
    Lazy_DestinationPacket=135174,
    Lazy_SurfaceInfo=131334,
    Lazy_Color0Info=131335,
    Lazy_DepthInfo=131336,
    Lazy_Color1Info=131337,
    Lazy_Color2Info=131338,
    Lazy_Color3Info=131339,
    Lazy_CoherDestBase0=131340,
    Lazy_CoherDestBase1=131341,
    Lazy_CoherDestBase2=131342,
    Lazy_CoherDestBase3=131343,
    Lazy_CoherDestBase4=131344,
    Lazy_CoherDestBase5=131345,
    Lazy_CoherDestBase6=131346,
    Lazy_CoherDestBase7=131347,
    Lazy_ScreenScissorTL=131348,
    Lazy_ScreenScissorBR=131349,
    Lazy_ValuesPacket=136470,
    Lazy_MaxVtxIndx=131350,
    Lazy_MinVtxIndx=131351,
    Lazy_IndxOffset=131352,
    Lazy_MultiPrimIbResetIndx=131353,
    Lazy_ColorMask=131354,
    Lazy_BlendRed=131355,
    Lazy_BlendGreen=131356,
    Lazy_BlendBlue=131357,
    Lazy_BlendAlpha=131358,
    Lazy_Unused_Values0=131359,
    Lazy_Unused_Values1=131360,
    Lazy_Unused_Values2=131361,
    Lazy_StencilRefMaskBF=131362,
    Lazy_StencilRefMask=131363,
    Lazy_AlphaRef=131364,
    Lazy_VportXScale=131365,
    Lazy_VportXOffset=131366,
    Lazy_VportYScale=131367,
    Lazy_VportYOffset=131368,
    Lazy_VportZScale=131369,
    Lazy_VportZOffset=131370,
    Lazy_ProgramPacket=132399,
    Lazy_ProgramControl=131375,
    Lazy_ContextMisc=131376,
    Lazy_InterpolatorControl=131377,
    Lazy_Wrapping0=131378,
    Lazy_Wrapping1=131379,
    Lazy_ControlPacket=134196,
    Lazy_DepthControl=131380,
    Lazy_BlendControl0=131381,
    Lazy_ColorControl=131382,
    Lazy_HiControl=131383,
    Lazy_ClipControl=131384,
    Lazy_ModeControl=131385,
    Lazy_VteControl=131386,
    Lazy_Unused_Control0=131387,
    Lazy_EdramModeControl=131388,
    Lazy_BlendControl1=131389,
    Lazy_BlendControl2=131390,
    Lazy_BlendControl3=131391,
    Lazy_PointPacket=264210,
    Lazy_PolyOffsetFrontScale=262418,
    Lazy_PolyOffsetFrontOffset=262419,
    Lazy_PolyOffsetBackScale=262420,
    Lazy_PolyOffsetBackOffset=262421,
    Lazy_PointXRad=262422,
    Lazy_PointYRad=262423,
    Lazy_PointConstantSize=262424,
    Lazy_PointCullRad=262425,
    Lazy_TessellatorPacket=201993,
    Lazy_PointSize=196873,
    Lazy_PointMinMax=196874,
    Lazy_LineControl=196875,
    Lazy_LineStipple=196876,
    Lazy_OutputPathControl=196877,
    Lazy_HosControl=196878,
    Lazy_HosMaxTessLevel=196879,
    Lazy_HosMinTessLevel=196880,
    Lazy_HosReuseDepth=196881,
    Lazy_GroupPrimType=196882,
    Lazy_GroupFirstDecr=196883,
    Lazy_GroupDecr=196884,
    Lazy_GroupVect0Control=196885,
    Lazy_GroupVect1Control=196886,
    Lazy_GroupVect0FmtControl=196887,
    Lazy_GroupVect1FmtControl=196888,
    Lazy_Unused_Tessellator0=196889,
    Lazy_Unused_Tessellator1=196890,
    Lazy_MPassPsControl=196891,
    Lazy_VizQuery=196892,
    Lazy_Enhance=196893,
    Lazy_MiscPacket=271898,
    Lazy_ScLineControl=262426,
    Lazy_AaConfig=262427,
    Lazy_VtxControl=262428,
    Lazy_GbVertClipAdj=262429,
    Lazy_GbVertDiscAdj=262430,
    Lazy_GbHorzClipAdj=262431,
    Lazy_GbHorzDiscAdj=262432,
    Lazy_VsConst=262433,
    Lazy_PsConst=262434,
    Lazy_DebugMisc0=262435,
    Lazy_DebugMisc1=262436,
    Lazy_Unused_Misc0=262437,
    Lazy_Unused_Misc1=262438,
    Lazy_Unused_Misc2=262439,
    Lazy_Unused_Misc3=262440,
    Lazy_Unused_Misc4=262441,
    Lazy_Unused_Misc5=262442,
    Lazy_Unused_Misc6=262443,
    Lazy_AaMask=262444,
    Lazy_Unused_Misc7=262445,
    Lazy_Unused_Misc8=262446,
    Lazy_Unused_Misc9=262447,
    Lazy_VertexReuseBlockControl=262448,
    Lazy_OutDeallocControl=262449,
    Lazy_CopyControl=262450,
    Lazy_CopyDestBase=262451,
    Lazy_CopyDestPitch=262452,
    Lazy_CopyDestInfo=262453,
    Lazy_HiClear=262454,
    Lazy_DepthClear=262455,
    Lazy_ColorClear=262456,
    Lazy_ColorClearLo=262457,
    Lazy_CopyFunc=262458,
    Lazy_CopyRef=262459,
    Lazy_CopyMask=262460,
    Lazy_CopySurfaceSlice=262461,
    Lazy_SampleCountControl=262462,
    Lazy_SampleCountAddress=262463,
    Lazy_ClipPlanes=263689,
    Lazy_ClipPlane0=262409,
    Lazy_ClipPlane1=262410,
    Lazy_ClipPlane2=262411,
    Lazy_ClipPlane3=262412,
    Lazy_ClipPlane4=262413,
    Lazy_ClipPlane5=262414,
    Lazy_Terminator=262415
};

struct D3D::SegmentCallNode// Size=0x8 (Id=3687)
{
    unsigned long m_dwNext;// Offset=0x0 Size=0x4
    unsigned long m_Count;// Offset=0x4 Size=0x4
    struct D3D::SegmentCall m_Segment[0];
};

struct D3D::BeginShaderConstantData// Size=0x20 (Id=3688)
{
    struct __vector4 m_EndShaderConstantF;// Offset=0x0 Size=0x10
    struct __vector4 * m_pEndShaderConstantF;// Offset=0x10 Size=0x4
    struct __vector4 * m_pCached;// Offset=0x14 Size=0x4
    struct __vector4 * m_pWriteCombined;// Offset=0x18 Size=0x4
    unsigned long m_Count;// Offset=0x1c Size=0x4
};

struct D3D::CQueryBlock// Size=0x10 (Id=3689)
{
    unsigned char m_Groups[8];// Offset=0x0 Size=0x8
    unsigned long * m_pBlock;// Offset=0x8 Size=0x4
    struct D3D::CQueryBlock * m_pNext;// Offset=0xc Size=0x4
};

struct D3D::WriteBacks// Size=0x60 (Id=3690)
{
    unsigned long GpuFence;// Offset=0x0 Size=0x4
    unsigned long GpuPosition;// Offset=0x4 Size=0x4
    unsigned long SystemSwapWritebacks[4];// Offset=0x8 Size=0x10
    unsigned long DumpLastTracePoint;// Offset=0x18 Size=0x4
    unsigned long ScratchRegister;// Offset=0x1c Size=0x4
    unsigned long Unused;// Offset=0x20 Size=0x4
    unsigned long XpsWriteBack[6];// Offset=0x24 Size=0x18
    unsigned long PrimaryRingBufferReadIndex;// Offset=0x3c Size=0x4
    unsigned long XamGPUBuffer[8];// Offset=0x40 Size=0x20
};

struct D3D::NonSnoopedWriteBacks// Size=0x20 (Id=3691)
{
    unsigned long CallbackSemaphore;// Offset=0x0 Size=0x4
    unsigned long PresentIntervalSemaphore;// Offset=0x4 Size=0x4
    unsigned long HangTracking;// Offset=0x8 Size=0x4
    unsigned long CommandBufferAddress;// Offset=0xc Size=0x4
    unsigned long CallbackAddress;// Offset=0x10 Size=0x4
    unsigned long CallbackContext;// Offset=0x14 Size=0x4
    unsigned long PixMetaData;// Offset=0x18 Size=0x4
    unsigned long CommandBufferMarker;// Offset=0x1c Size=0x4
};

struct _D3DPRIVATE_SCALER_PARAMETERS// Size=0x38 (Id=3692)
{
    struct _D3DPRIVATE_RECT ScalerSourceRect;// Offset=0x0 Size=0x10
    unsigned long ScaledOutputWidth;// Offset=0x10 Size=0x4
    unsigned long ScaledOutputHeight;// Offset=0x14 Size=0x4
    enum _D3DFILTER_TYPE VerticalFilterType;// Offset=0x18 Size=0x4
    struct _D3DFILTER_PARAMETERS VerticalFilterParameters;// Offset=0x1c Size=0xc
    enum _D3DFILTER_TYPE HorizontalFilterType;// Offset=0x28 Size=0x4
    struct _D3DFILTER_PARAMETERS HorizontalFilterParameters;// Offset=0x2c Size=0xc
};

struct D3D::SegmentCall// Size=0x8 (Id=3693)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long m_Count:24;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x18
        unsigned long m_QueueCommand:8;// Offset=0x0 Size=0x4 BitOffset=0x18 BitSize=0x8
    };
    unsigned long m_Address;// Offset=0x4 Size=0x4
};

class D3D::CDevice : public D3DDevice// Size=0x5e00 (Id=3694)
{
    union // Size=0x5dc8 (Id=0)
    {
        unsigned char __align0[10880];// Offset=0x0 Size=0x2a80
        unsigned long long m_Version;// Offset=0x2a80 Size=0x8
        unsigned long m_ThreadId;// Offset=0x2a88 Size=0x4
        int m_IsXamProcess;// Offset=0x2a8c Size=0x4
        struct D3D::WriteBacks * m_pWriteBacks;// Offset=0x2a90 Size=0x4
        struct D3D::NonSnoopedWriteBacks * m_pNonSnoopedWriteBacks;// Offset=0x2a94 Size=0x4
        unsigned long CallbackSemaphoreLock;// Offset=0x2a98 Size=0x4
        unsigned long m_CpuFence;// Offset=0x2a9c Size=0x4
        unsigned long m_CommandBufferTimeStampMask;// Offset=0x2aa0 Size=0x4
        union GPU_BCCONTROL m_BcControl;// Offset=0x2aa4 Size=0x4
        union GPU_GPRMANAGEMENT m_GprManagement;// Offset=0x2aa8 Size=0x4
        union GPU_INSTSTOREMANAGEMENT m_ShaderStoreManagement;// Offset=0x2aac Size=0x4
        unsigned long m_LastInsertFence;// Offset=0x2ab0 Size=0x4
        unsigned long m_TilePredication;// Offset=0x2ab4 Size=0x4
        unsigned long m_RunPredication;// Offset=0x2ab8 Size=0x4
        struct // Size=0x5 (Id=0)
        {
            bool m_CommandBufferDevice:1;// Offset=0x2abc Size=0x1 BitOffset=0x7 BitSize=0x1
            bool m_ZPassBracket:1;// Offset=0x2abc Size=0x1 BitOffset=0x6 BitSize=0x1
            bool m_TilingBracket:1;// Offset=0x2abc Size=0x1 BitOffset=0x5 BitSize=0x1
            bool m_TilingSurfaceOverride:1;// Offset=0x2abc Size=0x1 BitOffset=0x4 BitSize=0x1
            bool m_TilingPredicateWhole:1;// Offset=0x2abc Size=0x1 BitOffset=0x3 BitSize=0x1
            bool m_CullGeometryVisibilitySurveyBracket:1;// Offset=0x2abc Size=0x1 BitOffset=0x2 BitSize=0x1
            bool m_XpsBracket:1;// Offset=0x2abc Size=0x1 BitOffset=0x1 BitSize=0x1
            bool m_PredicateDrawPrims:1;// Offset=0x2abc Size=0x1 BitOffset=0x0 BitSize=0x1
            bool m_PendingInvokeRenderPass:1;// Offset=0x2abd Size=0x1 BitOffset=0x7 BitSize=0x1
            bool m_AutomaticInvokeRenderPass:1;// Offset=0x2abd Size=0x1 BitOffset=0x6 BitSize=0x1
            bool m_OutOfMemory:1;// Offset=0x2abd Size=0x1 BitOffset=0x5 BitSize=0x1
            bool m_DoneSynchronizeToPresentationInterval:1;// Offset=0x2abd Size=0x1 BitOffset=0x4 BitSize=0x1
            bool m_DisplayPersisted:1;// Offset=0x2abd Size=0x1 BitOffset=0x3 BitSize=0x1
            bool m_PendingHiZFlush:1;// Offset=0x2abd Size=0x1 BitOffset=0x2 BitSize=0x1
            bool m_NullHardware:1;// Offset=0x2abd Size=0x1 BitOffset=0x1 BitSize=0x1
            bool m_CrashDump:1;// Offset=0x2abd Size=0x1 BitOffset=0x0 BitSize=0x1
            bool m_CurrentVertexShaderOutputPatched:1;// Offset=0x2abe Size=0x1 BitOffset=0x7 BitSize=0x1
            bool m_PredicatedZShader:1;// Offset=0x2abe Size=0x1 BitOffset=0x6 BitSize=0x1
            bool m_HiZWriteEnable:1;// Offset=0x2abe Size=0x1 BitOffset=0x5 BitSize=0x1
            bool m_ScalerUpdatePending:1;// Offset=0x2abe Size=0x1 BitOffset=0x4 BitSize=0x1
            bool m_FlushCacheBeforeResolve:1;// Offset=0x2abe Size=0x1 BitOffset=0x3 BitSize=0x1
            bool m_FlushVertexCacheAtKickOff:1;// Offset=0x2abe Size=0x1 BitOffset=0x2 BitSize=0x1
            bool m_Suspended:1;// Offset=0x2abe Size=0x1 BitOffset=0x1 BitSize=0x1
            bool m_ClockGatingDisabled:1;// Offset=0x2abe Size=0x1 BitOffset=0x0 BitSize=0x1
            bool m_ActiveScreenExtentQuery:1;// Offset=0x2abf Size=0x1 BitOffset=0x7 BitSize=0x1
            bool m_HudWasUpLastFrame:1;// Offset=0x2abf Size=0x1 BitOffset=0x6 BitSize=0x1
            bool m_OnePassZPass:1;// Offset=0x2abf Size=0x1 BitOffset=0x5 BitSize=0x1
            bool m_FirstTileInheritsDepthBuffer:1;// Offset=0x2abf Size=0x1 BitOffset=0x4 BitSize=0x1
            bool m_64BitRenderTarget:1;// Offset=0x2abf Size=0x1 BitOffset=0x3 BitSize=0x1
            bool m_GotDrPixCounters:1;// Offset=0x2abf Size=0x1 BitOffset=0x2 BitSize=0x1
            bool m_WaitUntilIdleBeforeNextDoubleDepth:1;// Offset=0x2abf Size=0x1 BitOffset=0x1 BitSize=0x1
            bool m_WaitUntilIdleBeforeNextZPassDoubleDepth:1;// Offset=0x2abf Size=0x1 BitOffset=0x0 BitSize=0x1
            bool m_InSwap:1;// Offset=0x2ac0 Size=0x1 BitOffset=0x7 BitSize=0x1
        };
        unsigned char __align1[3];// Offset=0x2ac1 Size=0x3
        class D3D::CXpsGlobal m_XpsGlobal;// Offset=0x2ac4 Size=0x17c
        class D3D::CXpsThread m_XpsThread[6];// Offset=0x2c40 Size=0x1e0
        unsigned long * m_pXpsConfigureBuffer;// Offset=0x2e20 Size=0x4
        unsigned long m_XpsCpuMask;// Offset=0x2e24 Size=0x4
        unsigned long * m_pXpsAutomaticPredication;// Offset=0x2e28 Size=0x4
        void  ( * m_pDebugXpsCallback)(struct D3DXpsThread * ,void * ,void * ,unsigned long );// Offset=0x2e2c Size=0x4
        class D3D::CVertexDeclaration * m_pVertexDeclaration;// Offset=0x2e30 Size=0x4
        unsigned char __align2[4];// Offset=0x2e34 Size=0x4
        unsigned long long m_AsynchronousInvalidateRange;// Offset=0x2e38 Size=0x8
        union // Size=0x10 (Id=0)
        {
            unsigned char m_CurrentVertexShaderStride[16];// Offset=0x2e40 Size=0x10
            unsigned long long m_CurrentVertexShaderStride64[2];// Offset=0x2e40 Size=0x10
        };
        struct D3D::D3DPACKET_STATE m_StatePacket;// Offset=0x2e50 Size=0x8
        int m_ScissorTestEnable;// Offset=0x2e58 Size=0x4
        int m_ColorEnable[4];// Offset=0x2e5c Size=0x10
        int m_ZEnable;// Offset=0x2e6c Size=0x4
        int m_StencilEnable;// Offset=0x2e70 Size=0x4
        int m_PointSpriteEnable;// Offset=0x2e74 Size=0x4
        int m_PointScaleEnable;// Offset=0x2e78 Size=0x4
        float m_PointSize;// Offset=0x2e7c Size=0x4
        float m_PointSizeMin;// Offset=0x2e80 Size=0x4
        float m_PointSizeMax;// Offset=0x2e84 Size=0x4
        float m_PointScaleA;// Offset=0x2e88 Size=0x4
        float m_PointScaleB;// Offset=0x2e8c Size=0x4
        float m_PointScaleC;// Offset=0x2e90 Size=0x4
        int m_SpecularEnable;// Offset=0x2e94 Size=0x4
        unsigned long m_TextureFactor;// Offset=0x2e98 Size=0x4
        unsigned char m_MaxAnisotropy[26];// Offset=0x2e9c Size=0x1a
        unsigned char m_MaxMipLevel[26];// Offset=0x2eb6 Size=0x1a
        unsigned char m_MinMipLevel[26];// Offset=0x2ed0 Size=0x1a
        unsigned char m_ZFilter[26];// Offset=0x2eea Size=0x1a
        int m_HighPrecisionBlendEnable[4];// Offset=0x2f04 Size=0x10
        unsigned char __align3[4];// Offset=0x2f14 Size=0x4
        unsigned long long m_ConditionalSurveyPending;// Offset=0x2f18 Size=0x8
        unsigned char m_ConditionalSurveyStack[65];// Offset=0x2f20 Size=0x41
        unsigned char m_ConditionalSurveyStackIndex;// Offset=0x2f61 Size=0x1
        unsigned char m_ConditionalRenderStack[65];// Offset=0x2f62 Size=0x41
        unsigned char m_ConditionalRenderStackIndex;// Offset=0x2fa3 Size=0x1
        unsigned char __align4[4];// Offset=0x2fa4 Size=0x4
        union // Size=0x38 (Id=0)
        {
            class D3D::CVertexDeclaration m_FvfDeclaration;// Offset=0x2fa8 Size=0x38
            char m_DeclarationBuffer[236];// Offset=0x2fa8 Size=0xec
        };
        unsigned char __align5[4];// Offset=0x3094 Size=0x4
        unsigned long m_FVF;// Offset=0x3098 Size=0x4
        struct D3DIndexBuffer * m_pIndexBuffer;// Offset=0x309c Size=0x4
        struct D3DSurface * m_pRenderTarget[4];// Offset=0x30a0 Size=0x10
        struct D3DSurface * m_pDepthStencilSurface;// Offset=0x30b0 Size=0x4
        struct D3DVertexBuffer * m_pVertexBuffer[16];// Offset=0x30b4 Size=0x40
        unsigned char __align6[4];// Offset=0x30f4 Size=0x4
        union // Size=0x10 (Id=0)
        {
            unsigned char m_StreamStride[16];// Offset=0x30f8 Size=0x10
            unsigned long long m_StreamStride64[2];// Offset=0x30f8 Size=0x10
        };
        struct D3DBaseTexture * m_Textures[26];// Offset=0x3108 Size=0x68
        struct _D3DVIEWPORTF9 m_Viewport;// Offset=0x3170 Size=0x1c
        struct tagRECT m_Scissor;// Offset=0x318c Size=0x10
        class D3D::CPixelShader * m_pPixelShader;// Offset=0x319c Size=0x4
        class D3D::CVertexShader * m_pVertexShader;// Offset=0x31a0 Size=0x4
        union GPU_EDRAMMODECONTROL m_ZPassEdramModeControl;// Offset=0x31a4 Size=0x4
        unsigned long m_ZPassFunc;// Offset=0x31a8 Size=0x4
        unsigned long m_PredicationMaskLo;// Offset=0x31ac Size=0x4
        unsigned long m_PredicationMaskHi;// Offset=0x31b0 Size=0x4
        unsigned long m_GpuPacket3Predication;// Offset=0x31b4 Size=0x4
        unsigned long m_FirstPassSelect;// Offset=0x31b8 Size=0x4
        struct D3DSurface * m_pTileSurface;// Offset=0x31bc Size=0x4
        struct D3DSurface * m_pTileSurfaces[4];// Offset=0x31c0 Size=0x10
        struct D3DSurface * m_pTileDepthSurface;// Offset=0x31d0 Size=0x4
        unsigned long m_Tiles;// Offset=0x31d4 Size=0x4
        struct _D3DRECT m_TileRects[15];// Offset=0x31d8 Size=0xf0
        struct _D3DPOINT m_TileOffsets[15];// Offset=0x32c8 Size=0x78
        unsigned long m_TileHiZOffsets[15];// Offset=0x3340 Size=0x3c
        unsigned long m_TileHiZPitch;// Offset=0x337c Size=0x4
        unsigned long m_TileZPassSurfacePitch;// Offset=0x3380 Size=0x4
        unsigned long m_TilingWidth;// Offset=0x3384 Size=0x4
        unsigned long m_TilingHeight;// Offset=0x3388 Size=0x4
        unsigned long m_TilingFlags;// Offset=0x338c Size=0x4
        struct __vector4 m_TilingClearColor;// Offset=0x3390 Size=0x10
        float m_TilingClearZ;// Offset=0x33a0 Size=0x4
        unsigned long m_TilingClearStencil;// Offset=0x33a4 Size=0x4
        unsigned long m_WorkerBase;// Offset=0x33a8 Size=0x4
        unsigned long m_WorkerSize;// Offset=0x33ac Size=0x4
        unsigned long * m_pStopPoint;// Offset=0x33b0 Size=0x4
        unsigned long m_StopWrap;// Offset=0x33b4 Size=0x4
        unsigned long * m_pFencePoint;// Offset=0x33b8 Size=0x4
        unsigned long m_FenceWrap;// Offset=0x33bc Size=0x4
        class D3D::CRingAllocList m_Patches;// Offset=0x33c0 Size=0x14
        class D3D::CRingAllocList m_MicroAllocator;// Offset=0x33d4 Size=0x14
        class D3D::CRingAllocList m_XpsVisibilityPatches;// Offset=0x33e8 Size=0x14
        class D3D::CRingAllocList m_XpsQueryPatches;// Offset=0x33fc Size=0x14
        class D3D::CRingAllocList m_XpsAutoPatches;// Offset=0x3410 Size=0x14
        class D3D::CRingAllocList m_Runs;// Offset=0x3424 Size=0x14
        class D3D::CRingAllocList m_Queue;// Offset=0x3438 Size=0x14
        class D3D::CRingAllocList m_PreviousQueue;// Offset=0x344c Size=0x14
        struct D3D::RingBufferState m_SavedRingBufferState;// Offset=0x3460 Size=0x18
        void  ( * m_pHangCallback)(char * );// Offset=0x3478 Size=0x4
        void  ( * m_pBlockCallback)(unsigned long ,enum _D3DBLOCKTYPE ,float ,unsigned long );// Offset=0x347c Size=0x4
        enum D3D::BracketType m_BracketType;// Offset=0x3480 Size=0x4
        struct D3D::BeginVerticesData m_BeginVertices;// Offset=0x3484 Size=0x14
        unsigned char __align7[8];// Offset=0x3498 Size=0x8
        struct D3D::BeginShaderConstantData m_BeginShaderConstant;// Offset=0x34a0 Size=0x20
        unsigned long m_ActiveExports;// Offset=0x34c0 Size=0x4
        unsigned long m_NotDoneExporting;// Offset=0x34c4 Size=0x4
        unsigned long m_ExportBracketType;// Offset=0x34c8 Size=0x4
        class D3D::CCommandBuffer * m_pCommandBuffer;// Offset=0x34cc Size=0x4
        struct D3D::BufferResourceNode * m_pCurrentBufferResourceNode;// Offset=0x34d0 Size=0x4
        class D3D::BufferResource * m_pBufferResource;// Offset=0x34d4 Size=0x4
        class D3D::BufferResource * m_pBufferResourceEnd;// Offset=0x34d8 Size=0x4
        struct D3D::SegmentCallNode * m_pCurrentSegmentCallNode;// Offset=0x34dc Size=0x4
        struct D3D::SegmentCall * m_pSegmentCall;// Offset=0x34e0 Size=0x4
        struct D3D::SegmentCall * m_pSegmentCallEnd;// Offset=0x34e4 Size=0x4
        struct _D3DPRESENT_PARAMETERS_ m_PresentParameters;// Offset=0x34e8 Size=0x7c
        struct _D3DPRIVATE_SCALER_PARAMETERS m_XamScalerParameters;// Offset=0x3564 Size=0x38
        struct _D3DPRIVATE_SCALER_PARAMETERS m_TitleScalerParameters;// Offset=0x359c Size=0x38
        void * m_pGprAllocationBuffer;// Offset=0x35d4 Size=0x4
        struct D3D::SegmentCall m_GprAllocationSetup;// Offset=0x35d8 Size=0x8
        struct D3D::SegmentCall m_GprAllocationSet[128];// Offset=0x35e0 Size=0x400
        struct D3D::SegmentCall m_GprAllocationDraw;// Offset=0x39e0 Size=0x8
        struct D3DSurface * m_pAutoDepthBuffer;// Offset=0x39e8 Size=0x4
        struct D3DBaseTexture * m_pAutoFrontBuffer;// Offset=0x39ec Size=0x4
        struct D3DSurface * m_pAutoBackBuffer;// Offset=0x39f0 Size=0x4
        unsigned long * m_pAutoPrimaryRingBuffer;// Offset=0x39f4 Size=0x4
        unsigned long * m_pAutoSecondaryRingBuffer;// Offset=0x39f8 Size=0x4
        struct D3DBaseTexture m_FrontBuffer;// Offset=0x39fc Size=0x34
        unsigned long * m_pPrimaryRingBuffer;// Offset=0x3a30 Size=0x4
        unsigned long m_PrimaryBufferWriteMask;// Offset=0x3a34 Size=0x4
        unsigned long * m_pSecondaryRingBuffer;// Offset=0x3a38 Size=0x4
        unsigned long * m_pSecondaryRingBufferLimit;// Offset=0x3a3c Size=0x4
        unsigned long m_SegmentSize;// Offset=0x3a40 Size=0x4
        unsigned long * m_pRingAlloc;// Offset=0x3a44 Size=0x4
        unsigned long m_RingWrap;// Offset=0x3a48 Size=0x4
        unsigned long * m_pNextSecondaryStart;// Offset=0x3a4c Size=0x4
        unsigned long * m_pSegmentStart;// Offset=0x3a50 Size=0x4
        unsigned long m_TotalSegmentAllocs;// Offset=0x3a54 Size=0x4
        unsigned long m_SegmentAllocLimit;// Offset=0x3a58 Size=0x4
        unsigned long m_Throttle;// Offset=0x3a5c Size=0x4
        struct _RTL_CRITICAL_SECTION m_SuspendResumeCriticalSection;// Offset=0x3a60 Size=0x1c
        struct _RTL_CRITICAL_SECTION m_GrowableCriticalSection;// Offset=0x3a7c Size=0x1c
        class D3D::CCommandBuffer * m_pDebugAllocatorList;// Offset=0x3a98 Size=0x4
        struct _D3DGAMMARAMP m_GammaRamp;// Offset=0x3a9c Size=0x600
        void  ( * m_pSwapCallback)(struct _D3DSWAPDATA * );// Offset=0x409c Size=0x4
        void  ( * m_pVBlankCallback)(struct _D3DVBLANKDATA * );// Offset=0x40a0 Size=0x4
        unsigned long m_VBlankCount;// Offset=0x40a4 Size=0x4
        unsigned long m_LastVBlankTime;// Offset=0x40a8 Size=0x4
        unsigned long m_LastSwapVBlank;// Offset=0x40ac Size=0x4
        unsigned long m_CpuSwapCount;// Offset=0x40b0 Size=0x4
        unsigned long m_CpuSwapInterruptCount;// Offset=0x40b4 Size=0x4
        unsigned long m_GpuSwapCount;// Offset=0x40b8 Size=0x4
        struct D3D::SwapData m_SwapQueue[16];// Offset=0x40bc Size=0x80
        unsigned long m_SwapQueueReader;// Offset=0x413c Size=0x4
        unsigned long m_SwapQueueWriter;// Offset=0x4140 Size=0x4
        unsigned long m_SwapFlags;// Offset=0x4144 Size=0x4
        unsigned long m_SwapLock;// Offset=0x4148 Size=0x4
        unsigned long m_AvFlags;// Offset=0x414c Size=0x4
        unsigned long m_nProfileFlags;// Offset=0x4150 Size=0x4
        HRESULT m_LastProfileResult;// Offset=0x4154 Size=0x4
        unsigned long * m_pRingOutOfMemoryBuffer;// Offset=0x4158 Size=0x4
        unsigned long m_XamOutOfMemoryBuffer[1200];// Offset=0x415c Size=0x12c0
        class D3D::CCapture * m_pCapture;// Offset=0x541c Size=0x4
        struct // Size=0x4 (Id=0)
        {
            int m_TimingCaptureActive:1;// Offset=0x5420 Size=0x4 BitOffset=0x1f BitSize=0x1
            int m_VideoCaptureActive:1;// Offset=0x5420 Size=0x4 BitOffset=0x1e BitSize=0x1
        };
        unsigned long m_VideoType;// Offset=0x5424 Size=0x4
        unsigned long m_DisplayWidth;// Offset=0x5428 Size=0x4
        unsigned long m_DisplayHeight;// Offset=0x542c Size=0x4
        unsigned long m_ActualDisplayWidth;// Offset=0x5430 Size=0x4
        unsigned long m_RefreshRate;// Offset=0x5434 Size=0x4
        struct D3D::CQueryBlock m_QueryBlock;// Offset=0x5438 Size=0x10
        unsigned long m_FrameTicks;// Offset=0x5448 Size=0x4
        unsigned long m_FrameEndLow;// Offset=0x544c Size=0x4
        unsigned long m_FrameEndHigh;// Offset=0x5450 Size=0x4
        float m_PerfFreq;// Offset=0x5454 Size=0x4
        float m_PerfPeriod;// Offset=0x5458 Size=0x4
        unsigned char __align8[4];// Offset=0x545c Size=0x4
        union _LARGE_INTEGER m_TimeBlocked;// Offset=0x5460 Size=0x8
        union _LARGE_INTEGER m_TimeThrottled;// Offset=0x5468 Size=0x8
        unsigned long m_BlockedTicks;// Offset=0x5470 Size=0x4
        unsigned long m_ThrottledTicks;// Offset=0x5474 Size=0x4
        unsigned long m_XamGPURead;// Offset=0x5478 Size=0x4
        unsigned long m_XamGPUWrite;// Offset=0x547c Size=0x4
        int m_XamGPUEnabled;// Offset=0x5480 Size=0x4
        struct D3D::CPerfCountersPhysical * m_pPerfCountersPhysical;// Offset=0x5484 Size=0x4
        struct D3D::CPerfCounters * m_PerfCounters;// Offset=0x5488 Size=0x4
        unsigned long * m_pSwapStallTimeStamps;// Offset=0x548c Size=0x4
        unsigned long m_PerfCounterStatus;// Offset=0x5490 Size=0x4
        unsigned long m_PerfCounterReadPtr;// Offset=0x5494 Size=0x4
        unsigned long m_PerfCounterWritePtr;// Offset=0x5498 Size=0x4
        unsigned long m_PerfCounterUpdateFrame;// Offset=0x549c Size=0x4
        unsigned long * m_pPixGpuTimingCurrent;// Offset=0x54a0 Size=0x4
        unsigned long * m_pPixGpuTimingLimit;// Offset=0x54a4 Size=0x4
        int m_OutOfGpuTimingMemory;// Offset=0x54a8 Size=0x4
        unsigned long m_PixTimeOfLastVerticalBlank;// Offset=0x54ac Size=0x4
        enum _D3DFORMAT m_PixSwapDisplayFormat;// Offset=0x54b0 Size=0x4
        unsigned long m_PixSwapDisplayWidth;// Offset=0x54b4 Size=0x4
        unsigned long m_PixSwapDisplayHeight;// Offset=0x54b8 Size=0x4
        unsigned long m_PixSwapDisplayAddress;// Offset=0x54bc Size=0x4
        struct _D3DPRIVATE_SCALER_PARAMETERS * m_pPixSwapScaler;// Offset=0x54c0 Size=0x4
        struct _D3DGAMMARAMP * m_pPixSwapGamma;// Offset=0x54c4 Size=0x4
        struct _XVIDEO_MODE m_PixSwapVideoMode;// Offset=0x54c8 Size=0x30
        struct _D3DPRIVATE_SCALER_PARAMETERS m_PixPlaybackScaler;// Offset=0x54f8 Size=0x38
        struct _D3DGAMMARAMP m_PixPlaybackGamma;// Offset=0x5530 Size=0x600
        int m_PixPlaybackHasGamma;// Offset=0x5b30 Size=0x4
        unsigned long m_XamCommandBufferSize;// Offset=0x5b34 Size=0x4
        unsigned long m_PixEventLevel;// Offset=0x5b38 Size=0x4
        void  ( * m_pSubmitHook)(unsigned long ,void ** ,unsigned long * ,unsigned long );// Offset=0x5b3c Size=0x4
        struct D3D::XBMContext m_XbmContext;// Offset=0x5b40 Size=0x26c
        unsigned long m_CreateDeviceFlags;// Offset=0x5dac Size=0x4
        int m_AsyncResourcesShutdown;// Offset=0x5db0 Size=0x4
        struct D3D::AsyncResourcesPhysicalData * m_AsyncResourcesPhysicalData;// Offset=0x5db4 Size=0x4
        unsigned long m_PrefetchBlockIB2Size;// Offset=0x5db8 Size=0x4
        struct AsyncResourcesData// Size=0x10 (Id=39085)
        {
            unsigned long ResourceFence;// Offset=0x0 Size=0x4
            unsigned long ResourceReadFence;// Offset=0x4 Size=0x4
            unsigned long long AsyncBlock;// Offset=0x8 Size=0x8
        };
        unsigned char __align9[23980];// Offset=0x10 Size=0x5dac
        struct D3D::CDevice::AsyncResourcesData * m_AsyncResources;// Offset=0x5dbc Size=0x4
        unsigned long long m_AsyncResourcesMaskSignal;// Offset=0x5dc0 Size=0x8
        unsigned long * BeginRingBig(unsigned long );// Offset=0x0 Size=0x78
        unsigned long MakeSegment(unsigned long ,unsigned long );
        void MarkAsOutOfMemory();// Offset=0x0 Size=0x74
        void SaveRingBufferState();
        void RestoreRingBufferState();
        int IsPastStopPoint(unsigned long * ,unsigned long );
        int IsSecondaryMemoryBusy(unsigned long * ,unsigned long );
        void BlockOnSecondaryPosition(unsigned long * ,unsigned long );// Offset=0x0 Size=0xb4
        unsigned long * BeginRingAlloc(unsigned long ,unsigned long );// Offset=0x0 Size=0x1a0
        void EndRingAlloc(void * );
        unsigned long * StartNewSegment(unsigned long );// Offset=0x0 Size=0x1a4
        int IsPrimaryMemoryBusy(unsigned long ,unsigned long );
        unsigned long BlockOnPrimaryRange(unsigned long ,unsigned long );// Offset=0x0 Size=0xc8
        void AddCommandsToPrimaryBuffer(unsigned long * ,unsigned long );// Offset=0x0 Size=0x104
        void AddCallsToPrimaryBuffer(struct D3D::SegmentCall * ,unsigned long );// Offset=0x0 Size=0x240
        void CreateInvalidateBuffer(unsigned long * ,unsigned long * );// Offset=0x0 Size=0x1f4
        void KickOffSegment();// Offset=0x0 Size=0x180
        unsigned long * SetFence(unsigned long * );// Offset=0x0 Size=0xec
        unsigned long * QueueIndirectBuffer(unsigned long * ,unsigned long ,unsigned long ,unsigned long ,class D3D::CRingAllocList * );// Offset=0x0 Size=0xc8
        void QueueIndirectBuffers(struct D3D::SegmentCall * ,unsigned long );// Offset=0x0 Size=0x128
        int ThreadOwnsDevice();
        unsigned long * KickOff();// Offset=0x0 Size=0xfc
        void BlockOnFence(unsigned long ,enum _D3DBLOCKTYPE ,struct D3DResource * ,bool );// Offset=0x0 Size=0xf4
        unsigned long Age(unsigned long );
        int IsFencePending(unsigned long );
        int IsCurrentFence(unsigned long );
        unsigned long MostRecentFence();
        int IsEmptySegment();
        void VerifyGpuOwnership(unsigned long ,unsigned long long );
        void VerifyGpuOwnershipTag(enum _D3DTAG );
        void VerifyD3DOwnership(unsigned long ,unsigned long long );
        int IsLazy(enum D3D::LazyState );
        unsigned long long GetLazy(enum D3D::LazyState );
        void SetLazyRange(enum D3D::LazyState ,unsigned long ,unsigned long );
        void SetLazyDirect(unsigned long long * ,enum D3D::LazyState ,unsigned long );
        void ClearLazyDirect(unsigned long long * ,enum D3D::LazyState ,unsigned long );
        int TestLazyDirect(unsigned long long ,enum D3D::LazyState ,unsigned long );
        void SetLazyMask(unsigned long ,unsigned long long ,enum D3D::LazyState );
        void ClearLazyMask(unsigned long ,unsigned long long ,enum D3D::LazyState );
        void ClearLazyRange(enum D3D::LazyState );
        void ClearLazyRange(enum D3D::LazyState ,unsigned long ,unsigned long );
        void SetLazyState(enum D3D::LazyState ,unsigned long );
        void ClearLazyState(enum D3D::LazyState ,unsigned long );
        void SetLazyVertexFetchConstant(unsigned long );
        void SetLazyVertexShaderConstant(unsigned long ,unsigned long );
        void SetLazyPixelShaderConstant(unsigned long ,unsigned long );
        void SetAllLazyState();
        void SetAllCommandBufferLazyState(struct _D3DTAGCOLLECTION * );
        void SetUsedRange(enum _D3DTAG ,unsigned long ,unsigned long );
        void SetUsedTag(enum _D3DTAG );
        void CalculatePredicatedHiControlFlag();
        bool TilingSurface();
        bool CalculatePredicateDrawPrimsFlag();
        void SetPredicationState(unsigned long ,unsigned long );
        void AddSegmentCallToCommandBuffer(unsigned long ,unsigned long );
        unsigned long * BeginRing();
        unsigned long * BeginBuffer(unsigned long * ,unsigned long );
        unsigned long * BeginRingManual();
        void Packet0(unsigned long &** ,unsigned long ,unsigned long );
        void Packet0NoInc(unsigned long &** ,unsigned long ,unsigned long );
        void Packet2Nop(unsigned long &** );
        void Packet3(unsigned long &** ,unsigned long ,unsigned long ,unsigned long );
        void PutD(unsigned long &** ,unsigned long );
        void PutF(unsigned long &** ,float );
        void PutRaw(unsigned long * );
        void EndRing(unsigned long * );
        unsigned long * EndBuffer(unsigned long * );
        void Packet3Predicated(unsigned long &** ,unsigned long ,unsigned long );
        void Packet3Gpu(unsigned long &** ,unsigned long ,unsigned long );
        void PutPix(unsigned long &** ,enum PIXMeta );
        void PutPix(unsigned long &** ,enum PIXMeta ,void * ,unsigned long );
        void CDevice();
        class D3D::CDevice & operator=(class D3D::CDevice & );
    };
};

class D3D::CDevice : public D3DDevice// Size=0x5e00 (Id=3695)
{
    union // Size=0x5dc8 (Id=0)
    {
        unsigned char __align0[10880];// Offset=0x0 Size=0x2a80
        unsigned long long m_Version;// Offset=0x2a80 Size=0x8
        unsigned long m_ThreadId;// Offset=0x2a88 Size=0x4
        int m_IsXamProcess;// Offset=0x2a8c Size=0x4
        struct D3D::WriteBacks * m_pWriteBacks;// Offset=0x2a90 Size=0x4
        struct D3D::NonSnoopedWriteBacks * m_pNonSnoopedWriteBacks;// Offset=0x2a94 Size=0x4
        unsigned long CallbackSemaphoreLock;// Offset=0x2a98 Size=0x4
        unsigned long m_CpuFence;// Offset=0x2a9c Size=0x4
        unsigned long m_CommandBufferTimeStampMask;// Offset=0x2aa0 Size=0x4
        union GPU_BCCONTROL m_BcControl;// Offset=0x2aa4 Size=0x4
        union GPU_GPRMANAGEMENT m_GprManagement;// Offset=0x2aa8 Size=0x4
        union GPU_INSTSTOREMANAGEMENT m_ShaderStoreManagement;// Offset=0x2aac Size=0x4
        unsigned long m_LastInsertFence;// Offset=0x2ab0 Size=0x4
        unsigned long m_TilePredication;// Offset=0x2ab4 Size=0x4
        unsigned long m_RunPredication;// Offset=0x2ab8 Size=0x4
        struct // Size=0x5 (Id=0)
        {
            bool m_CommandBufferDevice:1;// Offset=0x2abc Size=0x1 BitOffset=0x7 BitSize=0x1
            bool m_ZPassBracket:1;// Offset=0x2abc Size=0x1 BitOffset=0x6 BitSize=0x1
            bool m_TilingBracket:1;// Offset=0x2abc Size=0x1 BitOffset=0x5 BitSize=0x1
            bool m_TilingSurfaceOverride:1;// Offset=0x2abc Size=0x1 BitOffset=0x4 BitSize=0x1
            bool m_TilingPredicateWhole:1;// Offset=0x2abc Size=0x1 BitOffset=0x3 BitSize=0x1
            bool m_CullGeometryVisibilitySurveyBracket:1;// Offset=0x2abc Size=0x1 BitOffset=0x2 BitSize=0x1
            bool m_XpsBracket:1;// Offset=0x2abc Size=0x1 BitOffset=0x1 BitSize=0x1
            bool m_PredicateDrawPrims:1;// Offset=0x2abc Size=0x1 BitOffset=0x0 BitSize=0x1
            bool m_PendingInvokeRenderPass:1;// Offset=0x2abd Size=0x1 BitOffset=0x7 BitSize=0x1
            bool m_AutomaticInvokeRenderPass:1;// Offset=0x2abd Size=0x1 BitOffset=0x6 BitSize=0x1
            bool m_OutOfMemory:1;// Offset=0x2abd Size=0x1 BitOffset=0x5 BitSize=0x1
            bool m_DoneSynchronizeToPresentationInterval:1;// Offset=0x2abd Size=0x1 BitOffset=0x4 BitSize=0x1
            bool m_DisplayPersisted:1;// Offset=0x2abd Size=0x1 BitOffset=0x3 BitSize=0x1
            bool m_PendingHiZFlush:1;// Offset=0x2abd Size=0x1 BitOffset=0x2 BitSize=0x1
            bool m_NullHardware:1;// Offset=0x2abd Size=0x1 BitOffset=0x1 BitSize=0x1
            bool m_CrashDump:1;// Offset=0x2abd Size=0x1 BitOffset=0x0 BitSize=0x1
            bool m_CurrentVertexShaderOutputPatched:1;// Offset=0x2abe Size=0x1 BitOffset=0x7 BitSize=0x1
            bool m_PredicatedZShader:1;// Offset=0x2abe Size=0x1 BitOffset=0x6 BitSize=0x1
            bool m_HiZWriteEnable:1;// Offset=0x2abe Size=0x1 BitOffset=0x5 BitSize=0x1
            bool m_ScalerUpdatePending:1;// Offset=0x2abe Size=0x1 BitOffset=0x4 BitSize=0x1
            bool m_FlushCacheBeforeResolve:1;// Offset=0x2abe Size=0x1 BitOffset=0x3 BitSize=0x1
            bool m_FlushVertexCacheAtKickOff:1;// Offset=0x2abe Size=0x1 BitOffset=0x2 BitSize=0x1
            bool m_Suspended:1;// Offset=0x2abe Size=0x1 BitOffset=0x1 BitSize=0x1
            bool m_ClockGatingDisabled:1;// Offset=0x2abe Size=0x1 BitOffset=0x0 BitSize=0x1
            bool m_ActiveScreenExtentQuery:1;// Offset=0x2abf Size=0x1 BitOffset=0x7 BitSize=0x1
            bool m_HudWasUpLastFrame:1;// Offset=0x2abf Size=0x1 BitOffset=0x6 BitSize=0x1
            bool m_OnePassZPass:1;// Offset=0x2abf Size=0x1 BitOffset=0x5 BitSize=0x1
            bool m_FirstTileInheritsDepthBuffer:1;// Offset=0x2abf Size=0x1 BitOffset=0x4 BitSize=0x1
            bool m_64BitRenderTarget:1;// Offset=0x2abf Size=0x1 BitOffset=0x3 BitSize=0x1
            bool m_GotDrPixCounters:1;// Offset=0x2abf Size=0x1 BitOffset=0x2 BitSize=0x1
            bool m_WaitUntilIdleBeforeNextDoubleDepth:1;// Offset=0x2abf Size=0x1 BitOffset=0x1 BitSize=0x1
            bool m_WaitUntilIdleBeforeNextZPassDoubleDepth:1;// Offset=0x2abf Size=0x1 BitOffset=0x0 BitSize=0x1
            bool m_InSwap:1;// Offset=0x2ac0 Size=0x1 BitOffset=0x7 BitSize=0x1
        };
        unsigned char __align1[3];// Offset=0x2ac1 Size=0x3
        class D3D::CXpsGlobal m_XpsGlobal;// Offset=0x2ac4 Size=0x17c
        class D3D::CXpsThread m_XpsThread[6];// Offset=0x2c40 Size=0x1e0
        unsigned long * m_pXpsConfigureBuffer;// Offset=0x2e20 Size=0x4
        unsigned long m_XpsCpuMask;// Offset=0x2e24 Size=0x4
        unsigned long * m_pXpsAutomaticPredication;// Offset=0x2e28 Size=0x4
        void  ( * m_pDebugXpsCallback)(struct D3DXpsThread * ,void * ,void * ,unsigned long );// Offset=0x2e2c Size=0x4
        class D3D::CVertexDeclaration * m_pVertexDeclaration;// Offset=0x2e30 Size=0x4
        unsigned char __align2[4];// Offset=0x2e34 Size=0x4
        unsigned long long m_AsynchronousInvalidateRange;// Offset=0x2e38 Size=0x8
        union // Size=0x10 (Id=0)
        {
            unsigned char m_CurrentVertexShaderStride[16];// Offset=0x2e40 Size=0x10
            unsigned long long m_CurrentVertexShaderStride64[2];// Offset=0x2e40 Size=0x10
        };
        struct D3D::D3DPACKET_STATE m_StatePacket;// Offset=0x2e50 Size=0x8
        int m_ScissorTestEnable;// Offset=0x2e58 Size=0x4
        int m_ColorEnable[4];// Offset=0x2e5c Size=0x10
        int m_ZEnable;// Offset=0x2e6c Size=0x4
        int m_StencilEnable;// Offset=0x2e70 Size=0x4
        int m_PointSpriteEnable;// Offset=0x2e74 Size=0x4
        int m_PointScaleEnable;// Offset=0x2e78 Size=0x4
        float m_PointSize;// Offset=0x2e7c Size=0x4
        float m_PointSizeMin;// Offset=0x2e80 Size=0x4
        float m_PointSizeMax;// Offset=0x2e84 Size=0x4
        float m_PointScaleA;// Offset=0x2e88 Size=0x4
        float m_PointScaleB;// Offset=0x2e8c Size=0x4
        float m_PointScaleC;// Offset=0x2e90 Size=0x4
        int m_SpecularEnable;// Offset=0x2e94 Size=0x4
        unsigned long m_TextureFactor;// Offset=0x2e98 Size=0x4
        unsigned char m_MaxAnisotropy[26];// Offset=0x2e9c Size=0x1a
        unsigned char m_MaxMipLevel[26];// Offset=0x2eb6 Size=0x1a
        unsigned char m_MinMipLevel[26];// Offset=0x2ed0 Size=0x1a
        unsigned char m_ZFilter[26];// Offset=0x2eea Size=0x1a
        int m_HighPrecisionBlendEnable[4];// Offset=0x2f04 Size=0x10
        unsigned char __align3[4];// Offset=0x2f14 Size=0x4
        unsigned long long m_ConditionalSurveyPending;// Offset=0x2f18 Size=0x8
        unsigned char m_ConditionalSurveyStack[65];// Offset=0x2f20 Size=0x41
        unsigned char m_ConditionalSurveyStackIndex;// Offset=0x2f61 Size=0x1
        unsigned char m_ConditionalRenderStack[65];// Offset=0x2f62 Size=0x41
        unsigned char m_ConditionalRenderStackIndex;// Offset=0x2fa3 Size=0x1
        unsigned char __align4[4];// Offset=0x2fa4 Size=0x4
        union // Size=0x38 (Id=0)
        {
            class D3D::CVertexDeclaration m_FvfDeclaration;// Offset=0x2fa8 Size=0x38
            char m_DeclarationBuffer[236];// Offset=0x2fa8 Size=0xec
        };
        unsigned char __align5[4];// Offset=0x3094 Size=0x4
        unsigned long m_FVF;// Offset=0x3098 Size=0x4
        struct D3DIndexBuffer * m_pIndexBuffer;// Offset=0x309c Size=0x4
        struct D3DSurface * m_pRenderTarget[4];// Offset=0x30a0 Size=0x10
        struct D3DSurface * m_pDepthStencilSurface;// Offset=0x30b0 Size=0x4
        struct D3DVertexBuffer * m_pVertexBuffer[16];// Offset=0x30b4 Size=0x40
        unsigned char __align6[4];// Offset=0x30f4 Size=0x4
        union // Size=0x10 (Id=0)
        {
            unsigned char m_StreamStride[16];// Offset=0x30f8 Size=0x10
            unsigned long long m_StreamStride64[2];// Offset=0x30f8 Size=0x10
        };
        struct D3DBaseTexture * m_Textures[26];// Offset=0x3108 Size=0x68
        struct _D3DVIEWPORTF9 m_Viewport;// Offset=0x3170 Size=0x1c
        struct tagRECT m_Scissor;// Offset=0x318c Size=0x10
        class D3D::CPixelShader * m_pPixelShader;// Offset=0x319c Size=0x4
        class D3D::CVertexShader * m_pVertexShader;// Offset=0x31a0 Size=0x4
        union GPU_EDRAMMODECONTROL m_ZPassEdramModeControl;// Offset=0x31a4 Size=0x4
        unsigned long m_ZPassFunc;// Offset=0x31a8 Size=0x4
        unsigned long m_PredicationMaskLo;// Offset=0x31ac Size=0x4
        unsigned long m_PredicationMaskHi;// Offset=0x31b0 Size=0x4
        unsigned long m_GpuPacket3Predication;// Offset=0x31b4 Size=0x4
        unsigned long m_FirstPassSelect;// Offset=0x31b8 Size=0x4
        struct D3DSurface * m_pTileSurface;// Offset=0x31bc Size=0x4
        struct D3DSurface * m_pTileSurfaces[4];// Offset=0x31c0 Size=0x10
        struct D3DSurface * m_pTileDepthSurface;// Offset=0x31d0 Size=0x4
        unsigned long m_Tiles;// Offset=0x31d4 Size=0x4
        struct _D3DRECT m_TileRects[15];// Offset=0x31d8 Size=0xf0
        struct _D3DPOINT m_TileOffsets[15];// Offset=0x32c8 Size=0x78
        unsigned long m_TileHiZOffsets[15];// Offset=0x3340 Size=0x3c
        unsigned long m_TileHiZPitch;// Offset=0x337c Size=0x4
        unsigned long m_TileZPassSurfacePitch;// Offset=0x3380 Size=0x4
        unsigned long m_TilingWidth;// Offset=0x3384 Size=0x4
        unsigned long m_TilingHeight;// Offset=0x3388 Size=0x4
        unsigned long m_TilingFlags;// Offset=0x338c Size=0x4
        struct __vector4 m_TilingClearColor;// Offset=0x3390 Size=0x10
        float m_TilingClearZ;// Offset=0x33a0 Size=0x4
        unsigned long m_TilingClearStencil;// Offset=0x33a4 Size=0x4
        unsigned long m_WorkerBase;// Offset=0x33a8 Size=0x4
        unsigned long m_WorkerSize;// Offset=0x33ac Size=0x4
        unsigned long * m_pStopPoint;// Offset=0x33b0 Size=0x4
        unsigned long m_StopWrap;// Offset=0x33b4 Size=0x4
        unsigned long * m_pFencePoint;// Offset=0x33b8 Size=0x4
        unsigned long m_FenceWrap;// Offset=0x33bc Size=0x4
        class D3D::CRingAllocList m_Patches;// Offset=0x33c0 Size=0x14
        class D3D::CRingAllocList m_MicroAllocator;// Offset=0x33d4 Size=0x14
        class D3D::CRingAllocList m_XpsVisibilityPatches;// Offset=0x33e8 Size=0x14
        class D3D::CRingAllocList m_XpsQueryPatches;// Offset=0x33fc Size=0x14
        class D3D::CRingAllocList m_XpsAutoPatches;// Offset=0x3410 Size=0x14
        class D3D::CRingAllocList m_Runs;// Offset=0x3424 Size=0x14
        class D3D::CRingAllocList m_Queue;// Offset=0x3438 Size=0x14
        class D3D::CRingAllocList m_PreviousQueue;// Offset=0x344c Size=0x14
        struct D3D::RingBufferState m_SavedRingBufferState;// Offset=0x3460 Size=0x18
        void  ( * m_pHangCallback)(char * );// Offset=0x3478 Size=0x4
        void  ( * m_pBlockCallback)(unsigned long ,enum _D3DBLOCKTYPE ,float ,unsigned long );// Offset=0x347c Size=0x4
        enum D3D::BracketType m_BracketType;// Offset=0x3480 Size=0x4
        struct D3D::BeginVerticesData m_BeginVertices;// Offset=0x3484 Size=0x14
        unsigned char __align7[8];// Offset=0x3498 Size=0x8
        struct D3D::BeginShaderConstantData m_BeginShaderConstant;// Offset=0x34a0 Size=0x20
        unsigned long m_ActiveExports;// Offset=0x34c0 Size=0x4
        unsigned long m_NotDoneExporting;// Offset=0x34c4 Size=0x4
        unsigned long m_ExportBracketType;// Offset=0x34c8 Size=0x4
        class D3D::CCommandBuffer * m_pCommandBuffer;// Offset=0x34cc Size=0x4
        struct D3D::BufferResourceNode * m_pCurrentBufferResourceNode;// Offset=0x34d0 Size=0x4
        class D3D::BufferResource * m_pBufferResource;// Offset=0x34d4 Size=0x4
        class D3D::BufferResource * m_pBufferResourceEnd;// Offset=0x34d8 Size=0x4
        struct D3D::SegmentCallNode * m_pCurrentSegmentCallNode;// Offset=0x34dc Size=0x4
        struct D3D::SegmentCall * m_pSegmentCall;// Offset=0x34e0 Size=0x4
        struct D3D::SegmentCall * m_pSegmentCallEnd;// Offset=0x34e4 Size=0x4
        struct _D3DPRESENT_PARAMETERS_ m_PresentParameters;// Offset=0x34e8 Size=0x7c
        struct _D3DPRIVATE_SCALER_PARAMETERS m_XamScalerParameters;// Offset=0x3564 Size=0x38
        struct _D3DPRIVATE_SCALER_PARAMETERS m_TitleScalerParameters;// Offset=0x359c Size=0x38
        void * m_pGprAllocationBuffer;// Offset=0x35d4 Size=0x4
        struct D3D::SegmentCall m_GprAllocationSetup;// Offset=0x35d8 Size=0x8
        struct D3D::SegmentCall m_GprAllocationSet[128];// Offset=0x35e0 Size=0x400
        struct D3D::SegmentCall m_GprAllocationDraw;// Offset=0x39e0 Size=0x8
        struct D3DSurface * m_pAutoDepthBuffer;// Offset=0x39e8 Size=0x4
        struct D3DBaseTexture * m_pAutoFrontBuffer;// Offset=0x39ec Size=0x4
        struct D3DSurface * m_pAutoBackBuffer;// Offset=0x39f0 Size=0x4
        unsigned long * m_pAutoPrimaryRingBuffer;// Offset=0x39f4 Size=0x4
        unsigned long * m_pAutoSecondaryRingBuffer;// Offset=0x39f8 Size=0x4
        struct D3DBaseTexture m_FrontBuffer;// Offset=0x39fc Size=0x34
        unsigned long * m_pPrimaryRingBuffer;// Offset=0x3a30 Size=0x4
        unsigned long m_PrimaryBufferWriteMask;// Offset=0x3a34 Size=0x4
        unsigned long * m_pSecondaryRingBuffer;// Offset=0x3a38 Size=0x4
        unsigned long * m_pSecondaryRingBufferLimit;// Offset=0x3a3c Size=0x4
        unsigned long m_SegmentSize;// Offset=0x3a40 Size=0x4
        unsigned long * m_pRingAlloc;// Offset=0x3a44 Size=0x4
        unsigned long m_RingWrap;// Offset=0x3a48 Size=0x4
        unsigned long * m_pNextSecondaryStart;// Offset=0x3a4c Size=0x4
        unsigned long * m_pSegmentStart;// Offset=0x3a50 Size=0x4
        unsigned long m_TotalSegmentAllocs;// Offset=0x3a54 Size=0x4
        unsigned long m_SegmentAllocLimit;// Offset=0x3a58 Size=0x4
        unsigned long m_Throttle;// Offset=0x3a5c Size=0x4
        struct _RTL_CRITICAL_SECTION m_SuspendResumeCriticalSection;// Offset=0x3a60 Size=0x1c
        struct _RTL_CRITICAL_SECTION m_GrowableCriticalSection;// Offset=0x3a7c Size=0x1c
        class D3D::CCommandBuffer * m_pDebugAllocatorList;// Offset=0x3a98 Size=0x4
        struct _D3DGAMMARAMP m_GammaRamp;// Offset=0x3a9c Size=0x600
        void  ( * m_pSwapCallback)(struct _D3DSWAPDATA * );// Offset=0x409c Size=0x4
        void  ( * m_pVBlankCallback)(struct _D3DVBLANKDATA * );// Offset=0x40a0 Size=0x4
        unsigned long m_VBlankCount;// Offset=0x40a4 Size=0x4
        unsigned long m_LastVBlankTime;// Offset=0x40a8 Size=0x4
        unsigned long m_LastSwapVBlank;// Offset=0x40ac Size=0x4
        unsigned long m_CpuSwapCount;// Offset=0x40b0 Size=0x4
        unsigned long m_CpuSwapInterruptCount;// Offset=0x40b4 Size=0x4
        unsigned long m_GpuSwapCount;// Offset=0x40b8 Size=0x4
        struct D3D::SwapData m_SwapQueue[16];// Offset=0x40bc Size=0x80
        unsigned long m_SwapQueueReader;// Offset=0x413c Size=0x4
        unsigned long m_SwapQueueWriter;// Offset=0x4140 Size=0x4
        unsigned long m_SwapFlags;// Offset=0x4144 Size=0x4
        unsigned long m_SwapLock;// Offset=0x4148 Size=0x4
        unsigned long m_AvFlags;// Offset=0x414c Size=0x4
        unsigned long m_nProfileFlags;// Offset=0x4150 Size=0x4
        HRESULT m_LastProfileResult;// Offset=0x4154 Size=0x4
        unsigned long * m_pRingOutOfMemoryBuffer;// Offset=0x4158 Size=0x4
        unsigned long m_XamOutOfMemoryBuffer[1200];// Offset=0x415c Size=0x12c0
        class D3D::CCapture * m_pCapture;// Offset=0x541c Size=0x4
        struct // Size=0x4 (Id=0)
        {
            int m_TimingCaptureActive:1;// Offset=0x5420 Size=0x4 BitOffset=0x1f BitSize=0x1
            int m_VideoCaptureActive:1;// Offset=0x5420 Size=0x4 BitOffset=0x1e BitSize=0x1
        };
        unsigned long m_VideoType;// Offset=0x5424 Size=0x4
        unsigned long m_DisplayWidth;// Offset=0x5428 Size=0x4
        unsigned long m_DisplayHeight;// Offset=0x542c Size=0x4
        unsigned long m_ActualDisplayWidth;// Offset=0x5430 Size=0x4
        unsigned long m_RefreshRate;// Offset=0x5434 Size=0x4
        struct D3D::CQueryBlock m_QueryBlock;// Offset=0x5438 Size=0x10
        unsigned long m_FrameTicks;// Offset=0x5448 Size=0x4
        unsigned long m_FrameEndLow;// Offset=0x544c Size=0x4
        unsigned long m_FrameEndHigh;// Offset=0x5450 Size=0x4
        float m_PerfFreq;// Offset=0x5454 Size=0x4
        float m_PerfPeriod;// Offset=0x5458 Size=0x4
        unsigned char __align8[4];// Offset=0x545c Size=0x4
        union _LARGE_INTEGER m_TimeBlocked;// Offset=0x5460 Size=0x8
        union _LARGE_INTEGER m_TimeThrottled;// Offset=0x5468 Size=0x8
        unsigned long m_BlockedTicks;// Offset=0x5470 Size=0x4
        unsigned long m_ThrottledTicks;// Offset=0x5474 Size=0x4
        unsigned long m_XamGPURead;// Offset=0x5478 Size=0x4
        unsigned long m_XamGPUWrite;// Offset=0x547c Size=0x4
        int m_XamGPUEnabled;// Offset=0x5480 Size=0x4
        struct D3D::CPerfCountersPhysical * m_pPerfCountersPhysical;// Offset=0x5484 Size=0x4
        struct D3D::CPerfCounters * m_PerfCounters;// Offset=0x5488 Size=0x4
        unsigned long * m_pSwapStallTimeStamps;// Offset=0x548c Size=0x4
        unsigned long m_PerfCounterStatus;// Offset=0x5490 Size=0x4
        unsigned long m_PerfCounterReadPtr;// Offset=0x5494 Size=0x4
        unsigned long m_PerfCounterWritePtr;// Offset=0x5498 Size=0x4
        unsigned long m_PerfCounterUpdateFrame;// Offset=0x549c Size=0x4
        unsigned long * m_pPixGpuTimingCurrent;// Offset=0x54a0 Size=0x4
        unsigned long * m_pPixGpuTimingLimit;// Offset=0x54a4 Size=0x4
        int m_OutOfGpuTimingMemory;// Offset=0x54a8 Size=0x4
        unsigned long m_PixTimeOfLastVerticalBlank;// Offset=0x54ac Size=0x4
        enum _D3DFORMAT m_PixSwapDisplayFormat;// Offset=0x54b0 Size=0x4
        unsigned long m_PixSwapDisplayWidth;// Offset=0x54b4 Size=0x4
        unsigned long m_PixSwapDisplayHeight;// Offset=0x54b8 Size=0x4
        unsigned long m_PixSwapDisplayAddress;// Offset=0x54bc Size=0x4
        struct _D3DPRIVATE_SCALER_PARAMETERS * m_pPixSwapScaler;// Offset=0x54c0 Size=0x4
        struct _D3DGAMMARAMP * m_pPixSwapGamma;// Offset=0x54c4 Size=0x4
        struct _XVIDEO_MODE m_PixSwapVideoMode;// Offset=0x54c8 Size=0x30
        struct _D3DPRIVATE_SCALER_PARAMETERS m_PixPlaybackScaler;// Offset=0x54f8 Size=0x38
        struct _D3DGAMMARAMP m_PixPlaybackGamma;// Offset=0x5530 Size=0x600
        int m_PixPlaybackHasGamma;// Offset=0x5b30 Size=0x4
        unsigned long m_XamCommandBufferSize;// Offset=0x5b34 Size=0x4
        unsigned long m_PixEventLevel;// Offset=0x5b38 Size=0x4
        void  ( * m_pSubmitHook)(unsigned long ,void ** ,unsigned long * ,unsigned long );// Offset=0x5b3c Size=0x4
        struct D3D::XBMContext m_XbmContext;// Offset=0x5b40 Size=0x26c
        unsigned long m_CreateDeviceFlags;// Offset=0x5dac Size=0x4
        int m_AsyncResourcesShutdown;// Offset=0x5db0 Size=0x4
        struct D3D::AsyncResourcesPhysicalData * m_AsyncResourcesPhysicalData;// Offset=0x5db4 Size=0x4
        unsigned long m_PrefetchBlockIB2Size;// Offset=0x5db8 Size=0x4
        struct AsyncResourcesData// Size=0x10 (Id=39085)
        {
            unsigned long ResourceFence;// Offset=0x0 Size=0x4
            unsigned long ResourceReadFence;// Offset=0x4 Size=0x4
            unsigned long long AsyncBlock;// Offset=0x8 Size=0x8
        };
        unsigned char __align9[23980];// Offset=0x10 Size=0x5dac
        struct D3D::CDevice::AsyncResourcesData * m_AsyncResources;// Offset=0x5dbc Size=0x4
        unsigned long long m_AsyncResourcesMaskSignal;// Offset=0x5dc0 Size=0x8
        unsigned long * BeginRingBig(unsigned long );// Offset=0x0 Size=0x78
        unsigned long MakeSegment(unsigned long ,unsigned long );
        void MarkAsOutOfMemory();// Offset=0x0 Size=0x74
        void SaveRingBufferState();
        void RestoreRingBufferState();
        int IsPastStopPoint(unsigned long * ,unsigned long );
        int IsSecondaryMemoryBusy(unsigned long * ,unsigned long );
        void BlockOnSecondaryPosition(unsigned long * ,unsigned long );// Offset=0x0 Size=0xb4
        unsigned long * BeginRingAlloc(unsigned long ,unsigned long );// Offset=0x0 Size=0x1a0
        void EndRingAlloc(void * );
        unsigned long * StartNewSegment(unsigned long );// Offset=0x0 Size=0x1a4
        int IsPrimaryMemoryBusy(unsigned long ,unsigned long );
        unsigned long BlockOnPrimaryRange(unsigned long ,unsigned long );// Offset=0x0 Size=0xc8
        void AddCommandsToPrimaryBuffer(unsigned long * ,unsigned long );// Offset=0x0 Size=0x104
        void AddCallsToPrimaryBuffer(struct D3D::SegmentCall * ,unsigned long );// Offset=0x0 Size=0x240
        void CreateInvalidateBuffer(unsigned long * ,unsigned long * );// Offset=0x0 Size=0x1f4
        void KickOffSegment();// Offset=0x0 Size=0x180
        unsigned long * SetFence(unsigned long * );// Offset=0x0 Size=0xec
        unsigned long * QueueIndirectBuffer(unsigned long * ,unsigned long ,unsigned long ,unsigned long ,class D3D::CRingAllocList * );// Offset=0x0 Size=0xc8
        void QueueIndirectBuffers(struct D3D::SegmentCall * ,unsigned long );// Offset=0x0 Size=0x128
        int ThreadOwnsDevice();
        unsigned long * KickOff();// Offset=0x0 Size=0xfc
        void BlockOnFence(unsigned long ,enum _D3DBLOCKTYPE ,struct D3DResource * ,bool );// Offset=0x0 Size=0xf4
        unsigned long Age(unsigned long );
        int IsFencePending(unsigned long );
        int IsCurrentFence(unsigned long );
        unsigned long MostRecentFence();
        int IsEmptySegment();
        void VerifyGpuOwnership(unsigned long ,unsigned long long );
        void VerifyGpuOwnershipTag(enum _D3DTAG );
        void VerifyD3DOwnership(unsigned long ,unsigned long long );
        int IsLazy(enum D3D::LazyState );
        unsigned long long GetLazy(enum D3D::LazyState );
        void SetLazyRange(enum D3D::LazyState ,unsigned long ,unsigned long );
        void SetLazyDirect(unsigned long long * ,enum D3D::LazyState ,unsigned long );
        void ClearLazyDirect(unsigned long long * ,enum D3D::LazyState ,unsigned long );
        int TestLazyDirect(unsigned long long ,enum D3D::LazyState ,unsigned long );
        void SetLazyMask(unsigned long ,unsigned long long ,enum D3D::LazyState );
        void ClearLazyMask(unsigned long ,unsigned long long ,enum D3D::LazyState );
        void ClearLazyRange(enum D3D::LazyState );
        void ClearLazyRange(enum D3D::LazyState ,unsigned long ,unsigned long );
        void SetLazyState(enum D3D::LazyState ,unsigned long );
        void ClearLazyState(enum D3D::LazyState ,unsigned long );
        void SetLazyVertexFetchConstant(unsigned long );
        void SetLazyVertexShaderConstant(unsigned long ,unsigned long );
        void SetLazyPixelShaderConstant(unsigned long ,unsigned long );
        void SetAllLazyState();
        void SetAllCommandBufferLazyState(struct _D3DTAGCOLLECTION * );
        void SetUsedRange(enum _D3DTAG ,unsigned long ,unsigned long );
        void SetUsedTag(enum _D3DTAG );
        void CalculatePredicatedHiControlFlag();
        bool TilingSurface();
        bool CalculatePredicateDrawPrimsFlag();
        void SetPredicationState(unsigned long ,unsigned long );
        void AddSegmentCallToCommandBuffer(unsigned long ,unsigned long );
        unsigned long * BeginRing();
        unsigned long * BeginBuffer(unsigned long * ,unsigned long );
        unsigned long * BeginRingManual();
        void Packet0(unsigned long &** ,unsigned long ,unsigned long );
        void Packet0NoInc(unsigned long &** ,unsigned long ,unsigned long );
        void Packet2Nop(unsigned long &** );
        void Packet3(unsigned long &** ,unsigned long ,unsigned long ,unsigned long );
        void PutD(unsigned long &** ,unsigned long );
        void PutF(unsigned long &** ,float );
        void PutRaw(unsigned long * );
        void EndRing(unsigned long * );
        unsigned long * EndBuffer(unsigned long * );
        void Packet3Predicated(unsigned long &** ,unsigned long ,unsigned long );
        void Packet3Gpu(unsigned long &** ,unsigned long ,unsigned long );
        void PutPix(unsigned long &** ,enum PIXMeta );
        void PutPix(unsigned long &** ,enum PIXMeta ,void * ,unsigned long );
        void CDevice();
        class D3D::CDevice & operator=(class D3D::CDevice & );
    };
};

struct D3D::CDevice::AsyncResourcesData// Size=0x10 (Id=3696)
{
    unsigned long ResourceFence;// Offset=0x0 Size=0x4
    unsigned long ResourceReadFence;// Offset=0x4 Size=0x4
    unsigned long long AsyncBlock;// Offset=0x8 Size=0x8
};

struct D3D::WriteBacks// Size=0x60 (Id=3697)
{
    unsigned long GpuFence;// Offset=0x0 Size=0x4
    unsigned long GpuPosition;// Offset=0x4 Size=0x4
    unsigned long SystemSwapWritebacks[4];// Offset=0x8 Size=0x10
    unsigned long DumpLastTracePoint;// Offset=0x18 Size=0x4
    unsigned long ScratchRegister;// Offset=0x1c Size=0x4
    unsigned long Unused;// Offset=0x20 Size=0x4
    unsigned long XpsWriteBack[6];// Offset=0x24 Size=0x18
    unsigned long PrimaryRingBufferReadIndex;// Offset=0x3c Size=0x4
    unsigned long XamGPUBuffer[8];// Offset=0x40 Size=0x20
};

class D3D::CXpsGlobal : public XpsGlobal// Size=0x17c (Id=3698)
{
    private unsigned char __align0[48];// Offset=0x0 Size=0x30
    struct // Size=0x4 (Id=0)
    {
        int RenderPass:1;// Offset=0x30 Size=0x4 BitOffset=0x1f BitSize=0x1
        int ZPassBracket:1;// Offset=0x30 Size=0x4 BitOffset=0x1e BitSize=0x1
        int TilingBracket:1;// Offset=0x30 Size=0x4 BitOffset=0x1d BitSize=0x1
    };
    public unsigned long Tile;// Offset=0x34 Size=0x4
    public unsigned long ExpectedCpuMask;// Offset=0x38 Size=0x4
    public long ActiveThreads;// Offset=0x3c Size=0x4
    public int Queues;// Offset=0x40 Size=0x4
    public unsigned long QueueLock;// Offset=0x44 Size=0x4
    public unsigned long * pResumePoint;// Offset=0x48 Size=0x4
    public struct D3D::RingAllocChunk * pCurrentQueue;// Offset=0x4c Size=0x4
    public struct D3D::RingAllocChunk EmptyChunk;// Offset=0x50 Size=0x10
    public int Drain;// Offset=0x60 Size=0x4
    public unsigned long DrainThreads;// Offset=0x64 Size=0x4
    public int L2Locked;// Offset=0x68 Size=0x4
    public struct D3D::WorkerState State;// Offset=0x6c Size=0xf8
    public unsigned long PredicationSelect;// Offset=0x164 Size=0x4
    public unsigned long PredicationMask;// Offset=0x168 Size=0x4
    public unsigned long * pZPassCommand;// Offset=0x16c Size=0x4
    public unsigned long * pInvokePassCommand;// Offset=0x170 Size=0x4
    public unsigned long * pTilingCommand;// Offset=0x174 Size=0x4
    public unsigned long DefaultThread;// Offset=0x178 Size=0x4
};

struct D3D::XBMContext// Size=0x26c (Id=3699)
{
    void * pFrameData[2];// Offset=0x0 Size=0x8
    unsigned char * pFrameAudioData;// Offset=0x8 Size=0x4
    unsigned short FrameSizeInSectors;// Offset=0xc Size=0x2
    unsigned short FrameVideoSizeInSectors;// Offset=0xe Size=0x2
    unsigned long SwapTimeStamp;// Offset=0x10 Size=0x4
    void * CaptureFile[41];// Offset=0x14 Size=0xa4
    unsigned int CaptureFileSize[41];// Offset=0xb8 Size=0xa4
    struct _OVERLAPPED Overlapped;// Offset=0x15c Size=0x14
    struct // Size=0x8 (Id=0)
    {
        unsigned int FrontBufferWidth:16;// Offset=0x170 Size=0x4 BitOffset=0x10 BitSize=0x10
        unsigned int FrontBufferHeight:16;// Offset=0x170 Size=0x4 BitOffset=0x0 BitSize=0x10
        unsigned int FrontBufferWidthTA:16;// Offset=0x174 Size=0x4 BitOffset=0x10 BitSize=0x10
        unsigned int FrontBufferHeightTA:16;// Offset=0x174 Size=0x4 BitOffset=0x0 BitSize=0x10
    };
    unsigned int VertexCount;// Offset=0x178 Size=0x4
    unsigned int CaptureFileOffset;// Offset=0x17c Size=0x4
    unsigned int MaxFinalFileSegmentSize;// Offset=0x180 Size=0x4
    unsigned int MaxExportIndex;// Offset=0x184 Size=0x4
    struct _XMFLOAT4 ShaderConstant[12];// Offset=0x188 Size=0xc0
    unsigned int CaptureFrame;// Offset=0x248 Size=0x4
    unsigned long CaptureFence;// Offset=0x24c Size=0x4
    struct _D3DGAMMARAMP * pGammaRamp;// Offset=0x250 Size=0x4
    struct // Size=0x5 (Id=0)
    {
        unsigned long FrameFlags:2;// Offset=0x254 Size=0x4 BitOffset=0x1e BitSize=0x2
        unsigned long FrameFlagsPrev:2;// Offset=0x254 Size=0x4 BitOffset=0x1c BitSize=0x2
        unsigned long FrameFlagsCumulative:2;// Offset=0x254 Size=0x4 BitOffset=0x1a BitSize=0x2
        unsigned int CaptureFileIndex:6;// Offset=0x254 Size=0x4 BitOffset=0x14 BitSize=0x6
        unsigned int CaptureFileCount:6;// Offset=0x254 Size=0x4 BitOffset=0xe BitSize=0x6
        bool UsePWLGamma:1;// Offset=0x258 Size=0x1 BitOffset=0x7 BitSize=0x1
    };
    unsigned char __align0[3];// Offset=0x259 Size=0x3
    struct // Size=0x5 (Id=0)
    {
        enum D3D::XBMCAPTURETYPE CaptureType:3;// Offset=0x25c Size=0x4 BitOffset=0x1d BitSize=0x3
        bool FrameExported:1;// Offset=0x260 Size=0x1 BitOffset=0x7 BitSize=0x1
        bool FrameWritten:1;// Offset=0x260 Size=0x1 BitOffset=0x6 BitSize=0x1
        bool Looped:1;// Offset=0x260 Size=0x1 BitOffset=0x5 BitSize=0x1
        bool Created:1;// Offset=0x260 Size=0x1 BitOffset=0x4 BitSize=0x1
    };
    unsigned char __align1[3];// Offset=0x261 Size=0x3
    struct // Size=0x4 (Id=0)
    {
        enum D3D::MEMORYREGION FrameDataRegion0:2;// Offset=0x264 Size=0x4 BitOffset=0x1e BitSize=0x2
        enum D3D::MEMORYREGION FrameDataRegion1:2;// Offset=0x264 Size=0x4 BitOffset=0x1c BitSize=0x2
        enum D3D::MEMORYREGION GammaRampRegion:1;// Offset=0x264 Size=0x4 BitOffset=0x1b BitSize=0x1
    };
    unsigned long XamFrontBufferBase;// Offset=0x268 Size=0x4
    void XBMContext();
    struct D3D::XBMContext & operator=(struct D3D::XBMContext & );
};

struct D3D::XBMContext// Size=0x26c (Id=3700)
{
    void * pFrameData[2];// Offset=0x0 Size=0x8
    unsigned char * pFrameAudioData;// Offset=0x8 Size=0x4
    unsigned short FrameSizeInSectors;// Offset=0xc Size=0x2
    unsigned short FrameVideoSizeInSectors;// Offset=0xe Size=0x2
    unsigned long SwapTimeStamp;// Offset=0x10 Size=0x4
    void * CaptureFile[41];// Offset=0x14 Size=0xa4
    unsigned int CaptureFileSize[41];// Offset=0xb8 Size=0xa4
    struct _OVERLAPPED Overlapped;// Offset=0x15c Size=0x14
    struct // Size=0x8 (Id=0)
    {
        unsigned int FrontBufferWidth:16;// Offset=0x170 Size=0x4 BitOffset=0x10 BitSize=0x10
        unsigned int FrontBufferHeight:16;// Offset=0x170 Size=0x4 BitOffset=0x0 BitSize=0x10
        unsigned int FrontBufferWidthTA:16;// Offset=0x174 Size=0x4 BitOffset=0x10 BitSize=0x10
        unsigned int FrontBufferHeightTA:16;// Offset=0x174 Size=0x4 BitOffset=0x0 BitSize=0x10
    };
    unsigned int VertexCount;// Offset=0x178 Size=0x4
    unsigned int CaptureFileOffset;// Offset=0x17c Size=0x4
    unsigned int MaxFinalFileSegmentSize;// Offset=0x180 Size=0x4
    unsigned int MaxExportIndex;// Offset=0x184 Size=0x4
    struct _XMFLOAT4 ShaderConstant[12];// Offset=0x188 Size=0xc0
    unsigned int CaptureFrame;// Offset=0x248 Size=0x4
    unsigned long CaptureFence;// Offset=0x24c Size=0x4
    struct _D3DGAMMARAMP * pGammaRamp;// Offset=0x250 Size=0x4
    struct // Size=0x5 (Id=0)
    {
        unsigned long FrameFlags:2;// Offset=0x254 Size=0x4 BitOffset=0x1e BitSize=0x2
        unsigned long FrameFlagsPrev:2;// Offset=0x254 Size=0x4 BitOffset=0x1c BitSize=0x2
        unsigned long FrameFlagsCumulative:2;// Offset=0x254 Size=0x4 BitOffset=0x1a BitSize=0x2
        unsigned int CaptureFileIndex:6;// Offset=0x254 Size=0x4 BitOffset=0x14 BitSize=0x6
        unsigned int CaptureFileCount:6;// Offset=0x254 Size=0x4 BitOffset=0xe BitSize=0x6
        bool UsePWLGamma:1;// Offset=0x258 Size=0x1 BitOffset=0x7 BitSize=0x1
    };
    unsigned char __align0[3];// Offset=0x259 Size=0x3
    struct // Size=0x5 (Id=0)
    {
        enum D3D::XBMCAPTURETYPE CaptureType:3;// Offset=0x25c Size=0x4 BitOffset=0x1d BitSize=0x3
        bool FrameExported:1;// Offset=0x260 Size=0x1 BitOffset=0x7 BitSize=0x1
        bool FrameWritten:1;// Offset=0x260 Size=0x1 BitOffset=0x6 BitSize=0x1
        bool Looped:1;// Offset=0x260 Size=0x1 BitOffset=0x5 BitSize=0x1
        bool Created:1;// Offset=0x260 Size=0x1 BitOffset=0x4 BitSize=0x1
    };
    unsigned char __align1[3];// Offset=0x261 Size=0x3
    struct // Size=0x4 (Id=0)
    {
        enum D3D::MEMORYREGION FrameDataRegion0:2;// Offset=0x264 Size=0x4 BitOffset=0x1e BitSize=0x2
        enum D3D::MEMORYREGION FrameDataRegion1:2;// Offset=0x264 Size=0x4 BitOffset=0x1c BitSize=0x2
        enum D3D::MEMORYREGION GammaRampRegion:1;// Offset=0x264 Size=0x4 BitOffset=0x1b BitSize=0x1
    };
    unsigned long XamFrontBufferBase;// Offset=0x268 Size=0x4
    void XBMContext();
    struct D3D::XBMContext & operator=(struct D3D::XBMContext & );
};

struct D3D::CCapture::HashMap::ENTRY// Size=0x8 (Id=3701)
{
    unsigned long val;// Offset=0x0 Size=0x4
    unsigned long flags;// Offset=0x4 Size=0x4
};

class D3D::D3DFastVector<D3D::CCapture::HashMap::ENTRY,&D3D::CCapture::HashMap::HashMemAlloc,&D3D::CCapture::HashMap::HashMemFree>// Size=0xc (Id=3702)
{
    public void D3DFastVector<D3D::CCapture::HashMap::ENTRY,&D3D::CCapture::HashMap::HashMemAlloc,&D3D::CCapture::HashMap::HashMemFree>();
    public void ~D3DFastVector<D3D::CCapture::HashMap::ENTRY,&D3D::CCapture::HashMap::HashMemAlloc,&D3D::CCapture::HashMap::HashMemFree>();
    public void init(unsigned long ,HRESULT & );
    public void clear();
    public void destroy();
    public void resize(unsigned long ,HRESULT & );
    public void push_back(struct D3D::CCapture::HashMap::ENTRY & ,HRESULT & );
    public void push_back_empty(HRESULT & );
    public void ensure(unsigned long ,HRESULT & );
    public void ensure2(unsigned long ,HRESULT & );
    public struct D3D::CCapture::HashMap::ENTRY * begin();
    public struct D3D::CCapture::HashMap::ENTRY * end();
    public unsigned long size();
    public unsigned long sizeInBytes();
    public unsigned long capacity();
    public struct D3D::CCapture::HashMap::ENTRY * erase(struct D3D::CCapture::HashMap::ENTRY * );
    private struct D3D::CCapture::HashMap::ENTRY * m_pData;// Offset=0x0 Size=0x4
    private unsigned long m_Size;// Offset=0x4 Size=0x4
    private unsigned long m_Capacity;// Offset=0x8 Size=0x4
    public void * __vecDelDtor(unsigned int );
};

class D3D::D3DFastVector<D3D::CCapture::HashMap::ENTRY,&D3D::CCapture::HashMap::HashMemAlloc,&D3D::CCapture::HashMap::HashMemFree>// Size=0xc (Id=3703)
{
    public void D3DFastVector<D3D::CCapture::HashMap::ENTRY,&D3D::CCapture::HashMap::HashMemAlloc,&D3D::CCapture::HashMap::HashMemFree>();
    public void ~D3DFastVector<D3D::CCapture::HashMap::ENTRY,&D3D::CCapture::HashMap::HashMemAlloc,&D3D::CCapture::HashMap::HashMemFree>();
    public void init(unsigned long ,HRESULT & );
    public void clear();
    public void destroy();
    public void resize(unsigned long ,HRESULT & );
    public void push_back(struct D3D::CCapture::HashMap::ENTRY & ,HRESULT & );
    public void push_back_empty(HRESULT & );
    public void ensure(unsigned long ,HRESULT & );
    public void ensure2(unsigned long ,HRESULT & );
    public struct D3D::CCapture::HashMap::ENTRY * begin();
    public struct D3D::CCapture::HashMap::ENTRY * end();
    public unsigned long size();
    public unsigned long sizeInBytes();
    public unsigned long capacity();
    public struct D3D::CCapture::HashMap::ENTRY * erase(struct D3D::CCapture::HashMap::ENTRY * );
    private struct D3D::CCapture::HashMap::ENTRY * m_pData;// Offset=0x0 Size=0x4
    private unsigned long m_Size;// Offset=0x4 Size=0x4
    private unsigned long m_Capacity;// Offset=0x8 Size=0x4
    public void * __vecDelDtor(unsigned int );
};

struct D3D::RingAllocChunk// Size=0x10 (Id=3704)
{
    unsigned long dwEnd;// Offset=0x0 Size=0x4
    unsigned long Data[3];// Offset=0x4 Size=0xc
};

class D3D::CParser// Size=0x1c (Id=3705)
{
    private unsigned long * m_pGet;// Offset=0x0 Size=0x4
    private unsigned long * m_pEnd;// Offset=0x4 Size=0x4
    private unsigned long * m_pPacket;// Offset=0x8 Size=0x4
    private unsigned long m_EncodeOp;// Offset=0xc Size=0x4
    private unsigned long m_EncodeCount;// Offset=0x10 Size=0x4
    private unsigned long m_EncodeOpIncrement;// Offset=0x14 Size=0x4
    private unsigned long m_Flags;// Offset=0x18 Size=0x4
    public void CParser(unsigned long * ,unsigned long );
    public void CParser();
    public void Start(unsigned long * ,unsigned long );
    public int Get(unsigned long * ,struct D3D::ParseData * );
    public void QueryPosition(unsigned long ** ,unsigned long * );
};

struct D3D::AsyncResourcesPhysicalData// Size=0x240 (Id=3706)
{
    unsigned long DummyZeroedSpace[2];// Offset=0x0 Size=0x8
    unsigned char __align0[24];// Offset=0x8 Size=0x18
    unsigned long PrefetchBlockIB2[128];// Offset=0x20 Size=0x200
    unsigned long long AsyncResourcesSemaphores;// Offset=0x220 Size=0x8
};

union GPUTEXTURE_FETCH_CONSTANT// Size=0x18 (Id=3707)
{
    struct // Size=0x8 (Id=0)
    {
        unsigned long Type:2;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x2
        unsigned long SignX:2;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x2
        unsigned long SignY:2;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x2
        unsigned long SignZ:2;// Offset=0x0 Size=0x4 BitOffset=0x6 BitSize=0x2
        unsigned long SignW:2;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x2
        unsigned long ClampX:3;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0x3
        unsigned long ClampY:3;// Offset=0x0 Size=0x4 BitOffset=0xd BitSize=0x3
        unsigned long ClampZ:3;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x3
        unsigned long Pitch:9;// Offset=0x0 Size=0x4 BitOffset=0x16 BitSize=0x9
        unsigned long Tiled:1;// Offset=0x0 Size=0x4 BitOffset=0x1f BitSize=0x1
        unsigned long DataFormat:6;// Offset=0x4 Size=0x4 BitOffset=0x0 BitSize=0x6
        unsigned long Endian:2;// Offset=0x4 Size=0x4 BitOffset=0x6 BitSize=0x2
        unsigned long RequestSize:2;// Offset=0x4 Size=0x4 BitOffset=0x8 BitSize=0x2
        unsigned long Stacked:1;// Offset=0x4 Size=0x4 BitOffset=0xa BitSize=0x1
        unsigned long ClampPolicy:1;// Offset=0x4 Size=0x4 BitOffset=0xb BitSize=0x1
        unsigned long BaseAddress:20;// Offset=0x4 Size=0x4 BitOffset=0xc BitSize=0x14
    };
    union GPUTEXTURE_FETCH_CONSTANT::_unnamed_1102::<unnamed-type-Size> Size;// Offset=0x8 Size=0x4
    struct // Size=0xc (Id=0)
    {
        unsigned long NumFormat:1;// Offset=0xc Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long SwizzleX:3;// Offset=0xc Size=0x4 BitOffset=0x1 BitSize=0x3
        unsigned long SwizzleY:3;// Offset=0xc Size=0x4 BitOffset=0x4 BitSize=0x3
        unsigned long SwizzleZ:3;// Offset=0xc Size=0x4 BitOffset=0x7 BitSize=0x3
        unsigned long SwizzleW:3;// Offset=0xc Size=0x4 BitOffset=0xa BitSize=0x3
        int ExpAdjust:6;// Offset=0xc Size=0x4 BitOffset=0xd BitSize=0x6
        unsigned long MagFilter:2;// Offset=0xc Size=0x4 BitOffset=0x13 BitSize=0x2
        unsigned long MinFilter:2;// Offset=0xc Size=0x4 BitOffset=0x15 BitSize=0x2
        unsigned long MipFilter:2;// Offset=0xc Size=0x4 BitOffset=0x17 BitSize=0x2
        unsigned long AnisoFilter:3;// Offset=0xc Size=0x4 BitOffset=0x19 BitSize=0x3
        unsigned long BorderSize:1;// Offset=0xc Size=0x4 BitOffset=0x1f BitSize=0x1
        unsigned long VolMagFilter:1;// Offset=0x10 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long VolMinFilter:1;// Offset=0x10 Size=0x4 BitOffset=0x1 BitSize=0x1
        unsigned long MinMipLevel:4;// Offset=0x10 Size=0x4 BitOffset=0x2 BitSize=0x4
        unsigned long MaxMipLevel:4;// Offset=0x10 Size=0x4 BitOffset=0x6 BitSize=0x4
        unsigned long MagAnisoWalk:1;// Offset=0x10 Size=0x4 BitOffset=0xa BitSize=0x1
        unsigned long MinAnisoWalk:1;// Offset=0x10 Size=0x4 BitOffset=0xb BitSize=0x1
        int LODBias:10;// Offset=0x10 Size=0x4 BitOffset=0xc BitSize=0xa
        int GradExpAdjustH:5;// Offset=0x10 Size=0x4 BitOffset=0x16 BitSize=0x5
        int GradExpAdjustV:5;// Offset=0x10 Size=0x4 BitOffset=0x1b BitSize=0x5
        unsigned long BorderColor:2;// Offset=0x14 Size=0x4 BitOffset=0x0 BitSize=0x2
        unsigned long ForceBCWToMax:1;// Offset=0x14 Size=0x4 BitOffset=0x2 BitSize=0x1
        unsigned long TriClamp:2;// Offset=0x14 Size=0x4 BitOffset=0x3 BitSize=0x2
        int AnisoBias:4;// Offset=0x14 Size=0x4 BitOffset=0x5 BitSize=0x4
        unsigned long Dimension:2;// Offset=0x14 Size=0x4 BitOffset=0x9 BitSize=0x2
        unsigned long PackedMips:1;// Offset=0x14 Size=0x4 BitOffset=0xb BitSize=0x1
        unsigned long MipAddress:20;// Offset=0x14 Size=0x4 BitOffset=0xc BitSize=0x14
    };
    unsigned long dword[6];// Offset=0x0 Size=0x18
};

class D3D::CCapture// Size=0x358 (Id=3708)
{
    class HashMap// Size=0x300 (Id=39442)
    {
        struct ENTRY// Size=0x8 (Id=39443)
        {
            unsigned long val;// Offset=0x0 Size=0x4
            unsigned long flags;// Offset=0x4 Size=0x4
        };
        public void * HashMemAlloc(unsigned long );
        public void HashMemFree(void * );
        public unsigned long * Create(unsigned long );
        public unsigned long * operator[](unsigned long );
        public void Clear();
        public class D3D::D3DFastVector<D3D::CCapture::HashMap::ENTRY,&D3D::CCapture::HashMap::HashMemAlloc,&D3D::CCapture::HashMap::HashMemFree> pLists[64];// Offset=0x0 Size=0x300
        public float GetAve();
        public unsigned long GetMax();
        public void HashMap();
        public void ~HashMap();
        public void * __vecDelDtor(unsigned int );
    };
    protected void SavePages();
    protected int ParseRegisters(unsigned long ,void * ,unsigned long );
    protected void ShadowShaderProgram(unsigned long * ,unsigned long ,unsigned long ,unsigned long );
    protected int HandleType3Opcode(unsigned long ,unsigned long * ,unsigned long ,int );
    public void  ( * m_WriteFunction)(void * ,unsigned long );// Offset=0x4 Size=0x4
    public void *  ( * m_AllocFunction)(unsigned long );// Offset=0x8 Size=0x4
    public void  ( * m_FreeFunction)(void * );// Offset=0xc Size=0x4
    public class D3D::CCapture::HashMap hashMemoryMap;// Offset=0x10 Size=0x300
    public unsigned long m_Primitive;// Offset=0x310 Size=0x4
    struct // Size=0x4 (Id=0)
    {
        int m_OutOfMemory:1;// Offset=0x314 Size=0x4 BitOffset=0x1f BitSize=0x1
        int m_RangeError:1;// Offset=0x314 Size=0x4 BitOffset=0x1e BitSize=0x1
        int m_WriteError:1;// Offset=0x314 Size=0x4 BitOffset=0x1d BitSize=0x1
        int m_Recording:1;// Offset=0x314 Size=0x4 BitOffset=0x1c BitSize=0x1
        int m_CrashDump:1;// Offset=0x314 Size=0x4 BitOffset=0x1b BitSize=0x1
        int m_UpdateExportCrcs:1;// Offset=0x314 Size=0x4 BitOffset=0x1a BitSize=0x1
    };
    public unsigned long m_Fence;// Offset=0x318 Size=0x4
    public unsigned long m_LastSaveFence;// Offset=0x31c Size=0x4
    public unsigned long m_VertexShaderBase;// Offset=0x320 Size=0x4
    public unsigned long m_PixelShaderBase;// Offset=0x324 Size=0x4
    public unsigned long m_VertexShaderSize;// Offset=0x328 Size=0x4
    public unsigned long m_PixelShaderSize;// Offset=0x32c Size=0x4
    public unsigned long m_FenceAddress;// Offset=0x330 Size=0x4
    public long m_WriteDataLock;// Offset=0x334 Size=0x4
    public class D3D::CDevice * m_pDevice;// Offset=0x338 Size=0x4
    public unsigned long m_PixCaptureWorkerDpcContext;// Offset=0x33c Size=0x4
    public unsigned long m_PredicateMaskLo;// Offset=0x340 Size=0x4
    public unsigned long m_PredicateMaskHi;// Offset=0x344 Size=0x4
    public unsigned long m_PredicateSelectLo;// Offset=0x348 Size=0x4
    public unsigned long m_PredicateSelectHi;// Offset=0x34c Size=0x4
    public void  ( * m_pCallback)(unsigned long );// Offset=0x350 Size=0x4
    public unsigned long m_CallbackContext;// Offset=0x354 Size=0x4
    public void ~CCapture();
    public void MarkUsedPages(unsigned long ,unsigned long ,enum RecordResourceType );
    public void WriteData(enum RecordType ,void * ,unsigned long ,unsigned long ,unsigned long ,unsigned long );
    public int PreSubmit(void * ,unsigned long ,unsigned long );
    public void PostSubmit();
    public HRESULT Start();
    public HRESULT End(union GPUTEXTURE_FETCH_CONSTANT * );
    public void Initialize(struct D3DDevice * ,unsigned long ,void  ( * )(void * ,unsigned long ),void *  ( * )(unsigned long ),void  ( * )(void * ));
    public void CCapture(class D3D::CCapture & );
    public void CCapture();
    public class D3D::CCapture & operator=(class D3D::CCapture & );
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class D3D::CCapture// Size=0x358 (Id=3709)
{
    class HashMap// Size=0x300 (Id=39442)
    {
        struct ENTRY// Size=0x8 (Id=39443)
        {
            unsigned long val;// Offset=0x0 Size=0x4
            unsigned long flags;// Offset=0x4 Size=0x4
        };
        public void * HashMemAlloc(unsigned long );
        public void HashMemFree(void * );
        public unsigned long * Create(unsigned long );
        public unsigned long * operator[](unsigned long );
        public void Clear();
        public class D3D::D3DFastVector<D3D::CCapture::HashMap::ENTRY,&D3D::CCapture::HashMap::HashMemAlloc,&D3D::CCapture::HashMap::HashMemFree> pLists[64];// Offset=0x0 Size=0x300
        public float GetAve();
        public unsigned long GetMax();
        public void HashMap();
        public void ~HashMap();
        public void * __vecDelDtor(unsigned int );
    };
    protected void SavePages();
    protected int ParseRegisters(unsigned long ,void * ,unsigned long );
    protected void ShadowShaderProgram(unsigned long * ,unsigned long ,unsigned long ,unsigned long );
    protected int HandleType3Opcode(unsigned long ,unsigned long * ,unsigned long ,int );
    public void  ( * m_WriteFunction)(void * ,unsigned long );// Offset=0x4 Size=0x4
    public void *  ( * m_AllocFunction)(unsigned long );// Offset=0x8 Size=0x4
    public void  ( * m_FreeFunction)(void * );// Offset=0xc Size=0x4
    public class D3D::CCapture::HashMap hashMemoryMap;// Offset=0x10 Size=0x300
    public unsigned long m_Primitive;// Offset=0x310 Size=0x4
    struct // Size=0x4 (Id=0)
    {
        int m_OutOfMemory:1;// Offset=0x314 Size=0x4 BitOffset=0x1f BitSize=0x1
        int m_RangeError:1;// Offset=0x314 Size=0x4 BitOffset=0x1e BitSize=0x1
        int m_WriteError:1;// Offset=0x314 Size=0x4 BitOffset=0x1d BitSize=0x1
        int m_Recording:1;// Offset=0x314 Size=0x4 BitOffset=0x1c BitSize=0x1
        int m_CrashDump:1;// Offset=0x314 Size=0x4 BitOffset=0x1b BitSize=0x1
        int m_UpdateExportCrcs:1;// Offset=0x314 Size=0x4 BitOffset=0x1a BitSize=0x1
    };
    public unsigned long m_Fence;// Offset=0x318 Size=0x4
    public unsigned long m_LastSaveFence;// Offset=0x31c Size=0x4
    public unsigned long m_VertexShaderBase;// Offset=0x320 Size=0x4
    public unsigned long m_PixelShaderBase;// Offset=0x324 Size=0x4
    public unsigned long m_VertexShaderSize;// Offset=0x328 Size=0x4
    public unsigned long m_PixelShaderSize;// Offset=0x32c Size=0x4
    public unsigned long m_FenceAddress;// Offset=0x330 Size=0x4
    public long m_WriteDataLock;// Offset=0x334 Size=0x4
    public class D3D::CDevice * m_pDevice;// Offset=0x338 Size=0x4
    public unsigned long m_PixCaptureWorkerDpcContext;// Offset=0x33c Size=0x4
    public unsigned long m_PredicateMaskLo;// Offset=0x340 Size=0x4
    public unsigned long m_PredicateMaskHi;// Offset=0x344 Size=0x4
    public unsigned long m_PredicateSelectLo;// Offset=0x348 Size=0x4
    public unsigned long m_PredicateSelectHi;// Offset=0x34c Size=0x4
    public void  ( * m_pCallback)(unsigned long );// Offset=0x350 Size=0x4
    public unsigned long m_CallbackContext;// Offset=0x354 Size=0x4
    public void ~CCapture();
    public void MarkUsedPages(unsigned long ,unsigned long ,enum RecordResourceType );
    public void WriteData(enum RecordType ,void * ,unsigned long ,unsigned long ,unsigned long ,unsigned long );
    public int PreSubmit(void * ,unsigned long ,unsigned long );
    public void PostSubmit();
    public HRESULT Start();
    public HRESULT End(union GPUTEXTURE_FETCH_CONSTANT * );
    public void Initialize(struct D3DDevice * ,unsigned long ,void  ( * )(void * ,unsigned long ),void *  ( * )(unsigned long ),void  ( * )(void * ));
    public void CCapture(class D3D::CCapture & );
    public void CCapture();
    public class D3D::CCapture & operator=(class D3D::CCapture & );
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class D3D::CCapture::HashMap// Size=0x300 (Id=3710)
{
    union // Size=0x8 (Id=0)
    {
        struct ENTRY// Size=0x8 (Id=39443)
        {
            unsigned long val;// Offset=0x0 Size=0x4
            unsigned long flags;// Offset=0x4 Size=0x4
        };
        void * HashMemAlloc(unsigned long );
        void HashMemFree(void * );
        unsigned long * Create(unsigned long );
        unsigned long * operator[](unsigned long );
        void Clear();
        class D3D::D3DFastVector<D3D::CCapture::HashMap::ENTRY,&D3D::CCapture::HashMap::HashMemAlloc,&D3D::CCapture::HashMap::HashMemFree> pLists[64];// Offset=0x0 Size=0x300
    };
    public float GetAve();
    public unsigned long GetMax();
    public void HashMap();
    public void ~HashMap();
    public void * __vecDelDtor(unsigned int );
};

struct D3D::CCapture::HashMap::ENTRY// Size=0x8 (Id=3711)
{
    unsigned long val;// Offset=0x0 Size=0x4
    unsigned long flags;// Offset=0x4 Size=0x4
};

struct _UCODE_R500_DEBUGGER_HINT_HEADER// Size=0x8 (Id=3712)
{
    unsigned long Timestamp;// Offset=0x0 Size=0x4
    unsigned long HintSize;// Offset=0x4 Size=0x4
    unsigned long HintData[0];
};

class D3D::CPixelShader : public D3DPixelShader// Size=0x28 (Id=3713)
{
    private unsigned char __align0[24];// Offset=0x0 Size=0x18
    public unsigned long m_dwPhysical;// Offset=0x18 Size=0x4
    public unsigned long m_Uniqueness;// Offset=0x1c Size=0x4
    public unsigned long long m_LastDeviceAndFrameNumberLoaded;// Offset=0x20 Size=0x8
    public struct _UCODE_HEADER m_Function[0];
    public struct _UCODE_HEADER * GetUCodeHeader();
    public struct _UCODE_R500PSUCODE * GetUCode();
    public unsigned long * GetPhysicalMicrocode();
    public unsigned long GetPhysicalSize();
    public unsigned long GetPhysicalMicrocodeSize();
    public unsigned long GetFunctionSize();
    public int UsesMemexport();
    public struct _UCODE_R500_DEBUGGER_HINT_HEADER * GetDebuggerHint();
};

struct D3D::EnumDescription// Size=0x8 (Id=3714)
{
    unsigned long Value;// Offset=0x0 Size=0x4
    char * Name;// Offset=0x4 Size=0x4
};

struct D3D::ParameterEnum// Size=0x18 (Id=3715)
{
    unsigned long Flags;// Offset=0x0 Size=0x4
    char * FieldName;// Offset=0x4 Size=0x4
    unsigned long FieldMask;// Offset=0x8 Size=0x4
    struct D3D::EnumDescription * pEnumDescriptions;// Offset=0xc Size=0x4
    unsigned long FieldLow;// Offset=0x10 Size=0x4
    unsigned long FieldHigh;// Offset=0x14 Size=0x4
};

class D3D::CRingAllocList// Size=0x14 (Id=3716)
{
    union // Size=0x110 (Id=0)
    {
        struct D3D::RingAllocChunk * m_pFirstChunk;// Offset=0x0 Size=0x4
        struct D3D::RingAllocChunk * m_pChunk;// Offset=0x4 Size=0x4
        unsigned long * m_pData;// Offset=0x8 Size=0x4
        unsigned long * m_pDataLimit;// Offset=0xc Size=0x4
        class D3D::CDevice * m_pDevice;// Offset=0x10 Size=0x4
        unsigned long * MakeSpace();// Offset=0x0 Size=0x110
        void Initialize(class D3D::CDevice * );
        void Finalize();// Offset=0x0 Size=0x44
        struct D3D::RingAllocChunk * GetFirstChunk();
        unsigned long * Begin(unsigned long ,unsigned long );
        unsigned long * Begin(unsigned long );
        void End(unsigned long * );
        void AddChunkNode(struct D3D::RingAllocChunk * ,unsigned long * );// Offset=0x0 Size=0xa8
        void AppendArrayData(void * ,unsigned long ,unsigned long );
    };
};

class D3D::CXpsThread : public D3DXpsThread// Size=0x50 (Id=3717)
{
    private unsigned char __align0[32];// Offset=0x0 Size=0x20
    public struct _KEVENT Event;// Offset=0x20 Size=0x10
    public void * ThreadHandle;// Offset=0x30 Size=0x4
    public unsigned long ThreadId;// Offset=0x34 Size=0x4
    public unsigned long QueueWriterIndex;// Offset=0x38 Size=0x4
    public unsigned long QueueReaderIndex;// Offset=0x3c Size=0x4
    public struct D3D::RingAllocChunk * pQueue[4];// Offset=0x40 Size=0x10
};

struct D3D::CPerfCounters : public D3DPerfCounters// Size=0x10 (Id=3718)
{
    unsigned long m_RefCount;// Offset=0x0 Size=0x4
    struct _D3DPERFCOUNTER_VALUES * m_pValues;// Offset=0x4 Size=0x4
    struct D3DDevice * m_pDevice;// Offset=0x8 Size=0x4
    unsigned long m_Fence;// Offset=0xc Size=0x4
};

struct D3D::SegmentCall// Size=0x8 (Id=3719)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long m_Count:24;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x18
        unsigned long m_QueueCommand:8;// Offset=0x0 Size=0x4 BitOffset=0x18 BitSize=0x8
    };
    unsigned long m_Address;// Offset=0x4 Size=0x4
};

struct D3D::BufferResourceNode// Size=0x8 (Id=3720)
{
    unsigned long m_dwNext;// Offset=0x0 Size=0x4
    unsigned long m_Count;// Offset=0x4 Size=0x4
    class D3D::BufferResource m_Resource[0];
};

class D3D::BufferResource// Size=0x8 (Id=3721)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long m_dwResourceAddress:30;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1e
        unsigned long m_Written:1;// Offset=0x0 Size=0x4 BitOffset=0x1e BitSize=0x1
    };
    public unsigned long m_PredicationMask;// Offset=0x4 Size=0x4
    public void SetResource(struct D3DResource * );
    public struct D3DResource * GetResource();
};

struct D3D::NonSnoopedWriteBacks// Size=0x20 (Id=3722)
{
    unsigned long CallbackSemaphore;// Offset=0x0 Size=0x4
    unsigned long PresentIntervalSemaphore;// Offset=0x4 Size=0x4
    unsigned long HangTracking;// Offset=0x8 Size=0x4
    unsigned long CommandBufferAddress;// Offset=0xc Size=0x4
    unsigned long CallbackAddress;// Offset=0x10 Size=0x4
    unsigned long CallbackContext;// Offset=0x14 Size=0x4
    unsigned long PixMetaData;// Offset=0x18 Size=0x4
    unsigned long CommandBufferMarker;// Offset=0x1c Size=0x4
};

class D3D::CValidate// Size=0x220 (Id=3723)
{
    union // Size=0x4 (Id=0)
    {
        const int BufferSize;// Offset=0x0 Size=0x4
        char m_PrintBuffer[513];// Offset=0x0 Size=0x201
    };
    private unsigned char __align0[3];// Offset=0x201 Size=0x3
    public char * m_pStream;// Offset=0x204 Size=0x4
    public void * m_pContext;// Offset=0x208 Size=0x4
    public void  ( * m_pOutput)(char * ,<btNoType> );// Offset=0x20c Size=0x4
    public unsigned long *  ( * m_pGetMemory)(void * ,unsigned long ,unsigned long );// Offset=0x210 Size=0x4
    public void  ( * m_pReleaseMemory)(void * ,unsigned long * ,unsigned long );// Offset=0x214 Size=0x4
    public unsigned long m_Flags;// Offset=0x218 Size=0x4
    public unsigned long m_Errors;// Offset=0x21c Size=0x4
    public void FlushPrints();
    public void BufferPrints(char * ,char * );
    public void CValidate(void * ,void  ( * )(char * ,<btNoType> ),unsigned long *  ( * )(void * ,unsigned long ,unsigned long ),void  ( * )(void * ,unsigned long * ,unsigned long ),unsigned long );
    public void ~CValidate();
    public void Print(char * ,<btNoType> );
    public void Rip(char * ,<btNoType> );
    public int PrintVerbose();
    public int PrintTerse();
    public int PrintHex();
    public int Recursive();
    public void DecodeType3Packet(unsigned long ,unsigned long * ,unsigned long * );
    public void DumpFloats(unsigned long * ,unsigned long );
    public void DumpDwords(unsigned long * ,unsigned long );
    public void DumpParameter(unsigned long ,struct D3D::ParameterEnum * );
    public int DumpRegister(unsigned long ,unsigned long ,int );
    public void DumpTerse(unsigned long * ,unsigned long * ,unsigned long );
    public void DumpHex(unsigned long * ,unsigned long ,unsigned long ,unsigned long ,unsigned long );
    public void ValidateAluConstants(unsigned long * ,unsigned long ,unsigned long ,int );
    public void ValidateTextureConstant(unsigned long * ,unsigned long ,unsigned long );
    public void ValidateVertexConstant(unsigned long * ,unsigned long ,unsigned long );
    public void ValidateFetchConstants(unsigned long * ,unsigned long ,unsigned long ,int );
    public void ValidateBooleanConstants(unsigned long * ,unsigned long ,unsigned long ,int );
    public void ValidateLoopConstants(unsigned long * ,unsigned long ,unsigned long ,int );
    public void ValidateInstructions(unsigned long * ,unsigned long ,unsigned long ,unsigned long ,int );
    public void ValidateSetConstant(unsigned long ,unsigned long * ,unsigned long ,unsigned long );
    public void ValidateEventWrite(class D3D::CValidatePacket & );
    public void ValidateOpcode(unsigned long ,unsigned long * ,unsigned long );
    public void ValidateRegister(unsigned long ,unsigned long ,int );
    public int ValidateCommandBuffer(unsigned long * ,unsigned long ,unsigned long ,unsigned long ,unsigned long );
    public void * __vecDelDtor(unsigned int );
};

struct D3D::FixupRecord// Size=0x4 (Id=3724)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long Type:6;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x6
        unsigned long Offset:20;// Offset=0x0 Size=0x4 BitOffset=0x6 BitSize=0x14
        unsigned long Dwords:4;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x4
        unsigned long More:1;// Offset=0x0 Size=0x4 BitOffset=0x1e BitSize=0x1
        unsigned long Dynamic:1;// Offset=0x0 Size=0x4 BitOffset=0x1f BitSize=0x1
    };
    unsigned long Data[0];
};

struct D3D::CPerfCountersPhysical// Size=0x7a0 (Id=3725)
{
    struct _D3DPERFCOUNTER_VALUES m_PerfCounters[4];// Offset=0x0 Size=0x780
    unsigned long m_SwapStallTimeStamps[8];// Offset=0x780 Size=0x20
};

class D3D::CValidateMemory// Size=0xc (Id=3726)
{
    private class D3D::CValidate * m_pValidate;// Offset=0x0 Size=0x4
    private unsigned long m_Count;// Offset=0x4 Size=0x4
    public unsigned long * m_pMemory;// Offset=0x8 Size=0x4
    public void CValidateMemory(class D3D::CValidate * ,unsigned long ,unsigned long );
    public void ~CValidateMemory();
    public void * __vecDelDtor(unsigned int );
};

class D3D::CValidatePacket// Size=0x10 (Id=3727)
{
    public class D3D::CValidate * m_pValidate;// Offset=0x0 Size=0x4
    public unsigned long m_Opcode;// Offset=0x4 Size=0x4
    public unsigned long * m_pRing;// Offset=0x8 Size=0x4
    public unsigned long m_Count;// Offset=0xc Size=0x4
    public void CValidatePacket(class D3D::CValidate * ,unsigned long * );
    public void CValidatePacket(class D3D::CValidate * ,unsigned long ,unsigned long * ,unsigned long );
    public void ValidateParameter(unsigned long ,struct D3D::ParameterEnum * ,int );
    public void ValidateCount(int );
    public void Error(unsigned long );
};

struct D3D::D3DPACKET_STATE// Size=0x8 (Id=3728)
{
    union GPU_BLENDCONTROL BlendControl;// Offset=0x0 Size=0x4
    struct // Size=0x4 (Id=0)
    {
        unsigned long AlphaBlendEnable:1;// Offset=0x4 Size=0x4 BitOffset=0x1f BitSize=0x1
        unsigned long SeparateAlphaBlendEnable:1;// Offset=0x4 Size=0x4 BitOffset=0x1e BitSize=0x1
        unsigned long PresentImmediateThreshold:7;// Offset=0x4 Size=0x4 BitOffset=0x17 BitSize=0x7
        unsigned long HiZEnable:3;// Offset=0x4 Size=0x4 BitOffset=0x14 BitSize=0x3
        unsigned long HiZWriteEnable:3;// Offset=0x4 Size=0x4 BitOffset=0x11 BitSize=0x3
    };
};

enum D3D::LazyPrim
{
    LazyPrim_Regular=0,
    LazyPrim_RunCommandBuffer=1,
    LazyPrim_ResolveOrClear=2,
    LazyPrim_EndCommandBuffer=3
};

class D3D::XpsObject// Size=0x40 (Id=3730)
{
    public struct D3DXpsThread * m_pXpsContext;// Offset=0x0 Size=0x4
    public unsigned long m_EndPosition;// Offset=0x4 Size=0x4
    public unsigned long m_Wrap;// Offset=0x8 Size=0x4
    public unsigned long m_RingLimit;// Offset=0xc Size=0x4
    public unsigned long * m_pRing;// Offset=0x10 Size=0x4
    public unsigned long * m_pRingStart;// Offset=0x14 Size=0x4
    public unsigned long * m_pCommand;// Offset=0x18 Size=0x4
    public unsigned long m_Thread;// Offset=0x1c Size=0x4
    public unsigned long m_WriteBackAddress;// Offset=0x20 Size=0x4
    public unsigned long * m_pTail;// Offset=0x24 Size=0x4
    public void * m_pDebugLastAllocate;// Offset=0x28 Size=0x4
    public unsigned long * m_pDebugDeadbeef;// Offset=0x2c Size=0x4
    public struct XpsGlobal * m_pXpsGlobal;// Offset=0x30 Size=0x4
    public unsigned long * m_pPrimaryRingBuffer;// Offset=0x34 Size=0x4
    public long * m_pCookie;// Offset=0x38 Size=0x4
    public unsigned long m_PrimaryRingBufferIndexMask;// Offset=0x3c Size=0x4
    public void Initialize(struct D3DXpsThread * );
    public void Uninitialize();
    public unsigned long GetWriteback(unsigned long );
    public void * Allocate(unsigned long ,unsigned long );
    public int KickOffAndGet(unsigned long * );
    public void KickOff();
    public void DrawVertices(enum _D3DPRIMITIVETYPE ,unsigned long ,void * );
    public void DrawIndexedVertices(enum _D3DPRIMITIVETYPE ,unsigned long ,void * ,enum _D3DFORMAT ,void * );
    public unsigned long ConvertL2AddressToPhysical(void * );
    public void XpsObject(struct D3DXpsThread * );
    public void ~XpsObject();
    public void * __vecDelDtor(unsigned int );
};

class D3D::CCommandBuffer : public D3DCommandBuffer// Size=0xb8 (Id=3731)
{
    union // Size=0xb8 (Id=0)
    {
        unsigned char __align0[104];// Offset=0x0 Size=0x68
        unsigned long m_MagicOffset;// Offset=0x68 Size=0x4
        struct // Size=0x4 (Id=0)
        {
            enum D3D::BufferState m_State:4;// Offset=0x6c Size=0x4 BitOffset=0x0 BitSize=0x4
            int m_SetShaderGPRAllocation:1;// Offset=0x6c Size=0x4 BitOffset=0x4 BitSize=0x1
            int m_ContainsCalls:1;// Offset=0x6c Size=0x4 BitOffset=0x5 BitSize=0x1
            int m_ContainsPredication:1;// Offset=0x6c Size=0x4 BitOffset=0x6 BitSize=0x1
            int m_OverwriteInheritedState:1;// Offset=0x6c Size=0x4 BitOffset=0x7 BitSize=0x1
            int m_Reconstructed:1;// Offset=0x6c Size=0x4 BitOffset=0x8 BitSize=0x1
            int m_Cloned:1;// Offset=0x6c Size=0x4 BitOffset=0x9 BitSize=0x1
            int m_GetResourceEnabled:1;// Offset=0x6c Size=0x4 BitOffset=0xa BitSize=0x1
            int m_TilingPredicateWhole:1;// Offset=0x6c Size=0x4 BitOffset=0xb BitSize=0x1
            int m_TilingPredicateComponents:1;// Offset=0x6c Size=0x4 BitOffset=0xc BitSize=0x1
            int m_CachedCommandsFlushNeeded:1;// Offset=0x6c Size=0x4 BitOffset=0xd BitSize=0x1
            int m_Verify:1;// Offset=0x6c Size=0x4 BitOffset=0xe BitSize=0x1
            int m_RecordAllSetState:1;// Offset=0x6c Size=0x4 BitOffset=0xf BitSize=0x1
            int m_System:1;// Offset=0x6c Size=0x4 BitOffset=0x10 BitSize=0x1
            int m_OnePassZPass:1;// Offset=0x6c Size=0x4 BitOffset=0x11 BitSize=0x1
        };
        unsigned long m_dwBufferResources;// Offset=0x70 Size=0x4
        unsigned long m_dwSegments;// Offset=0x74 Size=0x4
        unsigned long m_dwPatches;// Offset=0x78 Size=0x4
        unsigned long m_DynamicFixupIndex;// Offset=0x7c Size=0x4
        unsigned long m_StaticFixupIndex;// Offset=0x80 Size=0x4
        unsigned long m_TimestampedFixups;// Offset=0x84 Size=0x4
        unsigned long m_dwFixupWrite;// Offset=0x88 Size=0x4
        unsigned long m_dwFixupWriteLimit;// Offset=0x8c Size=0x4
        unsigned long m_dwFixupRead;// Offset=0x90 Size=0x4
        unsigned long m_dwStaticFixup;// Offset=0x94 Size=0x4
        unsigned long m_dwPhysical;// Offset=0x98 Size=0x4
        unsigned long m_PhysicalSize;// Offset=0x9c Size=0x4
        unsigned long m_dwNextGrowable;// Offset=0xa0 Size=0x4
        unsigned long m_Context;// Offset=0xa4 Size=0x4
        unsigned long m_SegmentSize;// Offset=0xa8 Size=0x4
        unsigned long m_dwGrowableAllocateCallback;// Offset=0xac Size=0x4
        unsigned long m_dwGrowableFreeCallback;// Offset=0xb0 Size=0x4
        unsigned long m_dwGrowableQueryCallback;// Offset=0xb4 Size=0x4
        void DebugCreate(int );
        void DebugDestroy();
        void DebugReset();
        int DebugAddAllocation(void * ,unsigned long );
        void DebugVerifyAllocation(void * ,unsigned long );
        void DebugBeginRun(class D3D::CDevice * );
        void DebugEndRun(class D3D::CDevice * );
        int DebugReclaim(void * ,unsigned long ,class D3D::CCommandBuffer * ,unsigned long );
        int IsGrowable();
        unsigned long long * MagicValue();
        int VerifyMagicValue();
        struct D3D::FixupRecord * GetFixup(unsigned long ,enum D3D::FixupType ,struct D3DResource * );
        void Destroy();// Offset=0x0 Size=0xf8
    };
    public void FlushCachedAllocation();
    public void FlushCachedGpuCommands();
    public unsigned long * GrowableAllocate(unsigned long ,unsigned long * ,unsigned long );
    public void GrowableFree();
    public void GrowableQuery(unsigned long * ,unsigned long * );
};

struct D3D::ParseData// Size=0x10 (Id=3732)
{
    unsigned long * pParameter;// Offset=0x0 Size=0x4
    unsigned long Count;// Offset=0x4 Size=0x4
    unsigned long ConstantIndex;// Offset=0x8 Size=0x4
    int Predicate;// Offset=0xc Size=0x4
};

struct D3D::BeginVerticesData// Size=0x14 (Id=3733)
{
    unsigned long * pRing;// Offset=0x0 Size=0x4
    void * pVertexData;// Offset=0x4 Size=0x4
    void * pIndexData;// Offset=0x8 Size=0x4
    unsigned long VertexDwords;// Offset=0xc Size=0x4
    unsigned long IndexDwords;// Offset=0x10 Size=0x4
};

class D3D::CVertexShader : public D3DVertexShader// Size=0x368 (Id=3734)
{
    union // Size=0x28 (Id=0)
    {
        unsigned char __align0[24];// Offset=0x0 Size=0x18
        unsigned long long m_LastDeviceAndFrameNumberLoaded;// Offset=0x18 Size=0x8
        unsigned long m_dwPhysical;// Offset=0x20 Size=0x4
        unsigned long m_Uniqueness;// Offset=0x24 Size=0x4
        const unsigned long MAXINPUTPATCHES;// Offset=0x0 Size=0x4
        struct PassData// Size=0x1a0 (Id=39857)
        {
            unsigned long m_VertexDeclarationUniqueness;// Offset=0x0 Size=0x4
            unsigned char __align0[4];// Offset=0x4 Size=0x4
            unsigned char m_Stride[16];// Offset=0x8 Size=0x10
            unsigned long long m_Stride64[2];// Offset=0x8 Size=0x10
            unsigned long m_PatchFence;// Offset=0x18 Size=0x4
            union GPUVERTEX_FETCH_INSTRUCTION m_OriginalFetchInstructions[32];// Offset=0x1c Size=0x180
        };
    };
    public struct D3D::CVertexShader::PassData m_Pass[2];// Offset=0x28 Size=0x340
    public struct _UCODE_HEADER m_Function[0];
    public struct _UCODE_HEADER * GetUCodeHeader();
    public struct _UCODE_R500VSUCODE * GetUCode(unsigned long );
    public unsigned long * GetPhysicalMicrocode(unsigned long );
    public unsigned long GetPhysicalSize();
    public unsigned long GetPhysicalMicrocodeSize(unsigned long );
    public unsigned long GetFunctionSize();
    public int AutoZ();
    public union GPUVERTEX_FETCH_INSTRUCTION * GetOriginalFetchInstructions(unsigned long );
    public struct _UCODE_R500_DEBUGGER_HINT_HEADER * GetDebuggerHint();
    public int UsesMemexport();
};

struct D3D::CVertexShader::PassData// Size=0x1a0 (Id=3735)
{
    unsigned long m_VertexDeclarationUniqueness;// Offset=0x0 Size=0x4
    unsigned char __align0[4];// Offset=0x4 Size=0x4
    union // Size=0x10 (Id=0)
    {
        unsigned char m_Stride[16];// Offset=0x8 Size=0x10
        unsigned long long m_Stride64[2];// Offset=0x8 Size=0x10
    };
    unsigned long m_PatchFence;// Offset=0x18 Size=0x4
    union GPUVERTEX_FETCH_INSTRUCTION m_OriginalFetchInstructions[32];// Offset=0x1c Size=0x180
};

enum D3D::Queue_Commands
{
    Queue_CommandFlag=-2147483648,
    Queue_NextChunkFlags=-1073741824,
    Queue_CommandMask=-16777216,
    Queue_Initialize=-2147483648,
    Queue_IndirectBuffer1=-2130706432,
    Queue_Invalidate=-2113929216,
    Queue_BeginZPass=-2097152000,
    Queue_EndZPass=-2080374784,
    Queue_InvokeRenderPass=-2063597568,
    Queue_BeginTiling=-2046820352,
    Queue_EndTiling=-2030043136,
    Queue_WorkerInterrupt=-2013265920,
    Queue_TilingPatch=-1996488704,
    Queue_XpsBegin=-1979711488,
    Queue_XpsEnd=-1962934272,
    Queue_XpsSetCallback=-1946157056,
    Queue_XpsSetPredication=-1929379840,
    Queue_XpsAutoPredication=-1912602624,
    Queue_LastCommandMarker=-1912602623
};

class D3D::CVertexDeclaration : public D3DVertexDeclaration// Size=0x38 (Id=3737)
{
    private unsigned char __align0[24];// Offset=0x0 Size=0x18
    public unsigned long m_Count;// Offset=0x18 Size=0x4
    public unsigned long m_MaxStream;// Offset=0x1c Size=0x4
    union // Size=0x10 (Id=0)
    {
        unsigned char m_StreamMask[16];// Offset=0x20 Size=0x10
        unsigned long long m_StreamMask64[2];// Offset=0x20 Size=0x10
    };
    public unsigned long m_Uniqueness;// Offset=0x30 Size=0x4
    public struct _D3DVERTEXELEMENT9 m_Element[0];
};

struct D3D::SwapData// Size=0x8 (Id=3738)
{
    unsigned long FlipAddress;// Offset=0x0 Size=0x4
    unsigned long SwapVBlank;// Offset=0x4 Size=0x4
};

struct IXAudioRefCount// Size=0x4 (Id=3739)
{
    unsigned long AddRef();
    unsigned long Release();
    void IXAudioRefCount(struct IXAudioRefCount & );
    void IXAudioRefCount();
    struct IXAudioRefCount & operator=(struct IXAudioRefCount & );
};

struct IXAudioRefCount// Size=0x4 (Id=3740)
{
    unsigned long AddRef();
    unsigned long Release();
    void IXAudioRefCount(struct IXAudioRefCount & );
    void IXAudioRefCount();
    struct IXAudioRefCount & operator=(struct IXAudioRefCount & );
};

struct SHORTLE// Size=0x2 (Id=3741)
{
    unsigned short value;// Offset=0x0 Size=0x2
    void SHORTLE(unsigned long long );
};

enum VGT_DI_PRIM_TYPE
{
    DI_PT_NONE=0,
    DI_PT_POINTLIST=1,
    DI_PT_LINELIST=2,
    DI_PT_LINESTRIP=3,
    DI_PT_TRILIST=4,
    DI_PT_TRIFAN=5,
    DI_PT_TRISTRIP=6,
    DI_PT_TRI_WITH_WFLAGS=7,
    DI_PT_RECTLIST=8,
    DI_PT_UNUSED_1=9,
    DI_PT_UNUSED_2=10,
    DI_PT_UNUSED_3=11,
    DI_PT_LINELOOP=12,
    DI_PT_QUADLIST=13,
    DI_PT_QUADSTRIP=14,
    DI_PT_POLYGON=15,
    DI_PT_2D_COPY_RECT_LIST_V0=16,
    DI_PT_2D_COPY_RECT_LIST_V1=17,
    DI_PT_2D_COPY_RECT_LIST_V2=18,
    DI_PT_2D_COPY_RECT_LIST_V3=19,
    DI_PT_2D_FILL_RECT_LIST=20,
    DI_PT_2D_LINE_STRIP=21,
    DI_PT_2D_TRI_STRIP=22
};

struct _UCODE_PASS_HEADER// Size=0x8 (Id=3743)
{
    unsigned long definitionTableOffset;// Offset=0x0 Size=0x4
    unsigned long microcodeOffset;// Offset=0x4 Size=0x4
};

enum PIX_CHUNK_TYPE
{
    ChunkType_CpuTiming0=0,
    ChunkType_CpuTiming1=1,
    ChunkType_CpuTiming2=2,
    ChunkType_CpuTiming3=3,
    ChunkType_CpuTiming4=4,
    ChunkType_CpuTiming5=5,
    ChunkType_Profiler0=6,
    ChunkType_Profiler1=7,
    ChunkType_Profiler2=8,
    ChunkType_Profiler3=9,
    ChunkType_Profiler4=10,
    ChunkType_Profiler5=11,
    ChunkType_Audio=12,
    ChunkType_GpuVideo=13,
    ChunkType_GpuTiming=14,
    ChunkType_IndexHardDisk=15,
    ChunkType_IndexPerfPipe=16,
    ChunkType_Padding=17,
    PIX_OVERFLOWABLE_CHUNK_TYPES=6,
    PIX_CPU_NON_INDEX_CHUNK_TYPES=13,
    PIX_NON_INDEX_CHUNK_TYPES=15,
    PIX_CHUNK_TYPES=18
};

union _UCODE_INTERPOLATOR_HEADER// Size=0x4 (Id=3745)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned int interpolators:5;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x5
        unsigned int interpolants:5;// Offset=0x0 Size=0x4 BitOffset=0x5 BitSize=0x5
        unsigned int components:7;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0x7
        unsigned int customOrderPS:1;// Offset=0x0 Size=0x4 BitOffset=0x11 BitSize=0x1
        unsigned int customOrderVS:1;// Offset=0x0 Size=0x4 BitOffset=0x12 BitSize=0x1
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

struct PIX_CHUNK_LOCATION// Size=0x4 (Id=3746)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long ChunkIndex:24;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x18
        unsigned long Wrap:8;// Offset=0x0 Size=0x4 BitOffset=0x18 BitSize=0x8
    };
};

union UCODE_SHADER_COOKIE// Size=0x4 (Id=3747)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long Type:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long UsesMemexport:1;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x1
        unsigned long AutoZ:1;// Offset=0x0 Size=0x4 BitOffset=0x5 BitSize=0x1
        unsigned long Bound:1;// Offset=0x0 Size=0x4 BitOffset=0x6 BitSize=0x1
        unsigned long SwapGuard:1;// Offset=0x0 Size=0x4 BitOffset=0x7 BitSize=0x1
        unsigned long Magic:24;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x18
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

struct _UCODE_R500UCODE_COMMON// Size=0x18 (Id=3748)
{
    unsigned long PhysicalMicrocodeOffset;// Offset=0x0 Size=0x4
    unsigned long PhysicalMicrocodeSize;// Offset=0x4 Size=0x4
    union GPU_PROGRAMCONTROL ProgramControl;// Offset=0x8 Size=0x4
    union GPU_CONTEXTMISC ContextMisc;// Offset=0xc Size=0x4
    union _UCODE_CONTROLFLOWCONSTANTSMASK ControlFlowConstantMask;// Offset=0x10 Size=0x4
    union _UCODE_INTERPOLATOR_HEADER interpolatorHeader;// Offset=0x14 Size=0x4
};

enum VGT_DI_SOURCE_SELECT
{
    DI_SRC_SEL_DMA=0,
    DI_SRC_SEL_IMMEDIATE=1,
    DI_SRC_SEL_AUTO_INDEX=2,
    DI_SRC_SEL_RESERVED=3
};

enum _PixSmallOpcodesType
{
    PIXSMALL_EndNamedEvent=0,
    PIXSMALL_Escape=1,
    PIXSMALL_BeginDrawVertices=2,
    PIXSMALL_EndDrawVertices=3,
    PIXSMALL_BeginDrawIndexedVertices=4,
    PIXSMALL_EndDrawIndexedVertices=5,
    PIXSMALL_BeginVertices=6,
    PIXSMALL_EndVertices=7,
    PIXSMALL_BeginKickOff=8,
    PIXSMALL_EndKickOff=9,
    PIXSMALL_BeginNamedEvent_Tokenize_VarArgs=16,
    PIXSMALL_BeginNamedEvent_Tokenize_NOVarArgs=17,
    PIXSMALL_BeginNamedEvent_Tokenize_Float=18,
    PIXSMALL_BeginNamedEvent_Tokenize_Int=19,
    PIXSMALL_BeginNamedEvent_Tokenize_String=20,
    PIXSMALL_BeginNamedEvent_Copy_VarArgs0=25,
    PIXSMALL_BeginNamedEvent_Copy_VarArgs1=26,
    PIXSMALL_BeginNamedEvent_Copy_VarArgs2=27,
    PIXSMALL_BeginNamedEvent_Copy_VarArgs3=28,
    PIXSMALL_BeginNamedEvent_Copy_NOVarArgs=29,
    PIXSMALL_BeginNamedEvent_Copy_Float=30,
    PIXSMALL_BeginNamedEvent_Copy_Int=31,
    PIXSMALL_BeginNamedEvent_Copy_String=32,
    PIXSMALL_BeginNamedEvent_Copy_Double=33,
    PIXSMALL_BeginNamedEvent_Copy_Int64=34,
    PIXSMALL_SetMarker_Tokenize_VarArgs=37,
    PIXSMALL_SetMarker_Tokenize_NOVarArgs=38,
    PIXSMALL_SetMarker_Tokenize_Float=39,
    PIXSMALL_SetMarker_Tokenize_Int=40,
    PIXSMALL_SetMarker_Tokenize_String=41,
    PIXSMALL_SetMarker_Copy_VarArgs0=46,
    PIXSMALL_SetMarker_Copy_VarArgs1=47,
    PIXSMALL_SetMarker_Copy_VarArgs2=48,
    PIXSMALL_SetMarker_Copy_VarArgs3=49,
    PIXSMALL_SetMarker_Copy_NOVarArgs=50,
    PIXSMALL_SetMarker_Copy_Float=51,
    PIXSMALL_SetMarker_Copy_Int=52,
    PIXSMALL_SetMarker_Copy_String=53,
    PIXSMALL_PrintA_Tokenize_VarArgs=58,
    PIXSMALL_PrintA_Tokenize_NOVarArgs=59,
    PIXSMALL_PrintA_Tokenize_Float=60,
    PIXSMALL_PrintA_Tokenize_Int=61,
    PIXSMALL_PrintA_Tokenize_String=62,
    PIXSMALL_PrintA_Copy_VarArgs0=67,
    PIXSMALL_PrintA_Copy_VarArgs1=68,
    PIXSMALL_PrintA_Copy_VarArgs2=69,
    PIXSMALL_PrintA_Copy_VarArgs3=70,
    PIXSMALL_PrintA_Copy_NOVarArgs=71,
    PIXSMALL_PrintA_Copy_Float=72,
    PIXSMALL_PrintA_Copy_Int=73,
    PIXSMALL_PrintA_Copy_String=74,
    PIXSMALL_PrintW_Tokenize_VarArgs=79,
    PIXSMALL_PrintW_Tokenize_NOVarArgs=80,
    PIXSMALL_PrintW_Tokenize_Float=81,
    PIXSMALL_PrintW_Tokenize_Int=82,
    PIXSMALL_PrintW_Tokenize_String=83,
    PIXSMALL_PrintW_Copy_VarArgs0=88,
    PIXSMALL_PrintW_Copy_VarArgs1=89,
    PIXSMALL_PrintW_Copy_VarArgs2=90,
    PIXSMALL_PrintW_Copy_VarArgs3=91,
    PIXSMALL_PrintW_Copy_NOVarArgs=92,
    PIXSMALL_PrintW_Copy_Float=93,
    PIXSMALL_PrintW_Copy_Int=94,
    PIXSMALL_PrintW_Copy_String=95,
    PIXSMALL_Escape_Gpu=96,
    PIXSMALL_Escape_Cpu_Without_Timestamp=97
};

struct _XCONFIG_TIMEZONE_DATE// Size=0x4 (Id=3751)
{
    unsigned char Month;// Offset=0x0 Size=0x1
    unsigned char Day;// Offset=0x1 Size=0x1
    unsigned char DayOfWeek;// Offset=0x2 Size=0x1
    unsigned char Hour;// Offset=0x3 Size=0x1
};

class XConfigUserSettings// Size=0x1 (Id=3752)
{
    public long GetTimeZoneBias(unsigned long & );
    public long SetTimeZoneBias(const unsigned long );
    public long GetTimeZoneStdName(wchar_t * );
    public long GetTimeZoneStdName(char * );
    public long SetTimeZoneStdName(wchar_t * );
    public long SetTimeZoneStdName(char * );
    public long GetTimeZoneDltName(wchar_t * );
    public long GetTimeZoneDltName(char * );
    public long SetTimeZoneDltName(wchar_t * );
    public long SetTimeZoneDltName(char * );
    public long GetTimeZoneStdDate(struct _XCONFIG_TIMEZONE_DATE & );
    public long SetTimeZoneStdDate(const struct _XCONFIG_TIMEZONE_DATE );
    public long GetTimeZoneDltDate(struct _XCONFIG_TIMEZONE_DATE & );
    public long SetTimeZoneDltDate(const struct _XCONFIG_TIMEZONE_DATE );
    public long GetTimeZoneStdBias(unsigned long & );
    public long SetTimeZoneStdBias(const unsigned long );
    public long GetTimeZoneDltBias(unsigned long & );
    public long SetTimeZoneDltBias(const unsigned long );
    public long GetDefaultProfile(unsigned long long & );
    public long SetDefaultProfile(const unsigned long long );
    public long GetLanguage(unsigned long & );
    public long SetLanguage(const unsigned long );
    public long GetVideoFlags(unsigned long & );
    public long SetVideoFlags(const unsigned long );
    public long GetAudioFlags(unsigned long & );
    public long SetAudioFlags(const unsigned long );
    public long GetRetailFlags(unsigned long & );
    public long SetRetailFlags(const unsigned long );
    public long ModifyRetailFlags(const unsigned long ,const unsigned long );
    public long GetDevkitFlags(unsigned long & );
    public long SetDevkitFlags(const unsigned long );
    public long GetCountry(char & );
    public long SetCountry(const char );
    public long GetSMBConfig(char * );
    public long SetSMBConfig(char * );
    public long GetLivePUID(unsigned long long & );
    public long SetLivePUID(const unsigned long long );
    public long GetLiveCredentials(char * );
    public long SetLiveCredentials(char * );
    public long GetAVPackHDMIScreenSz(short * );
    public long SetAVPackHDMIScreenSz(short * );
    public long GetAVPackComponentScreenSz(short * );
    public long SetAVPackComponentScreenSz(short * );
    public long GetAVPackVGAScreenSz(short * );
    public long SetAVPackVGAScreenSz(short * );
    public long GetParentalControlFlags(char & );
    public long SetParentalControlFlags(const char );
    public long GetParentalControlVersion(unsigned long & );
    public long SetParentalControlVersion(const unsigned long );
    public long GetParentalControlGame(unsigned long & );
    public long SetParentalControlGame(const unsigned long );
    public long GetParentalControlPassword(unsigned long & );
    public long SetParentalControlPassword(const unsigned long );
    public long GetParentalControlMovie(unsigned long & );
    public long SetParentalControlMovie(const unsigned long );
    public long GetParentalControlTV(unsigned long & );
    public long SetParentalControlTV(const unsigned long );
    public long GetParentalControlExplicitVideo(unsigned long & );
    public long SetParentalControlExplicitVideo(const unsigned long );
    public long GetParentalControlUnratedVideo(unsigned long & );
    public long SetParentalControlUnratedVideo(const unsigned long );
    public long GetParentalControlGameRating(unsigned long & );
    public long SetParentalControlGameRating(const unsigned long );
    public long GetParentalControlMovieRating(unsigned long & );
    public long SetParentalControlMovieRating(const unsigned long );
    public long GetParentalControlTVRating(unsigned long & );
    public long SetParentalControlTVRating(const unsigned long );
    public long GetParentalControlExplicitVideoRating(unsigned long & );
    public long SetParentalControlExplicitVideoRating(const unsigned long );
    public long GetParentalControlUnratedVideoRating(unsigned long & );
    public long SetParentalControlUnratedVideoRating(const unsigned long );
    public long GetParentalControlHint(char & );
    public long SetParentalControlHint(const char );
    public long GetParentalControlHintAnswer(char * );
    public long SetParentalControlHintAnswer(char * );
    public long GetParentalControlOverride(char * );
    public long SetParentalControlOverride(char * );
    public long GetMusicPlaybackMode(unsigned long & );
    public long SetMusicPlaybackMode(const unsigned long );
    public long GetMusicVolume(float & );
    public long SetMusicVolume(const float );
    public long GetMusicFlags(unsigned long & );
    public long SetMusicFlags(const unsigned long );
    public long GetArcadeFlags(unsigned long & );
    public long SetArcadeFlags(const unsigned long );
    public long GetOnlineNetworkID(char * );
    public long SetOnlineNetworkID(char * );
    public long GetVideoOutputBlackLevel(unsigned long ,unsigned long & );
    public long SetVideoOutputBlackLevel(unsigned long ,unsigned long );
    public long GetAlternateVideoTimingID(unsigned long ,unsigned long & );
    public long SetAlternateVideoTimingID(unsigned long ,unsigned long );
    public long GetVideoDriverOptions(unsigned long * );
    public long SetVideoDriverOptions(unsigned long );
    public long GetMusicUIFlags(unsigned long & );
    public long SetMusicUIFlags(const unsigned long );
    public long GetVideoMediaSourceType(char & );
    public long SetVideoMediaSourceType(const char );
    public long GetMusicMediaSourceType(char & );
    public long SetMusicMediaSourceType(const char );
    public long GetPhotoMediaSourceType(char & );
    public long SetPhotoMediaSourceType(const char );
};

enum VGT_EVENT_TYPE
{
    VS_DEALLOC=0,
    PS_DEALLOC=1,
    VS_DONE_TS=2,
    PS_DONE_TS=3,
    CACHE_FLUSH_TS=4,
    CONTEXT_DONE=5,
    CACHE_FLUSH=6,
    VIZQUERY_START=7,
    VIZQUERY_END=8,
    SC_WAIT_WC=9,
    MPASS_PS_CP_REFETCH=10,
    MPASS_PS_RST_START=11,
    MPASS_PS_INCR_START=12,
    RST_PIX_CNT=13,
    RST_VTX_CNT=14,
    TILE_FLUSH=15,
    CACHE_FLUSH_AND_INV_TS_EVENT=20,
    ZPASS_DONE=21,
    CACHE_FLUSH_AND_INV_EVENT=22,
    PERFCOUNTER_START=23,
    PERFCOUNTER_STOP=24,
    SCREEN_EXT_INIT=25,
    SCREEN_EXT_RPT=26,
    VS_FETCH_DONE_TS=27
};

union _UCODE_PSOUTPUTMASK// Size=0x4 (Id=3754)
{
    struct // Size=0x4 (Id=0)
    {
        union // Size=0x4 (Id=0)
        {
            unsigned int mask:4;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x4
            unsigned int oC0:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        };
        unsigned int oC1:1;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x1
        unsigned int oC2:1;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x1
        unsigned int oC3:1;// Offset=0x0 Size=0x4 BitOffset=0x3 BitSize=0x1
        unsigned int oDepth:1;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x1
        unsigned int oKill:1;// Offset=0x0 Size=0x4 BitOffset=0x5 BitSize=0x1
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

struct D3DXpsThread// Size=0x20 (Id=3755)
{
    struct XpsGlobal * pGlobal;// Offset=0x0 Size=0x4
    unsigned long Thread;// Offset=0x4 Size=0x4
    unsigned long EndPosition;// Offset=0x8 Size=0x4
    unsigned long Wrap;// Offset=0xc Size=0x4
    unsigned long * pRingStart;// Offset=0x10 Size=0x4
    unsigned long * pRingLimit;// Offset=0x14 Size=0x4
    unsigned long WriteBackAddress;// Offset=0x18 Size=0x4
    unsigned long * pTail;// Offset=0x1c Size=0x4
};

struct PIX_WRITE_GPU_CAPTURE// Size=0xc (Id=3756)
{
    enum _PixDataOpcodesType Opcode;// Offset=0x0 Size=0x4
    unsigned long Count;// Offset=0x4 Size=0x4
    void * pData;// Offset=0x8 Size=0x4
};

enum PIX_LOG_TYPE
{
    LogType_HardDisk=0,
    LogType_PerfPipe=1,
    LogType_None=2,
    PIX_LOGS=2
};

struct PIX_INDEX_FRAME// Size=0x28 (Id=3758)
{
    struct // Size=0x8 (Id=0)
    {
        unsigned long IndexType:3;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x3
        unsigned long TimingCapture:2;// Offset=0x0 Size=0x4 BitOffset=0x3 BitSize=0x2
        unsigned long ProfilerCapture:2;// Offset=0x0 Size=0x4 BitOffset=0x5 BitSize=0x2
        unsigned long VideoCapture:2;// Offset=0x0 Size=0x4 BitOffset=0x7 BitSize=0x2
        unsigned long AudioCapture:2;// Offset=0x0 Size=0x4 BitOffset=0x9 BitSize=0x2
        unsigned long Frame:24;// Offset=0x4 Size=0x4 BitOffset=0x0 BitSize=0x18
    };
    struct PIX_CHUNK_LOCATION Location[2];// Offset=0x8 Size=0x8
    unsigned long CpuTime;// Offset=0x10 Size=0x4
    unsigned long GpuTime;// Offset=0x14 Size=0x4
    unsigned long Offsets[4];// Offset=0x18 Size=0x10
};

enum CP_CONST_ID
{
    CP_CONST_ID_ALU=0,
    CP_CONST_ID_FETCH=1,
    CP_CONST_ID_BOOLEAN=2,
    CP_CONST_ID_LOOP=3,
    CP_CONST_ID_REGISTER=4
};

enum CP_CODE_ID
{
    CP_CODE_ID_VERTEX=0,
    CP_CODE_ID_PIXEL=1,
    CP_CODE_ID_SHARED=2
};

enum UCODESHADERMAGIC
{
    UCODESHADERMAGIC_CURRENT=1059345
};

struct _UCODE_R500PSUCODE// Size=0x20 (Id=3762)
{
    struct _UCODE_R500UCODE_COMMON common;// Offset=0x0 Size=0x18
    union GPU_INTERPOLATORCONTROL interpolatorControl;// Offset=0x18 Size=0x4
    union _UCODE_PSOUTPUTMASK outputMask;// Offset=0x1c Size=0x4
};

struct IXAudioBatchAllocator : public IXAudioRefCount// Size=0x4 (Id=3763)
{
    unsigned long AddRef();
    unsigned long Release();
    void GrowHeap(unsigned long );
    HRESULT CreateHeap(unsigned long );
    unsigned long GetFreeHeapSize();
    void * Alloc(unsigned long );
    void IXAudioBatchAllocator(struct IXAudioBatchAllocator & );
    void IXAudioBatchAllocator();
    struct IXAudioBatchAllocator & operator=(struct IXAudioBatchAllocator & );
};

struct IXAudioBatchAllocator : public IXAudioRefCount// Size=0x4 (Id=3764)
{
    unsigned long AddRef();
    unsigned long Release();
    void GrowHeap(unsigned long );
    HRESULT CreateHeap(unsigned long );
    unsigned long GetFreeHeapSize();
    void * Alloc(unsigned long );
    void IXAudioBatchAllocator(struct IXAudioBatchAllocator & );
    void IXAudioBatchAllocator();
    struct IXAudioBatchAllocator & operator=(struct IXAudioBatchAllocator & );
};

class XConfigDvdSettings// Size=0x1 (Id=3765)
{
    public long GetVolumeId(char * );
    public long SetVolumeId(char * );
    public long GetData(char * );
    public long SetData(char * );
};

enum D3D::BracketType
{
    BracketType_None=0,
    BracketType_BeginVertices=1,
    BracketType_BeginIndexedVertices=2,
    BracketType_BeginShaderConstantF1=3,
    BracketType_BeginShaderConstantF4=4,
    BracketType_GpuBeginShaderConstantF4=5
};

enum EdramMode
{
    EDRAM_NOP=0,
    COLOR_DEPTH=4,
    DOUBLE_DEPTH=5,
    EDRAM_COPY=6
};

struct _UCODE_DEFINITION_TABLE// Size=0x18 (Id=3768)
{
    unsigned long long u64BitAluDirtyFlags;// Offset=0x0 Size=0x8
    unsigned long long u64BitFlowDirtyFlags;// Offset=0x8 Size=0x8
    unsigned long cbTableSize;// Offset=0x10 Size=0x4
    unsigned long data[1];// Offset=0x14 Size=0x4
};

enum D3D::D3DQUERYSTATE
{
    QUERY_READYFORBEGIN=1,
    QUERY_READYFOREND=2
};

struct D3D::CQuery : public D3DQuery// Size=0x9c (Id=3770)
{
    class D3D::CDevice * m_pDevice;// Offset=0x0 Size=0x4
    enum _D3DQUERYTYPE m_Type;// Offset=0x4 Size=0x4
    unsigned long m_Signature;// Offset=0x8 Size=0x4
    unsigned long m_RefCount;// Offset=0xc Size=0x4
    struct // Size=0x5 (Id=0)
    {
        enum D3D::D3DQUERYSTATE m_State:8;// Offset=0x10 Size=0x4 BitOffset=0x18 BitSize=0x8
        bool m_SuccessfulGetData:1;// Offset=0x14 Size=0x1 BitOffset=0x7 BitSize=0x1
        bool m_Issued:1;// Offset=0x14 Size=0x1 BitOffset=0x6 BitSize=0x1
    };
    unsigned char __align0[3];// Offset=0x15 Size=0x3
    unsigned long m_Fence;// Offset=0x18 Size=0x4
    unsigned long * m_pBase[15];// Offset=0x1c Size=0x3c
    struct D3D::CQueryBlock * m_pBlock[15];// Offset=0x58 Size=0x3c
    unsigned long m_TileCount;// Offset=0x94 Size=0x4
    unsigned long m_TileCapacity;// Offset=0x98 Size=0x4
};

enum DSPROPERTY_I3DL2_LISTENERPROPERTY
{
    DSPROPERTY_I3DL2LISTENER_ALL=0,
    DSPROPERTY_I3DL2LISTENER_ROOM=1,
    DSPROPERTY_I3DL2LISTENER_ROOMHF=2,
    DSPROPERTY_I3DL2LISTENER_ROOMROLLOFFFACTOR=3,
    DSPROPERTY_I3DL2LISTENER_DECAYTIME=4,
    DSPROPERTY_I3DL2LISTENER_DECAYHFRATIO=5,
    DSPROPERTY_I3DL2LISTENER_REFLECTIONS=6,
    DSPROPERTY_I3DL2LISTENER_REFLECTIONSDELAY=7,
    DSPROPERTY_I3DL2LISTENER_REVERB=8,
    DSPROPERTY_I3DL2LISTENER_REVERBDELAY=9,
    DSPROPERTY_I3DL2LISTENER_DIFFUSION=10,
    DSPROPERTY_I3DL2LISTENER_DENSITY=11,
    DSPROPERTY_I3DL2LISTENER_HFREFERENCE=12
};

struct XAUDIODRVPERFCOUNTER// Size=0x30 (Id=3772)
{
    unsigned long long MinTicks;// Offset=0x0 Size=0x8
    unsigned long long AvgTicks;// Offset=0x8 Size=0x8
    unsigned long long MaxTicks;// Offset=0x10 Size=0x8
    unsigned long long QueryTicks;// Offset=0x18 Size=0x8
    unsigned long long TicksPerSecond;// Offset=0x20 Size=0x8
    unsigned long long FrameCount;// Offset=0x28 Size=0x8
    float GetAveragePercent();
    float GetMinimumPercent();
    float GetMaximumPercent();
};

struct IXAudioEffect : public IXAudioRefCount// Size=0x4 (Id=3773)
{
    unsigned long AddRef();
    unsigned long Release();
    HRESULT GetInfo(struct XAUDIOFXINFO * );
    HRESULT GetParam(unsigned char ,unsigned char ,union XAUDIOFXPARAM * );
    HRESULT SetParam(unsigned char ,unsigned char ,union XAUDIOFXPARAM * );
    HRESULT GetContext(void ** );
    HRESULT Process(struct IXAudioFrameBuffer * ,struct IXAudioFrameBuffer * );
    void IXAudioEffect(struct IXAudioEffect & );
    void IXAudioEffect();
    struct IXAudioEffect & operator=(struct IXAudioEffect & );
};

struct IXAudioEffect : public IXAudioRefCount// Size=0x4 (Id=3774)
{
    unsigned long AddRef();
    unsigned long Release();
    HRESULT GetInfo(struct XAUDIOFXINFO * );
    HRESULT GetParam(unsigned char ,unsigned char ,union XAUDIOFXPARAM * );
    HRESULT SetParam(unsigned char ,unsigned char ,union XAUDIOFXPARAM * );
    HRESULT GetContext(void ** );
    HRESULT Process(struct IXAudioFrameBuffer * ,struct IXAudioFrameBuffer * );
    void IXAudioEffect(struct IXAudioEffect & );
    void IXAudioEffect();
    struct IXAudioEffect & operator=(struct IXAudioEffect & );
};

union XAUDIO::_XMA_WHEN_DONE// Size=0x4 (Id=3775)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long Stop:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long Interrupt:1;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x1
        unsigned long Reserved:30;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x1e
    };
    unsigned long AsULONG;// Offset=0x0 Size=0x4
};

struct XAUDIO::_XMA_REGISTERS// Size=0x2a8 (Id=3776)
{
    unsigned long ContextAddress;// Offset=0x0 Size=0x4
    union XAUDIO::_XMA_RESET_ENABLE ResetEnable;// Offset=0x4 Size=0x4
    union XAUDIO::_XMA_INTERRUPT InterruptStatusRead;// Offset=0x8 Size=0x4
    union XAUDIO::_XMA_INTERRUPT InterruptEnableRead;// Offset=0xc Size=0x4
    union XAUDIO::_XMA_WHEN_DONE WhenDoneRead;// Offset=0x10 Size=0x4
    union XAUDIO::_XMA_PARSER_DEBUG ParserDebug;// Offset=0x14 Size=0x4
    union XAUDIO::_XMA_CONTEXT CurrentContext;// Offset=0x18 Size=0x4
    union XAUDIO::_XMA_CONTEXT NextContext;// Offset=0x1c Size=0x4
    union XAUDIO::_XMA_DEBUG Debug;// Offset=0x20 Size=0x4
    unsigned long Reserved0[7];// Offset=0x24 Size=0x1c
    unsigned long ValidContext0Read;// Offset=0x40 Size=0x4
    unsigned long ValidContext1Read;// Offset=0x44 Size=0x4
    unsigned long ValidContext2Read;// Offset=0x48 Size=0x4
    unsigned long ValidContext3Read;// Offset=0x4c Size=0x4
    unsigned long ValidContext4Read;// Offset=0x50 Size=0x4
    unsigned long ValidContext5Read;// Offset=0x54 Size=0x4
    unsigned long ValidContext6Read;// Offset=0x58 Size=0x4
    unsigned long ValidContext7Read;// Offset=0x5c Size=0x4
    unsigned long ValidContext8Read;// Offset=0x60 Size=0x4
    unsigned long ValidContext9Read;// Offset=0x64 Size=0x4
    unsigned long Reserved1[6];// Offset=0x68 Size=0x18
    unsigned long ErrorContext0Read;// Offset=0x80 Size=0x4
    unsigned long ErrorContext1Read;// Offset=0x84 Size=0x4
    unsigned long ErrorContext2Read;// Offset=0x88 Size=0x4
    unsigned long ErrorContext3Read;// Offset=0x8c Size=0x4
    unsigned long ErrorContext4Read;// Offset=0x90 Size=0x4
    unsigned long ErrorContext5Read;// Offset=0x94 Size=0x4
    unsigned long ErrorContext6Read;// Offset=0x98 Size=0x4
    unsigned long ErrorContext7Read;// Offset=0x9c Size=0x4
    unsigned long ErrorContext8Read;// Offset=0xa0 Size=0x4
    unsigned long ErrorContext9Read;// Offset=0xa4 Size=0x4
    unsigned long Reserved2[24];// Offset=0xa8 Size=0x60
    union XAUDIO::_XMA_INTERRUPT InterruptStatusSet;// Offset=0x108 Size=0x4
    union XAUDIO::_XMA_INTERRUPT InterruptEnableSet;// Offset=0x10c Size=0x4
    union XAUDIO::_XMA_WHEN_DONE WhenDoneSet;// Offset=0x110 Size=0x4
    unsigned long Reserved3[11];// Offset=0x114 Size=0x2c
    unsigned long ValidContext0Set;// Offset=0x140 Size=0x4
    unsigned long ValidContext1Set;// Offset=0x144 Size=0x4
    unsigned long ValidContext2Set;// Offset=0x148 Size=0x4
    unsigned long ValidContext3Set;// Offset=0x14c Size=0x4
    unsigned long ValidContext4Set;// Offset=0x150 Size=0x4
    unsigned long ValidContext5Set;// Offset=0x154 Size=0x4
    unsigned long ValidContext6Set;// Offset=0x158 Size=0x4
    unsigned long ValidContext7Set;// Offset=0x15c Size=0x4
    unsigned long ValidContext8Set;// Offset=0x160 Size=0x4
    unsigned long ValidContext9Set;// Offset=0x164 Size=0x4
    unsigned long Reserved4[6];// Offset=0x168 Size=0x18
    unsigned long ErrorContext0Set;// Offset=0x180 Size=0x4
    unsigned long ErrorContext1Set;// Offset=0x184 Size=0x4
    unsigned long ErrorContext2Set;// Offset=0x188 Size=0x4
    unsigned long ErrorContext3Set;// Offset=0x18c Size=0x4
    unsigned long ErrorContext4Set;// Offset=0x190 Size=0x4
    unsigned long ErrorContext5Set;// Offset=0x194 Size=0x4
    unsigned long ErrorContext6Set;// Offset=0x198 Size=0x4
    unsigned long ErrorContext7Set;// Offset=0x19c Size=0x4
    unsigned long ErrorContext8Set;// Offset=0x1a0 Size=0x4
    unsigned long ErrorContext9Set;// Offset=0x1a4 Size=0x4
    unsigned long Reserved5[24];// Offset=0x1a8 Size=0x60
    union XAUDIO::_XMA_INTERRUPT InterruptStatusClear;// Offset=0x208 Size=0x4
    union XAUDIO::_XMA_INTERRUPT InterruptEnableClear;// Offset=0x20c Size=0x4
    union XAUDIO::_XMA_WHEN_DONE WhenDoneClear;// Offset=0x210 Size=0x4
    unsigned long Reserved6[11];// Offset=0x214 Size=0x2c
    unsigned long ValidContext0Clear;// Offset=0x240 Size=0x4
    unsigned long ValidContext1Clear;// Offset=0x244 Size=0x4
    unsigned long ValidContext2Clear;// Offset=0x248 Size=0x4
    unsigned long ValidContext3Clear;// Offset=0x24c Size=0x4
    unsigned long ValidContext4Clear;// Offset=0x250 Size=0x4
    unsigned long ValidContext5Clear;// Offset=0x254 Size=0x4
    unsigned long ValidContext6Clear;// Offset=0x258 Size=0x4
    unsigned long ValidContext7Clear;// Offset=0x25c Size=0x4
    unsigned long ValidContext8Clear;// Offset=0x260 Size=0x4
    unsigned long ValidContext9Clear;// Offset=0x264 Size=0x4
    unsigned long Reserved7[6];// Offset=0x268 Size=0x18
    unsigned long ErrorContext0Clear;// Offset=0x280 Size=0x4
    unsigned long ErrorContext1Clear;// Offset=0x284 Size=0x4
    unsigned long ErrorContext2Clear;// Offset=0x288 Size=0x4
    unsigned long ErrorContext3Clear;// Offset=0x28c Size=0x4
    unsigned long ErrorContext4Clear;// Offset=0x290 Size=0x4
    unsigned long ErrorContext5Clear;// Offset=0x294 Size=0x4
    unsigned long ErrorContext6Clear;// Offset=0x298 Size=0x4
    unsigned long ErrorContext7Clear;// Offset=0x29c Size=0x4
    unsigned long ErrorContext8Clear;// Offset=0x2a0 Size=0x4
    unsigned long ErrorContext9Clear;// Offset=0x2a4 Size=0x4
};

union XAUDIO::_XMA_DEBUG// Size=0x4 (Id=3777)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long DebugSelect:4;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x4
        unsigned long SwizzlePcmWord:1;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x1
        unsigned long SwizzlePcmByte:1;// Offset=0x0 Size=0x4 BitOffset=0x5 BitSize=0x1
        unsigned long SwizzleBitstream:1;// Offset=0x0 Size=0x4 BitOffset=0x6 BitSize=0x1
        unsigned long SwizzleContext:1;// Offset=0x0 Size=0x4 BitOffset=0x7 BitSize=0x1
        unsigned long DebugData:24;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x18
    };
    unsigned long AsULONG;// Offset=0x0 Size=0x4
};

union XAUDIO::_XMA_CONTEXT// Size=0x4 (Id=3778)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long Context:9;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x9
        unsigned long ContextValid:1;// Offset=0x0 Size=0x4 BitOffset=0x9 BitSize=0x1
        unsigned long Reserved:22;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0x16
    };
    unsigned long AsULONG;// Offset=0x0 Size=0x4
};

struct XAUDIO::XAUDIOSRCPRIVATE// Size=0x20 (Id=3779)
{
    float FrequencyRatio;// Offset=0x0 Size=0x4
    float Position;// Offset=0x4 Size=0x4
    float aSampleCache[6];// Offset=0x8 Size=0x18
};

union XAUDIO::_XMA_PARSER_DEBUG// Size=0x4 (Id=3780)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long Enable:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long Step:1;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x1
        unsigned long Reserved1:2;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x2
        unsigned long Shift:4;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x4
        unsigned long State:6;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x6
        unsigned long Reserved2:2;// Offset=0x0 Size=0x4 BitOffset=0xe BitSize=0x2
        unsigned long Bits:15;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0xf
        unsigned long Reserved3:1;// Offset=0x0 Size=0x4 BitOffset=0x1f BitSize=0x1
    };
    unsigned long AsULONG;// Offset=0x0 Size=0x4
};

union XAUDIO::_XMA_INTERRUPT// Size=0x4 (Id=3781)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long Done:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long Parser:1;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x1
        unsigned long Bus:1;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x1
        unsigned long Reserved:29;// Offset=0x0 Size=0x4 BitOffset=0x3 BitSize=0x1d
    };
    unsigned long AsULONG;// Offset=0x0 Size=0x4
};

struct XAUDIO::XAUDIOSRCDEST// Size=0x10 (Id=3782)
{
    float * pBuffer;// Offset=0x0 Size=0x4
    unsigned int SampleCount;// Offset=0x4 Size=0x4
    unsigned int SampleOffset;// Offset=0x8 Size=0x4
    unsigned long SampleRate;// Offset=0xc Size=0x4
};

struct XAUDIO::XAUDIOSRCVOLUME// Size=0x8 (Id=3783)
{
    float Current;// Offset=0x0 Size=0x4
    float Target;// Offset=0x4 Size=0x4
};

class XAUDIO::CSourceStream// Size=0xa0 (Id=3784)
{
    union // Size=0x2b8 (Id=0)
    {
        const unsigned short m_VolumeFadeFrameCount;// Offset=0x0 Size=0x2
        const float m_VolumeFadeAmount;// Offset=0x0 Size=0x4
        class XAUDIO::CPacketQueue m_PacketQueue;// Offset=0x4 Size=0x20
        struct XAUDIOSOURCEFORMAT m_SourceFormat;// Offset=0x24 Size=0x38
        unsigned short m_SampleBlockAlignment;// Offset=0x5c Size=0x2
        unsigned short m_PacketAlignment;// Offset=0x5e Size=0x2
        float m_Volume;// Offset=0x60 Size=0x4
        float m_FreqScale;// Offset=0x64 Size=0x4
        union XAUDIOPACKETPOSITION m_PacketPosition;// Offset=0x68 Size=0x30
        unsigned long m_dwStreamPosition;// Offset=0x98 Size=0x4
        unsigned char m_State;// Offset=0x9c Size=0x1
        unsigned char m_Flags;// Offset=0x9d Size=0x1
        unsigned short m_VolumeFadeFrameRemaining;// Offset=0x9e Size=0x2
        void CSourceStream(class XAUDIO::CSourceStream & );
        void CSourceStream();
        void ~CSourceStream();
        unsigned int GetObjectAdditionalSize(unsigned char );
        void Initialize(struct XAUDIOSOURCEFORMAT * ,unsigned char ,unsigned char ,struct IXAudioBatchAllocator * );// Offset=0x0 Size=0xe4
        HRESULT SubmitPacket(struct XAUDIOPACKET * ,unsigned char );// Offset=0x0 Size=0x2b8
        HRESULT SubmitSourceBuffer(struct XAUDIOSOURCEBUFFER * ,unsigned char );// Offset=0x0 Size=0x264
        HRESULT FlushPackets();// Offset=0x0 Size=0xa4
        HRESULT FlushSourceBuffers();// Offset=0x0 Size=0x4
        HRESULT GetPacketLoopCount(unsigned long * );// Offset=0x0 Size=0x50
        HRESULT SetPacketLoopCount(unsigned long );// Offset=0x0 Size=0x4c
        HRESULT GetPacketContext(void ** );// Offset=0x0 Size=0x50
        HRESULT GetState(unsigned char * );// Offset=0x0 Size=0x10
        HRESULT Start();// Offset=0x0 Size=0xf4
        HRESULT Stop(unsigned char );// Offset=0x0 Size=0x130
        HRESULT Discontinuity();// Offset=0x0 Size=0xf0
        HRESULT GetFormat(struct XAUDIOSOURCEFORMAT * ,unsigned char * );// Offset=0x0 Size=0x60
        HRESULT SetFormat(struct XAUDIOSOURCEFORMAT * ,unsigned char );// Offset=0x0 Size=0x9c
        HRESULT GetVolume(float * );// Offset=0x0 Size=0x10
        HRESULT SetVolume(float );// Offset=0x0 Size=0xc
        HRESULT GetPitch(float * );// Offset=0x0 Size=0x4c
        HRESULT SetPitch(float );// Offset=0x0 Size=0x48
        HRESULT GetFrequencyScale(float * );// Offset=0x0 Size=0x10
        HRESULT SetFrequencyScale(float );// Offset=0x0 Size=0xc
        void SetState(unsigned char ,unsigned char );// Offset=0x0 Size=0xcc
        HRESULT GetCurrentPacket(struct XAUDIO::XAUDIOPACKETCTX ** );// Offset=0x0 Size=0x13c
        struct XAUDIO::XAUDIOPACKETCTX * CompletePacket(struct XAUDIO::XAUDIOPACKETCTX * ,HRESULT );// Offset=0x0 Size=0x1c8
        HRESULT FinishSubmit(struct XAUDIO::XAUDIOPACKETCTX * ,unsigned char );// Offset=0x0 Size=0x378
    };
    protected int IsValidAlignment(unsigned long );
    protected void ResetVolumeFade();
    protected unsigned short GetVolumeFadeFrameRemaining();
    protected float FadeVolume(float );
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class XAUDIO::CSourceStream// Size=0xa0 (Id=3785)
{
    union // Size=0x2b8 (Id=0)
    {
        const unsigned short m_VolumeFadeFrameCount;// Offset=0x0 Size=0x2
        const float m_VolumeFadeAmount;// Offset=0x0 Size=0x4
        class XAUDIO::CPacketQueue m_PacketQueue;// Offset=0x4 Size=0x20
        struct XAUDIOSOURCEFORMAT m_SourceFormat;// Offset=0x24 Size=0x38
        unsigned short m_SampleBlockAlignment;// Offset=0x5c Size=0x2
        unsigned short m_PacketAlignment;// Offset=0x5e Size=0x2
        float m_Volume;// Offset=0x60 Size=0x4
        float m_FreqScale;// Offset=0x64 Size=0x4
        union XAUDIOPACKETPOSITION m_PacketPosition;// Offset=0x68 Size=0x30
        unsigned long m_dwStreamPosition;// Offset=0x98 Size=0x4
        unsigned char m_State;// Offset=0x9c Size=0x1
        unsigned char m_Flags;// Offset=0x9d Size=0x1
        unsigned short m_VolumeFadeFrameRemaining;// Offset=0x9e Size=0x2
        void CSourceStream(class XAUDIO::CSourceStream & );
        void CSourceStream();
        void ~CSourceStream();
        unsigned int GetObjectAdditionalSize(unsigned char );
        void Initialize(struct XAUDIOSOURCEFORMAT * ,unsigned char ,unsigned char ,struct IXAudioBatchAllocator * );// Offset=0x0 Size=0xe4
        HRESULT SubmitPacket(struct XAUDIOPACKET * ,unsigned char );// Offset=0x0 Size=0x2b8
        HRESULT SubmitSourceBuffer(struct XAUDIOSOURCEBUFFER * ,unsigned char );// Offset=0x0 Size=0x264
        HRESULT FlushPackets();// Offset=0x0 Size=0xa4
        HRESULT FlushSourceBuffers();// Offset=0x0 Size=0x4
        HRESULT GetPacketLoopCount(unsigned long * );// Offset=0x0 Size=0x50
        HRESULT SetPacketLoopCount(unsigned long );// Offset=0x0 Size=0x4c
        HRESULT GetPacketContext(void ** );// Offset=0x0 Size=0x50
        HRESULT GetState(unsigned char * );// Offset=0x0 Size=0x10
        HRESULT Start();// Offset=0x0 Size=0xf4
        HRESULT Stop(unsigned char );// Offset=0x0 Size=0x130
        HRESULT Discontinuity();// Offset=0x0 Size=0xf0
        HRESULT GetFormat(struct XAUDIOSOURCEFORMAT * ,unsigned char * );// Offset=0x0 Size=0x60
        HRESULT SetFormat(struct XAUDIOSOURCEFORMAT * ,unsigned char );// Offset=0x0 Size=0x9c
        HRESULT GetVolume(float * );// Offset=0x0 Size=0x10
        HRESULT SetVolume(float );// Offset=0x0 Size=0xc
        HRESULT GetPitch(float * );// Offset=0x0 Size=0x4c
        HRESULT SetPitch(float );// Offset=0x0 Size=0x48
        HRESULT GetFrequencyScale(float * );// Offset=0x0 Size=0x10
        HRESULT SetFrequencyScale(float );// Offset=0x0 Size=0xc
        void SetState(unsigned char ,unsigned char );// Offset=0x0 Size=0xcc
        HRESULT GetCurrentPacket(struct XAUDIO::XAUDIOPACKETCTX ** );// Offset=0x0 Size=0x13c
        struct XAUDIO::XAUDIOPACKETCTX * CompletePacket(struct XAUDIO::XAUDIOPACKETCTX * ,HRESULT );// Offset=0x0 Size=0x1c8
        HRESULT FinishSubmit(struct XAUDIO::XAUDIOPACKETCTX * ,unsigned char );// Offset=0x0 Size=0x378
    };
    protected int IsValidAlignment(unsigned long );
    protected void ResetVolumeFade();
    protected unsigned short GetVolumeFadeFrameRemaining();
    protected float FadeVolume(float );
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

struct XAUDIO::XAUDIOCHANNELMAPENTRYEX// Size=0xc (Id=3786)
{
    unsigned char InputChannel;// Offset=0x0 Size=0x1
    unsigned char OutputChannel;// Offset=0x1 Size=0x1
    unsigned char __align0[2];// Offset=0x2 Size=0x2
    float CurrentVolume;// Offset=0x4 Size=0x4
    float TargetVolume;// Offset=0x8 Size=0x4
};

enum XAUDIO::CWaveFileWriter::_unnamed_3787
{
    DEFAULT_ACCESS=-1073741824,
    DEFAULT_SHARE_MODE=0,
    DEFAULT_CREATION_DISTRIBUTION=2,
    DEFAULT_FLAGS_AND_ATTRIBUTES=134217728
};

class XAUDIO::CWaveFileWriter// Size=0x1c (Id=3788)
{
    enum _unnamed_40686
    {
        DEFAULT_ACCESS=-1073741824,
        DEFAULT_SHARE_MODE=0,
        DEFAULT_CREATION_DISTRIBUTION=2,
        DEFAULT_FLAGS_AND_ATTRIBUTES=134217728
    };
    private unsigned char __align0[4];// Offset=0x0 Size=0x4
    protected class XAUDIO::CFileStream * m_pStream;// Offset=0x4 Size=0x4
    protected struct tWAVEFORMATEX * m_pwfxFormat;// Offset=0x8 Size=0x4
    protected unsigned long m_dwFormatSize;// Offset=0xc Size=0x4
    protected void * m_pvWaveHeader;// Offset=0x10 Size=0x4
    protected unsigned long m_dwWaveHeaderSize;// Offset=0x14 Size=0x4
    protected unsigned long m_dwWritten;// Offset=0x18 Size=0x4
    public void CWaveFileWriter(class XAUDIO::CWaveFileWriter & );
    public void CWaveFileWriter();
    public void ~CWaveFileWriter();
    public HRESULT Open(class XAUDIO::CFileStream * ,struct tWAVEFORMATEX * );
    public HRESULT Commit();
    public HRESULT Close();
    public HRESULT WriteSample(void * ,unsigned long ,unsigned long * );
    public unsigned long GetWaveHeader(struct tWAVEFORMATEX * ,unsigned long ,void * ,unsigned long );
    public HRESULT CreateWaveHeader(struct tWAVEFORMATEX * ,unsigned long ,void ** ,unsigned long * );
    public unsigned long GetFormatSize(struct tWAVEFORMATEX * );
    public class XAUDIO::CWaveFileWriter & operator=(class XAUDIO::CWaveFileWriter & );
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class XAUDIO::CWaveFileWriter// Size=0x1c (Id=3789)
{
    enum _unnamed_40686
    {
        DEFAULT_ACCESS=-1073741824,
        DEFAULT_SHARE_MODE=0,
        DEFAULT_CREATION_DISTRIBUTION=2,
        DEFAULT_FLAGS_AND_ATTRIBUTES=134217728
    };
    private unsigned char __align0[4];// Offset=0x0 Size=0x4
    protected class XAUDIO::CFileStream * m_pStream;// Offset=0x4 Size=0x4
    protected struct tWAVEFORMATEX * m_pwfxFormat;// Offset=0x8 Size=0x4
    protected unsigned long m_dwFormatSize;// Offset=0xc Size=0x4
    protected void * m_pvWaveHeader;// Offset=0x10 Size=0x4
    protected unsigned long m_dwWaveHeaderSize;// Offset=0x14 Size=0x4
    protected unsigned long m_dwWritten;// Offset=0x18 Size=0x4
    public void CWaveFileWriter(class XAUDIO::CWaveFileWriter & );
    public void CWaveFileWriter();
    public void ~CWaveFileWriter();
    public HRESULT Open(class XAUDIO::CFileStream * ,struct tWAVEFORMATEX * );
    public HRESULT Commit();
    public HRESULT Close();
    public HRESULT WriteSample(void * ,unsigned long ,unsigned long * );
    public unsigned long GetWaveHeader(struct tWAVEFORMATEX * ,unsigned long ,void * ,unsigned long );
    public HRESULT CreateWaveHeader(struct tWAVEFORMATEX * ,unsigned long ,void ** ,unsigned long * );
    public unsigned long GetFormatSize(struct tWAVEFORMATEX * );
    public class XAUDIO::CWaveFileWriter & operator=(class XAUDIO::CWaveFileWriter & );
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class XAUDIO::CBatchAllocatedObject : public XAUDIO::CObjectRefCount// Size=0xc (Id=3790)
{
    union // Size=0xc (Id=0)
    {
        unsigned char __align0[8];// Offset=0x0 Size=0x8
        struct IXAudioBatchAllocator * m_pAllocator;// Offset=0x8 Size=0x4
        void CBatchAllocatedObject(class XAUDIO::CBatchAllocatedObject & );
        void CBatchAllocatedObject(struct IXAudioBatchAllocator * );
        void ~CBatchAllocatedObject();
        void AbsoluteRelease();// Offset=0x0 Size=0x84
    };
    public class XAUDIO::CBatchAllocatedObject & operator=(class XAUDIO::CBatchAllocatedObject & );
    public void * __vecDelDtor(unsigned int );
};

class XAUDIO::CBatchAllocatedObject : public XAUDIO::CObjectRefCount// Size=0xc (Id=3791)
{
    union // Size=0xc (Id=0)
    {
        unsigned char __align0[8];// Offset=0x0 Size=0x8
        struct IXAudioBatchAllocator * m_pAllocator;// Offset=0x8 Size=0x4
        void CBatchAllocatedObject(class XAUDIO::CBatchAllocatedObject & );
        void CBatchAllocatedObject(struct IXAudioBatchAllocator * );
        void ~CBatchAllocatedObject();
        void AbsoluteRelease();// Offset=0x0 Size=0x84
    };
    public class XAUDIO::CBatchAllocatedObject & operator=(class XAUDIO::CBatchAllocatedObject & );
    public void * __vecDelDtor(unsigned int );
};

enum XAUDIO::CIrql::_unnamed_3792
{
    TARGET_LEVEL=2
};

class XAUDIO::CIrql// Size=0x1 (Id=3793)
{
    enum _unnamed_40743
    {
        TARGET_LEVEL=2
    };
    union // Size=0x1 (Id=0)
    {
        unsigned char m_PreviousIrql;// Offset=0x0 Size=0x1
        unsigned int m_RefCount;// Offset=0x0 Size=0x4
    };
    public int Raise();
    public int Lower();
};

enum XAUDIO::CSourceVoice::_unnamed_3794
{
    XAUDIOVOICETYPE_THIS=0
};

class XAUDIO::CSourceVoice : public XAUDIO::CRoutedVoice// Size=0x94 (Id=3795)
{
    public void * operator new(unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new(unsigned int );
    public void * operator new[](unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new[](unsigned int );
    public void operator delete(void * ,struct IXAudioBatchAllocator * );
    public void operator delete(void * );
    public void operator delete[](void * ,struct IXAudioBatchAllocator * );
    public void operator delete[](void * );
    enum _unnamed_40763
    {
        XAUDIOVOICETYPE_THIS=0
    };
    union // Size=0x22c (Id=0)
    {
        unsigned char __align0[76];// Offset=0x0 Size=0x4c
        struct XAUDIO::XAUDIOVOICEFXCTX m_SourceEffect;// Offset=0x4c Size=0x8
        struct XAUDIOSOURCEFORMAT m_SourceVoiceFormat;// Offset=0x54 Size=0x38
        float m_Volume;// Offset=0x8c Size=0x4
        unsigned char m_Category;// Offset=0x90 Size=0x1
        void CSourceVoice(class XAUDIO::CSourceVoice & );
        void CSourceVoice(struct IXAudioBatchAllocator * ,unsigned char );// Offset=0x0 Size=0xfc
        void ~CSourceVoice();// Offset=0x0 Size=0x154
        HRESULT CreateObject(struct XAUDIOSOURCEVOICEINIT * ,struct IXAudioBatchAllocator * ,class XAUDIO::CSourceVoice ** );// Offset=0x0 Size=0x100
        HRESULT GetObjectSize(struct XAUDIOSOURCEVOICEINIT * ,unsigned long * );
        HRESULT GetObjectAdditionalSize(struct XAUDIOSOURCEVOICEINIT * ,unsigned long * );// Offset=0x0 Size=0xf4
        HRESULT GetVoiceState(unsigned char * );// Offset=0x0 Size=0xe8
        struct IXAudioFrameBuffer * GetFrameBuffer();// Offset=0x0 Size=0x1c
        HRESULT SubmitPacket(struct XAUDIOPACKET * ,unsigned char );
        HRESULT SubmitSourceBuffer(struct XAUDIOSOURCEBUFFER * ,unsigned char );
        HRESULT FlushPackets();
        HRESULT FlushSourceBuffers();
        HRESULT Start();// Offset=0x0 Size=0xc
        HRESULT Start(unsigned char );// Offset=0x0 Size=0xa0
        HRESULT Stop(unsigned char );// Offset=0x0 Size=0xac
        HRESULT Discontinuity();
        HRESULT GetPacketPosition(union XAUDIOPACKETPOSITION * );
        HRESULT SetPacketPosition(union XAUDIOPACKETPOSITION * );
        HRESULT GetPacketLoopCount(unsigned long * );
        HRESULT SetPacketLoopCount(unsigned long );
        HRESULT GetPacketContext(void ** );
        HRESULT GetStreamPosition(unsigned long * );
        HRESULT GetVolume(float * );
        HRESULT SetVolume(float );
        HRESULT GetPitch(float * );
        HRESULT SetPitch(float );
        HRESULT GetFrequencyScale(float * );
        HRESULT SetFrequencyScale(float );
        HRESULT GetVoiceFormat(struct XAUDIOSOURCEFORMAT * );
        HRESULT SetVoiceFormat(struct XAUDIOSOURCEFORMAT * ,struct XAUDIOVOICEOUTPUT * ,unsigned char );
        class XAUDIO::CSourceVoice * Typecast(struct IXAudioSourceVoice * );
        struct IXAudioSourceVoice * Typecast(class XAUDIO::CSourceVoice * );
        HRESULT Initialize(struct XAUDIOSOURCEVOICEINIT * );// Offset=0x0 Size=0xd8
        void ConvertInit(class XAUDIO::CSourceVoice * ,struct XAUDIOSOURCEVOICEINIT * ,struct XAUDIOSOURCEFXINIT * );
        void ConvertInit(struct XAUDIOSOURCEVOICEINIT * ,struct XAUDIO::XAUDIOROUTEDVOICEINIT * );// Offset=0x0 Size=0xc8
        void ConvertFormat(struct XAUDIOSOURCEFORMAT * ,union XAUDIOFORMAT * );// Offset=0x0 Size=0x68
        HRESULT ProcessEffects(struct IXAudioFrameBuffer ** );// Offset=0x0 Size=0xf8
        HRESULT OnVolumeChange();// Offset=0x0 Size=0x4c
        HRESULT SynchStart();// Offset=0x0 Size=0x22c
        HRESULT SynchStop();// Offset=0x0 Size=0x288
    };
    public void * __vecDelDtor(unsigned int );
};

class XAUDIO::CSourceVoice : public XAUDIO::CRoutedVoice// Size=0x94 (Id=3796)
{
    public void * operator new(unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new(unsigned int );
    public void * operator new[](unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new[](unsigned int );
    public void operator delete(void * ,struct IXAudioBatchAllocator * );
    public void operator delete(void * );
    public void operator delete[](void * ,struct IXAudioBatchAllocator * );
    public void operator delete[](void * );
    enum _unnamed_40763
    {
        XAUDIOVOICETYPE_THIS=0
    };
    union // Size=0x22c (Id=0)
    {
        unsigned char __align0[76];// Offset=0x0 Size=0x4c
        struct XAUDIO::XAUDIOVOICEFXCTX m_SourceEffect;// Offset=0x4c Size=0x8
        struct XAUDIOSOURCEFORMAT m_SourceVoiceFormat;// Offset=0x54 Size=0x38
        float m_Volume;// Offset=0x8c Size=0x4
        unsigned char m_Category;// Offset=0x90 Size=0x1
        void CSourceVoice(class XAUDIO::CSourceVoice & );
        void CSourceVoice(struct IXAudioBatchAllocator * ,unsigned char );// Offset=0x0 Size=0xfc
        void ~CSourceVoice();// Offset=0x0 Size=0x154
        HRESULT CreateObject(struct XAUDIOSOURCEVOICEINIT * ,struct IXAudioBatchAllocator * ,class XAUDIO::CSourceVoice ** );// Offset=0x0 Size=0x100
        HRESULT GetObjectSize(struct XAUDIOSOURCEVOICEINIT * ,unsigned long * );
        HRESULT GetObjectAdditionalSize(struct XAUDIOSOURCEVOICEINIT * ,unsigned long * );// Offset=0x0 Size=0xf4
        HRESULT GetVoiceState(unsigned char * );// Offset=0x0 Size=0xe8
        struct IXAudioFrameBuffer * GetFrameBuffer();// Offset=0x0 Size=0x1c
        HRESULT SubmitPacket(struct XAUDIOPACKET * ,unsigned char );
        HRESULT SubmitSourceBuffer(struct XAUDIOSOURCEBUFFER * ,unsigned char );
        HRESULT FlushPackets();
        HRESULT FlushSourceBuffers();
        HRESULT Start();// Offset=0x0 Size=0xc
        HRESULT Start(unsigned char );// Offset=0x0 Size=0xa0
        HRESULT Stop(unsigned char );// Offset=0x0 Size=0xac
        HRESULT Discontinuity();
        HRESULT GetPacketPosition(union XAUDIOPACKETPOSITION * );
        HRESULT SetPacketPosition(union XAUDIOPACKETPOSITION * );
        HRESULT GetPacketLoopCount(unsigned long * );
        HRESULT SetPacketLoopCount(unsigned long );
        HRESULT GetPacketContext(void ** );
        HRESULT GetStreamPosition(unsigned long * );
        HRESULT GetVolume(float * );
        HRESULT SetVolume(float );
        HRESULT GetPitch(float * );
        HRESULT SetPitch(float );
        HRESULT GetFrequencyScale(float * );
        HRESULT SetFrequencyScale(float );
        HRESULT GetVoiceFormat(struct XAUDIOSOURCEFORMAT * );
        HRESULT SetVoiceFormat(struct XAUDIOSOURCEFORMAT * ,struct XAUDIOVOICEOUTPUT * ,unsigned char );
        class XAUDIO::CSourceVoice * Typecast(struct IXAudioSourceVoice * );
        struct IXAudioSourceVoice * Typecast(class XAUDIO::CSourceVoice * );
        HRESULT Initialize(struct XAUDIOSOURCEVOICEINIT * );// Offset=0x0 Size=0xd8
        void ConvertInit(class XAUDIO::CSourceVoice * ,struct XAUDIOSOURCEVOICEINIT * ,struct XAUDIOSOURCEFXINIT * );
        void ConvertInit(struct XAUDIOSOURCEVOICEINIT * ,struct XAUDIO::XAUDIOROUTEDVOICEINIT * );// Offset=0x0 Size=0xc8
        void ConvertFormat(struct XAUDIOSOURCEFORMAT * ,union XAUDIOFORMAT * );// Offset=0x0 Size=0x68
        HRESULT ProcessEffects(struct IXAudioFrameBuffer ** );// Offset=0x0 Size=0xf8
        HRESULT OnVolumeChange();// Offset=0x0 Size=0x4c
        HRESULT SynchStart();// Offset=0x0 Size=0x22c
        HRESULT SynchStop();// Offset=0x0 Size=0x288
    };
    public void * __vecDelDtor(unsigned int );
};

class XAUDIO::CActiveVoiceList : public XAUDIO::CEmbeddedList<XAUDIO::CVoice>// Size=0xc (Id=3797)
{
    public void * operator new(unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new(unsigned int );
    public void * operator new[](unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new[](unsigned int );
    public void operator delete(void * ,struct IXAudioBatchAllocator * );
    public void operator delete(void * );
    public void operator delete[](void * ,struct IXAudioBatchAllocator * );
    public void operator delete[](void * );
    public void CActiveVoiceList();
    public void ~CActiveVoiceList();// Offset=0x0 Size=0x74
    public void * __vecDelDtor(unsigned int );
};

struct XAUDIO::XAUDIOROUTEDVOICEINIT// Size=0x20 (Id=3798)
{
    struct XAUDIO::XAUDIOVOICEINIT Base;// Offset=0x0 Size=0x18
    unsigned char MaxOutputVoiceCount;// Offset=0x18 Size=0x1
    unsigned char MaxChannelMapEntryCount;// Offset=0x19 Size=0x1
    unsigned char __align0[2];// Offset=0x1a Size=0x2
    struct XAUDIOVOICEOUTPUT * pVoiceOutput;// Offset=0x1c Size=0x4
};

class XAUDIO::CSpinLock// Size=0x10 (Id=3799)
{
    protected unsigned long m_SpinLock;// Offset=0x0 Size=0x4
    protected long m_LockCount;// Offset=0x4 Size=0x4
    protected void * m_pOwningThread;// Offset=0x8 Size=0x4
    protected unsigned char m_PreviousIrql;// Offset=0xc Size=0x1
    public void CSpinLock();
    public void Lock();
    public int TryLock();
    public void Unlock();
};

struct XAUDIO::XAUDIOSRCSOURCE// Size=0x14 (Id=3800)
{
    void * pBuffer;// Offset=0x0 Size=0x4
    unsigned int SampleCount;// Offset=0x4 Size=0x4
    unsigned int SampleOffset;// Offset=0x8 Size=0x4
    union XAUDIOFORMAT Format;// Offset=0xc Size=0x8
};

class XAUDIO::CReverbEffect : public IXAudioEffect, public XAUDIO::CEffect// Size=0x4bab0 (Id=3801)
{
    public void * operator new(unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new(unsigned int );
    public void * operator new[](unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new[](unsigned int );
    public void operator delete(void * ,struct IXAudioBatchAllocator * );
    public void operator delete(void * );
    public void operator delete[](void * ,struct IXAudioBatchAllocator * );
    public void operator delete[](void * );
    public void CReverbEffect(class XAUDIO::CReverbEffect & );
    public void CReverbEffect(struct XAUDIOFXINIT * ,struct IXAudioBatchAllocator * );
    public void ~CReverbEffect();
    public unsigned int GetObjectSize(struct XAUDIOFXINIT * );
    public unsigned int GetObjectAdditionalSize(struct XAUDIOFXINIT * );
    union // Size=0x3b0 (Id=0)
    {
        HRESULT Initialize(struct XAUDIOFXINIT * ,struct IXAudioBatchAllocator * );// Offset=0x0 Size=0x8
        unsigned long AddRef();// Offset=0x0 Size=0x18
        unsigned long Release();// Offset=0x0 Size=0x48
        HRESULT GetInfo(struct XAUDIOFXINFO * );// Offset=0x0 Size=0x18
        HRESULT GetParam(unsigned char ,unsigned char ,union XAUDIOFXPARAM * );// Offset=0x0 Size=0x218
        HRESULT SetParam(unsigned char ,unsigned char ,union XAUDIOFXPARAM * );// Offset=0x0 Size=0x3b0
        HRESULT GetContext(void ** );// Offset=0x0 Size=0x10
        HRESULT Process(struct IXAudioFrameBuffer * ,struct IXAudioFrameBuffer * );// Offset=0x0 Size=0x164
        void QueryInterface(struct IXAudioEffect ** );// Offset=0x0 Size=0xc
        unsigned char __align0[4];// Offset=0xc Size=0x4
        class XAUDIO::CStereoRoomFloat m_effect;// Offset=0x10 Size=0x4ba90
    };
    private long long m_totalProcessingTime;// Offset=0x4baa0 Size=0x8
    private long long m_totalFramesProcessed;// Offset=0x4baa8 Size=0x8
    public class XAUDIO::CReverbEffect & operator=(class XAUDIO::CReverbEffect & );
    public void * __vecDelDtor(unsigned int );
};

class XAUDIO::CReverbEffect : public IXAudioEffect, public XAUDIO::CEffect// Size=0x4bab0 (Id=3802)
{
    public void * operator new(unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new(unsigned int );
    public void * operator new[](unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new[](unsigned int );
    public void operator delete(void * ,struct IXAudioBatchAllocator * );
    public void operator delete(void * );
    public void operator delete[](void * ,struct IXAudioBatchAllocator * );
    public void operator delete[](void * );
    public void CReverbEffect(class XAUDIO::CReverbEffect & );
    public void CReverbEffect(struct XAUDIOFXINIT * ,struct IXAudioBatchAllocator * );
    public void ~CReverbEffect();
    public unsigned int GetObjectSize(struct XAUDIOFXINIT * );
    public unsigned int GetObjectAdditionalSize(struct XAUDIOFXINIT * );
    union // Size=0x3b0 (Id=0)
    {
        HRESULT Initialize(struct XAUDIOFXINIT * ,struct IXAudioBatchAllocator * );// Offset=0x0 Size=0x8
        unsigned long AddRef();// Offset=0x0 Size=0x18
        unsigned long Release();// Offset=0x0 Size=0x48
        HRESULT GetInfo(struct XAUDIOFXINFO * );// Offset=0x0 Size=0x18
        HRESULT GetParam(unsigned char ,unsigned char ,union XAUDIOFXPARAM * );// Offset=0x0 Size=0x218
        HRESULT SetParam(unsigned char ,unsigned char ,union XAUDIOFXPARAM * );// Offset=0x0 Size=0x3b0
        HRESULT GetContext(void ** );// Offset=0x0 Size=0x10
        HRESULT Process(struct IXAudioFrameBuffer * ,struct IXAudioFrameBuffer * );// Offset=0x0 Size=0x164
        void QueryInterface(struct IXAudioEffect ** );// Offset=0x0 Size=0xc
        unsigned char __align0[4];// Offset=0xc Size=0x4
        class XAUDIO::CStereoRoomFloat m_effect;// Offset=0x10 Size=0x4ba90
    };
    private long long m_totalProcessingTime;// Offset=0x4baa0 Size=0x8
    private long long m_totalFramesProcessed;// Offset=0x4baa8 Size=0x8
    public class XAUDIO::CReverbEffect & operator=(class XAUDIO::CReverbEffect & );
    public void * __vecDelDtor(unsigned int );
};

class XAUDIO::CAutoPerfCounter : public XAUDIO::CPerfCounter// Size=0x10 (Id=3803)
{
    private unsigned char __align0[8];// Offset=0x0 Size=0x8
    protected char * m_pFunctionName;// Offset=0x8 Size=0x4
    public void CAutoPerfCounter(char * );
    public void ~CAutoPerfCounter();
    public void * __vecDelDtor(unsigned int );
};

class XAUDIO::CFloatingPointState// Size=0x1 (Id=3804)
{
    protected unsigned int m_RefCount;// Offset=0x0 Size=0x4
    public void Save();
    public void Restore();
};

union XAUDIO::_XMA_RESET_ENABLE// Size=0x4 (Id=3805)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long Enable:1;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x1
        unsigned long ResetN:1;// Offset=0x0 Size=0x4 BitOffset=0x1 BitSize=0x1
        unsigned long Reserved:30;// Offset=0x0 Size=0x4 BitOffset=0x2 BitSize=0x1e
    };
    unsigned long AsULONG;// Offset=0x0 Size=0x4
};

class XAUDIO::CEffectManager : public IXAudioEffectManager, public XAUDIO::CObjectRefCount// Size=0x18 (Id=3806)
{
    public void * operator new(unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new(unsigned int );
    public void * operator new[](unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new[](unsigned int );
    public void operator delete(void * ,struct IXAudioBatchAllocator * );
    public void operator delete(void * );
    public void operator delete[](void * ,struct IXAudioBatchAllocator * );
    public void operator delete[](void * );
    union // Size=0x1ec (Id=0)
    {
        unsigned char __align0[8];// Offset=0x0 Size=0x8
        struct XAUDIO::XAUDIOFXMGRFXTABLE m_StaticEffectTable;// Offset=0x8 Size=0x8
        struct XAUDIO::XAUDIOFXMGRFXTABLE m_DynamicEffectTable;// Offset=0x10 Size=0x8
        void CEffectManager(class XAUDIO::CEffectManager & );
        void CEffectManager(struct XAUDIOFXMGRINIT * ,struct IXAudioBatchAllocator * );// Offset=0x0 Size=0x10c
        void ~CEffectManager();
        unsigned int GetObjectSize(struct XAUDIOFXMGRINIT * );
        unsigned int GetObjectAdditionalSize(struct XAUDIOFXMGRINIT * );
        unsigned long AddRef();// Offset=0x0 Size=0x14
        unsigned long Release();// Offset=0x0 Size=0x54
        HRESULT QueryEffectSize(struct XAUDIOFXINIT * ,unsigned long * );// Offset=0x0 Size=0x84
        HRESULT CreateEffect(struct XAUDIOFXINIT * ,struct IXAudioBatchAllocator * ,struct IXAudioEffect ** );// Offset=0x0 Size=0x88
        HRESULT RegisterEffects(struct XAUDIOFXREGISTER * );// Offset=0x0 Size=0x1ec
        HRESULT UnregisterEffects(struct XAUDIOFXUNREGISTER * );// Offset=0x0 Size=0x78
        void QueryInterface(struct IXAudioEffectManager ** );// Offset=0x0 Size=0x18
        unsigned int GetEffectTableSize(struct XAUDIOFXTABLE * );
        struct XAUDIO::XAUDIOFXMGRFXTABLEENTRY * GetEffectTableEntry(unsigned char );
        struct XAUDIO::XAUDIOFXMGRFXTABLEENTRY * GetStaticEffectTableEntry(unsigned char );
        struct XAUDIO::XAUDIOFXMGRFXTABLEENTRY * GetDynamicEffectTableEntry(unsigned char );
        struct XAUDIO::XAUDIOFXMGRFXTABLEENTRY * GetFreeDynamicEffectEntry(struct XAUDIO::XAUDIOFXMGRFXTABLEENTRY * );
        unsigned char GetStaticEffectId(struct XAUDIO::XAUDIOFXMGRFXTABLEENTRY * );
        unsigned char GetDynamicEffectId(struct XAUDIO::XAUDIOFXMGRFXTABLEENTRY * );
        void RegisterDynamicEffect(struct XAUDIOFXTABLEENTRY * ,struct XAUDIO::XAUDIOFXMGRFXTABLEENTRY * );
        void UnregisterDynamicEffect(struct XAUDIO::XAUDIOFXMGRFXTABLEENTRY * );
        unsigned int StaticFXIDToIndex(unsigned char );
        unsigned char IndexToStaticFXID(unsigned int );
        int IsValidStaticFXID(unsigned int );
        unsigned int DynamicFXIDToIndex(unsigned char );
        unsigned char IndexToDynamicFXID(unsigned int );
        int IsValidDynamicFXID(unsigned int );
        class XAUDIO::CEffectManager & operator=(class XAUDIO::CEffectManager & );
        void * __vecDelDtor(unsigned int );
    };
};

class XAUDIO::CEffectManager : public IXAudioEffectManager, public XAUDIO::CObjectRefCount// Size=0x18 (Id=3807)
{
    public void * operator new(unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new(unsigned int );
    public void * operator new[](unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new[](unsigned int );
    public void operator delete(void * ,struct IXAudioBatchAllocator * );
    public void operator delete(void * );
    public void operator delete[](void * ,struct IXAudioBatchAllocator * );
    public void operator delete[](void * );
    union // Size=0x1ec (Id=0)
    {
        unsigned char __align0[8];// Offset=0x0 Size=0x8
        struct XAUDIO::XAUDIOFXMGRFXTABLE m_StaticEffectTable;// Offset=0x8 Size=0x8
        struct XAUDIO::XAUDIOFXMGRFXTABLE m_DynamicEffectTable;// Offset=0x10 Size=0x8
        void CEffectManager(class XAUDIO::CEffectManager & );
        void CEffectManager(struct XAUDIOFXMGRINIT * ,struct IXAudioBatchAllocator * );// Offset=0x0 Size=0x10c
        void ~CEffectManager();
        unsigned int GetObjectSize(struct XAUDIOFXMGRINIT * );
        unsigned int GetObjectAdditionalSize(struct XAUDIOFXMGRINIT * );
        unsigned long AddRef();// Offset=0x0 Size=0x14
        unsigned long Release();// Offset=0x0 Size=0x54
        HRESULT QueryEffectSize(struct XAUDIOFXINIT * ,unsigned long * );// Offset=0x0 Size=0x84
        HRESULT CreateEffect(struct XAUDIOFXINIT * ,struct IXAudioBatchAllocator * ,struct IXAudioEffect ** );// Offset=0x0 Size=0x88
        HRESULT RegisterEffects(struct XAUDIOFXREGISTER * );// Offset=0x0 Size=0x1ec
        HRESULT UnregisterEffects(struct XAUDIOFXUNREGISTER * );// Offset=0x0 Size=0x78
        void QueryInterface(struct IXAudioEffectManager ** );// Offset=0x0 Size=0x18
        unsigned int GetEffectTableSize(struct XAUDIOFXTABLE * );
        struct XAUDIO::XAUDIOFXMGRFXTABLEENTRY * GetEffectTableEntry(unsigned char );
        struct XAUDIO::XAUDIOFXMGRFXTABLEENTRY * GetStaticEffectTableEntry(unsigned char );
        struct XAUDIO::XAUDIOFXMGRFXTABLEENTRY * GetDynamicEffectTableEntry(unsigned char );
        struct XAUDIO::XAUDIOFXMGRFXTABLEENTRY * GetFreeDynamicEffectEntry(struct XAUDIO::XAUDIOFXMGRFXTABLEENTRY * );
        unsigned char GetStaticEffectId(struct XAUDIO::XAUDIOFXMGRFXTABLEENTRY * );
        unsigned char GetDynamicEffectId(struct XAUDIO::XAUDIOFXMGRFXTABLEENTRY * );
        void RegisterDynamicEffect(struct XAUDIOFXTABLEENTRY * ,struct XAUDIO::XAUDIOFXMGRFXTABLEENTRY * );
        void UnregisterDynamicEffect(struct XAUDIO::XAUDIOFXMGRFXTABLEENTRY * );
        unsigned int StaticFXIDToIndex(unsigned char );
        unsigned char IndexToStaticFXID(unsigned int );
        int IsValidStaticFXID(unsigned int );
        unsigned int DynamicFXIDToIndex(unsigned char );
        unsigned char IndexToDynamicFXID(unsigned int );
        int IsValidDynamicFXID(unsigned int );
        class XAUDIO::CEffectManager & operator=(class XAUDIO::CEffectManager & );
        void * __vecDelDtor(unsigned int );
    };
};

class XAUDIO::CExternCriticalSection// Size=0x4 (Id=3808)
{
    protected struct _RTL_CRITICAL_SECTION & m_cs;// Offset=0x0 Size=0x4
    public void CExternCriticalSection(struct _RTL_CRITICAL_SECTION & );
    public void Enter();
    public int TryEnter();
    public void Leave();
    public void Lock();
    public int TryLock();
    public void Unlock();
    public struct _RTL_CRITICAL_SECTION & operator struct _RTL_CRITICAL_SECTION &();
    public struct _RTL_CRITICAL_SECTION * operator struct _RTL_CRITICAL_SECTION *();
};

class XAUDIO::CEmbeddedList<XAUDIO::CVoice> : protected _LIST_ENTRY// Size=0xc (Id=3809)
{
    union // Size=0xc (Id=0)
    {
        unsigned char __align0[8];// Offset=0x0 Size=0x8
        const unsigned int m_nEntryOffset;// Offset=0x8 Size=0x4
        void CEmbeddedList<XAUDIO::CVoice>(struct _LIST_ENTRY * );
        void ~CEmbeddedList<XAUDIO::CVoice>();
        void CreateHead(class XAUDIO::CVoice * );
        void CreateTail(class XAUDIO::CVoice * );
        void CreateAfter(class XAUDIO::CVoice * ,class XAUDIO::CVoice * );
        void CreateBefore(class XAUDIO::CVoice * ,class XAUDIO::CVoice * );
        void Remove(class XAUDIO::CVoice * );
        void Reset();
        class XAUDIO::CVoice * GetNextEntry(class XAUDIO::CVoice * ,int );// Offset=0x0 Size=0x20
    };
    public class XAUDIO::CVoice * PopNextEntry(class XAUDIO::CVoice * ,int );
    public int EntryInList(class XAUDIO::CVoice * );
    private class XAUDIO::CVoice * ConvertEntry(struct _LIST_ENTRY * );
    private struct _LIST_ENTRY * ConvertEntry(class XAUDIO::CVoice * );
    public void * __vecDelDtor(unsigned int );
};

class XAUDIO::CPCMSourceEffect : public IXAudioSourceEffect, public XAUDIO::CSourceEffect// Size=0x114 (Id=3810)
{
    public void * operator new(unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new(unsigned int );
    public void * operator new[](unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new[](unsigned int );
    public void operator delete(void * ,struct IXAudioBatchAllocator * );
    public void operator delete(void * );
    public void operator delete[](void * ,struct IXAudioBatchAllocator * );
    public void operator delete[](void * );
    union // Size=0x718 (Id=0)
    {
        unsigned char __align0[184];// Offset=0x0 Size=0xb8
        class XAUDIO::CResampler m_Resampler;// Offset=0xb8 Size=0x58
        void CPCMSourceEffect(class XAUDIO::CPCMSourceEffect & );
        void CPCMSourceEffect(struct XAUDIOSOURCEFXINIT * ,struct IXAudioBatchAllocator * );// Offset=0x0 Size=0x180
        void ~CPCMSourceEffect();// Offset=0x0 Size=0xa0
        unsigned int GetObjectSize(struct XAUDIOSOURCEFXINIT * );
        unsigned int GetObjectAdditionalSize(struct XAUDIOSOURCEFXINIT * );
        unsigned long AddRef();// Offset=0x0 Size=0x18
        unsigned long Release();// Offset=0x0 Size=0x48
        HRESULT GetInfo(struct XAUDIOFXINFO * );// Offset=0x0 Size=0x18
        HRESULT GetParam(unsigned char ,unsigned char ,union XAUDIOFXPARAM * );// Offset=0x0 Size=0x8
        HRESULT SetParam(unsigned char ,unsigned char ,union XAUDIOFXPARAM * );// Offset=0x0 Size=0x8
        HRESULT GetContext(void ** );// Offset=0x0 Size=0x10
        HRESULT Process(struct IXAudioFrameBuffer * ,struct IXAudioFrameBuffer * );// Offset=0x0 Size=0x718
        HRESULT SubmitPacket(struct XAUDIOPACKET * ,unsigned char );// Offset=0x0 Size=0x8
        HRESULT SubmitSourceBuffer(struct XAUDIOSOURCEBUFFER * ,unsigned char );// Offset=0x0 Size=0x8
        HRESULT FlushPackets();// Offset=0x0 Size=0x8
        HRESULT FlushSourceBuffers();// Offset=0x0 Size=0x8
        HRESULT GetPacketPosition(union XAUDIOPACKETPOSITION * );// Offset=0x0 Size=0x1c
        HRESULT SetPacketPosition(union XAUDIOPACKETPOSITION * );// Offset=0x0 Size=0xd0
        HRESULT GetPacketLoopCount(unsigned long * );// Offset=0x0 Size=0x54
        HRESULT SetPacketLoopCount(unsigned long );// Offset=0x0 Size=0x50
        HRESULT GetPacketContext(void ** );// Offset=0x0 Size=0x54
        HRESULT GetStreamPosition(unsigned long * );// Offset=0x0 Size=0x10
        HRESULT GetState(unsigned char * );// Offset=0x0 Size=0x10
        HRESULT Start();// Offset=0x0 Size=0xf4
        HRESULT Stop(unsigned char );// Offset=0x0 Size=0x130
        HRESULT Discontinuity();// Offset=0x0 Size=0xf0
        HRESULT GetVolume(float * );// Offset=0x0 Size=0x10
        HRESULT SetVolume(float );// Offset=0x0 Size=0xc4
        HRESULT GetPitch(float * );// Offset=0x0 Size=0x4c
        HRESULT SetPitch(float );// Offset=0x0 Size=0x11c
        HRESULT GetFrequencyScale(float * );// Offset=0x0 Size=0x10
        HRESULT SetFrequencyScale(float );// Offset=0x0 Size=0x104
        HRESULT GetFormat(struct XAUDIOSOURCEFORMAT * ,unsigned char * );// Offset=0x0 Size=0x64
        HRESULT SetFormat(struct XAUDIOSOURCEFORMAT * ,unsigned char );// Offset=0x0 Size=0x60
        void QueryInterface(struct IXAudioSourceEffect ** );// Offset=0x0 Size=0x8
        void QueryInterface(struct IXAudioEffect ** );// Offset=0x0 Size=0xc
        int IsValidSampleType(unsigned int );
        int IsValidFormat(struct XAUDIOSOURCEFORMAT * );
        void SetDataAlignment();
        HRESULT PreProcess(struct IXAudioFrameBuffer * );
        void PostProcess();
        struct XAUDIO::XAUDIOPACKETCTX * GetNextProcessPacket(struct XAUDIO::XAUDIOPACKETCTX * );
        unsigned char __align1[260];// Offset=0xc Size=0x104
        int m_fUsePacketPosition;// Offset=0x110 Size=0x4
        void * __vecDelDtor(unsigned int );
    };
};

class XAUDIO::CPCMSourceEffect : public IXAudioSourceEffect, public XAUDIO::CSourceEffect// Size=0x114 (Id=3811)
{
    public void * operator new(unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new(unsigned int );
    public void * operator new[](unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new[](unsigned int );
    public void operator delete(void * ,struct IXAudioBatchAllocator * );
    public void operator delete(void * );
    public void operator delete[](void * ,struct IXAudioBatchAllocator * );
    public void operator delete[](void * );
    union // Size=0x718 (Id=0)
    {
        unsigned char __align0[184];// Offset=0x0 Size=0xb8
        class XAUDIO::CResampler m_Resampler;// Offset=0xb8 Size=0x58
        void CPCMSourceEffect(class XAUDIO::CPCMSourceEffect & );
        void CPCMSourceEffect(struct XAUDIOSOURCEFXINIT * ,struct IXAudioBatchAllocator * );// Offset=0x0 Size=0x180
        void ~CPCMSourceEffect();// Offset=0x0 Size=0xa0
        unsigned int GetObjectSize(struct XAUDIOSOURCEFXINIT * );
        unsigned int GetObjectAdditionalSize(struct XAUDIOSOURCEFXINIT * );
        unsigned long AddRef();// Offset=0x0 Size=0x18
        unsigned long Release();// Offset=0x0 Size=0x48
        HRESULT GetInfo(struct XAUDIOFXINFO * );// Offset=0x0 Size=0x18
        HRESULT GetParam(unsigned char ,unsigned char ,union XAUDIOFXPARAM * );// Offset=0x0 Size=0x8
        HRESULT SetParam(unsigned char ,unsigned char ,union XAUDIOFXPARAM * );// Offset=0x0 Size=0x8
        HRESULT GetContext(void ** );// Offset=0x0 Size=0x10
        HRESULT Process(struct IXAudioFrameBuffer * ,struct IXAudioFrameBuffer * );// Offset=0x0 Size=0x718
        HRESULT SubmitPacket(struct XAUDIOPACKET * ,unsigned char );// Offset=0x0 Size=0x8
        HRESULT SubmitSourceBuffer(struct XAUDIOSOURCEBUFFER * ,unsigned char );// Offset=0x0 Size=0x8
        HRESULT FlushPackets();// Offset=0x0 Size=0x8
        HRESULT FlushSourceBuffers();// Offset=0x0 Size=0x8
        HRESULT GetPacketPosition(union XAUDIOPACKETPOSITION * );// Offset=0x0 Size=0x1c
        HRESULT SetPacketPosition(union XAUDIOPACKETPOSITION * );// Offset=0x0 Size=0xd0
        HRESULT GetPacketLoopCount(unsigned long * );// Offset=0x0 Size=0x54
        HRESULT SetPacketLoopCount(unsigned long );// Offset=0x0 Size=0x50
        HRESULT GetPacketContext(void ** );// Offset=0x0 Size=0x54
        HRESULT GetStreamPosition(unsigned long * );// Offset=0x0 Size=0x10
        HRESULT GetState(unsigned char * );// Offset=0x0 Size=0x10
        HRESULT Start();// Offset=0x0 Size=0xf4
        HRESULT Stop(unsigned char );// Offset=0x0 Size=0x130
        HRESULT Discontinuity();// Offset=0x0 Size=0xf0
        HRESULT GetVolume(float * );// Offset=0x0 Size=0x10
        HRESULT SetVolume(float );// Offset=0x0 Size=0xc4
        HRESULT GetPitch(float * );// Offset=0x0 Size=0x4c
        HRESULT SetPitch(float );// Offset=0x0 Size=0x11c
        HRESULT GetFrequencyScale(float * );// Offset=0x0 Size=0x10
        HRESULT SetFrequencyScale(float );// Offset=0x0 Size=0x104
        HRESULT GetFormat(struct XAUDIOSOURCEFORMAT * ,unsigned char * );// Offset=0x0 Size=0x64
        HRESULT SetFormat(struct XAUDIOSOURCEFORMAT * ,unsigned char );// Offset=0x0 Size=0x60
        void QueryInterface(struct IXAudioSourceEffect ** );// Offset=0x0 Size=0x8
        void QueryInterface(struct IXAudioEffect ** );// Offset=0x0 Size=0xc
        int IsValidSampleType(unsigned int );
        int IsValidFormat(struct XAUDIOSOURCEFORMAT * );
        void SetDataAlignment();
        HRESULT PreProcess(struct IXAudioFrameBuffer * );
        void PostProcess();
        struct XAUDIO::XAUDIOPACKETCTX * GetNextProcessPacket(struct XAUDIO::XAUDIOPACKETCTX * );
        unsigned char __align1[260];// Offset=0xc Size=0x104
        int m_fUsePacketPosition;// Offset=0x110 Size=0x4
        void * __vecDelDtor(unsigned int );
    };
};

class XAUDIO::CXMemMemoryManager : public XAUDIO::CMemoryTracker// Size=0x1 (Id=3812)
{
    public void CXMemMemoryManager();
    public void * XMemAlloc(unsigned long ,unsigned long );
    public void XMemFree(void * ,unsigned long );
    public void DumpMemoryUsage(int );
};

class XAUDIO::CXenonRenderer : public IXAudioRenderEffect, public XAUDIO::CEffect// Size=0x1c (Id=3813)
{
    public void * operator new(unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new(unsigned int );
    public void * operator new[](unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new[](unsigned int );
    public void operator delete(void * ,struct IXAudioBatchAllocator * );
    public void operator delete(void * );
    public void operator delete[](void * ,struct IXAudioBatchAllocator * );
    public void operator delete[](void * );
    union // Size=0xc0 (Id=0)
    {
        unsigned char __align0[16];// Offset=0x0 Size=0x10
        void * m_pXBMSampleDestPrev;// Offset=0x10 Size=0x4
        unsigned int m_XBMSampleCount;// Offset=0x14 Size=0x4
        void * m_hDriverClient;// Offset=0x18 Size=0x4
        void CXenonRenderer(class XAUDIO::CXenonRenderer & );
        void CXenonRenderer(struct XAUDIORENDERFXINIT * ,struct IXAudioBatchAllocator * );
        void ~CXenonRenderer();// Offset=0x0 Size=0xb4
        void CaptureXBMAudioFrame(struct XAUDIOFRAMEBUFDATA * );// Offset=0x0 Size=0xc0
        unsigned int GetObjectSize(struct XAUDIORENDERFXINIT * );
        unsigned int GetObjectAdditionalSize(struct XAUDIORENDERFXINIT * );
        HRESULT Initialize(struct XAUDIORENDERFXINIT * ,struct IXAudioBatchAllocator * );// Offset=0x0 Size=0x20
        unsigned long AddRef();// Offset=0x0 Size=0x18
        unsigned long Release();// Offset=0x0 Size=0x48
        HRESULT GetInfo(struct XAUDIOFXINFO * );// Offset=0x0 Size=0x18
        HRESULT GetParam(unsigned char ,unsigned char ,union XAUDIOFXPARAM * );// Offset=0x0 Size=0xc
        HRESULT SetParam(unsigned char ,unsigned char ,union XAUDIOFXPARAM * );// Offset=0x0 Size=0xc
        HRESULT GetContext(void ** );// Offset=0x0 Size=0x10
        HRESULT Process(struct IXAudioFrameBuffer * ,struct IXAudioFrameBuffer * );// Offset=0x0 Size=0x68
        HRESULT SetCallback(void  ( * )(struct XAUDIORENDERFXCALLBACK * ));// Offset=0x0 Size=0x68
        void QueryInterface(struct IXAudioRenderEffect ** );// Offset=0x0 Size=0x8
        void QueryInterface(struct IXAudioEffect ** );// Offset=0x0 Size=0xc
        class XAUDIO::CXenonRenderer & operator=(class XAUDIO::CXenonRenderer & );
        void * __vecDelDtor(unsigned int );
    };
};

class XAUDIO::CXenonRenderer : public IXAudioRenderEffect, public XAUDIO::CEffect// Size=0x1c (Id=3814)
{
    public void * operator new(unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new(unsigned int );
    public void * operator new[](unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new[](unsigned int );
    public void operator delete(void * ,struct IXAudioBatchAllocator * );
    public void operator delete(void * );
    public void operator delete[](void * ,struct IXAudioBatchAllocator * );
    public void operator delete[](void * );
    union // Size=0xc0 (Id=0)
    {
        unsigned char __align0[16];// Offset=0x0 Size=0x10
        void * m_pXBMSampleDestPrev;// Offset=0x10 Size=0x4
        unsigned int m_XBMSampleCount;// Offset=0x14 Size=0x4
        void * m_hDriverClient;// Offset=0x18 Size=0x4
        void CXenonRenderer(class XAUDIO::CXenonRenderer & );
        void CXenonRenderer(struct XAUDIORENDERFXINIT * ,struct IXAudioBatchAllocator * );
        void ~CXenonRenderer();// Offset=0x0 Size=0xb4
        void CaptureXBMAudioFrame(struct XAUDIOFRAMEBUFDATA * );// Offset=0x0 Size=0xc0
        unsigned int GetObjectSize(struct XAUDIORENDERFXINIT * );
        unsigned int GetObjectAdditionalSize(struct XAUDIORENDERFXINIT * );
        HRESULT Initialize(struct XAUDIORENDERFXINIT * ,struct IXAudioBatchAllocator * );// Offset=0x0 Size=0x20
        unsigned long AddRef();// Offset=0x0 Size=0x18
        unsigned long Release();// Offset=0x0 Size=0x48
        HRESULT GetInfo(struct XAUDIOFXINFO * );// Offset=0x0 Size=0x18
        HRESULT GetParam(unsigned char ,unsigned char ,union XAUDIOFXPARAM * );// Offset=0x0 Size=0xc
        HRESULT SetParam(unsigned char ,unsigned char ,union XAUDIOFXPARAM * );// Offset=0x0 Size=0xc
        HRESULT GetContext(void ** );// Offset=0x0 Size=0x10
        HRESULT Process(struct IXAudioFrameBuffer * ,struct IXAudioFrameBuffer * );// Offset=0x0 Size=0x68
        HRESULT SetCallback(void  ( * )(struct XAUDIORENDERFXCALLBACK * ));// Offset=0x0 Size=0x68
        void QueryInterface(struct IXAudioRenderEffect ** );// Offset=0x0 Size=0x8
        void QueryInterface(struct IXAudioEffect ** );// Offset=0x0 Size=0xc
        class XAUDIO::CXenonRenderer & operator=(class XAUDIO::CXenonRenderer & );
        void * __vecDelDtor(unsigned int );
    };
};

class XAUDIO::CPacketQueue// Size=0x20 (Id=3815)
{
    protected class XAUDIO::CPacketList m_PendingPacketList;// Offset=0x0 Size=0xc
    protected class XAUDIO::CPacketList m_FreePacketList;// Offset=0xc Size=0xc
    private struct XAUDIO::XAUDIOPACKETCTX * m_paPackets;// Offset=0x18 Size=0x4
    private unsigned long m_LastID;// Offset=0x1c Size=0x4
    public void CPacketQueue();
    public void ~CPacketQueue();
    public unsigned int GetObjectAdditionalSize(unsigned char );
    public void Initialize(unsigned char ,struct IXAudioBatchAllocator * );
    public struct XAUDIO::XAUDIOPACKETCTX * AllocPacket();
    public void CompletePacket(struct XAUDIO::XAUDIOPACKETCTX * );
    public struct XAUDIO::XAUDIOPACKETCTX * GetNextPendingPacket(struct XAUDIO::XAUDIOPACKETCTX * );
    public struct XAUDIO::XAUDIOPACKETCTX * GetNextFreePacket(struct XAUDIO::XAUDIOPACKETCTX * );
    public void * __vecDelDtor(unsigned int );
};

class XAUDIO::CEffect : public XAUDIO::CObjectRefCount// Size=0xc (Id=3816)
{
    union // Size=0xc (Id=0)
    {
        unsigned char __align0[8];// Offset=0x0 Size=0x8
        void * m_pEffectContext;// Offset=0x8 Size=0x4
        void CEffect(class XAUDIO::CEffect & );
        void CEffect(struct XAUDIOFXINIT * );
        HRESULT GetContext(void ** );// Offset=0x0 Size=0x10
    };
    public void QueryInterface(struct IXAudioEffect ** );
    public void ~CEffect();
    public class XAUDIO::CEffect & operator=(class XAUDIO::CEffect & );
    public void * __vecDelDtor(unsigned int );
};

class XAUDIO::CEffect : public XAUDIO::CObjectRefCount// Size=0xc (Id=3817)
{
    union // Size=0xc (Id=0)
    {
        unsigned char __align0[8];// Offset=0x0 Size=0x8
        void * m_pEffectContext;// Offset=0x8 Size=0x4
        void CEffect(class XAUDIO::CEffect & );
        void CEffect(struct XAUDIOFXINIT * );
        HRESULT GetContext(void ** );// Offset=0x0 Size=0x10
    };
    public void QueryInterface(struct IXAudioEffect ** );
    public void ~CEffect();
    public class XAUDIO::CEffect & operator=(class XAUDIO::CEffect & );
    public void * __vecDelDtor(unsigned int );
};

class XAUDIO::CVoice : public XAUDIO::CBatchAllocatedObject// Size=0x44 (Id=3818)
{
    union // Size=0x38c (Id=0)
    {
        unsigned char __align0[12];// Offset=0x0 Size=0xc
        const unsigned char m_VoiceType;// Offset=0xc Size=0x1
        unsigned char __align1[3];// Offset=0xd Size=0x3
        class XAUDIO::CSafeListEntry m_MasterVoiceListEntry;// Offset=0x10 Size=0x8
        class XAUDIO::CSafeListEntry m_ActiveVoiceListEntry;// Offset=0x18 Size=0x8
        struct IXAudioFrameBuffer * m_pFrameBuffer;// Offset=0x20 Size=0x4
        struct XAUDIO::XAUDIOVOICEFXCTX * m_paUserEffects;// Offset=0x24 Size=0x4
        class XAUDIO::CSimpleRefCount m_ActiveSubmixSourceCount;// Offset=0x28 Size=0x4
        void  ( * m_pfnProcessCallback)(struct XAUDIOVOICEPROCESSCALLBACK * );// Offset=0x2c Size=0x4
        void * m_pVoiceContext;// Offset=0x30 Size=0x4
        union XAUDIOFORMAT m_VoiceFormat;// Offset=0x34 Size=0x8
        unsigned char m_UserEffectCount;// Offset=0x3c Size=0x1
        unsigned char m_VoiceState;// Offset=0x3d Size=0x1
        unsigned short m_MaxEffectTrailFrameCount;// Offset=0x3e Size=0x2
        unsigned short m_RemainingTrailFrameCount;// Offset=0x40 Size=0x2
        void CVoice(class XAUDIO::CVoice & );
        void CVoice(struct IXAudioBatchAllocator * ,unsigned char );// Offset=0x0 Size=0x9c
        void ~CVoice();// Offset=0x0 Size=0xf4
        HRESULT GetEffectState(unsigned char ,unsigned char * );// Offset=0x0 Size=0x38
        HRESULT SetEffectState(unsigned char ,unsigned char );// Offset=0x0 Size=0x34
        HRESULT GetEffectParam(unsigned char ,unsigned char ,unsigned char ,union XAUDIOFXPARAM * );// Offset=0x0 Size=0x48
        HRESULT SetEffectParam(unsigned char ,unsigned char ,unsigned char ,union XAUDIOFXPARAM * );// Offset=0x0 Size=0x48
        HRESULT SetVoiceOutput(struct XAUDIOVOICEOUTPUT * );
        HRESULT SetVoiceOutputVolume(struct XAUDIOVOICEOUTPUTVOLUME * );
        HRESULT GetVoiceContext(void ** );// Offset=0x0 Size=0x10
        HRESULT GetVoiceState(unsigned char * );// Offset=0x0 Size=0x10
        HRESULT GetVoiceType(unsigned char * );// Offset=0x0 Size=0x10
        HRESULT Start();// Offset=0x0 Size=0x214
        HRESULT Stop(unsigned char );// Offset=0x0 Size=0x38c
        HRESULT GetVoiceFormat(union XAUDIOFORMAT * );// Offset=0x0 Size=0x1c
        HRESULT Process();// Offset=0x0 Size=0xc8
        struct IXAudioFrameBuffer * GetFrameBuffer();// Offset=0x0 Size=0x8
        class XAUDIO::CVoice * Typecast(struct IXAudioVoice * );
        struct IXAudioVoice * Typecast(class XAUDIO::CVoice * );
        HRESULT GetObjectAdditionalSize(struct XAUDIO::XAUDIOVOICEINIT * ,unsigned long * );// Offset=0x0 Size=0xd0
        HRESULT Initialize(struct XAUDIO::XAUDIOVOICEINIT * );// Offset=0x0 Size=0x19c
        void ConvertInit(struct XAUDIO::XAUDIOVOICEINIT * ,struct XAUDIOFRAMEBUFINIT * );
        void SetVoiceState(unsigned char ,unsigned char );
        HRESULT OnStartVoice();// Offset=0x0 Size=0x130
        HRESULT OnStopVoice();// Offset=0x0 Size=0xe0
        void SetVoiceFormat(union XAUDIOFORMAT * );
        HRESULT ValidateFormat(union XAUDIOFORMAT * ,struct IXAudioFrameBuffer * );
        HRESULT CreateUserEffects(struct XAUDIOVOICEFXCHAIN * );
        HRESULT CreateEffect(struct XAUDIO::XAUDIOVOICEFXCTX * ,struct XAUDIOFXINIT * ,unsigned char );// Offset=0x0 Size=0xb4
        HRESULT GetEffect(unsigned char ,struct XAUDIO::XAUDIOVOICEFXCTX ** );
        unsigned char GetEffectCount();
        unsigned short GetTrailFrameCount();
        HRESULT ProcessEffects(struct IXAudioFrameBuffer ** );// Offset=0x0 Size=0x64
        HRESULT ProcessEffect(struct XAUDIO::XAUDIOVOICEFXCTX * ,struct IXAudioFrameBuffer * ,struct IXAudioFrameBuffer * );
        HRESULT ProcessEffect(struct XAUDIO::XAUDIOVOICEFXCTX * ,struct IXAudioFrameBuffer ** );// Offset=0x0 Size=0x11c
        void AttachSourceVoice();
        void DetachSourceVoice();
        HRESULT OnStartSourceVoice();
        HRESULT OnStopSourceVoice();
        void * __vecDelDtor(unsigned int );
    };
};

struct XAUDIO::XAUDIOVOICEINIT// Size=0x18 (Id=3819)
{
    union XAUDIOFORMAT Format;// Offset=0x0 Size=0x8
    struct XAUDIOVOICEFXCHAIN * pEffectChain;// Offset=0x8 Size=0x4
    struct IXAudioFrameBuffer * pFrameBuffer;// Offset=0xc Size=0x4
    void  ( * pfnProcessCallback)(struct XAUDIOVOICEPROCESSCALLBACK * );// Offset=0x10 Size=0x4
    void * pVoiceContext;// Offset=0x14 Size=0x4
};

class XAUDIO::CVoice : public XAUDIO::CBatchAllocatedObject// Size=0x44 (Id=3820)
{
    union // Size=0x38c (Id=0)
    {
        unsigned char __align0[12];// Offset=0x0 Size=0xc
        const unsigned char m_VoiceType;// Offset=0xc Size=0x1
        unsigned char __align1[3];// Offset=0xd Size=0x3
        class XAUDIO::CSafeListEntry m_MasterVoiceListEntry;// Offset=0x10 Size=0x8
        class XAUDIO::CSafeListEntry m_ActiveVoiceListEntry;// Offset=0x18 Size=0x8
        struct IXAudioFrameBuffer * m_pFrameBuffer;// Offset=0x20 Size=0x4
        struct XAUDIO::XAUDIOVOICEFXCTX * m_paUserEffects;// Offset=0x24 Size=0x4
        class XAUDIO::CSimpleRefCount m_ActiveSubmixSourceCount;// Offset=0x28 Size=0x4
        void  ( * m_pfnProcessCallback)(struct XAUDIOVOICEPROCESSCALLBACK * );// Offset=0x2c Size=0x4
        void * m_pVoiceContext;// Offset=0x30 Size=0x4
        union XAUDIOFORMAT m_VoiceFormat;// Offset=0x34 Size=0x8
        unsigned char m_UserEffectCount;// Offset=0x3c Size=0x1
        unsigned char m_VoiceState;// Offset=0x3d Size=0x1
        unsigned short m_MaxEffectTrailFrameCount;// Offset=0x3e Size=0x2
        unsigned short m_RemainingTrailFrameCount;// Offset=0x40 Size=0x2
        void CVoice(class XAUDIO::CVoice & );
        void CVoice(struct IXAudioBatchAllocator * ,unsigned char );// Offset=0x0 Size=0x9c
        void ~CVoice();// Offset=0x0 Size=0xf4
        HRESULT GetEffectState(unsigned char ,unsigned char * );// Offset=0x0 Size=0x38
        HRESULT SetEffectState(unsigned char ,unsigned char );// Offset=0x0 Size=0x34
        HRESULT GetEffectParam(unsigned char ,unsigned char ,unsigned char ,union XAUDIOFXPARAM * );// Offset=0x0 Size=0x48
        HRESULT SetEffectParam(unsigned char ,unsigned char ,unsigned char ,union XAUDIOFXPARAM * );// Offset=0x0 Size=0x48
        HRESULT SetVoiceOutput(struct XAUDIOVOICEOUTPUT * );
        HRESULT SetVoiceOutputVolume(struct XAUDIOVOICEOUTPUTVOLUME * );
        HRESULT GetVoiceContext(void ** );// Offset=0x0 Size=0x10
        HRESULT GetVoiceState(unsigned char * );// Offset=0x0 Size=0x10
        HRESULT GetVoiceType(unsigned char * );// Offset=0x0 Size=0x10
        HRESULT Start();// Offset=0x0 Size=0x214
        HRESULT Stop(unsigned char );// Offset=0x0 Size=0x38c
        HRESULT GetVoiceFormat(union XAUDIOFORMAT * );// Offset=0x0 Size=0x1c
        HRESULT Process();// Offset=0x0 Size=0xc8
        struct IXAudioFrameBuffer * GetFrameBuffer();// Offset=0x0 Size=0x8
        class XAUDIO::CVoice * Typecast(struct IXAudioVoice * );
        struct IXAudioVoice * Typecast(class XAUDIO::CVoice * );
        HRESULT GetObjectAdditionalSize(struct XAUDIO::XAUDIOVOICEINIT * ,unsigned long * );// Offset=0x0 Size=0xd0
        HRESULT Initialize(struct XAUDIO::XAUDIOVOICEINIT * );// Offset=0x0 Size=0x19c
        void ConvertInit(struct XAUDIO::XAUDIOVOICEINIT * ,struct XAUDIOFRAMEBUFINIT * );
        void SetVoiceState(unsigned char ,unsigned char );
        HRESULT OnStartVoice();// Offset=0x0 Size=0x130
        HRESULT OnStopVoice();// Offset=0x0 Size=0xe0
        void SetVoiceFormat(union XAUDIOFORMAT * );
        HRESULT ValidateFormat(union XAUDIOFORMAT * ,struct IXAudioFrameBuffer * );
        HRESULT CreateUserEffects(struct XAUDIOVOICEFXCHAIN * );
        HRESULT CreateEffect(struct XAUDIO::XAUDIOVOICEFXCTX * ,struct XAUDIOFXINIT * ,unsigned char );// Offset=0x0 Size=0xb4
        HRESULT GetEffect(unsigned char ,struct XAUDIO::XAUDIOVOICEFXCTX ** );
        unsigned char GetEffectCount();
        unsigned short GetTrailFrameCount();
        HRESULT ProcessEffects(struct IXAudioFrameBuffer ** );// Offset=0x0 Size=0x64
        HRESULT ProcessEffect(struct XAUDIO::XAUDIOVOICEFXCTX * ,struct IXAudioFrameBuffer * ,struct IXAudioFrameBuffer * );
        HRESULT ProcessEffect(struct XAUDIO::XAUDIOVOICEFXCTX * ,struct IXAudioFrameBuffer ** );// Offset=0x0 Size=0x11c
        void AttachSourceVoice();
        void DetachSourceVoice();
        HRESULT OnStartSourceVoice();
        HRESULT OnStopSourceVoice();
        void * __vecDelDtor(unsigned int );
    };
};

struct XAUDIO::XMAPLAYBACK// Size=0x10 (Id=3821)
{
    unsigned long dwNumContexts;// Offset=0x0 Size=0x4
    unsigned long dwStatus;// Offset=0x4 Size=0x4
    struct XAUDIO::XMAPLAYBACKSTREAM * pStreamInfo;// Offset=0x8 Size=0x4
    unsigned char RESERVED[4];// Offset=0xc Size=0x4
};

struct XAUDIO::XAUDIOROUTEDVOICEINIT// Size=0x20 (Id=3822)
{
    struct XAUDIO::XAUDIOVOICEINIT Base;// Offset=0x0 Size=0x18
    unsigned char MaxOutputVoiceCount;// Offset=0x18 Size=0x1
    unsigned char MaxChannelMapEntryCount;// Offset=0x19 Size=0x1
    unsigned char __align0[2];// Offset=0x1a Size=0x2
    struct XAUDIOVOICEOUTPUT * pVoiceOutput;// Offset=0x1c Size=0x4
};

class XAUDIO::CSourceEffect : public XAUDIO::CEffect, public XAUDIO::CSourceStream// Size=0xb4 (Id=3823)
{
    union // Size=0xf4 (Id=0)
    {
        unsigned char __align0[172];// Offset=0x0 Size=0xac
        void  ( * m_pfnPacketCompletionCallback)(struct XAUDIOSOURCEFXPACKETCALLBACK * );// Offset=0xac Size=0x4
        void  ( * m_pfnPacketLoopCallback)(struct XAUDIOSOURCEFXPACKETCALLBACK * );// Offset=0xb0 Size=0x4
        void CSourceEffect(class XAUDIO::CSourceEffect & );
        void CSourceEffect(struct XAUDIOSOURCEFXINIT * ,struct IXAudioBatchAllocator * );
        void ~CSourceEffect();
        unsigned int GetObjectAdditionalSize(struct XAUDIOSOURCEFXINIT * );
        void Initialize(struct XAUDIOSOURCEFXINIT * ,struct IXAudioBatchAllocator * );
        HRESULT GetInfo(struct XAUDIOFXINFO * );// Offset=0x0 Size=0x18
        HRESULT GetParam(unsigned char ,unsigned char ,union XAUDIOFXPARAM * );// Offset=0x0 Size=0xf4
        HRESULT SetParam(unsigned char ,unsigned char ,union XAUDIOFXPARAM * );// Offset=0x0 Size=0xf4
        struct XAUDIO::XAUDIOPACKETCTX * CompletePacket(struct XAUDIO::XAUDIOPACKETCTX * ,HRESULT );// Offset=0x0 Size=0x5c
        void PacketCompletionCallback(struct XAUDIO::XAUDIOPACKETCTX * ,HRESULT );
        void PacketLoopCallback(struct XAUDIO::XAUDIOPACKETCTX * );
        void PacketCallback(void  ( * )(struct XAUDIOSOURCEFXPACKETCALLBACK * ),struct XAUDIO::XAUDIOPACKETCTX * ,HRESULT );
        void * __vecDelDtor(unsigned int );
    };
};

class XAUDIO::CSourceEffect : public XAUDIO::CEffect, public XAUDIO::CSourceStream// Size=0xb4 (Id=3824)
{
    union // Size=0xf4 (Id=0)
    {
        unsigned char __align0[172];// Offset=0x0 Size=0xac
        void  ( * m_pfnPacketCompletionCallback)(struct XAUDIOSOURCEFXPACKETCALLBACK * );// Offset=0xac Size=0x4
        void  ( * m_pfnPacketLoopCallback)(struct XAUDIOSOURCEFXPACKETCALLBACK * );// Offset=0xb0 Size=0x4
        void CSourceEffect(class XAUDIO::CSourceEffect & );
        void CSourceEffect(struct XAUDIOSOURCEFXINIT * ,struct IXAudioBatchAllocator * );
        void ~CSourceEffect();
        unsigned int GetObjectAdditionalSize(struct XAUDIOSOURCEFXINIT * );
        void Initialize(struct XAUDIOSOURCEFXINIT * ,struct IXAudioBatchAllocator * );
        HRESULT GetInfo(struct XAUDIOFXINFO * );// Offset=0x0 Size=0x18
        HRESULT GetParam(unsigned char ,unsigned char ,union XAUDIOFXPARAM * );// Offset=0x0 Size=0xf4
        HRESULT SetParam(unsigned char ,unsigned char ,union XAUDIOFXPARAM * );// Offset=0x0 Size=0xf4
        struct XAUDIO::XAUDIOPACKETCTX * CompletePacket(struct XAUDIO::XAUDIOPACKETCTX * ,HRESULT );// Offset=0x0 Size=0x5c
        void PacketCompletionCallback(struct XAUDIO::XAUDIOPACKETCTX * ,HRESULT );
        void PacketLoopCallback(struct XAUDIO::XAUDIOPACKETCTX * );
        void PacketCallback(void  ( * )(struct XAUDIOSOURCEFXPACKETCALLBACK * ),struct XAUDIO::XAUDIOPACKETCTX * ,HRESULT );
        void * __vecDelDtor(unsigned int );
    };
};

class XAUDIO::CSimpleRefCount// Size=0x4 (Id=3825)
{
    protected unsigned long m_nRefCount;// Offset=0x0 Size=0x4
    public void CSimpleRefCount(unsigned long );
    public unsigned long AddRef();
    public unsigned long Release();
    public void AbsoluteRelease();
    public unsigned long GetRefCount();
    public void __dflt_ctor_closure();
};

class XAUDIO::CSafeListEntry : public _LIST_ENTRY// Size=0x8 (Id=3826)
{
    public void CSafeListEntry();
    public void ~CSafeListEntry();
    public void Initialize();
    public void * __vecDelDtor(unsigned int );
};

class XAUDIO::CAutoIrql : public XAUDIO::CIrql// Size=0x1 (Id=3827)
{
    public void CAutoIrql();
    public void ~CAutoIrql();
    public void * __vecDelDtor(unsigned int );
};

struct XAUDIO::_XMA_CONTEXT_DATA// Size=0x40 (Id=3828)
{
    struct // Size=0x14 (Id=0)
    {
        unsigned long SizeRead0:12;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xc
        unsigned long NumLoops:8;// Offset=0x0 Size=0x4 BitOffset=0xc BitSize=0x8
        unsigned long ValidBuffer:2;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0x2
        unsigned long SizeWrite:5;// Offset=0x0 Size=0x4 BitOffset=0x16 BitSize=0x5
        unsigned long OffsetWrite:5;// Offset=0x0 Size=0x4 BitOffset=0x1b BitSize=0x5
        unsigned long SizeRead1:12;// Offset=0x4 Size=0x4 BitOffset=0x0 BitSize=0xc
        unsigned long LoopSubframeEnd:2;// Offset=0x4 Size=0x4 BitOffset=0xc BitSize=0x2
        unsigned long Reserved1:3;// Offset=0x4 Size=0x4 BitOffset=0xe BitSize=0x3
        unsigned long LoopSubframeSkip:3;// Offset=0x4 Size=0x4 BitOffset=0x11 BitSize=0x3
        unsigned long NumSubframeToDecode:4;// Offset=0x4 Size=0x4 BitOffset=0x14 BitSize=0x4
        unsigned long NumSubframesToSkip:3;// Offset=0x4 Size=0x4 BitOffset=0x18 BitSize=0x3
        unsigned long SampleRate:2;// Offset=0x4 Size=0x4 BitOffset=0x1b BitSize=0x2
        unsigned long NumChannels:1;// Offset=0x4 Size=0x4 BitOffset=0x1d BitSize=0x1
        unsigned long Reserved2:1;// Offset=0x4 Size=0x4 BitOffset=0x1e BitSize=0x1
        unsigned long ValidWrite:1;// Offset=0x4 Size=0x4 BitOffset=0x1f BitSize=0x1
        unsigned long OffsetRead:26;// Offset=0x8 Size=0x4 BitOffset=0x0 BitSize=0x1a
        unsigned long ErrorStatus:5;// Offset=0x8 Size=0x4 BitOffset=0x1a BitSize=0x5
        unsigned long ErrorSet:1;// Offset=0x8 Size=0x4 BitOffset=0x1f BitSize=0x1
        unsigned long LoopStartOffset:26;// Offset=0xc Size=0x4 BitOffset=0x0 BitSize=0x1a
        unsigned long ParserErrorStatus:5;// Offset=0xc Size=0x4 BitOffset=0x1a BitSize=0x5
        unsigned long ParserErrorSet:1;// Offset=0xc Size=0x4 BitOffset=0x1f BitSize=0x1
        unsigned long LoopEndOffset:26;// Offset=0x10 Size=0x4 BitOffset=0x0 BitSize=0x1a
        unsigned long PacketMetaData:5;// Offset=0x10 Size=0x4 BitOffset=0x1a BitSize=0x5
        unsigned long CurrentBuffer:1;// Offset=0x10 Size=0x4 BitOffset=0x1f BitSize=0x1
    };
    unsigned long PtrRead0;// Offset=0x14 Size=0x4
    unsigned long PtrRead1;// Offset=0x18 Size=0x4
    unsigned long PtrWrite;// Offset=0x1c Size=0x4
    unsigned long PtrOverlapAdd;// Offset=0x20 Size=0x4
    struct // Size=0x4 (Id=0)
    {
        unsigned long WriteBufferOffsetRead:5;// Offset=0x24 Size=0x4 BitOffset=0x0 BitSize=0x5
        unsigned long Reserved3:25;// Offset=0x24 Size=0x4 BitOffset=0x5 BitSize=0x19
        unsigned long StopWhenDone:1;// Offset=0x24 Size=0x4 BitOffset=0x1e BitSize=0x1
        unsigned long InterruptWhenDone:1;// Offset=0x24 Size=0x4 BitOffset=0x1f BitSize=0x1
    };
    unsigned long Reserved4[2];// Offset=0x28 Size=0x8
    union // Size=0x34 (Id=0)
    {
        int FirstChunkUpdated;// Offset=0x30 Size=0x4
        int SizeRead0Updated;// Offset=0x30 Size=0x4
        int NumLoopsUpdated;// Offset=0x30 Size=0x4
        int ValidBufferUpdated;// Offset=0x30 Size=0x4
        int SizeWriteUpdated;// Offset=0x30 Size=0x4
        int OffsetWriteUpdated;// Offset=0x30 Size=0x4
        int SizeRead1Updated;// Offset=0x30 Size=0x4
        int LoopSubframeEndUpdated;// Offset=0x30 Size=0x4
        int LoopSubframeSkipUpdated;// Offset=0x30 Size=0x4
        int NumSubframeToDecodeUpdated;// Offset=0x30 Size=0x4
        int NumSubframesToSkipUpdated;// Offset=0x30 Size=0x4
        int SampleRateUpdated;// Offset=0x30 Size=0x4
        int NumChannelsUpdated;// Offset=0x30 Size=0x4
        int ValidWriteUpdated;// Offset=0x30 Size=0x4
        int OffsetReadUpdated;// Offset=0x30 Size=0x4
        int ErrorStatusUpdated;// Offset=0x30 Size=0x4
        int ErrorSetUpdated;// Offset=0x30 Size=0x4
        int LoopStartOffsetUpdated;// Offset=0x30 Size=0x4
        int ParserErrorStatusUpdated;// Offset=0x30 Size=0x4
        int ParserErrorSetUpdated;// Offset=0x30 Size=0x4
    };
    union // Size=0x38 (Id=0)
    {
        int SecondChunkUpdated;// Offset=0x34 Size=0x4
        int LoopEndOffsetUpdated;// Offset=0x34 Size=0x4
        int PacketMetaDataUpdated;// Offset=0x34 Size=0x4
        int CurrentBufferUpdated;// Offset=0x34 Size=0x4
        int PtrRead0Updated;// Offset=0x34 Size=0x4
        int PtrRead1Updated;// Offset=0x34 Size=0x4
        int PtrWriteUpdated;// Offset=0x34 Size=0x4
    };
    union // Size=0x3c (Id=0)
    {
        int ThirdChunkUpdated;// Offset=0x38 Size=0x4
        int PtrOverlapAddUpdated;// Offset=0x38 Size=0x4
        int WriteBufferOffsetReadUpdated;// Offset=0x38 Size=0x4
        int StopWhenDoneUpdated;// Offset=0x38 Size=0x4
        int InterruptWhenDoneUpdated;// Offset=0x38 Size=0x4
    };
    unsigned long Reserved5[1];// Offset=0x3c Size=0x4
};

enum XAUDIO::CXMASourceEffect::_unnamed_3829
{
    SUBMITTING_UNINITIALIZED=0,
    SUBMITTING_PACKETS=1,
    SUBMITTING_SOURCEBUFFERS=2
};

class XAUDIO::CXMASourceEffect : public IXAudioSourceEffect, public XAUDIO::CSourceEffect// Size=0x138 (Id=3830)
{
    public void * operator new(unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new(unsigned int );
    public void * operator new[](unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new[](unsigned int );
    public void operator delete(void * ,struct IXAudioBatchAllocator * );
    public void operator delete(void * );
    public void operator delete[](void * ,struct IXAudioBatchAllocator * );
    public void operator delete[](void * );
    union // Size=0xdfc (Id=0)
    {
        class CResamplerBatch : public XAUDIO::CResampler// Size=0x58 (Id=42046)
        {
            public void * operator new(unsigned int ,struct IXAudioBatchAllocator * );
            public void * operator new(unsigned int );
            public void * operator new[](unsigned int ,struct IXAudioBatchAllocator * );
            public void * operator new[](unsigned int );
            public void operator delete(void * ,struct IXAudioBatchAllocator * );
            public void operator delete(void * );
            public void operator delete[](void * ,struct IXAudioBatchAllocator * );
            public void operator delete[](void * );
            public void CResamplerBatch();
        };
        unsigned char __align0[96];// Offset=0x58 Size=0x60
        struct XAUDIO::XMAPLAYBACK * m_pPlayback;// Offset=0xb8 Size=0x4
        struct XAUDIO::XMA_PLAYBACK_LOOP m_loopInfo;// Offset=0xbc Size=0xc
        class XAUDIO::CXMASourceEffect::CResamplerBatch * m_pResamplers;// Offset=0xc8 Size=0x4
        unsigned long m_dwOutputBufferScale;// Offset=0xcc Size=0x4
        struct XAUDIOSOURCEFORMAT m_InitialFormat;// Offset=0xd0 Size=0x38
        unsigned char m_nSourceFlags;// Offset=0x108 Size=0x1
        unsigned char __align1[3];// Offset=0x109 Size=0x3
        unsigned long m_dwNextLoopEnd;// Offset=0x10c Size=0x4
        unsigned long m_dwLoopCallbackCount;// Offset=0x110 Size=0x4
        unsigned short m_maxSamplesRequiredPerFrame[6];// Offset=0x114 Size=0xc
        int m_fSetLoopCount;// Offset=0x120 Size=0x4
        unsigned char m_packetsOrSourceBuffers;// Offset=0x124 Size=0x1
        enum _unnamed_42075
        {
            SUBMITTING_UNINITIALIZED=0,
            SUBMITTING_PACKETS=1,
            SUBMITTING_SOURCEBUFFERS=2
        };
        unsigned char __align2[3];// Offset=0x125 Size=0x3
        class XAUDIO::CSpinLock m_lock;// Offset=0x128 Size=0x10
        void CXMASourceEffect(class XAUDIO::CXMASourceEffect & );
        void CXMASourceEffect(struct XAUDIOSOURCEFXINIT * ,struct IXAudioBatchAllocator * );// Offset=0x0 Size=0x1d8
        void ~CXMASourceEffect();// Offset=0x0 Size=0xc4
        unsigned int GetObjectSize(struct XAUDIOSOURCEFXINIT * );
        unsigned int GetObjectAdditionalSize(struct XAUDIOSOURCEFXINIT * );
        unsigned long AddRef();// Offset=0x0 Size=0x18
        unsigned long Release();// Offset=0x0 Size=0x48
        HRESULT GetInfo(struct XAUDIOFXINFO * );// Offset=0x0 Size=0x18
        HRESULT GetParam(unsigned char ,unsigned char ,union XAUDIOFXPARAM * );// Offset=0x0 Size=0x8
        HRESULT SetParam(unsigned char ,unsigned char ,union XAUDIOFXPARAM * );// Offset=0x0 Size=0x8
        HRESULT GetContext(void ** );// Offset=0x0 Size=0x10
        HRESULT Process(struct IXAudioFrameBuffer * ,struct IXAudioFrameBuffer * );// Offset=0x0 Size=0xb98
        HRESULT SubmitPacket(struct XAUDIOPACKET * ,unsigned char );// Offset=0x0 Size=0x90
        HRESULT SubmitSourceBuffer(struct XAUDIOSOURCEBUFFER * ,unsigned char );// Offset=0x0 Size=0xb8
        HRESULT FlushPackets();// Offset=0x0 Size=0x100
        HRESULT FlushSourceBuffers();// Offset=0x0 Size=0x4
        HRESULT GetPacketPosition(union XAUDIOPACKETPOSITION * );// Offset=0x0 Size=0x188
        HRESULT SetPacketPosition(union XAUDIOPACKETPOSITION * );// Offset=0x0 Size=0xd8
        HRESULT GetPacketLoopCount(unsigned long * );// Offset=0x0 Size=0x54
        HRESULT SetPacketLoopCount(unsigned long );// Offset=0x0 Size=0x78
        HRESULT GetPacketContext(void ** );// Offset=0x0 Size=0x54
        HRESULT GetStreamPosition(unsigned long * );// Offset=0x0 Size=0x10
        HRESULT GetState(unsigned char * );// Offset=0x0 Size=0x10
        HRESULT Start();// Offset=0x0 Size=0x1b4
        HRESULT Stop(unsigned char );// Offset=0x0 Size=0x1dc
        HRESULT Discontinuity();// Offset=0x0 Size=0xf0
        HRESULT GetVolume(float * );// Offset=0x0 Size=0x10
        HRESULT SetVolume(float );// Offset=0x0 Size=0xf8
        HRESULT GetPitch(float * );// Offset=0x0 Size=0x4c
        HRESULT SetPitch(float );// Offset=0x0 Size=0x15c
        HRESULT GetFrequencyScale(float * );// Offset=0x0 Size=0x10
        HRESULT SetFrequencyScale(float );// Offset=0x0 Size=0x144
        HRESULT GetFormat(struct XAUDIOSOURCEFORMAT * ,unsigned char * );// Offset=0x0 Size=0x64
        HRESULT SetFormat(struct XAUDIOSOURCEFORMAT * ,unsigned char );// Offset=0x0 Size=0x44
        void QueryInterface(struct IXAudioSourceEffect ** );// Offset=0x0 Size=0x8
        void QueryInterface(struct IXAudioEffect ** );// Offset=0x0 Size=0xc
        int IsValidSampleType(unsigned int );
        int IsValidFormat(struct XAUDIOSOURCEFORMAT * );
        HRESULT Initialize();// Offset=0x0 Size=0x1cc
        void SetDataAlignment();
        unsigned long GetOutputChannelCount();
        HRESULT PreProcess(struct IXAudioFrameBuffer * );
        void PostProcess(int ,int ,int );
        int SynchronizePackets();// Offset=0x0 Size=0xdfc
        void SynchronizeSourceBuffers();// Offset=0x0 Size=0x42c
        struct XAUDIO::XAUDIOPACKETCTX * CompletePacket(struct XAUDIO::XAUDIOPACKETCTX * ,HRESULT );// Offset=0x0 Size=0x100
        void * __vecDelDtor(unsigned int );
    };
};

class XAUDIO::CXMASourceEffect : public IXAudioSourceEffect, public XAUDIO::CSourceEffect// Size=0x138 (Id=3831)
{
    public void * operator new(unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new(unsigned int );
    public void * operator new[](unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new[](unsigned int );
    public void operator delete(void * ,struct IXAudioBatchAllocator * );
    public void operator delete(void * );
    public void operator delete[](void * ,struct IXAudioBatchAllocator * );
    public void operator delete[](void * );
    union // Size=0xdfc (Id=0)
    {
        class CResamplerBatch : public XAUDIO::CResampler// Size=0x58 (Id=42046)
        {
            public void * operator new(unsigned int ,struct IXAudioBatchAllocator * );
            public void * operator new(unsigned int );
            public void * operator new[](unsigned int ,struct IXAudioBatchAllocator * );
            public void * operator new[](unsigned int );
            public void operator delete(void * ,struct IXAudioBatchAllocator * );
            public void operator delete(void * );
            public void operator delete[](void * ,struct IXAudioBatchAllocator * );
            public void operator delete[](void * );
            public void CResamplerBatch();
        };
        unsigned char __align0[96];// Offset=0x58 Size=0x60
        struct XAUDIO::XMAPLAYBACK * m_pPlayback;// Offset=0xb8 Size=0x4
        struct XAUDIO::XMA_PLAYBACK_LOOP m_loopInfo;// Offset=0xbc Size=0xc
        class XAUDIO::CXMASourceEffect::CResamplerBatch * m_pResamplers;// Offset=0xc8 Size=0x4
        unsigned long m_dwOutputBufferScale;// Offset=0xcc Size=0x4
        struct XAUDIOSOURCEFORMAT m_InitialFormat;// Offset=0xd0 Size=0x38
        unsigned char m_nSourceFlags;// Offset=0x108 Size=0x1
        unsigned char __align1[3];// Offset=0x109 Size=0x3
        unsigned long m_dwNextLoopEnd;// Offset=0x10c Size=0x4
        unsigned long m_dwLoopCallbackCount;// Offset=0x110 Size=0x4
        unsigned short m_maxSamplesRequiredPerFrame[6];// Offset=0x114 Size=0xc
        int m_fSetLoopCount;// Offset=0x120 Size=0x4
        unsigned char m_packetsOrSourceBuffers;// Offset=0x124 Size=0x1
        enum _unnamed_42075
        {
            SUBMITTING_UNINITIALIZED=0,
            SUBMITTING_PACKETS=1,
            SUBMITTING_SOURCEBUFFERS=2
        };
        unsigned char __align2[3];// Offset=0x125 Size=0x3
        class XAUDIO::CSpinLock m_lock;// Offset=0x128 Size=0x10
        void CXMASourceEffect(class XAUDIO::CXMASourceEffect & );
        void CXMASourceEffect(struct XAUDIOSOURCEFXINIT * ,struct IXAudioBatchAllocator * );// Offset=0x0 Size=0x1d8
        void ~CXMASourceEffect();// Offset=0x0 Size=0xc4
        unsigned int GetObjectSize(struct XAUDIOSOURCEFXINIT * );
        unsigned int GetObjectAdditionalSize(struct XAUDIOSOURCEFXINIT * );
        unsigned long AddRef();// Offset=0x0 Size=0x18
        unsigned long Release();// Offset=0x0 Size=0x48
        HRESULT GetInfo(struct XAUDIOFXINFO * );// Offset=0x0 Size=0x18
        HRESULT GetParam(unsigned char ,unsigned char ,union XAUDIOFXPARAM * );// Offset=0x0 Size=0x8
        HRESULT SetParam(unsigned char ,unsigned char ,union XAUDIOFXPARAM * );// Offset=0x0 Size=0x8
        HRESULT GetContext(void ** );// Offset=0x0 Size=0x10
        HRESULT Process(struct IXAudioFrameBuffer * ,struct IXAudioFrameBuffer * );// Offset=0x0 Size=0xb98
        HRESULT SubmitPacket(struct XAUDIOPACKET * ,unsigned char );// Offset=0x0 Size=0x90
        HRESULT SubmitSourceBuffer(struct XAUDIOSOURCEBUFFER * ,unsigned char );// Offset=0x0 Size=0xb8
        HRESULT FlushPackets();// Offset=0x0 Size=0x100
        HRESULT FlushSourceBuffers();// Offset=0x0 Size=0x4
        HRESULT GetPacketPosition(union XAUDIOPACKETPOSITION * );// Offset=0x0 Size=0x188
        HRESULT SetPacketPosition(union XAUDIOPACKETPOSITION * );// Offset=0x0 Size=0xd8
        HRESULT GetPacketLoopCount(unsigned long * );// Offset=0x0 Size=0x54
        HRESULT SetPacketLoopCount(unsigned long );// Offset=0x0 Size=0x78
        HRESULT GetPacketContext(void ** );// Offset=0x0 Size=0x54
        HRESULT GetStreamPosition(unsigned long * );// Offset=0x0 Size=0x10
        HRESULT GetState(unsigned char * );// Offset=0x0 Size=0x10
        HRESULT Start();// Offset=0x0 Size=0x1b4
        HRESULT Stop(unsigned char );// Offset=0x0 Size=0x1dc
        HRESULT Discontinuity();// Offset=0x0 Size=0xf0
        HRESULT GetVolume(float * );// Offset=0x0 Size=0x10
        HRESULT SetVolume(float );// Offset=0x0 Size=0xf8
        HRESULT GetPitch(float * );// Offset=0x0 Size=0x4c
        HRESULT SetPitch(float );// Offset=0x0 Size=0x15c
        HRESULT GetFrequencyScale(float * );// Offset=0x0 Size=0x10
        HRESULT SetFrequencyScale(float );// Offset=0x0 Size=0x144
        HRESULT GetFormat(struct XAUDIOSOURCEFORMAT * ,unsigned char * );// Offset=0x0 Size=0x64
        HRESULT SetFormat(struct XAUDIOSOURCEFORMAT * ,unsigned char );// Offset=0x0 Size=0x44
        void QueryInterface(struct IXAudioSourceEffect ** );// Offset=0x0 Size=0x8
        void QueryInterface(struct IXAudioEffect ** );// Offset=0x0 Size=0xc
        int IsValidSampleType(unsigned int );
        int IsValidFormat(struct XAUDIOSOURCEFORMAT * );
        HRESULT Initialize();// Offset=0x0 Size=0x1cc
        void SetDataAlignment();
        unsigned long GetOutputChannelCount();
        HRESULT PreProcess(struct IXAudioFrameBuffer * );
        void PostProcess(int ,int ,int );
        int SynchronizePackets();// Offset=0x0 Size=0xdfc
        void SynchronizeSourceBuffers();// Offset=0x0 Size=0x42c
        struct XAUDIO::XAUDIOPACKETCTX * CompletePacket(struct XAUDIO::XAUDIOPACKETCTX * ,HRESULT );// Offset=0x0 Size=0x100
        void * __vecDelDtor(unsigned int );
    };
};

class XAUDIO::CXMASourceEffect::CResamplerBatch : public XAUDIO::CResampler// Size=0x58 (Id=3832)
{
    public void * operator new(unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new(unsigned int );
    public void * operator new[](unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new[](unsigned int );
    public void operator delete(void * ,struct IXAudioBatchAllocator * );
    public void operator delete(void * );
    public void operator delete[](void * ,struct IXAudioBatchAllocator * );
    public void operator delete[](void * );
    public void CResamplerBatch();
};

class XAUDIO::CWaveFile// Size=0x44 (Id=3833)
{
    protected class XAUDIO::CFileStream * m_pStream;// Offset=0x0 Size=0x4
    protected class XAUDIO::CRiffChunk m_ParentChunk;// Offset=0x4 Size=0x1c
    protected class XAUDIO::CRiffChunk m_DataChunk;// Offset=0x20 Size=0x1c
    protected unsigned long m_dwFileType;// Offset=0x3c Size=0x4
    protected struct tWAVEFORMATEX * m_pwfxFormat;// Offset=0x40 Size=0x4
    public void CWaveFile(class XAUDIO::CWaveFile & );
    public void CWaveFile();
    public void ~CWaveFile();
    public HRESULT Open(class XAUDIO::CFileStream * );
    public void Close();
    public HRESULT GetFormat(struct tWAVEFORMATEX ** );
    public HRESULT GetFormat(struct tWAVEFORMATEX * ,unsigned long ,unsigned long * );
    public HRESULT GetXMA2FormatSize(unsigned long * );
    public HRESULT GetXMA2Format(unsigned char * ,unsigned long );
    public HRESULT GetSeekTableSize(unsigned long * );
    public HRESULT GetSeekTable(unsigned long * ,unsigned long );
    public HRESULT ReadSample(unsigned long ,void * ,unsigned long ,unsigned long * );
    public void ConvertPCMToNative(unsigned long ,unsigned long ,void * ,unsigned long );
    public void ConvertWAVEPCMToNative(unsigned long ,void * ,unsigned long );
    public void ConvertAIFFPCMToNative(unsigned long ,void * ,unsigned long );
    public void _ConvertWAVEPCMToNative(short * ,unsigned long );
    public void _ConvertWAVEPCMToNative(unsigned char * ,unsigned long );
    public void _ConvertAIFFPCMToNative(short * ,unsigned long );
    public void _ConvertAIFFPCMToNative(unsigned char * ,unsigned long );
    public HRESULT GetFileType(unsigned long * );
    public HRESULT GetDataOffset(unsigned long * );
    public HRESULT GetDuration(unsigned long * );
    public HRESULT GetLoopRegion(unsigned long * ,unsigned long * );
    protected HRESULT GetWaveFormat(struct tWAVEFORMATEX * ,unsigned long ,unsigned long * );
    protected HRESULT GetAiffFormat(struct tWAVEFORMATEX * ,unsigned long ,unsigned long * );
    protected HRESULT GetWaveDLSLoopRegion(unsigned long * ,unsigned long * );
    protected HRESULT GetWaveMIDILoopRegion(unsigned long * ,unsigned long * );
    protected HRESULT GetAiffLoopRegion(unsigned long * ,unsigned long * );
    public class XAUDIO::CWaveFile & operator=(class XAUDIO::CWaveFile & );
    public void * __vecDelDtor(unsigned int );
};

class XAUDIO::CWaveFile// Size=0x44 (Id=3834)
{
    protected class XAUDIO::CFileStream * m_pStream;// Offset=0x0 Size=0x4
    protected class XAUDIO::CRiffChunk m_ParentChunk;// Offset=0x4 Size=0x1c
    protected class XAUDIO::CRiffChunk m_DataChunk;// Offset=0x20 Size=0x1c
    protected unsigned long m_dwFileType;// Offset=0x3c Size=0x4
    protected struct tWAVEFORMATEX * m_pwfxFormat;// Offset=0x40 Size=0x4
    public void CWaveFile(class XAUDIO::CWaveFile & );
    public void CWaveFile();
    public void ~CWaveFile();
    public HRESULT Open(class XAUDIO::CFileStream * );
    public void Close();
    public HRESULT GetFormat(struct tWAVEFORMATEX ** );
    public HRESULT GetFormat(struct tWAVEFORMATEX * ,unsigned long ,unsigned long * );
    public HRESULT GetXMA2FormatSize(unsigned long * );
    public HRESULT GetXMA2Format(unsigned char * ,unsigned long );
    public HRESULT GetSeekTableSize(unsigned long * );
    public HRESULT GetSeekTable(unsigned long * ,unsigned long );
    public HRESULT ReadSample(unsigned long ,void * ,unsigned long ,unsigned long * );
    public void ConvertPCMToNative(unsigned long ,unsigned long ,void * ,unsigned long );
    public void ConvertWAVEPCMToNative(unsigned long ,void * ,unsigned long );
    public void ConvertAIFFPCMToNative(unsigned long ,void * ,unsigned long );
    public void _ConvertWAVEPCMToNative(short * ,unsigned long );
    public void _ConvertWAVEPCMToNative(unsigned char * ,unsigned long );
    public void _ConvertAIFFPCMToNative(short * ,unsigned long );
    public void _ConvertAIFFPCMToNative(unsigned char * ,unsigned long );
    public HRESULT GetFileType(unsigned long * );
    public HRESULT GetDataOffset(unsigned long * );
    public HRESULT GetDuration(unsigned long * );
    public HRESULT GetLoopRegion(unsigned long * ,unsigned long * );
    protected HRESULT GetWaveFormat(struct tWAVEFORMATEX * ,unsigned long ,unsigned long * );
    protected HRESULT GetAiffFormat(struct tWAVEFORMATEX * ,unsigned long ,unsigned long * );
    protected HRESULT GetWaveDLSLoopRegion(unsigned long * ,unsigned long * );
    protected HRESULT GetWaveMIDILoopRegion(unsigned long * ,unsigned long * );
    protected HRESULT GetAiffLoopRegion(unsigned long * ,unsigned long * );
    public class XAUDIO::CWaveFile & operator=(class XAUDIO::CWaveFile & );
    public void * __vecDelDtor(unsigned int );
};

class XAUDIO::CPerfCounter// Size=0x8 (Id=3835)
{
    protected unsigned long long m_StartTick;// Offset=0x0 Size=0x8
    public void Start();
    public unsigned long long Stop();
    public unsigned long long QueryPerformanceCounter();
    public unsigned long long QueryPerformanceFrequency();
    public unsigned long long TicksToMicroseconds(unsigned long long ,unsigned long long );
    public unsigned long long MicrosecondsToTicks(unsigned long long ,unsigned long long );
};

class XAUDIO::CMemoryTracker// Size=0x1 (Id=3836)
{
};

struct XAUDIO::XAUDIOVOICEROUTECTX// Size=0xc (Id=3837)
{
    class XAUDIO::CVoice * pDestVoice;// Offset=0x0 Size=0x4
    struct XAUDIO::XAUDIOVOICEFXCTX RouterEffect;// Offset=0x4 Size=0x8
};

class XAUDIO::CStdFileStream : public XAUDIO::CFileStream// Size=0x8 (Id=3838)
{
    private unsigned char __align0[4];// Offset=0x0 Size=0x4
    protected void * m_hFile;// Offset=0x4 Size=0x4
    public void CStdFileStream(class XAUDIO::CStdFileStream & );
    public void CStdFileStream();
    public void ~CStdFileStream();
    public HRESULT Open(char * ,unsigned long ,unsigned long ,unsigned long ,unsigned long );
    public void Close();
    public int IsValid();
    public HRESULT Read(void * ,unsigned long ,unsigned long * ,struct _OVERLAPPED * ,int );
    public HRESULT Write(void * ,unsigned long ,unsigned long * ,struct _OVERLAPPED * );
    public HRESULT Seek(long ,unsigned long ,unsigned long * );
    public HRESULT SetEOF();
    public HRESULT GetLength(unsigned long * );
    public unsigned long GetFilePointer();
    public void * operator void *();
    public class XAUDIO::CStdFileStream & operator=(class XAUDIO::CStdFileStream & );
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class XAUDIO::CStdFileStream : public XAUDIO::CFileStream// Size=0x8 (Id=3839)
{
    private unsigned char __align0[4];// Offset=0x0 Size=0x4
    protected void * m_hFile;// Offset=0x4 Size=0x4
    public void CStdFileStream(class XAUDIO::CStdFileStream & );
    public void CStdFileStream();
    public void ~CStdFileStream();
    public HRESULT Open(char * ,unsigned long ,unsigned long ,unsigned long ,unsigned long );
    public void Close();
    public int IsValid();
    public HRESULT Read(void * ,unsigned long ,unsigned long * ,struct _OVERLAPPED * ,int );
    public HRESULT Write(void * ,unsigned long ,unsigned long * ,struct _OVERLAPPED * );
    public HRESULT Seek(long ,unsigned long ,unsigned long * );
    public HRESULT SetEOF();
    public HRESULT GetLength(unsigned long * );
    public unsigned long GetFilePointer();
    public void * operator void *();
    public class XAUDIO::CStdFileStream & operator=(class XAUDIO::CStdFileStream & );
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

struct IXMAContext// Size=0x0 (Id=3840)
{
};

struct XAUDIO::XMAPLAYBACKSTREAM// Size=0x60 (Id=3841)
{
    struct XAUDIO::_XMA_CONTEXT_DATA contextShadow;// Offset=0x0 Size=0x40
    struct IXMAContext * pHardwareContext;// Offset=0x40 Size=0x4
    void * pOutput;// Offset=0x44 Size=0x4
    void * pOverlapAdd;// Offset=0x48 Size=0x4
    unsigned long streamPosition;// Offset=0x4c Size=0x4
    unsigned short hardwareIndex;// Offset=0x50 Size=0x2
    unsigned short partialBytesRead;// Offset=0x52 Size=0x2
    void * pDataSubmitted[2];// Offset=0x54 Size=0x8
    unsigned char RESERVED[4];// Offset=0x5c Size=0x4
};

class XAUDIO::CEmbeddedList<XAUDIO::XAUDIOPACKETCTX> : protected _LIST_ENTRY// Size=0xc (Id=3842)
{
    union // Size=0xc (Id=0)
    {
        unsigned char __align0[8];// Offset=0x0 Size=0x8
        const unsigned int m_nEntryOffset;// Offset=0x8 Size=0x4
        void CEmbeddedList<XAUDIO::XAUDIOPACKETCTX>(struct _LIST_ENTRY * );
        void ~CEmbeddedList<XAUDIO::XAUDIOPACKETCTX>();
        void CreateHead(struct XAUDIO::XAUDIOPACKETCTX * );
        void CreateTail(struct XAUDIO::XAUDIOPACKETCTX * );
        void CreateAfter(struct XAUDIO::XAUDIOPACKETCTX * ,struct XAUDIO::XAUDIOPACKETCTX * );
        void CreateBefore(struct XAUDIO::XAUDIOPACKETCTX * ,struct XAUDIO::XAUDIOPACKETCTX * );
        void Remove(struct XAUDIO::XAUDIOPACKETCTX * );
        void Reset();
        struct XAUDIO::XAUDIOPACKETCTX * GetNextEntry(struct XAUDIO::XAUDIOPACKETCTX * ,int );// Offset=0x0 Size=0x38
    };
    public struct XAUDIO::XAUDIOPACKETCTX * PopNextEntry(struct XAUDIO::XAUDIOPACKETCTX * ,int );
    public int EntryInList(struct XAUDIO::XAUDIOPACKETCTX * );
    private struct XAUDIO::XAUDIOPACKETCTX * ConvertEntry(struct _LIST_ENTRY * );
    private struct _LIST_ENTRY * ConvertEntry(struct XAUDIO::XAUDIOPACKETCTX * );
    public void * __vecDelDtor(unsigned int );
};

class XAUDIO::CMasterVoiceList : public XAUDIO::CEmbeddedList<XAUDIO::CVoice>// Size=0xc (Id=3843)
{
    public void * operator new(unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new(unsigned int );
    public void * operator new[](unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new[](unsigned int );
    public void operator delete(void * ,struct IXAudioBatchAllocator * );
    public void operator delete(void * );
    public void operator delete[](void * ,struct IXAudioBatchAllocator * );
    public void operator delete[](void * );
    public void CMasterVoiceList();
    public void ~CMasterVoiceList();// Offset=0x0 Size=0x74
    public void * __vecDelDtor(unsigned int );
};

class XAUDIO::CRouterEffect : public IXAudioRouterEffect, public XAUDIO::CEffect// Size=0x1c (Id=3844)
{
    public void * operator new(unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new(unsigned int );
    public void * operator new[](unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new[](unsigned int );
    public void operator delete(void * ,struct IXAudioBatchAllocator * );
    public void operator delete(void * );
    public void operator delete[](void * ,struct IXAudioBatchAllocator * );
    public void operator delete[](void * );
    union // Size=0x354 (Id=0)
    {
        unsigned char __align0[16];// Offset=0x0 Size=0x10
        struct XAUDIO::XAUDIOCHANNELMAPEX m_ChannelMap;// Offset=0x10 Size=0x8
        unsigned char m_MaxChannelMapEntryCount;// Offset=0x18 Size=0x1
        unsigned char m_OutputChannelCount;// Offset=0x19 Size=0x1
        unsigned char m_Mode;// Offset=0x1a Size=0x1
        void CRouterEffect(class XAUDIO::CRouterEffect & );
        void CRouterEffect(struct XAUDIOROUTERFXINIT * ,struct IXAudioBatchAllocator * );
        void ~CRouterEffect();
        unsigned int GetObjectSize(struct XAUDIOROUTERFXINIT * );
        unsigned int GetObjectAdditionalSize(struct XAUDIOROUTERFXINIT * );
        HRESULT Initialize(struct XAUDIOROUTERFXINIT * ,struct IXAudioBatchAllocator * );// Offset=0x0 Size=0xc8
        unsigned long AddRef();// Offset=0x0 Size=0x18
        unsigned long Release();// Offset=0x0 Size=0x48
        HRESULT GetInfo(struct XAUDIOFXINFO * );// Offset=0x0 Size=0x18
        HRESULT GetParam(unsigned char ,unsigned char ,union XAUDIOFXPARAM * );// Offset=0x0 Size=0x100
        HRESULT SetParam(unsigned char ,unsigned char ,union XAUDIOFXPARAM * );// Offset=0x0 Size=0x8c
        HRESULT GetContext(void ** );// Offset=0x0 Size=0x10
        HRESULT Process(struct IXAudioFrameBuffer * ,struct IXAudioFrameBuffer * );// Offset=0x0 Size=0x354
        HRESULT GetMode(unsigned char * );// Offset=0x0 Size=0x10
        HRESULT SetMode(unsigned char );// Offset=0x0 Size=0xc
        HRESULT GetChannelMap(struct XAUDIOCHANNELMAP * ,unsigned long ,unsigned long * );// Offset=0x0 Size=0x158
        HRESULT SetChannelMap(struct XAUDIOCHANNELMAP * );// Offset=0x0 Size=0x264
        HRESULT GetChannelVolume(struct XAUDIOCHANNELVOLUME * );// Offset=0x0 Size=0x130
        HRESULT SetChannelVolume(struct XAUDIOCHANNELVOLUME * ,bool );// Offset=0x0 Size=0x1dc
        HRESULT SetChannelVolume(struct XAUDIOCHANNELVOLUME * );// Offset=0x0 Size=0x14
        void QueryInterface(struct IXAudioRouterEffect ** );// Offset=0x0 Size=0x8
        void QueryInterface(struct IXAudioEffect ** );// Offset=0x0 Size=0xc
        unsigned char GetMaxChannelMapEntryCount(unsigned char ,struct XAUDIOCHANNELMAP * );
        class XAUDIO::CRouterEffect & operator=(class XAUDIO::CRouterEffect & );
        void * __vecDelDtor(unsigned int );
    };
};

class XAUDIO::CRouterEffect : public IXAudioRouterEffect, public XAUDIO::CEffect// Size=0x1c (Id=3845)
{
    public void * operator new(unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new(unsigned int );
    public void * operator new[](unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new[](unsigned int );
    public void operator delete(void * ,struct IXAudioBatchAllocator * );
    public void operator delete(void * );
    public void operator delete[](void * ,struct IXAudioBatchAllocator * );
    public void operator delete[](void * );
    union // Size=0x354 (Id=0)
    {
        unsigned char __align0[16];// Offset=0x0 Size=0x10
        struct XAUDIO::XAUDIOCHANNELMAPEX m_ChannelMap;// Offset=0x10 Size=0x8
        unsigned char m_MaxChannelMapEntryCount;// Offset=0x18 Size=0x1
        unsigned char m_OutputChannelCount;// Offset=0x19 Size=0x1
        unsigned char m_Mode;// Offset=0x1a Size=0x1
        void CRouterEffect(class XAUDIO::CRouterEffect & );
        void CRouterEffect(struct XAUDIOROUTERFXINIT * ,struct IXAudioBatchAllocator * );
        void ~CRouterEffect();
        unsigned int GetObjectSize(struct XAUDIOROUTERFXINIT * );
        unsigned int GetObjectAdditionalSize(struct XAUDIOROUTERFXINIT * );
        HRESULT Initialize(struct XAUDIOROUTERFXINIT * ,struct IXAudioBatchAllocator * );// Offset=0x0 Size=0xc8
        unsigned long AddRef();// Offset=0x0 Size=0x18
        unsigned long Release();// Offset=0x0 Size=0x48
        HRESULT GetInfo(struct XAUDIOFXINFO * );// Offset=0x0 Size=0x18
        HRESULT GetParam(unsigned char ,unsigned char ,union XAUDIOFXPARAM * );// Offset=0x0 Size=0x100
        HRESULT SetParam(unsigned char ,unsigned char ,union XAUDIOFXPARAM * );// Offset=0x0 Size=0x8c
        HRESULT GetContext(void ** );// Offset=0x0 Size=0x10
        HRESULT Process(struct IXAudioFrameBuffer * ,struct IXAudioFrameBuffer * );// Offset=0x0 Size=0x354
        HRESULT GetMode(unsigned char * );// Offset=0x0 Size=0x10
        HRESULT SetMode(unsigned char );// Offset=0x0 Size=0xc
        HRESULT GetChannelMap(struct XAUDIOCHANNELMAP * ,unsigned long ,unsigned long * );// Offset=0x0 Size=0x158
        HRESULT SetChannelMap(struct XAUDIOCHANNELMAP * );// Offset=0x0 Size=0x264
        HRESULT GetChannelVolume(struct XAUDIOCHANNELVOLUME * );// Offset=0x0 Size=0x130
        HRESULT SetChannelVolume(struct XAUDIOCHANNELVOLUME * ,bool );// Offset=0x0 Size=0x1dc
        HRESULT SetChannelVolume(struct XAUDIOCHANNELVOLUME * );// Offset=0x0 Size=0x14
        void QueryInterface(struct IXAudioRouterEffect ** );// Offset=0x0 Size=0x8
        void QueryInterface(struct IXAudioEffect ** );// Offset=0x0 Size=0xc
        unsigned char GetMaxChannelMapEntryCount(unsigned char ,struct XAUDIOCHANNELMAP * );
        class XAUDIO::CRouterEffect & operator=(class XAUDIO::CRouterEffect & );
        void * __vecDelDtor(unsigned int );
    };
};

class XAUDIO::CAutoLock<XAUDIO::CSpinLock>// Size=0x4 (Id=3846)
{
    protected class XAUDIO::CSpinLock * m_pLock;// Offset=0x0 Size=0x4
    public void CAutoLock<XAUDIO::CSpinLock>(class XAUDIO::CSpinLock * );
    public void ~CAutoLock<XAUDIO::CSpinLock>();
    public void * __vecDelDtor(unsigned int );
};

struct XAUDIO::XAUDIOCHANNELMAPEX// Size=0x8 (Id=3847)
{
    unsigned char EntryCount;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    struct XAUDIO::XAUDIOCHANNELMAPENTRYEX * paEntries;// Offset=0x4 Size=0x4
};

class XAUDIO::CListEntry : public _LIST_ENTRY// Size=0x8 (Id=3848)
{
    public void CListEntry();
    public void ~CListEntry();
    public void Initialize();
    public void Remove();
    public void * __vecDelDtor(unsigned int );
};

class XAUDIO::CFastSpinLock// Size=0x8 (Id=3849)
{
    protected unsigned long m_SpinLock;// Offset=0x0 Size=0x4
    protected unsigned char m_PreviousIrql;// Offset=0x4 Size=0x1
    public void CFastSpinLock();
    public void Lock();
    public void Unlock();
};

class XAUDIO::CCriticalSection// Size=0x20 (Id=3850)
{
    private unsigned char __align0[4];// Offset=0x0 Size=0x4
    protected struct _RTL_CRITICAL_SECTION m_cs;// Offset=0x4 Size=0x1c
    public void CCriticalSection(class XAUDIO::CCriticalSection & );
    public void CCriticalSection();
    public void ~CCriticalSection();
    public void Enter();
    public int TryEnter();
    public void Leave();
    public void Lock();
    public int TryLock();
    public void Unlock();
    public struct _RTL_CRITICAL_SECTION & operator struct _RTL_CRITICAL_SECTION &();
    public struct _RTL_CRITICAL_SECTION * operator struct _RTL_CRITICAL_SECTION *();
    public class XAUDIO::CCriticalSection & operator=(class XAUDIO::CCriticalSection & );
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class XAUDIO::CCriticalSection// Size=0x20 (Id=3851)
{
    private unsigned char __align0[4];// Offset=0x0 Size=0x4
    protected struct _RTL_CRITICAL_SECTION m_cs;// Offset=0x4 Size=0x1c
    public void CCriticalSection(class XAUDIO::CCriticalSection & );
    public void CCriticalSection();
    public void ~CCriticalSection();
    public void Enter();
    public int TryEnter();
    public void Leave();
    public void Lock();
    public int TryLock();
    public void Unlock();
    public struct _RTL_CRITICAL_SECTION & operator struct _RTL_CRITICAL_SECTION &();
    public struct _RTL_CRITICAL_SECTION * operator struct _RTL_CRITICAL_SECTION *();
    public class XAUDIO::CCriticalSection & operator=(class XAUDIO::CCriticalSection & );
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

struct XAUDIO::XAUDIOSRCHDR// Size=0x4c (Id=3852)
{
    struct XAUDIO::XAUDIOSRCSOURCE Source;// Offset=0x0 Size=0x14
    struct XAUDIO::XAUDIOSRCDEST Dest;// Offset=0x14 Size=0x10
    struct XAUDIO::XAUDIOSRCVOLUME Volume;// Offset=0x24 Size=0x8
    struct XAUDIO::XAUDIOSRCPRIVATE Private;// Offset=0x2c Size=0x20
};

class XAUDIO::CMutex// Size=0x8 (Id=3853)
{
    private unsigned char __align0[4];// Offset=0x0 Size=0x4
    protected void * m_hMutex;// Offset=0x4 Size=0x4
    public void CMutex(class XAUDIO::CMutex & );
    public void CMutex(char * );
    public void ~CMutex();
    public int Lock(void ** ,unsigned long ,unsigned long * );
    public int Lock(unsigned long );
    public void Lock();
    public int TryLock();
    public void Unlock();
    public void * operator void *();
    public class XAUDIO::CMutex & operator=(class XAUDIO::CMutex & );
    public void __dflt_ctor_closure();
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class XAUDIO::CMutex// Size=0x8 (Id=3854)
{
    private unsigned char __align0[4];// Offset=0x0 Size=0x4
    protected void * m_hMutex;// Offset=0x4 Size=0x4
    public void CMutex(class XAUDIO::CMutex & );
    public void CMutex(char * );
    public void ~CMutex();
    public int Lock(void ** ,unsigned long ,unsigned long * );
    public int Lock(unsigned long );
    public void Lock();
    public int TryLock();
    public void Unlock();
    public void * operator void *();
    public class XAUDIO::CMutex & operator=(class XAUDIO::CMutex & );
    public void __dflt_ctor_closure();
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class XAUDIO::CStaticBatchAllocator : public XAUDIO::CBatchAllocator// Size=0x1c (Id=3855)
{
    private void * operator new(unsigned int ,void ** ,unsigned int * );
    private void * operator new(unsigned int );
    private void * operator new[](unsigned int );
    private void operator delete(void * );
    public void CStaticBatchAllocator(class XAUDIO::CStaticBatchAllocator & );
    public void CStaticBatchAllocator(unsigned long ,unsigned long );
    public void ~CStaticBatchAllocator();
    public HRESULT CreateObject(unsigned long ,unsigned long ,class XAUDIO::CBatchAllocator ** );
    public void AbsoluteRelease();// Offset=0x0 Size=0x5c
    public class XAUDIO::CStaticBatchAllocator & operator=(class XAUDIO::CStaticBatchAllocator & );
    public void * __vecDelDtor(unsigned int );
};

class XAUDIO::CStaticBatchAllocator : public XAUDIO::CBatchAllocator// Size=0x1c (Id=3856)
{
    private void * operator new(unsigned int ,void ** ,unsigned int * );
    private void * operator new(unsigned int );
    private void * operator new[](unsigned int );
    private void operator delete(void * );
    public void CStaticBatchAllocator(class XAUDIO::CStaticBatchAllocator & );
    public void CStaticBatchAllocator(unsigned long ,unsigned long );
    public void ~CStaticBatchAllocator();
    public HRESULT CreateObject(unsigned long ,unsigned long ,class XAUDIO::CBatchAllocator ** );
    public void AbsoluteRelease();// Offset=0x0 Size=0x5c
    public class XAUDIO::CStaticBatchAllocator & operator=(class XAUDIO::CStaticBatchAllocator & );
    public void * __vecDelDtor(unsigned int );
};

class XAUDIO::CDynamicBatchAllocator : public XAUDIO::CBatchAllocator// Size=0x1c (Id=3857)
{
    private void * operator new(unsigned int ,unsigned int );
    private void * operator new(unsigned int );
    private void * operator new[](unsigned int );
    private void operator delete(void * );
    private void operator delete[](void * );
    public void CDynamicBatchAllocator(class XAUDIO::CDynamicBatchAllocator & );
    public void CDynamicBatchAllocator();
    public void ~CDynamicBatchAllocator();
    public HRESULT CreateObject(class XAUDIO::CBatchAllocator ** );
    public class XAUDIO::CDynamicBatchAllocator & operator=(class XAUDIO::CDynamicBatchAllocator & );
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class XAUDIO::CDynamicBatchAllocator : public XAUDIO::CBatchAllocator// Size=0x1c (Id=3858)
{
    private void * operator new(unsigned int ,unsigned int );
    private void * operator new(unsigned int );
    private void * operator new[](unsigned int );
    private void operator delete(void * );
    private void operator delete[](void * );
    public void CDynamicBatchAllocator(class XAUDIO::CDynamicBatchAllocator & );
    public void CDynamicBatchAllocator();
    public void ~CDynamicBatchAllocator();
    public HRESULT CreateObject(class XAUDIO::CBatchAllocator ** );
    public class XAUDIO::CDynamicBatchAllocator & operator=(class XAUDIO::CDynamicBatchAllocator & );
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class XAUDIO::CRoutedVoice : public XAUDIO::CVoice// Size=0x4c (Id=3859)
{
    union // Size=0x184 (Id=0)
    {
        unsigned char __align0[68];// Offset=0x0 Size=0x44
        unsigned char m_MaxOutputVoiceCount;// Offset=0x44 Size=0x1
        unsigned char m_OutputVoiceCount;// Offset=0x45 Size=0x1
        unsigned char __align1[2];// Offset=0x46 Size=0x2
        struct XAUDIO::XAUDIOVOICEROUTECTX * m_paRoutingCtx;// Offset=0x48 Size=0x4
        void CRoutedVoice(class XAUDIO::CRoutedVoice & );
        void CRoutedVoice(struct IXAudioBatchAllocator * ,unsigned char );
        void ~CRoutedVoice();// Offset=0x0 Size=0x9c
        HRESULT SetVoiceFormat(union XAUDIOFORMAT * ,struct XAUDIOVOICEOUTPUT * );// Offset=0x0 Size=0x2c
        HRESULT SetVoiceOutput(struct XAUDIOVOICEOUTPUT * );// Offset=0x0 Size=0xc8
        HRESULT SetVoiceOutputVolume(struct XAUDIOVOICEOUTPUTVOLUME * );// Offset=0x0 Size=0x98
        HRESULT GetObjectAdditionalSize(struct XAUDIO::XAUDIOROUTEDVOICEINIT * ,unsigned long * );// Offset=0x0 Size=0xd0
        HRESULT Initialize(struct XAUDIO::XAUDIOROUTEDVOICEINIT * );// Offset=0x0 Size=0x114
        void ConvertInit(class XAUDIO::CRoutedVoice * ,struct XAUDIO::XAUDIOROUTEDVOICEINIT * ,struct XAUDIOROUTERFXINIT * );
        HRESULT ProcessEffects(struct IXAudioFrameBuffer ** );// Offset=0x0 Size=0x90
        HRESULT OnStartVoice();// Offset=0x0 Size=0x184
        HRESULT OnStopVoice();// Offset=0x0 Size=0x144
        HRESULT AttachOutputVoice(struct XAUDIOVOICEOUTPUTENTRY * ,struct XAUDIO::XAUDIOVOICEROUTECTX * );// Offset=0x0 Size=0xc0
        void DetachOutputVoices();// Offset=0x0 Size=0x60
        void * __vecDelDtor(unsigned int );
    };
};

class XAUDIO::CRoutedVoice : public XAUDIO::CVoice// Size=0x4c (Id=3860)
{
    union // Size=0x184 (Id=0)
    {
        unsigned char __align0[68];// Offset=0x0 Size=0x44
        unsigned char m_MaxOutputVoiceCount;// Offset=0x44 Size=0x1
        unsigned char m_OutputVoiceCount;// Offset=0x45 Size=0x1
        unsigned char __align1[2];// Offset=0x46 Size=0x2
        struct XAUDIO::XAUDIOVOICEROUTECTX * m_paRoutingCtx;// Offset=0x48 Size=0x4
        void CRoutedVoice(class XAUDIO::CRoutedVoice & );
        void CRoutedVoice(struct IXAudioBatchAllocator * ,unsigned char );
        void ~CRoutedVoice();// Offset=0x0 Size=0x9c
        HRESULT SetVoiceFormat(union XAUDIOFORMAT * ,struct XAUDIOVOICEOUTPUT * );// Offset=0x0 Size=0x2c
        HRESULT SetVoiceOutput(struct XAUDIOVOICEOUTPUT * );// Offset=0x0 Size=0xc8
        HRESULT SetVoiceOutputVolume(struct XAUDIOVOICEOUTPUTVOLUME * );// Offset=0x0 Size=0x98
        HRESULT GetObjectAdditionalSize(struct XAUDIO::XAUDIOROUTEDVOICEINIT * ,unsigned long * );// Offset=0x0 Size=0xd0
        HRESULT Initialize(struct XAUDIO::XAUDIOROUTEDVOICEINIT * );// Offset=0x0 Size=0x114
        void ConvertInit(class XAUDIO::CRoutedVoice * ,struct XAUDIO::XAUDIOROUTEDVOICEINIT * ,struct XAUDIOROUTERFXINIT * );
        HRESULT ProcessEffects(struct IXAudioFrameBuffer ** );// Offset=0x0 Size=0x90
        HRESULT OnStartVoice();// Offset=0x0 Size=0x184
        HRESULT OnStopVoice();// Offset=0x0 Size=0x144
        HRESULT AttachOutputVoice(struct XAUDIOVOICEOUTPUTENTRY * ,struct XAUDIO::XAUDIOVOICEROUTECTX * );// Offset=0x0 Size=0xc0
        void DetachOutputVoices();// Offset=0x0 Size=0x60
        void * __vecDelDtor(unsigned int );
    };
};

struct XAUDIO::XAUDIOVOICEINIT// Size=0x18 (Id=3861)
{
    union XAUDIOFORMAT Format;// Offset=0x0 Size=0x8
    struct XAUDIOVOICEFXCHAIN * pEffectChain;// Offset=0x8 Size=0x4
    struct IXAudioFrameBuffer * pFrameBuffer;// Offset=0xc Size=0x4
    void  ( * pfnProcessCallback)(struct XAUDIOVOICEPROCESSCALLBACK * );// Offset=0x10 Size=0x4
    void * pVoiceContext;// Offset=0x14 Size=0x4
};

struct XAUDIO::XAUDIOENGINECALLBACKCTX// Size=0x8 (Id=3862)
{
    void  ( * pfnCallback)(void * );// Offset=0x0 Size=0x4
    void * pContext;// Offset=0x4 Size=0x4
};

struct XAUDIO::XAUDIOFXMGRFXTABLE// Size=0x8 (Id=3863)
{
    unsigned int EffectCount;// Offset=0x0 Size=0x4
    struct XAUDIO::XAUDIOFXMGRFXTABLEENTRY * paEffects;// Offset=0x4 Size=0x4
};

struct XAUDIO::XAUDIOFXMGRFXTABLEENTRY// Size=0x8 (Id=3864)
{
    HRESULT  ( * pfnQueryEffectSize)(struct XAUDIOFXINIT * ,unsigned long * );// Offset=0x0 Size=0x4
    HRESULT  ( * pfnCreateEffect)(struct XAUDIOFXINIT * ,struct IXAudioBatchAllocator * ,struct IXAudioEffect ** );// Offset=0x4 Size=0x4
};

struct XAUDIO::XAUDIOVOICEFXCTX// Size=0x8 (Id=3865)
{
    struct IXAudioEffect * pEffect;// Offset=0x0 Size=0x4
    unsigned char EffectIndex;// Offset=0x4 Size=0x1
    unsigned char EffectState;// Offset=0x5 Size=0x1
    unsigned char DataFlow;// Offset=0x6 Size=0x1
};

class XAUDIO::CAutoFloatingPointState : public XAUDIO::CFloatingPointState// Size=0x1 (Id=3866)
{
    public void CAutoFloatingPointState();
    public void ~CAutoFloatingPointState();
    public void * __vecDelDtor(unsigned int );
};

class XAUDIO::CObjectRefCount// Size=0x8 (Id=3867)
{
    union // Size=0x54 (Id=0)
    {
        unsigned char __align0[4];// Offset=0x0 Size=0x4
        unsigned long m_nRefCount;// Offset=0x4 Size=0x4
        void CObjectRefCount(class XAUDIO::CObjectRefCount & );
        void CObjectRefCount(unsigned long );
        void ~CObjectRefCount();
        unsigned long AddRef();// Offset=0x0 Size=0x14
        unsigned long Release();// Offset=0x0 Size=0x54
        void AbsoluteRelease();// Offset=0x0 Size=0x20
        unsigned long GetRefCount();// Offset=0x0 Size=0x8
        class XAUDIO::CObjectRefCount & operator=(class XAUDIO::CObjectRefCount & );
        void __dflt_ctor_closure();
        void __local_vftable_ctor_closure();
        void * __vecDelDtor(unsigned int );
    };
};

class XAUDIO::CObjectRefCount// Size=0x8 (Id=3868)
{
    union // Size=0x54 (Id=0)
    {
        unsigned char __align0[4];// Offset=0x0 Size=0x4
        unsigned long m_nRefCount;// Offset=0x4 Size=0x4
        void CObjectRefCount(class XAUDIO::CObjectRefCount & );
        void CObjectRefCount(unsigned long );
        void ~CObjectRefCount();
        unsigned long AddRef();// Offset=0x0 Size=0x14
        unsigned long Release();// Offset=0x0 Size=0x54
        void AbsoluteRelease();// Offset=0x0 Size=0x20
        unsigned long GetRefCount();// Offset=0x0 Size=0x8
        class XAUDIO::CObjectRefCount & operator=(class XAUDIO::CObjectRefCount & );
        void __dflt_ctor_closure();
        void __local_vftable_ctor_closure();
        void * __vecDelDtor(unsigned int );
    };
};

enum XAUDIO::CFrameBuffer::_unnamed_3869
{
    BUFFER_ALIGNMENT=128
};

class XAUDIO::CFrameBuffer : public IXAudioFrameBuffer, public XAUDIO::CObjectRefCount// Size=0x24 (Id=3870)
{
    public void * operator new(unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new(unsigned int );
    public void * operator new[](unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new[](unsigned int );
    public void operator delete(void * ,struct IXAudioBatchAllocator * );
    public void operator delete(void * );
    public void operator delete[](void * ,struct IXAudioBatchAllocator * );
    public void operator delete[](void * );
    enum _unnamed_42968
    {
        BUFFER_ALIGNMENT=128
    };
    union // Size=0x124 (Id=0)
    {
        unsigned char __align0[8];// Offset=0x0 Size=0x8
        const unsigned char m_Type;// Offset=0x8 Size=0x1
        unsigned char __align1[3];// Offset=0x9 Size=0x3
        union XAUDIOFORMAT m_MaxFormat;// Offset=0xc Size=0x8
        union XAUDIOFORMAT m_Format;// Offset=0x14 Size=0x8
        float * m_pSampleBuffer;// Offset=0x1c Size=0x4
        void * m_pContext;// Offset=0x20 Size=0x4
        void CFrameBuffer(class XAUDIO::CFrameBuffer & );
        void CFrameBuffer(struct XAUDIOFRAMEBUFINIT * ,struct IXAudioBatchAllocator * );// Offset=0x0 Size=0x108
        void ~CFrameBuffer();
        unsigned long GetBufferSizeSamples(union XAUDIOFORMAT * );
        unsigned long GetBufferSizeBytes(union XAUDIOFORMAT * );
        unsigned long GetAlignedBufferSizeBytes(union XAUDIOFORMAT * );
        unsigned long GetObjectSize(struct XAUDIOFRAMEBUFINIT * );
        unsigned long GetObjectAdditionalSize(struct XAUDIOFRAMEBUFINIT * );
        unsigned long AddRef();// Offset=0x0 Size=0x14
        unsigned long Release();// Offset=0x0 Size=0x54
        HRESULT GetMaxFormat(union XAUDIOFORMAT * );
        HRESULT GetProcessingData(struct XAUDIOFRAMEBUFDATA * );
        HRESULT GetContext(void ** );
        HRESULT Prepare(union XAUDIOFORMAT * ,unsigned char );// Offset=0x0 Size=0x124
        HRESULT Unprepare();
        HRESULT SetExternalBuffer(union XAUDIOFORMAT * ,float * );
        void QueryInterface(struct IXAudioFrameBuffer ** );// Offset=0x0 Size=0x18
        int IsValidFormat(union XAUDIOFORMAT * );
        void SetSampleBuffer(union XAUDIOFORMAT * ,float * );
        void * __vecDelDtor(unsigned int );
    };
};

class XAUDIO::CFrameBuffer : public IXAudioFrameBuffer, public XAUDIO::CObjectRefCount// Size=0x24 (Id=3871)
{
    public void * operator new(unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new(unsigned int );
    public void * operator new[](unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new[](unsigned int );
    public void operator delete(void * ,struct IXAudioBatchAllocator * );
    public void operator delete(void * );
    public void operator delete[](void * ,struct IXAudioBatchAllocator * );
    public void operator delete[](void * );
    enum _unnamed_42968
    {
        BUFFER_ALIGNMENT=128
    };
    union // Size=0x124 (Id=0)
    {
        unsigned char __align0[8];// Offset=0x0 Size=0x8
        const unsigned char m_Type;// Offset=0x8 Size=0x1
        unsigned char __align1[3];// Offset=0x9 Size=0x3
        union XAUDIOFORMAT m_MaxFormat;// Offset=0xc Size=0x8
        union XAUDIOFORMAT m_Format;// Offset=0x14 Size=0x8
        float * m_pSampleBuffer;// Offset=0x1c Size=0x4
        void * m_pContext;// Offset=0x20 Size=0x4
        void CFrameBuffer(class XAUDIO::CFrameBuffer & );
        void CFrameBuffer(struct XAUDIOFRAMEBUFINIT * ,struct IXAudioBatchAllocator * );// Offset=0x0 Size=0x108
        void ~CFrameBuffer();
        unsigned long GetBufferSizeSamples(union XAUDIOFORMAT * );
        unsigned long GetBufferSizeBytes(union XAUDIOFORMAT * );
        unsigned long GetAlignedBufferSizeBytes(union XAUDIOFORMAT * );
        unsigned long GetObjectSize(struct XAUDIOFRAMEBUFINIT * );
        unsigned long GetObjectAdditionalSize(struct XAUDIOFRAMEBUFINIT * );
        unsigned long AddRef();// Offset=0x0 Size=0x14
        unsigned long Release();// Offset=0x0 Size=0x54
        HRESULT GetMaxFormat(union XAUDIOFORMAT * );
        HRESULT GetProcessingData(struct XAUDIOFRAMEBUFDATA * );
        HRESULT GetContext(void ** );
        HRESULT Prepare(union XAUDIOFORMAT * ,unsigned char );// Offset=0x0 Size=0x124
        HRESULT Unprepare();
        HRESULT SetExternalBuffer(union XAUDIOFORMAT * ,float * );
        void QueryInterface(struct IXAudioFrameBuffer ** );// Offset=0x0 Size=0x18
        int IsValidFormat(union XAUDIOFORMAT * );
        void SetSampleBuffer(union XAUDIOFORMAT * ,float * );
        void * __vecDelDtor(unsigned int );
    };
};

class XAUDIO::CFileStream// Size=0x4 (Id=3872)
{
    public HRESULT Open(char * ,unsigned long ,unsigned long ,unsigned long ,unsigned long );
    public void Close();
    public int IsValid();
    public HRESULT Read(void * ,unsigned long ,unsigned long * ,struct _OVERLAPPED * ,int );
    public HRESULT Write(void * ,unsigned long ,unsigned long * ,struct _OVERLAPPED * );
    public HRESULT Seek(long ,unsigned long ,unsigned long * );
    public HRESULT SetEOF();
    public HRESULT GetLength(unsigned long * );
    public void CFileStream(class XAUDIO::CFileStream & );
    public void CFileStream();
    public class XAUDIO::CFileStream & operator=(class XAUDIO::CFileStream & );
};

class XAUDIO::CFileStream// Size=0x4 (Id=3873)
{
    public HRESULT Open(char * ,unsigned long ,unsigned long ,unsigned long ,unsigned long );
    public void Close();
    public int IsValid();
    public HRESULT Read(void * ,unsigned long ,unsigned long * ,struct _OVERLAPPED * ,int );
    public HRESULT Write(void * ,unsigned long ,unsigned long * ,struct _OVERLAPPED * );
    public HRESULT Seek(long ,unsigned long ,unsigned long * );
    public HRESULT SetEOF();
    public HRESULT GetLength(unsigned long * );
    public void CFileStream(class XAUDIO::CFileStream & );
    public void CFileStream();
    public class XAUDIO::CFileStream & operator=(class XAUDIO::CFileStream & );
};

class XAUDIO::CBatchAllocator : public IXAudioBatchAllocator, public XAUDIO::CObjectRefCount// Size=0x1c (Id=3874)
{
    union // Size=0x68 (Id=0)
    {
        unsigned char __align0[12];// Offset=0x0 Size=0xc
        unsigned long m_AllocAttributes;// Offset=0xc Size=0x4
        unsigned long m_BufferSize;// Offset=0x10 Size=0x4
        unsigned long m_AllocatedSize;// Offset=0x14 Size=0x4
        unsigned char * m_pBuffer;// Offset=0x18 Size=0x4
        void CBatchAllocator(class XAUDIO::CBatchAllocator & );
        void CBatchAllocator();
        void ~CBatchAllocator();
        unsigned long AddRef();// Offset=0x0 Size=0x18
        unsigned long Release();// Offset=0x0 Size=0x48
        void GrowHeap(unsigned long );// Offset=0x0 Size=0x18
        HRESULT CreateHeap(unsigned long );// Offset=0x0 Size=0x68
        unsigned long GetFreeHeapSize();// Offset=0x0 Size=0x10
        void * Alloc(unsigned long );// Offset=0x0 Size=0x6c
    };
    public class XAUDIO::CBatchAllocator & operator=(class XAUDIO::CBatchAllocator & );
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class XAUDIO::CBatchAllocator : public IXAudioBatchAllocator, public XAUDIO::CObjectRefCount// Size=0x1c (Id=3875)
{
    union // Size=0x68 (Id=0)
    {
        unsigned char __align0[12];// Offset=0x0 Size=0xc
        unsigned long m_AllocAttributes;// Offset=0xc Size=0x4
        unsigned long m_BufferSize;// Offset=0x10 Size=0x4
        unsigned long m_AllocatedSize;// Offset=0x14 Size=0x4
        unsigned char * m_pBuffer;// Offset=0x18 Size=0x4
        void CBatchAllocator(class XAUDIO::CBatchAllocator & );
        void CBatchAllocator();
        void ~CBatchAllocator();
        unsigned long AddRef();// Offset=0x0 Size=0x18
        unsigned long Release();// Offset=0x0 Size=0x48
        void GrowHeap(unsigned long );// Offset=0x0 Size=0x18
        HRESULT CreateHeap(unsigned long );// Offset=0x0 Size=0x68
        unsigned long GetFreeHeapSize();// Offset=0x0 Size=0x10
        void * Alloc(unsigned long );// Offset=0x0 Size=0x6c
    };
    public class XAUDIO::CBatchAllocator & operator=(class XAUDIO::CBatchAllocator & );
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

struct XAUDIO::XAUDIOPACKETCTX// Size=0x78 (Id=3876)
{
    union // Size=0x8 (Id=0)
    {
        struct _LIST_ENTRY ListEntry;// Offset=0x0 Size=0x8
        struct <unnamed-type-Packet>// Size=0x68 (Id=43117)
        {
            void * pBuffer;// Offset=0x0 Size=0x4
            unsigned long BufferSize;// Offset=0x4 Size=0x4
            unsigned long LoopCount;// Offset=0x8 Size=0x4
            unsigned long LoopBegin;// Offset=0xc Size=0x4
            unsigned long LoopEnd;// Offset=0x10 Size=0x4
            unsigned long PlayBegin;// Offset=0x14 Size=0x4
            unsigned long PlayEnd;// Offset=0x18 Size=0x4
            void * pContext;// Offset=0x1c Size=0x4
            struct XMALOOPREGION XMALoop[6];// Offset=0x20 Size=0x48
        };
    };
    struct XAUDIO::XAUDIOPACKETCTX::<unnamed-type-Packet> Packet;// Offset=0x8 Size=0x68
    unsigned long ID;// Offset=0x70 Size=0x4
    unsigned char XMAInputBuffer;// Offset=0x74 Size=0x1
    unsigned char bPlayBeginSet;// Offset=0x75 Size=0x1
    unsigned char bPlayEndSet;// Offset=0x76 Size=0x1
    unsigned char bPlayEndRewound;// Offset=0x77 Size=0x1
};

struct XAUDIO::XAUDIOPACKETCTX::<unnamed-type-Packet>// Size=0x68 (Id=3877)
{
    void * pBuffer;// Offset=0x0 Size=0x4
    unsigned long BufferSize;// Offset=0x4 Size=0x4
    unsigned long LoopCount;// Offset=0x8 Size=0x4
    unsigned long LoopBegin;// Offset=0xc Size=0x4
    unsigned long LoopEnd;// Offset=0x10 Size=0x4
    unsigned long PlayBegin;// Offset=0x14 Size=0x4
    unsigned long PlayEnd;// Offset=0x18 Size=0x4
    void * pContext;// Offset=0x1c Size=0x4
    struct XMALOOPREGION XMALoop[6];// Offset=0x20 Size=0x48
};

class XAUDIO::CPacketList : public XAUDIO::CEmbeddedList<XAUDIO::XAUDIOPACKETCTX>// Size=0xc (Id=3878)
{
    public void CPacketList();
    public void ~CPacketList();// Offset=0x0 Size=0x7c
    public void * __vecDelDtor(unsigned int );
};

enum XAUDIO::CEngine::_unnamed_3879
{
    SHARED_FRAMEBUF_0=0,
    SHARED_FRAMEBUF_1=1,
    SHARED_FRAMEBUF_COUNT=2
};

enum XAUDIO::CEngine::_unnamed_3880
{
    THREAD_UNUSED=0,
    THREAD_SUPERVISOR=1,
    THREAD_PEON=2,
    THREAD_RESERVED_PARKING=4,
    THREAD_WORKER_MASK=3
};

class XAUDIO::CVoice : public XAUDIO::CBatchAllocatedObject// Size=0x44 (Id=3881)
{
    union // Size=0x38c (Id=0)
    {
        unsigned char __align0[12];// Offset=0x0 Size=0xc
        const unsigned char m_VoiceType;// Offset=0xc Size=0x1
        unsigned char __align1[3];// Offset=0xd Size=0x3
        class XAUDIO::CSafeListEntry m_MasterVoiceListEntry;// Offset=0x10 Size=0x8
        class XAUDIO::CSafeListEntry m_ActiveVoiceListEntry;// Offset=0x18 Size=0x8
        struct IXAudioFrameBuffer * m_pFrameBuffer;// Offset=0x20 Size=0x4
        struct XAUDIO::XAUDIOVOICEFXCTX * m_paUserEffects;// Offset=0x24 Size=0x4
        class XAUDIO::CSimpleRefCount m_ActiveSubmixSourceCount;// Offset=0x28 Size=0x4
        void  ( * m_pfnProcessCallback)(struct XAUDIOVOICEPROCESSCALLBACK * );// Offset=0x2c Size=0x4
        void * m_pVoiceContext;// Offset=0x30 Size=0x4
        union XAUDIOFORMAT m_VoiceFormat;// Offset=0x34 Size=0x8
        unsigned char m_UserEffectCount;// Offset=0x3c Size=0x1
        unsigned char m_VoiceState;// Offset=0x3d Size=0x1
        unsigned short m_MaxEffectTrailFrameCount;// Offset=0x3e Size=0x2
        unsigned short m_RemainingTrailFrameCount;// Offset=0x40 Size=0x2
        void CVoice(class XAUDIO::CVoice & );
        void CVoice(struct IXAudioBatchAllocator * ,unsigned char );// Offset=0x0 Size=0x9c
        void ~CVoice();// Offset=0x0 Size=0xf4
        HRESULT GetEffectState(unsigned char ,unsigned char * );// Offset=0x0 Size=0x38
        HRESULT SetEffectState(unsigned char ,unsigned char );// Offset=0x0 Size=0x34
        HRESULT GetEffectParam(unsigned char ,unsigned char ,unsigned char ,union XAUDIOFXPARAM * );// Offset=0x0 Size=0x48
        HRESULT SetEffectParam(unsigned char ,unsigned char ,unsigned char ,union XAUDIOFXPARAM * );// Offset=0x0 Size=0x48
        HRESULT SetVoiceOutput(struct XAUDIOVOICEOUTPUT * );
        HRESULT SetVoiceOutputVolume(struct XAUDIOVOICEOUTPUTVOLUME * );
        HRESULT GetVoiceContext(void ** );// Offset=0x0 Size=0x10
        HRESULT GetVoiceState(unsigned char * );// Offset=0x0 Size=0x10
        HRESULT GetVoiceType(unsigned char * );// Offset=0x0 Size=0x10
        HRESULT Start();// Offset=0x0 Size=0x214
        HRESULT Stop(unsigned char );// Offset=0x0 Size=0x38c
        HRESULT GetVoiceFormat(union XAUDIOFORMAT * );// Offset=0x0 Size=0x1c
        HRESULT Process();// Offset=0x0 Size=0xc8
        struct IXAudioFrameBuffer * GetFrameBuffer();// Offset=0x0 Size=0x8
        class XAUDIO::CVoice * Typecast(struct IXAudioVoice * );
        struct IXAudioVoice * Typecast(class XAUDIO::CVoice * );
        HRESULT GetObjectAdditionalSize(struct XAUDIO::XAUDIOVOICEINIT * ,unsigned long * );// Offset=0x0 Size=0xd0
        HRESULT Initialize(struct XAUDIO::XAUDIOVOICEINIT * );// Offset=0x0 Size=0x19c
        void ConvertInit(struct XAUDIO::XAUDIOVOICEINIT * ,struct XAUDIOFRAMEBUFINIT * );
        void SetVoiceState(unsigned char ,unsigned char );
        HRESULT OnStartVoice();// Offset=0x0 Size=0x130
        HRESULT OnStopVoice();// Offset=0x0 Size=0xe0
        void SetVoiceFormat(union XAUDIOFORMAT * );
        HRESULT ValidateFormat(union XAUDIOFORMAT * ,struct IXAudioFrameBuffer * );
        HRESULT CreateUserEffects(struct XAUDIOVOICEFXCHAIN * );
        HRESULT CreateEffect(struct XAUDIO::XAUDIOVOICEFXCTX * ,struct XAUDIOFXINIT * ,unsigned char );// Offset=0x0 Size=0xb4
        HRESULT GetEffect(unsigned char ,struct XAUDIO::XAUDIOVOICEFXCTX ** );
        unsigned char GetEffectCount();
        unsigned short GetTrailFrameCount();
        HRESULT ProcessEffects(struct IXAudioFrameBuffer ** );// Offset=0x0 Size=0x64
        HRESULT ProcessEffect(struct XAUDIO::XAUDIOVOICEFXCTX * ,struct IXAudioFrameBuffer * ,struct IXAudioFrameBuffer * );
        HRESULT ProcessEffect(struct XAUDIO::XAUDIOVOICEFXCTX * ,struct IXAudioFrameBuffer ** );// Offset=0x0 Size=0x11c
        void AttachSourceVoice();
        void DetachSourceVoice();
        HRESULT OnStartSourceVoice();
        HRESULT OnStopSourceVoice();
        void * __vecDelDtor(unsigned int );
    };
};

class XAUDIO::CEngine : public XAUDIO::CBatchAllocatedObject// Size=0x174 (Id=3882)
{
    public void * operator new(unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new(unsigned int );
    public void * operator new[](unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new[](unsigned int );
    public void operator delete(void * ,struct IXAudioBatchAllocator * );
    public void operator delete(void * );
    public void operator delete[](void * ,struct IXAudioBatchAllocator * );
    public void operator delete[](void * );
    enum _unnamed_43166
    {
        SHARED_FRAMEBUF_0=0,
        SHARED_FRAMEBUF_1=1,
        SHARED_FRAMEBUF_COUNT=2
    };
    union // Size=0x4e4 (Id=0)
    {
        class CEngineVoiceList// Size=0x2c (Id=43167)
        {
            public void * operator new(unsigned int ,struct IXAudioBatchAllocator * );
            public void * operator new(unsigned int );
            public void * operator new[](unsigned int ,struct IXAudioBatchAllocator * );
            public void * operator new[](unsigned int );
            public void operator delete(void * ,struct IXAudioBatchAllocator * );
            public void operator delete(void * );
            public void operator delete[](void * ,struct IXAudioBatchAllocator * );
            public void operator delete[](void * );
            public class XAUDIO::CMasterVoiceList m_Master;// Offset=0x0 Size=0xc
            public class XAUDIO::CActiveVoiceList m_Active0;// Offset=0xc Size=0xc
            public class XAUDIO::CActiveVoiceList m_Active1;// Offset=0x18 Size=0xc
            public class XAUDIO::CActiveVoiceList * m_Source;// Offset=0x24 Size=0x4
            public class XAUDIO::CActiveVoiceList * m_Sink;// Offset=0x28 Size=0x4
            public void CEngineVoiceList();
            public void SwapActiveLists();// Offset=0x0 Size=0xbc
            public void ~CEngineVoiceList();
            public void * __vecDelDtor(unsigned int );
        };
        enum _unnamed_43198
        {
            THREAD_UNUSED=0,
            THREAD_SUPERVISOR=1,
            THREAD_PEON=2,
            THREAD_RESERVED_PARKING=4,
            THREAD_WORKER_MASK=3
        };
        struct ThreadAssignments// Size=0x8 (Id=43199)
        {
            unsigned char numWorkerThreads;// Offset=0x0 Size=0x1
            unsigned char numVirtualThreads;// Offset=0x1 Size=0x1
            unsigned char assignments[6];// Offset=0x2 Size=0x6
        };
        unsigned char __align0[4];// Offset=0x8 Size=0x4
        struct IXAudioFrameBuffer * m_apFrameBuffers[6][2];// Offset=0xc Size=0x30
        struct IXAudioEffectManager * m_pEffectManager;// Offset=0x3c Size=0x4
        class XAUDIO::CMasteringVoice * m_pMasteringVoice;// Offset=0x40 Size=0x4
        class XAUDIO::CActiveVoiceList m_SynchSourceVoiceList;// Offset=0x44 Size=0xc
        class XAUDIO::CEngine::CEngineVoiceList m_SourceVoiceList;// Offset=0x50 Size=0x2c
        class XAUDIO::CEngine::CEngineVoiceList * m_paSubmixVoiceLists;// Offset=0x7c Size=0x4
        unsigned char m_SubmixStageCount;// Offset=0x80 Size=0x1
        unsigned char __align1[3];// Offset=0x81 Size=0x3
        float m_aCategoryVolume[2];// Offset=0x84 Size=0x8
        unsigned long m_CategoryVolumeChangeMask;// Offset=0x8c Size=0x4
        class XAUDIO::CVoice * m_apActiveVoices[6];// Offset=0x90 Size=0x18
        struct XAUDIO::XAUDIOENGINECALLBACKCTX m_aCallbackCtx[2][8];// Offset=0xa8 Size=0x80
        struct XAUDIO::XAUDIOENGINECALLBACKCTX * m_pActiveCallbackCtx;// Offset=0x128 Size=0x4
        struct _KTHREAD * m_pRenderThread;// Offset=0x12c Size=0x4
        struct _KEVENT m_TimeToProcessEvent;// Offset=0x0 Size=0x10
        struct _KEVENT m_ProcessingCompleteEvent;// Offset=0x0 Size=0x10
        struct _KSEMAPHORE m_GetToWorkSemaphore;// Offset=0x0 Size=0x14
        struct _KEVENT m_TitleTerminationEvent;// Offset=0x0 Size=0x10
        struct _EX_TITLE_TERMINATE_REGISTRATION m_TitleTerminationRecord;// Offset=0x0 Size=0x10
        unsigned char __align2[288];// Offset=0x10 Size=0x120
        long m_numWorkerThreads;// Offset=0x130 Size=0x4
        void * m_workerThreads[6];// Offset=0x134 Size=0x18
        struct _KTHREAD * m_workerThreadIds[6];// Offset=0x14c Size=0x18
        long long m_workerCheckpointTally[2];// Offset=0x164 Size=0x10
        void CEngine(class XAUDIO::CEngine & );
        void CEngine(struct IXAudioBatchAllocator * );// Offset=0x0 Size=0xd4
        void ~CEngine();// Offset=0x0 Size=0x4e4
        HRESULT CreateObject(struct XAUDIOENGINEINIT * ,struct IXAudioBatchAllocator * ,class XAUDIO::CEngine ** );// Offset=0x0 Size=0x104
        HRESULT GetObjectSize(struct XAUDIOENGINEINIT * ,unsigned long * );
        HRESULT GetObjectAdditionalSize(struct XAUDIOENGINEINIT * ,unsigned long * );// Offset=0x0 Size=0xdc
        HRESULT Process();// Offset=0x0 Size=0x1d0
        HRESULT SynchStart();
        struct IXAudioFrameBuffer * GetATypicalFrameBuffer();
        struct IXAudioFrameBuffer * GetNextFrameBuffer(struct IXAudioFrameBuffer * );
        HRESULT RegisterEngineCallback(unsigned char ,void  ( * )(void * ),void * ,void ** );
        HRESULT UnregisterEngineCallback(void * );
        void AttachVoice(class XAUDIO::CSubmixVoice * );
        void AttachVoice(class XAUDIO::CSourceVoice * );
        void DetachVoice(class XAUDIO::CSubmixVoice * );
        void DetachVoice(class XAUDIO::CSourceVoice * );
        void OnStartVoice(class XAUDIO::CVoice * );
        void OnStopVoice(class XAUDIO::CVoice * );
        int IsActiveVoice(class XAUDIO::CVoice * );
        void AttachSynchVoice(class XAUDIO::CSourceVoice * );
        void DetachSynchVoice(class XAUDIO::CSourceVoice * );
        void BlockOnActiveVoice(class XAUDIO::CVoice * );// Offset=0x0 Size=0x144
        struct IXAudioEffectManager * GetEffectManager();
        class XAUDIO::CMasteringVoice * GetMasteringVoice();
        unsigned char GetSubmixStageCount();
        float GetVoiceCategoryVolume(unsigned char );
        int IsVoiceCategoryVolumeChanged(unsigned char );
        int IsEngineThread();
        HRESULT Initialize(struct XAUDIOENGINEINIT * );// Offset=0x0 Size=0x458
        unsigned char GetMaxVoiceChannels(struct XAUDIOENGINEINIT * );
        void ConvertInit(struct XAUDIOENGINEINIT * ,struct XAUDIOFRAMEBUFINIT * );
        void ConvertInit(struct XAUDIOENGINEINIT * ,struct XAUDIOFXMGRINIT * );
        void AssignThreadUsage(unsigned char ,struct XAUDIO::CEngine::ThreadAssignments * );// Offset=0x0 Size=0x110
        unsigned long SupervisorProcessingThreadEntryPoint(void * );// Offset=0x0 Size=0xc8
        unsigned long PeonProcessingThreadEntryPoint(void * );// Offset=0x0 Size=0xac
        void ProcessFrame(bool );// Offset=0x0 Size=0x13c
        void SwapActiveLists();// Offset=0x0 Size=0xe8
        void ProcessingThreadSynchronizationCheckpoint(long long * );// Offset=0x0 Size=0x104
        void ProcessVoice(class XAUDIO::CVoice * );
        void ProcessVoiceList(class XAUDIO::CEngine::CEngineVoiceList * );// Offset=0x0 Size=0x1d4
        void ReleaseVoice(class XAUDIO::CVoice * );
        class XAUDIO::CEngine::CEngineVoiceList * GetVoiceList(class XAUDIO::CVoice * );
        class XAUDIO::CEngine::CEngineVoiceList * GetVoiceList(class XAUDIO::CSubmixVoice * );
        class XAUDIO::CEngine::CEngineVoiceList * GetVoiceList(class XAUDIO::CSourceVoice * );
        void ProcessEngineCallbacks(unsigned char );// Offset=0x0 Size=0x180
        struct XAUDIO::XAUDIOENGINECALLBACKCTX * CallbackHandleToCtx(void * );
        void * CallbackCtxToHandle(struct XAUDIO::XAUDIOENGINECALLBACKCTX * );
        void BlockOnActiveEngineCallback(struct XAUDIO::XAUDIOENGINECALLBACKCTX * );
        void TitleTerminateCallback(struct _EX_TITLE_TERMINATE_REGISTRATION * );// Offset=0x0 Size=0x44
        void UnregisterTitleTerminateCallback();// Offset=0x0 Size=0x6c
        void * __vecDelDtor(unsigned int );
    };
};

class XAUDIO::CEngine : public XAUDIO::CBatchAllocatedObject// Size=0x174 (Id=3883)
{
    public void * operator new(unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new(unsigned int );
    public void * operator new[](unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new[](unsigned int );
    public void operator delete(void * ,struct IXAudioBatchAllocator * );
    public void operator delete(void * );
    public void operator delete[](void * ,struct IXAudioBatchAllocator * );
    public void operator delete[](void * );
    enum _unnamed_43166
    {
        SHARED_FRAMEBUF_0=0,
        SHARED_FRAMEBUF_1=1,
        SHARED_FRAMEBUF_COUNT=2
    };
    union // Size=0x4e4 (Id=0)
    {
        class CEngineVoiceList// Size=0x2c (Id=43167)
        {
            public void * operator new(unsigned int ,struct IXAudioBatchAllocator * );
            public void * operator new(unsigned int );
            public void * operator new[](unsigned int ,struct IXAudioBatchAllocator * );
            public void * operator new[](unsigned int );
            public void operator delete(void * ,struct IXAudioBatchAllocator * );
            public void operator delete(void * );
            public void operator delete[](void * ,struct IXAudioBatchAllocator * );
            public void operator delete[](void * );
            public class XAUDIO::CMasterVoiceList m_Master;// Offset=0x0 Size=0xc
            public class XAUDIO::CActiveVoiceList m_Active0;// Offset=0xc Size=0xc
            public class XAUDIO::CActiveVoiceList m_Active1;// Offset=0x18 Size=0xc
            public class XAUDIO::CActiveVoiceList * m_Source;// Offset=0x24 Size=0x4
            public class XAUDIO::CActiveVoiceList * m_Sink;// Offset=0x28 Size=0x4
            public void CEngineVoiceList();
            public void SwapActiveLists();// Offset=0x0 Size=0xbc
            public void ~CEngineVoiceList();
            public void * __vecDelDtor(unsigned int );
        };
        enum _unnamed_43198
        {
            THREAD_UNUSED=0,
            THREAD_SUPERVISOR=1,
            THREAD_PEON=2,
            THREAD_RESERVED_PARKING=4,
            THREAD_WORKER_MASK=3
        };
        struct ThreadAssignments// Size=0x8 (Id=43199)
        {
            unsigned char numWorkerThreads;// Offset=0x0 Size=0x1
            unsigned char numVirtualThreads;// Offset=0x1 Size=0x1
            unsigned char assignments[6];// Offset=0x2 Size=0x6
        };
        unsigned char __align0[4];// Offset=0x8 Size=0x4
        struct IXAudioFrameBuffer * m_apFrameBuffers[6][2];// Offset=0xc Size=0x30
        struct IXAudioEffectManager * m_pEffectManager;// Offset=0x3c Size=0x4
        class XAUDIO::CMasteringVoice * m_pMasteringVoice;// Offset=0x40 Size=0x4
        class XAUDIO::CActiveVoiceList m_SynchSourceVoiceList;// Offset=0x44 Size=0xc
        class XAUDIO::CEngine::CEngineVoiceList m_SourceVoiceList;// Offset=0x50 Size=0x2c
        class XAUDIO::CEngine::CEngineVoiceList * m_paSubmixVoiceLists;// Offset=0x7c Size=0x4
        unsigned char m_SubmixStageCount;// Offset=0x80 Size=0x1
        unsigned char __align1[3];// Offset=0x81 Size=0x3
        float m_aCategoryVolume[2];// Offset=0x84 Size=0x8
        unsigned long m_CategoryVolumeChangeMask;// Offset=0x8c Size=0x4
        class XAUDIO::CVoice * m_apActiveVoices[6];// Offset=0x90 Size=0x18
        struct XAUDIO::XAUDIOENGINECALLBACKCTX m_aCallbackCtx[2][8];// Offset=0xa8 Size=0x80
        struct XAUDIO::XAUDIOENGINECALLBACKCTX * m_pActiveCallbackCtx;// Offset=0x128 Size=0x4
        struct _KTHREAD * m_pRenderThread;// Offset=0x12c Size=0x4
        struct _KEVENT m_TimeToProcessEvent;// Offset=0x0 Size=0x10
        struct _KEVENT m_ProcessingCompleteEvent;// Offset=0x0 Size=0x10
        struct _KSEMAPHORE m_GetToWorkSemaphore;// Offset=0x0 Size=0x14
        struct _KEVENT m_TitleTerminationEvent;// Offset=0x0 Size=0x10
        struct _EX_TITLE_TERMINATE_REGISTRATION m_TitleTerminationRecord;// Offset=0x0 Size=0x10
        unsigned char __align2[288];// Offset=0x10 Size=0x120
        long m_numWorkerThreads;// Offset=0x130 Size=0x4
        void * m_workerThreads[6];// Offset=0x134 Size=0x18
        struct _KTHREAD * m_workerThreadIds[6];// Offset=0x14c Size=0x18
        long long m_workerCheckpointTally[2];// Offset=0x164 Size=0x10
        void CEngine(class XAUDIO::CEngine & );
        void CEngine(struct IXAudioBatchAllocator * );// Offset=0x0 Size=0xd4
        void ~CEngine();// Offset=0x0 Size=0x4e4
        HRESULT CreateObject(struct XAUDIOENGINEINIT * ,struct IXAudioBatchAllocator * ,class XAUDIO::CEngine ** );// Offset=0x0 Size=0x104
        HRESULT GetObjectSize(struct XAUDIOENGINEINIT * ,unsigned long * );
        HRESULT GetObjectAdditionalSize(struct XAUDIOENGINEINIT * ,unsigned long * );// Offset=0x0 Size=0xdc
        HRESULT Process();// Offset=0x0 Size=0x1d0
        HRESULT SynchStart();
        struct IXAudioFrameBuffer * GetATypicalFrameBuffer();
        struct IXAudioFrameBuffer * GetNextFrameBuffer(struct IXAudioFrameBuffer * );
        HRESULT RegisterEngineCallback(unsigned char ,void  ( * )(void * ),void * ,void ** );
        HRESULT UnregisterEngineCallback(void * );
        void AttachVoice(class XAUDIO::CSubmixVoice * );
        void AttachVoice(class XAUDIO::CSourceVoice * );
        void DetachVoice(class XAUDIO::CSubmixVoice * );
        void DetachVoice(class XAUDIO::CSourceVoice * );
        void OnStartVoice(class XAUDIO::CVoice * );
        void OnStopVoice(class XAUDIO::CVoice * );
        int IsActiveVoice(class XAUDIO::CVoice * );
        void AttachSynchVoice(class XAUDIO::CSourceVoice * );
        void DetachSynchVoice(class XAUDIO::CSourceVoice * );
        void BlockOnActiveVoice(class XAUDIO::CVoice * );// Offset=0x0 Size=0x144
        struct IXAudioEffectManager * GetEffectManager();
        class XAUDIO::CMasteringVoice * GetMasteringVoice();
        unsigned char GetSubmixStageCount();
        float GetVoiceCategoryVolume(unsigned char );
        int IsVoiceCategoryVolumeChanged(unsigned char );
        int IsEngineThread();
        HRESULT Initialize(struct XAUDIOENGINEINIT * );// Offset=0x0 Size=0x458
        unsigned char GetMaxVoiceChannels(struct XAUDIOENGINEINIT * );
        void ConvertInit(struct XAUDIOENGINEINIT * ,struct XAUDIOFRAMEBUFINIT * );
        void ConvertInit(struct XAUDIOENGINEINIT * ,struct XAUDIOFXMGRINIT * );
        void AssignThreadUsage(unsigned char ,struct XAUDIO::CEngine::ThreadAssignments * );// Offset=0x0 Size=0x110
        unsigned long SupervisorProcessingThreadEntryPoint(void * );// Offset=0x0 Size=0xc8
        unsigned long PeonProcessingThreadEntryPoint(void * );// Offset=0x0 Size=0xac
        void ProcessFrame(bool );// Offset=0x0 Size=0x13c
        void SwapActiveLists();// Offset=0x0 Size=0xe8
        void ProcessingThreadSynchronizationCheckpoint(long long * );// Offset=0x0 Size=0x104
        void ProcessVoice(class XAUDIO::CVoice * );
        void ProcessVoiceList(class XAUDIO::CEngine::CEngineVoiceList * );// Offset=0x0 Size=0x1d4
        void ReleaseVoice(class XAUDIO::CVoice * );
        class XAUDIO::CEngine::CEngineVoiceList * GetVoiceList(class XAUDIO::CVoice * );
        class XAUDIO::CEngine::CEngineVoiceList * GetVoiceList(class XAUDIO::CSubmixVoice * );
        class XAUDIO::CEngine::CEngineVoiceList * GetVoiceList(class XAUDIO::CSourceVoice * );
        void ProcessEngineCallbacks(unsigned char );// Offset=0x0 Size=0x180
        struct XAUDIO::XAUDIOENGINECALLBACKCTX * CallbackHandleToCtx(void * );
        void * CallbackCtxToHandle(struct XAUDIO::XAUDIOENGINECALLBACKCTX * );
        void BlockOnActiveEngineCallback(struct XAUDIO::XAUDIOENGINECALLBACKCTX * );
        void TitleTerminateCallback(struct _EX_TITLE_TERMINATE_REGISTRATION * );// Offset=0x0 Size=0x44
        void UnregisterTitleTerminateCallback();// Offset=0x0 Size=0x6c
        void * __vecDelDtor(unsigned int );
    };
};

struct XAUDIO::CEngine::ThreadAssignments// Size=0x8 (Id=3884)
{
    unsigned char numWorkerThreads;// Offset=0x0 Size=0x1
    unsigned char numVirtualThreads;// Offset=0x1 Size=0x1
    unsigned char assignments[6];// Offset=0x2 Size=0x6
};

class XAUDIO::CEngine::CEngineVoiceList// Size=0x2c (Id=3885)
{
    public void * operator new(unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new(unsigned int );
    public void * operator new[](unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new[](unsigned int );
    public void operator delete(void * ,struct IXAudioBatchAllocator * );
    public void operator delete(void * );
    public void operator delete[](void * ,struct IXAudioBatchAllocator * );
    public void operator delete[](void * );
    union // Size=0x2c (Id=0)
    {
        class XAUDIO::CMasterVoiceList m_Master;// Offset=0x0 Size=0xc
        class XAUDIO::CActiveVoiceList m_Active0;// Offset=0xc Size=0xc
        class XAUDIO::CActiveVoiceList m_Active1;// Offset=0x18 Size=0xc
        class XAUDIO::CActiveVoiceList * m_Source;// Offset=0x24 Size=0x4
        class XAUDIO::CActiveVoiceList * m_Sink;// Offset=0x28 Size=0x4
        void CEngineVoiceList();
        void SwapActiveLists();// Offset=0x0 Size=0xbc
    };
    public void ~CEngineVoiceList();
    public void * __vecDelDtor(unsigned int );
};

enum XAUDIO::CSubmixVoice::_unnamed_3886
{
    XAUDIOVOICETYPE_THIS=1
};

class XAUDIO::CSubmixVoice : public XAUDIO::CRoutedVoice// Size=0x50 (Id=3887)
{
    public void * operator new(unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new(unsigned int );
    public void * operator new[](unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new[](unsigned int );
    public void operator delete(void * ,struct IXAudioBatchAllocator * );
    public void operator delete(void * );
    public void operator delete[](void * ,struct IXAudioBatchAllocator * );
    public void operator delete[](void * );
    enum _unnamed_43439
    {
        XAUDIOVOICETYPE_THIS=1
    };
    union // Size=0x17c (Id=0)
    {
        unsigned char __align0[76];// Offset=0x0 Size=0x4c
        const unsigned char m_SubmixStage;// Offset=0x4c Size=0x1
        void CSubmixVoice(class XAUDIO::CSubmixVoice & );
        void CSubmixVoice(struct XAUDIOSUBMIXVOICEINIT * ,struct IXAudioBatchAllocator * );// Offset=0x0 Size=0x10c
        void ~CSubmixVoice();// Offset=0x0 Size=0x114
        HRESULT CreateObject(struct XAUDIOSUBMIXVOICEINIT * ,struct IXAudioBatchAllocator * ,class XAUDIO::CSubmixVoice ** );// Offset=0x0 Size=0x17c
        HRESULT GetObjectSize(struct XAUDIOSUBMIXVOICEINIT * ,unsigned long * );
        HRESULT GetObjectAdditionalSize(struct XAUDIOSUBMIXVOICEINIT * ,unsigned long * );
        HRESULT SetVoiceFormat(union XAUDIOFORMAT * ,struct XAUDIOVOICEOUTPUT * );// Offset=0x0 Size=0x84
        HRESULT SetVoiceOutput(struct XAUDIOVOICEOUTPUT * );// Offset=0x0 Size=0x4
        class XAUDIO::CSubmixVoice * Typecast(struct IXAudioSubmixVoice * );
        struct IXAudioSubmixVoice * Typecast(class XAUDIO::CSubmixVoice * );
        HRESULT Initialize(struct XAUDIOSUBMIXVOICEINIT * );// Offset=0x0 Size=0xe4
        void ConvertInit(struct XAUDIOSUBMIXVOICEINIT * ,struct XAUDIO::XAUDIOROUTEDVOICEINIT * );
        void ConvertFormat(union XAUDIOFORMAT * ,union XAUDIOFORMAT * );
        HRESULT Process();// Offset=0x0 Size=0x90
        void * __vecDelDtor(unsigned int );
    };
};

class XAUDIO::CSubmixVoice : public XAUDIO::CRoutedVoice// Size=0x50 (Id=3888)
{
    public void * operator new(unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new(unsigned int );
    public void * operator new[](unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new[](unsigned int );
    public void operator delete(void * ,struct IXAudioBatchAllocator * );
    public void operator delete(void * );
    public void operator delete[](void * ,struct IXAudioBatchAllocator * );
    public void operator delete[](void * );
    enum _unnamed_43439
    {
        XAUDIOVOICETYPE_THIS=1
    };
    union // Size=0x17c (Id=0)
    {
        unsigned char __align0[76];// Offset=0x0 Size=0x4c
        const unsigned char m_SubmixStage;// Offset=0x4c Size=0x1
        void CSubmixVoice(class XAUDIO::CSubmixVoice & );
        void CSubmixVoice(struct XAUDIOSUBMIXVOICEINIT * ,struct IXAudioBatchAllocator * );// Offset=0x0 Size=0x10c
        void ~CSubmixVoice();// Offset=0x0 Size=0x114
        HRESULT CreateObject(struct XAUDIOSUBMIXVOICEINIT * ,struct IXAudioBatchAllocator * ,class XAUDIO::CSubmixVoice ** );// Offset=0x0 Size=0x17c
        HRESULT GetObjectSize(struct XAUDIOSUBMIXVOICEINIT * ,unsigned long * );
        HRESULT GetObjectAdditionalSize(struct XAUDIOSUBMIXVOICEINIT * ,unsigned long * );
        HRESULT SetVoiceFormat(union XAUDIOFORMAT * ,struct XAUDIOVOICEOUTPUT * );// Offset=0x0 Size=0x84
        HRESULT SetVoiceOutput(struct XAUDIOVOICEOUTPUT * );// Offset=0x0 Size=0x4
        class XAUDIO::CSubmixVoice * Typecast(struct IXAudioSubmixVoice * );
        struct IXAudioSubmixVoice * Typecast(class XAUDIO::CSubmixVoice * );
        HRESULT Initialize(struct XAUDIOSUBMIXVOICEINIT * );// Offset=0x0 Size=0xe4
        void ConvertInit(struct XAUDIOSUBMIXVOICEINIT * ,struct XAUDIO::XAUDIOROUTEDVOICEINIT * );
        void ConvertFormat(union XAUDIOFORMAT * ,union XAUDIOFORMAT * );
        HRESULT Process();// Offset=0x0 Size=0x90
        void * __vecDelDtor(unsigned int );
    };
};

enum XAUDIO::CMasteringVoice::_unnamed_3889
{
    XAUDIOVOICETYPE_THIS=2
};

class XAUDIO::CMasteringVoice : public XAUDIO::CVoice// Size=0x48 (Id=3890)
{
    public void * operator new(unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new(unsigned int );
    public void * operator new[](unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new[](unsigned int );
    public void operator delete(void * ,struct IXAudioBatchAllocator * );
    public void operator delete(void * );
    public void operator delete[](void * ,struct IXAudioBatchAllocator * );
    public void operator delete[](void * );
    enum _unnamed_43527
    {
        XAUDIOVOICETYPE_THIS=2
    };
    union // Size=0x15c (Id=0)
    {
        unsigned char __align0[68];// Offset=0x0 Size=0x44
        class XAUDIO::CXenonRenderer * m_pRenderEffect;// Offset=0x44 Size=0x4
        void CMasteringVoice(class XAUDIO::CMasteringVoice & );
        void CMasteringVoice(struct IXAudioBatchAllocator * ,unsigned char );
        void ~CMasteringVoice();
        HRESULT CreateObject(struct XAUDIOMASTERINGVOICEINIT * ,class XAUDIO::CMasteringVoice ** );// Offset=0x0 Size=0x154
        HRESULT GetObjectSize(struct XAUDIOMASTERINGVOICEINIT * ,unsigned long * );
        HRESULT GetObjectAdditionalSize(struct XAUDIOMASTERINGVOICEINIT * ,unsigned long * );
        unsigned long AddRef();// Offset=0x0 Size=0x8
        unsigned long Release();// Offset=0x0 Size=0x8
        HRESULT SetVoiceOutput(struct XAUDIOVOICEOUTPUT * );// Offset=0x0 Size=0xc
        HRESULT SetVoiceOutputVolume(struct XAUDIOVOICEOUTPUTVOLUME * );// Offset=0x0 Size=0xc
        HRESULT Start();// Offset=0x0 Size=0x78
        HRESULT Stop(unsigned char );// Offset=0x0 Size=0x8
        HRESULT AttachEngine(int );
        void * GetDriverClientHandle();
        class XAUDIO::CMasteringVoice * Typecast(struct IXAudioMasteringVoice * );
        struct IXAudioMasteringVoice * Typecast(class XAUDIO::CMasteringVoice * );
        HRESULT Initialize(struct XAUDIOMASTERINGVOICEINIT * );// Offset=0x0 Size=0x15c
        void ConvertInit(class XAUDIO::CMasteringVoice * ,struct XAUDIOMASTERINGVOICEINIT * ,struct XAUDIORENDERFXINIT * );
        void ConvertInit(struct XAUDIOMASTERINGVOICEINIT * ,struct XAUDIO::XAUDIOVOICEINIT * );
        HRESULT Process();// Offset=0x0 Size=0x64
        HRESULT ProcessEffects(struct IXAudioFrameBuffer ** );// Offset=0x0 Size=0x5c
        void _RenderCallback(struct XAUDIORENDERFXCALLBACK * );// Offset=0x0 Size=0x4
        void * __vecDelDtor(unsigned int );
    };
};

class XAUDIO::CMasteringVoice : public XAUDIO::CVoice// Size=0x48 (Id=3891)
{
    public void * operator new(unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new(unsigned int );
    public void * operator new[](unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new[](unsigned int );
    public void operator delete(void * ,struct IXAudioBatchAllocator * );
    public void operator delete(void * );
    public void operator delete[](void * ,struct IXAudioBatchAllocator * );
    public void operator delete[](void * );
    enum _unnamed_43527
    {
        XAUDIOVOICETYPE_THIS=2
    };
    union // Size=0x15c (Id=0)
    {
        unsigned char __align0[68];// Offset=0x0 Size=0x44
        class XAUDIO::CXenonRenderer * m_pRenderEffect;// Offset=0x44 Size=0x4
        void CMasteringVoice(class XAUDIO::CMasteringVoice & );
        void CMasteringVoice(struct IXAudioBatchAllocator * ,unsigned char );
        void ~CMasteringVoice();
        HRESULT CreateObject(struct XAUDIOMASTERINGVOICEINIT * ,class XAUDIO::CMasteringVoice ** );// Offset=0x0 Size=0x154
        HRESULT GetObjectSize(struct XAUDIOMASTERINGVOICEINIT * ,unsigned long * );
        HRESULT GetObjectAdditionalSize(struct XAUDIOMASTERINGVOICEINIT * ,unsigned long * );
        unsigned long AddRef();// Offset=0x0 Size=0x8
        unsigned long Release();// Offset=0x0 Size=0x8
        HRESULT SetVoiceOutput(struct XAUDIOVOICEOUTPUT * );// Offset=0x0 Size=0xc
        HRESULT SetVoiceOutputVolume(struct XAUDIOVOICEOUTPUTVOLUME * );// Offset=0x0 Size=0xc
        HRESULT Start();// Offset=0x0 Size=0x78
        HRESULT Stop(unsigned char );// Offset=0x0 Size=0x8
        HRESULT AttachEngine(int );
        void * GetDriverClientHandle();
        class XAUDIO::CMasteringVoice * Typecast(struct IXAudioMasteringVoice * );
        struct IXAudioMasteringVoice * Typecast(class XAUDIO::CMasteringVoice * );
        HRESULT Initialize(struct XAUDIOMASTERINGVOICEINIT * );// Offset=0x0 Size=0x15c
        void ConvertInit(class XAUDIO::CMasteringVoice * ,struct XAUDIOMASTERINGVOICEINIT * ,struct XAUDIORENDERFXINIT * );
        void ConvertInit(struct XAUDIOMASTERINGVOICEINIT * ,struct XAUDIO::XAUDIOVOICEINIT * );
        HRESULT Process();// Offset=0x0 Size=0x64
        HRESULT ProcessEffects(struct IXAudioFrameBuffer ** );// Offset=0x0 Size=0x5c
        void _RenderCallback(struct XAUDIORENDERFXCALLBACK * );// Offset=0x0 Size=0x4
        void * __vecDelDtor(unsigned int );
    };
};

class XAUDIO::CThread// Size=0x14 (Id=3892)
{
    private unsigned char __align0[4];// Offset=0x0 Size=0x4
    public unsigned long m_dwThreadId;// Offset=0x4 Size=0x4
    public void * m_hThread;// Offset=0x8 Size=0x4
    public void * m_hInitialize;// Offset=0xc Size=0x4
    public void * m_hTerminate;// Offset=0x10 Size=0x4
    public void CThread(class XAUDIO::CThread & );
    public void CThread();
    public void ~CThread();
    public int CreateThread(unsigned long );
    public void TerminateThread(int );
    public int IsThread(unsigned long * );
    protected int OnThreadCreate();
    protected unsigned long ThreadProc();
    private unsigned long PrivateThreadProc(void * );
    public class XAUDIO::CThread & operator=(class XAUDIO::CThread & );
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class XAUDIO::CThread// Size=0x14 (Id=3893)
{
    private unsigned char __align0[4];// Offset=0x0 Size=0x4
    public unsigned long m_dwThreadId;// Offset=0x4 Size=0x4
    public void * m_hThread;// Offset=0x8 Size=0x4
    public void * m_hInitialize;// Offset=0xc Size=0x4
    public void * m_hTerminate;// Offset=0x10 Size=0x4
    public void CThread(class XAUDIO::CThread & );
    public void CThread();
    public void ~CThread();
    public int CreateThread(unsigned long );
    public void TerminateThread(int );
    public int IsThread(unsigned long * );
    protected int OnThreadCreate();
    protected unsigned long ThreadProc();
    private unsigned long PrivateThreadProc(void * );
    public class XAUDIO::CThread & operator=(class XAUDIO::CThread & );
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class XAUDIO::CResampler// Size=0x58 (Id=3894)
{
    union // Size=0x58 (Id=0)
    {
        struct XAUDIO::XAUDIOSRCHDR m_SRCHeader;// Offset=0x0 Size=0x4c
        void  ( * m_pfnSRCProc)(struct XAUDIO::XAUDIOSRCHDR * );// Offset=0x4c Size=0x4
        unsigned long m_UpdateMask;// Offset=0x50 Size=0x4
        unsigned long m_Flags;// Offset=0x54 Size=0x4
        void CResampler();
        void SetFlags(unsigned char );
        void SetSourceBuffer(void * ,unsigned int ,unsigned int );
        void SetSourceOffset(unsigned int );
        void SetDestBuffer(float * ,unsigned int ,unsigned int );
        unsigned int GetSourceCount();
        unsigned int GetSourceOffset();
        float * GetDestBuffer();
        unsigned int GetDestCount();
        int ClearDestBuffer(unsigned int );
        int ClearDestBuffer();
        union XAUDIOFORMAT * GetSourceFormat();
        void SetSourceFormat(unsigned char ,unsigned long ,unsigned char ,float );
        void SetDestSamplingRate(unsigned long );
        float GetTargetVolume();
        void SetTargetVolume(float );
        void SyncCurrentVolume();
        unsigned int GetSampleAlignment();
        unsigned int GetSampleAlignment(unsigned char ,unsigned char );
        unsigned int GetPacketAlignment();
        unsigned int GetPacketAlignment(unsigned char ,unsigned long );
        void ResetSampleCache();
        unsigned int Process();// Offset=0x0 Size=0x1a8
    };
    private void UpdateProperties();
    private void UpdateSRCTableEntry();
};

struct princeton_digital::stereo_room_t<float>::properties_t// Size=0x54 (Id=3895)
{
    unsigned int reflections_delay;// Offset=0x0 Size=0x4
    unsigned int reverb_delay;// Offset=0x4 Size=0x4
    unsigned int position_l;// Offset=0x8 Size=0x4
    unsigned int position_r;// Offset=0xc Size=0x4
    unsigned int position_l_matrix;// Offset=0x10 Size=0x4
    unsigned int position_r_matrix;// Offset=0x14 Size=0x4
    unsigned int early_diffusion;// Offset=0x18 Size=0x4
    unsigned int late_diffusion;// Offset=0x1c Size=0x4
    unsigned int low_eq_gain;// Offset=0x20 Size=0x4
    unsigned int low_eq_cutoff;// Offset=0x24 Size=0x4
    unsigned int high_eq_gain;// Offset=0x28 Size=0x4
    unsigned int high_eq_cutoff;// Offset=0x2c Size=0x4
    unsigned int rear_delay;// Offset=0x30 Size=0x4
    float room_filter_freq;// Offset=0x34 Size=0x4
    float room_filter_main;// Offset=0x38 Size=0x4
    float room_filter_hf;// Offset=0x3c Size=0x4
    float reflections_gain;// Offset=0x40 Size=0x4
    float reverb_gain;// Offset=0x44 Size=0x4
    float decay_time;// Offset=0x48 Size=0x4
    float density;// Offset=0x4c Size=0x4
    float room_size;// Offset=0x50 Size=0x4
    void properties_t();
};

struct _I3DL2_LISTENERPROPERTIES// Size=0x30 (Id=3896)
{
    long lRoom;// Offset=0x0 Size=0x4
    long lRoomHF;// Offset=0x4 Size=0x4
    float flRoomRolloffFactor;// Offset=0x8 Size=0x4
    float flDecayTime;// Offset=0xc Size=0x4
    float flDecayHFRatio;// Offset=0x10 Size=0x4
    long lReflections;// Offset=0x14 Size=0x4
    float flReflectionsDelay;// Offset=0x18 Size=0x4
    long lReverb;// Offset=0x1c Size=0x4
    float flReverbDelay;// Offset=0x20 Size=0x4
    float flDiffusion;// Offset=0x24 Size=0x4
    float flDensity;// Offset=0x28 Size=0x4
    float flHFReference;// Offset=0x2c Size=0x4
};

class XAUDIO::CStereoRoomFloat : public princeton_digital::stereo_room_3dl2_t<float>, public princeton_digital::stereo_room_t<float>// Size=0x4ba90 (Id=3897)
{
    public void SetWetDryMix(float );
    public void SetPropertiesStandard(struct princeton_digital::stereo_room_t<float>::properties_t & );
    public void SetPropertiesI3DL2(struct _I3DL2_LISTENERPROPERTIES & );
    union // Size=0x144 (Id=0)
    {
        void Process(float ** ,float ** );// Offset=0x0 Size=0x144
        struct princeton_digital::stereo_room_t<float>::properties_t m_propertiesStandard;// Offset=0x34 Size=0x54
        struct _I3DL2_LISTENERPROPERTIES m_propertiesI3DL2;// Offset=0x88 Size=0x30
        float m_wetDryMix;// Offset=0xb8 Size=0x4
        bool m_WetDryChanged;// Offset=0xbc Size=0x1
        bool m_PropertiesStandardChanged;// Offset=0xbd Size=0x1
        bool m_PropertiesI3DL2Changed;// Offset=0xbe Size=0x1
        void CStereoRoomFloat(class XAUDIO::CStereoRoomFloat & );
        void CStereoRoomFloat();// Offset=0x0 Size=0x124
        void ~CStereoRoomFloat();
        class XAUDIO::CStereoRoomFloat & operator=(class XAUDIO::CStereoRoomFloat & );
        void __local_vftable_ctor_closure();
        void * __vecDelDtor(unsigned int );
    };
};

class XAUDIO::CStereoRoomFloat : public princeton_digital::stereo_room_3dl2_t<float>, public princeton_digital::stereo_room_t<float>// Size=0x4ba90 (Id=3898)
{
    public void SetWetDryMix(float );
    public void SetPropertiesStandard(struct princeton_digital::stereo_room_t<float>::properties_t & );
    public void SetPropertiesI3DL2(struct _I3DL2_LISTENERPROPERTIES & );
    union // Size=0x144 (Id=0)
    {
        void Process(float ** ,float ** );// Offset=0x0 Size=0x144
        struct princeton_digital::stereo_room_t<float>::properties_t m_propertiesStandard;// Offset=0x34 Size=0x54
        struct _I3DL2_LISTENERPROPERTIES m_propertiesI3DL2;// Offset=0x88 Size=0x30
        float m_wetDryMix;// Offset=0xb8 Size=0x4
        bool m_WetDryChanged;// Offset=0xbc Size=0x1
        bool m_PropertiesStandardChanged;// Offset=0xbd Size=0x1
        bool m_PropertiesI3DL2Changed;// Offset=0xbe Size=0x1
        void CStereoRoomFloat(class XAUDIO::CStereoRoomFloat & );
        void CStereoRoomFloat();// Offset=0x0 Size=0x124
        void ~CStereoRoomFloat();
        class XAUDIO::CStereoRoomFloat & operator=(class XAUDIO::CStereoRoomFloat & );
        void __local_vftable_ctor_closure();
        void * __vecDelDtor(unsigned int );
    };
};

struct XAUDIO::XMA_PLAYBACK_LOOP// Size=0xc (Id=3899)
{
    unsigned long dwLoopStartOffset;// Offset=0x0 Size=0x4
    unsigned long dwLoopEndOffset;// Offset=0x4 Size=0x4
    unsigned char dwLoopSubframeEnd;// Offset=0x8 Size=0x1
    unsigned char dwLoopSubframeSkip;// Offset=0x9 Size=0x1
    unsigned char numLoops;// Offset=0xa Size=0x1
    unsigned char RESERVED;// Offset=0xb Size=0x1
};

class XAUDIO::CRiffChunk// Size=0x1c (Id=3900)
{
    private unsigned char __align0[4];// Offset=0x0 Size=0x4
    protected class XAUDIO::CRiffChunk * m_pParentChunk;// Offset=0x4 Size=0x4
    protected class XAUDIO::CFileStream * m_pStream;// Offset=0x8 Size=0x4
    protected unsigned long m_dwChunkId;// Offset=0xc Size=0x4
    protected unsigned long m_dwDataOffset;// Offset=0x10 Size=0x4
    protected unsigned long m_dwDataSize;// Offset=0x14 Size=0x4
    protected unsigned long m_dwFlags;// Offset=0x18 Size=0x4
    public void CRiffChunk(class XAUDIO::CRiffChunk & );
    public void CRiffChunk();
    public void ~CRiffChunk();
    public HRESULT Open(class XAUDIO::CRiffChunk * ,class XAUDIO::CFileStream * ,unsigned long );
    public HRESULT Read(unsigned long ,void * ,unsigned long ,unsigned long * );
    public unsigned long GetChunkId();
    public unsigned long GetDataOffset();
    public unsigned long GetDataSize();
    public int IsValid();
    public class XAUDIO::CRiffChunk & operator=(class XAUDIO::CRiffChunk & );
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class XAUDIO::CRiffChunk// Size=0x1c (Id=3901)
{
    private unsigned char __align0[4];// Offset=0x0 Size=0x4
    protected class XAUDIO::CRiffChunk * m_pParentChunk;// Offset=0x4 Size=0x4
    protected class XAUDIO::CFileStream * m_pStream;// Offset=0x8 Size=0x4
    protected unsigned long m_dwChunkId;// Offset=0xc Size=0x4
    protected unsigned long m_dwDataOffset;// Offset=0x10 Size=0x4
    protected unsigned long m_dwDataSize;// Offset=0x14 Size=0x4
    protected unsigned long m_dwFlags;// Offset=0x18 Size=0x4
    public void CRiffChunk(class XAUDIO::CRiffChunk & );
    public void CRiffChunk();
    public void ~CRiffChunk();
    public HRESULT Open(class XAUDIO::CRiffChunk * ,class XAUDIO::CFileStream * ,unsigned long );
    public HRESULT Read(unsigned long ,void * ,unsigned long ,unsigned long * );
    public unsigned long GetChunkId();
    public unsigned long GetDataOffset();
    public unsigned long GetDataSize();
    public int IsValid();
    public class XAUDIO::CRiffChunk & operator=(class XAUDIO::CRiffChunk & );
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

struct _I3DL2_LISTENERPROPERTIES// Size=0x30 (Id=3902)
{
    long lRoom;// Offset=0x0 Size=0x4
    long lRoomHF;// Offset=0x4 Size=0x4
    float flRoomRolloffFactor;// Offset=0x8 Size=0x4
    float flDecayTime;// Offset=0xc Size=0x4
    float flDecayHFRatio;// Offset=0x10 Size=0x4
    long lReflections;// Offset=0x14 Size=0x4
    float flReflectionsDelay;// Offset=0x18 Size=0x4
    long lReverb;// Offset=0x1c Size=0x4
    float flReverbDelay;// Offset=0x20 Size=0x4
    float flDiffusion;// Offset=0x24 Size=0x4
    float flDensity;// Offset=0x28 Size=0x4
    float flHFReference;// Offset=0x2c Size=0x4
};

struct IXAudioSourceVoice : public IXAudioVoice// Size=0x1 (Id=3903)
{
    HRESULT GetVoiceFormat(struct XAUDIOSOURCEFORMAT * );
    HRESULT SetVoiceFormat(struct XAUDIOSOURCEFORMAT * ,struct XAUDIOVOICEOUTPUT * ,unsigned char );
    HRESULT SubmitPacket(struct XAUDIOPACKET * ,unsigned char );
    HRESULT FlushPackets();
    HRESULT SubmitSourceBuffer(struct XAUDIOSOURCEBUFFER * ,unsigned char );
    HRESULT FlushSourceBuffers();
    HRESULT Start(unsigned char );
    HRESULT Stop(unsigned char );
    HRESULT Discontinuity();
    HRESULT GetPacketPosition(union XAUDIOPACKETPOSITION * );
    HRESULT SetPacketPosition(union XAUDIOPACKETPOSITION * );
    HRESULT GetStreamPosition(unsigned long * );
    HRESULT GetPacketLoopCount(unsigned long * );
    HRESULT SetPacketLoopCount(unsigned long );
    HRESULT GetPacketContext(void ** );
    HRESULT GetVolume(float * );
    HRESULT SetVolume(float );
    HRESULT GetPitch(float * );
    HRESULT SetPitch(float );
    HRESULT GetFrequencyScale(float * );
    HRESULT SetFrequencyScale(float );
};

class princeton_digital::vardelay_t<float,256>// Size=0x420 (Id=3904)
{
    private void vardelay_t<float,256>(class princeton_digital::vardelay_t<float,256> & );
    public void vardelay_t<float,256>(unsigned int ,float );
    public void ~vardelay_t<float,256>();
    public void reset();
    union // Size=0x4cc (Id=0)
    {
        void preprocess(float * ,float * );// Offset=0x0 Size=0x4cc
        void process(float );
        void sample_rate_set(float );
        void delay1_set(unsigned int );
        void delay1_get(unsigned int & );
        float tap1_get();
        float sample_rate_;// Offset=0x0 Size=0x4
        float crossfade_;// Offset=0x4 Size=0x4
        unsigned int delay_;// Offset=0x8 Size=0x4
        unsigned int old_delay_;// Offset=0xc Size=0x4
        unsigned int future_delay_;// Offset=0x10 Size=0x4
        float tap1_;// Offset=0x14 Size=0x4
        class princeton_digital::delay_t<float,256> delay_line_;// Offset=0x18 Size=0x408
        class princeton_digital::vardelay_t<float,256> & operator=(class princeton_digital::vardelay_t<float,256> & );
        void * __vecDelDtor(unsigned int );
    };
};

class princeton_digital::vardelay_t<float,256>// Size=0x420 (Id=3905)
{
    private void vardelay_t<float,256>(class princeton_digital::vardelay_t<float,256> & );
    public void vardelay_t<float,256>(unsigned int ,float );
    public void ~vardelay_t<float,256>();
    public void reset();
    union // Size=0x4cc (Id=0)
    {
        void preprocess(float * ,float * );// Offset=0x0 Size=0x4cc
        void process(float );
        void sample_rate_set(float );
        void delay1_set(unsigned int );
        void delay1_get(unsigned int & );
        float tap1_get();
        float sample_rate_;// Offset=0x0 Size=0x4
        float crossfade_;// Offset=0x4 Size=0x4
        unsigned int delay_;// Offset=0x8 Size=0x4
        unsigned int old_delay_;// Offset=0xc Size=0x4
        unsigned int future_delay_;// Offset=0x10 Size=0x4
        float tap1_;// Offset=0x14 Size=0x4
        class princeton_digital::delay_t<float,256> delay_line_;// Offset=0x18 Size=0x408
        class princeton_digital::vardelay_t<float,256> & operator=(class princeton_digital::vardelay_t<float,256> & );
        void * __vecDelDtor(unsigned int );
    };
};

class princeton_digital::allpass2_t<float,2048>// Size=0x201c (Id=3906)
{
    private void allpass2_t<float,2048>(class princeton_digital::allpass2_t<float,2048> & );
    public void allpass2_t<float,2048>(unsigned int ,float );
    public void ~allpass2_t<float,2048>();
    public void reset();
    public float process(float );
    public float output_get();
    public void gain1_set(float );
    public float gain1_get();
    public void delay1_set(unsigned int );
    public unsigned int delay1_get();
    private unsigned int delay_;// Offset=0x0 Size=0x4
    private float feed_forward_;// Offset=0x4 Size=0x4
    private float feed_backward_;// Offset=0x8 Size=0x4
    private float output_gain_;// Offset=0xc Size=0x4
    private float output_;// Offset=0x10 Size=0x4
    private class princeton_digital::delay_t<float,2048> delay_line_;// Offset=0x14 Size=0x2008
    private class princeton_digital::allpass2_t<float,2048> & operator=(class princeton_digital::allpass2_t<float,2048> & );
    public void * __vecDelDtor(unsigned int );
};

class princeton_digital::allpass2_t<float,2048>// Size=0x201c (Id=3907)
{
    private void allpass2_t<float,2048>(class princeton_digital::allpass2_t<float,2048> & );
    public void allpass2_t<float,2048>(unsigned int ,float );
    public void ~allpass2_t<float,2048>();
    public void reset();
    public float process(float );
    public float output_get();
    public void gain1_set(float );
    public float gain1_get();
    public void delay1_set(unsigned int );
    public unsigned int delay1_get();
    private unsigned int delay_;// Offset=0x0 Size=0x4
    private float feed_forward_;// Offset=0x4 Size=0x4
    private float feed_backward_;// Offset=0x8 Size=0x4
    private float output_gain_;// Offset=0xc Size=0x4
    private float output_;// Offset=0x10 Size=0x4
    private class princeton_digital::delay_t<float,2048> delay_line_;// Offset=0x14 Size=0x2008
    private class princeton_digital::allpass2_t<float,2048> & operator=(class princeton_digital::allpass2_t<float,2048> & );
    public void * __vecDelDtor(unsigned int );
};

class princeton_digital::delay_t<float,4096>// Size=0x4008 (Id=3908)
{
    private void delay_t<float,4096>(class princeton_digital::delay_t<float,4096> & );
    public void delay_t<float,4096>(float );
    public void ~delay_t<float,4096>();
    public void reset();
    public void operator+=(float );
    public unsigned int index(unsigned int ,unsigned int );
    public float operator[](unsigned int );
    public void prefetch(unsigned int );
    public unsigned int getCurrent();
    public void setCurrent(unsigned int );
    public unsigned int getLength();
    public float * getBuffer();
    private unsigned int current_;// Offset=0x0 Size=0x4
    private float initial_val_;// Offset=0x4 Size=0x4
    private float data_[4096];// Offset=0x8 Size=0x4000
    private class princeton_digital::delay_t<float,4096> & operator=(class princeton_digital::delay_t<float,4096> & );
    public void __dflt_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class princeton_digital::delay_t<float,4096>// Size=0x4008 (Id=3909)
{
    private void delay_t<float,4096>(class princeton_digital::delay_t<float,4096> & );
    public void delay_t<float,4096>(float );
    public void ~delay_t<float,4096>();
    public void reset();
    public void operator+=(float );
    public unsigned int index(unsigned int ,unsigned int );
    public float operator[](unsigned int );
    public void prefetch(unsigned int );
    public unsigned int getCurrent();
    public void setCurrent(unsigned int );
    public unsigned int getLength();
    public float * getBuffer();
    private unsigned int current_;// Offset=0x0 Size=0x4
    private float initial_val_;// Offset=0x4 Size=0x4
    private float data_[4096];// Offset=0x8 Size=0x4000
    private class princeton_digital::delay_t<float,4096> & operator=(class princeton_digital::delay_t<float,4096> & );
    public void __dflt_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class princeton_digital::allpass_t<float,256>// Size=0x418 (Id=3910)
{
    private void allpass_t<float,256>(class princeton_digital::allpass_t<float,256> & );
    public void allpass_t<float,256>(unsigned int ,float );
    public void ~allpass_t<float,256>();
    public void reset();
    public float process(float );
    public void preprocess(float * ,float * );
    public void preprocess(float * ,float );
    union // Size=0x188 (Id=0)
    {
        void preprocess(float * );// Offset=0x0 Size=0x188
        float output_get();
        void gain1_set(float );
        float gain1_get();
        void delay1_set(unsigned int );
        unsigned int delay1_get();
        unsigned int delay_;// Offset=0x0 Size=0x4
        float feed_forward_;// Offset=0x4 Size=0x4
        float feed_backward_;// Offset=0x8 Size=0x4
        float output_;// Offset=0xc Size=0x4
        class princeton_digital::delay_t<float,256> delay_line_;// Offset=0x10 Size=0x408
    };
    private class princeton_digital::allpass_t<float,256> & operator=(class princeton_digital::allpass_t<float,256> & );
    public void * __vecDelDtor(unsigned int );
};

class princeton_digital::allpass_t<float,256>// Size=0x418 (Id=3911)
{
    private void allpass_t<float,256>(class princeton_digital::allpass_t<float,256> & );
    public void allpass_t<float,256>(unsigned int ,float );
    public void ~allpass_t<float,256>();
    public void reset();
    public float process(float );
    public void preprocess(float * ,float * );
    public void preprocess(float * ,float );
    union // Size=0x188 (Id=0)
    {
        void preprocess(float * );// Offset=0x0 Size=0x188
        float output_get();
        void gain1_set(float );
        float gain1_get();
        void delay1_set(unsigned int );
        unsigned int delay1_get();
        unsigned int delay_;// Offset=0x0 Size=0x4
        float feed_forward_;// Offset=0x4 Size=0x4
        float feed_backward_;// Offset=0x8 Size=0x4
        float output_;// Offset=0xc Size=0x4
        class princeton_digital::delay_t<float,256> delay_line_;// Offset=0x10 Size=0x408
    };
    private class princeton_digital::allpass_t<float,256> & operator=(class princeton_digital::allpass_t<float,256> & );
    public void * __vecDelDtor(unsigned int );
};

class princeton_digital::allpass_t<float,2048>// Size=0x2018 (Id=3912)
{
    private void allpass_t<float,2048>(class princeton_digital::allpass_t<float,2048> & );
    public void allpass_t<float,2048>(unsigned int ,float );
    public void ~allpass_t<float,2048>();
    public void reset();
    public float process(float );
    public void preprocess(float * ,float * );
    public void preprocess(float * ,float );
    public void preprocess(float * );
    public float output_get();
    public void gain1_set(float );
    public float gain1_get();
    public void delay1_set(unsigned int );
    public unsigned int delay1_get();
    private unsigned int delay_;// Offset=0x0 Size=0x4
    private float feed_forward_;// Offset=0x4 Size=0x4
    private float feed_backward_;// Offset=0x8 Size=0x4
    private float output_;// Offset=0xc Size=0x4
    private class princeton_digital::delay_t<float,2048> delay_line_;// Offset=0x10 Size=0x2008
    private class princeton_digital::allpass_t<float,2048> & operator=(class princeton_digital::allpass_t<float,2048> & );
    public void * __vecDelDtor(unsigned int );
};

class princeton_digital::allpass_t<float,2048>// Size=0x2018 (Id=3913)
{
    private void allpass_t<float,2048>(class princeton_digital::allpass_t<float,2048> & );
    public void allpass_t<float,2048>(unsigned int ,float );
    public void ~allpass_t<float,2048>();
    public void reset();
    public float process(float );
    public void preprocess(float * ,float * );
    public void preprocess(float * ,float );
    public void preprocess(float * );
    public float output_get();
    public void gain1_set(float );
    public float gain1_get();
    public void delay1_set(unsigned int );
    public unsigned int delay1_get();
    private unsigned int delay_;// Offset=0x0 Size=0x4
    private float feed_forward_;// Offset=0x4 Size=0x4
    private float feed_backward_;// Offset=0x8 Size=0x4
    private float output_;// Offset=0xc Size=0x4
    private class princeton_digital::delay_t<float,2048> delay_line_;// Offset=0x10 Size=0x2008
    private class princeton_digital::allpass_t<float,2048> & operator=(class princeton_digital::allpass_t<float,2048> & );
    public void * __vecDelDtor(unsigned int );
};

class princeton_digital::vardelay_t<float,16384>// Size=0x10020 (Id=3914)
{
    private void vardelay_t<float,16384>(class princeton_digital::vardelay_t<float,16384> & );
    union // Size=0x62c (Id=0)
    {
        void vardelay_t<float,16384>(unsigned int ,float );// Offset=0x0 Size=0x94
        void ~vardelay_t<float,16384>();
        void reset();
        void preprocess(float * ,float * );// Offset=0x0 Size=0x62c
        void process(float );
        void sample_rate_set(float );
        void delay1_set(unsigned int );
        void delay1_get(unsigned int & );
        float tap1_get();
        float sample_rate_;// Offset=0x0 Size=0x4
        float crossfade_;// Offset=0x4 Size=0x4
        unsigned int delay_;// Offset=0x8 Size=0x4
        unsigned int old_delay_;// Offset=0xc Size=0x4
        unsigned int future_delay_;// Offset=0x10 Size=0x4
        float tap1_;// Offset=0x14 Size=0x4
        class princeton_digital::delay_t<float,16384> delay_line_;// Offset=0x18 Size=0x10008
    };
    private class princeton_digital::vardelay_t<float,16384> & operator=(class princeton_digital::vardelay_t<float,16384> & );
    public void * __vecDelDtor(unsigned int );
};

class princeton_digital::vardelay_t<float,16384>// Size=0x10020 (Id=3915)
{
    private void vardelay_t<float,16384>(class princeton_digital::vardelay_t<float,16384> & );
    union // Size=0x62c (Id=0)
    {
        void vardelay_t<float,16384>(unsigned int ,float );// Offset=0x0 Size=0x94
        void ~vardelay_t<float,16384>();
        void reset();
        void preprocess(float * ,float * );// Offset=0x0 Size=0x62c
        void process(float );
        void sample_rate_set(float );
        void delay1_set(unsigned int );
        void delay1_get(unsigned int & );
        float tap1_get();
        float sample_rate_;// Offset=0x0 Size=0x4
        float crossfade_;// Offset=0x4 Size=0x4
        unsigned int delay_;// Offset=0x8 Size=0x4
        unsigned int old_delay_;// Offset=0xc Size=0x4
        unsigned int future_delay_;// Offset=0x10 Size=0x4
        float tap1_;// Offset=0x14 Size=0x4
        class princeton_digital::delay_t<float,16384> delay_line_;// Offset=0x18 Size=0x10008
    };
    private class princeton_digital::vardelay_t<float,16384> & operator=(class princeton_digital::vardelay_t<float,16384> & );
    public void * __vecDelDtor(unsigned int );
};

class princeton_digital::occlusion_t<float,2>// Size=0x20 (Id=3916)
{
    public void occlusion_t<float,2>(float );
    public void ~occlusion_t<float,2>();
    public void reset();
    public float process(float );
    union // Size=0x15c (Id=0)
    {
        void preprocess(float * ,float * ,unsigned int );// Offset=0x0 Size=0x140
        float output_get();
        void sample_rate_set(float );
        void reference_freq_set(float );
        void level_set(float );
        void hf_level_set(float );
        void recalculate();// Offset=0x0 Size=0x15c
        float sample_rate_;// Offset=0x0 Size=0x4
        float reference_freq_;// Offset=0x4 Size=0x4
        float level_;// Offset=0x8 Size=0x4
        float hf_level_;// Offset=0xc Size=0x4
        float samples_[2];// Offset=0x10 Size=0x8
        float k_;// Offset=0x18 Size=0x4
        float a_;// Offset=0x1c Size=0x4
        void * __vecDelDtor(unsigned int );
    };
};

class princeton_digital::onetap_t<float,2>// Size=0x18 (Id=3917)
{
    private void onetap_t<float,2>(class princeton_digital::onetap_t<float,2> & );
    public void onetap_t<float,2>(unsigned int ,float );
    public void ~onetap_t<float,2>();
    public void reset();
    public float process(float );
    public void gain1_set(float );
    public float gain1_get();
    public void delay1_set(unsigned int );
    public unsigned int delay1_get();
    public float tap1_get();
    private unsigned int delay1_;// Offset=0x0 Size=0x4
    private float gain1_;// Offset=0x4 Size=0x4
    private float tap1_;// Offset=0x8 Size=0x4
    private class princeton_digital::float_delay_2 delay_line_;// Offset=0xc Size=0xc
    private class princeton_digital::onetap_t<float,2> & operator=(class princeton_digital::onetap_t<float,2> & );
    public void * __vecDelDtor(unsigned int );
};

class princeton_digital::onetap_t<float,2>// Size=0x18 (Id=3918)
{
    private void onetap_t<float,2>(class princeton_digital::onetap_t<float,2> & );
    public void onetap_t<float,2>(unsigned int ,float );
    public void ~onetap_t<float,2>();
    public void reset();
    public float process(float );
    public void gain1_set(float );
    public float gain1_get();
    public void delay1_set(unsigned int );
    public unsigned int delay1_get();
    public float tap1_get();
    private unsigned int delay1_;// Offset=0x0 Size=0x4
    private float gain1_;// Offset=0x4 Size=0x4
    private float tap1_;// Offset=0x8 Size=0x4
    private class princeton_digital::float_delay_2 delay_line_;// Offset=0xc Size=0xc
    private class princeton_digital::onetap_t<float,2> & operator=(class princeton_digital::onetap_t<float,2> & );
    public void * __vecDelDtor(unsigned int );
};

class princeton_digital::delay_t<float,2048>// Size=0x2008 (Id=3919)
{
    private void delay_t<float,2048>(class princeton_digital::delay_t<float,2048> & );
    union // Size=0x6c (Id=0)
    {
        void delay_t<float,2048>(float );// Offset=0x0 Size=0x6c
        void ~delay_t<float,2048>();
        void reset();
        void operator+=(float );
        unsigned int index(unsigned int ,unsigned int );
        float operator[](unsigned int );
        void prefetch(unsigned int );
        unsigned int getCurrent();
        void setCurrent(unsigned int );
        unsigned int getLength();
        float * getBuffer();
        unsigned int current_;// Offset=0x0 Size=0x4
        float initial_val_;// Offset=0x4 Size=0x4
        float data_[2048];// Offset=0x8 Size=0x2000
    };
    private class princeton_digital::delay_t<float,2048> & operator=(class princeton_digital::delay_t<float,2048> & );
    public void __dflt_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class princeton_digital::delay_t<float,2048>// Size=0x2008 (Id=3920)
{
    private void delay_t<float,2048>(class princeton_digital::delay_t<float,2048> & );
    union // Size=0x6c (Id=0)
    {
        void delay_t<float,2048>(float );// Offset=0x0 Size=0x6c
        void ~delay_t<float,2048>();
        void reset();
        void operator+=(float );
        unsigned int index(unsigned int ,unsigned int );
        float operator[](unsigned int );
        void prefetch(unsigned int );
        unsigned int getCurrent();
        void setCurrent(unsigned int );
        unsigned int getLength();
        float * getBuffer();
        unsigned int current_;// Offset=0x0 Size=0x4
        float initial_val_;// Offset=0x4 Size=0x4
        float data_[2048];// Offset=0x8 Size=0x2000
    };
    private class princeton_digital::delay_t<float,2048> & operator=(class princeton_digital::delay_t<float,2048> & );
    public void __dflt_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class princeton_digital::delay_t<float,128>// Size=0x208 (Id=3921)
{
    private void delay_t<float,128>(class princeton_digital::delay_t<float,128> & );
    public void delay_t<float,128>(float );
    public void ~delay_t<float,128>();
    public void reset();
    public void operator+=(float );
    public unsigned int index(unsigned int ,unsigned int );
    public float operator[](unsigned int );
    public void prefetch(unsigned int );
    public unsigned int getCurrent();
    public void setCurrent(unsigned int );
    public unsigned int getLength();
    public float * getBuffer();
    private unsigned int current_;// Offset=0x0 Size=0x4
    private float initial_val_;// Offset=0x4 Size=0x4
    private float data_[128];// Offset=0x8 Size=0x200
    private class princeton_digital::delay_t<float,128> & operator=(class princeton_digital::delay_t<float,128> & );
    public void __dflt_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class princeton_digital::delay_t<float,128>// Size=0x208 (Id=3922)
{
    private void delay_t<float,128>(class princeton_digital::delay_t<float,128> & );
    public void delay_t<float,128>(float );
    public void ~delay_t<float,128>();
    public void reset();
    public void operator+=(float );
    public unsigned int index(unsigned int ,unsigned int );
    public float operator[](unsigned int );
    public void prefetch(unsigned int );
    public unsigned int getCurrent();
    public void setCurrent(unsigned int );
    public unsigned int getLength();
    public float * getBuffer();
    private unsigned int current_;// Offset=0x0 Size=0x4
    private float initial_val_;// Offset=0x4 Size=0x4
    private float data_[128];// Offset=0x8 Size=0x200
    private class princeton_digital::delay_t<float,128> & operator=(class princeton_digital::delay_t<float,128> & );
    public void __dflt_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class princeton_digital::delay_t<float,1024>// Size=0x1008 (Id=3923)
{
    private void delay_t<float,1024>(class princeton_digital::delay_t<float,1024> & );
    union // Size=0x6c (Id=0)
    {
        void delay_t<float,1024>(float );// Offset=0x0 Size=0x6c
        void ~delay_t<float,1024>();
        void reset();
        void operator+=(float );
        unsigned int index(unsigned int ,unsigned int );
        float operator[](unsigned int );
        void prefetch(unsigned int );
        unsigned int getCurrent();
        void setCurrent(unsigned int );
        unsigned int getLength();
        float * getBuffer();
        unsigned int current_;// Offset=0x0 Size=0x4
        float initial_val_;// Offset=0x4 Size=0x4
        float data_[1024];// Offset=0x8 Size=0x1000
    };
    private class princeton_digital::delay_t<float,1024> & operator=(class princeton_digital::delay_t<float,1024> & );
    public void __dflt_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class princeton_digital::delay_t<float,1024>// Size=0x1008 (Id=3924)
{
    private void delay_t<float,1024>(class princeton_digital::delay_t<float,1024> & );
    union // Size=0x6c (Id=0)
    {
        void delay_t<float,1024>(float );// Offset=0x0 Size=0x6c
        void ~delay_t<float,1024>();
        void reset();
        void operator+=(float );
        unsigned int index(unsigned int ,unsigned int );
        float operator[](unsigned int );
        void prefetch(unsigned int );
        unsigned int getCurrent();
        void setCurrent(unsigned int );
        unsigned int getLength();
        float * getBuffer();
        unsigned int current_;// Offset=0x0 Size=0x4
        float initial_val_;// Offset=0x4 Size=0x4
        float data_[1024];// Offset=0x8 Size=0x1000
    };
    private class princeton_digital::delay_t<float,1024> & operator=(class princeton_digital::delay_t<float,1024> & );
    public void __dflt_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class princeton_digital::twotap_t<float,1024>// Size=0x1020 (Id=3925)
{
    private void twotap_t<float,1024>(class princeton_digital::twotap_t<float,1024> & );
    public void twotap_t<float,1024>(unsigned int ,float ,unsigned int ,float );
    public void ~twotap_t<float,1024>();
    public void reset();
    public float process(float );
    union // Size=0xac (Id=0)
    {
        void preprocess(float * ,float * ,float * );// Offset=0x0 Size=0xac
        void gain1_set(float );
        float gain1_get();
        void gain2_set(float );
        float gain2_get();
        void delay1_set(unsigned int );
        void delay2_set(unsigned int );
        unsigned int delay1_get();
        unsigned int delay2_get();
        float tap1_get();
        float tap2_get();
        unsigned int delay1_;// Offset=0x0 Size=0x4
        float gain1_;// Offset=0x4 Size=0x4
        float tap1_;// Offset=0x8 Size=0x4
        unsigned int delay2_;// Offset=0xc Size=0x4
        float gain2_;// Offset=0x10 Size=0x4
        float tap2_;// Offset=0x14 Size=0x4
        class princeton_digital::delay_t<float,1024> delay_line_;// Offset=0x18 Size=0x1008
    };
    private class princeton_digital::twotap_t<float,1024> & operator=(class princeton_digital::twotap_t<float,1024> & );
    public void * __vecDelDtor(unsigned int );
};

class princeton_digital::twotap_t<float,1024>// Size=0x1020 (Id=3926)
{
    private void twotap_t<float,1024>(class princeton_digital::twotap_t<float,1024> & );
    public void twotap_t<float,1024>(unsigned int ,float ,unsigned int ,float );
    public void ~twotap_t<float,1024>();
    public void reset();
    public float process(float );
    union // Size=0xac (Id=0)
    {
        void preprocess(float * ,float * ,float * );// Offset=0x0 Size=0xac
        void gain1_set(float );
        float gain1_get();
        void gain2_set(float );
        float gain2_get();
        void delay1_set(unsigned int );
        void delay2_set(unsigned int );
        unsigned int delay1_get();
        unsigned int delay2_get();
        float tap1_get();
        float tap2_get();
        unsigned int delay1_;// Offset=0x0 Size=0x4
        float gain1_;// Offset=0x4 Size=0x4
        float tap1_;// Offset=0x8 Size=0x4
        unsigned int delay2_;// Offset=0xc Size=0x4
        float gain2_;// Offset=0x10 Size=0x4
        float tap2_;// Offset=0x14 Size=0x4
        class princeton_digital::delay_t<float,1024> delay_line_;// Offset=0x18 Size=0x1008
    };
    private class princeton_digital::twotap_t<float,1024> & operator=(class princeton_digital::twotap_t<float,1024> & );
    public void * __vecDelDtor(unsigned int );
};

class princeton_digital::eq3_t<float,2>// Size=0x1c (Id=3927)
{
    private void eq3_t<float,2>(class princeton_digital::eq3_t<float,2> & );
    public void eq3_t<float,2>(unsigned int ,float ,float );
    public void ~eq3_t<float,2>();
    public void reset();
    public float process(float );
    public void gain1_set(float );
    public float gain1_get();
    public void gain2_set(float );
    public float gain2_get();
    public void delay1_set(unsigned int );
    public unsigned int delay1_get();
    public float output_get();
    private unsigned int delay_;// Offset=0x0 Size=0x4
    private float output_;// Offset=0x4 Size=0x4
    private float gain1_;// Offset=0x8 Size=0x4
    private float gain2_;// Offset=0xc Size=0x4
    private class princeton_digital::float_delay_2 delay_line_;// Offset=0x10 Size=0xc
    private class princeton_digital::eq3_t<float,2> & operator=(class princeton_digital::eq3_t<float,2> & );
    public void * __vecDelDtor(unsigned int );
};

class princeton_digital::eq3_t<float,2>// Size=0x1c (Id=3928)
{
    private void eq3_t<float,2>(class princeton_digital::eq3_t<float,2> & );
    public void eq3_t<float,2>(unsigned int ,float ,float );
    public void ~eq3_t<float,2>();
    public void reset();
    public float process(float );
    public void gain1_set(float );
    public float gain1_get();
    public void gain2_set(float );
    public float gain2_get();
    public void delay1_set(unsigned int );
    public unsigned int delay1_get();
    public float output_get();
    private unsigned int delay_;// Offset=0x0 Size=0x4
    private float output_;// Offset=0x4 Size=0x4
    private float gain1_;// Offset=0x8 Size=0x4
    private float gain2_;// Offset=0xc Size=0x4
    private class princeton_digital::float_delay_2 delay_line_;// Offset=0x10 Size=0xc
    private class princeton_digital::eq3_t<float,2> & operator=(class princeton_digital::eq3_t<float,2> & );
    public void * __vecDelDtor(unsigned int );
};

class princeton_digital::lowpass_t<float,2>// Size=0x1c (Id=3929)
{
    private void lowpass_t<float,2>(class princeton_digital::lowpass_t<float,2> & );
    public void lowpass_t<float,2>(unsigned int ,float ,float );
    public void ~lowpass_t<float,2>();
    public void reset();
    public float process(float );
    public void gain1_set(float );
    public float gain1_get();
    public void gain2_set(float );
    public float gain2_get();
    public void delay1_set(unsigned int );
    public unsigned int delay1_get();
    public float output_get();
    private unsigned int delay_;// Offset=0x0 Size=0x4
    private float output_;// Offset=0x4 Size=0x4
    private float gain1_;// Offset=0x8 Size=0x4
    private float gain2_;// Offset=0xc Size=0x4
    private class princeton_digital::float_delay_2 delay_line_;// Offset=0x10 Size=0xc
    private class princeton_digital::lowpass_t<float,2> & operator=(class princeton_digital::lowpass_t<float,2> & );
    public void * __vecDelDtor(unsigned int );
};

class princeton_digital::lowpass_t<float,2>// Size=0x1c (Id=3930)
{
    private void lowpass_t<float,2>(class princeton_digital::lowpass_t<float,2> & );
    public void lowpass_t<float,2>(unsigned int ,float ,float );
    public void ~lowpass_t<float,2>();
    public void reset();
    public float process(float );
    public void gain1_set(float );
    public float gain1_get();
    public void gain2_set(float );
    public float gain2_get();
    public void delay1_set(unsigned int );
    public unsigned int delay1_get();
    public float output_get();
    private unsigned int delay_;// Offset=0x0 Size=0x4
    private float output_;// Offset=0x4 Size=0x4
    private float gain1_;// Offset=0x8 Size=0x4
    private float gain2_;// Offset=0xc Size=0x4
    private class princeton_digital::float_delay_2 delay_line_;// Offset=0x10 Size=0xc
    private class princeton_digital::lowpass_t<float,2> & operator=(class princeton_digital::lowpass_t<float,2> & );
    public void * __vecDelDtor(unsigned int );
};

class princeton_digital::stereo_room_t<float>// Size=0x4b9d0 (Id=3931)
{
    enum input_mode_t
    {
        STEREO=0,
        CH1=1,
        CH2=2,
        CH1_CH2=3
    };
    union // Size=0x4b9d0 (Id=0)
    {
        struct properties_t// Size=0x54 (Id=44370)
        {
            unsigned int reflections_delay;// Offset=0x0 Size=0x4
            unsigned int reverb_delay;// Offset=0x4 Size=0x4
            unsigned int position_l;// Offset=0x8 Size=0x4
            unsigned int position_r;// Offset=0xc Size=0x4
            unsigned int position_l_matrix;// Offset=0x10 Size=0x4
            unsigned int position_r_matrix;// Offset=0x14 Size=0x4
            unsigned int early_diffusion;// Offset=0x18 Size=0x4
            unsigned int late_diffusion;// Offset=0x1c Size=0x4
            unsigned int low_eq_gain;// Offset=0x20 Size=0x4
            unsigned int low_eq_cutoff;// Offset=0x24 Size=0x4
            unsigned int high_eq_gain;// Offset=0x28 Size=0x4
            unsigned int high_eq_cutoff;// Offset=0x2c Size=0x4
            unsigned int rear_delay;// Offset=0x30 Size=0x4
            float room_filter_freq;// Offset=0x34 Size=0x4
            float room_filter_main;// Offset=0x38 Size=0x4
            float room_filter_hf;// Offset=0x3c Size=0x4
            float reflections_gain;// Offset=0x40 Size=0x4
            float reverb_gain;// Offset=0x44 Size=0x4
            float decay_time;// Offset=0x48 Size=0x4
            float density;// Offset=0x4c Size=0x4
            float room_size;// Offset=0x50 Size=0x4
            void properties_t();
        };
        void stereo_room_t<float>(class princeton_digital::stereo_room_t<float> & );
        void stereo_room_t<float>();// Offset=0x0 Size=0x880
        void ~stereo_room_t<float>();
        void sample_rate_set(float );
        float sample_rate_get();
        void properties_set(struct princeton_digital::stereo_room_t<float>::properties_t & );// Offset=0x0 Size=0xcf8
        void properties_get(struct princeton_digital::stereo_room_t<float>::properties_t & );
        void input_mode_set(enum princeton_digital::stereo_room_t<float>::input_mode_t );
        enum princeton_digital::stereo_room_t<float>::input_mode_t input_mode_get();
        void wet_dry_mix_set(float );
        float wet_dry_mix_get();
        void rear_delay_set(unsigned int );
        int rear_delay_get();
        void process(float ** ,float ** ,long );// Offset=0x0 Size=0x1788
        void reset();
        struct princeton_digital::stereo_room_t<float>::properties_t pd_properties_;// Offset=0x4 Size=0x54
        float sample_rate_;// Offset=0x58 Size=0x4
        float wet_dry_mix_;// Offset=0x5c Size=0x4
        float reflections_gain_;// Offset=0x60 Size=0x4
        enum princeton_digital::stereo_room_t<float>::input_mode_t input_mode_;// Offset=0x64 Size=0x4
        class princeton_digital::vardelay_t<float,16384> predelay_left_;// Offset=0x68 Size=0x10020
        class princeton_digital::vardelay_t<float,16384> predelay_right_;// Offset=0x10088 Size=0x10020
        class princeton_digital::occlusion_t<float,2> room_filter_left_;// Offset=0x200a8 Size=0x20
        class princeton_digital::occlusion_t<float,2> room_filter_right_;// Offset=0x200c8 Size=0x20
        float ef_left_tap2_gain_;// Offset=0x200e8 Size=0x4
        float ef_left_tap4_gain_;// Offset=0x200ec Size=0x4
        class princeton_digital::threetap_t<float,512> ef_left_filter1_;// Offset=0x200f0 Size=0x82c
        class princeton_digital::allpass_t<float,128> ef_left_filter2_;// Offset=0x2091c Size=0x218
        class princeton_digital::threetap_t<float,2048> ef_left_filter3_;// Offset=0x20b34 Size=0x202c
        class princeton_digital::allpass_t<float,256> ef_left_filter4_;// Offset=0x22b60 Size=0x418
        class princeton_digital::allpass_t<float,512> ef_left_filter5_;// Offset=0x22f78 Size=0x818
        class princeton_digital::twotap_t<float,1024> ef_left_filter6_;// Offset=0x23790 Size=0x1020
        float ef_right_tap2_gain_;// Offset=0x247b0 Size=0x4
        float ef_right_tap4_gain_;// Offset=0x247b4 Size=0x4
        class princeton_digital::threetap_t<float,512> ef_right_filter1_;// Offset=0x247b8 Size=0x82c
        class princeton_digital::allpass_t<float,128> ef_right_filter2_;// Offset=0x24fe4 Size=0x218
        class princeton_digital::threetap_t<float,2048> ef_right_filter3_;// Offset=0x251fc Size=0x202c
        class princeton_digital::allpass_t<float,256> ef_right_filter4_;// Offset=0x27228 Size=0x418
        class princeton_digital::allpass_t<float,512> ef_right_filter5_;// Offset=0x27640 Size=0x818
        class princeton_digital::twotap_t<float,1024> ef_right_filter6_;// Offset=0x27e58 Size=0x1020
        class princeton_digital::allpass_t<float,512> lf1_filter1_;// Offset=0x28e78 Size=0x818
        class princeton_digital::allpass_t<float,512> lf1_filter2_;// Offset=0x29690 Size=0x818
        class princeton_digital::eq1_t<float,2> lf1_eq1_;// Offset=0x29ea8 Size=0x18
        class princeton_digital::eq2_t<float,2> lf1_eq2_;// Offset=0x29ec0 Size=0x20
        class princeton_digital::eq3_t<float,2> lf1_eq3_;// Offset=0x29ee0 Size=0x1c
        class princeton_digital::twotap_t<float,4096> lf1_delay_;// Offset=0x29efc Size=0x4020
        class princeton_digital::onetap_t<float,2> lf1_decay_;// Offset=0x2df1c Size=0x18
        class princeton_digital::allpass_t<float,512> lf2_filter1_;// Offset=0x2df34 Size=0x818
        class princeton_digital::allpass_t<float,512> lf2_filter2_;// Offset=0x2e74c Size=0x818
        class princeton_digital::eq1_t<float,2> lf2_eq1_;// Offset=0x2ef64 Size=0x18
        class princeton_digital::eq2_t<float,2> lf2_eq2_;// Offset=0x2ef7c Size=0x20
        class princeton_digital::eq3_t<float,2> lf2_eq3_;// Offset=0x2ef9c Size=0x1c
        class princeton_digital::twotap_t<float,4096> lf2_delay_;// Offset=0x2efb8 Size=0x4020
        class princeton_digital::onetap_t<float,2> lf2_decay_;// Offset=0x32fd8 Size=0x18
        class princeton_digital::allpass_t<float,2048> lf3_filter1_;// Offset=0x32ff0 Size=0x2018
        class princeton_digital::allpass2_t<float,2048> lf3_filter2_;// Offset=0x35008 Size=0x201c
        class princeton_digital::allpass_t<float,2048> lf3_filter3_;// Offset=0x37024 Size=0x2018
        class princeton_digital::allpass_t<float,1024> lf3_filter4_;// Offset=0x3903c Size=0x1018
        class princeton_digital::twotap_t<float,4096> lf3_delay_;// Offset=0x3a054 Size=0x4020
        class princeton_digital::lowpass_t<float,2> lf3_decay_;// Offset=0x3e074 Size=0x1c
        class princeton_digital::allpass_t<float,2048> lf4_filter1_;// Offset=0x3e090 Size=0x2018
        class princeton_digital::allpass2_t<float,2048> lf4_filter2_;// Offset=0x400a8 Size=0x201c
        class princeton_digital::allpass_t<float,2048> lf4_filter3_;// Offset=0x420c4 Size=0x2018
        class princeton_digital::allpass_t<float,1024> lf4_filter4_;// Offset=0x440dc Size=0x1018
        class princeton_digital::twotap_t<float,4096> lf4_delay_;// Offset=0x450f4 Size=0x4020
        class princeton_digital::lowpass_t<float,2> lf4_decay_;// Offset=0x49114 Size=0x1c
        class princeton_digital::allpass_t<float,512> wet_left_filter1_;// Offset=0x49130 Size=0x818
        class princeton_digital::allpass_t<float,512> wet_left_filter2_;// Offset=0x49948 Size=0x818
        class princeton_digital::allpass_t<float,512> wet_right_filter1_;// Offset=0x4a160 Size=0x818
        class princeton_digital::allpass_t<float,512> wet_right_filter2_;// Offset=0x4a978 Size=0x818
        class princeton_digital::vardelay_t<float,256> reardelay_left_;// Offset=0x4b190 Size=0x420
        class princeton_digital::vardelay_t<float,256> reardelay_right_;// Offset=0x4b5b0 Size=0x420
        const unsigned int MIN_REFLECTIONS_DELAY;// Offset=0x0 Size=0x4
        const unsigned int MIN_REVERB_DELAY;// Offset=0x0 Size=0x4
        const unsigned int MIN_POSITION;// Offset=0x0 Size=0x4
        const unsigned int MIN_DIFFUSION;// Offset=0x0 Size=0x4
        const unsigned int MIN_LOW_EQ_GAIN;// Offset=0x0 Size=0x4
        const unsigned int MIN_LOW_EQ_CUTOFF;// Offset=0x0 Size=0x4
        const unsigned int MIN_HIGH_EQ_GAIN;// Offset=0x0 Size=0x4
        const unsigned int MIN_HIGH_EQ_CUTOFF;// Offset=0x0 Size=0x4
        const unsigned int MIN_REAR_DELAY;// Offset=0x0 Size=0x4
        const float MIN_ROOM_FILTER_FREQ;// Offset=0x0 Size=0x4
        const float MIN_ROOM_FILTER_MAIN;// Offset=0x0 Size=0x4
        const float MIN_ROOM_FILTER_HF;// Offset=0x0 Size=0x4
        const float MIN_REFLECTIONS_GAIN;// Offset=0x0 Size=0x4
        const float MIN_REVERB_GAIN;// Offset=0x0 Size=0x4
        const float MIN_DECAY_TIME;// Offset=0x0 Size=0x4
        const float MIN_DENSITY;// Offset=0x0 Size=0x4
        const float MIN_SAMPLE_RATE;// Offset=0x0 Size=0x4
        const float MIN_WET_DRY_MIX;// Offset=0x0 Size=0x4
        const float MIN_ROOM_SIZE;// Offset=0x0 Size=0x4
        const unsigned int MAX_REFLECTIONS_DELAY;// Offset=0x0 Size=0x4
        const unsigned int MAX_REVERB_DELAY;// Offset=0x0 Size=0x4
        const unsigned int MAX_POSITION;// Offset=0x0 Size=0x4
        const unsigned int MAX_DIFFUSION;// Offset=0x0 Size=0x4
        const unsigned int MAX_LOW_EQ_GAIN;// Offset=0x0 Size=0x4
        const unsigned int MAX_LOW_EQ_CUTOFF;// Offset=0x0 Size=0x4
        const unsigned int MAX_HIGH_EQ_GAIN;// Offset=0x0 Size=0x4
        const unsigned int MAX_HIGH_EQ_CUTOFF;// Offset=0x0 Size=0x4
        const unsigned int MAX_REAR_DELAY;// Offset=0x0 Size=0x4
        const float MAX_ROOM_FILTER_FREQ;// Offset=0x0 Size=0x4
        const float MAX_ROOM_FILTER_MAIN;// Offset=0x0 Size=0x4
        const float MAX_ROOM_FILTER_HF;// Offset=0x0 Size=0x4
        const float MAX_REFLECTIONS_GAIN;// Offset=0x0 Size=0x4
        const float MAX_REVERB_GAIN;// Offset=0x0 Size=0x4
        const float MAX_DENSITY;// Offset=0x0 Size=0x4
        const float MAX_SAMPLE_RATE;// Offset=0x0 Size=0x4
        const float MAX_WET_DRY_MIX;// Offset=0x0 Size=0x4
        const float MAX_ROOM_SIZE;// Offset=0x0 Size=0x4
        const unsigned int DEFAULT_REFLECTIONS_DELAY;// Offset=0x0 Size=0x4
        const unsigned int DEFAULT_REVERB_DELAY;// Offset=0x0 Size=0x4
        const unsigned int DEFAULT_POSITION;// Offset=0x0 Size=0x4
        const unsigned int DEFAULT_POSITION_MATRIX;// Offset=0x0 Size=0x4
        const unsigned int DEFAULT_EARLY_DIFFUSION;// Offset=0x0 Size=0x4
        const unsigned int DEFAULT_LATE_DIFFUSION;// Offset=0x0 Size=0x4
        const unsigned int DEFAULT_LOW_EQ_GAIN;// Offset=0x0 Size=0x4
        const unsigned int DEFAULT_LOW_EQ_CUTOFF;// Offset=0x0 Size=0x4
        const unsigned int DEFAULT_HIGH_EQ_GAIN;// Offset=0x0 Size=0x4
        const unsigned int DEFAULT_HIGH_EQ_CUTOFF;// Offset=0x0 Size=0x4
        const unsigned int DEFAULT_REAR_DELAY;// Offset=0x0 Size=0x4
        const float DEFAULT_ROOM_FILTER_FREQ;// Offset=0x0 Size=0x4
        const float DEFAULT_ROOM_FILTER_MAIN;// Offset=0x0 Size=0x4
        const float DEFAULT_ROOM_FILTER_HF;// Offset=0x0 Size=0x4
        const float DEFAULT_REFLECTIONS_GAIN;// Offset=0x0 Size=0x4
        const float DEFAULT_REVERB_GAIN;// Offset=0x0 Size=0x4
        const float DEFAULT_DECAY_TIME;// Offset=0x0 Size=0x4
        const float DEFAULT_DENSITY;// Offset=0x0 Size=0x4
        const float DEFAULT_SAMPLE_RATE;// Offset=0x0 Size=0x4
        const float DEFAULT_WET_DRY_MIX;// Offset=0x0 Size=0x4
        const float DEFAULT_ROOM_SIZE;// Offset=0x0 Size=0x4
        const enum princeton_digital::stereo_room_t<float>::input_mode_t DEFAULT_INPUT_MODE;// Offset=0x0 Size=0x4
        class princeton_digital::stereo_room_t<float> & operator=(class princeton_digital::stereo_room_t<float> & );
        void __local_vftable_ctor_closure();
        void * __vecDelDtor(unsigned int );
    };
};

class princeton_digital::stereo_room_t<float>// Size=0x4b9d0 (Id=3932)
{
    enum input_mode_t
    {
        STEREO=0,
        CH1=1,
        CH2=2,
        CH1_CH2=3
    };
    union // Size=0x4b9d0 (Id=0)
    {
        struct properties_t// Size=0x54 (Id=44370)
        {
            unsigned int reflections_delay;// Offset=0x0 Size=0x4
            unsigned int reverb_delay;// Offset=0x4 Size=0x4
            unsigned int position_l;// Offset=0x8 Size=0x4
            unsigned int position_r;// Offset=0xc Size=0x4
            unsigned int position_l_matrix;// Offset=0x10 Size=0x4
            unsigned int position_r_matrix;// Offset=0x14 Size=0x4
            unsigned int early_diffusion;// Offset=0x18 Size=0x4
            unsigned int late_diffusion;// Offset=0x1c Size=0x4
            unsigned int low_eq_gain;// Offset=0x20 Size=0x4
            unsigned int low_eq_cutoff;// Offset=0x24 Size=0x4
            unsigned int high_eq_gain;// Offset=0x28 Size=0x4
            unsigned int high_eq_cutoff;// Offset=0x2c Size=0x4
            unsigned int rear_delay;// Offset=0x30 Size=0x4
            float room_filter_freq;// Offset=0x34 Size=0x4
            float room_filter_main;// Offset=0x38 Size=0x4
            float room_filter_hf;// Offset=0x3c Size=0x4
            float reflections_gain;// Offset=0x40 Size=0x4
            float reverb_gain;// Offset=0x44 Size=0x4
            float decay_time;// Offset=0x48 Size=0x4
            float density;// Offset=0x4c Size=0x4
            float room_size;// Offset=0x50 Size=0x4
            void properties_t();
        };
        void stereo_room_t<float>(class princeton_digital::stereo_room_t<float> & );
        void stereo_room_t<float>();// Offset=0x0 Size=0x880
        void ~stereo_room_t<float>();
        void sample_rate_set(float );
        float sample_rate_get();
        void properties_set(struct princeton_digital::stereo_room_t<float>::properties_t & );// Offset=0x0 Size=0xcf8
        void properties_get(struct princeton_digital::stereo_room_t<float>::properties_t & );
        void input_mode_set(enum princeton_digital::stereo_room_t<float>::input_mode_t );
        enum princeton_digital::stereo_room_t<float>::input_mode_t input_mode_get();
        void wet_dry_mix_set(float );
        float wet_dry_mix_get();
        void rear_delay_set(unsigned int );
        int rear_delay_get();
        void process(float ** ,float ** ,long );// Offset=0x0 Size=0x1788
        void reset();
        struct princeton_digital::stereo_room_t<float>::properties_t pd_properties_;// Offset=0x4 Size=0x54
        float sample_rate_;// Offset=0x58 Size=0x4
        float wet_dry_mix_;// Offset=0x5c Size=0x4
        float reflections_gain_;// Offset=0x60 Size=0x4
        enum princeton_digital::stereo_room_t<float>::input_mode_t input_mode_;// Offset=0x64 Size=0x4
        class princeton_digital::vardelay_t<float,16384> predelay_left_;// Offset=0x68 Size=0x10020
        class princeton_digital::vardelay_t<float,16384> predelay_right_;// Offset=0x10088 Size=0x10020
        class princeton_digital::occlusion_t<float,2> room_filter_left_;// Offset=0x200a8 Size=0x20
        class princeton_digital::occlusion_t<float,2> room_filter_right_;// Offset=0x200c8 Size=0x20
        float ef_left_tap2_gain_;// Offset=0x200e8 Size=0x4
        float ef_left_tap4_gain_;// Offset=0x200ec Size=0x4
        class princeton_digital::threetap_t<float,512> ef_left_filter1_;// Offset=0x200f0 Size=0x82c
        class princeton_digital::allpass_t<float,128> ef_left_filter2_;// Offset=0x2091c Size=0x218
        class princeton_digital::threetap_t<float,2048> ef_left_filter3_;// Offset=0x20b34 Size=0x202c
        class princeton_digital::allpass_t<float,256> ef_left_filter4_;// Offset=0x22b60 Size=0x418
        class princeton_digital::allpass_t<float,512> ef_left_filter5_;// Offset=0x22f78 Size=0x818
        class princeton_digital::twotap_t<float,1024> ef_left_filter6_;// Offset=0x23790 Size=0x1020
        float ef_right_tap2_gain_;// Offset=0x247b0 Size=0x4
        float ef_right_tap4_gain_;// Offset=0x247b4 Size=0x4
        class princeton_digital::threetap_t<float,512> ef_right_filter1_;// Offset=0x247b8 Size=0x82c
        class princeton_digital::allpass_t<float,128> ef_right_filter2_;// Offset=0x24fe4 Size=0x218
        class princeton_digital::threetap_t<float,2048> ef_right_filter3_;// Offset=0x251fc Size=0x202c
        class princeton_digital::allpass_t<float,256> ef_right_filter4_;// Offset=0x27228 Size=0x418
        class princeton_digital::allpass_t<float,512> ef_right_filter5_;// Offset=0x27640 Size=0x818
        class princeton_digital::twotap_t<float,1024> ef_right_filter6_;// Offset=0x27e58 Size=0x1020
        class princeton_digital::allpass_t<float,512> lf1_filter1_;// Offset=0x28e78 Size=0x818
        class princeton_digital::allpass_t<float,512> lf1_filter2_;// Offset=0x29690 Size=0x818
        class princeton_digital::eq1_t<float,2> lf1_eq1_;// Offset=0x29ea8 Size=0x18
        class princeton_digital::eq2_t<float,2> lf1_eq2_;// Offset=0x29ec0 Size=0x20
        class princeton_digital::eq3_t<float,2> lf1_eq3_;// Offset=0x29ee0 Size=0x1c
        class princeton_digital::twotap_t<float,4096> lf1_delay_;// Offset=0x29efc Size=0x4020
        class princeton_digital::onetap_t<float,2> lf1_decay_;// Offset=0x2df1c Size=0x18
        class princeton_digital::allpass_t<float,512> lf2_filter1_;// Offset=0x2df34 Size=0x818
        class princeton_digital::allpass_t<float,512> lf2_filter2_;// Offset=0x2e74c Size=0x818
        class princeton_digital::eq1_t<float,2> lf2_eq1_;// Offset=0x2ef64 Size=0x18
        class princeton_digital::eq2_t<float,2> lf2_eq2_;// Offset=0x2ef7c Size=0x20
        class princeton_digital::eq3_t<float,2> lf2_eq3_;// Offset=0x2ef9c Size=0x1c
        class princeton_digital::twotap_t<float,4096> lf2_delay_;// Offset=0x2efb8 Size=0x4020
        class princeton_digital::onetap_t<float,2> lf2_decay_;// Offset=0x32fd8 Size=0x18
        class princeton_digital::allpass_t<float,2048> lf3_filter1_;// Offset=0x32ff0 Size=0x2018
        class princeton_digital::allpass2_t<float,2048> lf3_filter2_;// Offset=0x35008 Size=0x201c
        class princeton_digital::allpass_t<float,2048> lf3_filter3_;// Offset=0x37024 Size=0x2018
        class princeton_digital::allpass_t<float,1024> lf3_filter4_;// Offset=0x3903c Size=0x1018
        class princeton_digital::twotap_t<float,4096> lf3_delay_;// Offset=0x3a054 Size=0x4020
        class princeton_digital::lowpass_t<float,2> lf3_decay_;// Offset=0x3e074 Size=0x1c
        class princeton_digital::allpass_t<float,2048> lf4_filter1_;// Offset=0x3e090 Size=0x2018
        class princeton_digital::allpass2_t<float,2048> lf4_filter2_;// Offset=0x400a8 Size=0x201c
        class princeton_digital::allpass_t<float,2048> lf4_filter3_;// Offset=0x420c4 Size=0x2018
        class princeton_digital::allpass_t<float,1024> lf4_filter4_;// Offset=0x440dc Size=0x1018
        class princeton_digital::twotap_t<float,4096> lf4_delay_;// Offset=0x450f4 Size=0x4020
        class princeton_digital::lowpass_t<float,2> lf4_decay_;// Offset=0x49114 Size=0x1c
        class princeton_digital::allpass_t<float,512> wet_left_filter1_;// Offset=0x49130 Size=0x818
        class princeton_digital::allpass_t<float,512> wet_left_filter2_;// Offset=0x49948 Size=0x818
        class princeton_digital::allpass_t<float,512> wet_right_filter1_;// Offset=0x4a160 Size=0x818
        class princeton_digital::allpass_t<float,512> wet_right_filter2_;// Offset=0x4a978 Size=0x818
        class princeton_digital::vardelay_t<float,256> reardelay_left_;// Offset=0x4b190 Size=0x420
        class princeton_digital::vardelay_t<float,256> reardelay_right_;// Offset=0x4b5b0 Size=0x420
        const unsigned int MIN_REFLECTIONS_DELAY;// Offset=0x0 Size=0x4
        const unsigned int MIN_REVERB_DELAY;// Offset=0x0 Size=0x4
        const unsigned int MIN_POSITION;// Offset=0x0 Size=0x4
        const unsigned int MIN_DIFFUSION;// Offset=0x0 Size=0x4
        const unsigned int MIN_LOW_EQ_GAIN;// Offset=0x0 Size=0x4
        const unsigned int MIN_LOW_EQ_CUTOFF;// Offset=0x0 Size=0x4
        const unsigned int MIN_HIGH_EQ_GAIN;// Offset=0x0 Size=0x4
        const unsigned int MIN_HIGH_EQ_CUTOFF;// Offset=0x0 Size=0x4
        const unsigned int MIN_REAR_DELAY;// Offset=0x0 Size=0x4
        const float MIN_ROOM_FILTER_FREQ;// Offset=0x0 Size=0x4
        const float MIN_ROOM_FILTER_MAIN;// Offset=0x0 Size=0x4
        const float MIN_ROOM_FILTER_HF;// Offset=0x0 Size=0x4
        const float MIN_REFLECTIONS_GAIN;// Offset=0x0 Size=0x4
        const float MIN_REVERB_GAIN;// Offset=0x0 Size=0x4
        const float MIN_DECAY_TIME;// Offset=0x0 Size=0x4
        const float MIN_DENSITY;// Offset=0x0 Size=0x4
        const float MIN_SAMPLE_RATE;// Offset=0x0 Size=0x4
        const float MIN_WET_DRY_MIX;// Offset=0x0 Size=0x4
        const float MIN_ROOM_SIZE;// Offset=0x0 Size=0x4
        const unsigned int MAX_REFLECTIONS_DELAY;// Offset=0x0 Size=0x4
        const unsigned int MAX_REVERB_DELAY;// Offset=0x0 Size=0x4
        const unsigned int MAX_POSITION;// Offset=0x0 Size=0x4
        const unsigned int MAX_DIFFUSION;// Offset=0x0 Size=0x4
        const unsigned int MAX_LOW_EQ_GAIN;// Offset=0x0 Size=0x4
        const unsigned int MAX_LOW_EQ_CUTOFF;// Offset=0x0 Size=0x4
        const unsigned int MAX_HIGH_EQ_GAIN;// Offset=0x0 Size=0x4
        const unsigned int MAX_HIGH_EQ_CUTOFF;// Offset=0x0 Size=0x4
        const unsigned int MAX_REAR_DELAY;// Offset=0x0 Size=0x4
        const float MAX_ROOM_FILTER_FREQ;// Offset=0x0 Size=0x4
        const float MAX_ROOM_FILTER_MAIN;// Offset=0x0 Size=0x4
        const float MAX_ROOM_FILTER_HF;// Offset=0x0 Size=0x4
        const float MAX_REFLECTIONS_GAIN;// Offset=0x0 Size=0x4
        const float MAX_REVERB_GAIN;// Offset=0x0 Size=0x4
        const float MAX_DENSITY;// Offset=0x0 Size=0x4
        const float MAX_SAMPLE_RATE;// Offset=0x0 Size=0x4
        const float MAX_WET_DRY_MIX;// Offset=0x0 Size=0x4
        const float MAX_ROOM_SIZE;// Offset=0x0 Size=0x4
        const unsigned int DEFAULT_REFLECTIONS_DELAY;// Offset=0x0 Size=0x4
        const unsigned int DEFAULT_REVERB_DELAY;// Offset=0x0 Size=0x4
        const unsigned int DEFAULT_POSITION;// Offset=0x0 Size=0x4
        const unsigned int DEFAULT_POSITION_MATRIX;// Offset=0x0 Size=0x4
        const unsigned int DEFAULT_EARLY_DIFFUSION;// Offset=0x0 Size=0x4
        const unsigned int DEFAULT_LATE_DIFFUSION;// Offset=0x0 Size=0x4
        const unsigned int DEFAULT_LOW_EQ_GAIN;// Offset=0x0 Size=0x4
        const unsigned int DEFAULT_LOW_EQ_CUTOFF;// Offset=0x0 Size=0x4
        const unsigned int DEFAULT_HIGH_EQ_GAIN;// Offset=0x0 Size=0x4
        const unsigned int DEFAULT_HIGH_EQ_CUTOFF;// Offset=0x0 Size=0x4
        const unsigned int DEFAULT_REAR_DELAY;// Offset=0x0 Size=0x4
        const float DEFAULT_ROOM_FILTER_FREQ;// Offset=0x0 Size=0x4
        const float DEFAULT_ROOM_FILTER_MAIN;// Offset=0x0 Size=0x4
        const float DEFAULT_ROOM_FILTER_HF;// Offset=0x0 Size=0x4
        const float DEFAULT_REFLECTIONS_GAIN;// Offset=0x0 Size=0x4
        const float DEFAULT_REVERB_GAIN;// Offset=0x0 Size=0x4
        const float DEFAULT_DECAY_TIME;// Offset=0x0 Size=0x4
        const float DEFAULT_DENSITY;// Offset=0x0 Size=0x4
        const float DEFAULT_SAMPLE_RATE;// Offset=0x0 Size=0x4
        const float DEFAULT_WET_DRY_MIX;// Offset=0x0 Size=0x4
        const float DEFAULT_ROOM_SIZE;// Offset=0x0 Size=0x4
        const enum princeton_digital::stereo_room_t<float>::input_mode_t DEFAULT_INPUT_MODE;// Offset=0x0 Size=0x4
        class princeton_digital::stereo_room_t<float> & operator=(class princeton_digital::stereo_room_t<float> & );
        void __local_vftable_ctor_closure();
        void * __vecDelDtor(unsigned int );
    };
};

enum princeton_digital::stereo_room_t<float>::input_mode_t
{
    STEREO=0,
    CH1=1,
    CH2=2,
    CH1_CH2=3
};

struct princeton_digital::stereo_room_t<float>::properties_t// Size=0x54 (Id=3934)
{
    unsigned int reflections_delay;// Offset=0x0 Size=0x4
    unsigned int reverb_delay;// Offset=0x4 Size=0x4
    unsigned int position_l;// Offset=0x8 Size=0x4
    unsigned int position_r;// Offset=0xc Size=0x4
    unsigned int position_l_matrix;// Offset=0x10 Size=0x4
    unsigned int position_r_matrix;// Offset=0x14 Size=0x4
    unsigned int early_diffusion;// Offset=0x18 Size=0x4
    unsigned int late_diffusion;// Offset=0x1c Size=0x4
    unsigned int low_eq_gain;// Offset=0x20 Size=0x4
    unsigned int low_eq_cutoff;// Offset=0x24 Size=0x4
    unsigned int high_eq_gain;// Offset=0x28 Size=0x4
    unsigned int high_eq_cutoff;// Offset=0x2c Size=0x4
    unsigned int rear_delay;// Offset=0x30 Size=0x4
    float room_filter_freq;// Offset=0x34 Size=0x4
    float room_filter_main;// Offset=0x38 Size=0x4
    float room_filter_hf;// Offset=0x3c Size=0x4
    float reflections_gain;// Offset=0x40 Size=0x4
    float reverb_gain;// Offset=0x44 Size=0x4
    float decay_time;// Offset=0x48 Size=0x4
    float density;// Offset=0x4c Size=0x4
    float room_size;// Offset=0x50 Size=0x4
    void properties_t();
};

enum princeton_digital::stereo_room_t<float>::input_mode_t
{
    STEREO=0,
    CH1=1,
    CH2=2,
    CH1_CH2=3
};

class princeton_digital::threetap_t<float,2048>// Size=0x202c (Id=3936)
{
    private void threetap_t<float,2048>(class princeton_digital::threetap_t<float,2048> & );
    public void threetap_t<float,2048>(unsigned int ,float ,unsigned int ,float ,unsigned int ,float );
    public void ~threetap_t<float,2048>();
    public void reset();
    public float process(float );
    union // Size=0xc4 (Id=0)
    {
        void preprocess3(float * ,float * ,float * ,unsigned int );// Offset=0x0 Size=0xc4
        void gain1_set(float );
        void gain2_set(float );
        void gain3_set(float );
        float gain1_get();
        float gain2_get();
        float gain3_get();
        void delay1_set(unsigned int );
        void delay2_set(unsigned int );
        void delay3_set(unsigned int );
        unsigned int delay1_get();
        unsigned int delay2_get();
        unsigned int delay3_get();
        float tap1_get();
        float tap2_get();
        float tap3_get();
        unsigned int delay1_;// Offset=0x0 Size=0x4
        float gain1_;// Offset=0x4 Size=0x4
        float tap1_;// Offset=0x8 Size=0x4
        unsigned int delay2_;// Offset=0xc Size=0x4
        float gain2_;// Offset=0x10 Size=0x4
        float tap2_;// Offset=0x14 Size=0x4
        unsigned int delay3_;// Offset=0x18 Size=0x4
        float gain3_;// Offset=0x1c Size=0x4
        float tap3_;// Offset=0x20 Size=0x4
        class princeton_digital::delay_t<float,2048> delay_line_;// Offset=0x24 Size=0x2008
    };
    private class princeton_digital::threetap_t<float,2048> & operator=(class princeton_digital::threetap_t<float,2048> & );
    public void * __vecDelDtor(unsigned int );
};

class princeton_digital::threetap_t<float,2048>// Size=0x202c (Id=3937)
{
    private void threetap_t<float,2048>(class princeton_digital::threetap_t<float,2048> & );
    public void threetap_t<float,2048>(unsigned int ,float ,unsigned int ,float ,unsigned int ,float );
    public void ~threetap_t<float,2048>();
    public void reset();
    public float process(float );
    union // Size=0xc4 (Id=0)
    {
        void preprocess3(float * ,float * ,float * ,unsigned int );// Offset=0x0 Size=0xc4
        void gain1_set(float );
        void gain2_set(float );
        void gain3_set(float );
        float gain1_get();
        float gain2_get();
        float gain3_get();
        void delay1_set(unsigned int );
        void delay2_set(unsigned int );
        void delay3_set(unsigned int );
        unsigned int delay1_get();
        unsigned int delay2_get();
        unsigned int delay3_get();
        float tap1_get();
        float tap2_get();
        float tap3_get();
        unsigned int delay1_;// Offset=0x0 Size=0x4
        float gain1_;// Offset=0x4 Size=0x4
        float tap1_;// Offset=0x8 Size=0x4
        unsigned int delay2_;// Offset=0xc Size=0x4
        float gain2_;// Offset=0x10 Size=0x4
        float tap2_;// Offset=0x14 Size=0x4
        unsigned int delay3_;// Offset=0x18 Size=0x4
        float gain3_;// Offset=0x1c Size=0x4
        float tap3_;// Offset=0x20 Size=0x4
        class princeton_digital::delay_t<float,2048> delay_line_;// Offset=0x24 Size=0x2008
    };
    private class princeton_digital::threetap_t<float,2048> & operator=(class princeton_digital::threetap_t<float,2048> & );
    public void * __vecDelDtor(unsigned int );
};

class princeton_digital::stereo_room_3dl2_t<float> : public princeton_digital::stereo_room_t<float>// Size=0x4ba04 (Id=3938)
{
    public void stereo_room_3dl2_t<float>(class princeton_digital::stereo_room_3dl2_t<float> & );
    public void stereo_room_3dl2_t<float>();
    public void ~stereo_room_3dl2_t<float>();
    public void set(enum DSPROPERTY_I3DL2_LISTENERPROPERTY ,struct _I3DL2_LISTENERPROPERTIES & );// Offset=0x0 Size=0xdc
    public void get(struct _I3DL2_LISTENERPROPERTIES & );
    public bool query_support(enum DSPROPERTY_I3DL2_LISTENERPROPERTY );
    private struct _I3DL2_LISTENERPROPERTIES i3dl2_properties_;// Offset=0x4 Size=0x30
    public class princeton_digital::stereo_room_3dl2_t<float> & operator=(class princeton_digital::stereo_room_3dl2_t<float> & );
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class princeton_digital::stereo_room_3dl2_t<float> : public princeton_digital::stereo_room_t<float>// Size=0x4ba04 (Id=3939)
{
    public void stereo_room_3dl2_t<float>(class princeton_digital::stereo_room_3dl2_t<float> & );
    public void stereo_room_3dl2_t<float>();
    public void ~stereo_room_3dl2_t<float>();
    public void set(enum DSPROPERTY_I3DL2_LISTENERPROPERTY ,struct _I3DL2_LISTENERPROPERTIES & );// Offset=0x0 Size=0xdc
    public void get(struct _I3DL2_LISTENERPROPERTIES & );
    public bool query_support(enum DSPROPERTY_I3DL2_LISTENERPROPERTY );
    private struct _I3DL2_LISTENERPROPERTIES i3dl2_properties_;// Offset=0x4 Size=0x30
    public class princeton_digital::stereo_room_3dl2_t<float> & operator=(class princeton_digital::stereo_room_3dl2_t<float> & );
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class princeton_digital::float_delay_2// Size=0xc (Id=3940)
{
    public void float_delay_2(float );
    public void ~float_delay_2();
    public void reset();
    public void operator+=(float );
    public float operator[](unsigned int );
    private float initial_val_;// Offset=0x0 Size=0x4
    private float data_[2];// Offset=0x4 Size=0x8
    public void __dflt_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class princeton_digital::float_delay_2// Size=0xc (Id=3941)
{
    public void float_delay_2(float );
    public void ~float_delay_2();
    public void reset();
    public void operator+=(float );
    public float operator[](unsigned int );
    private float initial_val_;// Offset=0x0 Size=0x4
    private float data_[2];// Offset=0x4 Size=0x8
    public void __dflt_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class princeton_digital::eq2_t<float,2>// Size=0x20 (Id=3942)
{
    private void eq2_t<float,2>(class princeton_digital::eq2_t<float,2> & );
    public void eq2_t<float,2>(unsigned int ,float ,float ,float );
    public void ~eq2_t<float,2>();
    public void reset();
    public float process(float );
    public float output_get();
    public void gain1_set(float );
    public void gain2_set(float );
    public float gain1_get();
    public float gain2_get();
    public void output_gain_set(float );
    public float output_gain_get();
    public void delay1_set(unsigned int );
    public unsigned int delay1_get();
    private unsigned int delay_;// Offset=0x0 Size=0x4
    private float feed_forward_;// Offset=0x4 Size=0x4
    private float feed_backward_;// Offset=0x8 Size=0x4
    private float output_gain_;// Offset=0xc Size=0x4
    private float output_;// Offset=0x10 Size=0x4
    private class princeton_digital::float_delay_2 delay_line_;// Offset=0x14 Size=0xc
    private class princeton_digital::eq2_t<float,2> & operator=(class princeton_digital::eq2_t<float,2> & );
    public void * __vecDelDtor(unsigned int );
};

class princeton_digital::eq2_t<float,2>// Size=0x20 (Id=3943)
{
    private void eq2_t<float,2>(class princeton_digital::eq2_t<float,2> & );
    public void eq2_t<float,2>(unsigned int ,float ,float ,float );
    public void ~eq2_t<float,2>();
    public void reset();
    public float process(float );
    public float output_get();
    public void gain1_set(float );
    public void gain2_set(float );
    public float gain1_get();
    public float gain2_get();
    public void output_gain_set(float );
    public float output_gain_get();
    public void delay1_set(unsigned int );
    public unsigned int delay1_get();
    private unsigned int delay_;// Offset=0x0 Size=0x4
    private float feed_forward_;// Offset=0x4 Size=0x4
    private float feed_backward_;// Offset=0x8 Size=0x4
    private float output_gain_;// Offset=0xc Size=0x4
    private float output_;// Offset=0x10 Size=0x4
    private class princeton_digital::float_delay_2 delay_line_;// Offset=0x14 Size=0xc
    private class princeton_digital::eq2_t<float,2> & operator=(class princeton_digital::eq2_t<float,2> & );
    public void * __vecDelDtor(unsigned int );
};

class princeton_digital::delay_t<float,16384>// Size=0x10008 (Id=3944)
{
    private void delay_t<float,16384>(class princeton_digital::delay_t<float,16384> & );
    public void delay_t<float,16384>(float );
    public void ~delay_t<float,16384>();
    public void reset();
    public void operator+=(float );
    public unsigned int index(unsigned int ,unsigned int );
    public float operator[](unsigned int );
    public void prefetch(unsigned int );
    public unsigned int getCurrent();
    public void setCurrent(unsigned int );
    public unsigned int getLength();
    public float * getBuffer();
    private unsigned int current_;// Offset=0x0 Size=0x4
    private float initial_val_;// Offset=0x4 Size=0x4
    private float data_[16384];// Offset=0x8 Size=0x10000
    private class princeton_digital::delay_t<float,16384> & operator=(class princeton_digital::delay_t<float,16384> & );
    public void __dflt_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class princeton_digital::delay_t<float,16384>// Size=0x10008 (Id=3945)
{
    private void delay_t<float,16384>(class princeton_digital::delay_t<float,16384> & );
    public void delay_t<float,16384>(float );
    public void ~delay_t<float,16384>();
    public void reset();
    public void operator+=(float );
    public unsigned int index(unsigned int ,unsigned int );
    public float operator[](unsigned int );
    public void prefetch(unsigned int );
    public unsigned int getCurrent();
    public void setCurrent(unsigned int );
    public unsigned int getLength();
    public float * getBuffer();
    private unsigned int current_;// Offset=0x0 Size=0x4
    private float initial_val_;// Offset=0x4 Size=0x4
    private float data_[16384];// Offset=0x8 Size=0x10000
    private class princeton_digital::delay_t<float,16384> & operator=(class princeton_digital::delay_t<float,16384> & );
    public void __dflt_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class princeton_digital::threetap_t<float,512>// Size=0x82c (Id=3946)
{
    private void threetap_t<float,512>(class princeton_digital::threetap_t<float,512> & );
    union // Size=0xc4 (Id=0)
    {
        void threetap_t<float,512>(unsigned int ,float ,unsigned int ,float ,unsigned int ,float );// Offset=0x0 Size=0x80
        void ~threetap_t<float,512>();
        void reset();
        float process(float );
        void preprocess3(float * ,float * ,float * ,unsigned int );// Offset=0x0 Size=0xc4
        void gain1_set(float );
        void gain2_set(float );
        void gain3_set(float );
        float gain1_get();
        float gain2_get();
        float gain3_get();
        void delay1_set(unsigned int );
        void delay2_set(unsigned int );
        void delay3_set(unsigned int );
        unsigned int delay1_get();
        unsigned int delay2_get();
        unsigned int delay3_get();
        float tap1_get();
        float tap2_get();
        float tap3_get();
        unsigned int delay1_;// Offset=0x0 Size=0x4
        float gain1_;// Offset=0x4 Size=0x4
        float tap1_;// Offset=0x8 Size=0x4
        unsigned int delay2_;// Offset=0xc Size=0x4
        float gain2_;// Offset=0x10 Size=0x4
        float tap2_;// Offset=0x14 Size=0x4
        unsigned int delay3_;// Offset=0x18 Size=0x4
        float gain3_;// Offset=0x1c Size=0x4
        float tap3_;// Offset=0x20 Size=0x4
        class princeton_digital::delay_t<float,512> delay_line_;// Offset=0x24 Size=0x808
    };
    private class princeton_digital::threetap_t<float,512> & operator=(class princeton_digital::threetap_t<float,512> & );
    public void * __vecDelDtor(unsigned int );
};

class princeton_digital::threetap_t<float,512>// Size=0x82c (Id=3947)
{
    private void threetap_t<float,512>(class princeton_digital::threetap_t<float,512> & );
    union // Size=0xc4 (Id=0)
    {
        void threetap_t<float,512>(unsigned int ,float ,unsigned int ,float ,unsigned int ,float );// Offset=0x0 Size=0x80
        void ~threetap_t<float,512>();
        void reset();
        float process(float );
        void preprocess3(float * ,float * ,float * ,unsigned int );// Offset=0x0 Size=0xc4
        void gain1_set(float );
        void gain2_set(float );
        void gain3_set(float );
        float gain1_get();
        float gain2_get();
        float gain3_get();
        void delay1_set(unsigned int );
        void delay2_set(unsigned int );
        void delay3_set(unsigned int );
        unsigned int delay1_get();
        unsigned int delay2_get();
        unsigned int delay3_get();
        float tap1_get();
        float tap2_get();
        float tap3_get();
        unsigned int delay1_;// Offset=0x0 Size=0x4
        float gain1_;// Offset=0x4 Size=0x4
        float tap1_;// Offset=0x8 Size=0x4
        unsigned int delay2_;// Offset=0xc Size=0x4
        float gain2_;// Offset=0x10 Size=0x4
        float tap2_;// Offset=0x14 Size=0x4
        unsigned int delay3_;// Offset=0x18 Size=0x4
        float gain3_;// Offset=0x1c Size=0x4
        float tap3_;// Offset=0x20 Size=0x4
        class princeton_digital::delay_t<float,512> delay_line_;// Offset=0x24 Size=0x808
    };
    private class princeton_digital::threetap_t<float,512> & operator=(class princeton_digital::threetap_t<float,512> & );
    public void * __vecDelDtor(unsigned int );
};

class princeton_digital::twotap_t<float,4096>// Size=0x4020 (Id=3948)
{
    private void twotap_t<float,4096>(class princeton_digital::twotap_t<float,4096> & );
    union // Size=0x90 (Id=0)
    {
        void twotap_t<float,4096>(unsigned int ,float ,unsigned int ,float );// Offset=0x0 Size=0x90
        void ~twotap_t<float,4096>();
        void reset();
        float process(float );
        void preprocess(float * ,float * ,float * );
        void gain1_set(float );
        float gain1_get();
        void gain2_set(float );
        float gain2_get();
        void delay1_set(unsigned int );
        void delay2_set(unsigned int );
        unsigned int delay1_get();
        unsigned int delay2_get();
        float tap1_get();
        float tap2_get();
        unsigned int delay1_;// Offset=0x0 Size=0x4
        float gain1_;// Offset=0x4 Size=0x4
        float tap1_;// Offset=0x8 Size=0x4
        unsigned int delay2_;// Offset=0xc Size=0x4
        float gain2_;// Offset=0x10 Size=0x4
        float tap2_;// Offset=0x14 Size=0x4
        class princeton_digital::delay_t<float,4096> delay_line_;// Offset=0x18 Size=0x4008
    };
    private class princeton_digital::twotap_t<float,4096> & operator=(class princeton_digital::twotap_t<float,4096> & );
    public void * __vecDelDtor(unsigned int );
};

class princeton_digital::twotap_t<float,4096>// Size=0x4020 (Id=3949)
{
    private void twotap_t<float,4096>(class princeton_digital::twotap_t<float,4096> & );
    union // Size=0x90 (Id=0)
    {
        void twotap_t<float,4096>(unsigned int ,float ,unsigned int ,float );// Offset=0x0 Size=0x90
        void ~twotap_t<float,4096>();
        void reset();
        float process(float );
        void preprocess(float * ,float * ,float * );
        void gain1_set(float );
        float gain1_get();
        void gain2_set(float );
        float gain2_get();
        void delay1_set(unsigned int );
        void delay2_set(unsigned int );
        unsigned int delay1_get();
        unsigned int delay2_get();
        float tap1_get();
        float tap2_get();
        unsigned int delay1_;// Offset=0x0 Size=0x4
        float gain1_;// Offset=0x4 Size=0x4
        float tap1_;// Offset=0x8 Size=0x4
        unsigned int delay2_;// Offset=0xc Size=0x4
        float gain2_;// Offset=0x10 Size=0x4
        float tap2_;// Offset=0x14 Size=0x4
        class princeton_digital::delay_t<float,4096> delay_line_;// Offset=0x18 Size=0x4008
    };
    private class princeton_digital::twotap_t<float,4096> & operator=(class princeton_digital::twotap_t<float,4096> & );
    public void * __vecDelDtor(unsigned int );
};

class princeton_digital::eq1_t<float,2>// Size=0x18 (Id=3950)
{
    private void eq1_t<float,2>(class princeton_digital::eq1_t<float,2> & );
    public void eq1_t<float,2>(unsigned int ,float );
    public void ~eq1_t<float,2>();
    public void reset();
    public float process(float );
    public float output_get();
    public void gain1_set(float );
    public float gain1_get();
    public void delay1_set(unsigned int );
    public unsigned int delay1_get();
    private unsigned int delay_;// Offset=0x0 Size=0x4
    private float output_gain_;// Offset=0x4 Size=0x4
    private float output_;// Offset=0x8 Size=0x4
    private class princeton_digital::float_delay_2 delay_line_;// Offset=0xc Size=0xc
    private class princeton_digital::eq1_t<float,2> & operator=(class princeton_digital::eq1_t<float,2> & );
    public void * __vecDelDtor(unsigned int );
};

class princeton_digital::eq1_t<float,2>// Size=0x18 (Id=3951)
{
    private void eq1_t<float,2>(class princeton_digital::eq1_t<float,2> & );
    public void eq1_t<float,2>(unsigned int ,float );
    public void ~eq1_t<float,2>();
    public void reset();
    public float process(float );
    public float output_get();
    public void gain1_set(float );
    public float gain1_get();
    public void delay1_set(unsigned int );
    public unsigned int delay1_get();
    private unsigned int delay_;// Offset=0x0 Size=0x4
    private float output_gain_;// Offset=0x4 Size=0x4
    private float output_;// Offset=0x8 Size=0x4
    private class princeton_digital::float_delay_2 delay_line_;// Offset=0xc Size=0xc
    private class princeton_digital::eq1_t<float,2> & operator=(class princeton_digital::eq1_t<float,2> & );
    public void * __vecDelDtor(unsigned int );
};

class princeton_digital::delay_t<float,256>// Size=0x408 (Id=3952)
{
    private void delay_t<float,256>(class princeton_digital::delay_t<float,256> & );
    union // Size=0x6c (Id=0)
    {
        void delay_t<float,256>(float );// Offset=0x0 Size=0x6c
        void ~delay_t<float,256>();
        void reset();
        void operator+=(float );
        unsigned int index(unsigned int ,unsigned int );
        float operator[](unsigned int );
        void prefetch(unsigned int );
        unsigned int getCurrent();
        void setCurrent(unsigned int );
        unsigned int getLength();
        float * getBuffer();
        unsigned int current_;// Offset=0x0 Size=0x4
        float initial_val_;// Offset=0x4 Size=0x4
        float data_[256];// Offset=0x8 Size=0x400
    };
    private class princeton_digital::delay_t<float,256> & operator=(class princeton_digital::delay_t<float,256> & );
    public void __dflt_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class princeton_digital::delay_t<float,256>// Size=0x408 (Id=3953)
{
    private void delay_t<float,256>(class princeton_digital::delay_t<float,256> & );
    union // Size=0x6c (Id=0)
    {
        void delay_t<float,256>(float );// Offset=0x0 Size=0x6c
        void ~delay_t<float,256>();
        void reset();
        void operator+=(float );
        unsigned int index(unsigned int ,unsigned int );
        float operator[](unsigned int );
        void prefetch(unsigned int );
        unsigned int getCurrent();
        void setCurrent(unsigned int );
        unsigned int getLength();
        float * getBuffer();
        unsigned int current_;// Offset=0x0 Size=0x4
        float initial_val_;// Offset=0x4 Size=0x4
        float data_[256];// Offset=0x8 Size=0x400
    };
    private class princeton_digital::delay_t<float,256> & operator=(class princeton_digital::delay_t<float,256> & );
    public void __dflt_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class princeton_digital::allpass_t<float,1024>// Size=0x1018 (Id=3954)
{
    private void allpass_t<float,1024>(class princeton_digital::allpass_t<float,1024> & );
    public void allpass_t<float,1024>(unsigned int ,float );
    public void ~allpass_t<float,1024>();
    public void reset();
    public float process(float );
    public void preprocess(float * ,float * );
    public void preprocess(float * ,float );
    public void preprocess(float * );
    public float output_get();
    public void gain1_set(float );
    public float gain1_get();
    public void delay1_set(unsigned int );
    public unsigned int delay1_get();
    private unsigned int delay_;// Offset=0x0 Size=0x4
    private float feed_forward_;// Offset=0x4 Size=0x4
    private float feed_backward_;// Offset=0x8 Size=0x4
    private float output_;// Offset=0xc Size=0x4
    private class princeton_digital::delay_t<float,1024> delay_line_;// Offset=0x10 Size=0x1008
    private class princeton_digital::allpass_t<float,1024> & operator=(class princeton_digital::allpass_t<float,1024> & );
    public void * __vecDelDtor(unsigned int );
};

class princeton_digital::allpass_t<float,1024>// Size=0x1018 (Id=3955)
{
    private void allpass_t<float,1024>(class princeton_digital::allpass_t<float,1024> & );
    public void allpass_t<float,1024>(unsigned int ,float );
    public void ~allpass_t<float,1024>();
    public void reset();
    public float process(float );
    public void preprocess(float * ,float * );
    public void preprocess(float * ,float );
    public void preprocess(float * );
    public float output_get();
    public void gain1_set(float );
    public float gain1_get();
    public void delay1_set(unsigned int );
    public unsigned int delay1_get();
    private unsigned int delay_;// Offset=0x0 Size=0x4
    private float feed_forward_;// Offset=0x4 Size=0x4
    private float feed_backward_;// Offset=0x8 Size=0x4
    private float output_;// Offset=0xc Size=0x4
    private class princeton_digital::delay_t<float,1024> delay_line_;// Offset=0x10 Size=0x1008
    private class princeton_digital::allpass_t<float,1024> & operator=(class princeton_digital::allpass_t<float,1024> & );
    public void * __vecDelDtor(unsigned int );
};

struct princeton_digital::denormal_traits<float>// Size=0x1 (Id=3956)
{
    const float min_value();
};

class princeton_digital::allpass_t<float,128>// Size=0x218 (Id=3957)
{
    private void allpass_t<float,128>(class princeton_digital::allpass_t<float,128> & );
    union // Size=0x2b0 (Id=0)
    {
        void allpass_t<float,128>(unsigned int ,float );// Offset=0x0 Size=0x94
        void ~allpass_t<float,128>();
        void reset();
        float process(float );
        void preprocess(float * ,float * );
        void preprocess(float * ,float );
        void preprocess(float * );// Offset=0x0 Size=0x2b0
        float output_get();
        void gain1_set(float );
        float gain1_get();
        void delay1_set(unsigned int );
        unsigned int delay1_get();
        unsigned int delay_;// Offset=0x0 Size=0x4
        float feed_forward_;// Offset=0x4 Size=0x4
        float feed_backward_;// Offset=0x8 Size=0x4
        float output_;// Offset=0xc Size=0x4
        class princeton_digital::delay_t<float,128> delay_line_;// Offset=0x10 Size=0x208
        class princeton_digital::allpass_t<float,128> & operator=(class princeton_digital::allpass_t<float,128> & );
        void * __vecDelDtor(unsigned int );
    };
};

class princeton_digital::allpass_t<float,128>// Size=0x218 (Id=3958)
{
    private void allpass_t<float,128>(class princeton_digital::allpass_t<float,128> & );
    union // Size=0x2b0 (Id=0)
    {
        void allpass_t<float,128>(unsigned int ,float );// Offset=0x0 Size=0x94
        void ~allpass_t<float,128>();
        void reset();
        float process(float );
        void preprocess(float * ,float * );
        void preprocess(float * ,float );
        void preprocess(float * );// Offset=0x0 Size=0x2b0
        float output_get();
        void gain1_set(float );
        float gain1_get();
        void delay1_set(unsigned int );
        unsigned int delay1_get();
        unsigned int delay_;// Offset=0x0 Size=0x4
        float feed_forward_;// Offset=0x4 Size=0x4
        float feed_backward_;// Offset=0x8 Size=0x4
        float output_;// Offset=0xc Size=0x4
        class princeton_digital::delay_t<float,128> delay_line_;// Offset=0x10 Size=0x208
        class princeton_digital::allpass_t<float,128> & operator=(class princeton_digital::allpass_t<float,128> & );
        void * __vecDelDtor(unsigned int );
    };
};

class princeton_digital::delay_t<float,512>// Size=0x808 (Id=3959)
{
    private void delay_t<float,512>(class princeton_digital::delay_t<float,512> & );
    union // Size=0x6c (Id=0)
    {
        void delay_t<float,512>(float );// Offset=0x0 Size=0x6c
        void ~delay_t<float,512>();
        void reset();
        void operator+=(float );
        unsigned int index(unsigned int ,unsigned int );
        float operator[](unsigned int );
        void prefetch(unsigned int );
        unsigned int getCurrent();
        void setCurrent(unsigned int );
        unsigned int getLength();
        float * getBuffer();
        unsigned int current_;// Offset=0x0 Size=0x4
        float initial_val_;// Offset=0x4 Size=0x4
        float data_[512];// Offset=0x8 Size=0x800
    };
    private class princeton_digital::delay_t<float,512> & operator=(class princeton_digital::delay_t<float,512> & );
    public void __dflt_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class princeton_digital::delay_t<float,512>// Size=0x808 (Id=3960)
{
    private void delay_t<float,512>(class princeton_digital::delay_t<float,512> & );
    union // Size=0x6c (Id=0)
    {
        void delay_t<float,512>(float );// Offset=0x0 Size=0x6c
        void ~delay_t<float,512>();
        void reset();
        void operator+=(float );
        unsigned int index(unsigned int ,unsigned int );
        float operator[](unsigned int );
        void prefetch(unsigned int );
        unsigned int getCurrent();
        void setCurrent(unsigned int );
        unsigned int getLength();
        float * getBuffer();
        unsigned int current_;// Offset=0x0 Size=0x4
        float initial_val_;// Offset=0x4 Size=0x4
        float data_[512];// Offset=0x8 Size=0x800
    };
    private class princeton_digital::delay_t<float,512> & operator=(class princeton_digital::delay_t<float,512> & );
    public void __dflt_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class princeton_digital::allpass_t<float,512>// Size=0x818 (Id=3961)
{
    private void allpass_t<float,512>(class princeton_digital::allpass_t<float,512> & );
    public void allpass_t<float,512>(unsigned int ,float );
    public void ~allpass_t<float,512>();
    public void reset();
    public float process(float );
    union // Size=0x188 (Id=0)
    {
        void preprocess(float * ,float * );// Offset=0x0 Size=0x174
        void preprocess(float * ,float );
        void preprocess(float * );// Offset=0x0 Size=0x188
        float output_get();
        void gain1_set(float );
        float gain1_get();
        void delay1_set(unsigned int );
        unsigned int delay1_get();
        unsigned int delay_;// Offset=0x0 Size=0x4
        float feed_forward_;// Offset=0x4 Size=0x4
        float feed_backward_;// Offset=0x8 Size=0x4
        float output_;// Offset=0xc Size=0x4
        class princeton_digital::delay_t<float,512> delay_line_;// Offset=0x10 Size=0x808
    };
    private class princeton_digital::allpass_t<float,512> & operator=(class princeton_digital::allpass_t<float,512> & );
    public void * __vecDelDtor(unsigned int );
};

class princeton_digital::allpass_t<float,512>// Size=0x818 (Id=3962)
{
    private void allpass_t<float,512>(class princeton_digital::allpass_t<float,512> & );
    public void allpass_t<float,512>(unsigned int ,float );
    public void ~allpass_t<float,512>();
    public void reset();
    public float process(float );
    union // Size=0x188 (Id=0)
    {
        void preprocess(float * ,float * );// Offset=0x0 Size=0x174
        void preprocess(float * ,float );
        void preprocess(float * );// Offset=0x0 Size=0x188
        float output_get();
        void gain1_set(float );
        float gain1_get();
        void delay1_set(unsigned int );
        unsigned int delay1_get();
        unsigned int delay_;// Offset=0x0 Size=0x4
        float feed_forward_;// Offset=0x4 Size=0x4
        float feed_backward_;// Offset=0x8 Size=0x4
        float output_;// Offset=0xc Size=0x4
        class princeton_digital::delay_t<float,512> delay_line_;// Offset=0x10 Size=0x808
    };
    private class princeton_digital::allpass_t<float,512> & operator=(class princeton_digital::allpass_t<float,512> & );
    public void * __vecDelDtor(unsigned int );
};

struct AIFFLOOP// Size=0x6 (Id=3963)
{
    unsigned short wPlayMode;// Offset=0x0 Size=0x2
    unsigned short wStartMarker;// Offset=0x2 Size=0x2
    unsigned short wEndMarker;// Offset=0x4 Size=0x2
    void MakeNativeEndian();
};

struct DLSLOOP// Size=0x10 (Id=3964)
{
    unsigned long dwSize;// Offset=0x0 Size=0x4
    unsigned long dwLoopType;// Offset=0x4 Size=0x4
    unsigned long dwLoopStart;// Offset=0x8 Size=0x4
    unsigned long dwLoopLength;// Offset=0xc Size=0x4
    void MakeNativeEndian();
};

struct IXAudioEffectManager// Size=0x1 (Id=3965)
{
    unsigned long AddRef();
    unsigned long Release();
    HRESULT QueryEffectSize(struct XAUDIOFXINIT * ,unsigned long * );
    HRESULT CreateEffect(struct XAUDIOFXINIT * ,struct IXAudioBatchAllocator * ,struct IXAudioEffect ** );
    HRESULT RegisterEffects(struct XAUDIOFXREGISTER * );
    HRESULT UnregisterEffects(struct XAUDIOFXUNREGISTER * );
};

struct IXAudioSourceEffect : public IXAudioEffect// Size=0x4 (Id=3966)
{
    unsigned long AddRef();
    unsigned long Release();
    HRESULT GetInfo(struct XAUDIOFXINFO * );
    HRESULT GetParam(unsigned char ,unsigned char ,union XAUDIOFXPARAM * );
    HRESULT SetParam(unsigned char ,unsigned char ,union XAUDIOFXPARAM * );
    HRESULT GetContext(void ** );
    HRESULT Process(struct IXAudioFrameBuffer * ,struct IXAudioFrameBuffer * );
    HRESULT SubmitPacket(struct XAUDIOPACKET * ,unsigned char );
    HRESULT FlushPackets();
    HRESULT SubmitSourceBuffer(struct XAUDIOSOURCEBUFFER * ,unsigned char );
    HRESULT FlushSourceBuffers();
    HRESULT GetState(unsigned char * );
    HRESULT Start();
    HRESULT Stop(unsigned char );
    HRESULT Discontinuity();
    HRESULT GetPacketPosition(union XAUDIOPACKETPOSITION * );
    HRESULT SetPacketPosition(union XAUDIOPACKETPOSITION * );
    HRESULT GetPacketLoopCount(unsigned long * );
    HRESULT SetPacketLoopCount(unsigned long );
    HRESULT GetPacketContext(void ** );
    HRESULT GetStreamPosition(unsigned long * );
    HRESULT GetVolume(float * );
    HRESULT SetVolume(float );
    HRESULT GetPitch(float * );
    HRESULT SetPitch(float );
    HRESULT GetFrequencyScale(float * );
    HRESULT SetFrequencyScale(float );
    HRESULT GetFormat(struct XAUDIOSOURCEFORMAT * ,unsigned char * );
    HRESULT SetFormat(struct XAUDIOSOURCEFORMAT * ,unsigned char );
    void IXAudioSourceEffect(struct IXAudioSourceEffect & );
    void IXAudioSourceEffect();
    struct IXAudioSourceEffect & operator=(struct IXAudioSourceEffect & );
};

struct IXAudioSourceEffect : public IXAudioEffect// Size=0x4 (Id=3967)
{
    unsigned long AddRef();
    unsigned long Release();
    HRESULT GetInfo(struct XAUDIOFXINFO * );
    HRESULT GetParam(unsigned char ,unsigned char ,union XAUDIOFXPARAM * );
    HRESULT SetParam(unsigned char ,unsigned char ,union XAUDIOFXPARAM * );
    HRESULT GetContext(void ** );
    HRESULT Process(struct IXAudioFrameBuffer * ,struct IXAudioFrameBuffer * );
    HRESULT SubmitPacket(struct XAUDIOPACKET * ,unsigned char );
    HRESULT FlushPackets();
    HRESULT SubmitSourceBuffer(struct XAUDIOSOURCEBUFFER * ,unsigned char );
    HRESULT FlushSourceBuffers();
    HRESULT GetState(unsigned char * );
    HRESULT Start();
    HRESULT Stop(unsigned char );
    HRESULT Discontinuity();
    HRESULT GetPacketPosition(union XAUDIOPACKETPOSITION * );
    HRESULT SetPacketPosition(union XAUDIOPACKETPOSITION * );
    HRESULT GetPacketLoopCount(unsigned long * );
    HRESULT SetPacketLoopCount(unsigned long );
    HRESULT GetPacketContext(void ** );
    HRESULT GetStreamPosition(unsigned long * );
    HRESULT GetVolume(float * );
    HRESULT SetVolume(float );
    HRESULT GetPitch(float * );
    HRESULT SetPitch(float );
    HRESULT GetFrequencyScale(float * );
    HRESULT SetFrequencyScale(float );
    HRESULT GetFormat(struct XAUDIOSOURCEFORMAT * ,unsigned char * );
    HRESULT SetFormat(struct XAUDIOSOURCEFORMAT * ,unsigned char );
    void IXAudioSourceEffect(struct IXAudioSourceEffect & );
    void IXAudioSourceEffect();
    struct IXAudioSourceEffect & operator=(struct IXAudioSourceEffect & );
};

struct XAUDIOPERFCOUNTER// Size=0x30 (Id=3968)
{
    unsigned long long MinTicks;// Offset=0x0 Size=0x8
    unsigned long long AvgTicks;// Offset=0x8 Size=0x8
    unsigned long long MaxTicks;// Offset=0x10 Size=0x8
    unsigned long long QueryTicks;// Offset=0x18 Size=0x8
    unsigned long long TicksPerSecond;// Offset=0x20 Size=0x8
    unsigned long long FrameCount;// Offset=0x28 Size=0x8
    float GetAveragePercent();
    float GetMinimumPercent();
    float GetMaximumPercent();
};

struct IXAudioSubmixVoice : public IXAudioVoice// Size=0x1 (Id=3969)
{
    HRESULT GetVoiceFormat(union XAUDIOFORMAT * );
    HRESULT SetVoiceFormat(union XAUDIOFORMAT * ,struct XAUDIOVOICEOUTPUT * );
};

struct IXAudioRouterEffect : public IXAudioEffect// Size=0x4 (Id=3970)
{
    unsigned long AddRef();
    unsigned long Release();
    HRESULT GetInfo(struct XAUDIOFXINFO * );
    HRESULT GetParam(unsigned char ,unsigned char ,union XAUDIOFXPARAM * );
    HRESULT SetParam(unsigned char ,unsigned char ,union XAUDIOFXPARAM * );
    HRESULT GetContext(void ** );
    HRESULT Process(struct IXAudioFrameBuffer * ,struct IXAudioFrameBuffer * );
    HRESULT GetMode(unsigned char * );
    HRESULT SetMode(unsigned char );
    HRESULT GetChannelMap(struct XAUDIOCHANNELMAP * ,unsigned long ,unsigned long * );
    HRESULT SetChannelMap(struct XAUDIOCHANNELMAP * );
    HRESULT GetChannelVolume(struct XAUDIOCHANNELVOLUME * );
    HRESULT SetChannelVolume(struct XAUDIOCHANNELVOLUME * );
    void IXAudioRouterEffect(struct IXAudioRouterEffect & );
    void IXAudioRouterEffect();
    struct IXAudioRouterEffect & operator=(struct IXAudioRouterEffect & );
};

struct IXAudioRouterEffect : public IXAudioEffect// Size=0x4 (Id=3971)
{
    unsigned long AddRef();
    unsigned long Release();
    HRESULT GetInfo(struct XAUDIOFXINFO * );
    HRESULT GetParam(unsigned char ,unsigned char ,union XAUDIOFXPARAM * );
    HRESULT SetParam(unsigned char ,unsigned char ,union XAUDIOFXPARAM * );
    HRESULT GetContext(void ** );
    HRESULT Process(struct IXAudioFrameBuffer * ,struct IXAudioFrameBuffer * );
    HRESULT GetMode(unsigned char * );
    HRESULT SetMode(unsigned char );
    HRESULT GetChannelMap(struct XAUDIOCHANNELMAP * ,unsigned long ,unsigned long * );
    HRESULT SetChannelMap(struct XAUDIOCHANNELMAP * );
    HRESULT GetChannelVolume(struct XAUDIOCHANNELVOLUME * );
    HRESULT SetChannelVolume(struct XAUDIOCHANNELVOLUME * );
    void IXAudioRouterEffect(struct IXAudioRouterEffect & );
    void IXAudioRouterEffect();
    struct IXAudioRouterEffect & operator=(struct IXAudioRouterEffect & );
};

struct RIFFHEADER// Size=0x8 (Id=3972)
{
    unsigned long dwChunkId;// Offset=0x0 Size=0x4
    unsigned long dwDataSize;// Offset=0x4 Size=0x4
    void MakeNativeFromLE();
    void MakeNativeFromBE();
};

struct MIDILOOP// Size=0x18 (Id=3973)
{
    unsigned long dwCuePointId;// Offset=0x0 Size=0x4
    unsigned long dwType;// Offset=0x4 Size=0x4
    unsigned long dwStart;// Offset=0x8 Size=0x4
    unsigned long dwEnd;// Offset=0xc Size=0x4
    unsigned long dwFraction;// Offset=0x10 Size=0x4
    unsigned long dwPlayCount;// Offset=0x14 Size=0x4
    void MakeNativeEndian();
};

struct MIDISAMPLE// Size=0x24 (Id=3974)
{
    unsigned long dwManufacturerId;// Offset=0x0 Size=0x4
    unsigned long dwProductId;// Offset=0x4 Size=0x4
    unsigned long dwSamplePeriod;// Offset=0x8 Size=0x4
    unsigned long dwUnityNode;// Offset=0xc Size=0x4
    unsigned long dwPitchFraction;// Offset=0x10 Size=0x4
    unsigned long dwSMPTEFormat;// Offset=0x14 Size=0x4
    unsigned long dwSMPTEOffset;// Offset=0x18 Size=0x4
    unsigned long dwLoopCount;// Offset=0x1c Size=0x4
    unsigned long dwSamplerData;// Offset=0x20 Size=0x4
    struct MIDILOOP aLoops[0];
    void MakeNativeEndian();
};

struct DLSSAMPLE// Size=0x14 (Id=3975)
{
    unsigned long dwSize;// Offset=0x0 Size=0x4
    unsigned short wUnityNote;// Offset=0x4 Size=0x2
    short nFineTune;// Offset=0x6 Size=0x2
    long lGain;// Offset=0x8 Size=0x4
    unsigned long dwOptions;// Offset=0xc Size=0x4
    unsigned long dwLoopCount;// Offset=0x10 Size=0x4
    struct DLSLOOP aLoops[0];
    void MakeNativeEndian();
};

struct AIFFFORMAT// Size=0x14 (Id=3976)
{
    unsigned short nChannels;// Offset=0x0 Size=0x2
    unsigned long dwSampleCount;// Offset=0x2 Size=0x4
    unsigned short wBitsPerSample;// Offset=0x6 Size=0x2
    unsigned short wFrequencyExponent;// Offset=0x8 Size=0x2
    unsigned long dwFrequencyMantissa;// Offset=0xa Size=0x4
    unsigned short wReserved;// Offset=0xe Size=0x2
    unsigned long dwCompression;// Offset=0x10 Size=0x4
    void MakeNativeEndian();
};

struct AIFFSOUNDHDR// Size=0x8 (Id=3977)
{
    unsigned long dwOffset;// Offset=0x0 Size=0x4
    unsigned long dwBlockSize;// Offset=0x4 Size=0x4
    void MakeNativeEndian();
};

struct AIFFINSTRUMENT// Size=0x14 (Id=3978)
{
    unsigned char bBaseNote;// Offset=0x0 Size=0x1
    unsigned char bDetune;// Offset=0x1 Size=0x1
    unsigned char bLowNote;// Offset=0x2 Size=0x1
    unsigned char bHighNote;// Offset=0x3 Size=0x1
    unsigned char bLowVelocity;// Offset=0x4 Size=0x1
    unsigned char bHighVelocity;// Offset=0x5 Size=0x1
    short nGain;// Offset=0x6 Size=0x2
    struct AIFFLOOP SustainLoop;// Offset=0x8 Size=0x6
    struct AIFFLOOP ReleaseLoop;// Offset=0xe Size=0x6
    void MakeNativeEndian();
};

struct AIFFMARKER// Size=0x8 (Id=3979)
{
    unsigned short wMarkerId;// Offset=0x0 Size=0x2
    unsigned long dwPosition;// Offset=0x2 Size=0x4
    unsigned char bNameLength;// Offset=0x6 Size=0x1
    char szMarkerName[1];// Offset=0x7 Size=0x1
    void MakeNativeEndian();
};

struct AIFFMARKERHDR// Size=0x2 (Id=3980)
{
    unsigned short wMarkerCount;// Offset=0x0 Size=0x2
    void MakeNativeEndian();
};

struct XAUDIOVOICEOUTPUTENTRY// Size=0x8 (Id=3981)
{
    struct IXAudioVoice * pDestVoice;// Offset=0x0 Size=0x4
    struct XAUDIOCHANNELMAP * pChannelMap;// Offset=0x4 Size=0x4
};

struct IXAudioVoice// Size=0x1 (Id=3982)
{
    unsigned long AddRef();
    unsigned long Release();
    HRESULT GetEffectState(unsigned char ,unsigned char * );
    HRESULT SetEffectState(unsigned char ,unsigned char );
    HRESULT GetEffectParam(unsigned char ,unsigned char ,unsigned char ,union XAUDIOFXPARAM * );
    HRESULT SetEffectParam(unsigned char ,unsigned char ,unsigned char ,union XAUDIOFXPARAM * );
    HRESULT SetVoiceOutput(struct XAUDIOVOICEOUTPUT * );
    HRESULT SetVoiceOutputVolume(struct XAUDIOVOICEOUTPUTVOLUME * );
    HRESULT GetVoiceContext(void ** );
    HRESULT GetVoiceState(unsigned char * );
    HRESULT GetVoiceType(unsigned char * );
};

struct IXAudioRenderEffect : public IXAudioEffect// Size=0x4 (Id=3983)
{
    unsigned long AddRef();
    unsigned long Release();
    HRESULT GetInfo(struct XAUDIOFXINFO * );
    HRESULT GetParam(unsigned char ,unsigned char ,union XAUDIOFXPARAM * );
    HRESULT SetParam(unsigned char ,unsigned char ,union XAUDIOFXPARAM * );
    HRESULT GetContext(void ** );
    HRESULT Process(struct IXAudioFrameBuffer * ,struct IXAudioFrameBuffer * );
    HRESULT SetCallback(void  ( * )(struct XAUDIORENDERFXCALLBACK * ));
    void IXAudioRenderEffect(struct IXAudioRenderEffect & );
    void IXAudioRenderEffect();
    struct IXAudioRenderEffect & operator=(struct IXAudioRenderEffect & );
};

struct IXAudioRenderEffect : public IXAudioEffect// Size=0x4 (Id=3984)
{
    unsigned long AddRef();
    unsigned long Release();
    HRESULT GetInfo(struct XAUDIOFXINFO * );
    HRESULT GetParam(unsigned char ,unsigned char ,union XAUDIOFXPARAM * );
    HRESULT SetParam(unsigned char ,unsigned char ,union XAUDIOFXPARAM * );
    HRESULT GetContext(void ** );
    HRESULT Process(struct IXAudioFrameBuffer * ,struct IXAudioFrameBuffer * );
    HRESULT SetCallback(void  ( * )(struct XAUDIORENDERFXCALLBACK * ));
    void IXAudioRenderEffect(struct IXAudioRenderEffect & );
    void IXAudioRenderEffect();
    struct IXAudioRenderEffect & operator=(struct IXAudioRenderEffect & );
};

struct IXAudioFrameBuffer// Size=0x1 (Id=3985)
{
    unsigned long AddRef();
    unsigned long Release();
    HRESULT GetMaxFormat(union XAUDIOFORMAT * );
    HRESULT GetProcessingData(struct XAUDIOFRAMEBUFDATA * );
    HRESULT GetContext(void ** );
    HRESULT Prepare(union XAUDIOFORMAT * ,unsigned char );
    HRESULT Unprepare();
    HRESULT SetExternalBuffer(union XAUDIOFORMAT * ,float * );
};

struct IXAudioMasteringVoice : public IXAudioVoice// Size=0x1 (Id=3986)
{
    HRESULT GetVoiceFormat(union XAUDIOFORMAT * );
};

struct D3D::Edram// Size=0x324 (Id=3987)
{
    struct _RTL_CRITICAL_SECTION CriticalSection;// Offset=0x0 Size=0x1c
    unsigned long FreeMemory;// Offset=0x1c Size=0x4
    unsigned long BitArray[193];// Offset=0x20 Size=0x304
};

struct X3DAUDIO_DISTANCE_CURVE_POINT// Size=0x8 (Id=3988)
{
    float Distance;// Offset=0x0 Size=0x4
    float DSPSetting;// Offset=0x4 Size=0x4
};

struct X3DAUDIO_EMITTER// Size=0x64 (Id=3989)
{
    struct X3DAUDIO_CONE * pCone;// Offset=0x0 Size=0x4
    struct _D3DVECTOR OrientFront;// Offset=0x4 Size=0xc
    struct _D3DVECTOR OrientTop;// Offset=0x10 Size=0xc
    struct _D3DVECTOR Position;// Offset=0x1c Size=0xc
    struct _D3DVECTOR Velocity;// Offset=0x28 Size=0xc
    float InnerRadius;// Offset=0x34 Size=0x4
    float InnerRadiusAngle;// Offset=0x38 Size=0x4
    unsigned int ChannelCount;// Offset=0x3c Size=0x4
    float ChannelRadius;// Offset=0x40 Size=0x4
    float * pChannelAzimuths;// Offset=0x44 Size=0x4
    struct X3DAUDIO_DISTANCE_CURVE * pVolumeCurve;// Offset=0x48 Size=0x4
    struct X3DAUDIO_DISTANCE_CURVE * pLFECurve;// Offset=0x4c Size=0x4
    struct X3DAUDIO_DISTANCE_CURVE * pLPFDirectCurve;// Offset=0x50 Size=0x4
    struct X3DAUDIO_DISTANCE_CURVE * pLPFReverbCurve;// Offset=0x54 Size=0x4
    struct X3DAUDIO_DISTANCE_CURVE * pReverbCurve;// Offset=0x58 Size=0x4
    float CurveDistanceScaler;// Offset=0x5c Size=0x4
    float DopplerScaler;// Offset=0x60 Size=0x4
};

struct X3DAUDIO_DSP_SETTINGS// Size=0x30 (Id=3990)
{
    float * pMatrixCoefficients;// Offset=0x0 Size=0x4
    float * pDelayTimes;// Offset=0x4 Size=0x4
    unsigned int SrcChannelCount;// Offset=0x8 Size=0x4
    unsigned int DstChannelCount;// Offset=0xc Size=0x4
    float LPFDirectCoefficient;// Offset=0x10 Size=0x4
    float LPFReverbCoefficient;// Offset=0x14 Size=0x4
    float ReverbLevel;// Offset=0x18 Size=0x4
    float DopplerFactor;// Offset=0x1c Size=0x4
    float EmitterToListenerAngle;// Offset=0x20 Size=0x4
    float EmitterToListenerDistance;// Offset=0x24 Size=0x4
    float EmitterVelocityComponent;// Offset=0x28 Size=0x4
    float ListenerVelocityComponent;// Offset=0x2c Size=0x4
};

struct X3DAUDIO_LISTENER// Size=0x34 (Id=3991)
{
    struct _D3DVECTOR OrientFront;// Offset=0x0 Size=0xc
    struct _D3DVECTOR OrientTop;// Offset=0xc Size=0xc
    struct _D3DVECTOR Position;// Offset=0x18 Size=0xc
    struct _D3DVECTOR Velocity;// Offset=0x24 Size=0xc
    struct X3DAUDIO_CONE * pCone;// Offset=0x30 Size=0x4
};

struct X3DAUDIO_CONE// Size=0x20 (Id=3992)
{
    float InnerAngle;// Offset=0x0 Size=0x4
    float OuterAngle;// Offset=0x4 Size=0x4
    float InnerVolume;// Offset=0x8 Size=0x4
    float OuterVolume;// Offset=0xc Size=0x4
    float InnerLPF;// Offset=0x10 Size=0x4
    float OuterLPF;// Offset=0x14 Size=0x4
    float InnerReverb;// Offset=0x18 Size=0x4
    float OuterReverb;// Offset=0x1c Size=0x4
};

struct X3DAUDIO_HANDLE_PRIVATE// Size=0x14 (Id=3993)
{
    unsigned int u32SpeakerChannelMask;// Offset=0x0 Size=0x4
    unsigned int u32FinalMixChannelCount;// Offset=0x4 Size=0x4
    unsigned int u32FinalMixLFEChannelIndex;// Offset=0x8 Size=0x4
    float fl32SpeedOfSound;// Offset=0xc Size=0x4
    float fl32MaxVelocityComponent;// Offset=0x10 Size=0x4
};

struct X3DAUDIO_DISTANCE_CURVE_POINT// Size=0x8 (Id=3994)
{
    float Distance;// Offset=0x0 Size=0x4
    float DSPSetting;// Offset=0x4 Size=0x4
};

struct X3DAUDIO_DISTANCE_CURVE// Size=0x8 (Id=3995)
{
    struct X3DAUDIO_DISTANCE_CURVE_POINT * pPoints;// Offset=0x0 Size=0x4
    unsigned int PointCount;// Offset=0x4 Size=0x4
};

struct X3DAUDIO_HANDLE_PRIVATE// Size=0x14 (Id=3996)
{
    unsigned int u32SpeakerChannelMask;// Offset=0x0 Size=0x4
    unsigned int u32FinalMixChannelCount;// Offset=0x4 Size=0x4
    unsigned int u32FinalMixLFEChannelIndex;// Offset=0x8 Size=0x4
    float fl32SpeedOfSound;// Offset=0xc Size=0x4
    float fl32MaxVelocityComponent;// Offset=0x10 Size=0x4
};

struct X3DAUDIO_LISTENER// Size=0x34 (Id=3997)
{
    struct _D3DVECTOR OrientFront;// Offset=0x0 Size=0xc
    struct _D3DVECTOR OrientTop;// Offset=0xc Size=0xc
    struct _D3DVECTOR Position;// Offset=0x18 Size=0xc
    struct _D3DVECTOR Velocity;// Offset=0x24 Size=0xc
    struct X3DAUDIO_CONE * pCone;// Offset=0x30 Size=0x4
};

struct X3DAUDIO_EMITTER// Size=0x64 (Id=3998)
{
    struct X3DAUDIO_CONE * pCone;// Offset=0x0 Size=0x4
    struct _D3DVECTOR OrientFront;// Offset=0x4 Size=0xc
    struct _D3DVECTOR OrientTop;// Offset=0x10 Size=0xc
    struct _D3DVECTOR Position;// Offset=0x1c Size=0xc
    struct _D3DVECTOR Velocity;// Offset=0x28 Size=0xc
    float InnerRadius;// Offset=0x34 Size=0x4
    float InnerRadiusAngle;// Offset=0x38 Size=0x4
    unsigned int ChannelCount;// Offset=0x3c Size=0x4
    float ChannelRadius;// Offset=0x40 Size=0x4
    float * pChannelAzimuths;// Offset=0x44 Size=0x4
    struct X3DAUDIO_DISTANCE_CURVE * pVolumeCurve;// Offset=0x48 Size=0x4
    struct X3DAUDIO_DISTANCE_CURVE * pLFECurve;// Offset=0x4c Size=0x4
    struct X3DAUDIO_DISTANCE_CURVE * pLPFDirectCurve;// Offset=0x50 Size=0x4
    struct X3DAUDIO_DISTANCE_CURVE * pLPFReverbCurve;// Offset=0x54 Size=0x4
    struct X3DAUDIO_DISTANCE_CURVE * pReverbCurve;// Offset=0x58 Size=0x4
    float CurveDistanceScaler;// Offset=0x5c Size=0x4
    float DopplerScaler;// Offset=0x60 Size=0x4
};

struct X3DAUDIO_DISTANCE_CURVE// Size=0x8 (Id=3999)
{
    struct X3DAUDIO_DISTANCE_CURVE_POINT * pPoints;// Offset=0x0 Size=0x4
    unsigned int PointCount;// Offset=0x4 Size=0x4
};

class D3D::CBlocker// Size=0x18 (Id=4000)
{
    union // Size=0xc8 (Id=0)
    {
        class D3D::CDevice * m_pDevice;// Offset=0x0 Size=0x4
        enum _D3DBLOCKTYPE m_BlockType;// Offset=0x4 Size=0x4
        unsigned long m_StartTimeoutFence;// Offset=0x8 Size=0x4
        unsigned long m_StartTimeoutTime;// Offset=0xc Size=0x4
        unsigned long m_StartThreadTime;// Offset=0x10 Size=0x4
        unsigned long m_StartQpcTime;// Offset=0x14 Size=0x4
        void CBlocker(class D3D::CDevice * ,enum _D3DBLOCKTYPE );
        void ~CBlocker();// Offset=0x0 Size=0xc8
        int Check();// Offset=0x0 Size=0xd8
    };
    public void * __vecDelDtor(unsigned int );
};

struct `anonymous-namespace'::ClearAsyncResourcesMaskSignal// Size=0x4 (Id=4001)
{
    unsigned long m_Signal;// Offset=0x0 Size=0x4
    void ClearAsyncResourcesMaskSignal(unsigned long );
    unsigned long long operator()(unsigned long long );
};

struct `anonymous-namespace'::ClearAsyncResourcesMaskSignal// Size=0x4 (Id=4002)
{
    unsigned long m_Signal;// Offset=0x0 Size=0x4
    void ClearAsyncResourcesMaskSignal(unsigned long );
    unsigned long long operator()(unsigned long long );
};

struct `anonymous-namespace'::InsertAsyncResourcesMaskSignal// Size=0x1 (Id=4003)
{
    unsigned long long operator()(unsigned long long );
};

struct `anonymous-namespace'::InsertAsyncResourcesMaskSignal// Size=0x1 (Id=4004)
{
    unsigned long long operator()(unsigned long long );
};

enum XAUDIO::XMA_PLAYBACK_CREATE
{
    XMA_PLAYBACK_CREATE_DEFER_CONTEXT_ALLOCATION=1,
    XMA_PLAYBACK_CREATE_USE_PROVIDED_MEMORY=2
};

enum XAUDIO::XMA_PLAYBACK_STATUS
{
    XMA_PLAYBACK_STATUS_LOCK_REQUESTED=65536,
    XMA_PLAYBACK_STATUS_LOCK_OBTAINED=131072,
    XMA_PLAYBACK_STATUS_HW_ALLOCATED=262144,
    XMA_PLAYBACK_STATUS_HW_HANG=524288
};

enum XAUDIO::XMA_PLAYBACK_ERROR
{
    XMA_PLAYBACK_ERROR_NONE=0,
    XMA_PLAYBACK_ERROR_WRITE_BUFFER_INVALID=1,
    XMA_PLAYBACK_ERROR_INSUFFICIENT_WRITE_BUFFER_SPACE=2,
    XMA_PLAYBACK_ERROR_READ_BUFFER_INVALID=4,
    XMA_PLAYBACK_ERROR_FRAME_CROSSES_BOUNDARY_INTO_INVALID_READ_BUFFER=8,
    XMA_PLAYBACK_ERROR_FRAME_CROSSES_BOTH_READ_BUFFER_BOUNDARIES=16
};

enum _XAUDIOPIXEVENT
{
    XAUDIOPIXEVENT_ENGINE_PROCESS=0,
    XAUDIOPIXEVENT_VOICE_START=1,
    XAUDIOPIXEVENT_VOICE_STOP=2,
    XAUDIOPIXEVENT_VOICE_PROCESS=3
};

struct XAUDIO::XMA_PLAYBACK_INIT// Size=0xc (Id=4009)
{
    unsigned long sampleRate;// Offset=0x0 Size=0x4
    unsigned long outputBufferSizeInSamples;// Offset=0x4 Size=0x4
    unsigned char channelCount;// Offset=0x8 Size=0x1
    unsigned char subframesToDecode;// Offset=0x9 Size=0x1
};

struct XAUDIO::XMA_PLAYBACK_POSITION// Size=0xc (Id=4010)
{
    void * pCurrentData;// Offset=0x0 Size=0x4
    unsigned long dwPacketBitOffset;// Offset=0x4 Size=0x4
    unsigned long dwCurrentSubframe;// Offset=0x8 Size=0x4
};

enum _XAUDIOPIXCOUNTER
{
    XAUDIOPIXCOUNTER_ACTIVEVOICES_TOTAL=0,
    XAUDIOPIXCOUNTER_ACTIVEVOICES_SUBMIX=1,
    XAUDIOPIXCOUNTER_ACTIVEVOICES_SOURCE=2,
    XAUDIOPIXCOUNTER_XMA_ACTIVEVOICES=3,
    XAUDIOPIXCOUNTER_XMA_SAMPLESREADY=4,
    XAUDIOPIXCOUNTER_XMA_SAMPLESUSED=5,
    XAUDIOPIXCOUNTER_PCM_ACTIVEVOICES=6,
    XAUDIOPIXCOUNTER_COUNT=7
};

class CXaudioPixAutoEvent// Size=0x4 (Id=4012)
{
    public void CXaudioPixAutoEvent(enum _XAUDIOPIXEVENT );
    public void ~CXaudioPixAutoEvent();
    private enum _XAUDIOPIXEVENT m_eventID;// Offset=0x0 Size=0x4
    public void * __vecDelDtor(unsigned int );
};

enum VGT_DI_INDEX_SIZE
{
    DI_INDEX_SIZE_16_BIT=0,
    DI_INDEX_SIZE_32_BIT=1
};

struct D3D::QueueRecord_Initialize// Size=0xfc (Id=4014)
{
    unsigned long Header;// Offset=0x0 Size=0x4
    struct D3D::WorkerState State;// Offset=0x4 Size=0xf8
};

enum CP_FUNCTION
{
    CP_FUNCTION_NEVER=0,
    CP_FUNCTION_LESS=1,
    CP_FUNCTION_LEQUAL=2,
    CP_FUNCTION_EQUAL=3,
    CP_FUNCTION_NOTEQUAL=4,
    CP_FUNCTION_GEQUAL=5,
    CP_FUNCTION_GREATER=6,
    CP_FUNCTION_ALWAYS=7
};

enum SurfaceEndian
{
    ENDIAN_NONE=0,
    ENDIAN_8IN16=1,
    ENDIAN_8IN32=2,
    ENDIAN_16IN32=3,
    ENDIAN_8IN64=4,
    ENDIAN_8IN128=5
};

struct D3D::RingAllocChunk// Size=0x10 (Id=4017)
{
    unsigned long dwEnd;// Offset=0x0 Size=0x4
    unsigned long Data[3];// Offset=0x4 Size=0xc
};

enum BlendOpX
{
    BLENDX_ZERO=0,
    BLENDX_ONE=1,
    BLENDX_SRC_COLOR=4,
    BLENDX_ONE_MINUS_SRC_COLOR=5,
    BLENDX_SRC_ALPHA=6,
    BLENDX_ONE_MINUS_SRC_ALPHA=7,
    BLENDX_DST_COLOR=8,
    BLENDX_ONE_MINUS_DST_COLOR=9,
    BLENDX_DST_ALPHA=10,
    BLENDX_ONE_MINUS_DST_ALPHA=11,
    BLENDX_CONSTANT_COLOR=12,
    BLENDX_ONE_MINUS_CONSTANT_COLOR=13,
    BLENDX_CONSTANT_ALPHA=14,
    BLENDX_ONE_MINUS_CONSTANT_ALPHA=15,
    BLENDX_SRC_ALPHA_SATURATE=16
};

enum CombFuncX
{
    COMB_DST_PLUS_SRC=0,
    COMB_SRC_MINUS_DST=1,
    COMB_MIN_DST_SRC=2,
    COMB_MAX_DST_SRC=3,
    COMB_DST_MINUS_SRC=4,
    COMB_DST_PLUS_SRC_BIAS=5
};

struct D3D::RenderStateInit// Size=0xc (Id=4020)
{
    unsigned long  ( * GetRenderStateCall)(struct D3DDevice * );// Offset=0x0 Size=0x4
    void  ( * SetRenderStateCall)(struct D3DDevice * ,unsigned long );// Offset=0x4 Size=0x4
    unsigned long InitialState;// Offset=0x8 Size=0x4
};

struct D3D::SamplerStateInit// Size=0xc (Id=4021)
{
    unsigned long  ( * GetSamplerStateCall)(struct D3DDevice * ,unsigned long );// Offset=0x0 Size=0x4
    void  ( * SetSamplerStateCall)(struct D3DDevice * ,unsigned long ,unsigned long );// Offset=0x4 Size=0x4
    unsigned long InitialState;// Offset=0x8 Size=0x4
};

enum XAUDIOSRCALGORITHM
{
    XAUDIOSRCALGORITHM_LINEAR=0,
    XAUDIOSRCALGORITHM_NATIVE=1,
    XAUDIOSRCALGORITHM_DOUBLE=2,
    XAUDIOSRCALGORITHM_LINEARVECTOR=3,
    XAUDIOSRCALGORITHM_NATIVEVECTOR=4,
    XAUDIOSRCALGORITHM_DOUBLEVECTOR=5,
    XAUDIOSRCALGORITHM_COUNT=6
};

struct XAUDIO::XAUDIOSRCHDR// Size=0x4c (Id=4023)
{
    struct XAUDIO::XAUDIOSRCSOURCE Source;// Offset=0x0 Size=0x14
    struct XAUDIO::XAUDIOSRCDEST Dest;// Offset=0x14 Size=0x10
    struct XAUDIO::XAUDIOSRCVOLUME Volume;// Offset=0x24 Size=0x8
    struct XAUDIO::XAUDIOSRCPRIVATE Private;// Offset=0x2c Size=0x20
};

struct XAUDIO::SRC::Native : public XAUDIO::SRC::Common// Size=0x1 (Id=4024)
{
};

struct XAUDIO::SRC::Linear : public XAUDIO::SRC::Common// Size=0x1 (Id=4025)
{
    void SaveFloatValue(float * ,struct __vector4 );
};

struct XAUDIO::SRC::DoubleVector : public XAUDIO::SRC::Common// Size=0x1 (Id=4026)
{
};

struct XAUDIO::SRC::LinearVector : public XAUDIO::SRC::Common// Size=0x1 (Id=4027)
{
};

struct XAUDIO::SRC::Double : public XAUDIO::SRC::Common// Size=0x1 (Id=4028)
{
};

struct XAUDIO::SRC::NativeVector : public XAUDIO::SRC::Common// Size=0x1 (Id=4029)
{
};

struct XAUDIO::SRC::Common// Size=0x1 (Id=4030)
{
};

enum XAUDIOSRCCHANNELCOUNT
{
    XAUDIOSRCCHANNELCOUNT_N=0,
    XAUDIOSRCCHANNELCOUNT_1=1,
    XAUDIOSRCCHANNELCOUNT_2=2,
    XAUDIOSRCCHANNELCOUNT_4=3,
    XAUDIOSRCCHANNELCOUNT_6=4,
    XAUDIOSRCCHANNELCOUNT_COUNT=5
};

struct SHORTLE// Size=0x2 (Id=4032)
{
    unsigned short value;// Offset=0x0 Size=0x2
    void SHORTLE(unsigned long long );
};

class XAUDIO::CAutoLock<XAUDIO::CCriticalSection>// Size=0x4 (Id=4033)
{
    protected class XAUDIO::CCriticalSection * m_pLock;// Offset=0x0 Size=0x4
    public void CAutoLock<XAUDIO::CCriticalSection>(class XAUDIO::CCriticalSection * );
    public void ~CAutoLock<XAUDIO::CCriticalSection>();
    public void * __vecDelDtor(unsigned int );
};

struct _DISPLAY_INFORMATION// Size=0x58 (Id=4034)
{
    unsigned short FrontBufferWidth;// Offset=0x0 Size=0x2
    unsigned short FrontBufferHeight;// Offset=0x2 Size=0x2
    unsigned char FrontBufferColorFormat;// Offset=0x4 Size=0x1
    unsigned char FrontBufferPixelFormat;// Offset=0x5 Size=0x1
    unsigned char __align0[2];// Offset=0x6 Size=0x2
    struct _D3DPRIVATE_SCALER_PARAMETERS ScalerParameters;// Offset=0x8 Size=0x38
    unsigned short DisplayWindowOverscanLeft;// Offset=0x40 Size=0x2
    unsigned short DisplayWindowOverscanTop;// Offset=0x42 Size=0x2
    unsigned short DisplayWindowOverscanRight;// Offset=0x44 Size=0x2
    unsigned short DisplayWindowOverscanBottom;// Offset=0x46 Size=0x2
    unsigned short DisplayWidth;// Offset=0x48 Size=0x2
    unsigned short DisplayHeight;// Offset=0x4a Size=0x2
    float DisplayRefreshRate;// Offset=0x4c Size=0x4
    unsigned long DisplayInterlaced;// Offset=0x50 Size=0x4
    unsigned char DisplayColorFormat;// Offset=0x54 Size=0x1
    unsigned char __align1[1];// Offset=0x55 Size=0x1
    unsigned short ActualDisplayWidth;// Offset=0x56 Size=0x2
};

struct _SYSTEM_COMMAND_BUFFER// Size=0x94 (Id=4035)
{
    unsigned long CommandBase;// Offset=0x0 Size=0x4
    unsigned long CommandSize;// Offset=0x4 Size=0x4
    unsigned long FrontBufferBase;// Offset=0x8 Size=0x4
    unsigned long FrontBufferFormat;// Offset=0xc Size=0x4
    unsigned long FrontBufferColorSpace;// Offset=0x10 Size=0x4
    unsigned long FrontBufferWidth;// Offset=0x14 Size=0x4
    unsigned long FrontBufferHeight;// Offset=0x18 Size=0x4
    unsigned long XamScalerParametersDirtyFlag;// Offset=0x1c Size=0x4
    struct _D3DPRIVATE_SCALER_PARAMETERS XamScalerParameters;// Offset=0x20 Size=0x38
    struct _D3DPRIVATE_SCALER_PARAMETERS TitleScalerParameters;// Offset=0x58 Size=0x38
    unsigned long ScalerLock;// Offset=0x90 Size=0x4
};

struct _PERSIST_DISPLAY// Size=0xc (Id=4036)
{
    void * BaseAddress;// Offset=0x0 Size=0x4
    unsigned short Width;// Offset=0x4 Size=0x2
    unsigned short Height;// Offset=0x6 Size=0x2
    unsigned long Format;// Offset=0x8 Size=0x4
};

union CLIPPER_DEBUG_REG12// Size=0x4 (Id=4037)
{
    struct <unnamed-type-bitfields>// Size=0x4 (Id=45566)
    {
        unsigned int ALWAYS_ZERO:10;// Offset=0x0 Size=0x4 BitOffset=0x16 BitSize=0xa
        unsigned int primic_to_clprim_valid:1;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x1
        unsigned int clipcc_vertex_store_indx:2;// Offset=0x0 Size=0x4 BitOffset=0x13 BitSize=0x2
        unsigned int vertval_bits_vertex_cc_next_valid:4;// Offset=0x0 Size=0x4 BitOffset=0xf BitSize=0x4
        unsigned int clip_priority_seq_indx_out:2;// Offset=0x0 Size=0x4 BitOffset=0xd BitSize=0x2
        unsigned int clip_priority_seq_indx_vert:2;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x2
        unsigned int clip_priority_available_clip_verts:5;// Offset=0x0 Size=0x4 BitOffset=0x6 BitSize=0x5
        unsigned int clip_vertex_fifo_empty:1;// Offset=0x0 Size=0x4 BitOffset=0x5 BitSize=0x1
        unsigned int clip_priority_available_vte_out_clip:5;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x5
    };
    struct CLIPPER_DEBUG_REG12::<unnamed-type-bitfields> bitfields;// Offset=0x0 Size=0x4
    struct CLIPPER_DEBUG_REG12::<unnamed-type-bitfields> bits;// Offset=0x0 Size=0x4
    unsigned int u32All;// Offset=0x0 Size=0x4
    int i32All;// Offset=0x0 Size=0x4
    float f32All;// Offset=0x0 Size=0x4
};

struct CLIPPER_DEBUG_REG12::<unnamed-type-bitfields>// Size=0x4 (Id=4038)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned int ALWAYS_ZERO:10;// Offset=0x0 Size=0x4 BitOffset=0x16 BitSize=0xa
        unsigned int primic_to_clprim_valid:1;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x1
        unsigned int clipcc_vertex_store_indx:2;// Offset=0x0 Size=0x4 BitOffset=0x13 BitSize=0x2
        unsigned int vertval_bits_vertex_cc_next_valid:4;// Offset=0x0 Size=0x4 BitOffset=0xf BitSize=0x4
        unsigned int clip_priority_seq_indx_out:2;// Offset=0x0 Size=0x4 BitOffset=0xd BitSize=0x2
        unsigned int clip_priority_seq_indx_vert:2;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x2
        unsigned int clip_priority_available_clip_verts:5;// Offset=0x0 Size=0x4 BitOffset=0x6 BitSize=0x5
        unsigned int clip_vertex_fifo_empty:1;// Offset=0x0 Size=0x4 BitOffset=0x5 BitSize=0x1
        unsigned int clip_priority_available_vte_out_clip:5;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x5
    };
};

class D3D::Hang// Size=0xc (Id=4039)
{
    union // Size=0xc (Id=0)
    {
        void  ( * m_pHangCallback)(char * );// Offset=0x0 Size=0x4
        unsigned long  ( * m_pReadReg)(unsigned long );// Offset=0x4 Size=0x4
        void  ( * m_pWriteReg)(unsigned long ,unsigned long );// Offset=0x8 Size=0x4
        void Hang(void  ( * )(char * ),unsigned long  ( * )(unsigned long ),void  ( * )(unsigned long ,unsigned long ));
        void Out(char * ,<btNoType> );// Offset=0x0 Size=0x80
    };
};

struct D3D::StatusRegister// Size=0x8 (Id=4040)
{
    unsigned long Mask;// Offset=0x0 Size=0x4
    char * Description;// Offset=0x4 Size=0x4
};

struct D3D::HangGroup// Size=0x18 (Id=4041)
{
    unsigned long ControlRegister;// Offset=0x0 Size=0x4
    unsigned long ReadRegister;// Offset=0x4 Size=0x4
    unsigned long ControlValue;// Offset=0x8 Size=0x4
    unsigned long IndexShift;// Offset=0xc Size=0x4
    unsigned long Count;// Offset=0x10 Size=0x4
    char * Description;// Offset=0x14 Size=0x4
};

struct D3D::HangRegister// Size=0x8 (Id=4042)
{
    unsigned long Register;// Offset=0x0 Size=0x4
    char * Description;// Offset=0x4 Size=0x4
};

union CLIPPER_DEBUG_REG13// Size=0x4 (Id=4043)
{
    struct <unnamed-type-bitfields>// Size=0x4 (Id=45606)
    {
        unsigned int ALWAYS_ZERO:5;// Offset=0x0 Size=0x4 BitOffset=0x1b BitSize=0x5
        unsigned int sm0_current_state:7;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0x7
        unsigned int sm0_inv_to_clip_data_valid_0:1;// Offset=0x0 Size=0x4 BitOffset=0x13 BitSize=0x1
        unsigned int sm0_inv_to_clip_data_valid_1:1;// Offset=0x0 Size=0x4 BitOffset=0x12 BitSize=0x1
        unsigned int sm0_vertex_clip_cnt:4;// Offset=0x0 Size=0x4 BitOffset=0xe BitSize=0x4
        unsigned int sm0_ps_engh_valid:1;// Offset=0x0 Size=0x4 BitOffset=0xd BitSize=0x1
        unsigned int sm0_ps_ucp_valid:1;// Offset=0x0 Size=0x4 BitOffset=0xc BitSize=0x1
        unsigned int sm0_ps_expand:1;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x1
        unsigned int sm0_prim_end_state:7;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x7
        unsigned int sm0_clip_vert_cnt:4;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x4
    };
    struct CLIPPER_DEBUG_REG13::<unnamed-type-bitfields> bitfields;// Offset=0x0 Size=0x4
    struct CLIPPER_DEBUG_REG13::<unnamed-type-bitfields> bits;// Offset=0x0 Size=0x4
    unsigned int u32All;// Offset=0x0 Size=0x4
    int i32All;// Offset=0x0 Size=0x4
    float f32All;// Offset=0x0 Size=0x4
};

struct CLIPPER_DEBUG_REG13::<unnamed-type-bitfields>// Size=0x4 (Id=4044)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned int ALWAYS_ZERO:5;// Offset=0x0 Size=0x4 BitOffset=0x1b BitSize=0x5
        unsigned int sm0_current_state:7;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0x7
        unsigned int sm0_inv_to_clip_data_valid_0:1;// Offset=0x0 Size=0x4 BitOffset=0x13 BitSize=0x1
        unsigned int sm0_inv_to_clip_data_valid_1:1;// Offset=0x0 Size=0x4 BitOffset=0x12 BitSize=0x1
        unsigned int sm0_vertex_clip_cnt:4;// Offset=0x0 Size=0x4 BitOffset=0xe BitSize=0x4
        unsigned int sm0_ps_engh_valid:1;// Offset=0x0 Size=0x4 BitOffset=0xd BitSize=0x1
        unsigned int sm0_ps_ucp_valid:1;// Offset=0x0 Size=0x4 BitOffset=0xc BitSize=0x1
        unsigned int sm0_ps_expand:1;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x1
        unsigned int sm0_prim_end_state:7;// Offset=0x0 Size=0x4 BitOffset=0x4 BitSize=0x7
        unsigned int sm0_clip_vert_cnt:4;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x4
    };
};

enum SurfaceNumberX
{
    NUMBERX_UREPEAT=0,
    NUMBERX_SREPEAT=1,
    NUMBERX_UINTEGER=2,
    NUMBERX_SINTEGER=3,
    NUMBERX_FLOAT=7
};

enum SurfaceSwap
{
    SWAP_LOWRED=0,
    SWAP_LOWBLUE=1
};

enum DepthformatX
{
    DEPTHX_24_8=0,
    DEPTHX_24_8_FLOAT=1
};

enum ColorArrayX
{
    ARRAYX_2D_COLOR=0,
    ARRAYX_3D_SLICE_COLOR=1
};

struct XAUDIO::XMA_PLAYBACK_INIT// Size=0xc (Id=4049)
{
    unsigned long sampleRate;// Offset=0x0 Size=0x4
    unsigned long outputBufferSizeInSamples;// Offset=0x4 Size=0x4
    unsigned char channelCount;// Offset=0x8 Size=0x1
    unsigned char subframesToDecode;// Offset=0x9 Size=0x1
};

struct _SCALER_PARAMETERS_NOTIFICATION// Size=0x40 (Id=4050)
{
    unsigned short FrontBufferWidth;// Offset=0x0 Size=0x2
    unsigned short FrontBufferHeight;// Offset=0x2 Size=0x2
    unsigned short DisplayWidth;// Offset=0x4 Size=0x2
    unsigned short DisplayHeight;// Offset=0x6 Size=0x2
    struct _D3DPRIVATE_SCALER_PARAMETERS ScalerParameters;// Offset=0x8 Size=0x38
};

struct _HARDWARE_SCALER_PARAMETERS// Size=0x580 (Id=4051)
{
    struct _FILTER vFilter;// Offset=0x0 Size=0x28c
    struct _FILTER hFilter;// Offset=0x28c Size=0x28c
    unsigned long OverscanTop;// Offset=0x518 Size=0x4
    unsigned long OverscanBottom;// Offset=0x51c Size=0x4
    unsigned long OverscanLeft;// Offset=0x520 Size=0x4
    unsigned long OverscanRight;// Offset=0x524 Size=0x4
    unsigned long SurfacePitch;// Offset=0x528 Size=0x4
    unsigned long SurfaceOffsetX;// Offset=0x52c Size=0x4
    unsigned long SurfaceOffsetY;// Offset=0x530 Size=0x4
    unsigned long SurfaceStartX;// Offset=0x534 Size=0x4
    unsigned long SurfaceStartY;// Offset=0x538 Size=0x4
    unsigned long SurfaceEndX;// Offset=0x53c Size=0x4
    unsigned long SurfaceEndY;// Offset=0x540 Size=0x4
    unsigned long DataFormat;// Offset=0x544 Size=0x4
    unsigned long ViewportStart;// Offset=0x548 Size=0x4
    unsigned long ViewportSize;// Offset=0x54c Size=0x4
    unsigned long ScalerEnable;// Offset=0x550 Size=0x4
    unsigned long TapCntl;// Offset=0x554 Size=0x4
    unsigned long ManualRepCntl;// Offset=0x558 Size=0x4
    unsigned long HorzFilterCntl;// Offset=0x55c Size=0x4
    unsigned long HorzScaleRatio;// Offset=0x560 Size=0x4
    unsigned long HorzInitRgbLuma;// Offset=0x564 Size=0x4
    unsigned long HorzInitChroma;// Offset=0x568 Size=0x4
    unsigned long VertFilterCntl;// Offset=0x56c Size=0x4
    unsigned long VertScaleRatio;// Offset=0x570 Size=0x4
    unsigned long VertFilterInit;// Offset=0x574 Size=0x4
    unsigned long VertFilterInitBot;// Offset=0x578 Size=0x4
    unsigned long LineBufferPitch;// Offset=0x57c Size=0x4
};

struct _FILTER// Size=0x28c (Id=4052)
{
    unsigned long NumberOfTaps;// Offset=0x0 Size=0x4
    float CutOff;// Offset=0x4 Size=0x4
    unsigned int Taps[160];// Offset=0x8 Size=0x280
    unsigned int Scale;// Offset=0x288 Size=0x4
};

struct _D3DFILTER_PARAMETERS// Size=0xc (Id=4053)
{
    float Nyquist;// Offset=0x0 Size=0x4
    float FlickerFilter;// Offset=0x4 Size=0x4
    union // Size=0xc (Id=0)
    {
        float Beta;// Offset=0x8 Size=0x4
        float Sigma;// Offset=0x8 Size=0x4
        float Lobe;// Offset=0x8 Size=0x4
    };
};

enum D3D::XBMCAPTURETYPE
{
    XBMCAPTURE_FULL=0,
    XBMCAPTURE_THUMBNAIL=1,
    XBMCAPTURE_GAMEREPLAY_1280_720_CLIPPED=2
};

enum D3D::MEMORYREGION
{
    MEMREGION_SYSTEM=0,
    MEMREGION_TITLE=1,
    MEMREGION_XAM_FRONT_BUFFER=2
};

struct _XBMOVIE_CAPTURE_VIDEO_INFO// Size=0x650 (Id=4056)
{
    unsigned int FrontBufferWidth;// Offset=0x0 Size=0x4
    unsigned int FrontBufferHeight;// Offset=0x4 Size=0x4
    unsigned int DisplayWidth;// Offset=0x8 Size=0x4
    unsigned int DisplayHeight;// Offset=0xc Size=0x4
    unsigned long TimeStampFreq;// Offset=0x10 Size=0x4
    unsigned long Flags;// Offset=0x14 Size=0x4
    struct _D3DPRIVATE_SCALER_PARAMETERS ScalerParameters;// Offset=0x18 Size=0x38
    struct _D3DGAMMARAMP GammaRamp;// Offset=0x50 Size=0x600
};

struct D3D::XBMCOMMAND_HANDLER// Size=0x44 (Id=4057)
{
    char Command[64];// Offset=0x0 Size=0x40
    int  ( * pHandler)(char * );// Offset=0x40 Size=0x4
};

struct _DM_CMDCONT// Size=0x18 (Id=4058)
{
    HRESULT  ( * HandlingFunction)(struct _DM_CMDCONT * ,char * ,unsigned long );// Offset=0x0 Size=0x4
    unsigned long DataSize;// Offset=0x4 Size=0x4
    void * Buffer;// Offset=0x8 Size=0x4
    unsigned long BufferSize;// Offset=0xc Size=0x4
    void * CustomData;// Offset=0x10 Size=0x4
    unsigned long BytesRemaining;// Offset=0x14 Size=0x4
};

struct _XBMOVIE_CAPTURE_FILE_HEADER// Size=0x660 (Id=4059)
{
    unsigned long Identifier;// Offset=0x0 Size=0x4
    unsigned long Version;// Offset=0x4 Size=0x4
    unsigned long StartOffsetLow;// Offset=0x8 Size=0x4
    union // Size=0x4 (Id=0)
    {
        long StartOffsetHigh;// Offset=0xc Size=0x4
        unsigned int StartFileIndex;// Offset=0xc Size=0x4
    };
    struct _XBMOVIE_CAPTURE_VIDEO_INFO VideoInfo;// Offset=0x10 Size=0x650
};

enum _unnamed_4060
{
    SetSurfaces_SurfaceInfo=0,
    SetSurfaces_DepthInfo=1,
    SetSurfaces_Color0Info=2,
    SetSurfaces_Color1Info=3,
    SetSurfaces_Color2Info=4,
    SetSurfaces_Color3Info=5,
    SetSurfaces_AaConfig=6,
    SetSurfaces_HiControl=7,
    SetSurfaces_PixMetaData=8,
    SetSurfaces_HighPrecisionBlendEnable=9
};

enum _unnamed_4061
{
    SetViewport_XScale=0,
    SetViewport_XOffset=1,
    SetViewport_YScale=2,
    SetViewport_YOffset=3,
    SetViewport_ZScale=4,
    SetViewport_ZOffset=5
};

enum _unnamed_4062
{
    SetShader_LoadShader=0,
    SetShader_LoadAluConstant=1
};

enum D3D::FixupType
{
    Fixup_SetSurfaces=1,
    Fixup_SetClipRect=2,
    Fixup_SetViewport=3,
    Fixup_SetShaderConstant=4,
    Fixup_SetVertexShader=5,
    Fixup_SetPixelShader=6,
    Fixup_SetTexture=7,
    Fixup_SetIndexBuffer=8,
    Fixup_SetVertexBuffer=9,
    Fixup_SetConstantBuffer=10,
    Fixup_SetCommandBuffer=11
};

enum D3D::BufferState
{
    BufferState_Uninitialized=0,
    BufferState_Runnable=1,
    BufferState_CommandBufferBracket=2,
    BufferState_FixupCreationBracket=3,
    BufferState_ReconstructionBracket=4,
    BufferState_DynamicFixupBracket=5,
    BufferState_Deconstructed=6,
    BufferState_OutOfMemory=7
};

enum _unnamed_4065
{
    SetClipRect_WindowScissorTL=0,
    SetClipRect_WindowScissorBR=1
};

union PIXMetaSetRenderTargetData// Size=0x8 (Id=4066)
{
    union // Size=0x8 (Id=0)
    {
        struct // Size=0x8 (Id=0)
        {
            unsigned int Index:3;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x3
            unsigned short Width:13;// Offset=0x4 Size=0x2 BitOffset=0x0 BitSize=0xd
            unsigned short Height:13;// Offset=0x6 Size=0x2 BitOffset=0x0 BitSize=0xd
        };
        unsigned long dword;// Offset=0x0 Size=0x4
    };
};

class D3D::CBuilder// Size=0x54 (Id=4067)
{
    public class D3D::CCommandBuffer * m_pCommandBuffer;// Offset=0x0 Size=0x4
    public class D3D::CParser m_Parser;// Offset=0x4 Size=0x1c
    struct // Size=0x4 (Id=0)
    {
        unsigned long m_Dynamic:1;// Offset=0x20 Size=0x4 BitOffset=0x0 BitSize=0x1
    };
    public unsigned long m_StopMarker;// Offset=0x24 Size=0x4
    public struct D3D::FixupRecord * m_pRecord;// Offset=0x28 Size=0x4
    public struct D3D::FixupRecord * m_pPrevious;// Offset=0x2c Size=0x4
    union // Size=0x4 (Id=0)
    {
        struct D3D::FixupRecord m_Previous;// Offset=0x30 Size=0x4
        unsigned long m_Bytes[4];// Offset=0x30 Size=0x10
    };
    public struct D3D::FixupRecord * m_pStart;// Offset=0x40 Size=0x4
    public struct D3D::FixupRecord * m_pLimit;// Offset=0x44 Size=0x4
    public unsigned long m_Handle;// Offset=0x48 Size=0x4
    public unsigned long m_Offset;// Offset=0x4c Size=0x4
    public unsigned long * m_pBufferStart;// Offset=0x50 Size=0x4
    public void CBuilder(class D3D::CCommandBuffer * ,enum D3D::FixupType ,unsigned long ,struct D3DResource * ,unsigned long ,unsigned long );
    public unsigned long Done();
    public int Get(unsigned long * ,struct D3D::ParseData * );
    public void Add(unsigned long ,unsigned long );
    public void Add(unsigned long );
};

enum _PixFacility
{
    PIXFAC_Default=0,
    PIXFAC_Audio=1
};

struct PIX_XAUDIO_COUNTERS// Size=0x28 (Id=4069)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long MajorVersion:8;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x8
        unsigned long MinorVersion:8;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x8
    };
    unsigned long TimestampHigh;// Offset=0x4 Size=0x4
    unsigned long TimestampLow;// Offset=0x8 Size=0x4
    unsigned long ActiveVoicesTotal;// Offset=0xc Size=0x4
    unsigned long ActiveVoicesSubmix;// Offset=0x10 Size=0x4
    unsigned long ActiveVoicesSource;// Offset=0x14 Size=0x4
    unsigned long XmaActiveVoices;// Offset=0x18 Size=0x4
    unsigned long XmaSamplesReady;// Offset=0x1c Size=0x4
    unsigned long XmaSamplesUsed;// Offset=0x20 Size=0x4
    unsigned long PcmActiveVoices;// Offset=0x24 Size=0x4
};

struct PIXMARKERTRACEINFO// Size=0x28 (Id=4070)
{
    char MarkerName[32];// Offset=0x0 Size=0x20
    unsigned long MarkerCount;// Offset=0x20 Size=0x4
    unsigned long HardwareThread;// Offset=0x24 Size=0x4
};

struct PIX_RECORD_VIDEO_FRAME// Size=0x1c (Id=4071)
{
    unsigned long Status;// Offset=0x0 Size=0x4
    unsigned long Size;// Offset=0x4 Size=0x4
    unsigned long Alignment;// Offset=0x8 Size=0x4
    unsigned long Offset;// Offset=0xc Size=0x4
    struct PIX_CHUNK ** ppChunks;// Offset=0x10 Size=0x4
    unsigned long ChunkCount;// Offset=0x14 Size=0x4
    unsigned long FrameHandle;// Offset=0x18 Size=0x4
};

struct PIX_FRAME_SWAP// Size=0x40 (Id=4072)
{
    unsigned long SwapCount;// Offset=0x0 Size=0x4
    unsigned long D3dVersion;// Offset=0x4 Size=0x4
    int D3dIsRetail;// Offset=0x8 Size=0x4
    unsigned long D3dCaps;// Offset=0xc Size=0x4
    unsigned long * pGpuTimingCurrent;// Offset=0x10 Size=0x4
    unsigned long Unused;// Offset=0x14 Size=0x4
    void  ( * BlockUntilIdleCallback)(void * );// Offset=0x18 Size=0x4
    void * D3dCallbackContext;// Offset=0x1c Size=0x4
    unsigned long XbdmVersion;// Offset=0x20 Size=0x4
    unsigned long XbdmCaps;// Offset=0x24 Size=0x4
    unsigned long SwapRequest;// Offset=0x28 Size=0x4
    unsigned long VideoType;// Offset=0x2c Size=0x4
    unsigned long  ( * EnableVideoPlaybackCallback)(void * );// Offset=0x30 Size=0x4
    void  ( * DisableVideoPlaybackCallback)(void * );// Offset=0x34 Size=0x4
    unsigned long  ( * TimeSinceVBlankCallback)(void * );// Offset=0x38 Size=0x4
    unsigned long  ( * DecodeVideoFrameCallback)(void * ,unsigned long ,struct PIX_CHUNK ** ,unsigned long ,unsigned long ,struct PIX_DECODE_VIDEO_DATA * ,unsigned long );// Offset=0x3c Size=0x4
};

struct _PIX_VIDEO_HEADER// Size=0x624 (Id=4073)
{
    unsigned long Signature;// Offset=0x0 Size=0x4
    unsigned long Version;// Offset=0x4 Size=0x4
    unsigned long VideoType;// Offset=0x8 Size=0x4
    unsigned long Flags;// Offset=0xc Size=0x4
    unsigned long PixelWidth;// Offset=0x10 Size=0x4
    unsigned long PixelHeight;// Offset=0x14 Size=0x4
    float OutputWidthFraction;// Offset=0x18 Size=0x4
    float OutputHeightFraction;// Offset=0x1c Size=0x4
    float ViewportAspectRatio;// Offset=0x20 Size=0x4
    union // Size=0x600 (Id=0)
    {
        struct _D3DGAMMARAMP GammaRamp;// Offset=0x24 Size=0x600
        struct _D3DPWLGAMMA PWLGamma;// Offset=0x24 Size=0x600
    };
};

struct _DM_COUNTDATA// Size=0x18 (Id=4074)
{
    union _LARGE_INTEGER CountValue;// Offset=0x0 Size=0x8
    union _LARGE_INTEGER RateValue;// Offset=0x8 Size=0x8
    unsigned long CountType;// Offset=0x10 Size=0x4
};

struct PIX_D3D_GENERAL_COUNTERS// Size=0x40 (Id=4075)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long MajorVersion:8;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x8
        unsigned long MinorVersion:8;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x8
    };
    unsigned long TimestampHigh;// Offset=0x4 Size=0x4
    unsigned long TimestampLow;// Offset=0x8 Size=0x4
    unsigned long FrameTicks;// Offset=0xc Size=0x4
    float PerfPeriod;// Offset=0x10 Size=0x4
    float PerfFreq;// Offset=0x14 Size=0x4
    unsigned long CpuSwapCount;// Offset=0x18 Size=0x4
    unsigned long BlockedTicks;// Offset=0x1c Size=0x4
    unsigned long ThrottledTicks;// Offset=0x20 Size=0x4
    unsigned long XamCommandBufferSize;// Offset=0x24 Size=0x4
    struct // Size=0x18 (Id=0)
    {
        unsigned long XamGpuPercent:16;// Offset=0x28 Size=0x4 BitOffset=0x0 BitSize=0x10
        unsigned long FrameGpuBusy:16;// Offset=0x28 Size=0x4 BitOffset=0x10 BitSize=0x10
        unsigned long FrameGpuNotWasted:16;// Offset=0x2c Size=0x4 BitOffset=0x0 BitSize=0x10
        unsigned long PrimitivesCulled:16;// Offset=0x2c Size=0x4 BitOffset=0x10 BitSize=0x10
        unsigned long PrimitivesClipped:16;// Offset=0x30 Size=0x4 BitOffset=0x0 BitSize=0x10
        unsigned long PrimitivesVisible:16;// Offset=0x30 Size=0x4 BitOffset=0x10 BitSize=0x10
        unsigned long BandwidthSystem:16;// Offset=0x34 Size=0x4 BitOffset=0x0 BitSize=0x10
        unsigned long BandwidthIndices:16;// Offset=0x34 Size=0x4 BitOffset=0x10 BitSize=0x10
        unsigned long BandwidthTexture:16;// Offset=0x38 Size=0x4 BitOffset=0x0 BitSize=0x10
        unsigned long BandwidthVertex:16;// Offset=0x38 Size=0x4 BitOffset=0x10 BitSize=0x10
        unsigned long BandwidthResolve:16;// Offset=0x3c Size=0x4 BitOffset=0x0 BitSize=0x10
        unsigned long BandwidthMemexport:16;// Offset=0x3c Size=0x4 BitOffset=0x10 BitSize=0x10
    };
};

struct PIX_ESTIMATE_VIDEO_COST// Size=0x10 (Id=4076)
{
    unsigned long VideoType;// Offset=0x0 Size=0x4
    float GpuPercent;// Offset=0x4 Size=0x4
    float CpuPercent;// Offset=0x8 Size=0x4
    unsigned long HddBandwidth;// Offset=0xc Size=0x4
};

struct PIX_CHUNK// Size=0x4000 (Id=4077)
{
    unsigned char Bytes[16384];// Offset=0x0 Size=0x4000
};

struct PIX_FRAME_DONE// Size=0xc (Id=4078)
{
    unsigned long FrameHandle;// Offset=0x0 Size=0x4
    unsigned long Time;// Offset=0x4 Size=0x4
    unsigned long TimeOfLastVerticalBlank;// Offset=0x8 Size=0x4
};

struct PIX_CAPTURE_FRAME_API// Size=0x100 (Id=4079)
{
    char FileName[256];// Offset=0x0 Size=0x100
};

struct D3D::_CounterRecord// Size=0xc (Id=4080)
{
    unsigned long Mask;// Offset=0x0 Size=0x4
    unsigned long PixCounter;// Offset=0x4 Size=0x4
    unsigned long D3DCounter;// Offset=0x8 Size=0x4
};

struct PIX_DECODE_VIDEO_DATA// Size=0x618 (Id=4081)
{
    unsigned long Version;// Offset=0x0 Size=0x4
    unsigned long Flags;// Offset=0x4 Size=0x4
    unsigned long PixelWidth;// Offset=0x8 Size=0x4
    unsigned long PixelHeight;// Offset=0xc Size=0x4
    unsigned long PhysicalAddress;// Offset=0x10 Size=0x4
    float ViewportAspectRatio;// Offset=0x14 Size=0x4
    unsigned short Gamma[3][256];// Offset=0x18 Size=0x600
};

struct PIXMetaTilingData// Size=0xf8 (Id=4082)
{
    unsigned long Flags;// Offset=0x0 Size=0x4
    unsigned long NumTiles;// Offset=0x4 Size=0x4
    struct _D3DRECT TileRects[15];// Offset=0x8 Size=0xf0
};

struct D3D::SetEncodedThreadIdAndIncLockCount// Size=0x4 (Id=4083)
{
    unsigned long EncodedThreadId;// Offset=0x0 Size=0x4
    void SetEncodedThreadIdAndIncLockCount(unsigned long );
    unsigned long operator()(unsigned long );
};

struct D3D::SetEncodedThreadIdAndIncLockCount// Size=0x4 (Id=4084)
{
    unsigned long EncodedThreadId;// Offset=0x0 Size=0x4
    void SetEncodedThreadIdAndIncLockCount(unsigned long );
    unsigned long operator()(unsigned long );
};

enum VGT_OUTPATH_SELECT
{
    VGT_OUTPATH_VTX_REUSE=0,
    VGT_OUTPATH_TESS_EN=1,
    VGT_OUTPATH_PASSTHRU=2
};

enum VGT_GRP_PRIM_TYPE
{
    VGT_GRP_3D_POINT=0,
    VGT_GRP_3D_LINE=1,
    VGT_GRP_3D_TRI=2,
    VGT_GRP_3D_RECT=3,
    VGT_GRP_3D_QUAD=4,
    VGT_GRP_2D_COPY_RECT_V0=5,
    VGT_GRP_2D_COPY_RECT_V1=6,
    VGT_GRP_2D_COPY_RECT_V2=7,
    VGT_GRP_2D_COPY_RECT_V3=8,
    VGT_GRP_2D_FILL_RECT=9,
    VGT_GRP_2D_LINE=10,
    VGT_GRP_2D_TRI=11,
    VGT_GRP_PRIM_INDEX_LINE=12,
    VGT_GRP_PRIM_INDEX_TRI=13,
    VGT_GRP_PRIM_INDEX_QUAD=14
};

enum VGT_GRP_PRIM_ORDER
{
    VGT_GRP_LIST=0,
    VGT_GRP_STRIP=1,
    VGT_GRP_FAN=2,
    VGT_GRP_LOOP=3,
    VGT_GRP_POLYGON=4
};

enum VGT_GROUP_CONV_SEL
{
    VGT_GRP_INDEX_16=0,
    VGT_GRP_INDEX_32=1,
    VGT_GRP_UINT_16=2,
    VGT_GRP_UINT_32=3,
    VGT_GRP_SINT_16=4,
    VGT_GRP_SINT_32=5,
    VGT_GRP_FLOAT_32=6,
    VGT_GRP_AUTO_PRIM=7,
    VGT_GRP_FIX_1_23_TO_FLOAT=8
};

struct D3D::MajorMode1PrimRegs// Size=0xc (Id=4089)
{
    union GPU_GROUPPRIMTYPE GroupPrimType;// Offset=0x0 Size=0x4
    unsigned long GroupFirstDecr;// Offset=0x4 Size=0x4
    unsigned long GroupDecr;// Offset=0x8 Size=0x4
};

struct D3D::MajorMode1InputRegs// Size=0x8 (Id=4090)
{
    union GPU_GROUPVECTCONTROL GroupVect0Control;// Offset=0x0 Size=0x4
    union GPU_GROUPVECTCONTROL GroupVect1Control;// Offset=0x4 Size=0x4
};

enum _unnamed_4091
{
    WAVELDR_FILETYPE_WAVE=0,
    WAVELDR_FILETYPE_AIFF=1,
    WAVELDR_FILETYPE_COUNT=2
};

struct XAUDIO::_XMA_REGISTERS// Size=0x2a8 (Id=4092)
{
    unsigned long ContextAddress;// Offset=0x0 Size=0x4
    union XAUDIO::_XMA_RESET_ENABLE ResetEnable;// Offset=0x4 Size=0x4
    union XAUDIO::_XMA_INTERRUPT InterruptStatusRead;// Offset=0x8 Size=0x4
    union XAUDIO::_XMA_INTERRUPT InterruptEnableRead;// Offset=0xc Size=0x4
    union XAUDIO::_XMA_WHEN_DONE WhenDoneRead;// Offset=0x10 Size=0x4
    union XAUDIO::_XMA_PARSER_DEBUG ParserDebug;// Offset=0x14 Size=0x4
    union XAUDIO::_XMA_CONTEXT CurrentContext;// Offset=0x18 Size=0x4
    union XAUDIO::_XMA_CONTEXT NextContext;// Offset=0x1c Size=0x4
    union XAUDIO::_XMA_DEBUG Debug;// Offset=0x20 Size=0x4
    unsigned long Reserved0[7];// Offset=0x24 Size=0x1c
    unsigned long ValidContext0Read;// Offset=0x40 Size=0x4
    unsigned long ValidContext1Read;// Offset=0x44 Size=0x4
    unsigned long ValidContext2Read;// Offset=0x48 Size=0x4
    unsigned long ValidContext3Read;// Offset=0x4c Size=0x4
    unsigned long ValidContext4Read;// Offset=0x50 Size=0x4
    unsigned long ValidContext5Read;// Offset=0x54 Size=0x4
    unsigned long ValidContext6Read;// Offset=0x58 Size=0x4
    unsigned long ValidContext7Read;// Offset=0x5c Size=0x4
    unsigned long ValidContext8Read;// Offset=0x60 Size=0x4
    unsigned long ValidContext9Read;// Offset=0x64 Size=0x4
    unsigned long Reserved1[6];// Offset=0x68 Size=0x18
    unsigned long ErrorContext0Read;// Offset=0x80 Size=0x4
    unsigned long ErrorContext1Read;// Offset=0x84 Size=0x4
    unsigned long ErrorContext2Read;// Offset=0x88 Size=0x4
    unsigned long ErrorContext3Read;// Offset=0x8c Size=0x4
    unsigned long ErrorContext4Read;// Offset=0x90 Size=0x4
    unsigned long ErrorContext5Read;// Offset=0x94 Size=0x4
    unsigned long ErrorContext6Read;// Offset=0x98 Size=0x4
    unsigned long ErrorContext7Read;// Offset=0x9c Size=0x4
    unsigned long ErrorContext8Read;// Offset=0xa0 Size=0x4
    unsigned long ErrorContext9Read;// Offset=0xa4 Size=0x4
    unsigned long Reserved2[24];// Offset=0xa8 Size=0x60
    union XAUDIO::_XMA_INTERRUPT InterruptStatusSet;// Offset=0x108 Size=0x4
    union XAUDIO::_XMA_INTERRUPT InterruptEnableSet;// Offset=0x10c Size=0x4
    union XAUDIO::_XMA_WHEN_DONE WhenDoneSet;// Offset=0x110 Size=0x4
    unsigned long Reserved3[11];// Offset=0x114 Size=0x2c
    unsigned long ValidContext0Set;// Offset=0x140 Size=0x4
    unsigned long ValidContext1Set;// Offset=0x144 Size=0x4
    unsigned long ValidContext2Set;// Offset=0x148 Size=0x4
    unsigned long ValidContext3Set;// Offset=0x14c Size=0x4
    unsigned long ValidContext4Set;// Offset=0x150 Size=0x4
    unsigned long ValidContext5Set;// Offset=0x154 Size=0x4
    unsigned long ValidContext6Set;// Offset=0x158 Size=0x4
    unsigned long ValidContext7Set;// Offset=0x15c Size=0x4
    unsigned long ValidContext8Set;// Offset=0x160 Size=0x4
    unsigned long ValidContext9Set;// Offset=0x164 Size=0x4
    unsigned long Reserved4[6];// Offset=0x168 Size=0x18
    unsigned long ErrorContext0Set;// Offset=0x180 Size=0x4
    unsigned long ErrorContext1Set;// Offset=0x184 Size=0x4
    unsigned long ErrorContext2Set;// Offset=0x188 Size=0x4
    unsigned long ErrorContext3Set;// Offset=0x18c Size=0x4
    unsigned long ErrorContext4Set;// Offset=0x190 Size=0x4
    unsigned long ErrorContext5Set;// Offset=0x194 Size=0x4
    unsigned long ErrorContext6Set;// Offset=0x198 Size=0x4
    unsigned long ErrorContext7Set;// Offset=0x19c Size=0x4
    unsigned long ErrorContext8Set;// Offset=0x1a0 Size=0x4
    unsigned long ErrorContext9Set;// Offset=0x1a4 Size=0x4
    unsigned long Reserved5[24];// Offset=0x1a8 Size=0x60
    union XAUDIO::_XMA_INTERRUPT InterruptStatusClear;// Offset=0x208 Size=0x4
    union XAUDIO::_XMA_INTERRUPT InterruptEnableClear;// Offset=0x20c Size=0x4
    union XAUDIO::_XMA_WHEN_DONE WhenDoneClear;// Offset=0x210 Size=0x4
    unsigned long Reserved6[11];// Offset=0x214 Size=0x2c
    unsigned long ValidContext0Clear;// Offset=0x240 Size=0x4
    unsigned long ValidContext1Clear;// Offset=0x244 Size=0x4
    unsigned long ValidContext2Clear;// Offset=0x248 Size=0x4
    unsigned long ValidContext3Clear;// Offset=0x24c Size=0x4
    unsigned long ValidContext4Clear;// Offset=0x250 Size=0x4
    unsigned long ValidContext5Clear;// Offset=0x254 Size=0x4
    unsigned long ValidContext6Clear;// Offset=0x258 Size=0x4
    unsigned long ValidContext7Clear;// Offset=0x25c Size=0x4
    unsigned long ValidContext8Clear;// Offset=0x260 Size=0x4
    unsigned long ValidContext9Clear;// Offset=0x264 Size=0x4
    unsigned long Reserved7[6];// Offset=0x268 Size=0x18
    unsigned long ErrorContext0Clear;// Offset=0x280 Size=0x4
    unsigned long ErrorContext1Clear;// Offset=0x284 Size=0x4
    unsigned long ErrorContext2Clear;// Offset=0x288 Size=0x4
    unsigned long ErrorContext3Clear;// Offset=0x28c Size=0x4
    unsigned long ErrorContext4Clear;// Offset=0x290 Size=0x4
    unsigned long ErrorContext5Clear;// Offset=0x294 Size=0x4
    unsigned long ErrorContext6Clear;// Offset=0x298 Size=0x4
    unsigned long ErrorContext7Clear;// Offset=0x29c Size=0x4
    unsigned long ErrorContext8Clear;// Offset=0x2a0 Size=0x4
    unsigned long ErrorContext9Clear;// Offset=0x2a4 Size=0x4
};

union D3D::PatchSwizzleMask// Size=0x2 (Id=4093)
{
    struct // Size=0x2 (Id=0)
    {
        unsigned short MaskX:3;// Offset=0x0 Size=0x2 BitOffset=0xd BitSize=0x3
        unsigned short MaskY:3;// Offset=0x0 Size=0x2 BitOffset=0xa BitSize=0x3
        unsigned short MaskZ:3;// Offset=0x0 Size=0x2 BitOffset=0x7 BitSize=0x3
        unsigned short MaskW:3;// Offset=0x0 Size=0x2 BitOffset=0x4 BitSize=0x3
        unsigned short Const:3;// Offset=0x0 Size=0x2 BitOffset=0x1 BitSize=0x3
    };
    unsigned short word;// Offset=0x0 Size=0x2
};

union _UCODE_VSOUTPUTPATCH// Size=0x4 (Id=4094)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned int patchAddress:12;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xc
        unsigned int lastEntry:1;// Offset=0x0 Size=0x4 BitOffset=0xc BitSize=0x1
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

union _UCODE_PSINPUTDECLARATION// Size=0x4 (Id=4095)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned int usageAndIndex:8;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x8
        unsigned int reg:4;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x4
        unsigned int componentMask:4;// Offset=0x0 Size=0x4 BitOffset=0xc BitSize=0x4
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

union D3D::SwizzleVector// Size=0x2 (Id=4096)
{
    struct // Size=0x2 (Id=0)
    {
        unsigned short SwizzleX:3;// Offset=0x0 Size=0x2 BitOffset=0xd BitSize=0x3
        unsigned short SwizzleY:3;// Offset=0x0 Size=0x2 BitOffset=0xa BitSize=0x3
        unsigned short SwizzleZ:3;// Offset=0x0 Size=0x2 BitOffset=0x7 BitSize=0x3
        unsigned short SwizzleW:3;// Offset=0x0 Size=0x2 BitOffset=0x4 BitSize=0x3
        unsigned short MaskConst:3;// Offset=0x0 Size=0x2 BitOffset=0x1 BitSize=0x3
    };
    unsigned short word;// Offset=0x0 Size=0x2
};

union D3D::PatchSwizzleMask// Size=0x2 (Id=4097)
{
    struct // Size=0x2 (Id=0)
    {
        unsigned short MaskX:3;// Offset=0x0 Size=0x2 BitOffset=0xd BitSize=0x3
        unsigned short MaskY:3;// Offset=0x0 Size=0x2 BitOffset=0xa BitSize=0x3
        unsigned short MaskZ:3;// Offset=0x0 Size=0x2 BitOffset=0x7 BitSize=0x3
        unsigned short MaskW:3;// Offset=0x0 Size=0x2 BitOffset=0x4 BitSize=0x3
        unsigned short Const:3;// Offset=0x0 Size=0x2 BitOffset=0x1 BitSize=0x3
    };
    unsigned short word;// Offset=0x0 Size=0x2
};

union _UCODE_VSOUTPUTDECLARATION// Size=0x4 (Id=4098)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned int usageAndIndex:8;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x8
        unsigned int reg:4;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x4
        unsigned int componentMask:4;// Offset=0x0 Size=0x4 BitOffset=0xc BitSize=0x4
        unsigned int patchTableOffset:12;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0xc
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

union _UCODE_VSINPUTDECLARATION// Size=0x4 (Id=4099)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned int fetchInstruction:12;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xc
        unsigned int usage:4;// Offset=0x0 Size=0x4 BitOffset=0xc BitSize=0x4
        unsigned int index:4;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x4
        unsigned int fetchRun:2;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0x2
        unsigned int useTextureCache:1;// Offset=0x0 Size=0x4 BitOffset=0x16 BitSize=0x1
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

struct PIXPatchVertexShaderToMatchPixelShaderData// Size=0x14 (Id=4100)
{
    unsigned long NumberOfUnusedOutputs;// Offset=0x0 Size=0x4
    unsigned char UnusedOutputs[16];// Offset=0x4 Size=0x10
};

struct _UCODE_R500PSUCODE// Size=0x20 (Id=4101)
{
    struct _UCODE_R500UCODE_COMMON common;// Offset=0x0 Size=0x18
    union GPU_INTERPOLATORCONTROL interpolatorControl;// Offset=0x18 Size=0x4
    union _UCODE_PSOUTPUTMASK outputMask;// Offset=0x1c Size=0x4
};

struct _UCODE_R500VSUCODE// Size=0x24 (Id=4102)
{
    struct _UCODE_R500UCODE_COMMON common;// Offset=0x0 Size=0x18
    unsigned long dwVSIndexDeclarationCount;// Offset=0x18 Size=0x4
    unsigned long dwVSInputDeclarationCount;// Offset=0x1c Size=0x4
    unsigned long dwVSOutputPatchCount;// Offset=0x20 Size=0x4
};

union _UCODE_VSOUTPUTDECLARATION// Size=0x4 (Id=4103)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned int usageAndIndex:8;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x8
        unsigned int reg:4;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x4
        unsigned int componentMask:4;// Offset=0x0 Size=0x4 BitOffset=0xc BitSize=0x4
        unsigned int patchTableOffset:12;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0xc
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

union _UCODE_PSINPUTDECLARATION// Size=0x4 (Id=4104)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned int usageAndIndex:8;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x8
        unsigned int reg:4;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x4
        unsigned int componentMask:4;// Offset=0x0 Size=0x4 BitOffset=0xc BitSize=0x4
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

class D3D::CVertexDeclaration : public D3DVertexDeclaration// Size=0x38 (Id=4105)
{
    private unsigned char __align0[24];// Offset=0x0 Size=0x18
    public unsigned long m_Count;// Offset=0x18 Size=0x4
    public unsigned long m_MaxStream;// Offset=0x1c Size=0x4
    union // Size=0x10 (Id=0)
    {
        unsigned char m_StreamMask[16];// Offset=0x20 Size=0x10
        unsigned long long m_StreamMask64[2];// Offset=0x20 Size=0x10
    };
    public unsigned long m_Uniqueness;// Offset=0x30 Size=0x4
    public struct _D3DVERTEXELEMENT9 m_Element[0];
};

struct D3D::DecodeTable// Size=0x10 (Id=4106)
{
    unsigned long positionType;// Offset=0x0 Size=0x4
    unsigned long blendIndexType;// Offset=0x4 Size=0x4
    unsigned long blendWeightType;// Offset=0x8 Size=0x4
    unsigned long fvf;// Offset=0xc Size=0x4
};

enum UCODESHADERTYPE
{
    UCODESHADERTYPE_PIXEL=0,
    UCODESHADERTYPE_VERTEX=1
};

struct _UCODE_FLOAT16// Size=0x40 (Id=4108)
{
    float f[16];// Offset=0x0 Size=0x40
};

union _UCODE_VSINDEXDECLARATION// Size=0x4 (Id=4109)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned int usageAndIndex:8;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x8
        unsigned int reg:1;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x1
        unsigned int componentMask:4;// Offset=0x0 Size=0x4 BitOffset=0x9 BitSize=0x4
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

struct _UCODE_DEFINITION_TABLE_ALU_CONSTANT_RECORD// Size=0x8 (Id=4110)
{
    unsigned short index;// Offset=0x0 Size=0x2
    unsigned short dwordCount;// Offset=0x2 Size=0x2
    unsigned long physicalMemoryOffset;// Offset=0x4 Size=0x4
};

struct _UCODE_DEFINITION_TABLE_SIMPLESTATEDELTA// Size=0x4 (Id=4111)
{
    unsigned short byteOffset;// Offset=0x0 Size=0x2
    unsigned short dwordCount;// Offset=0x2 Size=0x2
    unsigned long data[0];
};

struct _UCODE_CONSTANT_TABLE// Size=0x4 (Id=4112)
{
    unsigned long cbTableSize;// Offset=0x0 Size=0x4
};

class D3D::BitVector<2280>// Size=0x120 (Id=4113)
{
    union // Size=0x4 (Id=0)
    {
        const unsigned long SIZE;// Offset=0x0 Size=0x4
        const unsigned long DWORD_BITSIZE;// Offset=0x0 Size=0x4
        const unsigned long ARRAY_SIZE;// Offset=0x0 Size=0x4
        unsigned long Data[72];// Offset=0x0 Size=0x120
    };
    public void BitVector<2280>(class D3D::BitVector<2280> & );
    public void BitVector<2280>();
    public void Clear();
    public void Set(unsigned long ,unsigned long );
    public void Set(unsigned long );
    public void Set();
    public bool IsSet(unsigned long );
    public void Union(class D3D::BitVector<2280> & );
    public void Intersection(class D3D::BitVector<2280> & );
    public void Difference(class D3D::BitVector<2280> & );
    public void Xor(class D3D::BitVector<2280> & );
    public unsigned long CountLeadingZeros();
    public unsigned long CountLeadingOnes();
    public unsigned long CountTrailingZeros();
    public int IsAnySet();
};

class D3D::BitVector<2280>// Size=0x120 (Id=4114)
{
    union // Size=0x4 (Id=0)
    {
        const unsigned long SIZE;// Offset=0x0 Size=0x4
        const unsigned long DWORD_BITSIZE;// Offset=0x0 Size=0x4
        const unsigned long ARRAY_SIZE;// Offset=0x0 Size=0x4
        unsigned long Data[72];// Offset=0x0 Size=0x120
    };
    public void BitVector<2280>(class D3D::BitVector<2280> & );
    public void BitVector<2280>();
    public void Clear();
    public void Set(unsigned long ,unsigned long );
    public void Set(unsigned long );
    public void Set();
    public bool IsSet(unsigned long );
    public void Union(class D3D::BitVector<2280> & );
    public void Intersection(class D3D::BitVector<2280> & );
    public void Difference(class D3D::BitVector<2280> & );
    public void Xor(class D3D::BitVector<2280> & );
    public unsigned long CountLeadingZeros();
    public unsigned long CountLeadingOnes();
    public unsigned long CountTrailingZeros();
    public int IsAnySet();
};

union _UCODE_VSINPUTDECLARATION// Size=0x4 (Id=4115)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned int fetchInstruction:12;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xc
        unsigned int usage:4;// Offset=0x0 Size=0x4 BitOffset=0xc BitSize=0x4
        unsigned int index:4;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x4
        unsigned int fetchRun:2;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0x2
        unsigned int useTextureCache:1;// Offset=0x0 Size=0x4 BitOffset=0x16 BitSize=0x1
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

class D3D::D3DFastVector<_UCODE_VSINPUTDECLARATION,&D3D::MemAlloc,&D3D::MemFree>// Size=0xc (Id=4116)
{
    public void D3DFastVector<_UCODE_VSINPUTDECLARATION,&D3D::MemAlloc,&D3D::MemFree>();
    public void ~D3DFastVector<_UCODE_VSINPUTDECLARATION,&D3D::MemAlloc,&D3D::MemFree>();
    public void init(unsigned long ,HRESULT & );
    public void clear();
    public void destroy();
    public void resize(unsigned long ,HRESULT & );
    public void push_back(union _UCODE_VSINPUTDECLARATION & ,HRESULT & );
    public void push_back_empty(HRESULT & );
    public void ensure(unsigned long ,HRESULT & );
    public void ensure2(unsigned long ,HRESULT & );
    public union _UCODE_VSINPUTDECLARATION * begin();
    public union _UCODE_VSINPUTDECLARATION * end();
    public unsigned long size();
    public unsigned long sizeInBytes();
    public unsigned long capacity();
    public union _UCODE_VSINPUTDECLARATION * erase(union _UCODE_VSINPUTDECLARATION * );
    private union _UCODE_VSINPUTDECLARATION * m_pData;// Offset=0x0 Size=0x4
    private unsigned long m_Size;// Offset=0x4 Size=0x4
    private unsigned long m_Capacity;// Offset=0x8 Size=0x4
    public void * __vecDelDtor(unsigned int );
};

class D3D::D3DFastVector<_UCODE_VSINPUTDECLARATION,&D3D::MemAlloc,&D3D::MemFree>// Size=0xc (Id=4117)
{
    public void D3DFastVector<_UCODE_VSINPUTDECLARATION,&D3D::MemAlloc,&D3D::MemFree>();
    public void ~D3DFastVector<_UCODE_VSINPUTDECLARATION,&D3D::MemAlloc,&D3D::MemFree>();
    public void init(unsigned long ,HRESULT & );
    public void clear();
    public void destroy();
    public void resize(unsigned long ,HRESULT & );
    public void push_back(union _UCODE_VSINPUTDECLARATION & ,HRESULT & );
    public void push_back_empty(HRESULT & );
    public void ensure(unsigned long ,HRESULT & );
    public void ensure2(unsigned long ,HRESULT & );
    public union _UCODE_VSINPUTDECLARATION * begin();
    public union _UCODE_VSINPUTDECLARATION * end();
    public unsigned long size();
    public unsigned long sizeInBytes();
    public unsigned long capacity();
    public union _UCODE_VSINPUTDECLARATION * erase(union _UCODE_VSINPUTDECLARATION * );
    private union _UCODE_VSINPUTDECLARATION * m_pData;// Offset=0x0 Size=0x4
    private unsigned long m_Size;// Offset=0x4 Size=0x4
    private unsigned long m_Capacity;// Offset=0x8 Size=0x4
    public void * __vecDelDtor(unsigned int );
};

class D3D::SafetyStream// Size=0x10 (Id=4118)
{
    public void SafetyStream(void * ,unsigned long );
    public void Write(void * ,unsigned long );
    public void WriteNativeToUCodeDWORD(unsigned long );
    public void WriteNativeToUCodeWORD(unsigned short );
    public void Seek(unsigned long );
    public HRESULT GetAccumulatedResult();
    public unsigned long BytesWritten();
    private HRESULT m_HR;// Offset=0x0 Size=0x4
    private unsigned char * m_pOutput;// Offset=0x4 Size=0x4
    private unsigned long m_OutputSize;// Offset=0x8 Size=0x4
    private unsigned long m_Index;// Offset=0xc Size=0x4
};

class D3D::BitVector<256>// Size=0x20 (Id=4119)
{
    union // Size=0x4 (Id=0)
    {
        const unsigned long SIZE;// Offset=0x0 Size=0x4
        const unsigned long DWORD_BITSIZE;// Offset=0x0 Size=0x4
        const unsigned long ARRAY_SIZE;// Offset=0x0 Size=0x4
        unsigned long Data[8];// Offset=0x0 Size=0x20
    };
    public void BitVector<256>(class D3D::BitVector<256> & );
    public void BitVector<256>();
    public void Clear();
    public void Set(unsigned long ,unsigned long );
    public void Set(unsigned long );
    public void Set();
    public bool IsSet(unsigned long );
    public void Union(class D3D::BitVector<256> & );
    public void Intersection(class D3D::BitVector<256> & );
    public void Difference(class D3D::BitVector<256> & );
    public void Xor(class D3D::BitVector<256> & );
    public unsigned long CountLeadingZeros();
    public unsigned long CountLeadingOnes();
    public unsigned long CountTrailingZeros();
    public int IsAnySet();
};

class D3D::BitVector<256>// Size=0x20 (Id=4120)
{
    union // Size=0x4 (Id=0)
    {
        const unsigned long SIZE;// Offset=0x0 Size=0x4
        const unsigned long DWORD_BITSIZE;// Offset=0x0 Size=0x4
        const unsigned long ARRAY_SIZE;// Offset=0x0 Size=0x4
        unsigned long Data[8];// Offset=0x0 Size=0x20
    };
    public void BitVector<256>(class D3D::BitVector<256> & );
    public void BitVector<256>();
    public void Clear();
    public void Set(unsigned long ,unsigned long );
    public void Set(unsigned long );
    public void Set();
    public bool IsSet(unsigned long );
    public void Union(class D3D::BitVector<256> & );
    public void Intersection(class D3D::BitVector<256> & );
    public void Difference(class D3D::BitVector<256> & );
    public void Xor(class D3D::BitVector<256> & );
    public unsigned long CountLeadingZeros();
    public unsigned long CountLeadingOnes();
    public unsigned long CountTrailingZeros();
    public int IsAnySet();
};

struct D3D::OutputInterpolatorUseContext// Size=0x10 (Id=4121)
{
    void OutputInterpolatorUseContext();
    unsigned char use[16];// Offset=0x0 Size=0x10
};

enum D3D::LoopPart
{
    eLoopCount=0,
    eLoopStart=1,
    eLoopIncrement=2
};

struct D3D::DecodeTable// Size=0x10 (Id=4123)
{
    unsigned long positionType;// Offset=0x0 Size=0x4
    unsigned long blendIndexType;// Offset=0x4 Size=0x4
    unsigned long blendWeightType;// Offset=0x8 Size=0x4
    unsigned long fvf;// Offset=0xc Size=0x4
};

class D3D::InterpolatorTable// Size=0x44 (Id=4124)
{
    public unsigned long m_NumInterpolants;// Offset=0x0 Size=0x4
    public union D3D::InterpolatorRecord m_Interpolants[16];// Offset=0x4 Size=0x40
    public void InterpolatorTable();
    public void AddInterpolator(unsigned long ,unsigned long ,unsigned long ,bool ,bool );
    public int SortInterpolators(bool );
    private int SortInterpolatorRecordsCompareFn(void * ,void * );
};

union GPUSHADER_INSTRUCTION// Size=0xc (Id=4125)
{
    union GPUTEXTURE_FETCH_INSTRUCTION TextureFetch;// Offset=0x0 Size=0xc
    union GPUVERTEX_FETCH_INSTRUCTION VertexFetch;// Offset=0x0 Size=0xc
    union GPUFLOW_INSTRUCTION Flow0;// Offset=0x0 Size=0x8
    struct GPUFLOW_INSTRUCTION_PAIR FlowPair;// Offset=0x0 Size=0xc
    union GPUALU_INSTRUCTION Alu;// Offset=0x0 Size=0xc
};

class D3D::D3DFastVector<GPUSHADER_INSTRUCTION,&D3D::MemAlloc,&D3D::MemFree>// Size=0xc (Id=4126)
{
    public void D3DFastVector<GPUSHADER_INSTRUCTION,&D3D::MemAlloc,&D3D::MemFree>();
    public void ~D3DFastVector<GPUSHADER_INSTRUCTION,&D3D::MemAlloc,&D3D::MemFree>();
    public void init(unsigned long ,HRESULT & );
    public void clear();
    public void destroy();
    public void resize(unsigned long ,HRESULT & );
    public void push_back(union GPUSHADER_INSTRUCTION & ,HRESULT & );
    public void push_back_empty(HRESULT & );
    public void ensure(unsigned long ,HRESULT & );
    public void ensure2(unsigned long ,HRESULT & );
    public union GPUSHADER_INSTRUCTION * begin();
    public union GPUSHADER_INSTRUCTION * end();
    public unsigned long size();
    public unsigned long sizeInBytes();
    public unsigned long capacity();
    public union GPUSHADER_INSTRUCTION * erase(union GPUSHADER_INSTRUCTION * );
    private union GPUSHADER_INSTRUCTION * m_pData;// Offset=0x0 Size=0x4
    private unsigned long m_Size;// Offset=0x4 Size=0x4
    private unsigned long m_Capacity;// Offset=0x8 Size=0x4
    public void * __vecDelDtor(unsigned int );
};

class D3D::D3DFastVector<GPUSHADER_INSTRUCTION,&D3D::MemAlloc,&D3D::MemFree>// Size=0xc (Id=4127)
{
    public void D3DFastVector<GPUSHADER_INSTRUCTION,&D3D::MemAlloc,&D3D::MemFree>();
    public void ~D3DFastVector<GPUSHADER_INSTRUCTION,&D3D::MemAlloc,&D3D::MemFree>();
    public void init(unsigned long ,HRESULT & );
    public void clear();
    public void destroy();
    public void resize(unsigned long ,HRESULT & );
    public void push_back(union GPUSHADER_INSTRUCTION & ,HRESULT & );
    public void push_back_empty(HRESULT & );
    public void ensure(unsigned long ,HRESULT & );
    public void ensure2(unsigned long ,HRESULT & );
    public union GPUSHADER_INSTRUCTION * begin();
    public union GPUSHADER_INSTRUCTION * end();
    public unsigned long size();
    public unsigned long sizeInBytes();
    public unsigned long capacity();
    public union GPUSHADER_INSTRUCTION * erase(union GPUSHADER_INSTRUCTION * );
    private union GPUSHADER_INSTRUCTION * m_pData;// Offset=0x0 Size=0x4
    private unsigned long m_Size;// Offset=0x4 Size=0x4
    private unsigned long m_Capacity;// Offset=0x8 Size=0x4
    public void * __vecDelDtor(unsigned int );
};

union D3D::_MB_PSINPUTDECLARATION// Size=0x4 (Id=4128)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned int usageAndIndex:8;// Offset=0x0 Size=0x4 BitOffset=0x18 BitSize=0x8
        unsigned int reg:4;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0x4
        unsigned int componentMask:4;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x4
        unsigned int centroid:1;// Offset=0x0 Size=0x4 BitOffset=0xf BitSize=0x1
        unsigned int nointerpolation:1;// Offset=0x0 Size=0x4 BitOffset=0xe BitSize=0x1
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

class D3D::D3DFastVector<D3D::_MB_PSINPUTDECLARATION,&D3D::MemAlloc,&D3D::MemFree>// Size=0xc (Id=4129)
{
    public void D3DFastVector<D3D::_MB_PSINPUTDECLARATION,&D3D::MemAlloc,&D3D::MemFree>();
    public void ~D3DFastVector<D3D::_MB_PSINPUTDECLARATION,&D3D::MemAlloc,&D3D::MemFree>();
    public void init(unsigned long ,HRESULT & );
    public void clear();
    public void destroy();
    public void resize(unsigned long ,HRESULT & );
    public void push_back(union D3D::_MB_PSINPUTDECLARATION & ,HRESULT & );
    public void push_back_empty(HRESULT & );
    public void ensure(unsigned long ,HRESULT & );
    public void ensure2(unsigned long ,HRESULT & );
    public union D3D::_MB_PSINPUTDECLARATION * begin();
    public union D3D::_MB_PSINPUTDECLARATION * end();
    public unsigned long size();
    public unsigned long sizeInBytes();
    public unsigned long capacity();
    public union D3D::_MB_PSINPUTDECLARATION * erase(union D3D::_MB_PSINPUTDECLARATION * );
    private union D3D::_MB_PSINPUTDECLARATION * m_pData;// Offset=0x0 Size=0x4
    private unsigned long m_Size;// Offset=0x4 Size=0x4
    private unsigned long m_Capacity;// Offset=0x8 Size=0x4
    public void * __vecDelDtor(unsigned int );
};

class D3D::D3DFastVector<D3D::_MB_PSINPUTDECLARATION,&D3D::MemAlloc,&D3D::MemFree>// Size=0xc (Id=4130)
{
    public void D3DFastVector<D3D::_MB_PSINPUTDECLARATION,&D3D::MemAlloc,&D3D::MemFree>();
    public void ~D3DFastVector<D3D::_MB_PSINPUTDECLARATION,&D3D::MemAlloc,&D3D::MemFree>();
    public void init(unsigned long ,HRESULT & );
    public void clear();
    public void destroy();
    public void resize(unsigned long ,HRESULT & );
    public void push_back(union D3D::_MB_PSINPUTDECLARATION & ,HRESULT & );
    public void push_back_empty(HRESULT & );
    public void ensure(unsigned long ,HRESULT & );
    public void ensure2(unsigned long ,HRESULT & );
    public union D3D::_MB_PSINPUTDECLARATION * begin();
    public union D3D::_MB_PSINPUTDECLARATION * end();
    public unsigned long size();
    public unsigned long sizeInBytes();
    public unsigned long capacity();
    public union D3D::_MB_PSINPUTDECLARATION * erase(union D3D::_MB_PSINPUTDECLARATION * );
    private union D3D::_MB_PSINPUTDECLARATION * m_pData;// Offset=0x0 Size=0x4
    private unsigned long m_Size;// Offset=0x4 Size=0x4
    private unsigned long m_Capacity;// Offset=0x8 Size=0x4
    public void * __vecDelDtor(unsigned int );
};

class D3D::D3DFastVector<_UCODE_VSOUTPUTDECLARATION,&D3D::MemAlloc,&D3D::MemFree>// Size=0xc (Id=4131)
{
    public void D3DFastVector<_UCODE_VSOUTPUTDECLARATION,&D3D::MemAlloc,&D3D::MemFree>();
    public void ~D3DFastVector<_UCODE_VSOUTPUTDECLARATION,&D3D::MemAlloc,&D3D::MemFree>();
    public void init(unsigned long ,HRESULT & );
    public void clear();
    public void destroy();
    public void resize(unsigned long ,HRESULT & );
    public void push_back(union _UCODE_VSOUTPUTDECLARATION & ,HRESULT & );
    public void push_back_empty(HRESULT & );
    public void ensure(unsigned long ,HRESULT & );
    public void ensure2(unsigned long ,HRESULT & );
    public union _UCODE_VSOUTPUTDECLARATION * begin();
    public union _UCODE_VSOUTPUTDECLARATION * end();
    public unsigned long size();
    public unsigned long sizeInBytes();
    public unsigned long capacity();
    public union _UCODE_VSOUTPUTDECLARATION * erase(union _UCODE_VSOUTPUTDECLARATION * );
    private union _UCODE_VSOUTPUTDECLARATION * m_pData;// Offset=0x0 Size=0x4
    private unsigned long m_Size;// Offset=0x4 Size=0x4
    private unsigned long m_Capacity;// Offset=0x8 Size=0x4
    public void * __vecDelDtor(unsigned int );
};

class D3D::D3DFastVector<_UCODE_VSOUTPUTDECLARATION,&D3D::MemAlloc,&D3D::MemFree>// Size=0xc (Id=4132)
{
    public void D3DFastVector<_UCODE_VSOUTPUTDECLARATION,&D3D::MemAlloc,&D3D::MemFree>();
    public void ~D3DFastVector<_UCODE_VSOUTPUTDECLARATION,&D3D::MemAlloc,&D3D::MemFree>();
    public void init(unsigned long ,HRESULT & );
    public void clear();
    public void destroy();
    public void resize(unsigned long ,HRESULT & );
    public void push_back(union _UCODE_VSOUTPUTDECLARATION & ,HRESULT & );
    public void push_back_empty(HRESULT & );
    public void ensure(unsigned long ,HRESULT & );
    public void ensure2(unsigned long ,HRESULT & );
    public union _UCODE_VSOUTPUTDECLARATION * begin();
    public union _UCODE_VSOUTPUTDECLARATION * end();
    public unsigned long size();
    public unsigned long sizeInBytes();
    public unsigned long capacity();
    public union _UCODE_VSOUTPUTDECLARATION * erase(union _UCODE_VSOUTPUTDECLARATION * );
    private union _UCODE_VSOUTPUTDECLARATION * m_pData;// Offset=0x0 Size=0x4
    private unsigned long m_Size;// Offset=0x4 Size=0x4
    private unsigned long m_Capacity;// Offset=0x8 Size=0x4
    public void * __vecDelDtor(unsigned int );
};

class D3D::MiniMicrocodeBuilder// Size=0x20 (Id=4133)
{
    public void MiniMicrocodeBuilder(void * ,unsigned long );
    private void Write(class D3D::CMicrocodeBuilder::Sink * );
    public HRESULT Write(void * ,unsigned long ,unsigned long * );
    private void WriteHeader();
    private bool ShouldWriteDebugHint();
    private bool ShouldWriteDebugGUID();
    private void WriteDebugHint();
    private void WriteConstantTable();
    private void WritePass(unsigned long );
    private unsigned long WriteDefinitionTable(unsigned long );
    private unsigned long WriteMicrocode(unsigned long );
    private void FixupHeader();
    private void * CopyOrSkip(class D3D::CMicrocodeBuilder::StreamWriter * ,void * ,unsigned long );
    private unsigned char * m_pSrcFunctionBase;// Offset=0x0 Size=0x4
    private struct _UCODE_HEADER * m_pSrcHeader;// Offset=0x4 Size=0x4
    private unsigned long m_SrcPhysicalBaseOffset;// Offset=0x8 Size=0x4
    private struct _UCODE_HEADER * m_pDestHeader;// Offset=0xc Size=0x4
    private unsigned long m_PhysicalBaseOffset;// Offset=0x10 Size=0x4
    private unsigned long m_Flags;// Offset=0x14 Size=0x4
    private class D3D::CMicrocodeBuilder::StreamWriter * m_pOut;// Offset=0x18 Size=0x4
    private class D3D::CMicrocodeBuilder::StreamWriter * m_pPhysicalOut;// Offset=0x1c Size=0x4
};

class D3D::CMicrocodeBuilder : public XMicrocodeBuilder// Size=0x4e00 (Id=4134)
{
    public void CMicrocodeBuilder(class D3D::CMicrocodeBuilder & );
    public void CMicrocodeBuilder();
    public void PseudoConstructor();
    public unsigned long AddRef();
    public unsigned long Release();
    public void Initialize(unsigned long );
    public void StartPass(unsigned long );
    public void EndPass();
    public void EndPassImp();
    union // Size=0x4ddc (Id=0)
    {
        class StreamWriter// Size=0x14 (Id=46244)
        {
            public void StreamWriter(void * ,unsigned long );
            public unsigned long GetHighWaterMark();
            public HRESULT GetResult();
            public void Write(void * ,unsigned long );
            public unsigned long GetPos();
            public unsigned long GetSize();
            public void Seek(unsigned long );
            public unsigned long SeekToAlignment(unsigned long );
            public void Skip(unsigned long );
            public void WriteVOID(unsigned long );
            public void WriteDWORD(unsigned long );
            public void WriteWORD(unsigned short );
            public void WriteUINT64(unsigned long long );
            public void RandomAccessWrite(unsigned long ,void * ,unsigned long );
            public void * AllocBuffer(unsigned long );
            public void * SkipOrAllocBuffer(unsigned long );
            struct State// Size=0x10 (Id=46271)
            {
                unsigned long m_Position;// Offset=0x0 Size=0x4
                unsigned long m_Size;// Offset=0x4 Size=0x4
                unsigned long m_HighWaterMark;// Offset=0x8 Size=0x4
                unsigned long m_Result;// Offset=0xc Size=0x4
            };
            public void RecordState(struct D3D::CMicrocodeBuilder::StreamWriter::State * );
            public void RestoreState(struct D3D::CMicrocodeBuilder::StreamWriter::State * );
            private const unsigned long MAX_SIZE;// Offset=0x0 Size=0x4
            private unsigned char * m_pMemory;// Offset=0x0 Size=0x4
            private unsigned long m_Position;// Offset=0x4 Size=0x4
            private unsigned long m_Size;// Offset=0x8 Size=0x4
            private unsigned long m_HighWaterMark;// Offset=0xc Size=0x4
            private HRESULT m_Result;// Offset=0x10 Size=0x4
        };
        class Sink// Size=0x28 (Id=46288)
        {
            public void Sink(void * ,unsigned long ,void * ,unsigned long );
            public class D3D::CMicrocodeBuilder::StreamWriter m_Physical;// Offset=0x0 Size=0x14
            public class D3D::CMicrocodeBuilder::StreamWriter m_Cached;// Offset=0x14 Size=0x14
            public HRESULT GetResult();
            public unsigned long GetHighWaterMark();
        };
        class DefinitionTable// Size=0x2570 (Id=46297)
        {
            public void DefinitionTable(class D3D::CMicrocodeBuilder::DefinitionTable & );
            public void DefinitionTable();
            public void PseudoConstructor(int );
            public void Initialize(class D3D::CMicrocodeBuilder * );
            public void Clear();
            public int IsEmpty();
            public HRESULT Write(class D3D::CMicrocodeBuilder::Sink * );
            public int IsPixelShader();
            public void DefineBooleanConstant(unsigned long ,int );
            public void DefineIntegerConstant(unsigned long ,int * );
            public void DefineFloatConstant(unsigned long ,float * );
            public int GetDefinedFloatConstant(unsigned long ,float * );
            private struct _D3DConstants m_Constants;// Offset=0x0 Size=0x23a0
            private struct _UCODE_DEFINITION_TABLE m_DefinitionTableHeader;// Offset=0x23a0 Size=0x18
            private class D3D::BitVector<512> m_DefinedALUConstant;// Offset=0x23b8 Size=0x40
            private class D3D::BitVector<2280> m_DirtyConstants;// Offset=0x23f8 Size=0x120
            private const unsigned long kBitConstCount;// Offset=0x0 Size=0x4
            private unsigned char __align0[9492];// Offset=0x4 Size=0x2514
            private class D3D::BitVector<256> m_BoolConstantData;// Offset=0x2518 Size=0x20
            private class D3D::BitVector<256> m_BoolConstantMask;// Offset=0x2538 Size=0x20
            private int m_isColorPass;// Offset=0x2558 Size=0x4
            private int m_bEmpty;// Offset=0x255c Size=0x4
            private HRESULT m_hResult;// Offset=0x2560 Size=0x4
            private class D3D::CMicrocodeBuilder * m_pParent;// Offset=0x2564 Size=0x4
        };
        class Microcode// Size=0x160 (Id=46334)
        {
            public void Microcode(class D3D::CMicrocodeBuilder::Microcode & );
            public void Microcode();
            public void PseudoConstructor();
            public void Clear();
            public void ClearPendingFetchReadsWrites();
            public void Initialize(class D3D::CMicrocodeBuilder * );
            public int IsEmpty();
            public bool IsPixelShader();
            public bool IsNativeFormat();
            public bool IsCustomInterpolatorOrder();
            public bool IsAutoExec();
            public bool IsAutoSerialize();
            public bool IsAutoZ();
            public bool IsAutoResource();
            public struct IShaderPDBBuilder * GetPDBBuilder();
            public void Finish();
            public HRESULT Write(class D3D::CMicrocodeBuilder::Sink * ,int );
            public void DeclareInterpolatorSemantic(unsigned long ,unsigned long ,unsigned long );
            public void DeclareIndexSemantic(unsigned long ,unsigned long ,unsigned long );
            public void SetProgramControl(union GPU_PROGRAMCONTROL ,union GPU_CONTEXTMISC );
            public class D3D::CMicrocodeBuilder * m_pParent;// Offset=0x0 Size=0x4
            public const unsigned long kALUInstructionPaddingBytes;// Offset=0x0 Size=0x4
            public unsigned long AddTFetch(union GPUTEXTURE_FETCH_INSTRUCTION * );
            public unsigned long AddVFetch(union GPUVERTEX_FETCH_INSTRUCTION * ,int );
            public unsigned long AddVFetchWithSemantic(union GPUVERTEX_FETCH_INSTRUCTION * ,unsigned long ,int );
            public int RequiresVSOuputPatch(union GPUALU_INSTRUCTION * ,unsigned long * );
            public unsigned long AddALU(union GPUALU_INSTRUCTION * );
            public bool IsBranchingOp(unsigned long );
            public void SetPDBHint(struct XShaderPDBHint * );
            public unsigned long AddFlow(union GPUFLOW_INSTRUCTION * );
            public union GPUFLOW_EXEC * FindOwningExec(unsigned long );
            public void SetSerialize(unsigned long ,int );
            public int GetSerialize(unsigned long );
            public unsigned long GetNextFlowAddress();
            public unsigned long GetNextFlowAddressWithoutSerializing();
            public unsigned long GetNextALUAddress();
            public unsigned long GetCurrentFlowAddress();
            public unsigned long GetCurrentFlowAddressWithoutSerializing();
            public union GPUFLOW_INSTRUCTION * GetFlow(unsigned long );
            public union GPUSHADER_INSTRUCTION * GetALU(unsigned long ,int * );
            public unsigned long GetLastExecALUCount();
            struct RenumberRegistersContext// Size=0x100 (Id=46405)
            {
                void Initialize(class D3D::InterpolatorTable * );
                unsigned long Map(unsigned long );
                unsigned long m_RegisterMap[64];// Offset=0x0 Size=0x100
            };
            public void RenumberPSTemporaryRegistersVisitor(bool ,bool ,bool ,unsigned long ,union GPUSHADER_INSTRUCTION * ,void * );
            public void RenumberVSOutputRegistersVisitor(bool ,bool ,bool ,unsigned long ,union GPUSHADER_INSTRUCTION * ,void * );
            public void GetMaxGPRVisitor(bool ,bool ,bool ,unsigned long ,union GPUSHADER_INSTRUCTION * ,void * );
            public bool IsExecPredicateClean(union GPUFLOW_EXEC * ,union GPUSHADER_INSTRUCTION * );
            public void SetPredicateCleanBitsVisitor(bool ,bool ,bool ,unsigned long ,union GPUSHADER_INSTRUCTION * ,void * );
            class CreateVSOutputPatchesContext// Size=0x70 (Id=46420)
            {
                public void CreateVSOutputPatchesContext();
                public union _UCODE_VSOUTPUTDECLARATION * pOutputDeclaration;// Offset=0x0 Size=0x4
                public unsigned long dwOutputDeclarationCount;// Offset=0x4 Size=0x4
                public union _UCODE_VSOUTPUTPATCH * pOutputPatches;// Offset=0x8 Size=0x4
                public unsigned long dwVSOutputPatchCount;// Offset=0xc Size=0x4
                public unsigned char RegisterComponentToDeclaration[64];// Offset=0x10 Size=0x40
                public const unsigned char kNoDeclaration;// Offset=0x0 Size=0x1
                private unsigned char __align0[79];// Offset=0x1 Size=0x4f
                public unsigned short OutputCount[16];// Offset=0x50 Size=0x20
            };
            public void CreateVSOutputPatchesVisitor(bool ,bool ,bool ,unsigned long ,union GPUSHADER_INSTRUCTION * ,void * );
            class SetVSOutputDeclarationPatchOffsetsContext// Size=0x68 (Id=46433)
            {
                public void SetVSOutputDeclarationPatchOffsetsContext();
                public union _UCODE_VSOUTPUTDECLARATION * pOutputDeclaration;// Offset=0x0 Size=0x4
                public unsigned long dwOutputDeclarationCount;// Offset=0x4 Size=0x4
                public unsigned char RegisterComponentToDeclaration[64];// Offset=0x8 Size=0x40
                public const unsigned char kNoDeclaration;// Offset=0x0 Size=0x1
                private unsigned char __align0[71];// Offset=0x1 Size=0x47
                public unsigned short OutputCount[16];// Offset=0x48 Size=0x20
            };
            public void SetVSOutputDeclarationPatchOffsetsVisitor(bool ,bool ,bool ,unsigned long ,union GPUSHADER_INSTRUCTION * ,void * );
            public void SetVSOutputDeclarationPatchOffsets(union _UCODE_VSOUTPUTDECLARATION * );
            public void SetPSOutputMaskVisitor(bool ,bool ,bool ,unsigned long ,union GPUSHADER_INSTRUCTION * ,void * );
            struct AnalyzeCodeVisitorContext// Size=0x1c (Id=46445)
            {
                void AnalyzeCodeVisitorContext(int );
                union _UCODE_CONTROLFLOWCONSTANTSMASK m_ControlFlowConstantMask;// Offset=0x0 Size=0x4
                unsigned long m_gprMax;// Offset=0x4 Size=0x4
                int m_bPixelShader;// Offset=0x8 Size=0x4
                int m_FirstInstructionSeen;// Offset=0xc Size=0x4
                int m_FirstResource;// Offset=0x10 Size=0x4
                int m_TxCacheSel;// Offset=0x14 Size=0x4
                int m_bUsesMemexport;// Offset=0x18 Size=0x4
            };
            public void AnalyzeCodeVisitor(bool ,bool ,bool ,unsigned long ,union GPUSHADER_INSTRUCTION * ,void * );
            public unsigned long CountRegister(unsigned long ,unsigned long );
            public void GenCommon(struct _UCODE_R500UCODE_COMMON * ,class D3D::CMicrocodeBuilder::StreamWriter * );
            public void ForEachInstruction(bool ,bool ,void  ( * )(bool ,bool ,bool ,unsigned long ,union GPUSHADER_INSTRUCTION * ,void * ),void * );
            public void ForEachInstructionInAnExec(union GPUFLOW_EXEC * ,void  ( * )(bool ,bool ,bool ,unsigned long ,union GPUSHADER_INSTRUCTION * ,void * ),void * ,union GPUSHADER_INSTRUCTION * ,union GPUSHADER_INSTRUCTION &** ,int & );
            public union GPUFLOW_INSTRUCTION * CurrentFlowInstruction();
            public bool CurrentFlowIsExec();
            public void EnsureSerializeIsUpToDate();
            public void HandleFetchWrite(class D3D::BitVector<256> & ,unsigned long ,union GPUVERTEX_FETCH_INSTRUCTION * );
            public void HandleFetchRead(class D3D::BitVector<256> & ,unsigned long ,int ,union GPUVERTEX_FETCH_INSTRUCTION * );
            public int m_bInUnserializedVFetch;// Offset=0x4 Size=0x4
            public unsigned long m_UnserializedVFetchExec;// Offset=0x8 Size=0x4
            public unsigned long m_UnserializedVFetchIndex;// Offset=0xc Size=0x4
            public class D3D::BitVector<256> m_UnserializedVFetchReads;// Offset=0x10 Size=0x20
            public class D3D::BitVector<256> m_UnserializedVFetchWrites;// Offset=0x30 Size=0x20
            public void UpdateCurrentExec(bool ,bool ,bool ,union GPUSHADER_INSTRUCTION * );
            public void SetFetchRunEnd(union _UCODE_VSINPUTDECLARATION * );
            public HRESULT m_hrResult;// Offset=0x50 Size=0x4
            public int m_bFinished;// Offset=0x54 Size=0x4
            public union GPU_PROGRAMCONTROL m_ProgramCntl;// Offset=0x58 Size=0x4
            public union GPU_CONTEXTMISC m_ContextMisc;// Offset=0x5c Size=0x4
            public class D3D::D3DFastVector<GPUSHADER_INSTRUCTION,&D3D::MemAlloc,&D3D::MemFree> m_AluInstructions;// Offset=0x60 Size=0xc
            public class D3D::D3DFastVector<GPUFLOW_INSTRUCTION,&D3D::MemAlloc,&D3D::MemFree> m_FlowInstructions;// Offset=0x6c Size=0xc
            public int m_bNextALUStartsNewExec;// Offset=0x78 Size=0x4
            public bool m_bPendingFetch;// Offset=0x7c Size=0x1
            private unsigned char __align0[3];// Offset=0x7d Size=0x3
            public class D3D::BitVector<256> m_PendingVFetchReads;// Offset=0x80 Size=0x20
            public class D3D::BitVector<256> m_PendingTFetchReads;// Offset=0xa0 Size=0x20
            public class D3D::BitVector<256> m_PendingVFetchWrites;// Offset=0xc0 Size=0x20
            public class D3D::BitVector<256> m_PendingTFetchWrites;// Offset=0xe0 Size=0x20
            public union GPUSHADER_INSTRUCTION * m_pFlowBegin;// Offset=0x100 Size=0x4
            public union GPUSHADER_INSTRUCTION * m_pALUBegin;// Offset=0x104 Size=0x4
            public union GPUSHADER_INSTRUCTION * m_pALUEnd;// Offset=0x108 Size=0x4
            public class D3D::D3DFastVector<D3D::_MB_PSINPUTDECLARATION,&D3D::MemAlloc,&D3D::MemFree> m_PsInputDeclarations;// Offset=0x10c Size=0xc
            public class D3D::D3DFastVector<_UCODE_VSINDEXDECLARATION,&D3D::MemAlloc,&D3D::MemFree> m_VsIndexDeclarations;// Offset=0x118 Size=0xc
            public class D3D::D3DFastVector<_UCODE_VSINPUTDECLARATION,&D3D::MemAlloc,&D3D::MemFree> m_VsInputDeclarations;// Offset=0x124 Size=0xc
            public class D3D::D3DFastVector<_UCODE_VSOUTPUTDECLARATION,&D3D::MemAlloc,&D3D::MemFree> m_VsOutputDeclarations;// Offset=0x130 Size=0xc
            public unsigned long m_VsOutputPatchCount;// Offset=0x13c Size=0x4
            public unsigned char m_OutputInterpolatorUse[16];// Offset=0x140 Size=0x10
            public unsigned long m_ScSampleCntl;// Offset=0x150 Size=0x4
            public struct XShaderPDBHint m_PDBHint;// Offset=0x154 Size=0xc
            public void ~Microcode();
            public void * __vecDelDtor(unsigned int );
        };
        class Pass// Size=0x26d0 (Id=46513)
        {
            public void Pass(class D3D::CMicrocodeBuilder::Pass & );
            public void Pass();
            public void PseudoConstructor(int );
            public void Clear();
            public void Initialize(class D3D::CMicrocodeBuilder * );
            public class D3D::CMicrocodeBuilder::Microcode m_Microcode;// Offset=0x0 Size=0x160
            public class D3D::CMicrocodeBuilder::DefinitionTable m_DefinitionTable;// Offset=0x160 Size=0x2570
            public void ~Pass();
            public void * __vecDelDtor(unsigned int );
        };
        unsigned long m_CurrentPass;// Offset=0x0 Size=0x4
        unsigned char __align0[12];// Offset=0x4 Size=0xc
        class D3D::CMicrocodeBuilder::Pass m_Pass[2];// Offset=0x10 Size=0x4da0
        class D3D::CMicrocodeBuilder::Pass * GetCurrentPass();
        class D3D::CMicrocodeBuilder::Microcode * GetCurrentMicrocode();
        class D3D::CMicrocodeBuilder::DefinitionTable * GetCurrentDefinitionTable();
        void SetConstantTable(void * ,unsigned long );
        void AddDebuggerHint(const unsigned long ,char * );
        void SetProgramControl(union GPU_PROGRAMCONTROL ,union GPU_CONTEXTMISC );
        void SetPDBHint(struct XShaderPDBHint * );
        void SetPDBBuilder(struct IShaderPDBBuilder * );
        void DefineBooleanConstant(unsigned long ,int );
        void DefineIntegerConstant(unsigned long ,int * );
        void DefineFloatConstant(unsigned long ,float * );
        void DeclareIndexSemantic(unsigned long ,unsigned long ,unsigned long );
        void DeclareInterpolatorSemantic(unsigned long ,unsigned long ,unsigned long );
        unsigned long AddTFetch(union GPUTEXTURE_FETCH_INSTRUCTION * );
        unsigned long AddVFetch(union GPUVERTEX_FETCH_INSTRUCTION * ,int );
        unsigned long AddVFetchWithSemantic(union GPUVERTEX_FETCH_INSTRUCTION * ,unsigned long ,int );
        unsigned long AddALU(union GPUALU_INSTRUCTION * );
        unsigned long AddFlow(union GPUFLOW_INSTRUCTION * );
        void SetSerialize(unsigned long ,int );
        int GetSerialize(unsigned long );
        unsigned long GetNextFlowAddress();
        unsigned long GetNextFlowAddressWithoutSerializing();
        unsigned long GetNextALUAddress();
        unsigned long GetCurrentFlowAddress();
        unsigned long GetCurrentFlowAddressWithoutSerializing();
        union GPUFLOW_INSTRUCTION * GetFlow(unsigned long );
        union GPUSHADER_INSTRUCTION * GetALU(unsigned long ,int * );
        unsigned long GetLastExecALUCount();
        void Finish();
        void FindCommonALULiteralConstants();
        void GetDefinedFloat16(class D3D::CMicrocodeBuilder::DefinitionTable * ,unsigned long ,struct _UCODE_FLOAT16 & ,unsigned long & );
        void SetConstantBlockPhysicalOffset(unsigned long ,unsigned long );
        unsigned long GetConstantBlockPhysicalOffset(unsigned long );
        unsigned long GetMicrocodeSize();
        void GetMicrocodeSizes(unsigned long * ,unsigned long * );
        HRESULT GetMicrocode(class D3D::CMicrocodeBuilder::Sink * );
        HRESULT GetMicrocode(void * ,unsigned long ,unsigned long * );
        void ~CMicrocodeBuilder();
        unsigned long ReferenceCount;// Offset=0x4db0 Size=0x4
        unsigned long Flags;// Offset=0x4db4 Size=0x4
        struct IShaderPDBBuilder * m_pPDBBuilder;// Offset=0x4db8 Size=0x4
        bool IsNativeFormat();
        bool IsPixelShader();
        bool IsCustomInterpolatorOrder();
        bool IsAutoExec();
        bool IsAutoSerialize();
        bool IsAutoZ();
        bool IsAutoResource();
        void Clear();
        HRESULT m_hrResult;// Offset=0x4dbc Size=0x4
        int m_bFinished;// Offset=0x4dc0 Size=0x4
        class ?$D3DFastVector@K// Size=0xc (Id=46615)
        {
            public void D3DFastVector<unsigned long>();
            public void ~D3DFastVector<unsigned long>();
            public void init(unsigned long ,HRESULT & );
            public void clear();
            public void resize(unsigned long ,HRESULT & );
            public void push_back(unsigned long & ,HRESULT & );
            public void ensure(unsigned long ,HRESULT & );
            public void ensure2(unsigned long ,HRESULT & );
            public unsigned long * begin();
            public unsigned long * end();
            public unsigned long size();
            public unsigned long sizeInBytes();
            public unsigned long capacity();
            public unsigned long * erase(unsigned long * );
            private unsigned long * m_pData;// Offset=0x0 Size=0x4
            private unsigned long m_Size;// Offset=0x4 Size=0x4
            private unsigned long m_Capacity;// Offset=0x8 Size=0x4
            public void * __vecDelDtor(unsigned int );
        };
        unsigned char __align1[19896];// Offset=0xc Size=0x4db8
        class D3D::CMicrocodeBuilder::D3DFastVector<unsigned long> m_ConstantTable;// Offset=0x4dc4 Size=0xc
        class D3D::CMicrocodeBuilder::D3DFastVector<unsigned long> m_DebuggerHint;// Offset=0x4dd0 Size=0xc
        const unsigned long kNumConstantBlocks;// Offset=0x0 Size=0x4
        unsigned char __align2[19928];// Offset=0x4 Size=0x4dd8
    };
    public int m_bNeedToInitializeConstantBlockPhysicalOffsetTable;// Offset=0x4ddc Size=0x4
    public unsigned long m_FirstCommonALUConstantBlock;// Offset=0x4de0 Size=0x4
    public class D3D::CMicrocodeBuilder::D3DFastVector<unsigned long> m_ALUConstantBlockPhysicalOffset;// Offset=0x4de4 Size=0xc
    public int m_bUsesMemexport;// Offset=0x4df0 Size=0x4
    public void * __vecDelDtor(unsigned int );
};

class D3D::CMicrocodeBuilder : public XMicrocodeBuilder// Size=0x4e00 (Id=4135)
{
    public void CMicrocodeBuilder(class D3D::CMicrocodeBuilder & );
    public void CMicrocodeBuilder();
    public void PseudoConstructor();
    public unsigned long AddRef();
    public unsigned long Release();
    public void Initialize(unsigned long );
    public void StartPass(unsigned long );
    public void EndPass();
    public void EndPassImp();
    union // Size=0x4ddc (Id=0)
    {
        class StreamWriter// Size=0x14 (Id=46244)
        {
            public void StreamWriter(void * ,unsigned long );
            public unsigned long GetHighWaterMark();
            public HRESULT GetResult();
            public void Write(void * ,unsigned long );
            public unsigned long GetPos();
            public unsigned long GetSize();
            public void Seek(unsigned long );
            public unsigned long SeekToAlignment(unsigned long );
            public void Skip(unsigned long );
            public void WriteVOID(unsigned long );
            public void WriteDWORD(unsigned long );
            public void WriteWORD(unsigned short );
            public void WriteUINT64(unsigned long long );
            public void RandomAccessWrite(unsigned long ,void * ,unsigned long );
            public void * AllocBuffer(unsigned long );
            public void * SkipOrAllocBuffer(unsigned long );
            struct State// Size=0x10 (Id=46271)
            {
                unsigned long m_Position;// Offset=0x0 Size=0x4
                unsigned long m_Size;// Offset=0x4 Size=0x4
                unsigned long m_HighWaterMark;// Offset=0x8 Size=0x4
                unsigned long m_Result;// Offset=0xc Size=0x4
            };
            public void RecordState(struct D3D::CMicrocodeBuilder::StreamWriter::State * );
            public void RestoreState(struct D3D::CMicrocodeBuilder::StreamWriter::State * );
            private const unsigned long MAX_SIZE;// Offset=0x0 Size=0x4
            private unsigned char * m_pMemory;// Offset=0x0 Size=0x4
            private unsigned long m_Position;// Offset=0x4 Size=0x4
            private unsigned long m_Size;// Offset=0x8 Size=0x4
            private unsigned long m_HighWaterMark;// Offset=0xc Size=0x4
            private HRESULT m_Result;// Offset=0x10 Size=0x4
        };
        class Sink// Size=0x28 (Id=46288)
        {
            public void Sink(void * ,unsigned long ,void * ,unsigned long );
            public class D3D::CMicrocodeBuilder::StreamWriter m_Physical;// Offset=0x0 Size=0x14
            public class D3D::CMicrocodeBuilder::StreamWriter m_Cached;// Offset=0x14 Size=0x14
            public HRESULT GetResult();
            public unsigned long GetHighWaterMark();
        };
        class DefinitionTable// Size=0x2570 (Id=46297)
        {
            public void DefinitionTable(class D3D::CMicrocodeBuilder::DefinitionTable & );
            public void DefinitionTable();
            public void PseudoConstructor(int );
            public void Initialize(class D3D::CMicrocodeBuilder * );
            public void Clear();
            public int IsEmpty();
            public HRESULT Write(class D3D::CMicrocodeBuilder::Sink * );
            public int IsPixelShader();
            public void DefineBooleanConstant(unsigned long ,int );
            public void DefineIntegerConstant(unsigned long ,int * );
            public void DefineFloatConstant(unsigned long ,float * );
            public int GetDefinedFloatConstant(unsigned long ,float * );
            private struct _D3DConstants m_Constants;// Offset=0x0 Size=0x23a0
            private struct _UCODE_DEFINITION_TABLE m_DefinitionTableHeader;// Offset=0x23a0 Size=0x18
            private class D3D::BitVector<512> m_DefinedALUConstant;// Offset=0x23b8 Size=0x40
            private class D3D::BitVector<2280> m_DirtyConstants;// Offset=0x23f8 Size=0x120
            private const unsigned long kBitConstCount;// Offset=0x0 Size=0x4
            private unsigned char __align0[9492];// Offset=0x4 Size=0x2514
            private class D3D::BitVector<256> m_BoolConstantData;// Offset=0x2518 Size=0x20
            private class D3D::BitVector<256> m_BoolConstantMask;// Offset=0x2538 Size=0x20
            private int m_isColorPass;// Offset=0x2558 Size=0x4
            private int m_bEmpty;// Offset=0x255c Size=0x4
            private HRESULT m_hResult;// Offset=0x2560 Size=0x4
            private class D3D::CMicrocodeBuilder * m_pParent;// Offset=0x2564 Size=0x4
        };
        class Microcode// Size=0x160 (Id=46334)
        {
            public void Microcode(class D3D::CMicrocodeBuilder::Microcode & );
            public void Microcode();
            public void PseudoConstructor();
            public void Clear();
            public void ClearPendingFetchReadsWrites();
            public void Initialize(class D3D::CMicrocodeBuilder * );
            public int IsEmpty();
            public bool IsPixelShader();
            public bool IsNativeFormat();
            public bool IsCustomInterpolatorOrder();
            public bool IsAutoExec();
            public bool IsAutoSerialize();
            public bool IsAutoZ();
            public bool IsAutoResource();
            public struct IShaderPDBBuilder * GetPDBBuilder();
            public void Finish();
            public HRESULT Write(class D3D::CMicrocodeBuilder::Sink * ,int );
            public void DeclareInterpolatorSemantic(unsigned long ,unsigned long ,unsigned long );
            public void DeclareIndexSemantic(unsigned long ,unsigned long ,unsigned long );
            public void SetProgramControl(union GPU_PROGRAMCONTROL ,union GPU_CONTEXTMISC );
            public class D3D::CMicrocodeBuilder * m_pParent;// Offset=0x0 Size=0x4
            public const unsigned long kALUInstructionPaddingBytes;// Offset=0x0 Size=0x4
            public unsigned long AddTFetch(union GPUTEXTURE_FETCH_INSTRUCTION * );
            public unsigned long AddVFetch(union GPUVERTEX_FETCH_INSTRUCTION * ,int );
            public unsigned long AddVFetchWithSemantic(union GPUVERTEX_FETCH_INSTRUCTION * ,unsigned long ,int );
            public int RequiresVSOuputPatch(union GPUALU_INSTRUCTION * ,unsigned long * );
            public unsigned long AddALU(union GPUALU_INSTRUCTION * );
            public bool IsBranchingOp(unsigned long );
            public void SetPDBHint(struct XShaderPDBHint * );
            public unsigned long AddFlow(union GPUFLOW_INSTRUCTION * );
            public union GPUFLOW_EXEC * FindOwningExec(unsigned long );
            public void SetSerialize(unsigned long ,int );
            public int GetSerialize(unsigned long );
            public unsigned long GetNextFlowAddress();
            public unsigned long GetNextFlowAddressWithoutSerializing();
            public unsigned long GetNextALUAddress();
            public unsigned long GetCurrentFlowAddress();
            public unsigned long GetCurrentFlowAddressWithoutSerializing();
            public union GPUFLOW_INSTRUCTION * GetFlow(unsigned long );
            public union GPUSHADER_INSTRUCTION * GetALU(unsigned long ,int * );
            public unsigned long GetLastExecALUCount();
            struct RenumberRegistersContext// Size=0x100 (Id=46405)
            {
                void Initialize(class D3D::InterpolatorTable * );
                unsigned long Map(unsigned long );
                unsigned long m_RegisterMap[64];// Offset=0x0 Size=0x100
            };
            public void RenumberPSTemporaryRegistersVisitor(bool ,bool ,bool ,unsigned long ,union GPUSHADER_INSTRUCTION * ,void * );
            public void RenumberVSOutputRegistersVisitor(bool ,bool ,bool ,unsigned long ,union GPUSHADER_INSTRUCTION * ,void * );
            public void GetMaxGPRVisitor(bool ,bool ,bool ,unsigned long ,union GPUSHADER_INSTRUCTION * ,void * );
            public bool IsExecPredicateClean(union GPUFLOW_EXEC * ,union GPUSHADER_INSTRUCTION * );
            public void SetPredicateCleanBitsVisitor(bool ,bool ,bool ,unsigned long ,union GPUSHADER_INSTRUCTION * ,void * );
            class CreateVSOutputPatchesContext// Size=0x70 (Id=46420)
            {
                public void CreateVSOutputPatchesContext();
                public union _UCODE_VSOUTPUTDECLARATION * pOutputDeclaration;// Offset=0x0 Size=0x4
                public unsigned long dwOutputDeclarationCount;// Offset=0x4 Size=0x4
                public union _UCODE_VSOUTPUTPATCH * pOutputPatches;// Offset=0x8 Size=0x4
                public unsigned long dwVSOutputPatchCount;// Offset=0xc Size=0x4
                public unsigned char RegisterComponentToDeclaration[64];// Offset=0x10 Size=0x40
                public const unsigned char kNoDeclaration;// Offset=0x0 Size=0x1
                private unsigned char __align0[79];// Offset=0x1 Size=0x4f
                public unsigned short OutputCount[16];// Offset=0x50 Size=0x20
            };
            public void CreateVSOutputPatchesVisitor(bool ,bool ,bool ,unsigned long ,union GPUSHADER_INSTRUCTION * ,void * );
            class SetVSOutputDeclarationPatchOffsetsContext// Size=0x68 (Id=46433)
            {
                public void SetVSOutputDeclarationPatchOffsetsContext();
                public union _UCODE_VSOUTPUTDECLARATION * pOutputDeclaration;// Offset=0x0 Size=0x4
                public unsigned long dwOutputDeclarationCount;// Offset=0x4 Size=0x4
                public unsigned char RegisterComponentToDeclaration[64];// Offset=0x8 Size=0x40
                public const unsigned char kNoDeclaration;// Offset=0x0 Size=0x1
                private unsigned char __align0[71];// Offset=0x1 Size=0x47
                public unsigned short OutputCount[16];// Offset=0x48 Size=0x20
            };
            public void SetVSOutputDeclarationPatchOffsetsVisitor(bool ,bool ,bool ,unsigned long ,union GPUSHADER_INSTRUCTION * ,void * );
            public void SetVSOutputDeclarationPatchOffsets(union _UCODE_VSOUTPUTDECLARATION * );
            public void SetPSOutputMaskVisitor(bool ,bool ,bool ,unsigned long ,union GPUSHADER_INSTRUCTION * ,void * );
            struct AnalyzeCodeVisitorContext// Size=0x1c (Id=46445)
            {
                void AnalyzeCodeVisitorContext(int );
                union _UCODE_CONTROLFLOWCONSTANTSMASK m_ControlFlowConstantMask;// Offset=0x0 Size=0x4
                unsigned long m_gprMax;// Offset=0x4 Size=0x4
                int m_bPixelShader;// Offset=0x8 Size=0x4
                int m_FirstInstructionSeen;// Offset=0xc Size=0x4
                int m_FirstResource;// Offset=0x10 Size=0x4
                int m_TxCacheSel;// Offset=0x14 Size=0x4
                int m_bUsesMemexport;// Offset=0x18 Size=0x4
            };
            public void AnalyzeCodeVisitor(bool ,bool ,bool ,unsigned long ,union GPUSHADER_INSTRUCTION * ,void * );
            public unsigned long CountRegister(unsigned long ,unsigned long );
            public void GenCommon(struct _UCODE_R500UCODE_COMMON * ,class D3D::CMicrocodeBuilder::StreamWriter * );
            public void ForEachInstruction(bool ,bool ,void  ( * )(bool ,bool ,bool ,unsigned long ,union GPUSHADER_INSTRUCTION * ,void * ),void * );
            public void ForEachInstructionInAnExec(union GPUFLOW_EXEC * ,void  ( * )(bool ,bool ,bool ,unsigned long ,union GPUSHADER_INSTRUCTION * ,void * ),void * ,union GPUSHADER_INSTRUCTION * ,union GPUSHADER_INSTRUCTION &** ,int & );
            public union GPUFLOW_INSTRUCTION * CurrentFlowInstruction();
            public bool CurrentFlowIsExec();
            public void EnsureSerializeIsUpToDate();
            public void HandleFetchWrite(class D3D::BitVector<256> & ,unsigned long ,union GPUVERTEX_FETCH_INSTRUCTION * );
            public void HandleFetchRead(class D3D::BitVector<256> & ,unsigned long ,int ,union GPUVERTEX_FETCH_INSTRUCTION * );
            public int m_bInUnserializedVFetch;// Offset=0x4 Size=0x4
            public unsigned long m_UnserializedVFetchExec;// Offset=0x8 Size=0x4
            public unsigned long m_UnserializedVFetchIndex;// Offset=0xc Size=0x4
            public class D3D::BitVector<256> m_UnserializedVFetchReads;// Offset=0x10 Size=0x20
            public class D3D::BitVector<256> m_UnserializedVFetchWrites;// Offset=0x30 Size=0x20
            public void UpdateCurrentExec(bool ,bool ,bool ,union GPUSHADER_INSTRUCTION * );
            public void SetFetchRunEnd(union _UCODE_VSINPUTDECLARATION * );
            public HRESULT m_hrResult;// Offset=0x50 Size=0x4
            public int m_bFinished;// Offset=0x54 Size=0x4
            public union GPU_PROGRAMCONTROL m_ProgramCntl;// Offset=0x58 Size=0x4
            public union GPU_CONTEXTMISC m_ContextMisc;// Offset=0x5c Size=0x4
            public class D3D::D3DFastVector<GPUSHADER_INSTRUCTION,&D3D::MemAlloc,&D3D::MemFree> m_AluInstructions;// Offset=0x60 Size=0xc
            public class D3D::D3DFastVector<GPUFLOW_INSTRUCTION,&D3D::MemAlloc,&D3D::MemFree> m_FlowInstructions;// Offset=0x6c Size=0xc
            public int m_bNextALUStartsNewExec;// Offset=0x78 Size=0x4
            public bool m_bPendingFetch;// Offset=0x7c Size=0x1
            private unsigned char __align0[3];// Offset=0x7d Size=0x3
            public class D3D::BitVector<256> m_PendingVFetchReads;// Offset=0x80 Size=0x20
            public class D3D::BitVector<256> m_PendingTFetchReads;// Offset=0xa0 Size=0x20
            public class D3D::BitVector<256> m_PendingVFetchWrites;// Offset=0xc0 Size=0x20
            public class D3D::BitVector<256> m_PendingTFetchWrites;// Offset=0xe0 Size=0x20
            public union GPUSHADER_INSTRUCTION * m_pFlowBegin;// Offset=0x100 Size=0x4
            public union GPUSHADER_INSTRUCTION * m_pALUBegin;// Offset=0x104 Size=0x4
            public union GPUSHADER_INSTRUCTION * m_pALUEnd;// Offset=0x108 Size=0x4
            public class D3D::D3DFastVector<D3D::_MB_PSINPUTDECLARATION,&D3D::MemAlloc,&D3D::MemFree> m_PsInputDeclarations;// Offset=0x10c Size=0xc
            public class D3D::D3DFastVector<_UCODE_VSINDEXDECLARATION,&D3D::MemAlloc,&D3D::MemFree> m_VsIndexDeclarations;// Offset=0x118 Size=0xc
            public class D3D::D3DFastVector<_UCODE_VSINPUTDECLARATION,&D3D::MemAlloc,&D3D::MemFree> m_VsInputDeclarations;// Offset=0x124 Size=0xc
            public class D3D::D3DFastVector<_UCODE_VSOUTPUTDECLARATION,&D3D::MemAlloc,&D3D::MemFree> m_VsOutputDeclarations;// Offset=0x130 Size=0xc
            public unsigned long m_VsOutputPatchCount;// Offset=0x13c Size=0x4
            public unsigned char m_OutputInterpolatorUse[16];// Offset=0x140 Size=0x10
            public unsigned long m_ScSampleCntl;// Offset=0x150 Size=0x4
            public struct XShaderPDBHint m_PDBHint;// Offset=0x154 Size=0xc
            public void ~Microcode();
            public void * __vecDelDtor(unsigned int );
        };
        class Pass// Size=0x26d0 (Id=46513)
        {
            public void Pass(class D3D::CMicrocodeBuilder::Pass & );
            public void Pass();
            public void PseudoConstructor(int );
            public void Clear();
            public void Initialize(class D3D::CMicrocodeBuilder * );
            public class D3D::CMicrocodeBuilder::Microcode m_Microcode;// Offset=0x0 Size=0x160
            public class D3D::CMicrocodeBuilder::DefinitionTable m_DefinitionTable;// Offset=0x160 Size=0x2570
            public void ~Pass();
            public void * __vecDelDtor(unsigned int );
        };
        unsigned long m_CurrentPass;// Offset=0x0 Size=0x4
        unsigned char __align0[12];// Offset=0x4 Size=0xc
        class D3D::CMicrocodeBuilder::Pass m_Pass[2];// Offset=0x10 Size=0x4da0
        class D3D::CMicrocodeBuilder::Pass * GetCurrentPass();
        class D3D::CMicrocodeBuilder::Microcode * GetCurrentMicrocode();
        class D3D::CMicrocodeBuilder::DefinitionTable * GetCurrentDefinitionTable();
        void SetConstantTable(void * ,unsigned long );
        void AddDebuggerHint(const unsigned long ,char * );
        void SetProgramControl(union GPU_PROGRAMCONTROL ,union GPU_CONTEXTMISC );
        void SetPDBHint(struct XShaderPDBHint * );
        void SetPDBBuilder(struct IShaderPDBBuilder * );
        void DefineBooleanConstant(unsigned long ,int );
        void DefineIntegerConstant(unsigned long ,int * );
        void DefineFloatConstant(unsigned long ,float * );
        void DeclareIndexSemantic(unsigned long ,unsigned long ,unsigned long );
        void DeclareInterpolatorSemantic(unsigned long ,unsigned long ,unsigned long );
        unsigned long AddTFetch(union GPUTEXTURE_FETCH_INSTRUCTION * );
        unsigned long AddVFetch(union GPUVERTEX_FETCH_INSTRUCTION * ,int );
        unsigned long AddVFetchWithSemantic(union GPUVERTEX_FETCH_INSTRUCTION * ,unsigned long ,int );
        unsigned long AddALU(union GPUALU_INSTRUCTION * );
        unsigned long AddFlow(union GPUFLOW_INSTRUCTION * );
        void SetSerialize(unsigned long ,int );
        int GetSerialize(unsigned long );
        unsigned long GetNextFlowAddress();
        unsigned long GetNextFlowAddressWithoutSerializing();
        unsigned long GetNextALUAddress();
        unsigned long GetCurrentFlowAddress();
        unsigned long GetCurrentFlowAddressWithoutSerializing();
        union GPUFLOW_INSTRUCTION * GetFlow(unsigned long );
        union GPUSHADER_INSTRUCTION * GetALU(unsigned long ,int * );
        unsigned long GetLastExecALUCount();
        void Finish();
        void FindCommonALULiteralConstants();
        void GetDefinedFloat16(class D3D::CMicrocodeBuilder::DefinitionTable * ,unsigned long ,struct _UCODE_FLOAT16 & ,unsigned long & );
        void SetConstantBlockPhysicalOffset(unsigned long ,unsigned long );
        unsigned long GetConstantBlockPhysicalOffset(unsigned long );
        unsigned long GetMicrocodeSize();
        void GetMicrocodeSizes(unsigned long * ,unsigned long * );
        HRESULT GetMicrocode(class D3D::CMicrocodeBuilder::Sink * );
        HRESULT GetMicrocode(void * ,unsigned long ,unsigned long * );
        void ~CMicrocodeBuilder();
        unsigned long ReferenceCount;// Offset=0x4db0 Size=0x4
        unsigned long Flags;// Offset=0x4db4 Size=0x4
        struct IShaderPDBBuilder * m_pPDBBuilder;// Offset=0x4db8 Size=0x4
        bool IsNativeFormat();
        bool IsPixelShader();
        bool IsCustomInterpolatorOrder();
        bool IsAutoExec();
        bool IsAutoSerialize();
        bool IsAutoZ();
        bool IsAutoResource();
        void Clear();
        HRESULT m_hrResult;// Offset=0x4dbc Size=0x4
        int m_bFinished;// Offset=0x4dc0 Size=0x4
        class ?$D3DFastVector@K// Size=0xc (Id=46615)
        {
            public void D3DFastVector<unsigned long>();
            public void ~D3DFastVector<unsigned long>();
            public void init(unsigned long ,HRESULT & );
            public void clear();
            public void resize(unsigned long ,HRESULT & );
            public void push_back(unsigned long & ,HRESULT & );
            public void ensure(unsigned long ,HRESULT & );
            public void ensure2(unsigned long ,HRESULT & );
            public unsigned long * begin();
            public unsigned long * end();
            public unsigned long size();
            public unsigned long sizeInBytes();
            public unsigned long capacity();
            public unsigned long * erase(unsigned long * );
            private unsigned long * m_pData;// Offset=0x0 Size=0x4
            private unsigned long m_Size;// Offset=0x4 Size=0x4
            private unsigned long m_Capacity;// Offset=0x8 Size=0x4
            public void * __vecDelDtor(unsigned int );
        };
        unsigned char __align1[19896];// Offset=0xc Size=0x4db8
        class D3D::CMicrocodeBuilder::D3DFastVector<unsigned long> m_ConstantTable;// Offset=0x4dc4 Size=0xc
        class D3D::CMicrocodeBuilder::D3DFastVector<unsigned long> m_DebuggerHint;// Offset=0x4dd0 Size=0xc
        const unsigned long kNumConstantBlocks;// Offset=0x0 Size=0x4
        unsigned char __align2[19928];// Offset=0x4 Size=0x4dd8
    };
    public int m_bNeedToInitializeConstantBlockPhysicalOffsetTable;// Offset=0x4ddc Size=0x4
    public unsigned long m_FirstCommonALUConstantBlock;// Offset=0x4de0 Size=0x4
    public class D3D::CMicrocodeBuilder::D3DFastVector<unsigned long> m_ALUConstantBlockPhysicalOffset;// Offset=0x4de4 Size=0xc
    public int m_bUsesMemexport;// Offset=0x4df0 Size=0x4
    public void * __vecDelDtor(unsigned int );
};

class D3D::CMicrocodeBuilder::D3DFastVector<unsigned long>// Size=0xc (Id=4136)
{
    public void D3DFastVector<unsigned long>();
    public void ~D3DFastVector<unsigned long>();
    public void init(unsigned long ,HRESULT & );
    public void clear();
    public void resize(unsigned long ,HRESULT & );
    public void push_back(unsigned long & ,HRESULT & );
    public void ensure(unsigned long ,HRESULT & );
    public void ensure2(unsigned long ,HRESULT & );
    public unsigned long * begin();
    public unsigned long * end();
    public unsigned long size();
    public unsigned long sizeInBytes();
    public unsigned long capacity();
    public unsigned long * erase(unsigned long * );
    private unsigned long * m_pData;// Offset=0x0 Size=0x4
    private unsigned long m_Size;// Offset=0x4 Size=0x4
    private unsigned long m_Capacity;// Offset=0x8 Size=0x4
    public void * __vecDelDtor(unsigned int );
};

class D3D::CMicrocodeBuilder::Pass// Size=0x26d0 (Id=4137)
{
    public void Pass(class D3D::CMicrocodeBuilder::Pass & );
    public void Pass();
    public void PseudoConstructor(int );
    public void Clear();
    public void Initialize(class D3D::CMicrocodeBuilder * );
    public class D3D::CMicrocodeBuilder::Microcode m_Microcode;// Offset=0x0 Size=0x160
    public class D3D::CMicrocodeBuilder::DefinitionTable m_DefinitionTable;// Offset=0x160 Size=0x2570
    public void ~Pass();
    public void * __vecDelDtor(unsigned int );
};

class D3D::CMicrocodeBuilder::Pass// Size=0x26d0 (Id=4138)
{
    public void Pass(class D3D::CMicrocodeBuilder::Pass & );
    public void Pass();
    public void PseudoConstructor(int );
    public void Clear();
    public void Initialize(class D3D::CMicrocodeBuilder * );
    public class D3D::CMicrocodeBuilder::Microcode m_Microcode;// Offset=0x0 Size=0x160
    public class D3D::CMicrocodeBuilder::DefinitionTable m_DefinitionTable;// Offset=0x160 Size=0x2570
    public void ~Pass();
    public void * __vecDelDtor(unsigned int );
};

class D3D::CMicrocodeBuilder::Microcode// Size=0x160 (Id=4139)
{
    public void Microcode(class D3D::CMicrocodeBuilder::Microcode & );
    public void Microcode();
    public void PseudoConstructor();
    public void Clear();
    public void ClearPendingFetchReadsWrites();
    public void Initialize(class D3D::CMicrocodeBuilder * );
    public int IsEmpty();
    public bool IsPixelShader();
    public bool IsNativeFormat();
    public bool IsCustomInterpolatorOrder();
    public bool IsAutoExec();
    public bool IsAutoSerialize();
    public bool IsAutoZ();
    public bool IsAutoResource();
    public struct IShaderPDBBuilder * GetPDBBuilder();
    public void Finish();
    public HRESULT Write(class D3D::CMicrocodeBuilder::Sink * ,int );
    public void DeclareInterpolatorSemantic(unsigned long ,unsigned long ,unsigned long );
    public void DeclareIndexSemantic(unsigned long ,unsigned long ,unsigned long );
    public void SetProgramControl(union GPU_PROGRAMCONTROL ,union GPU_CONTEXTMISC );
    union // Size=0x100 (Id=0)
    {
        class D3D::CMicrocodeBuilder * m_pParent;// Offset=0x0 Size=0x4
        const unsigned long kALUInstructionPaddingBytes;// Offset=0x0 Size=0x4
        unsigned long AddTFetch(union GPUTEXTURE_FETCH_INSTRUCTION * );
        unsigned long AddVFetch(union GPUVERTEX_FETCH_INSTRUCTION * ,int );
        unsigned long AddVFetchWithSemantic(union GPUVERTEX_FETCH_INSTRUCTION * ,unsigned long ,int );
        int RequiresVSOuputPatch(union GPUALU_INSTRUCTION * ,unsigned long * );
        unsigned long AddALU(union GPUALU_INSTRUCTION * );
        bool IsBranchingOp(unsigned long );
        void SetPDBHint(struct XShaderPDBHint * );
        unsigned long AddFlow(union GPUFLOW_INSTRUCTION * );
        union GPUFLOW_EXEC * FindOwningExec(unsigned long );
        void SetSerialize(unsigned long ,int );
        int GetSerialize(unsigned long );
        unsigned long GetNextFlowAddress();
        unsigned long GetNextFlowAddressWithoutSerializing();
        unsigned long GetNextALUAddress();
        unsigned long GetCurrentFlowAddress();
        unsigned long GetCurrentFlowAddressWithoutSerializing();
        union GPUFLOW_INSTRUCTION * GetFlow(unsigned long );
        union GPUSHADER_INSTRUCTION * GetALU(unsigned long ,int * );
        unsigned long GetLastExecALUCount();
        struct RenumberRegistersContext// Size=0x100 (Id=46405)
        {
            void Initialize(class D3D::InterpolatorTable * );
            unsigned long Map(unsigned long );
            unsigned long m_RegisterMap[64];// Offset=0x0 Size=0x100
        };
        void RenumberPSTemporaryRegistersVisitor(bool ,bool ,bool ,unsigned long ,union GPUSHADER_INSTRUCTION * ,void * );
        void RenumberVSOutputRegistersVisitor(bool ,bool ,bool ,unsigned long ,union GPUSHADER_INSTRUCTION * ,void * );
        void GetMaxGPRVisitor(bool ,bool ,bool ,unsigned long ,union GPUSHADER_INSTRUCTION * ,void * );
        bool IsExecPredicateClean(union GPUFLOW_EXEC * ,union GPUSHADER_INSTRUCTION * );
        void SetPredicateCleanBitsVisitor(bool ,bool ,bool ,unsigned long ,union GPUSHADER_INSTRUCTION * ,void * );
        class CreateVSOutputPatchesContext// Size=0x70 (Id=46420)
        {
            public void CreateVSOutputPatchesContext();
            public union _UCODE_VSOUTPUTDECLARATION * pOutputDeclaration;// Offset=0x0 Size=0x4
            public unsigned long dwOutputDeclarationCount;// Offset=0x4 Size=0x4
            public union _UCODE_VSOUTPUTPATCH * pOutputPatches;// Offset=0x8 Size=0x4
            public unsigned long dwVSOutputPatchCount;// Offset=0xc Size=0x4
            public unsigned char RegisterComponentToDeclaration[64];// Offset=0x10 Size=0x40
            public const unsigned char kNoDeclaration;// Offset=0x0 Size=0x1
            private unsigned char __align0[79];// Offset=0x1 Size=0x4f
            public unsigned short OutputCount[16];// Offset=0x50 Size=0x20
        };
        void CreateVSOutputPatchesVisitor(bool ,bool ,bool ,unsigned long ,union GPUSHADER_INSTRUCTION * ,void * );
        class SetVSOutputDeclarationPatchOffsetsContext// Size=0x68 (Id=46433)
        {
            public void SetVSOutputDeclarationPatchOffsetsContext();
            public union _UCODE_VSOUTPUTDECLARATION * pOutputDeclaration;// Offset=0x0 Size=0x4
            public unsigned long dwOutputDeclarationCount;// Offset=0x4 Size=0x4
            public unsigned char RegisterComponentToDeclaration[64];// Offset=0x8 Size=0x40
            public const unsigned char kNoDeclaration;// Offset=0x0 Size=0x1
            private unsigned char __align0[71];// Offset=0x1 Size=0x47
            public unsigned short OutputCount[16];// Offset=0x48 Size=0x20
        };
        void SetVSOutputDeclarationPatchOffsetsVisitor(bool ,bool ,bool ,unsigned long ,union GPUSHADER_INSTRUCTION * ,void * );
        void SetVSOutputDeclarationPatchOffsets(union _UCODE_VSOUTPUTDECLARATION * );
        void SetPSOutputMaskVisitor(bool ,bool ,bool ,unsigned long ,union GPUSHADER_INSTRUCTION * ,void * );
        struct AnalyzeCodeVisitorContext// Size=0x1c (Id=46445)
        {
            void AnalyzeCodeVisitorContext(int );
            union _UCODE_CONTROLFLOWCONSTANTSMASK m_ControlFlowConstantMask;// Offset=0x0 Size=0x4
            unsigned long m_gprMax;// Offset=0x4 Size=0x4
            int m_bPixelShader;// Offset=0x8 Size=0x4
            int m_FirstInstructionSeen;// Offset=0xc Size=0x4
            int m_FirstResource;// Offset=0x10 Size=0x4
            int m_TxCacheSel;// Offset=0x14 Size=0x4
            int m_bUsesMemexport;// Offset=0x18 Size=0x4
        };
        void AnalyzeCodeVisitor(bool ,bool ,bool ,unsigned long ,union GPUSHADER_INSTRUCTION * ,void * );
        unsigned long CountRegister(unsigned long ,unsigned long );
        void GenCommon(struct _UCODE_R500UCODE_COMMON * ,class D3D::CMicrocodeBuilder::StreamWriter * );
        void ForEachInstruction(bool ,bool ,void  ( * )(bool ,bool ,bool ,unsigned long ,union GPUSHADER_INSTRUCTION * ,void * ),void * );
        void ForEachInstructionInAnExec(union GPUFLOW_EXEC * ,void  ( * )(bool ,bool ,bool ,unsigned long ,union GPUSHADER_INSTRUCTION * ,void * ),void * ,union GPUSHADER_INSTRUCTION * ,union GPUSHADER_INSTRUCTION &** ,int & );
        union GPUFLOW_INSTRUCTION * CurrentFlowInstruction();
        bool CurrentFlowIsExec();
        void EnsureSerializeIsUpToDate();
        void HandleFetchWrite(class D3D::BitVector<256> & ,unsigned long ,union GPUVERTEX_FETCH_INSTRUCTION * );
        void HandleFetchRead(class D3D::BitVector<256> & ,unsigned long ,int ,union GPUVERTEX_FETCH_INSTRUCTION * );
        int m_bInUnserializedVFetch;// Offset=0x4 Size=0x4
        unsigned long m_UnserializedVFetchExec;// Offset=0x8 Size=0x4
        unsigned long m_UnserializedVFetchIndex;// Offset=0xc Size=0x4
        class D3D::BitVector<256> m_UnserializedVFetchReads;// Offset=0x10 Size=0x20
        class D3D::BitVector<256> m_UnserializedVFetchWrites;// Offset=0x30 Size=0x20
        void UpdateCurrentExec(bool ,bool ,bool ,union GPUSHADER_INSTRUCTION * );
        void SetFetchRunEnd(union _UCODE_VSINPUTDECLARATION * );
        HRESULT m_hrResult;// Offset=0x50 Size=0x4
        int m_bFinished;// Offset=0x54 Size=0x4
        union GPU_PROGRAMCONTROL m_ProgramCntl;// Offset=0x58 Size=0x4
        union GPU_CONTEXTMISC m_ContextMisc;// Offset=0x5c Size=0x4
        class D3D::D3DFastVector<GPUSHADER_INSTRUCTION,&D3D::MemAlloc,&D3D::MemFree> m_AluInstructions;// Offset=0x60 Size=0xc
        class D3D::D3DFastVector<GPUFLOW_INSTRUCTION,&D3D::MemAlloc,&D3D::MemFree> m_FlowInstructions;// Offset=0x6c Size=0xc
        int m_bNextALUStartsNewExec;// Offset=0x78 Size=0x4
        bool m_bPendingFetch;// Offset=0x7c Size=0x1
        unsigned char __align0[3];// Offset=0x7d Size=0x3
        class D3D::BitVector<256> m_PendingVFetchReads;// Offset=0x80 Size=0x20
        class D3D::BitVector<256> m_PendingTFetchReads;// Offset=0xa0 Size=0x20
        class D3D::BitVector<256> m_PendingVFetchWrites;// Offset=0xc0 Size=0x20
        class D3D::BitVector<256> m_PendingTFetchWrites;// Offset=0xe0 Size=0x20
    };
    public union GPUSHADER_INSTRUCTION * m_pFlowBegin;// Offset=0x100 Size=0x4
    public union GPUSHADER_INSTRUCTION * m_pALUBegin;// Offset=0x104 Size=0x4
    public union GPUSHADER_INSTRUCTION * m_pALUEnd;// Offset=0x108 Size=0x4
    public class D3D::D3DFastVector<D3D::_MB_PSINPUTDECLARATION,&D3D::MemAlloc,&D3D::MemFree> m_PsInputDeclarations;// Offset=0x10c Size=0xc
    public class D3D::D3DFastVector<_UCODE_VSINDEXDECLARATION,&D3D::MemAlloc,&D3D::MemFree> m_VsIndexDeclarations;// Offset=0x118 Size=0xc
    public class D3D::D3DFastVector<_UCODE_VSINPUTDECLARATION,&D3D::MemAlloc,&D3D::MemFree> m_VsInputDeclarations;// Offset=0x124 Size=0xc
    public class D3D::D3DFastVector<_UCODE_VSOUTPUTDECLARATION,&D3D::MemAlloc,&D3D::MemFree> m_VsOutputDeclarations;// Offset=0x130 Size=0xc
    public unsigned long m_VsOutputPatchCount;// Offset=0x13c Size=0x4
    public unsigned char m_OutputInterpolatorUse[16];// Offset=0x140 Size=0x10
    public unsigned long m_ScSampleCntl;// Offset=0x150 Size=0x4
    public struct XShaderPDBHint m_PDBHint;// Offset=0x154 Size=0xc
    public void ~Microcode();
    public void * __vecDelDtor(unsigned int );
};

class D3D::CMicrocodeBuilder::Microcode// Size=0x160 (Id=4140)
{
    public void Microcode(class D3D::CMicrocodeBuilder::Microcode & );
    public void Microcode();
    public void PseudoConstructor();
    public void Clear();
    public void ClearPendingFetchReadsWrites();
    public void Initialize(class D3D::CMicrocodeBuilder * );
    public int IsEmpty();
    public bool IsPixelShader();
    public bool IsNativeFormat();
    public bool IsCustomInterpolatorOrder();
    public bool IsAutoExec();
    public bool IsAutoSerialize();
    public bool IsAutoZ();
    public bool IsAutoResource();
    public struct IShaderPDBBuilder * GetPDBBuilder();
    public void Finish();
    public HRESULT Write(class D3D::CMicrocodeBuilder::Sink * ,int );
    public void DeclareInterpolatorSemantic(unsigned long ,unsigned long ,unsigned long );
    public void DeclareIndexSemantic(unsigned long ,unsigned long ,unsigned long );
    public void SetProgramControl(union GPU_PROGRAMCONTROL ,union GPU_CONTEXTMISC );
    union // Size=0x100 (Id=0)
    {
        class D3D::CMicrocodeBuilder * m_pParent;// Offset=0x0 Size=0x4
        const unsigned long kALUInstructionPaddingBytes;// Offset=0x0 Size=0x4
        unsigned long AddTFetch(union GPUTEXTURE_FETCH_INSTRUCTION * );
        unsigned long AddVFetch(union GPUVERTEX_FETCH_INSTRUCTION * ,int );
        unsigned long AddVFetchWithSemantic(union GPUVERTEX_FETCH_INSTRUCTION * ,unsigned long ,int );
        int RequiresVSOuputPatch(union GPUALU_INSTRUCTION * ,unsigned long * );
        unsigned long AddALU(union GPUALU_INSTRUCTION * );
        bool IsBranchingOp(unsigned long );
        void SetPDBHint(struct XShaderPDBHint * );
        unsigned long AddFlow(union GPUFLOW_INSTRUCTION * );
        union GPUFLOW_EXEC * FindOwningExec(unsigned long );
        void SetSerialize(unsigned long ,int );
        int GetSerialize(unsigned long );
        unsigned long GetNextFlowAddress();
        unsigned long GetNextFlowAddressWithoutSerializing();
        unsigned long GetNextALUAddress();
        unsigned long GetCurrentFlowAddress();
        unsigned long GetCurrentFlowAddressWithoutSerializing();
        union GPUFLOW_INSTRUCTION * GetFlow(unsigned long );
        union GPUSHADER_INSTRUCTION * GetALU(unsigned long ,int * );
        unsigned long GetLastExecALUCount();
        struct RenumberRegistersContext// Size=0x100 (Id=46405)
        {
            void Initialize(class D3D::InterpolatorTable * );
            unsigned long Map(unsigned long );
            unsigned long m_RegisterMap[64];// Offset=0x0 Size=0x100
        };
        void RenumberPSTemporaryRegistersVisitor(bool ,bool ,bool ,unsigned long ,union GPUSHADER_INSTRUCTION * ,void * );
        void RenumberVSOutputRegistersVisitor(bool ,bool ,bool ,unsigned long ,union GPUSHADER_INSTRUCTION * ,void * );
        void GetMaxGPRVisitor(bool ,bool ,bool ,unsigned long ,union GPUSHADER_INSTRUCTION * ,void * );
        bool IsExecPredicateClean(union GPUFLOW_EXEC * ,union GPUSHADER_INSTRUCTION * );
        void SetPredicateCleanBitsVisitor(bool ,bool ,bool ,unsigned long ,union GPUSHADER_INSTRUCTION * ,void * );
        class CreateVSOutputPatchesContext// Size=0x70 (Id=46420)
        {
            public void CreateVSOutputPatchesContext();
            public union _UCODE_VSOUTPUTDECLARATION * pOutputDeclaration;// Offset=0x0 Size=0x4
            public unsigned long dwOutputDeclarationCount;// Offset=0x4 Size=0x4
            public union _UCODE_VSOUTPUTPATCH * pOutputPatches;// Offset=0x8 Size=0x4
            public unsigned long dwVSOutputPatchCount;// Offset=0xc Size=0x4
            public unsigned char RegisterComponentToDeclaration[64];// Offset=0x10 Size=0x40
            public const unsigned char kNoDeclaration;// Offset=0x0 Size=0x1
            private unsigned char __align0[79];// Offset=0x1 Size=0x4f
            public unsigned short OutputCount[16];// Offset=0x50 Size=0x20
        };
        void CreateVSOutputPatchesVisitor(bool ,bool ,bool ,unsigned long ,union GPUSHADER_INSTRUCTION * ,void * );
        class SetVSOutputDeclarationPatchOffsetsContext// Size=0x68 (Id=46433)
        {
            public void SetVSOutputDeclarationPatchOffsetsContext();
            public union _UCODE_VSOUTPUTDECLARATION * pOutputDeclaration;// Offset=0x0 Size=0x4
            public unsigned long dwOutputDeclarationCount;// Offset=0x4 Size=0x4
            public unsigned char RegisterComponentToDeclaration[64];// Offset=0x8 Size=0x40
            public const unsigned char kNoDeclaration;// Offset=0x0 Size=0x1
            private unsigned char __align0[71];// Offset=0x1 Size=0x47
            public unsigned short OutputCount[16];// Offset=0x48 Size=0x20
        };
        void SetVSOutputDeclarationPatchOffsetsVisitor(bool ,bool ,bool ,unsigned long ,union GPUSHADER_INSTRUCTION * ,void * );
        void SetVSOutputDeclarationPatchOffsets(union _UCODE_VSOUTPUTDECLARATION * );
        void SetPSOutputMaskVisitor(bool ,bool ,bool ,unsigned long ,union GPUSHADER_INSTRUCTION * ,void * );
        struct AnalyzeCodeVisitorContext// Size=0x1c (Id=46445)
        {
            void AnalyzeCodeVisitorContext(int );
            union _UCODE_CONTROLFLOWCONSTANTSMASK m_ControlFlowConstantMask;// Offset=0x0 Size=0x4
            unsigned long m_gprMax;// Offset=0x4 Size=0x4
            int m_bPixelShader;// Offset=0x8 Size=0x4
            int m_FirstInstructionSeen;// Offset=0xc Size=0x4
            int m_FirstResource;// Offset=0x10 Size=0x4
            int m_TxCacheSel;// Offset=0x14 Size=0x4
            int m_bUsesMemexport;// Offset=0x18 Size=0x4
        };
        void AnalyzeCodeVisitor(bool ,bool ,bool ,unsigned long ,union GPUSHADER_INSTRUCTION * ,void * );
        unsigned long CountRegister(unsigned long ,unsigned long );
        void GenCommon(struct _UCODE_R500UCODE_COMMON * ,class D3D::CMicrocodeBuilder::StreamWriter * );
        void ForEachInstruction(bool ,bool ,void  ( * )(bool ,bool ,bool ,unsigned long ,union GPUSHADER_INSTRUCTION * ,void * ),void * );
        void ForEachInstructionInAnExec(union GPUFLOW_EXEC * ,void  ( * )(bool ,bool ,bool ,unsigned long ,union GPUSHADER_INSTRUCTION * ,void * ),void * ,union GPUSHADER_INSTRUCTION * ,union GPUSHADER_INSTRUCTION &** ,int & );
        union GPUFLOW_INSTRUCTION * CurrentFlowInstruction();
        bool CurrentFlowIsExec();
        void EnsureSerializeIsUpToDate();
        void HandleFetchWrite(class D3D::BitVector<256> & ,unsigned long ,union GPUVERTEX_FETCH_INSTRUCTION * );
        void HandleFetchRead(class D3D::BitVector<256> & ,unsigned long ,int ,union GPUVERTEX_FETCH_INSTRUCTION * );
        int m_bInUnserializedVFetch;// Offset=0x4 Size=0x4
        unsigned long m_UnserializedVFetchExec;// Offset=0x8 Size=0x4
        unsigned long m_UnserializedVFetchIndex;// Offset=0xc Size=0x4
        class D3D::BitVector<256> m_UnserializedVFetchReads;// Offset=0x10 Size=0x20
        class D3D::BitVector<256> m_UnserializedVFetchWrites;// Offset=0x30 Size=0x20
        void UpdateCurrentExec(bool ,bool ,bool ,union GPUSHADER_INSTRUCTION * );
        void SetFetchRunEnd(union _UCODE_VSINPUTDECLARATION * );
        HRESULT m_hrResult;// Offset=0x50 Size=0x4
        int m_bFinished;// Offset=0x54 Size=0x4
        union GPU_PROGRAMCONTROL m_ProgramCntl;// Offset=0x58 Size=0x4
        union GPU_CONTEXTMISC m_ContextMisc;// Offset=0x5c Size=0x4
        class D3D::D3DFastVector<GPUSHADER_INSTRUCTION,&D3D::MemAlloc,&D3D::MemFree> m_AluInstructions;// Offset=0x60 Size=0xc
        class D3D::D3DFastVector<GPUFLOW_INSTRUCTION,&D3D::MemAlloc,&D3D::MemFree> m_FlowInstructions;// Offset=0x6c Size=0xc
        int m_bNextALUStartsNewExec;// Offset=0x78 Size=0x4
        bool m_bPendingFetch;// Offset=0x7c Size=0x1
        unsigned char __align0[3];// Offset=0x7d Size=0x3
        class D3D::BitVector<256> m_PendingVFetchReads;// Offset=0x80 Size=0x20
        class D3D::BitVector<256> m_PendingTFetchReads;// Offset=0xa0 Size=0x20
        class D3D::BitVector<256> m_PendingVFetchWrites;// Offset=0xc0 Size=0x20
        class D3D::BitVector<256> m_PendingTFetchWrites;// Offset=0xe0 Size=0x20
    };
    public union GPUSHADER_INSTRUCTION * m_pFlowBegin;// Offset=0x100 Size=0x4
    public union GPUSHADER_INSTRUCTION * m_pALUBegin;// Offset=0x104 Size=0x4
    public union GPUSHADER_INSTRUCTION * m_pALUEnd;// Offset=0x108 Size=0x4
    public class D3D::D3DFastVector<D3D::_MB_PSINPUTDECLARATION,&D3D::MemAlloc,&D3D::MemFree> m_PsInputDeclarations;// Offset=0x10c Size=0xc
    public class D3D::D3DFastVector<_UCODE_VSINDEXDECLARATION,&D3D::MemAlloc,&D3D::MemFree> m_VsIndexDeclarations;// Offset=0x118 Size=0xc
    public class D3D::D3DFastVector<_UCODE_VSINPUTDECLARATION,&D3D::MemAlloc,&D3D::MemFree> m_VsInputDeclarations;// Offset=0x124 Size=0xc
    public class D3D::D3DFastVector<_UCODE_VSOUTPUTDECLARATION,&D3D::MemAlloc,&D3D::MemFree> m_VsOutputDeclarations;// Offset=0x130 Size=0xc
    public unsigned long m_VsOutputPatchCount;// Offset=0x13c Size=0x4
    public unsigned char m_OutputInterpolatorUse[16];// Offset=0x140 Size=0x10
    public unsigned long m_ScSampleCntl;// Offset=0x150 Size=0x4
    public struct XShaderPDBHint m_PDBHint;// Offset=0x154 Size=0xc
    public void ~Microcode();
    public void * __vecDelDtor(unsigned int );
};

union GPUALU_INSTRUCTION// Size=0xc (Id=4141)
{
    struct // Size=0xc (Id=0)
    {
        unsigned long VectorDest:6;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x6
        unsigned long VectorDestRelative:1;// Offset=0x0 Size=0x4 BitOffset=0x6 BitSize=0x1
        unsigned long AbsConstants:1;// Offset=0x0 Size=0x4 BitOffset=0x7 BitSize=0x1
        unsigned long ScalarDest:6;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x6
        unsigned long ScalarDestRelative:1;// Offset=0x0 Size=0x4 BitOffset=0xe BitSize=0x1
        unsigned long ResultExport:1;// Offset=0x0 Size=0x4 BitOffset=0xf BitSize=0x1
        unsigned long VectorMask:4;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x4
        unsigned long ScalarMask:4;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0x4
        unsigned long VectorSaturate:1;// Offset=0x0 Size=0x4 BitOffset=0x18 BitSize=0x1
        unsigned long ScalarSaturate:1;// Offset=0x0 Size=0x4 BitOffset=0x19 BitSize=0x1
        unsigned long ScalarOp:6;// Offset=0x0 Size=0x4 BitOffset=0x1a BitSize=0x6
        unsigned long SrcCSwizzle:8;// Offset=0x4 Size=0x4 BitOffset=0x0 BitSize=0x8
        unsigned long SrcBSwizzle:8;// Offset=0x4 Size=0x4 BitOffset=0x8 BitSize=0x8
        unsigned long SrcASwizzle:8;// Offset=0x4 Size=0x4 BitOffset=0x10 BitSize=0x8
        unsigned long SrcCNegate:1;// Offset=0x4 Size=0x4 BitOffset=0x18 BitSize=0x1
        unsigned long SrcBNegate:1;// Offset=0x4 Size=0x4 BitOffset=0x19 BitSize=0x1
        unsigned long SrcANegate:1;// Offset=0x4 Size=0x4 BitOffset=0x1a BitSize=0x1
        unsigned long PredicationCondition:1;// Offset=0x4 Size=0x4 BitOffset=0x1b BitSize=0x1
        unsigned long Predicated:1;// Offset=0x4 Size=0x4 BitOffset=0x1c BitSize=0x1
        unsigned long RelativeAddress:1;// Offset=0x4 Size=0x4 BitOffset=0x1d BitSize=0x1
        unsigned long Constant1Relative:1;// Offset=0x4 Size=0x4 BitOffset=0x1e BitSize=0x1
        unsigned long Constant0Relative:1;// Offset=0x4 Size=0x4 BitOffset=0x1f BitSize=0x1
        unsigned long SrcCRegConst:8;// Offset=0x8 Size=0x4 BitOffset=0x0 BitSize=0x8
        unsigned long SrcBRegConst:8;// Offset=0x8 Size=0x4 BitOffset=0x8 BitSize=0x8
        unsigned long SrcARegConst:8;// Offset=0x8 Size=0x4 BitOffset=0x10 BitSize=0x8
        unsigned long VectorOp:5;// Offset=0x8 Size=0x4 BitOffset=0x18 BitSize=0x5
        unsigned long SrcCSelect:1;// Offset=0x8 Size=0x4 BitOffset=0x1d BitSize=0x1
        unsigned long SrcBSelect:1;// Offset=0x8 Size=0x4 BitOffset=0x1e BitSize=0x1
        unsigned long SrcASelect:1;// Offset=0x8 Size=0x4 BitOffset=0x1f BitSize=0x1
    };
    unsigned long dword[3];// Offset=0x0 Size=0xc
};

union GPUVERTEX_FETCH_INSTRUCTION// Size=0xc (Id=4142)
{
    struct // Size=0xc (Id=0)
    {
        unsigned long Op:5;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x5
        unsigned long SrcGPR:6;// Offset=0x0 Size=0x4 BitOffset=0x5 BitSize=0x6
        unsigned long SrcLoopIndexRelative:1;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x1
        unsigned long DestGPR:6;// Offset=0x0 Size=0x4 BitOffset=0xc BitSize=0x6
        unsigned long DestLoopIndexRelative:1;// Offset=0x0 Size=0x4 BitOffset=0x12 BitSize=0x1
        unsigned long FetchValidOnly:1;// Offset=0x0 Size=0x4 BitOffset=0x13 BitSize=0x1
        unsigned long ConstIndex:5;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0x5
        unsigned long ConstIndexSelect:2;// Offset=0x0 Size=0x4 BitOffset=0x19 BitSize=0x2
        unsigned long PrefetchCount:3;// Offset=0x0 Size=0x4 BitOffset=0x1b BitSize=0x3
        unsigned long SrcSelect:2;// Offset=0x0 Size=0x4 BitOffset=0x1e BitSize=0x2
        unsigned long SwizzleX:3;// Offset=0x4 Size=0x4 BitOffset=0x0 BitSize=0x3
        unsigned long SwizzleY:3;// Offset=0x4 Size=0x4 BitOffset=0x3 BitSize=0x3
        unsigned long SwizzleZ:3;// Offset=0x4 Size=0x4 BitOffset=0x6 BitSize=0x3
        unsigned long SwizzleW:3;// Offset=0x4 Size=0x4 BitOffset=0x9 BitSize=0x3
        unsigned long Signed:1;// Offset=0x4 Size=0x4 BitOffset=0xc BitSize=0x1
        unsigned long NumFormat:1;// Offset=0x4 Size=0x4 BitOffset=0xd BitSize=0x1
        unsigned long RoundIndex:1;// Offset=0x4 Size=0x4 BitOffset=0xf BitSize=0x1
        unsigned long DataFormat:6;// Offset=0x4 Size=0x4 BitOffset=0x10 BitSize=0x6
        int ExpAdjust:6;// Offset=0x4 Size=0x4 BitOffset=0x18 BitSize=0x6
        unsigned long MiniFetch:1;// Offset=0x4 Size=0x4 BitOffset=0x1e BitSize=0x1
        unsigned long Predicated:1;// Offset=0x4 Size=0x4 BitOffset=0x1f BitSize=0x1
        unsigned long Stride:8;// Offset=0x8 Size=0x4 BitOffset=0x0 BitSize=0x8
        int Offset:23;// Offset=0x8 Size=0x4 BitOffset=0x8 BitSize=0x17
        unsigned long PredicationCondition:1;// Offset=0x8 Size=0x4 BitOffset=0x1f BitSize=0x1
    };
    unsigned long dword[3];// Offset=0x0 Size=0xc
};

struct D3D::CMicrocodeBuilder::Microcode::AnalyzeCodeVisitorContext// Size=0x1c (Id=4143)
{
    void AnalyzeCodeVisitorContext(int );
    union _UCODE_CONTROLFLOWCONSTANTSMASK m_ControlFlowConstantMask;// Offset=0x0 Size=0x4
    unsigned long m_gprMax;// Offset=0x4 Size=0x4
    int m_bPixelShader;// Offset=0x8 Size=0x4
    int m_FirstInstructionSeen;// Offset=0xc Size=0x4
    int m_FirstResource;// Offset=0x10 Size=0x4
    int m_TxCacheSel;// Offset=0x14 Size=0x4
    int m_bUsesMemexport;// Offset=0x18 Size=0x4
};

class D3D::CMicrocodeBuilder::Microcode::SetVSOutputDeclarationPatchOffsetsContext// Size=0x68 (Id=4144)
{
    public void SetVSOutputDeclarationPatchOffsetsContext();
    union // Size=0x48 (Id=0)
    {
        union _UCODE_VSOUTPUTDECLARATION * pOutputDeclaration;// Offset=0x0 Size=0x4
        unsigned long dwOutputDeclarationCount;// Offset=0x4 Size=0x4
        unsigned char RegisterComponentToDeclaration[64];// Offset=0x8 Size=0x40
        const unsigned char kNoDeclaration;// Offset=0x0 Size=0x1
        unsigned char __align0[71];// Offset=0x1 Size=0x47
    };
    public unsigned short OutputCount[16];// Offset=0x48 Size=0x20
};

class D3D::CMicrocodeBuilder::Microcode::CreateVSOutputPatchesContext// Size=0x70 (Id=4145)
{
    public void CreateVSOutputPatchesContext();
    union // Size=0x50 (Id=0)
    {
        union _UCODE_VSOUTPUTDECLARATION * pOutputDeclaration;// Offset=0x0 Size=0x4
        unsigned long dwOutputDeclarationCount;// Offset=0x4 Size=0x4
        union _UCODE_VSOUTPUTPATCH * pOutputPatches;// Offset=0x8 Size=0x4
        unsigned long dwVSOutputPatchCount;// Offset=0xc Size=0x4
        unsigned char RegisterComponentToDeclaration[64];// Offset=0x10 Size=0x40
        const unsigned char kNoDeclaration;// Offset=0x0 Size=0x1
        unsigned char __align0[79];// Offset=0x1 Size=0x4f
    };
    public unsigned short OutputCount[16];// Offset=0x50 Size=0x20
};

class D3D::InterpolatorTable// Size=0x44 (Id=4146)
{
    public unsigned long m_NumInterpolants;// Offset=0x0 Size=0x4
    public union D3D::InterpolatorRecord m_Interpolants[16];// Offset=0x4 Size=0x40
    public void InterpolatorTable();
    public void AddInterpolator(unsigned long ,unsigned long ,unsigned long ,bool ,bool );
    public int SortInterpolators(bool );
    private int SortInterpolatorRecordsCompareFn(void * ,void * );
};

struct D3D::CMicrocodeBuilder::Microcode::RenumberRegistersContext// Size=0x100 (Id=4147)
{
    void Initialize(class D3D::InterpolatorTable * );
    unsigned long Map(unsigned long );
    unsigned long m_RegisterMap[64];// Offset=0x0 Size=0x100
};

class D3D::CMicrocodeBuilder::DefinitionTable// Size=0x2570 (Id=4148)
{
    public void DefinitionTable(class D3D::CMicrocodeBuilder::DefinitionTable & );
    public void DefinitionTable();
    public void PseudoConstructor(int );
    public void Initialize(class D3D::CMicrocodeBuilder * );
    public void Clear();
    public int IsEmpty();
    public HRESULT Write(class D3D::CMicrocodeBuilder::Sink * );
    public int IsPixelShader();
    public void DefineBooleanConstant(unsigned long ,int );
    public void DefineIntegerConstant(unsigned long ,int * );
    public void DefineFloatConstant(unsigned long ,float * );
    public int GetDefinedFloatConstant(unsigned long ,float * );
    union // Size=0x2518 (Id=0)
    {
        struct _D3DConstants m_Constants;// Offset=0x0 Size=0x23a0
        struct _UCODE_DEFINITION_TABLE m_DefinitionTableHeader;// Offset=0x23a0 Size=0x18
        class D3D::BitVector<512> m_DefinedALUConstant;// Offset=0x23b8 Size=0x40
        class D3D::BitVector<2280> m_DirtyConstants;// Offset=0x23f8 Size=0x120
        const unsigned long kBitConstCount;// Offset=0x0 Size=0x4
        unsigned char __align0[9492];// Offset=0x4 Size=0x2514
    };
    private class D3D::BitVector<256> m_BoolConstantData;// Offset=0x2518 Size=0x20
    private class D3D::BitVector<256> m_BoolConstantMask;// Offset=0x2538 Size=0x20
    private int m_isColorPass;// Offset=0x2558 Size=0x4
    private int m_bEmpty;// Offset=0x255c Size=0x4
    private HRESULT m_hResult;// Offset=0x2560 Size=0x4
    private class D3D::CMicrocodeBuilder * m_pParent;// Offset=0x2564 Size=0x4
};

class D3D::CMicrocodeBuilder::DefinitionTable// Size=0x2570 (Id=4149)
{
    public void DefinitionTable(class D3D::CMicrocodeBuilder::DefinitionTable & );
    public void DefinitionTable();
    public void PseudoConstructor(int );
    public void Initialize(class D3D::CMicrocodeBuilder * );
    public void Clear();
    public int IsEmpty();
    public HRESULT Write(class D3D::CMicrocodeBuilder::Sink * );
    public int IsPixelShader();
    public void DefineBooleanConstant(unsigned long ,int );
    public void DefineIntegerConstant(unsigned long ,int * );
    public void DefineFloatConstant(unsigned long ,float * );
    public int GetDefinedFloatConstant(unsigned long ,float * );
    union // Size=0x2518 (Id=0)
    {
        struct _D3DConstants m_Constants;// Offset=0x0 Size=0x23a0
        struct _UCODE_DEFINITION_TABLE m_DefinitionTableHeader;// Offset=0x23a0 Size=0x18
        class D3D::BitVector<512> m_DefinedALUConstant;// Offset=0x23b8 Size=0x40
        class D3D::BitVector<2280> m_DirtyConstants;// Offset=0x23f8 Size=0x120
        const unsigned long kBitConstCount;// Offset=0x0 Size=0x4
        unsigned char __align0[9492];// Offset=0x4 Size=0x2514
    };
    private class D3D::BitVector<256> m_BoolConstantData;// Offset=0x2518 Size=0x20
    private class D3D::BitVector<256> m_BoolConstantMask;// Offset=0x2538 Size=0x20
    private int m_isColorPass;// Offset=0x2558 Size=0x4
    private int m_bEmpty;// Offset=0x255c Size=0x4
    private HRESULT m_hResult;// Offset=0x2560 Size=0x4
    private class D3D::CMicrocodeBuilder * m_pParent;// Offset=0x2564 Size=0x4
};

class D3D::CMicrocodeBuilder::Sink// Size=0x28 (Id=4150)
{
    public void Sink(void * ,unsigned long ,void * ,unsigned long );
    public class D3D::CMicrocodeBuilder::StreamWriter m_Physical;// Offset=0x0 Size=0x14
    public class D3D::CMicrocodeBuilder::StreamWriter m_Cached;// Offset=0x14 Size=0x14
    public HRESULT GetResult();
    public unsigned long GetHighWaterMark();
};

struct D3D::CMicrocodeBuilder::StreamWriter::State// Size=0x10 (Id=4151)
{
    unsigned long m_Position;// Offset=0x0 Size=0x4
    unsigned long m_Size;// Offset=0x4 Size=0x4
    unsigned long m_HighWaterMark;// Offset=0x8 Size=0x4
    unsigned long m_Result;// Offset=0xc Size=0x4
};

class D3D::CMicrocodeBuilder::StreamWriter// Size=0x14 (Id=4152)
{
    public void StreamWriter(void * ,unsigned long );
    public unsigned long GetHighWaterMark();
    public HRESULT GetResult();
    public void Write(void * ,unsigned long );
    public unsigned long GetPos();
    public unsigned long GetSize();
    public void Seek(unsigned long );
    public unsigned long SeekToAlignment(unsigned long );
    public void Skip(unsigned long );
    public void WriteVOID(unsigned long );
    public void WriteDWORD(unsigned long );
    public void WriteWORD(unsigned short );
    public void WriteUINT64(unsigned long long );
    public void RandomAccessWrite(unsigned long ,void * ,unsigned long );
    public void * AllocBuffer(unsigned long );
    public void * SkipOrAllocBuffer(unsigned long );
    union // Size=0x10 (Id=0)
    {
        struct State// Size=0x10 (Id=46271)
        {
            unsigned long m_Position;// Offset=0x0 Size=0x4
            unsigned long m_Size;// Offset=0x4 Size=0x4
            unsigned long m_HighWaterMark;// Offset=0x8 Size=0x4
            unsigned long m_Result;// Offset=0xc Size=0x4
        };
        void RecordState(struct D3D::CMicrocodeBuilder::StreamWriter::State * );
        void RestoreState(struct D3D::CMicrocodeBuilder::StreamWriter::State * );
        const unsigned long MAX_SIZE;// Offset=0x0 Size=0x4
        unsigned char * m_pMemory;// Offset=0x0 Size=0x4
        unsigned long m_Position;// Offset=0x4 Size=0x4
        unsigned long m_Size;// Offset=0x8 Size=0x4
        unsigned long m_HighWaterMark;// Offset=0xc Size=0x4
    };
    private HRESULT m_Result;// Offset=0x10 Size=0x4
};

struct D3D::CMicrocodeBuilder::StreamWriter::State// Size=0x10 (Id=4153)
{
    unsigned long m_Position;// Offset=0x0 Size=0x4
    unsigned long m_Size;// Offset=0x4 Size=0x4
    unsigned long m_HighWaterMark;// Offset=0x8 Size=0x4
    unsigned long m_Result;// Offset=0xc Size=0x4
};

union _UCODE_VSINDEXDECLARATION// Size=0x4 (Id=4154)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned int usageAndIndex:8;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x8
        unsigned int reg:1;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0x1
        unsigned int componentMask:4;// Offset=0x0 Size=0x4 BitOffset=0x9 BitSize=0x4
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

class D3D::D3DFastVector<_UCODE_VSINDEXDECLARATION,&D3D::MemAlloc,&D3D::MemFree>// Size=0xc (Id=4155)
{
    public void D3DFastVector<_UCODE_VSINDEXDECLARATION,&D3D::MemAlloc,&D3D::MemFree>();
    public void ~D3DFastVector<_UCODE_VSINDEXDECLARATION,&D3D::MemAlloc,&D3D::MemFree>();
    public void init(unsigned long ,HRESULT & );
    public void clear();
    public void destroy();
    public void resize(unsigned long ,HRESULT & );
    public void push_back(union _UCODE_VSINDEXDECLARATION & ,HRESULT & );
    public void push_back_empty(HRESULT & );
    public void ensure(unsigned long ,HRESULT & );
    public void ensure2(unsigned long ,HRESULT & );
    public union _UCODE_VSINDEXDECLARATION * begin();
    public union _UCODE_VSINDEXDECLARATION * end();
    public unsigned long size();
    public unsigned long sizeInBytes();
    public unsigned long capacity();
    public union _UCODE_VSINDEXDECLARATION * erase(union _UCODE_VSINDEXDECLARATION * );
    private union _UCODE_VSINDEXDECLARATION * m_pData;// Offset=0x0 Size=0x4
    private unsigned long m_Size;// Offset=0x4 Size=0x4
    private unsigned long m_Capacity;// Offset=0x8 Size=0x4
    public void * __vecDelDtor(unsigned int );
};

class D3D::D3DFastVector<_UCODE_VSINDEXDECLARATION,&D3D::MemAlloc,&D3D::MemFree>// Size=0xc (Id=4156)
{
    public void D3DFastVector<_UCODE_VSINDEXDECLARATION,&D3D::MemAlloc,&D3D::MemFree>();
    public void ~D3DFastVector<_UCODE_VSINDEXDECLARATION,&D3D::MemAlloc,&D3D::MemFree>();
    public void init(unsigned long ,HRESULT & );
    public void clear();
    public void destroy();
    public void resize(unsigned long ,HRESULT & );
    public void push_back(union _UCODE_VSINDEXDECLARATION & ,HRESULT & );
    public void push_back_empty(HRESULT & );
    public void ensure(unsigned long ,HRESULT & );
    public void ensure2(unsigned long ,HRESULT & );
    public union _UCODE_VSINDEXDECLARATION * begin();
    public union _UCODE_VSINDEXDECLARATION * end();
    public unsigned long size();
    public unsigned long sizeInBytes();
    public unsigned long capacity();
    public union _UCODE_VSINDEXDECLARATION * erase(union _UCODE_VSINDEXDECLARATION * );
    private union _UCODE_VSINDEXDECLARATION * m_pData;// Offset=0x0 Size=0x4
    private unsigned long m_Size;// Offset=0x4 Size=0x4
    private unsigned long m_Capacity;// Offset=0x8 Size=0x4
    public void * __vecDelDtor(unsigned int );
};

class D3D::BitVector<512>// Size=0x40 (Id=4157)
{
    union // Size=0x4 (Id=0)
    {
        const unsigned long SIZE;// Offset=0x0 Size=0x4
        const unsigned long DWORD_BITSIZE;// Offset=0x0 Size=0x4
        const unsigned long ARRAY_SIZE;// Offset=0x0 Size=0x4
        unsigned long Data[16];// Offset=0x0 Size=0x40
    };
    public void BitVector<512>(class D3D::BitVector<512> & );
    public void BitVector<512>();
    public void Clear();
    public void Set(unsigned long ,unsigned long );
    public void Set(unsigned long );
    public void Set();
    public bool IsSet(unsigned long );
    public void Union(class D3D::BitVector<512> & );
    public void Intersection(class D3D::BitVector<512> & );
    public void Difference(class D3D::BitVector<512> & );
    public void Xor(class D3D::BitVector<512> & );
    public unsigned long CountLeadingZeros();
    public unsigned long CountLeadingOnes();
    public unsigned long CountTrailingZeros();
    public int IsAnySet();
};

class D3D::BitVector<512>// Size=0x40 (Id=4158)
{
    union // Size=0x4 (Id=0)
    {
        const unsigned long SIZE;// Offset=0x0 Size=0x4
        const unsigned long DWORD_BITSIZE;// Offset=0x0 Size=0x4
        const unsigned long ARRAY_SIZE;// Offset=0x0 Size=0x4
        unsigned long Data[16];// Offset=0x0 Size=0x40
    };
    public void BitVector<512>(class D3D::BitVector<512> & );
    public void BitVector<512>();
    public void Clear();
    public void Set(unsigned long ,unsigned long );
    public void Set(unsigned long );
    public void Set();
    public bool IsSet(unsigned long );
    public void Union(class D3D::BitVector<512> & );
    public void Intersection(class D3D::BitVector<512> & );
    public void Difference(class D3D::BitVector<512> & );
    public void Xor(class D3D::BitVector<512> & );
    public unsigned long CountLeadingZeros();
    public unsigned long CountLeadingOnes();
    public unsigned long CountTrailingZeros();
    public int IsAnySet();
};

union GPUFLOW_INSTRUCTION// Size=0x8 (Id=4159)
{
    unsigned char __align0[4];// Offset=0x0 Size=0x4
    struct // Size=0x4 (Id=0)
    {
        unsigned long Op:4;// Offset=0x4 Size=0x4 BitOffset=0xc BitSize=0x4
    };
    union GPUFLOW_EXEC Exec;// Offset=0x0 Size=0x8
    union GPUFLOW_COND_EXEC CondExec;// Offset=0x0 Size=0x8
    union GPUFLOW_COND_EXEC_PREDS CondExecPreds;// Offset=0x0 Size=0x8
    union GPUFLOW_LOOP_START LoopStart;// Offset=0x0 Size=0x8
    union GPUFLOW_LOOP_END LoopEnd;// Offset=0x0 Size=0x8
    union GPUFLOW_COND_CALL CondCall;// Offset=0x0 Size=0x8
    union GPUFLOW_RETURN Return;// Offset=0x0 Size=0x8
    union GPUFLOW_COND_JUMP CondJump;// Offset=0x0 Size=0x8
    union GPUFLOW_ALLOC Alloc;// Offset=0x0 Size=0x8
    unsigned long dword[2];// Offset=0x0 Size=0x8
};

class D3D::D3DFastVector<GPUFLOW_INSTRUCTION,&D3D::MemAlloc,&D3D::MemFree>// Size=0xc (Id=4160)
{
    public void D3DFastVector<GPUFLOW_INSTRUCTION,&D3D::MemAlloc,&D3D::MemFree>();
    public void ~D3DFastVector<GPUFLOW_INSTRUCTION,&D3D::MemAlloc,&D3D::MemFree>();
    public void init(unsigned long ,HRESULT & );
    public void clear();
    public void destroy();
    public void resize(unsigned long ,HRESULT & );
    public void push_back(union GPUFLOW_INSTRUCTION & ,HRESULT & );
    public void push_back_empty(HRESULT & );
    public void ensure(unsigned long ,HRESULT & );
    public void ensure2(unsigned long ,HRESULT & );
    public union GPUFLOW_INSTRUCTION * begin();
    public union GPUFLOW_INSTRUCTION * end();
    public unsigned long size();
    public unsigned long sizeInBytes();
    public unsigned long capacity();
    public union GPUFLOW_INSTRUCTION * erase(union GPUFLOW_INSTRUCTION * );
    private union GPUFLOW_INSTRUCTION * m_pData;// Offset=0x0 Size=0x4
    private unsigned long m_Size;// Offset=0x4 Size=0x4
    private unsigned long m_Capacity;// Offset=0x8 Size=0x4
    public void * __vecDelDtor(unsigned int );
};

class D3D::D3DFastVector<GPUFLOW_INSTRUCTION,&D3D::MemAlloc,&D3D::MemFree>// Size=0xc (Id=4161)
{
    public void D3DFastVector<GPUFLOW_INSTRUCTION,&D3D::MemAlloc,&D3D::MemFree>();
    public void ~D3DFastVector<GPUFLOW_INSTRUCTION,&D3D::MemAlloc,&D3D::MemFree>();
    public void init(unsigned long ,HRESULT & );
    public void clear();
    public void destroy();
    public void resize(unsigned long ,HRESULT & );
    public void push_back(union GPUFLOW_INSTRUCTION & ,HRESULT & );
    public void push_back_empty(HRESULT & );
    public void ensure(unsigned long ,HRESULT & );
    public void ensure2(unsigned long ,HRESULT & );
    public union GPUFLOW_INSTRUCTION * begin();
    public union GPUFLOW_INSTRUCTION * end();
    public unsigned long size();
    public unsigned long sizeInBytes();
    public unsigned long capacity();
    public union GPUFLOW_INSTRUCTION * erase(union GPUFLOW_INSTRUCTION * );
    private union GPUFLOW_INSTRUCTION * m_pData;// Offset=0x0 Size=0x4
    private unsigned long m_Size;// Offset=0x4 Size=0x4
    private unsigned long m_Capacity;// Offset=0x8 Size=0x4
    public void * __vecDelDtor(unsigned int );
};

union D3D::InterpolatorRecord// Size=0x4 (Id=4162)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned long usageAndIndex:8;// Offset=0x0 Size=0x4 BitOffset=0x18 BitSize=0x8
        unsigned long oldReg:4;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0x4
        unsigned long newReg:4;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x4
        unsigned long mask:4;// Offset=0x0 Size=0x4 BitOffset=0xc BitSize=0x4
        unsigned long centroid:1;// Offset=0x0 Size=0x4 BitOffset=0xb BitSize=0x1
        unsigned long nointerpolation:1;// Offset=0x0 Size=0x4 BitOffset=0xa BitSize=0x1
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

union D3D::_MB_PSINPUTDECLARATION// Size=0x4 (Id=4163)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned int usageAndIndex:8;// Offset=0x0 Size=0x4 BitOffset=0x18 BitSize=0x8
        unsigned int reg:4;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0x4
        unsigned int componentMask:4;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x4
        unsigned int centroid:1;// Offset=0x0 Size=0x4 BitOffset=0xf BitSize=0x1
        unsigned int nointerpolation:1;// Offset=0x0 Size=0x4 BitOffset=0xe BitSize=0x1
    };
    unsigned long dword;// Offset=0x0 Size=0x4
};

class D3D::RemoveDebugInfoHelper// Size=0x8 (Id=4164)
{
    public void RemoveDebugInfoHelper(void * ,unsigned long );
    public void ~RemoveDebugInfoHelper();
    public void * GetNonDebugFunction();
    private void * pNondebugFunction;// Offset=0x0 Size=0x4
    private void * pOriginalFunction;// Offset=0x4 Size=0x4
    public void * __vecDelDtor(unsigned int );
};

struct _UCODE_DEFINITION_TABLE_MASKEDSTATEDELTA// Size=0x4 (Id=4165)
{
    union // Size=0x4 (Id=0)
    {
        unsigned short byteOffset;// Offset=0x0 Size=0x2
        unsigned short dwordCount;// Offset=0x2 Size=0x2
        struct <unnamed-type-data>// Size=0x8 (Id=46761)
        {
            unsigned long andMask;// Offset=0x0 Size=0x4
            unsigned long orMask;// Offset=0x4 Size=0x4
        };
    };
    struct _UCODE_DEFINITION_TABLE_MASKEDSTATEDELTA::<unnamed-type-data> data[0];
};

struct _UCODE_DEFINITION_TABLE_MASKEDSTATEDELTA::<unnamed-type-data>// Size=0x8 (Id=4166)
{
    unsigned long andMask;// Offset=0x0 Size=0x4
    unsigned long orMask;// Offset=0x4 Size=0x4
};

enum D3DXShader::_D3DCOMPONENT_TYPE
{
};

struct _D3DXSHADER_CONSTANTTABLE// Size=0x1c (Id=4168)
{
    unsigned long Size;// Offset=0x0 Size=0x4
    unsigned long Creator;// Offset=0x4 Size=0x4
    unsigned long Version;// Offset=0x8 Size=0x4
    unsigned long Constants;// Offset=0xc Size=0x4
    unsigned long ConstantInfo;// Offset=0x10 Size=0x4
    unsigned long Flags;// Offset=0x14 Size=0x4
    unsigned long Target;// Offset=0x18 Size=0x4
};

class D3DXShader::CNodeDecl// Size=0x0 (Id=4169)
{
};

class D3DXShader::CNode// Size=0x0 (Id=4170)
{
};

class D3DXShader::CNodeVariable// Size=0x0 (Id=4171)
{
};

struct XShaderPDBBuilder// Size=0x1 (Id=4172)
{
    unsigned long AddRef();
    unsigned long Release();
    void BeginPass(int );
    void EndPass(unsigned long );
    void Initialize(char * ,unsigned long );
    void BeginShader(char * ,unsigned long );
    void GetPDBHint(struct XShaderPDBHint * );
    void GetPDBHintEx(struct XShaderPDBHint * ,char * ,unsigned long );
    void AddSourceMapping(int ,unsigned long ,char * ,unsigned long ,unsigned long ,int );
    void AddConstantTable(struct _D3DXSHADER_CONSTANTTABLE * ,unsigned long );
    void AddArgument(char * ,char * );
    void AddEffectArguments(unsigned long ,struct _D3DXSHADER_COMPILE_PARAMETERSW * );
    void AddEffectArguments(unsigned long ,struct _D3DXSHADER_COMPILE_PARAMETERSA * );
    void AddAsmArguments(unsigned long ,struct _D3DXSHADER_COMPILE_PARAMETERSW * );
    void AddAsmArguments(unsigned long ,struct _D3DXSHADER_COMPILE_PARAMETERSA * );
    void AddHLSLArguments(unsigned long ,struct _D3DXSHADER_COMPILE_PARAMETERSW * );
    void AddHLSLArguments(unsigned long ,struct _D3DXSHADER_COMPILE_PARAMETERSA * );
    void Finish(unsigned long );
    unsigned long GetPDBSize();
    HRESULT GetPDB(void * ,unsigned long ,unsigned long * );
    HRESULT AddSourceFile(char * ,char * ,unsigned long );
    void AddDefine(char * ,char * );
    HRESULT SetVariableCount(unsigned long );
    void AddVariableInfo(unsigned long ,class D3DXShader::CNodeDecl * ,class D3DXShader::CNode * ,class D3DXShader::CNodeVariable * ,unsigned long ,unsigned long );
    void AddVariableDebugInfo(unsigned long ,unsigned long ,char ,unsigned long ,int ,int ,int ,unsigned long );
    void RemapVariableRegisters(unsigned long * );
    HRESULT SetFunctionCount(unsigned long );
    HRESULT AddFunctionInfo(unsigned long ,class D3DXShader::CNodeDecl * );
    HRESULT SetFunctionEntryExitCount(unsigned long );
    void AddFunctionEntry(unsigned long ,unsigned long ,int ,unsigned long );
    void AddFunctionExit(unsigned long ,unsigned long ,int ,unsigned long );
    HRESULT SetLexicalScopeCount(unsigned long );
    void AddLexicalScope(unsigned long ,unsigned long );
    void AddVfetch(unsigned long ,unsigned long ,unsigned long ,unsigned long ,int );
    void AddInterpolator(unsigned long ,unsigned long ,unsigned long );
    HRESULT EnumerateLiteralsCallback(unsigned long ,unsigned long ,unsigned long ,void * );
    void SetFxlTechnique(unsigned long ,char * );
    void SetFxlPass(unsigned long ,char * );
    HRESULT SetAssertCount(unsigned long );
    void SetAssertInfo(unsigned long ,unsigned long ,unsigned long ,char * ,unsigned long ,char * ,unsigned long );
    void SetAssertionsDisabled();
    HRESULT SetDebugPrintCount(unsigned long );
    void SetDebugPrintInfo(unsigned long ,char * ,unsigned long );
    HRESULT SetDebugPrintArgumentCount(unsigned long ,unsigned long );
    void SetDebugPrintArgumentType(unsigned long ,unsigned long ,enum D3DXShader::_D3DCOMPONENT_TYPE ,unsigned long ,unsigned long );
    HRESULT SetDebugPrintArgumentRegisterCount(unsigned long ,unsigned long ,unsigned long );
    void SetDebugPrintArgumentRegister(unsigned long ,unsigned long ,unsigned long ,unsigned long );
    void SetDebugPrintDisabled();
    struct IShaderPDBBuilder * PromoteToIShaderPDBBuilder();
};

union XGSetVertexDeclaration::__l2::<unnamed-type-$S2>// Size=0x10 (Id=4173)
{
    unsigned char streamMask[16];// Offset=0x0 Size=0x10
    unsigned long long streamMask64[2];// Offset=0x0 Size=0x10
};

enum SND_EQTYPE
{
    SND_EQTYPE_FIRST=0,
    SND_EQTYPE_LOWPASS=0,
    SND_EQTYPE_HIGHPASS=1,
    SND_EQTYPE_LOWSHELF=2,
    SND_EQTYPE_HIGHSHELF=3,
    SND_EQTYPE_BELL=4,
    SND_EQTYPE_LAST=4,
    SND_EQTYPE_COUNT=5,
    SND_EQTYPE_INVALID=5
};

enum snd_stopsounds_arg_t
{
    SND_STOP_ALL=0,
    SND_KEEP_REVERB=1,
    SND_KEEP_MUSIC=2,
    SND_KEEP_AMBIENT=4,
    SND_KEEP_MUSIC_AND_AMBIENT=6,
    SND_STOP_STREAMED=8,
    SND_KEEP_CHANNEL_VOLUMES=16
};

enum trType_t
{
    TR_STATIONARY=0,
    TR_INTERPOLATE=1,
    TR_LINEAR=2,
    TR_LINEAR_STOP=3,
    TR_SINE=4,
    TR_GRAVITY=5,
    TR_LOW_GRAVITY=6,
    TR_ACCELERATE=7,
    TR_DECELERATE=8,
    TR_PHYSICS=9,
    TR_FIRST_RAGDOLL=10,
    TR_RAGDOLL=10,
    TR_RAGDOLL_GRAVITY=11,
    TR_RAGDOLL_INTERPOLATE=12,
    TR_LAST_RAGDOLL=12,
    NUM_TRTYPES=13
};

enum team_t
{
    TEAM_FREE=0,
    TEAM_AXIS=1,
    TEAM_ALLIES=2,
    TEAM_SPECTATOR=3,
    TEAM_NUM_TEAMS=4
};

enum _unnamed_4178
{
    IMPACTEFFECT_HEADSHOT=1,
    IMPACTEFFECT_FATAL=2,
    IMPACTEFFECT_EXIT=4,
    IMPACTEFFECT_NOVISUAL=8,
    IMPACTEFFECT_NOSOUND=16,
    IMPACTEFFECT_LAST=16
};

enum _unnamed_4179
{
    CON_CHANNEL_DONT_FILTER=0,
    CON_CHANNEL_ERROR=1,
    CON_CHANNEL_GAMENOTIFY=2,
    CON_CHANNEL_BOLDGAME=3,
    CON_CHANNEL_SUBTITLE=4,
    CON_CHANNEL_OBITUARY=5,
    CON_CHANNEL_LOGFILEONLY=6,
    CON_CHANNEL_CONSOLEONLY=7,
    CON_CHANNEL_GFX=8,
    CON_CHANNEL_SOUND=9,
    CON_CHANNEL_FILES=10,
    CON_CHANNEL_DEVGUI=11,
    CON_CHANNEL_PROFILE=12,
    CON_CHANNEL_UI=13,
    CON_CHANNEL_CLIENT=14,
    CON_CHANNEL_SERVER=15,
    CON_CHANNEL_SYSTEM=16,
    CON_CHANNEL_PLAYERWEAP=17,
    CON_CHANNEL_AI=18,
    CON_CHANNEL_ANIM=19,
    CON_CHANNEL_PHYS=20,
    CON_CHANNEL_FX=21,
    CON_CHANNEL_LEADERBOARDS=22,
    CON_CHANNEL_PARSERSCRIPT=23,
    CON_CHANNEL_SCRIPT=24,
    CON_CHANNEL_NETWORK=25,
    CON_BUILTIN_CHANNEL_COUNT=26
};

struct _D3DSURFACE_DESC// Size=0x20 (Id=4180)
{
    enum _D3DFORMAT Format;// Offset=0x0 Size=0x4
    enum _D3DRESOURCETYPE Type;// Offset=0x4 Size=0x4
    unsigned long Usage;// Offset=0x8 Size=0x4
    unsigned long Pool;// Offset=0xc Size=0x4
    enum _D3DMULTISAMPLE_TYPE MultiSampleType;// Offset=0x10 Size=0x4
    unsigned long MultiSampleQuality;// Offset=0x14 Size=0x4
    unsigned int Width;// Offset=0x18 Size=0x4
    unsigned int Height;// Offset=0x1c Size=0x4
};

struct _D3DPRESENT_PARAMETERS_// Size=0x7c (Id=4181)
{
    unsigned int BackBufferWidth;// Offset=0x0 Size=0x4
    unsigned int BackBufferHeight;// Offset=0x4 Size=0x4
    enum _D3DFORMAT BackBufferFormat;// Offset=0x8 Size=0x4
    unsigned int BackBufferCount;// Offset=0xc Size=0x4
    enum _D3DMULTISAMPLE_TYPE MultiSampleType;// Offset=0x10 Size=0x4
    unsigned long MultiSampleQuality;// Offset=0x14 Size=0x4
    enum _D3DSWAPEFFECT SwapEffect;// Offset=0x18 Size=0x4
    struct HWND__ * hDeviceWindow;// Offset=0x1c Size=0x4
    int Windowed;// Offset=0x20 Size=0x4
    int EnableAutoDepthStencil;// Offset=0x24 Size=0x4
    enum _D3DFORMAT AutoDepthStencilFormat;// Offset=0x28 Size=0x4
    unsigned long Flags;// Offset=0x2c Size=0x4
    unsigned int FullScreen_RefreshRateInHz;// Offset=0x30 Size=0x4
    unsigned int PresentationInterval;// Offset=0x34 Size=0x4
    int DisableAutoBackBuffer;// Offset=0x38 Size=0x4
    int DisableAutoFrontBuffer;// Offset=0x3c Size=0x4
    enum _D3DFORMAT FrontBufferFormat;// Offset=0x40 Size=0x4
    enum _D3DCOLORSPACE FrontBufferColorSpace;// Offset=0x44 Size=0x4
    struct _D3DRING_BUFFER_PARAMETERS RingBufferParameters;// Offset=0x48 Size=0x18
    struct _D3DVIDEO_SCALER_PARAMETERS VideoScalerParameters;// Offset=0x60 Size=0x1c
};

union FloatToInt// Size=0x4 (Id=4182)
{
    float fValue;// Offset=0x0 Size=0x4
    int iValue;// Offset=0x0 Size=0x4
};

struct _D3DMIPTAIL_DESC// Size=0x24 (Id=4183)
{
    enum _D3DFORMAT Format;// Offset=0x0 Size=0x4
    enum _D3DRESOURCETYPE Type;// Offset=0x4 Size=0x4
    unsigned long Usage;// Offset=0x8 Size=0x4
    unsigned long Pool;// Offset=0xc Size=0x4
    unsigned int Width;// Offset=0x10 Size=0x4
    unsigned int Height;// Offset=0x14 Size=0x4
    unsigned int Depth;// Offset=0x18 Size=0x4
    unsigned int BaseLevel;// Offset=0x1c Size=0x4
    unsigned int Size;// Offset=0x20 Size=0x4
};

struct _D3DVERTEXBUFFER_DESC// Size=0x18 (Id=4184)
{
    enum _D3DFORMAT Format;// Offset=0x0 Size=0x4
    enum _D3DRESOURCETYPE Type;// Offset=0x4 Size=0x4
    unsigned long Usage;// Offset=0x8 Size=0x4
    unsigned long Pool;// Offset=0xc Size=0x4
    unsigned int Size;// Offset=0x10 Size=0x4
    unsigned long FVF;// Offset=0x14 Size=0x4
};

struct _D3DRESOLVE_PARAMETERS// Size=0xc (Id=4185)
{
    enum _D3DFORMAT ColorFormat;// Offset=0x0 Size=0x4
    int ColorExpBias;// Offset=0x4 Size=0x4
    enum _D3DFORMAT DepthFormat;// Offset=0x8 Size=0x4
};

struct _D3DVOLUME_DESC// Size=0x1c (Id=4186)
{
    enum _D3DFORMAT Format;// Offset=0x0 Size=0x4
    enum _D3DRESOURCETYPE Type;// Offset=0x4 Size=0x4
    unsigned long Usage;// Offset=0x8 Size=0x4
    unsigned long Pool;// Offset=0xc Size=0x4
    unsigned int Width;// Offset=0x10 Size=0x4
    unsigned int Height;// Offset=0x14 Size=0x4
    unsigned int Depth;// Offset=0x18 Size=0x4
};

struct _D3DDISPLAYMODE// Size=0x10 (Id=4187)
{
    unsigned int Width;// Offset=0x0 Size=0x4
    unsigned int Height;// Offset=0x4 Size=0x4
    unsigned int RefreshRate;// Offset=0x8 Size=0x4
    enum _D3DFORMAT Format;// Offset=0xc Size=0x4
};

enum MissileFlightMode
{
    MISSILEFLIGHTMODE_TOP=0,
    MISSILEFLIGHTMODE_DIRECT=1,
    MISSILEFLIGHTMODE_COUNT=2
};

struct D3DResource// Size=0x18 (Id=4189)
{
    unsigned long AddRef();
    unsigned long Release();
    HRESULT GetDevice(struct D3DDevice ** );
    enum _D3DRESOURCETYPE GetType();
    int IsBusy();
    int IsSet(struct D3DDevice * );
    void BlockUntilNotBusy();
    void SetIdentifier(unsigned long );
    unsigned long GetIdentifier();
    unsigned long Common;// Offset=0x0 Size=0x4
    unsigned long ReferenceCount;// Offset=0x4 Size=0x4
    unsigned long Fence;// Offset=0x8 Size=0x4
    unsigned long ReadFence;// Offset=0xc Size=0x4
    unsigned long Identifier;// Offset=0x10 Size=0x4
    unsigned long BaseFlush;// Offset=0x14 Size=0x4
};

struct _D3DSURFACE_PARAMETERS// Size=0x10 (Id=4190)
{
    unsigned long Base;// Offset=0x0 Size=0x4
    unsigned long HierarchicalZBase;// Offset=0x4 Size=0x4
    int ColorExpBias;// Offset=0x8 Size=0x4
    enum _D3DHIZFUNC HiZFunc;// Offset=0xc Size=0x4
};

struct D3DSurface : public D3DResource// Size=0x30 (Id=4191)
{
    HRESULT GetContainer(struct _GUID & ,void ** );
    HRESULT GetDesc(struct _D3DSURFACE_DESC * );
    HRESULT LockRect(struct _D3DLOCKED_RECT * ,struct tagRECT * ,unsigned long );
    HRESULT AsyncLockRect(unsigned long long ,struct _D3DLOCKED_RECT * ,struct tagRECT * ,unsigned long );
    HRESULT UnlockRect();
    unsigned char __align0[24];// Offset=0x0 Size=0x18
    union // Size=0x30 (Id=0)
    {
        union GPU_SURFACEINFO SurfaceInfo;// Offset=0x18 Size=0x4
        union // Size=0x4 (Id=0)
        {
            union GPU_DEPTHINFO DepthInfo;// Offset=0x1c Size=0x4
            union GPU_COLORINFO ColorInfo;// Offset=0x1c Size=0x4
        };
        union GPU_HICONTROL HiControl;// Offset=0x20 Size=0x4
        struct // Size=0x4 (Id=0)
        {
            unsigned long Width:14;// Offset=0x24 Size=0x4 BitOffset=0x12 BitSize=0xe
            unsigned long Height:15;// Offset=0x24 Size=0x4 BitOffset=0x3 BitSize=0xf
        };
        enum _D3DFORMAT Format;// Offset=0x28 Size=0x4
        unsigned long Size;// Offset=0x2c Size=0x4
        struct D3DBaseTexture * Parent;// Offset=0x18 Size=0x4
        struct // Size=0x4 (Id=0)
        {
            unsigned long MipLevel:4;// Offset=0x1c Size=0x4 BitOffset=0x1c BitSize=0x4
            unsigned long ArrayIndex:6;// Offset=0x1c Size=0x4 BitOffset=0x16 BitSize=0x6
        };
    };
};

struct _D3DGPUVERSION// Size=0x8 (Id=4192)
{
    enum _D3DGPUMAJORVERSION MajorVersion;// Offset=0x0 Size=0x4
    unsigned short MinorVersion;// Offset=0x4 Size=0x2
};

struct _D3DDEVICE_CREATION_PARAMETERS// Size=0x10 (Id=4193)
{
    unsigned int AdapterOrdinal;// Offset=0x0 Size=0x4
    enum _D3DDEVTYPE DeviceType;// Offset=0x4 Size=0x4
    struct HWND__ * hFocusWindow;// Offset=0x8 Size=0x4
    unsigned long BehaviorFlags;// Offset=0xc Size=0x4
};

struct _D3DCAPS9// Size=0x130 (Id=4194)
{
    enum _D3DDEVTYPE DeviceType;// Offset=0x0 Size=0x4
    unsigned int AdapterOrdinal;// Offset=0x4 Size=0x4
    unsigned long Caps;// Offset=0x8 Size=0x4
    unsigned long Caps2;// Offset=0xc Size=0x4
    unsigned long Caps3;// Offset=0x10 Size=0x4
    unsigned long PresentationIntervals;// Offset=0x14 Size=0x4
    unsigned long CursorCaps;// Offset=0x18 Size=0x4
    unsigned long DevCaps;// Offset=0x1c Size=0x4
    unsigned long PrimitiveMiscCaps;// Offset=0x20 Size=0x4
    unsigned long RasterCaps;// Offset=0x24 Size=0x4
    unsigned long ZCmpCaps;// Offset=0x28 Size=0x4
    unsigned long SrcBlendCaps;// Offset=0x2c Size=0x4
    unsigned long DestBlendCaps;// Offset=0x30 Size=0x4
    unsigned long AlphaCmpCaps;// Offset=0x34 Size=0x4
    unsigned long ShadeCaps;// Offset=0x38 Size=0x4
    unsigned long TextureCaps;// Offset=0x3c Size=0x4
    unsigned long TextureFilterCaps;// Offset=0x40 Size=0x4
    unsigned long CubeTextureFilterCaps;// Offset=0x44 Size=0x4
    unsigned long VolumeTextureFilterCaps;// Offset=0x48 Size=0x4
    unsigned long TextureAddressCaps;// Offset=0x4c Size=0x4
    unsigned long VolumeTextureAddressCaps;// Offset=0x50 Size=0x4
    unsigned long LineCaps;// Offset=0x54 Size=0x4
    unsigned long MaxTextureWidth;// Offset=0x58 Size=0x4
    unsigned long MaxTextureHeight;// Offset=0x5c Size=0x4
    unsigned long MaxVolumeExtent;// Offset=0x60 Size=0x4
    unsigned long MaxTextureRepeat;// Offset=0x64 Size=0x4
    unsigned long MaxTextureAspectRatio;// Offset=0x68 Size=0x4
    unsigned long MaxAnisotropy;// Offset=0x6c Size=0x4
    float MaxVertexW;// Offset=0x70 Size=0x4
    float GuardBandLeft;// Offset=0x74 Size=0x4
    float GuardBandTop;// Offset=0x78 Size=0x4
    float GuardBandRight;// Offset=0x7c Size=0x4
    float GuardBandBottom;// Offset=0x80 Size=0x4
    float ExtentsAdjust;// Offset=0x84 Size=0x4
    unsigned long StencilCaps;// Offset=0x88 Size=0x4
    unsigned long FVFCaps;// Offset=0x8c Size=0x4
    unsigned long TextureOpCaps;// Offset=0x90 Size=0x4
    unsigned long MaxTextureBlendStages;// Offset=0x94 Size=0x4
    unsigned long MaxSimultaneousTextures;// Offset=0x98 Size=0x4
    unsigned long VertexProcessingCaps;// Offset=0x9c Size=0x4
    unsigned long MaxActiveLights;// Offset=0xa0 Size=0x4
    unsigned long MaxUserClipPlanes;// Offset=0xa4 Size=0x4
    unsigned long MaxVertexBlendMatrices;// Offset=0xa8 Size=0x4
    unsigned long MaxVertexBlendMatrixIndex;// Offset=0xac Size=0x4
    float MaxPointSize;// Offset=0xb0 Size=0x4
    unsigned long MaxPrimitiveCount;// Offset=0xb4 Size=0x4
    unsigned long MaxVertexIndex;// Offset=0xb8 Size=0x4
    unsigned long MaxStreams;// Offset=0xbc Size=0x4
    unsigned long MaxStreamStride;// Offset=0xc0 Size=0x4
    unsigned long VertexShaderVersion;// Offset=0xc4 Size=0x4
    unsigned long MaxVertexShaderConst;// Offset=0xc8 Size=0x4
    unsigned long PixelShaderVersion;// Offset=0xcc Size=0x4
    float PixelShader1xMaxValue;// Offset=0xd0 Size=0x4
    unsigned long DevCaps2;// Offset=0xd4 Size=0x4
    float MaxNpatchTessellationLevel;// Offset=0xd8 Size=0x4
    unsigned long Reserved5;// Offset=0xdc Size=0x4
    unsigned int MasterAdapterOrdinal;// Offset=0xe0 Size=0x4
    unsigned int AdapterOrdinalInGroup;// Offset=0xe4 Size=0x4
    unsigned int NumberOfAdaptersInGroup;// Offset=0xe8 Size=0x4
    unsigned long DeclTypes;// Offset=0xec Size=0x4
    unsigned long NumSimultaneousRTs;// Offset=0xf0 Size=0x4
    unsigned long StretchRectFilterCaps;// Offset=0xf4 Size=0x4
    struct _D3DVSHADERCAPS2_0 VS20Caps;// Offset=0xf8 Size=0x10
    struct _D3DPSHADERCAPS2_0 PS20Caps;// Offset=0x108 Size=0x14
    unsigned long VertexTextureFilterCaps;// Offset=0x11c Size=0x4
    unsigned long MaxVShaderInstructionsExecuted;// Offset=0x120 Size=0x4
    unsigned long MaxPShaderInstructionsExecuted;// Offset=0x124 Size=0x4
    unsigned long MaxVertexShader30InstructionSlots;// Offset=0x128 Size=0x4
    unsigned long MaxPixelShader30InstructionSlots;// Offset=0x12c Size=0x4
};

enum HELICOPTER_STAGES
{
    HELICOPTER_ONFIRE=0,
    HELICOPTER_HEAVYSMOKE=1,
    HELICOPTER_SMOKING=2,
    HELICOPTER_FULLHEALTH=3,
    NUM_HELICOPTERSTAGES=4
};

struct D3DCubeTexture : public D3DBaseTexture// Size=0x34 (Id=4196)
{
    HRESULT GetLevelDesc(unsigned int ,struct _D3DSURFACE_DESC * );
    HRESULT GetCubeMapSurface(enum _D3DCUBEMAP_FACES ,unsigned int ,struct D3DSurface ** );
    HRESULT LockRect(enum _D3DCUBEMAP_FACES ,unsigned int ,struct _D3DLOCKED_RECT * ,struct tagRECT * ,unsigned long );
    HRESULT AsyncLockRect(unsigned long long ,enum _D3DCUBEMAP_FACES ,unsigned int ,struct _D3DLOCKED_RECT * ,struct tagRECT * ,unsigned long );
    HRESULT UnlockRect(enum _D3DCUBEMAP_FACES ,unsigned int );
    HRESULT LockTail(enum _D3DCUBEMAP_FACES ,struct _D3DLOCKED_TAIL * ,unsigned long );
    HRESULT AsyncLockTail(unsigned long long ,enum _D3DCUBEMAP_FACES ,struct _D3DLOCKED_TAIL * ,unsigned long );
    HRESULT UnlockTail(enum _D3DCUBEMAP_FACES );
};

enum ViewLockTypes
{
    PLAYERVIEWLOCK_NONE=0,
    PLAYERVIEWLOCK_FULL=1,
    PLAYERVIEWLOCK_WEAPONJITTER=2,
    PLAYERVIEWLOCKCOUNT=3
};

struct _D3DPERFCOUNTER_EVENTS// Size=0xf0 (Id=4198)
{
    enum GPUPERFEVENT_CP CP[1];// Offset=0x0 Size=0x4
    enum GPUPERFEVENT_RBBM RBBM[2];// Offset=0x4 Size=0x8
    enum GPUPERFEVENT_SQ SQ[4];// Offset=0xc Size=0x10
    enum GPUPERFEVENT_VGT VGT[4];// Offset=0x1c Size=0x10
    enum GPUPERFEVENT_VC VC[4];// Offset=0x2c Size=0x10
    enum GPUPERFEVENT_PA_SU PA_SU[4];// Offset=0x3c Size=0x10
    enum GPUPERFEVENT_PA_SC PA_SC[4];// Offset=0x4c Size=0x10
    enum GPUPERFEVENT_HZ HZ[2];// Offset=0x5c Size=0x8
    enum GPUPERFEVENT_TCR TCR[2];// Offset=0x64 Size=0x8
    enum GPUPERFEVENT_TCM TCM[2];// Offset=0x6c Size=0x8
    enum GPUPERFEVENT_TCF TCF[12];// Offset=0x74 Size=0x30
    enum GPUPERFEVENT_TP TP0[2];// Offset=0xa4 Size=0x8
    enum GPUPERFEVENT_TP TP1[2];// Offset=0xac Size=0x8
    enum GPUPERFEVENT_TP TP2[2];// Offset=0xb4 Size=0x8
    enum GPUPERFEVENT_TP TP3[2];// Offset=0xbc Size=0x8
    enum GPUPERFEVENT_SX SX[1];// Offset=0xc4 Size=0x4
    enum GPUPERFEVENT_BC BC[4];// Offset=0xc8 Size=0x10
    enum GPUPERFEVENT_MC MC0[1];// Offset=0xd8 Size=0x4
    enum GPUPERFEVENT_MC MC1[1];// Offset=0xdc Size=0x4
    enum GPUPERFEVENT_MH MH[3];// Offset=0xe0 Size=0xc
    enum GPUPERFEVENT_BIF BIF[1];// Offset=0xec Size=0x4
};

class D3DXps// Size=0x190 (Id=4199)
{
    private unsigned long m_Reserved[100];// Offset=0x0 Size=0x190
    public void D3DXps(struct D3DXpsThread * );
    public void ~D3DXps();
    public void * Allocate(unsigned long ,unsigned long );
    public void DrawVertices(enum _D3DPRIMITIVETYPE ,unsigned long ,void * );
    public void DrawIndexedVertices(enum _D3DPRIMITIVETYPE ,unsigned long ,void * ,enum _D3DFORMAT ,void * );
    public void KickOff();
    public int KickOffAndGet(unsigned long * );
    public void * __vecDelDtor(unsigned int );
};

struct D3DDevice// Size=0x2a80 (Id=4200)
{
    unsigned long AddRef();
    unsigned long Release();
    HRESULT GetDirect3D(struct Direct3D ** );
    HRESULT GetDeviceCaps(struct _D3DCAPS9 * );
    HRESULT GetDisplayMode(unsigned int ,struct _D3DDISPLAYMODE * );
    HRESULT GetCreationParameters(struct _D3DDEVICE_CREATION_PARAMETERS * );
    HRESULT Reset(struct _D3DPRESENT_PARAMETERS_ * );
    HRESULT Present(struct tagRECT * ,struct tagRECT * ,void * ,void * );
    HRESULT GetRasterStatus(unsigned int ,struct _D3DRASTER_STATUS * );
    void SetGammaRamp(unsigned int ,unsigned long ,struct _D3DGAMMARAMP * );
    void GetGammaRamp(unsigned int ,struct _D3DGAMMARAMP * );
    void SetPWLGamma(unsigned long ,struct _D3DPWLGAMMA * );
    void GetPWLGamma(struct _D3DPWLGAMMA * );
    HRESULT CreateTexture(unsigned int ,unsigned int ,unsigned int ,unsigned long ,enum _D3DFORMAT ,unsigned long ,struct D3DTexture ** ,void ** );
    HRESULT CreateVolumeTexture(unsigned int ,unsigned int ,unsigned int ,unsigned int ,unsigned long ,enum _D3DFORMAT ,unsigned long ,struct D3DVolumeTexture ** ,void ** );
    HRESULT CreateCubeTexture(unsigned int ,unsigned int ,unsigned long ,enum _D3DFORMAT ,unsigned long ,struct D3DCubeTexture ** ,void ** );
    HRESULT CreateArrayTexture(unsigned int ,unsigned int ,unsigned int ,unsigned int ,unsigned long ,enum _D3DFORMAT ,unsigned long ,struct D3DArrayTexture ** ,void ** );
    HRESULT CreateLineTexture(unsigned int ,unsigned int ,unsigned long ,enum _D3DFORMAT ,unsigned long ,struct D3DLineTexture ** ,void ** );
    HRESULT CreateVertexBuffer(unsigned int ,unsigned long ,unsigned long ,unsigned long ,struct D3DVertexBuffer ** ,void ** );
    HRESULT CreateIndexBuffer(unsigned int ,unsigned long ,enum _D3DFORMAT ,unsigned long ,struct D3DIndexBuffer ** ,void ** );
    HRESULT CreateRenderTarget(unsigned int ,unsigned int ,enum _D3DFORMAT ,enum _D3DMULTISAMPLE_TYPE ,unsigned long ,int ,struct D3DSurface ** ,struct _D3DSURFACE_PARAMETERS * );
    HRESULT CreateDepthStencilSurface(unsigned int ,unsigned int ,enum _D3DFORMAT ,enum _D3DMULTISAMPLE_TYPE ,unsigned long ,int ,struct D3DSurface ** ,struct _D3DSURFACE_PARAMETERS * );
    HRESULT SetRenderTarget(unsigned long ,struct D3DSurface * );
    HRESULT GetRenderTarget(unsigned long ,struct D3DSurface ** );
    HRESULT SetDepthStencilSurface(struct D3DSurface * );
    HRESULT GetDepthStencilSurface(struct D3DSurface ** );
    HRESULT GetBackBuffer(unsigned int ,unsigned int ,unsigned int ,struct D3DSurface ** );
    HRESULT GetFrontBuffer(struct D3DTexture ** );
    HRESULT BeginScene();
    HRESULT EndScene();
    HRESULT Clear(unsigned long ,struct _D3DRECT * ,unsigned long ,unsigned long ,float ,unsigned long );
    HRESULT ClearF(unsigned long ,struct _D3DRECT * ,struct __vector4 * ,float ,unsigned long );
    HRESULT SetViewport(struct _D3DVIEWPORT9 * );
    HRESULT GetViewport(struct _D3DVIEWPORT9 * );
    HRESULT SetRenderState(enum _D3DRENDERSTATETYPE ,unsigned long );
    HRESULT SetRenderState_Inline(enum _D3DRENDERSTATETYPE ,unsigned long );
    HRESULT GetRenderState(enum _D3DRENDERSTATETYPE ,unsigned long * );
    HRESULT CreateStateBlock(enum _D3DSTATEBLOCKTYPE ,struct D3DStateBlock ** );
    HRESULT GetTexture(unsigned long ,struct D3DBaseTexture ** );
    HRESULT SetTexture(unsigned long ,struct D3DBaseTexture * );
    HRESULT GetSamplerState(unsigned long ,enum _D3DSAMPLERSTATETYPE ,unsigned long * );
    HRESULT SetSamplerState(unsigned long ,enum _D3DSAMPLERSTATETYPE ,unsigned long );
    HRESULT SetSamplerState_Inline(unsigned long ,enum _D3DSAMPLERSTATETYPE ,unsigned long );
    HRESULT DrawVertices(enum _D3DPRIMITIVETYPE ,unsigned int ,unsigned int );
    HRESULT DrawIndexedVertices(enum _D3DPRIMITIVETYPE ,int ,unsigned int ,unsigned int );
    HRESULT DrawVerticesUP(enum _D3DPRIMITIVETYPE ,unsigned int ,void * ,unsigned int );
    HRESULT DrawIndexedVerticesUP(enum _D3DPRIMITIVETYPE ,unsigned int ,unsigned int ,unsigned int ,void * ,enum _D3DFORMAT ,void * ,unsigned int );
    HRESULT DrawPrimitive(enum _D3DPRIMITIVETYPE ,unsigned int ,unsigned int );
    HRESULT DrawIndexedPrimitive(enum _D3DPRIMITIVETYPE ,int ,unsigned int ,unsigned int ,unsigned int ,unsigned int );
    HRESULT DrawPrimitiveUP(enum _D3DPRIMITIVETYPE ,unsigned int ,void * ,unsigned int );
    HRESULT DrawIndexedPrimitiveUP(enum _D3DPRIMITIVETYPE ,unsigned int ,unsigned int ,unsigned int ,void * ,enum _D3DFORMAT ,void * ,unsigned int );
    HRESULT SetFVF(unsigned long );
    HRESULT GetFVF(unsigned long * );
    HRESULT CreateVertexShader(unsigned long * ,struct D3DVertexShader ** );
    HRESULT SetVertexShader(struct D3DVertexShader * );
    HRESULT GetVertexShader(struct D3DVertexShader ** );
    HRESULT SetVertexShaderConstantB(unsigned int ,int * ,unsigned int );
    HRESULT SetVertexShaderConstantF(unsigned int ,float * ,unsigned long );
    HRESULT SetVertexShaderConstantI(unsigned int ,int * ,unsigned long );
    HRESULT GetVertexShaderConstantB(unsigned int ,int * ,unsigned long );
    HRESULT GetVertexShaderConstantF(unsigned int ,float * ,unsigned long );
    HRESULT GetVertexShaderConstantI(unsigned int ,int * ,unsigned long );
    HRESULT SetVertexShaderConstantF_NotInline(unsigned int ,float * ,unsigned long );
    HRESULT SetStreamSource(unsigned int ,struct D3DVertexBuffer * ,unsigned int ,unsigned int );
    HRESULT GetStreamSource(unsigned int ,struct D3DVertexBuffer ** ,unsigned int * ,unsigned int * );
    HRESULT SetIndices(struct D3DIndexBuffer * );
    HRESULT GetIndices(struct D3DIndexBuffer ** );
    HRESULT CreatePixelShader(unsigned long * ,struct D3DPixelShader ** );
    HRESULT SetPixelShader(struct D3DPixelShader * );
    HRESULT GetPixelShader(struct D3DPixelShader ** );
    HRESULT SetPixelShaderConstantB(unsigned int ,int * ,unsigned int );
    HRESULT SetPixelShaderConstantF(unsigned int ,float * ,unsigned long );
    HRESULT SetPixelShaderConstantI(unsigned int ,int * ,unsigned long );
    HRESULT GetPixelShaderConstantB(unsigned int ,int * ,unsigned long );
    HRESULT GetPixelShaderConstantF(unsigned int ,float * ,unsigned long );
    HRESULT GetPixelShaderConstantI(unsigned int ,int * ,unsigned long );
    HRESULT SetPixelShaderConstantF_NotInline(unsigned int ,float * ,unsigned long );
    HRESULT CreateVertexDeclaration(struct _D3DVERTEXELEMENT9 * ,struct D3DVertexDeclaration ** );
    HRESULT SetVertexDeclaration(struct D3DVertexDeclaration * );
    HRESULT GetVertexDeclaration(struct D3DVertexDeclaration ** );
    HRESULT SetScissorRect(struct tagRECT * );
    HRESULT GetScissorRect(struct tagRECT * );
    HRESULT SetClipPlane(unsigned long ,float * );
    HRESULT GetClipPlane(unsigned long ,float * );
    HRESULT CreateQuery(enum _D3DQUERYTYPE ,struct D3DQuery ** );
    HRESULT CreateQueryTiled(enum _D3DQUERYTYPE ,unsigned long ,struct D3DQuery ** );
    HRESULT Resolve(unsigned long ,struct _D3DRECT * ,struct D3DBaseTexture * ,struct _D3DPOINT * ,unsigned int ,unsigned int ,struct __vector4 * ,float ,unsigned long ,struct _D3DRESOLVE_PARAMETERS * );
    HRESULT AcquireThreadOwnership();
    HRESULT ReleaseThreadOwnership();
    HRESULT SetThreadOwnership(unsigned long );
    unsigned long QueryThreadOwnership();
    int IsBusy();
    HRESULT BlockUntilIdle();
    HRESULT InsertCallback(unsigned long ,void  ( * )(unsigned long ),unsigned long );
    HRESULT SetVerticalBlankCallback(void  ( * )(struct _D3DVBLANKDATA * ));
    HRESULT SetSwapCallback(void  ( * )(struct _D3DSWAPDATA * ));
    HRESULT SynchronizeToPresentationInterval();
    HRESULT Swap(struct D3DBaseTexture * ,struct _D3DVIDEO_SCALER_PARAMETERS * );
    HRESULT RenderSystemUI();
    HRESULT QueryBufferSpace(unsigned long * ,unsigned long * );
    HRESULT SetPredication(unsigned long );
    HRESULT SetPatchablePredication(unsigned long ,unsigned long );
    HRESULT BeginTiling(unsigned long ,unsigned long ,struct _D3DRECT * ,struct __vector4 * ,float ,unsigned long );
    HRESULT EndTiling(unsigned long ,struct _D3DRECT * ,struct D3DBaseTexture * ,struct __vector4 * ,float ,unsigned long ,struct _D3DRESOLVE_PARAMETERS * );
    HRESULT BeginZPass(unsigned long );
    HRESULT EndZPass();
    HRESULT InvokeRenderPass();
    HRESULT BeginExport(unsigned long ,struct D3DResource * ,unsigned long );
    HRESULT EndExport(unsigned long ,struct D3DResource * ,unsigned long );
    HRESULT DrawTessellatedPrimitive(enum _D3DTESSPRIMITIVETYPE ,unsigned int ,unsigned int );
    HRESULT DrawIndexedTessellatedPrimitive(enum _D3DTESSPRIMITIVETYPE ,int ,unsigned int ,unsigned int );
    HRESULT SetRingBufferParameters(struct _D3DRING_BUFFER_PARAMETERS * );
    HRESULT XpsBegin(unsigned long );
    HRESULT XpsEnd();
    HRESULT XpsSetCallback(void  ( * )(struct D3DXpsThread * ,void * ,void * ,unsigned long ),void * ,unsigned long );
    HRESULT XpsSubmit(unsigned long ,void * ,unsigned long );
    HRESULT XpsSetPredication(unsigned long );
    HRESULT XpsSetPredicationFromVisibility(void * );
    HRESULT XpsSetPredicationFromQuery(struct D3DQuery * );
    HRESULT BeginVertices(enum _D3DPRIMITIVETYPE ,unsigned int ,unsigned int ,void ** );
    HRESULT EndVertices();
    HRESULT BeginIndexedVertices(enum _D3DPRIMITIVETYPE ,int ,unsigned int ,unsigned int ,enum _D3DFORMAT ,unsigned int ,void ** ,void ** );
    HRESULT EndIndexedVertices();
    unsigned long InsertFence();
    HRESULT BlockOnFence(unsigned long );
    int IsFencePending(unsigned long );
    HRESULT SetBlendState(unsigned long ,struct _D3DBLENDSTATE );
    HRESULT GetBlendState(unsigned long ,struct _D3DBLENDSTATE * );
    HRESULT SetVertexFetchConstant(unsigned int ,struct D3DVertexBuffer * ,unsigned int );
    HRESULT SetTextureFetchConstant(unsigned int ,struct D3DBaseTexture * );
    float GetCounter(enum _D3DCOUNTER );
    HRESULT SetSafeLevel(unsigned long ,unsigned long );
    HRESULT GetSafeLevel(unsigned long * ,unsigned long * );
    HRESULT SetHangCallback(void  ( * )(char * ));
    HRESULT BeginConditionalSurvey(unsigned long ,unsigned long );
    HRESULT EndConditionalSurvey(unsigned long );
    HRESULT BeginConditionalRendering(unsigned long );
    HRESULT EndConditionalRendering();
    HRESULT PersistDisplay(struct D3DTexture * ,struct _D3DVIDEO_SCALER_PARAMETERS * );
    HRESULT GetPersistedTexture(struct D3DTexture ** );
    HRESULT Suspend();
    HRESULT Resume();
    HRESULT CreatePerfCounters(struct D3DPerfCounters ** ,unsigned int );
    HRESULT EnablePerfCounters(int );
    HRESULT SetPerfCounterEvents(struct _D3DPERFCOUNTER_EVENTS * ,unsigned long );
    HRESULT QueryPerfCounters(struct D3DPerfCounters * ,unsigned long );
    HRESULT SetShaderInstructionAllocation(unsigned long ,unsigned long ,unsigned long );
    HRESULT SetShaderGPRAllocation(unsigned long ,unsigned long ,unsigned long );
    HRESULT GetShaderGPRAllocation(unsigned long * ,unsigned long * ,unsigned long * );
    HRESULT SetScreenExtentQueryMode(enum _D3DSCREENEXTENTQUERYMODE );
    HRESULT GetScreenExtentQueryMode(enum _D3DSCREENEXTENTQUERYMODE * );
    HRESULT BeginPixelShaderConstantF1(unsigned int ,struct __vector4 ** ,unsigned int );
    HRESULT EndPixelShaderConstantF1();
    HRESULT BeginVertexShaderConstantF1(unsigned int ,struct __vector4 ** ,unsigned int );
    HRESULT EndVertexShaderConstantF1();
    HRESULT BeginPixelShaderConstantF4(unsigned int ,struct __vector4 ** ,struct __vector4 ** ,unsigned int );
    HRESULT EndPixelShaderConstantF4();
    HRESULT BeginVertexShaderConstantF4(unsigned int ,struct __vector4 ** ,struct __vector4 ** ,unsigned int );
    HRESULT EndVertexShaderConstantF4();
    unsigned long GetCurrentFence();
    HRESULT InvalidateGpuCache(void * ,unsigned long ,unsigned long );
    HRESULT InvalidateResourceGpuCache(struct D3DResource * ,unsigned long );
    HRESULT FlushHiZStencil(enum _D3DFHZS_FLUSHTYPE );
    HRESULT UnsetAll();
    unsigned long GetDeviceState();
    HRESULT SetBlockCallback(unsigned long ,void  ( * )(unsigned long ,enum _D3DBLOCKTYPE ,float ,unsigned long ));
    HRESULT SetSurfaces(struct _D3DSURFACES * ,unsigned long );
    HRESULT CreateConstantBuffer(unsigned int ,unsigned long ,struct D3DConstantBuffer ** );
    HRESULT CreateCommandBuffer(unsigned int ,unsigned long ,struct D3DCommandBuffer ** );
    HRESULT CreateGrowableCommandBuffer(unsigned long ,void *  ( * )(unsigned long ,unsigned long ,unsigned long * ,unsigned long ),void  ( * )(unsigned long ),void  ( * )(unsigned long ,unsigned long * ,unsigned long * ),unsigned long ,unsigned long ,struct D3DCommandBuffer ** );
    HRESULT BeginCommandBuffer(struct D3DCommandBuffer * ,unsigned long ,struct _D3DTAGCOLLECTION * ,struct _D3DTAGCOLLECTION * ,struct _D3DRECT * ,unsigned long );
    HRESULT EndCommandBuffer();
    HRESULT RunCommandBuffer(struct D3DCommandBuffer * ,unsigned long );
    HRESULT SetCommandBufferPredication(unsigned long ,unsigned long );
    unsigned long InsertMarker();
    HRESULT Nop(unsigned long );
    HRESULT QuerySwapStatus(struct _D3DSWAP_STATUS * );
    unsigned long PixBeginNamedEvent(unsigned long ,char * ,<btNoType> );
    unsigned long PixEndNamedEvent();
    void PixSetMarker(unsigned long ,char * ,<btNoType> );
    HRESULT SetViewportF(struct _D3DVIEWPORTF9 * );
    HRESULT GetViewportF(struct _D3DVIEWPORTF9 * );
    void * BeginVisibilitySurvey(unsigned long );
    HRESULT EndVisibilitySurvey(void * );
    HRESULT SetSwapMode(int );
    unsigned long long InsertBlockOnAsyncResources(unsigned long ,struct D3DResource ** ,unsigned long ,struct D3DResource ** ,unsigned long );
    HRESULT SignalAsyncResources(unsigned long long );
    void GpuOwn(enum _D3DTAG );
    void GpuOwnSubset(enum _D3DTAG ,unsigned long ,unsigned long );
    void GpuOwnVertexShaderConstantF(unsigned long ,unsigned long );
    void GpuOwnPixelShaderConstantF(unsigned long ,unsigned long );
    void GpuOwnShaders();
    void GpuDisown(enum _D3DTAG );
    void GpuDisownSubset(enum _D3DTAG ,unsigned long ,unsigned long );
    void GpuDisownVertexShaderConstantF(unsigned long ,unsigned long );
    void GpuDisownPixelShaderConstantF(unsigned long ,unsigned long );
    void GpuDisownShaders();
    void GpuDisownAll();
    void GpuLoadPixelShaderConstantF4(unsigned int ,unsigned long ,struct D3DConstantBuffer * ,unsigned long );
    void GpuLoadVertexShaderConstantF4(unsigned int ,unsigned long ,struct D3DConstantBuffer * ,unsigned long );
    void GpuLoadPixelShaderConstantF4Pointer(unsigned int ,void * ,unsigned long );
    void GpuLoadVertexShaderConstantF4Pointer(unsigned int ,void * ,unsigned long );
    HRESULT GpuBeginVertexShaderConstantF4(unsigned int ,struct __vector4 ** ,unsigned long );
    void GpuEndVertexShaderConstantF4();
    HRESULT GpuBeginPixelShaderConstantF4(unsigned int ,struct __vector4 ** ,unsigned long );
    void GpuEndPixelShaderConstantF4();
    void GpuLoadShaders(struct D3DVertexShader * ,struct D3DPixelShader * ,struct GPUFLOW_CONSTANTS * );
    void GpuLoadShadersFast(struct D3DVertexShader * ,struct D3DPixelShader * ,struct GPUFLOW_CONSTANTS * ,unsigned long );
    void GpuSetVertexFetchConstant(unsigned long ,struct D3DVertexBuffer * ,unsigned long ,struct D3DVertexBuffer * ,unsigned long ,struct D3DVertexBuffer * ,unsigned long );
    void GpuSetTextureFetchConstant(unsigned long ,struct D3DBaseTexture * );
    void GpuSetColorMask(union GPU_COLORMASK * );
    void GpuSetBlendFactor(struct _D3DCOLORVALUE * );
    void GpuSetAlphaRef(float );
    void GpuSetBlendControl(unsigned long ,union GPU_BLENDCONTROL * );
    void GpuSetColorControl(union GPU_COLORCONTROL * );
    struct _D3DTAGCOLLECTION m_Pending;// Offset=0x0 Size=0x28
    unsigned long long m_Predicated_PendingMask2;// Offset=0x28 Size=0x8
    unsigned long * m_pRing;// Offset=0x30 Size=0x4
    unsigned long * m_pRingLimit;// Offset=0x34 Size=0x4
    unsigned long * m_pRingGuarantee;// Offset=0x38 Size=0x4
    unsigned long m_ReferenceCount;// Offset=0x3c Size=0x4
    void  ( * m_SetRenderStateCall)[101];// Offset=0x40 Size=0x194
    void  ( * m_SetSamplerStateCall)[20];// Offset=0x1d4 Size=0x50
    unsigned long  ( * m_GetRenderStateCall)[101];// Offset=0x224 Size=0x194
    unsigned long  ( * m_GetSamplerStateCall)[20];// Offset=0x3b8 Size=0x50
    unsigned char __align0[120];// Offset=0x408 Size=0x78
    struct _D3DConstants m_Constants;// Offset=0x480 Size=0x23a0
    float m_ClipPlanes[6][4];// Offset=0x2820 Size=0x60
    struct GPU_DESTINATIONPACKET m_DestinationPacket;// Offset=0x2880 Size=0x40
    struct GPU_WINDOWPACKET m_WindowPacket;// Offset=0x28c0 Size=0xc
    struct GPU_VALUESPACKET m_ValuesPacket;// Offset=0x28cc Size=0x54
    struct GPU_PROGRAMPACKET m_ProgramPacket;// Offset=0x2920 Size=0x14
    struct GPU_CONTROLPACKET m_ControlPacket;// Offset=0x2934 Size=0x30
    struct GPU_TESSELLATORPACKET m_TessellatorPacket;// Offset=0x2964 Size=0x54
    struct GPU_MISCPACKET m_MiscPacket;// Offset=0x29b8 Size=0x98
    struct GPU_POINTPACKET m_PointPacket;// Offset=0x2a50 Size=0x20
};

struct _D3DINDEXBUFFER_DESC// Size=0x14 (Id=4201)
{
    enum _D3DFORMAT Format;// Offset=0x0 Size=0x4
    enum _D3DRESOURCETYPE Type;// Offset=0x4 Size=0x4
    unsigned long Usage;// Offset=0x8 Size=0x4
    unsigned long Pool;// Offset=0xc Size=0x4
    unsigned int Size;// Offset=0x10 Size=0x4
};

struct trajectory_t// Size=0x24 (Id=4202)
{
    enum trType_t trType;// Offset=0x0 Size=0x4
    int trTime;// Offset=0x4 Size=0x4
    int trDuration;// Offset=0x8 Size=0x4
    float trBase[3];// Offset=0xc Size=0xc
    float trDelta[3];// Offset=0x18 Size=0xc
};

struct D3DQuery// Size=0x1 (Id=4203)
{
    unsigned long AddRef();
    unsigned long Release();
    HRESULT GetDevice(struct D3DDevice ** );
    enum _D3DQUERYTYPE GetType();
    unsigned long GetDataSize();
    HRESULT Issue(unsigned long );
    HRESULT GetData(void * ,unsigned long ,unsigned long );
};

struct Direct3D// Size=0x1 (Id=4204)
{
    unsigned long AddRef();
    unsigned long Release();
    unsigned int GetAdapterCount();
    HRESULT GetAdapterIdentifier(unsigned int ,unsigned long ,struct _D3DADAPTER_IDENTIFIER9 * );
    HRESULT CheckDeviceType(unsigned int ,enum _D3DDEVTYPE ,enum _D3DFORMAT ,enum _D3DFORMAT ,int );
    HRESULT CheckDeviceFormat(unsigned int ,enum _D3DDEVTYPE ,enum _D3DFORMAT ,unsigned long ,enum _D3DRESOURCETYPE ,enum _D3DFORMAT );
    HRESULT CheckDeviceMultiSampleType(unsigned int ,enum _D3DDEVTYPE ,enum _D3DFORMAT ,int ,enum _D3DMULTISAMPLE_TYPE ,unsigned long * );
    HRESULT CheckDepthStencilMatch(unsigned int ,enum _D3DDEVTYPE ,enum _D3DFORMAT ,enum _D3DFORMAT ,enum _D3DFORMAT );
    HRESULT CheckDeviceFormatConversion(unsigned int ,enum _D3DDEVTYPE ,enum _D3DFORMAT ,enum _D3DFORMAT );
    HRESULT GetDeviceCaps(unsigned int ,enum _D3DDEVTYPE ,struct _D3DCAPS9 * );
    HRESULT CreateDevice(unsigned int ,enum _D3DDEVTYPE ,void * ,unsigned long ,struct _D3DPRESENT_PARAMETERS_ * ,struct D3DDevice ** );
    void QueryGpuVersion(struct _D3DGPUVERSION * );
};

enum SND_CHANNELVOLPRIO
{
    SND_CHANNELVOLPRIO_NONE=0,
    SND_CHANNELVOLPRIO_HOLDBREATH=1,
    SND_CHANNELVOLPRIO_PAIN=2,
    SND_CHANNELVOLPRIO_SHELLSHOCK=3,
    SND_CHANNELVOLPRIO_COUNT=4
};

enum _unnamed_4206
{
    SND_TRACK_MUSIC=0,
    SND_TRACK_AMBIENT_PRIMARY_0=1,
    SND_TRACK_AMBIENT_SECONDARY_0=2,
    SND_TRACK_AMBIENT_PRIMARY_1=3,
    SND_TRACK_AMBIENT_SECONDARY_1=4,
    SND_TRACK_COUNT=5
};

enum _unnamed_4207
{
    XASOURCE_MONO=0,
    XASOURCE_STEREO=1,
    XASOURCE_COUNT=2
};

enum _unnamed_4208
{
    XAOUTPUT_STEREO=0,
    XAOUTPUT_51=1,
    XAOUTPUT_COUNT=2
};

enum XAssetType
{
    ASSET_TYPE_PHYSPRESET=0,
    ASSET_TYPE_PHYSCOLLMAP=1,
    ASSET_TYPE_XANIMPARTS=2,
    ASSET_TYPE_XMODEL_SURFS=3,
    ASSET_TYPE_XMODEL=4,
    ASSET_TYPE_MATERIAL=5,
    ASSET_TYPE_PIXELSHADER=6,
    ASSET_TYPE_TECHNIQUE_SET=7,
    ASSET_TYPE_IMAGE=8,
    ASSET_TYPE_SOUND=9,
    ASSET_TYPE_SOUND_CURVE=10,
    ASSET_TYPE_LOADED_SOUND=11,
    ASSET_TYPE_CLIPMAP_SP=12,
    ASSET_TYPE_CLIPMAP_MP=13,
    ASSET_TYPE_COMWORLD=14,
    ASSET_TYPE_GAMEWORLD_SP=15,
    ASSET_TYPE_GAMEWORLD_MP=16,
    ASSET_TYPE_MAP_ENTS=17,
    ASSET_TYPE_FXWORLD=18,
    ASSET_TYPE_GFXWORLD=19,
    ASSET_TYPE_LIGHT_DEF=20,
    ASSET_TYPE_UI_MAP=21,
    ASSET_TYPE_FONT=22,
    ASSET_TYPE_MENULIST=23,
    ASSET_TYPE_MENU=24,
    ASSET_TYPE_LOCALIZE_ENTRY=25,
    ASSET_TYPE_WEAPON=26,
    ASSET_TYPE_SNDDRIVER_GLOBALS=27,
    ASSET_TYPE_FX=28,
    ASSET_TYPE_IMPACT_FX=29,
    ASSET_TYPE_AITYPE=30,
    ASSET_TYPE_MPTYPE=31,
    ASSET_TYPE_CHARACTER=32,
    ASSET_TYPE_XMODELALIAS=33,
    ASSET_TYPE_RAWFILE=34,
    ASSET_TYPE_STRINGTABLE=35,
    ASSET_TYPE_LEADERBOARD=36,
    ASSET_TYPE_STRUCTURED_DATA_DEF=37,
    ASSET_TYPE_TRACER=38,
    ASSET_TYPE_VEHICLE=39,
    ASSET_TYPE_ADDON_MAP_ENTS=40,
    ASSET_TYPE_COUNT=41,
    ASSET_TYPE_STRING=41,
    ASSET_TYPE_ASSETLIST=42
};

struct XMA2WAVEFORMATEX// Size=0x34 (Id=4210)
{
    struct tWAVEFORMATEX wfx;// Offset=0x0 Size=0x12
    unsigned short NumStreams;// Offset=0x12 Size=0x2
    unsigned long ChannelMask;// Offset=0x14 Size=0x4
    unsigned long SamplesEncoded;// Offset=0x18 Size=0x4
    unsigned long BytesPerBlock;// Offset=0x1c Size=0x4
    unsigned long PlayBegin;// Offset=0x20 Size=0x4
    unsigned long PlayLength;// Offset=0x24 Size=0x4
    unsigned long LoopBegin;// Offset=0x28 Size=0x4
    unsigned long LoopLength;// Offset=0x2c Size=0x4
    unsigned char LoopCount;// Offset=0x30 Size=0x1
    unsigned char EncoderVersion;// Offset=0x31 Size=0x1
    unsigned short BlockCount;// Offset=0x32 Size=0x2
};

struct MemoryFile// Size=0x24 (Id=4211)
{
    unsigned char * buffer;// Offset=0x0 Size=0x4
    int bufferSize;// Offset=0x4 Size=0x4
    int bufferSizeOriginal;// Offset=0x8 Size=0x4
    int bytesUsed;// Offset=0xc Size=0x4
    int segmentIndex;// Offset=0x10 Size=0x4
    int segmentStart;// Offset=0x14 Size=0x4
    int segmentFullLen;// Offset=0x18 Size=0x4
    bool errorOnOverflow;// Offset=0x1c Size=0x1
    bool memoryOverflow;// Offset=0x1d Size=0x1
    bool compress;// Offset=0x1e Size=0x1
    unsigned char __align0[1];// Offset=0x1f Size=0x1
    void  ( * archiveProc)(struct MemoryFile * ,int ,void * );// Offset=0x20 Size=0x4
};

enum SND_ENVEFFECTPRIO
{
    SND_ENVEFFECTPRIO_NONE=0,
    SND_ENVEFFECTPRIO_LEVEL=1,
    SND_ENVEFFECTPRIO_SHELLSHOCK=2,
    SND_ENVEFFECTPRIO_REMOTECAMERA=3,
    SND_ENVEFFECTPRIO_PAINVISION=4,
    SND_ENVEFFECTPRIO_COUNT=5
};

enum SndLengthId
{
    SndLengthNotify_Subtitle=0,
    SndLengthNotify_EntityCustom=1,
    SndLengthNotifyCount=2
};

struct snd_alias_t// Size=0x64 (Id=4214)
{
    char * aliasName;// Offset=0x0 Size=0x4
    char * subtitle;// Offset=0x4 Size=0x4
    char * secondaryAliasName;// Offset=0x8 Size=0x4
    char * chainAliasName;// Offset=0xc Size=0x4
    char * mixerGroup;// Offset=0x10 Size=0x4
    struct SoundFile * soundFile;// Offset=0x14 Size=0x4
    int sequence;// Offset=0x18 Size=0x4
    float volMin;// Offset=0x1c Size=0x4
    float volMax;// Offset=0x20 Size=0x4
    float pitchMin;// Offset=0x24 Size=0x4
    float pitchMax;// Offset=0x28 Size=0x4
    float distMin;// Offset=0x2c Size=0x4
    float distMax;// Offset=0x30 Size=0x4
    float velocityMin;// Offset=0x34 Size=0x4
    int flags;// Offset=0x38 Size=0x4
    union // Size=0x4 (Id=0)
    {
        float slavePercentage;// Offset=0x3c Size=0x4
        float masterPercentage;// Offset=0x3c Size=0x4
    };
    float probability;// Offset=0x40 Size=0x4
    float lfePercentage;// Offset=0x44 Size=0x4
    float centerPercentage;// Offset=0x48 Size=0x4
    int startDelay;// Offset=0x4c Size=0x4
    struct SndCurve * volumeFalloffCurve;// Offset=0x50 Size=0x4
    float envelopMin;// Offset=0x54 Size=0x4
    float envelopMax;// Offset=0x58 Size=0x4
    float envelopPercentage;// Offset=0x5c Size=0x4
    struct SpeakerMap * speakerMap;// Offset=0x60 Size=0x4
};

struct snd_channel_info_t// Size=0x8c (Id=4215)
{
    struct SndFileSpecificChannelInfo soundFileInfo;// Offset=0x0 Size=0xc
    union SndEntHandle sndEnt;// Offset=0xc Size=0x4
    int entchannel;// Offset=0x10 Size=0x4
    int startDelay;// Offset=0x14 Size=0x4
    int startTime;// Offset=0x18 Size=0x4
    int looptime;// Offset=0x1c Size=0x4
    int totalMsec;// Offset=0x20 Size=0x4
    int playbackId;// Offset=0x24 Size=0x4
    struct sndLengthNotifyInfo lengthNotifyInfo;// Offset=0x28 Size=0x24
    float basevolume;// Offset=0x4c Size=0x4
    float pitch;// Offset=0x50 Size=0x4
    struct snd_alias_t * alias0;// Offset=0x54 Size=0x4
    struct snd_alias_t * alias1;// Offset=0x58 Size=0x4
    int saveIndex0;// Offset=0x5c Size=0x4
    int saveIndex1;// Offset=0x60 Size=0x4
    float lerp;// Offset=0x64 Size=0x4
    float org[3];// Offset=0x68 Size=0xc
    float offset[3];// Offset=0x74 Size=0xc
    bool paused;// Offset=0x80 Size=0x1
    bool master;// Offset=0x81 Size=0x1
    unsigned char __align0[2];// Offset=0x82 Size=0x2
    float timescaleLerp;// Offset=0x84 Size=0x4
    enum snd_alias_system_t system;// Offset=0x88 Size=0x4
};

union SndEntHandle// Size=0x4 (Id=4216)
{
    struct <unnamed-type-field>// Size=0x4 (Id=47562)
    {
        unsigned int entIndex:12;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0xc
        unsigned int localClientNum:2;// Offset=0x0 Size=0x4 BitOffset=0x12 BitSize=0x2
        unsigned int isInKillCam:1;// Offset=0x0 Size=0x4 BitOffset=0x11 BitSize=0x1
    };
    struct SndEntHandle::<unnamed-type-field> field;// Offset=0x0 Size=0x4
    int handle;// Offset=0x0 Size=0x4
};

enum SndFileLoadingState
{
    SFLS_UNLOADED=0,
    SFLS_LOADING=1,
    SFLS_LOADED=2
};

struct SoundFile// Size=0x10 (Id=4218)
{
    unsigned char type;// Offset=0x0 Size=0x1
    unsigned char exists;// Offset=0x1 Size=0x1
    unsigned char __align0[2];// Offset=0x2 Size=0x2
    union SoundFileRef u;// Offset=0x4 Size=0xc
};

enum snd_alias_system_t
{
    SASYS_UI=0,
    SASYS_CGAME=1,
    SASYS_GAME=2,
    SASYS_COUNT=3
};

struct SndStartAliasInfo// Size=0x3c (Id=4220)
{
    struct snd_alias_t * alias0;// Offset=0x0 Size=0x4
    struct snd_alias_t * alias1;// Offset=0x4 Size=0x4
    float lerp;// Offset=0x8 Size=0x4
    union SndEntHandle sndEnt;// Offset=0xc Size=0x4
    float org[3];// Offset=0x10 Size=0xc
    float volume;// Offset=0x1c Size=0x4
    float pitch;// Offset=0x20 Size=0x4
    int timeshift;// Offset=0x24 Size=0x4
    float fraction;// Offset=0x28 Size=0x4
    int startDelay;// Offset=0x2c Size=0x4
    bool master;// Offset=0x30 Size=0x1
    unsigned char __align0[3];// Offset=0x31 Size=0x3
    float timescaleLerp;// Offset=0x34 Size=0x4
    enum snd_alias_system_t system;// Offset=0x38 Size=0x4
};

struct snd_listener// Size=0x3c (Id=4221)
{
    struct orientation_t orient;// Offset=0x0 Size=0x30
    float velocity;// Offset=0x30 Size=0x4
    int clientNum;// Offset=0x34 Size=0x4
    bool active;// Offset=0x38 Size=0x1
};

class LargeLocal// Size=0x8 (Id=4222)
{
    union // Size=0x68 (Id=0)
    {
        void LargeLocal(int );// Offset=0x0 Size=0x64
        void ~LargeLocal();// Offset=0x0 Size=0x14
        void * GetBuf();// Offset=0x0 Size=0x54
        void PopBuf();// Offset=0x0 Size=0x68
        int startPos;// Offset=0x0 Size=0x4
        int size;// Offset=0x4 Size=0x4
        void * __vecDelDtor(unsigned int );
    };
};

struct sndLengthNotifyInfo// Size=0x24 (Id=4223)
{
    enum SndLengthId id[4];// Offset=0x0 Size=0x10
    void * data[4];// Offset=0x10 Size=0x10
    int count;// Offset=0x20 Size=0x4
};

struct snd_save_3D_sample_t// Size=0x18 (Id=4224)
{
    float fraction;// Offset=0x0 Size=0x4
    float pitch;// Offset=0x4 Size=0x4
    float volume;// Offset=0x8 Size=0x4
    float org[3];// Offset=0xc Size=0xc
};

struct snd_channel_info_t// Size=0x8c (Id=4225)
{
    struct SndFileSpecificChannelInfo soundFileInfo;// Offset=0x0 Size=0xc
    union SndEntHandle sndEnt;// Offset=0xc Size=0x4
    int entchannel;// Offset=0x10 Size=0x4
    int startDelay;// Offset=0x14 Size=0x4
    int startTime;// Offset=0x18 Size=0x4
    int looptime;// Offset=0x1c Size=0x4
    int totalMsec;// Offset=0x20 Size=0x4
    int playbackId;// Offset=0x24 Size=0x4
    struct sndLengthNotifyInfo lengthNotifyInfo;// Offset=0x28 Size=0x24
    float basevolume;// Offset=0x4c Size=0x4
    float pitch;// Offset=0x50 Size=0x4
    struct snd_alias_t * alias0;// Offset=0x54 Size=0x4
    struct snd_alias_t * alias1;// Offset=0x58 Size=0x4
    int saveIndex0;// Offset=0x5c Size=0x4
    int saveIndex1;// Offset=0x60 Size=0x4
    float lerp;// Offset=0x64 Size=0x4
    float org[3];// Offset=0x68 Size=0xc
    float offset[3];// Offset=0x74 Size=0xc
    bool paused;// Offset=0x80 Size=0x1
    bool master;// Offset=0x81 Size=0x1
    unsigned char __align0[2];// Offset=0x82 Size=0x2
    float timescaleLerp;// Offset=0x84 Size=0x4
    enum snd_alias_system_t system;// Offset=0x88 Size=0x4
};

struct snd_save_2D_sample_t// Size=0x10 (Id=4226)
{
    float fraction;// Offset=0x0 Size=0x4
    float pitch;// Offset=0x4 Size=0x4
    float volume;// Offset=0x8 Size=0x4
    float pan;// Offset=0xc Size=0x4
};

struct snd_save_stream_t// Size=0x20 (Id=4227)
{
    float fraction;// Offset=0x0 Size=0x4
    int rate;// Offset=0x4 Size=0x4
    float basevolume;// Offset=0x8 Size=0x4
    float volume;// Offset=0xc Size=0x4
    float pan;// Offset=0x10 Size=0x4
    float org[3];// Offset=0x14 Size=0xc
};

enum snd_overlay_type_t
{
    SND_OVERLAY_NONE=0,
    SND_OVERLAY_3D=1,
    SND_OVERLAY_STREAM=2,
    SND_OVERLAY_2D=3
};

struct cmd_function_s// Size=0x14 (Id=4229)
{
    struct cmd_function_s * next;// Offset=0x0 Size=0x4
    char * name;// Offset=0x4 Size=0x4
    char * autoCompleteDir;// Offset=0x8 Size=0x4
    char * autoCompleteExt;// Offset=0xc Size=0x4
    void  ( * function)();// Offset=0x10 Size=0x4
};

struct dvar_t// Size=0x48 (Id=4230)
{
    char * name;// Offset=0x0 Size=0x4
    char * description;// Offset=0x4 Size=0x4
    unsigned short flags;// Offset=0x8 Size=0x2
    unsigned char type;// Offset=0xa Size=0x1
    bool modified;// Offset=0xb Size=0x1
    union DvarValue current;// Offset=0xc Size=0x10
    union DvarValue latched;// Offset=0x1c Size=0x10
    union DvarValue reset;// Offset=0x2c Size=0x10
    union DvarLimits domain;// Offset=0x3c Size=0x8
    struct dvar_t * hashNext;// Offset=0x44 Size=0x4
};

enum entity_event_t
{
    EV_NONE=0,
    EV_FOLIAGE_SOUND=1,
    EV_STOP_WEAPON_SOUND=2,
    EV_SOUND_ALIAS=3,
    EV_SOUND_ALIAS_AS_MASTER=4,
    EV_STOPSOUNDS=5,
    EV_STANCE_FORCE_STAND=6,
    EV_STANCE_FORCE_CROUCH=7,
    EV_STANCE_FORCE_PRONE=8,
    EV_STANCE_INVALID=9,
    EV_ITEM_PICKUP=10,
    EV_AMMO_PICKUP=11,
    EV_NOAMMO=12,
    EV_EMPTYCLIP=13,
    EV_EMPTY_OFFHAND_PRIMARY=14,
    EV_EMPTY_OFFHAND_SECONDARY=15,
    EV_RESET_ADS=16,
    EV_RELOAD=17,
    EV_RELOAD_FROM_EMPTY=18,
    EV_RELOAD_START=19,
    EV_RELOAD_END=20,
    EV_RELOAD_START_NOTIFY=21,
    EV_RELOAD_ADDAMMO=22,
    EV_RAISE_WEAPON=23,
    EV_FIRST_RAISE_WEAPON=24,
    EV_PUTAWAY_WEAPON=25,
    EV_WEAPON_ALT=26,
    EV_WEAPON_SWITCH_STARTED=27,
    EV_PULLBACK_WEAPON=28,
    EV_FIRE_WEAPON=29,
    EV_FIRE_WEAPON_LASTSHOT=30,
    EV_FIRE_RICOCHET=31,
    EV_RECHAMBER_WEAPON=32,
    EV_EJECT_BRASS=33,
    EV_FIRE_WEAPON_LEFT=34,
    EV_FIRE_WEAPON_LASTSHOT_LEFT=35,
    EV_EJECT_BRASS_LEFT=36,
    EV_HITCLIENT_FIRE_WEAPON=37,
    EV_HITCLIENT_FIRE_WEAPON_LASTSHOT=38,
    EV_HITCLIENT_FIRE_WEAPON_LEFT=39,
    EV_HITCLIENT_FIRE_WEAPON_LASTSHOT_LEFT=40,
    EV_SV_FIRE_WEAPON=41,
    EV_SV_FIRE_WEAPON_LASTSHOT=42,
    EV_SV_FIRE_WEAPON_LEFT=43,
    EV_SV_FIRE_WEAPON_LASTSHOT_LEFT=44,
    EV_MELEE_SWIPE=45,
    EV_FIRE_MELEE=46,
    EV_PREP_OFFHAND=47,
    EV_USE_OFFHAND=48,
    EV_SWITCH_OFFHAND=49,
    EV_MELEE_HIT=50,
    EV_MELEE_MISS=51,
    EV_MELEE_BLOOD=52,
    EV_FIRE_TURRET=53,
    EV_FIRE_SENTRY=54,
    EV_FIRE_QUADBARREL_1=55,
    EV_FIRE_QUADBARREL_2=56,
    EV_BULLET_HIT=57,
    EV_BULLET_HIT_EXPLODE=58,
    EV_BULLET_HIT_SHIELD=59,
    EV_BULLET_HIT_CLIENT_SMALL=60,
    EV_BULLET_HIT_CLIENT_LARGE=61,
    EV_BULLET_HIT_CLIENT_EXPLODE=62,
    EV_BULLET_HIT_CLIENT_SHIELD=63,
    EV_EXPLOSIVE_IMPACT_ON_SHIELD=64,
    EV_EXPLOSIVE_SPLASH_ON_SHIELD=65,
    EV_GRENADE_BOUNCE=66,
    EV_GRENADE_STICK=67,
    EV_GRENADE_REST=68,
    EV_GRENADE_EXPLODE=69,
    EV_GRENADE_PICKUP=70,
    EV_GRENADE_LETGO=71,
    EV_ROCKET_EXPLODE=72,
    EV_ROCKET_EXPLODE_NOMARKS=73,
    EV_FLASHBANG_EXPLODE=74,
    EV_CUSTOM_EXPLODE=75,
    EV_CUSTOM_EXPLODE_NOMARKS=76,
    EV_CHANGE_TO_DUD=77,
    EV_DUD_EXPLODE=78,
    EV_DUD_IMPACT=79,
    EV_TROPHY_EXPLODE=80,
    EV_BULLET=81,
    EV_PLAY_FX=82,
    EV_PLAY_FX_ON_TAG=83,
    EV_STOP_FX_ON_TAG=84,
    EV_PLAY_FX_ON_TAG_FOR_CLIENTS=85,
    EV_PHYS_EXPLOSION_SPHERE=86,
    EV_PHYS_EXPLOSION_CYLINDER=87,
    EV_PHYS_EXPLOSION_JOLT=88,
    EV_RADIUSDAMAGE=89,
    EV_PHYS_JITTER=90,
    EV_EARTHQUAKE=91,
    EV_GRENADE_SUICIDE=92,
    EV_DETONATE=93,
    EV_NIGHTVISION_WEAR=94,
    EV_NIGHTVISION_REMOVE=95,
    EV_MISSILE_REMOTE_BOOST=96,
    EV_PLAY_RUMBLE_ON_ENT=97,
    EV_PLAY_RUMBLE_ON_POS=98,
    EV_PLAY_RUMBLELOOP_ON_ENT=99,
    EV_PLAY_RUMBLELOOP_ON_POS=100,
    EV_STOP_RUMBLE=101,
    EV_STOP_ALL_RUMBLES=102,
    EV_OBITUARY=103,
    EV_NO_PRIMARY_GRENADE_HINT=104,
    EV_NO_SECONDARY_GRENADE_HINT=105,
    EV_TARGET_TOO_CLOSE_HINT=106,
    EV_TARGET_NOT_ENOUGH_CLEARANCE_HINT=107,
    EV_LOCKON_REQUIRED_HINT=108,
    EV_VEHICLE_COLLISION=109,
    EV_VEHICLE_SUSPENSION_SOFT=110,
    EV_VEHICLE_SUSPENSION_HARD=111,
    EV_FOOTSTEP_SPRINT=112,
    EV_FOOTSTEP_RUN=113,
    EV_FOOTSTEP_WALK=114,
    EV_FOOTSTEP_PRONE=115,
    EV_JUMP=116,
    EV_LANDING_FIRST=117,
    EV_LANDING_LAST=147,
    EV_LANDING_PAIN_FIRST=148,
    EV_LANDING_PAIN_LAST=178,
    EV_MANTLE=179,
    EV_MAX_EVENTS=180
};

enum _unnamed_4232
{
    FS_LOOK_IN_MAIN=1,
    FS_LOOK_IN_DEV=2,
    FS_LOOK_IN_TEMP=4,
    FS_LOOK_IN_RAW=8,
    FS_LOOK_IN_RAWSHARED=16,
    FS_LOOK_IN_DEVRAW=32,
    FS_LOOK_IN_ALL=63
};

enum weapHudIcon_t
{
    WEAPHUDICON_PRIMARYOFFHAND=0,
    WEAPHUDICON_SECONDARYOFFHAND=1,
    WEAPHUDICON_ACTIONSLOT_FIRST=2,
    WEAPHUDICON_ACTIONSLOT_LAST=5,
    WEAPHUDICON_COUNT=6
};

enum GfxDrawSurfListType
{
    DSL_CAM_LIT_OPAQUE=0,
    DSL_CAM_LIT_TRANS=1,
    DSL_CAM_EMISSIVE=2,
    DSL_CAM_DEPTH_HACK=3,
    DSL_CAM_LIGHT_MAP_OPAQUE=4,
    DSL_SUNSHADOW_0=5,
    DSL_SUNSHADOW_1=6,
    DSL_SPOTSHADOW_0=7,
    DSL_SPOTSHADOW_1=8,
    DSL_SPOTSHADOW_2=9,
    DSL_SPOTSHADOW_3=10,
    DSL_TYPE_COUNT=11
};

enum errorParm_t
{
    ERR_FATAL=0,
    ERR_DROP=1,
    ERR_SERVERDISCONNECT=2,
    ERR_DISCONNECT=3,
    ERR_SCRIPT=4,
    ERR_SCRIPT_DROP=5,
    ERR_LOCALIZATION=6,
    ERR_MAPLOADERRORSUMMARY=7
};

enum GfxCameraRegionType
{
    CAMERA_REGION_LIT_OPAQUE=0,
    CAMERA_REGION_LIT_TRANS=1,
    CAMERA_REGION_EMISSIVE=2,
    CAMERA_REGION_DEPTH_HACK=3,
    CAMERA_REGION_LIGHT_MAP_OPAQUE=4,
    CAMERA_REGION_COUNT=5,
    CAMERA_REGION_NONE=5
};

enum GamePadStick
{
    GPAD_INVALID=0,
    GPAD_LX=1073741824,
    GPAD_LY=1073741825,
    GPAD_RX=1073741826,
    GPAD_RY=1073741827
};

enum _unnamed_4238
{
    FX_FLESHTYPE_BODY_NONFATAL=0,
    FX_FLESHTYPE_BODY_FATAL=1,
    FX_FLESHTYPE_HEAD_NONFATAL=2,
    FX_FLESHTYPE_HEAD_FATAL=3,
    FX_FLESHTYPE_COUNT=4
};

struct snd_local_t// Size=0x8080 (Id=4239)
{
    union // Size=0x1c (Id=0)
    {
        bool Initialized2d;// Offset=0x0 Size=0x1
        bool Initialized3d;// Offset=0x1 Size=0x1
        bool paused;// Offset=0x2 Size=0x1
        unsigned char __align0[1];// Offset=0x3 Size=0x1
        int playbackIdCounter;// Offset=0x4 Size=0x4
        unsigned int playback_rate;// Offset=0x8 Size=0x4
        int playback_channels;// Offset=0xc Size=0x4
        float timescale;// Offset=0x10 Size=0x4
        int pausetime;// Offset=0x14 Size=0x4
        int cpu;// Offset=0x18 Size=0x4
        struct <unnamed-type-restore>// Size=0x4008 (Id=47843)
        {
            unsigned char buffer[16384];// Offset=0x0 Size=0x4000
            int size;// Offset=0x4000 Size=0x4
            bool compress;// Offset=0x4004 Size=0x1
        };
    };
    struct snd_local_t::<unnamed-type-restore> restore;// Offset=0x1c Size=0x4008
    float volume;// Offset=0x4024 Size=0x4
    struct snd_volume_info_t mastervol;// Offset=0x4028 Size=0xc
    struct snd_channelvolgroup channelVolGroups[4];// Offset=0x4034 Size=0xc10
    struct snd_channelvolgroup * channelvol;// Offset=0x4c44 Size=0x4
    struct snd_background_info_t background[5];// Offset=0x4c48 Size=0x28
    int ambient_track;// Offset=0x4c70 Size=0x4
    float slaveLerp;// Offset=0x4c74 Size=0x4
    float masterPercentage;// Offset=0x4c78 Size=0x4
    struct snd_enveffect envEffects[5];// Offset=0x4c7c Size=0xa0
    struct snd_enveffect * effect;// Offset=0x4d1c Size=0x4
    struct snd_listener listeners[5];// Offset=0x4d20 Size=0x12c
    int time;// Offset=0x4e4c Size=0x4
    int looptime;// Offset=0x4e50 Size=0x4
    struct snd_amplifier amplifier;// Offset=0x4e54 Size=0x18
    struct snd_entchannel_info_t entchaninfo[64];// Offset=0x4e6c Size=0x1400
    struct snd_entchan_overrides_t entchanOverrides;// Offset=0x626c Size=0x108
    int entchannel_count;// Offset=0x6374 Size=0x4
    struct snd_channel_info_t chaninfo[53];// Offset=0x6378 Size=0x1cfc
    int max_2D_channels;// Offset=0x8074 Size=0x4
    int max_3D_channels;// Offset=0x8078 Size=0x4
    int max_stream_channels;// Offset=0x807c Size=0x4
};

enum _unnamed_4240
{
    DOBJ_MAX_PARTS=160,
    DOBJ_MAX_PART_BITS=5,
    MAX_LODS=4
};

enum PhysWorld
{
    PHYS_WORLD_FIRST_CLIENT_WORLD=0,
    PHYS_WORLD_DYNENT=0,
    PHYS_WORLD_FX=1,
    PHYS_WORLD_RAGDOLL=2,
    PHYS_WORLD_LAST_CLIENT_WORLD=2,
    PHYS_WORLD_FIRST_SERVER_WORLD=3,
    PHYS_WORLD_VEHICLE=3,
    PHYS_WORLD_WEAPON_AND_SCRIPT=4,
    PHYS_WORLD_LAST_SERVER_WORLD=4,
    PHYS_WORLD_COUNT=5
};

enum meansOfDeath_t
{
    MOD_UNKNOWN=0,
    MOD_PISTOL_BULLET=1,
    MOD_RIFLE_BULLET=2,
    MOD_EXPLOSIVE_BULLET=3,
    MOD_GRENADE=4,
    MOD_GRENADE_SPLASH=5,
    MOD_PROJECTILE=6,
    MOD_PROJECTILE_SPLASH=7,
    MOD_MELEE=8,
    MOD_HEAD_SHOT=9,
    MOD_CRUSH=10,
    MOD_FALLING=11,
    MOD_SUICIDE=12,
    MOD_TRIGGER_HURT=13,
    MOD_EXPLOSIVE=14,
    MOD_IMPACT=15,
    MOD_NUM=16
};

enum connstate_t
{
    CA_DISCONNECTED=0,
    CA_CINEMATIC=1,
    CA_LOGO=2,
    CA_CONNECTING=3,
    CA_CHALLENGING=4,
    CA_CONNECTED=5,
    CA_SENDINGSTATS=6,
    CA_LOADING=7,
    CA_PRIMED=8,
    CA_ACTIVE=9
};

enum _unnamed_4244
{
    PHYS_JOINT_ID_NULL=0
};

enum _unnamed_4245
{
    SAVE_SEGMENT_START=0,
    SAVE_SEGMENT_MAIN=1,
    SAVE_SEGMENT_NORMAL=2,
    SAVE_SEGMENT_SCRIPT=3,
    SAVE_SEGMENT_LEVEL=4,
    SAVE_SEGMENT_END=5,
    SAVE_SEGMENT_COUNT=6,
    SAVE_SEGMENT_NONE=-1
};

enum GfxLightType
{
    GFX_LIGHT_TYPE_NONE=0,
    GFX_LIGHT_TYPE_DIR=1,
    GFX_LIGHT_TYPE_SPOT=2,
    GFX_LIGHT_TYPE_OMNI=3,
    GFX_LIGHT_TYPE_COUNT=4,
    GFX_LIGHT_TYPE_DIR_SHADOWMAP=4,
    GFX_LIGHT_TYPE_SPOT_SHADOWMAP=5,
    GFX_LIGHT_TYPE_OMNI_SHADOWMAP=6,
    GFX_LIGHT_TYPE_COUNT_WITH_SHADOWMAP_VERSIONS=7
};

enum hintType_t
{
    HINT_NONE=0,
    HINT_NOICON=1,
    HINT_ACTIVATE=2,
    HINT_HEALTH=3,
    HINT_FRIENDLY=4,
    FIRST_WEAPON_HINT=5,
    LAST_WEAPON_HINT=1204,
    HINT_NUM_HINTS=1205
};

enum weapAnimFiles_t
{
    WEAP_ANIM_ROOT=0,
    WEAP_ANIM_IDLE=1,
    WEAP_ANIM_EMPTY_IDLE=2,
    WEAP_ANIM_FIRE=3,
    WEAP_ANIM_HOLD_FIRE=4,
    WEAP_ANIM_LASTSHOT=5,
    WEAP_ANIM_RECHAMBER=6,
    WEAP_ANIM_MELEE=7,
    WEAP_ANIM_MELEE_CHARGE=8,
    WEAP_ANIM_RELOAD=9,
    WEAP_ANIM_RELOAD_EMPTY=10,
    WEAP_ANIM_RELOAD_START=11,
    WEAP_ANIM_RELOAD_END=12,
    WEAP_ANIM_RAISE=13,
    WEAP_ANIM_FIRST_RAISE=14,
    WEAP_ANIM_BREACH_RAISE=15,
    WEAP_ANIM_DROP=16,
    WEAP_ANIM_ALT_RAISE=17,
    WEAP_ANIM_ALT_DROP=18,
    WEAP_ANIM_QUICK_RAISE=19,
    WEAP_ANIM_QUICK_DROP=20,
    WEAP_ANIM_EMPTY_RAISE=21,
    WEAP_ANIM_EMPTY_DROP=22,
    WEAP_ANIM_SPRINT_IN=23,
    WEAP_ANIM_SPRINT_LOOP=24,
    WEAP_ANIM_SPRINT_OUT=25,
    WEAP_ANIM_STUNNED_START=26,
    WEAP_ANIM_STUNNED_LOOP=27,
    WEAP_ANIM_STUNNED_END=28,
    WEAP_ANIM_DETONATE=29,
    WEAP_ANIM_NIGHTVISION_WEAR=30,
    WEAP_ANIM_NIGHTVISION_REMOVE=31,
    WEAP_ANIM_ADS_FIRE=32,
    WEAP_ANIM_ADS_LASTSHOT=33,
    WEAP_ANIM_ADS_RECHAMBER=34,
    WEAP_ANIM_ADS_UP=35,
    WEAP_ANIM_ADS_DOWN=36,
    NUM_WEAP_ANIMS=37,
    WEAP_ANIM_VIEWMODEL_START=1,
    WEAP_ANIM_VIEWMODEL_END=35
};

enum _unnamed_4249
{
    VAR_UNDEFINED=0,
    VAR_BEGIN_REF=1,
    VAR_POINTER=1,
    VAR_STRING=2,
    VAR_ISTRING=3,
    VAR_VECTOR=4,
    VAR_END_REF=5,
    VAR_FLOAT=5,
    VAR_INTEGER=6,
    VAR_CODEPOS=7,
    VAR_PRECODEPOS=8,
    VAR_FUNCTION=9,
    VAR_BUILTIN_FUNCTION=10,
    VAR_BUILTIN_METHOD=11,
    VAR_STACK=12,
    VAR_ANIMATION=13,
    VAR_DEVELOPER_CODEPOS=14,
    VAR_PRE_ANIMATION=15,
    VAR_THREAD=16,
    VAR_NOTIFY_THREAD=17,
    VAR_TIME_THREAD=18,
    VAR_CHILD_THREAD=19,
    VAR_OBJECT=20,
    VAR_DEAD_ENTITY=21,
    VAR_ENTITY=22,
    VAR_ARRAY=23,
    VAR_DEAD_THREAD=24,
    VAR_COUNT=25,
    VAR_THREAD_LIST=26,
    VAR_ENDON_LIST=27
};

enum _unnamed_4250
{
    FIRST_OBJECT=16,
    FIRST_CLEARABLE_OBJECT=20,
    LAST_NONENTITY_OBJECT=20,
    FIRST_ENTITY_OBJECT=22,
    FIRST_NONFIELD_OBJECT=23,
    FIRST_DEAD_OBJECT=24
};

enum weapFireType_t
{
    WEAPON_FIRETYPE_FULLAUTO=0,
    WEAPON_FIRETYPE_SINGLESHOT=1,
    WEAPON_FIRETYPE_BURSTFIRE2=2,
    WEAPON_FIRETYPE_BURSTFIRE3=3,
    WEAPON_FIRETYPE_BURSTFIRE4=4,
    WEAPON_FIRETYPE_DOUBLEBARREL=5,
    WEAPON_FIRETYPECOUNT=6,
    WEAPON_FIRETYPE_BURSTFIRE_FIRST=2,
    WEAPON_FIRETYPE_BURSTFIRE_LAST=4
};

enum keyNum_t
{
    K_NONE=0,
    K_FIRSTGAMEPADBUTTON_RANGE_1=1,
    K_BUTTON_A=1,
    K_BUTTON_B=2,
    K_BUTTON_X=3,
    K_BUTTON_Y=4,
    K_BUTTON_LSHLDR=5,
    K_BUTTON_RSHLDR=6,
    K_LASTGAMEPADBUTTON_RANGE_1=6,
    K_TAB=9,
    K_ENTER=13,
    K_FIRSTGAMEPADBUTTON_RANGE_2=14,
    K_BUTTON_START=14,
    K_BUTTON_BACK=15,
    K_BUTTON_LSTICK=16,
    K_BUTTON_RSTICK=17,
    K_BUTTON_LTRIG=18,
    K_BUTTON_RTRIG=19,
    K_DPAD_UP=20,
    K_FIRSTDPAD=20,
    K_DPAD_DOWN=21,
    K_DPAD_LEFT=22,
    K_DPAD_RIGHT=23,
    K_BUTTON_LSTICK_ALTIMAGE=188,
    K_BUTTON_RSTICK_ALTIMAGE=189,
    K_LASTDPAD=23,
    K_LASTGAMEPADBUTTON_RANGE_2=23,
    K_ESCAPE=27,
    K_FIRSTGAMEPADBUTTON_RANGE_3=28,
    K_APAD_UP=28,
    K_FIRSTAPAD=28,
    K_APAD_DOWN=29,
    K_APAD_LEFT=30,
    K_APAD_RIGHT=31,
    K_LASTAPAD=31,
    K_LASTGAMEPADBUTTON_RANGE_3=31,
    K_SPACE=32,
    K_BACKSPACE=127,
    K_ASCII_FIRST=128,
    K_ASCII_181=128,
    K_ASCII_191=129,
    K_ASCII_223=130,
    K_ASCII_224=131,
    K_ASCII_225=132,
    K_ASCII_228=133,
    K_ASCII_229=134,
    K_ASCII_230=135,
    K_ASCII_231=136,
    K_ASCII_232=137,
    K_ASCII_233=138,
    K_ASCII_236=139,
    K_ASCII_241=140,
    K_ASCII_242=141,
    K_ASCII_243=142,
    K_ASCII_246=143,
    K_ASCII_248=144,
    K_ASCII_249=145,
    K_ASCII_250=146,
    K_ASCII_252=147,
    K_END_ASCII_CHARS=148,
    K_COMMAND=150,
    K_CAPSLOCK=151,
    K_POWER=152,
    K_PAUSE=153,
    K_UPARROW=154,
    K_DOWNARROW=155,
    K_LEFTARROW=156,
    K_RIGHTARROW=157,
    K_ALT=158,
    K_CTRL=159,
    K_SHIFT=160,
    K_INS=161,
    K_DEL=162,
    K_PGDN=163,
    K_PGUP=164,
    K_HOME=165,
    K_END=166,
    K_F1=167,
    K_F2=168,
    K_F3=169,
    K_F4=170,
    K_F5=171,
    K_F6=172,
    K_F7=173,
    K_F8=174,
    K_F9=175,
    K_F10=176,
    K_F11=177,
    K_F12=178,
    K_F13=179,
    K_F14=180,
    K_F15=181,
    K_KP_HOME=182,
    K_KP_UPARROW=183,
    K_KP_PGUP=184,
    K_KP_LEFTARROW=185,
    K_KP_5=186,
    K_KP_RIGHTARROW=187,
    K_KP_END=188,
    K_KP_DOWNARROW=189,
    K_KP_PGDN=190,
    K_KP_ENTER=191,
    K_KP_INS=192,
    K_KP_DEL=193,
    K_KP_SLASH=194,
    K_KP_MINUS=195,
    K_KP_PLUS=196,
    K_KP_NUMLOCK=197,
    K_KP_STAR=198,
    K_KP_EQUALS=199,
    K_MOUSE1=200,
    K_MOUSE2=201,
    K_MOUSE3=202,
    K_MOUSE4=203,
    K_MOUSE5=204,
    K_MWHEELDOWN=205,
    K_MWHEELUP=206,
    K_AUX1=207,
    K_AUX2=208,
    K_AUX3=209,
    K_AUX4=210,
    K_AUX5=211,
    K_AUX6=212,
    K_AUX7=213,
    K_AUX8=214,
    K_AUX9=215,
    K_AUX10=216,
    K_AUX11=217,
    K_AUX12=218,
    K_AUX13=219,
    K_AUX14=220,
    K_AUX15=221,
    K_AUX16=222,
    K_LAST_KEY=223
};

enum snd_alias_type_t
{
    SAT_UNKNOWN=0,
    SAT_LOADED=1,
    SAT_STREAMED=2,
    SAT_VOICED=3,
    SAT_COUNT=4
};

enum OffhandClass
{
    OFFHAND_CLASS_NONE=0,
    OFFHAND_CLASS_FRAG_GRENADE=1,
    OFFHAND_CLASS_SMOKE_GRENADE=2,
    OFFHAND_CLASS_FLASH_GRENADE=3,
    OFFHAND_CLASS_THROWINGKNIFE=4,
    OFFHAND_CLASS_OTHER=5,
    OFFHAND_CLASS_COUNT=6
};

enum TrisType
{
    TRIS_TYPE_LAYERED=0,
    TRIS_TYPE_SIMPLE=1,
    TRIS_TYPE_COUNT=2
};

enum WeapStickinessType
{
    WEAPSTICKINESS_NONE=0,
    WEAPSTICKINESS_ALL=1,
    WEAPSTICKINESS_ALL_ORIENT=2,
    WEAPSTICKINESS_GROUND=3,
    WEAPSTICKINESS_GROUND_WITH_YAW=4,
    WEAPSTICKINESS_KNIFE=5,
    WEAPSTICKINESS_COUNT=6
};

enum weapPositionAnimNum_t
{
    WEAPPOS_HIP_TO_ADS=0,
    WEAPPOS_ADS_TO_HIP=1,
    NUM_WEAPPOS_ANIMS=2
};

enum WeapAccuracyType
{
    WEAP_ACCURACY_AI_VS_AI=0,
    WEAP_ACCURACY_AI_VS_PLAYER=1,
    WEAP_ACCURACY_COUNT=2
};

enum _unnamed_4259
{
    CONTROL_ANGLES_BACK_LOW=0,
    CONTROL_ANGLES_BACK_MID=1,
    CONTROL_ANGLES_BACK_UP=2,
    CONTROL_ANGLES_PELVIS=3,
    CONTROL_ANGLES_COUNT=4
};

enum perksEnum
{
    PERK_JAMRADAR=0,
    PERK_ACCURACY=1,
    PERK_FASTRELOAD=2,
    PERK_RATEOFFIRE=3,
    PERK_EXTRABREATH=4,
    PERK_EXTRABP=5,
    PERK_GRENADEDEATH=6,
    PERK_PISTOLDEATH=7,
    PERK_QUIETMOVE=8,
    PERK_PARABOLIC=9,
    PERK_LONGERSPRINT=10,
    PERK_DETECTEXPLOSIVE=11,
    PERK_EXPOSEENEMY=12,
    PERK_BULLETDMG=13,
    PERK_EXTRAAMMO=14,
    PERK_TWOPRIMARIES=15,
    PERK_ARMORVEST=16,
    PERK_FRAGGRENADE=17,
    PERK_SPECIALGRENADE=18,
    PERK_FASTMANTLE=19,
    PERK_JUMPDIVE=20,
    PERK_EXPLOSIVEBULLETS=21,
    PERK_SCAVENGER=22,
    PERK_EXTENDEDMAGS=23,
    PERK_LIGHTWEIGHT=24,
    PERK_MARATHON=25,
    PERK_QUICKDRAW=26,
    PERK_COLDBLOODED=27,
    PERK_HEARTBREAKER=28,
    PERK_SELECTIVEHEARING=29,
    PERK_FASTSNIPE=30,
    PERK_IMPROVEDEXTRABREATH=31,
    PERK_SPYGAME=32,
    PERK_AUTOMANTLE=33,
    PERK_FASTSPRINTRECOVERY=34,
    PERK_EXTENDEDMELEE=35,
    PERK_COUNT=36,
    PERK_UNKNOWN=36
};

enum scriptAnimMoveTypes_t
{
    ANIM_MT_UNUSED=0,
    ANIM_MT_IDLE=1,
    ANIM_MT_IDLECR=2,
    ANIM_MT_IDLEPRONE=3,
    ANIM_MT_WALK=4,
    ANIM_MT_WALKBK=5,
    ANIM_MT_WALKCR=6,
    ANIM_MT_WALKCRBK=7,
    ANIM_MT_WALKPRONE=8,
    ANIM_MT_WALKPRONEBK=9,
    ANIM_MT_RUN=10,
    ANIM_MT_RUNBK=11,
    ANIM_MT_RUNCR=12,
    ANIM_MT_RUNCRBK=13,
    ANIM_MT_TURNRIGHT=14,
    ANIM_MT_TURNLEFT=15,
    ANIM_MT_TURNRIGHTCR=16,
    ANIM_MT_TURNLEFTCR=17,
    ANIM_MT_CLIMBUP=18,
    ANIM_MT_CLIMBDOWN=19,
    ANIM_MT_SPRINT=20,
    ANIM_MT_MANTLE_ROOT=21,
    ANIM_MT_MANTLE_UP_57=22,
    ANIM_MT_MANTLE_UP_51=23,
    ANIM_MT_MANTLE_UP_45=24,
    ANIM_MT_MANTLE_UP_39=25,
    ANIM_MT_MANTLE_UP_33=26,
    ANIM_MT_MANTLE_UP_27=27,
    ANIM_MT_MANTLE_UP_21=28,
    ANIM_MT_MANTLE_OVER_HIGH=29,
    ANIM_MT_MANTLE_OVER_MID=30,
    ANIM_MT_MANTLE_OVER_LOW=31,
    ANIM_MT_FLINCH_FORWARD=32,
    ANIM_MT_FLINCH_BACKWARD=33,
    ANIM_MT_FLINCH_LEFT=34,
    ANIM_MT_FLINCH_RIGHT=35,
    ANIM_MT_STUMBLE_FORWARD=36,
    ANIM_MT_STUMBLE_BACKWARD=37,
    ANIM_MT_STUMBLE_WALK_FORWARD=38,
    ANIM_MT_STUMBLE_WALK_BACKWARD=39,
    ANIM_MT_STUMBLE_CROUCH_FORWARD=40,
    ANIM_MT_STUMBLE_CROUCH_BACKWARD=41,
    ANIM_MT_STUMBLE_SPRINT_FORWARD=42,
    ANIM_MT_JUMPDIVE_FORWARD=43,
    ANIM_MT_JUMPDIVE_FORWARDLEFT=44,
    ANIM_MT_JUMPDIVE_LEFT=45,
    ANIM_MT_JUMPDIVE_BACKLEFT=46,
    ANIM_MT_JUMPDIVE_BACK=47,
    ANIM_MT_JUMPDIVE_BACKRIGHT=48,
    ANIM_MT_JUMPDIVE_RIGHT=49,
    ANIM_MT_JUMPDIVE_FORWARDRIGHT=50,
    ANIM_MT_IDLELASTSTAND=51,
    ANIM_MT_CRAWLLASTSTAND=52,
    ANIM_MT_CRAWLLASTSTANDBK=53,
    NUM_ANIM_MOVETYPES=54
};

enum scriptAnimEventTypes_t
{
    ANIM_ET_PAIN=0,
    ANIM_ET_DEATH=1,
    ANIM_ET_FIREWEAPON=2,
    ANIM_ET_JUMP=3,
    ANIM_ET_JUMPBK=4,
    ANIM_ET_LAND=5,
    ANIM_ET_DROPWEAPON=6,
    ANIM_ET_RAISEWEAPON=7,
    ANIM_ET_CLIMB_MOUNT=8,
    ANIM_ET_CLIMB_DISMOUNT=9,
    ANIM_ET_RELOAD=10,
    ANIM_ET_CROUCH_TO_PRONE=11,
    ANIM_ET_PRONE_TO_CROUCH=12,
    ANIM_ET_STAND_TO_CROUCH=13,
    ANIM_ET_CROUCH_TO_STAND=14,
    ANIM_ET_STAND_TO_PRONE=15,
    ANIM_ET_PRONE_TO_STAND=16,
    ANIM_ET_MELEEATTACK=17,
    ANIM_ET_KNIFE_MELEE=18,
    ANIM_ET_KNIFE_MELEE_CHARGE=19,
    ANIM_ET_SHELLSHOCK=20,
    ANIM_ET_STUNNED=21,
    NUM_ANIM_EVENTTYPES=22
};

enum _unnamed_4263
{
    IMGF_MIPMAPS=1,
    IMGF_ALLOWPICMIP=2,
    IMGF_CHARACTERMIP=4,
    IMGF_LIGHTMAP=8,
    IMGF_CLAMP_S=16,
    IMGF_CLAMP_T=32,
    IMGF_HEIGHTMAP=64,
    IMGF_DELAYLOAD=128,
    IMGF_NOOPT=256,
    IMGF_SCREENDEPTH=512,
    IMGF_TEXTURENAME=1024,
    IMGF_SHEET_KEEP_FLAGS=1
};

struct SessionData// Size=0x6c8 (Id=4264)
{
    struct SessionStaticData staticData;// Offset=0x0 Size=0xc
    unsigned char __align0[4];// Offset=0xc Size=0x4
    struct SessionDynamicData dyn;// Offset=0x10 Size=0x6b8
};

enum scriptAnimScriptedStates_t
{
    ANIM_SCRIPTED_NONE=0,
    ANIM_SCRIPTED_SLOWMO_BREACH_ACTIVE=1,
    ANIM_SCRIPTED_SLOWMO_BREACH_PASSIVE=2,
    NUM_ANIM_SCRIPTEDTYPES=3
};

enum scriptAnimConditions_t
{
    ANIM_COND_PLAYERANIMTYPE=0,
    ANIM_COND_WEAPONCLASS=1,
    ANIM_COND_MOUNTED=2,
    ANIM_COND_MOVETYPE=3,
    ANIM_COND_CROUCHING=4,
    ANIM_COND_FIRING=5,
    ANIM_COND_WEAPON_POSITION=6,
    ANIM_COND_STRAFING=7,
    ANIM_COND_PERK=8,
    ANIM_COND_DAMAGETYPE=9,
    ANIM_COND_HITLOCATION=10,
    ANIM_COND_HITDIRECTION=11,
    ANIM_COND_AKIMBO=12,
    ANIM_COND_DIVEDIRECTION=13,
    ANIM_COND_RIOTSHIELDNEXT=14,
    ANIM_COND_PLAYERANIMTYPE_PRIMARY=15,
    ANIM_COND_FASTMANTLE=16,
    ANIM_COND_SCRIPTED=17,
    NUM_ANIM_CONDITIONS=18
};

enum CriticalSection
{
    CRITSECT_CONSOLE=0,
    CRITSECT_DEBUG_SOCKET=1,
    CRITSECT_COM_ERROR=2,
    CRITSECT_STATMON=3,
    CRITSECT_SOUND_ALLOC=4,
    CRITSECT_ALLOC_MARK=5,
    CRITSECT_STREAMED_SOUND=6,
    CRITSECT_FAKELAG=7,
    CRITSECT_CLIENT_MESSAGE=8,
    CRITSECT_CLIENT_CMD=9,
    CRITSECT_DOBJ_ALLOC=10,
    CRITSECT_START_SERVER=11,
    CRITSECT_XANIM_ALLOC=12,
    CRITSECT_KEY_BINDINGS=13,
    CRITSECT_FX_VIS=14,
    CRITSECT_SERVER_MESSAGE=15,
    CRITSECT_SCRIPT_STRING=16,
    CRITSECT_PHYSICS=17,
    CRITSECT_LIVE=18,
    CRITSECT_AUDIO_PHYSICS=19,
    CRITSECT_LSP=20,
    CRITSECT_CINEMATIC_UPDATE=21,
    CRITSECT_CINEMATIC_TARGET_CHANGE_COMMAND=22,
    CRITSECT_CINEMATIC_TARGET_CHANGE_BACKEND=23,
    CRITSECT_CINEMATIC_STATUS=24,
    CRITSECT_CINEMATIC_SERVER=25,
    CRITSECT_FX_ALLOC=26,
    CRITSECT_CBUF=27,
    CRITSECT_STREAMING=28,
    CRITSECT_STATS_WRITE=29,
    CRITSECT_CG_GLASS=30,
    CRITSECT_COMBOFILE=31,
    CRITSECT_CONTENT_FILE=32,
    CRITSECT_COM_SET_ERROR_MSG=33,
    CRITSECT_PHYSICS_ALLOC=34,
    CRITSECT_COUNT=35
};

enum MaterialTechniqueType
{
    TECHNIQUE_DEPTH_PREPASS=0,
    TECHNIQUE_BUILD_FLOAT_Z=1,
    TECHNIQUE_BUILD_SHADOWMAP_DEPTH=2,
    TECHNIQUE_BUILD_SHADOWMAP_COLOR=3,
    TECHNIQUE_UNLIT=4,
    TECHNIQUE_EMISSIVE=5,
    TECHNIQUE_EMISSIVE_DFOG=6,
    TECHNIQUE_EMISSIVE_SHADOW=7,
    TECHNIQUE_EMISSIVE_SHADOW_DFOG=8,
    TECHNIQUE_LIT_BEGIN=9,
    TECHNIQUE_LIT=9,
    TECHNIQUE_LIT_DFOG=10,
    TECHNIQUE_LIT_SUN=11,
    TECHNIQUE_LIT_SUN_DFOG=12,
    TECHNIQUE_LIT_SUN_SHADOW=13,
    TECHNIQUE_LIT_SUN_SHADOW_DFOG=14,
    TECHNIQUE_LIT_SPOT=15,
    TECHNIQUE_LIT_SPOT_DFOG=16,
    TECHNIQUE_LIT_SPOT_SHADOW=17,
    TECHNIQUE_LIT_SPOT_SHADOW_DFOG=18,
    TECHNIQUE_LIT_OMNI=19,
    TECHNIQUE_LIT_OMNI_DFOG=20,
    TECHNIQUE_LIT_OMNI_SHADOW=21,
    TECHNIQUE_LIT_OMNI_SHADOW_DFOG=22,
    TECHNIQUE_LIT_END=23,
    TECHNIQUE_LIGHT_SPOT=23,
    TECHNIQUE_LIGHT_OMNI=24,
    TECHNIQUE_LIGHT_SPOT_SHADOW=25,
    TECHNIQUE_FAKELIGHT_NORMAL=26,
    TECHNIQUE_FAKELIGHT_VIEW=27,
    TECHNIQUE_SUNLIGHT_PREVIEW=28,
    TECHNIQUE_CASE_TEXTURE=29,
    TECHNIQUE_WIREFRAME_SOLID=30,
    TECHNIQUE_WIREFRAME_SHADED=31,
    TECHNIQUE_DEBUG_BUMPMAP=32,
    TECHNIQUE_COUNT=33,
    TECHNIQUE_TOTAL_COUNT=34,
    TECHNIQUE_NONE=35
};

enum _unnamed_4269
{
    THREAD_CONTEXT_MAIN=0,
    THREAD_CONTEXT_BACKEND=1,
    THREAD_CONTEXT_WORKER0=2,
    THREAD_CONTEXT_WORKER1=3,
    THREAD_CONTEXT_WORKER2=4,
    THREAD_CONTEXT_SERVER=5,
    THREAD_CONTEXT_TRACE_COUNT=6,
    THREAD_CONTEXT_TRACE_LAST=5,
    THREAD_CONTEXT_CINEMATIC=6,
    THREAD_CONTEXT_DATABASE=7,
    THREAD_CONTEXT_STREAM=8,
    THREAD_CONTEXT_SNDSTREAMPACKETCALLBACK=9,
    THREAD_CONTEXT_STATS_WRITE=10,
    THREAD_CONTEXT_COUNT=11
};

enum _unnamed_4270
{
    MTL_SHADOW_TYPE_NONE=0,
    MTL_SHADOW_TYPE_STANDARD=1,
    MTL_SHADOW_TYPE_CUSTOM=2,
    MTL_SHADOW_TYPE_COUNT=3
};

enum aistateEnum_t
{
    AISTATE_COMBAT=0,
    MAX_AISTATES=1
};

enum statIndex_t
{
    STAT_HEALTH=0,
    STAT_DEAD_YAW=1,
    STAT_MAX_HEALTH=2,
    STAT_SPAWN_COUNT=3,
    MAX_STATS=4
};

enum _unnamed_4273
{
    MARK_MODEL_TYPE_WORLD_BRUSH=0,
    MARK_MODEL_TYPE_WORLD_MODEL=1,
    MARK_MODEL_TYPE_ENT_BRUSH=2,
    MARK_MODEL_TYPE_ENT_MODEL=3,
    MARK_MODEL_TYPE_GLASS=4
};

enum _unnamed_4274
{
    MARK_ENTMODEL_MASK_DOBJMODELINDEX=31,
    MARK_ENTMODEL_MASK_VIEWMODELCLIENT_OFFSET=5,
    MARK_ENTMODEL_MASK_VIEWMODELCLIENT=96,
    MARK_ENTMODEL_MASK_ISVIEWMDL=128
};

enum _unnamed_4275
{
    CS_GAME_VERSION=2,
    CS_SERVERID=3,
    CS_MESSAGE=4,
    CS_SCORES1=5,
    CS_SCORES2=6,
    CS_CULLDIST=7,
    CS_SUNLIGHT=8,
    CS_SUNDIR=9,
    CS_FORCE_SUN_SHADOWS=10,
    CS_HALF_RES_PARTICLES=11,
    CS_FOGVARS=12,
    CS_MOTD=13,
    CS_GAMEENDTIME=14,
    CS_MAPCENTER=15,
    CS_VOTE_TIME=16,
    CS_VOTE_STRING=17,
    CS_VOTE_YES=18,
    CS_VOTE_NO=19,
    CS_VOTE_MAPNAME=20,
    CS_VOTE_GAMETYPE=21,
    CS_MULTI_MAPWINNER=22,
    CS_CODINFO=23,
    CS_CODINFO_LAST=222,
    CS_CODINFO_VALUE=223,
    CS_CODINFO_VALUE_LAST=422,
    CS_ENEMY_CROSSHAIR=423,
    CS_XNADDRS=424,
    CS_XNADDRS_LAST=441,
    CS_NATTYPES=442,
    CS_NATTYPES_LAST=459,
    CS_XUIDS=460,
    CS_XUIDS_LAST=477,
    CS_SESSIONNONCE=478,
    CS_USE_TRIG_STRINGS=479,
    CS_USE_TRIG_STRINGS_LAST=510,
    CS_LOCALIZED_STRINGS=511,
    CS_LOCALIZED_STRINGS_LAST=1021,
    CS_CASE_INSENSITIVE_BEGIN=1022,
    CS_AMBIENT=1022,
    CS_AMBIENT_AC130=1023,
    CS_RUMBLES=1024,
    CS_RUMBLE_LAST=1055,
    CS_NORTHYAW=1056,
    CS_MINIMAP=1057,
    CS_MATERIAL_THERMALBODY=1058,
    CS_VISIONSET_NORMAL=1059,
    CS_VISIONSET_NIGHT=1060,
    CS_VISIONSET_MISSILECAM=1061,
    CS_VISIONSET_THERMAL=1062,
    CS_VISIONSET_PAIN=1063,
    CS_NIGHTVISION=1064,
    CS_LOC_SEL_MTLS=1065,
    CS_LOC_SEL_MTLS_LAST=1067,
    CS_MODELS=1068,
    CS_MODELS_LAST=1579,
    CS_VEHICLE_DEFS=1580,
    CS_VEHICLE_DEFS_LAST=1611,
    CS_SOUNDALIASES=1612,
    CS_SOUNDALIASES_LAST=1867,
    CS_EFFECT_NAMES=1868,
    CS_EFFECT_NAMES_LAST=2123,
    CS_EFFECT_TAGS=2124,
    CS_EFFECT_TAGS_LAST=2379,
    CS_SHELLSHOCKS=2380,
    CS_SHELLSHOCKS_LAST=2395,
    CS_SCRIPT_MENUS=2396,
    CS_SCRIPT_MENUS_LAST=2427,
    CS_SERVER_MATERIALS=2428,
    CS_SERVER_MATERIALS_LAST=2683,
    CS_TAGS=2684,
    CS_TAGS_LAST=2747,
    CS_WEAPONFILES=2748,
    CS_WEAPONFILES_LAST=3946,
    CS_STATUS_ICONS=3947,
    CS_STATUS_ICONS_LAST=3954,
    CS_HEAD_ICONS=3955,
    CS_HEAD_ICONS_LAST=3969,
    CS_MINIMAP_ICONS=3970,
    CS_MINIMAP_ICONS_LAST=3984,
    CS_MP_ANIMS=3985,
    CS_MP_ANIMS_LAST=4047,
    CS_TEAMFX=4048,
    CS_TEAMFX_LAST=4079,
    CS_TIMESCALE=4080,
    CS_ITEMS=4081,
    CS_LEADERBOARDS=4082,
    MAX_CONFIGSTRINGS=4083
};

enum netsrc_t
{
    NS_CLIENT1=0,
    NS_CLIENT2=1,
    NS_CLIENT3=2,
    NS_CLIENT4=3,
    NS_SERVER=4,
    NS_MAXCLIENTS=4,
    NS_PACKET=5
};

struct CmdArgs// Size=0x84 (Id=4277)
{
    int nesting;// Offset=0x0 Size=0x4
    int localClientNum[8];// Offset=0x4 Size=0x20
    int controllerIndex[8];// Offset=0x24 Size=0x20
    int argc[8];// Offset=0x44 Size=0x20
    char ** argv[8];// Offset=0x64 Size=0x20
};

enum PlayerHandIndex
{
    WEAPON_HAND_RIGHT=0,
    WEAPON_HAND_LEFT=1,
    NUM_WEAPON_HANDS=2,
    WEAPON_HAND_DEFAULT=0
};

enum _unnamed_4279
{
    qfalse=0,
    qtrue=1
};

enum _unnamed_4280
{
    STATMON_FPS=0,
    STATMON_FILEACCESS=1,
    STATMON_SOUNDCPU=2,
    STATMON_MAXEFFECTS=3,
    STATMON_SNAPSHOTENTS=4,
    STATMON_TRIS=5,
    STATMON_SERVERFPS=6,
    STATMON_SCRIPTERROR=7,
    STATMON_BANDWIDTHEXCEEDED=8,
    STATMON_GAMESTATEEXCEEDED=9,
    STATMON_COUNT=10
};

enum ActionSlotType
{
    ACTIONSLOTTYPE_DONOTHING=0,
    ACTIONSLOTTYPE_SPECIFYWEAPON=1,
    ACTIONSLOTTYPE_ALTWEAPONTOGGLE=2,
    ACTIONSLOTTYPE_NIGHTVISION=3,
    ACTIONSLOTTYPECOUNT=4
};

struct snd_physics// Size=0x204 (Id=4282)
{
    struct snd_physics_info info[32];// Offset=0x0 Size=0x200
    int count;// Offset=0x200 Size=0x4
};

struct cbrushside_t// Size=0x8 (Id=4283)
{
    struct cplane_s * plane;// Offset=0x0 Size=0x4
    unsigned short materialNum;// Offset=0x4 Size=0x2
    unsigned char firstAdjacentSideOffset;// Offset=0x6 Size=0x1
    unsigned char edgeCount;// Offset=0x7 Size=0x1
};

struct cbrush_t// Size=0x24 (Id=4284)
{
    unsigned short numsides;// Offset=0x0 Size=0x2
    unsigned short glassPieceIndex;// Offset=0x2 Size=0x2
    struct cbrushside_t * sides;// Offset=0x4 Size=0x4
    unsigned char * baseAdjacentSide;// Offset=0x8 Size=0x4
    short axialMaterialNum[2][3];// Offset=0xc Size=0xc
    unsigned char firstAdjacentSideOffsets[2][3];// Offset=0x18 Size=0x6
    unsigned char edgeCount[2][3];// Offset=0x1e Size=0x6
};

union hudelem_color_t// Size=0x4 (Id=4285)
{
    unsigned char r;// Offset=0x0 Size=0x1
    unsigned char g;// Offset=0x1 Size=0x1
    unsigned char b;// Offset=0x2 Size=0x1
    unsigned char a;// Offset=0x3 Size=0x1
    int rgba;// Offset=0x0 Size=0x4
};

struct XaSeekTable// Size=0x8 (Id=4286)
{
    int size;// Offset=0x0 Size=0x4
    unsigned long * data;// Offset=0x4 Size=0x4
};

struct IWNetServerInfoAboutPlayer// Size=0x18 (Id=4287)
{
    bool active;// Offset=0x0 Size=0x1
    unsigned char __align0[7];// Offset=0x1 Size=0x7
    long long uid;// Offset=0x8 Size=0x8
    unsigned char skill;// Offset=0x10 Size=0x1
    unsigned char teamIndex;// Offset=0x11 Size=0x1
};

struct cplane_s// Size=0x14 (Id=4288)
{
    float normal[3];// Offset=0x0 Size=0xc
    float dist;// Offset=0xc Size=0x4
    unsigned char type;// Offset=0x10 Size=0x1
    unsigned char pad[3];// Offset=0x11 Size=0x3
};

enum IWNetServerSessionStatus
{
    SESSION_ONCLIENTONLY=0,
    SESSION_BEINGCREATED=1,
    SESSION_CREATED=2,
    SESSION_BEINGDELETED=3
};

struct IWNetSessionStatus// Size=0x1c8 (Id=4290)
{
    enum IWNetServerSessionStatus status;// Offset=0x0 Size=0x4
    int sessionId;// Offset=0x4 Size=0x4
    int lastHeartbeatSent;// Offset=0x8 Size=0x4
    bool needsUpdate;// Offset=0xc Size=0x1
    bool updatingPlayers;// Offset=0xd Size=0x1
    unsigned char __align0[2];// Offset=0xe Size=0x2
    int newPlayerCount;// Offset=0x10 Size=0x4
    unsigned char __align1[4];// Offset=0x14 Size=0x4
    struct IWNetServerInfoAboutPlayer pendingServerInfoForPlayers[18];// Offset=0x18 Size=0x1b0
};

struct BrushWrapper// Size=0x44 (Id=4291)
{
    struct Bounds bounds;// Offset=0x0 Size=0x18
    struct cbrush_t brush;// Offset=0x18 Size=0x24
    int totalEdgeCount;// Offset=0x3c Size=0x4
    struct cplane_s * planes;// Offset=0x40 Size=0x4
};

enum he_type_t
{
    HE_TYPE_FREE=0,
    HE_TYPE_TEXT=1,
    HE_TYPE_VALUE=2,
    HE_TYPE_PLAYERNAME=3,
    HE_TYPE_MAPNAME=4,
    HE_TYPE_GAMETYPE=5,
    HE_TYPE_MATERIAL=6,
    HE_TYPE_TIMER_DOWN=7,
    HE_TYPE_TIMER_UP=8,
    HE_TYPE_TENTHS_TIMER_DOWN=9,
    HE_TYPE_TENTHS_TIMER_UP=10,
    HE_TYPE_CLOCK_DOWN=11,
    HE_TYPE_CLOCK_UP=12,
    HE_TYPE_WAYPOINT=13,
    HE_TYPE_COUNT=14
};

struct ClientInfo// Size=0x30 (Id=4293)
{
    bool registered;// Offset=0x0 Size=0x1
    bool voiceRegistered;// Offset=0x1 Size=0x1
    unsigned char __align0[6];// Offset=0x2 Size=0x6
    unsigned long long xuid;// Offset=0x8 Size=0x8
    int natType;// Offset=0x10 Size=0x4
    struct netadr_t addr;// Offset=0x14 Size=0xc
    int voiceConnectivityBits;// Offset=0x20 Size=0x4
    int lastConnectivityTestTime;// Offset=0x24 Size=0x4
    bool friends;// Offset=0x28 Size=0x1
    bool muted;// Offset=0x29 Size=0x1
    bool privateSlot;// Offset=0x2a Size=0x1
};

struct LocalTalkerInfo// Size=0x1 (Id=4294)
{
    bool enabled;// Offset=0x0 Size=0x1
};

struct LerpEntityStateEarthquake// Size=0xc (Id=4295)
{
    float scale;// Offset=0x0 Size=0x4
    float radius;// Offset=0x4 Size=0x4
    int duration;// Offset=0x8 Size=0x4
};

struct XAUDIOPACKET_ALIGNED// Size=0x58 (Id=4296)
{
    char * pBuffer;// Offset=0x0 Size=0x4
    unsigned long BufferSize;// Offset=0x4 Size=0x4
    unsigned long LoopCount;// Offset=0x8 Size=0x4
    struct XMALOOPREGION XMALoop[6];// Offset=0xc Size=0x48
    char * pContext;// Offset=0x54 Size=0x4
};

struct hudelem_s// Size=0xa8 (Id=4297)
{
    enum he_type_t type;// Offset=0x0 Size=0x4
    float x;// Offset=0x4 Size=0x4
    float y;// Offset=0x8 Size=0x4
    float z;// Offset=0xc Size=0x4
    int targetEntNum;// Offset=0x10 Size=0x4
    float fontScale;// Offset=0x14 Size=0x4
    float fromFontScale;// Offset=0x18 Size=0x4
    int fontScaleStartTime;// Offset=0x1c Size=0x4
    int fontScaleTime;// Offset=0x20 Size=0x4
    int font;// Offset=0x24 Size=0x4
    int alignOrg;// Offset=0x28 Size=0x4
    int alignScreen;// Offset=0x2c Size=0x4
    union hudelem_color_t color;// Offset=0x30 Size=0x4
    union hudelem_color_t fromColor;// Offset=0x34 Size=0x4
    int fadeStartTime;// Offset=0x38 Size=0x4
    int fadeTime;// Offset=0x3c Size=0x4
    int label;// Offset=0x40 Size=0x4
    int width;// Offset=0x44 Size=0x4
    int height;// Offset=0x48 Size=0x4
    int materialIndex;// Offset=0x4c Size=0x4
    int fromWidth;// Offset=0x50 Size=0x4
    int fromHeight;// Offset=0x54 Size=0x4
    int scaleStartTime;// Offset=0x58 Size=0x4
    int scaleTime;// Offset=0x5c Size=0x4
    float fromX;// Offset=0x60 Size=0x4
    float fromY;// Offset=0x64 Size=0x4
    int fromAlignOrg;// Offset=0x68 Size=0x4
    int fromAlignScreen;// Offset=0x6c Size=0x4
    int moveStartTime;// Offset=0x70 Size=0x4
    int moveTime;// Offset=0x74 Size=0x4
    int time;// Offset=0x78 Size=0x4
    int duration;// Offset=0x7c Size=0x4
    float value;// Offset=0x80 Size=0x4
    int text;// Offset=0x84 Size=0x4
    float sort;// Offset=0x88 Size=0x4
    union hudelem_color_t glowColor;// Offset=0x8c Size=0x4
    int fxBirthTime;// Offset=0x90 Size=0x4
    int fxLetterTime;// Offset=0x94 Size=0x4
    int fxDecayStartTime;// Offset=0x98 Size=0x4
    int fxDecayDuration;// Offset=0x9c Size=0x4
    int soundID;// Offset=0xa0 Size=0x4
    int flags;// Offset=0xa4 Size=0x4
};

struct Bounds// Size=0x18 (Id=4298)
{
    float midPoint[3];// Offset=0x0 Size=0xc
    float halfSize[3];// Offset=0xc Size=0xc
};

struct LerpEntityStateVehicle// Size=0x24 (Id=4299)
{
    unsigned int indices;// Offset=0x0 Size=0x4
    unsigned int flags;// Offset=0x4 Size=0x4
    float bodyPitch;// Offset=0x8 Size=0x4
    float bodyRoll;// Offset=0xc Size=0x4
    float steerYaw;// Offset=0x10 Size=0x4
    float gunPitch;// Offset=0x14 Size=0x4
    float gunYaw;// Offset=0x18 Size=0x4
    int playerIndex;// Offset=0x1c Size=0x4
    int pad;// Offset=0x20 Size=0x4
};

struct trDebugLine_t// Size=0x2c (Id=4300)
{
    float start[3];// Offset=0x0 Size=0xc
    float end[3];// Offset=0xc Size=0xc
    float color[4];// Offset=0x18 Size=0x10
    int depthTest;// Offset=0x28 Size=0x4
};

struct trDebugString_t// Size=0x80 (Id=4301)
{
    float xyz[3];// Offset=0x0 Size=0xc
    float color[4];// Offset=0xc Size=0x10
    float scale;// Offset=0x1c Size=0x4
    char text[96];// Offset=0x20 Size=0x60
};

struct clientDebugLineInfo_t// Size=0x10 (Id=4302)
{
    int max;// Offset=0x0 Size=0x4
    int num;// Offset=0x4 Size=0x4
    struct trDebugLine_t * lines;// Offset=0x8 Size=0x4
    int * durations;// Offset=0xc Size=0x4
};

struct LerpEntityStatePhysicsJitter// Size=0x10 (Id=4303)
{
    float innerRadius;// Offset=0x0 Size=0x4
    float outerRadius;// Offset=0x4 Size=0x4
    float minDisplacement;// Offset=0x8 Size=0x4
    float maxDisplacement;// Offset=0xc Size=0x4
};

struct TriggerSlab// Size=0x14 (Id=4304)
{
    float dir[3];// Offset=0x0 Size=0xc
    float midPoint;// Offset=0xc Size=0x4
    float halfSize;// Offset=0x10 Size=0x4
};

struct XaReverbSettings// Size=0x34 (Id=4305)
{
    int presetOverridden;// Offset=0x0 Size=0x4
    struct XAUDIOREVERBSETTINGS reverbSettings;// Offset=0x4 Size=0x30
};

struct PhysMass// Size=0x24 (Id=4306)
{
    float centerOfMass[3];// Offset=0x0 Size=0xc
    float momentsOfInertia[3];// Offset=0xc Size=0xc
    float productsOfInertia[3];// Offset=0x18 Size=0xc
};

struct snd_entchannel_info_t// Size=0x50 (Id=4307)
{
    char name[64];// Offset=0x0 Size=0x40
    int priority;// Offset=0x40 Size=0x4
    bool is3d;// Offset=0x44 Size=0x1
    bool isRestricted;// Offset=0x45 Size=0x1
    bool isPausable;// Offset=0x46 Size=0x1
    unsigned char __align0[1];// Offset=0x47 Size=0x1
    int maxVoices;// Offset=0x48 Size=0x4
    int voiceCount;// Offset=0x4c Size=0x4
};

struct XaIwXmaDataInfo// Size=0x4 (Id=4308)
{
    int totalMsec;// Offset=0x0 Size=0x4
};

struct TriggerHull// Size=0x20 (Id=4309)
{
    struct Bounds bounds;// Offset=0x0 Size=0x18
    int contents;// Offset=0x18 Size=0x4
    unsigned short slabCount;// Offset=0x1c Size=0x2
    unsigned short firstSlab;// Offset=0x1e Size=0x2
};

struct XaSound// Size=0x9c (Id=4310)
{
    struct XAUDIOPACKET_ALIGNED packet;// Offset=0x0 Size=0x58
    struct XAUDIOSOURCEFORMAT format;// Offset=0x58 Size=0x38
    struct XaIwXmaDataInfo xaIwXmaDataInfo;// Offset=0x90 Size=0x4
    struct XaSeekTable seekTable;// Offset=0x94 Size=0x8
};

struct LerpEntityStatePlayer// Size=0x18 (Id=4311)
{
    float leanf;// Offset=0x0 Size=0x4
    int movementDir;// Offset=0x4 Size=0x4
    float torsoPitch;// Offset=0x8 Size=0x4
    float waistPitch;// Offset=0xc Size=0x4
    unsigned int offhandWeapon;// Offset=0x10 Size=0x4
    int lastSpawnTime;// Offset=0x14 Size=0x4
};

struct FxEffectDef// Size=0x20 (Id=4312)
{
    char * name;// Offset=0x0 Size=0x4
    int flags;// Offset=0x4 Size=0x4
    int totalSize;// Offset=0x8 Size=0x4
    int msecLoopingLife;// Offset=0xc Size=0x4
    int elemDefCountLooping;// Offset=0x10 Size=0x4
    int elemDefCountOneShot;// Offset=0x14 Size=0x4
    int elemDefCountEmission;// Offset=0x18 Size=0x4
    struct FxElemDef * elemDefs;// Offset=0x1c Size=0x4
};

struct FxImpactEntry// Size=0x8c (Id=4313)
{
    struct FxEffectDef * nonflesh[31];// Offset=0x0 Size=0x7c
    struct FxEffectDef * flesh[4];// Offset=0x7c Size=0x10
};

struct ClientMatchData// Size=0x440 (Id=4314)
{
    char def[64];// Offset=0x0 Size=0x40
    unsigned char data[1024];// Offset=0x40 Size=0x400
};

struct PhysGeomInfo// Size=0x44 (Id=4315)
{
    struct BrushWrapper * brushWrapper;// Offset=0x0 Size=0x4
    int type;// Offset=0x4 Size=0x4
    float orientation[3][3];// Offset=0x8 Size=0x24
    struct Bounds bounds;// Offset=0x2c Size=0x18
};

struct clientDebugStringInfo_t// Size=0x10 (Id=4316)
{
    int max;// Offset=0x0 Size=0x4
    int num;// Offset=0x4 Size=0x4
    struct trDebugString_t * strings;// Offset=0x8 Size=0x4
    int * durations;// Offset=0xc Size=0x4
};

struct XModelCollSurf_s// Size=0x24 (Id=4317)
{
    struct Bounds bounds;// Offset=0x0 Size=0x18
    int boneIdx;// Offset=0x18 Size=0x4
    int contents;// Offset=0x1c Size=0x4
    int surfFlags;// Offset=0x20 Size=0x4
};

struct LerpEntityStateLoopFx// Size=0x8 (Id=4318)
{
    float cullDist;// Offset=0x0 Size=0x4
    int period;// Offset=0x4 Size=0x4
};

struct StreamFileNamePacked// Size=0x8 (Id=4319)
{
    unsigned int offset;// Offset=0x0 Size=0x4
    unsigned int length;// Offset=0x4 Size=0x4
};

struct LerpEntityStateCustomExplode// Size=0x4 (Id=4320)
{
    int startTime;// Offset=0x0 Size=0x4
};

enum clientMigState_t
{
    CMSTATE_INACTIVE=0,
    CMSTATE_OLDHOSTLEAVING=1,
    CMSTATE_LIMBO=2,
    CMSTATE_NEWHOSTCONNECT=3,
    CMSTATE_COUNT=4
};

struct clientUIActive_t// Size=0x14c (Id=4322)
{
    bool active;// Offset=0x0 Size=0x1
    bool isRunning;// Offset=0x1 Size=0x1
    bool cgameInitialized;// Offset=0x2 Size=0x1
    bool cgameInitCalled;// Offset=0x3 Size=0x1
    bool mapPreloaded;// Offset=0x4 Size=0x1
    unsigned char __align0[3];// Offset=0x5 Size=0x3
    enum clientMigState_t migrationState;// Offset=0x8 Size=0x4
    int keyCatchers;// Offset=0xc Size=0x4
    bool displayHUDWithKeycatchUI;// Offset=0x10 Size=0x1
    unsigned char __align1[3];// Offset=0x11 Size=0x3
    enum connstate_t connectionState;// Offset=0x14 Size=0x4
    int nextScrollTime;// Offset=0x18 Size=0x4
    int dpadNextTime;// Offset=0x1c Size=0x4
    int dpadLatestKey;// Offset=0x20 Size=0x4
    bool invited;// Offset=0x24 Size=0x1
    unsigned char itemsUnlocked[256];// Offset=0x25 Size=0x100
    bool itemsUnlockedInited;// Offset=0x125 Size=0x1
    bool itemsUnlockedLastGameDirty;// Offset=0x126 Size=0x1
    unsigned char __align2[1];// Offset=0x127 Size=0x1
    unsigned short itemsUnlockedLastGame[16];// Offset=0x128 Size=0x20
    int itemsUnlockedLastGameCount;// Offset=0x148 Size=0x4
};

struct RegisteredUser// Size=0x10 (Id=4323)
{
    bool active;// Offset=0x0 Size=0x1
    unsigned char __align0[7];// Offset=0x1 Size=0x7
    unsigned long long xuid;// Offset=0x8 Size=0x8
};

struct XBoneInfo// Size=0x1c (Id=4324)
{
    struct Bounds bounds;// Offset=0x0 Size=0x18
    float radiusSquared;// Offset=0x18 Size=0x4
};

struct StreamedSound// Size=0xc (Id=4325)
{
    struct StreamFileName filename;// Offset=0x0 Size=0xc
};

struct LerpEntityStateTurret// Size=0x20 (Id=4326)
{
    float gunAngles[3];// Offset=0x0 Size=0xc
    int lastBarrelRotChangeTime;// Offset=0xc Size=0x4
    int lastBarrelRotChangeRate;// Offset=0x10 Size=0x4
    int lastHeatChangeLevel;// Offset=0x14 Size=0x4
    int lastHeatChangeTime;// Offset=0x18 Size=0x4
    bool isBarrelRotating;// Offset=0x1c Size=0x1
    bool isOverheat;// Offset=0x1d Size=0x1
    bool isHeatingUp;// Offset=0x1e Size=0x1
    bool isBeingCarried;// Offset=0x1f Size=0x1
};

struct snd_entchan_overrides_t// Size=0x108 (Id=4327)
{
    unsigned int isPausable[2];// Offset=0x0 Size=0x8
    float timescaleLerp[64];// Offset=0x8 Size=0x100
};

struct snd_amplifier// Size=0x18 (Id=4328)
{
    struct snd_listener * listener;// Offset=0x0 Size=0x4
    int minRadius;// Offset=0x4 Size=0x4
    int maxRadius;// Offset=0x8 Size=0x4
    float falloffExp;// Offset=0xc Size=0x4
    float minVol;// Offset=0x10 Size=0x4
    float maxVol;// Offset=0x14 Size=0x4
};

struct snd_local_t::<unnamed-type-restore>// Size=0x4008 (Id=4329)
{
    unsigned char buffer[16384];// Offset=0x0 Size=0x4000
    int size;// Offset=0x4000 Size=0x4
    bool compress;// Offset=0x4004 Size=0x1
};

struct gameState_t// Size=0x13fd0 (Id=4330)
{
    int stringOffsets[4083];// Offset=0x0 Size=0x3fcc
    char stringData[65536];// Offset=0x3fcc Size=0x10000
    int dataCount;// Offset=0x13fcc Size=0x4
};

struct serverInfo_t// Size=0xd0 (Id=4331)
{
    struct XNADDR xnaddr;// Offset=0x0 Size=0x24
    struct XNKEY xnkey;// Offset=0x24 Size=0x10
    struct XNKID xnkid;// Offset=0x34 Size=0x8
    int publicSlots;// Offset=0x3c Size=0x4
    int publicSlotsUsed;// Offset=0x40 Size=0x4
    int privateSlots;// Offset=0x44 Size=0x4
    int privateSlotsUsed;// Offset=0x48 Size=0x4
    unsigned char __align0[4];// Offset=0x4c Size=0x4
    unsigned long long nonce;// Offset=0x50 Size=0x8
    unsigned char netType;// Offset=0x58 Size=0x1
    unsigned char clients;// Offset=0x59 Size=0x1
    unsigned char maxClients;// Offset=0x5a Size=0x1
    unsigned char dirty;// Offset=0x5b Size=0x1
    char friendlyfire;// Offset=0x5c Size=0x1
    char killcam;// Offset=0x5d Size=0x1
    unsigned char hardware;// Offset=0x5e Size=0x1
    unsigned char mod;// Offset=0x5f Size=0x1
    unsigned char requestCount;// Offset=0x60 Size=0x1
    unsigned char __align1[1];// Offset=0x61 Size=0x1
    short minPing;// Offset=0x62 Size=0x2
    short maxPing;// Offset=0x64 Size=0x2
    short ping;// Offset=0x66 Size=0x2
    char hostName[32];// Offset=0x68 Size=0x20
    char mapName[32];// Offset=0x88 Size=0x20
    char game[24];// Offset=0xa8 Size=0x18
    char gameType[16];// Offset=0xc0 Size=0x10
};

struct clientDebug_t// Size=0x68 (Id=4332)
{
    int prevFromServer;// Offset=0x0 Size=0x4
    int fromServer;// Offset=0x4 Size=0x4
    struct clientDebugStringInfo_t clStrings;// Offset=0x8 Size=0x10
    struct clientDebugStringInfo_t svStringsBuffer;// Offset=0x18 Size=0x10
    struct clientDebugStringInfo_t svStrings;// Offset=0x28 Size=0x10
    struct clientDebugLineInfo_t clLines;// Offset=0x38 Size=0x10
    struct clientDebugLineInfo_t svLinesBuffer;// Offset=0x48 Size=0x10
    struct clientDebugLineInfo_t svLines;// Offset=0x58 Size=0x10
};

struct clientLogo_t// Size=0x18 (Id=4333)
{
    int startTime;// Offset=0x0 Size=0x4
    int duration;// Offset=0x4 Size=0x4
    int fadein;// Offset=0x8 Size=0x4
    int fadeout;// Offset=0xc Size=0x4
    struct Material * material[2];// Offset=0x10 Size=0x8
};

struct clientStatic_t// Size=0x555f0 (Id=4334)
{
    int quit;// Offset=0x0 Size=0x4
    int hunkUsersStarted;// Offset=0x4 Size=0x4
    char servername[256];// Offset=0x8 Size=0x100
    struct _XSESSION_INFO hostInfo;// Offset=0x108 Size=0x3c
    int rendererStarted;// Offset=0x144 Size=0x4
    int soundStarted;// Offset=0x148 Size=0x4
    int uiStarted;// Offset=0x14c Size=0x4
    int frametime;// Offset=0x150 Size=0x4
    float frametime_base;// Offset=0x154 Size=0x4
    int realtime;// Offset=0x158 Size=0x4
    bool gpuSyncedPrevFrame;// Offset=0x15c Size=0x1
    bool inputUpdatedPrevFrame;// Offset=0x15d Size=0x1
    unsigned char __align0[2];// Offset=0x15e Size=0x2
    struct clientLogo_t logo;// Offset=0x160 Size=0x18
    float mapCenter[3];// Offset=0x178 Size=0xc
    int numlocalservers;// Offset=0x184 Size=0x4
    struct serverInfo_t localServers[16];// Offset=0x188 Size=0xd00
    int pingUpdateSource;// Offset=0xe88 Size=0x4
    struct Material * whiteMaterial;// Offset=0xe8c Size=0x4
    struct Material * consoleMaterial;// Offset=0xe90 Size=0x4
    struct Font_s * consoleFont;// Offset=0xe94 Size=0x4
    struct vidConfig_t vidConfig;// Offset=0xe98 Size=0x30
    struct clientDebug_t debug;// Offset=0xec8 Size=0x68
    struct ClientMatchData matchData;// Offset=0xf30 Size=0x440
    struct XNADDR xnaddrs[18];// Offset=0x1370 Size=0x288
    long scriptError;// Offset=0x15f8 Size=0x4
    float debugRenderPos[3];// Offset=0x15fc Size=0xc
    int skelTimeStamp;// Offset=0x1608 Size=0x4
    long skelMemPos;// Offset=0x160c Size=0x4
    char skelMemory[262144];// Offset=0x1610 Size=0x40000
    char * skelMemoryStart;// Offset=0x41610 Size=0x4
    bool allowedAllocSkel;// Offset=0x41614 Size=0x1
    unsigned char __align1[3];// Offset=0x41615 Size=0x3
    int serverId;// Offset=0x41618 Size=0x4
    struct gameState_t gameState;// Offset=0x4161c Size=0x13fd0
};

struct SessionStaticData// Size=0xc (Id=4335)
{
    char * sessionName;// Offset=0x0 Size=0x4
    bool registerUsersWithVoice;// Offset=0x4 Size=0x1
    unsigned char __align0[3];// Offset=0x5 Size=0x3
    struct IXHVEngine * voiceEngine;// Offset=0x8 Size=0x4
};

struct SessionDynamicData// Size=0x6b8 (Id=4336)
{
    void * sessionHandle;// Offset=0x0 Size=0x4
    int actualPublicSlots;// Offset=0x4 Size=0x4
    struct IWNetSessionStatus iwnetServerSessionStatus;// Offset=0x8 Size=0x1c8
    struct _XSESSION_INFO sessionInfo;// Offset=0x1d0 Size=0x3c
    bool keysGenerated;// Offset=0x20c Size=0x1
    bool sessionStartCalled;// Offset=0x20d Size=0x1
    unsigned char __align0[2];// Offset=0x20e Size=0x2
    unsigned long long sessionNonce;// Offset=0x210 Size=0x8
    int privateSlots;// Offset=0x218 Size=0x4
    int publicSlots;// Offset=0x21c Size=0x4
    int flags;// Offset=0x220 Size=0x4
    bool qosListenEnabled;// Offset=0x224 Size=0x1
    unsigned char __align1[3];// Offset=0x225 Size=0x3
    struct ClientInfo users[18];// Offset=0x228 Size=0x360
    struct LocalTalkerInfo localTalkers[4];// Offset=0x588 Size=0x4
    int voiceConnectivityBits;// Offset=0x58c Size=0x4
    int sessionCreateController;// Offset=0x590 Size=0x4
    int sessionDeleteTime;// Offset=0x594 Size=0x4
    struct RegisteredUser internalRegisteredUsers[18];// Offset=0x598 Size=0x120
};

struct snd_physics_info// Size=0x10 (Id=4337)
{
    struct snd_alias_list_t * aliasList;// Offset=0x0 Size=0x4
    float org[3];// Offset=0x4 Size=0xc
};

struct ActionSlotParam_SpecifyWeapon// Size=0x4 (Id=4338)
{
    unsigned int index;// Offset=0x0 Size=0x4
};

struct LerpEntityStateAnonymous// Size=0x24 (Id=4339)
{
    int data[9];// Offset=0x0 Size=0x24
};

enum ImpactType
{
    IMPACT_TYPE_NONE=0,
    IMPACT_TYPE_BULLET_SMALL=1,
    IMPACT_TYPE_BULLET_LARGE=2,
    IMPACT_TYPE_BULLET_AP=3,
    IMPACT_TYPE_BULLET_EXPLODE=4,
    IMPACT_TYPE_SHOTGUN=5,
    IMPACT_TYPE_GRENADE_BOUNCE=6,
    IMPACT_TYPE_GRENADE_EXPLODE=7,
    IMPACT_TYPE_ROCKET_EXPLODE=8,
    IMPACT_TYPE_PROJECTILE_DUD=9,
    IMPACT_TYPE_COUNT=10
};

struct clientConnection_t// Size=0x51568 (Id=4341)
{
    int qport;// Offset=0x0 Size=0x4
    int clientNum;// Offset=0x4 Size=0x4
    int lastPacketSentTime;// Offset=0x8 Size=0x4
    int lastPacketTime;// Offset=0xc Size=0x4
    struct netadr_t serverAddress;// Offset=0x10 Size=0xc
    int connectTime;// Offset=0x1c Size=0x4
    int connectPacketCount;// Offset=0x20 Size=0x4
    char serverMessage[256];// Offset=0x24 Size=0x100
    int challenge;// Offset=0x124 Size=0x4
    int checksumFeed;// Offset=0x128 Size=0x4
    int reliableSequence;// Offset=0x12c Size=0x4
    int reliableAcknowledge;// Offset=0x130 Size=0x4
    char reliableCommands[128][1024];// Offset=0x134 Size=0x20000
    int serverMessageSequence;// Offset=0x20134 Size=0x4
    int serverCommandSequence;// Offset=0x20138 Size=0x4
    int lastExecutedServerCommand;// Offset=0x2013c Size=0x4
    char serverCommands[128][1024];// Offset=0x20140 Size=0x20000
    bool isServerRestarting;// Offset=0x40140 Size=0x1
    unsigned char __align0[3];// Offset=0x40141 Size=0x3
    int timeDemoBaseTime;// Offset=0x40144 Size=0x4
    struct netchan_t netchan;// Offset=0x40148 Size=0x620
    char netchanOutgoingBuffer[2048];// Offset=0x40768 Size=0x800
    char netchanIncomingBuffer[65536];// Offset=0x40f68 Size=0x10000
    struct netProfileInfo_t OOBProf;// Offset=0x50f68 Size=0x5e0
    unsigned char statPacketsToSend;// Offset=0x51548 Size=0x1
    unsigned char __align1[3];// Offset=0x51549 Size=0x3
    int statPacketSendTime[7];// Offset=0x5154c Size=0x1c
};

enum netadrtype_t
{
    NA_BOT=0,
    NA_BAD=1,
    NA_LOOPBACK=2,
    NA_BROADCAST=3,
    NA_IP=4
};

struct netProfileStream_t// Size=0x2f0 (Id=4343)
{
    struct netProfilePacket_t packets[60];// Offset=0x0 Size=0x2d0
    int iCurrPacket;// Offset=0x2d0 Size=0x4
    int iBytesPerSecond;// Offset=0x2d4 Size=0x4
    int iLastBPSCalcTime;// Offset=0x2d8 Size=0x4
    int iCountedPackets;// Offset=0x2dc Size=0x4
    int iCountedFragments;// Offset=0x2e0 Size=0x4
    int iFragmentPercentage;// Offset=0x2e4 Size=0x4
    int iLargestPacket;// Offset=0x2e8 Size=0x4
    int iSmallestPacket;// Offset=0x2ec Size=0x4
};

struct LerpEntityStateExplosion// Size=0xc (Id=4344)
{
    float innerRadius;// Offset=0x0 Size=0x4
    float outerRadius;// Offset=0x4 Size=0x4
    float magnitude;// Offset=0x8 Size=0x4
};

enum objectiveState_t
{
    OBJST_EMPTY=0,
    OBJST_ACTIVE=1,
    OBJST_INVISIBLE=2,
    OBJST_DONE=3,
    OBJST_CURRENT=4,
    OBJST_FAILED=5,
    OBJST_NUMSTATES=6
};

struct voiceCommunication_t// Size=0x74 (Id=4346)
{
    struct ClientVoicePacket_t voicePackets[10];// Offset=0x0 Size=0x64
    int voicePacketCount;// Offset=0x64 Size=0x4
    int voicePacketLastTransmit;// Offset=0x68 Size=0x4
    int packetsPerSec;// Offset=0x6c Size=0x4
    int packetsPerSecStart;// Offset=0x70 Size=0x4
};

struct LerpEntityStateBulletHit// Size=0xc (Id=4347)
{
    float start[3];// Offset=0x0 Size=0xc
};

struct clientLinkInfo_t// Size=0x4 (Id=4348)
{
    unsigned char flags;// Offset=0x0 Size=0x1
    unsigned char tagName;// Offset=0x1 Size=0x1
    short parentId;// Offset=0x2 Size=0x2
};

struct LerpEntityStatePrimaryLight// Size=0x14 (Id=4349)
{
    unsigned char colorAndExp[4];// Offset=0x0 Size=0x4
    float intensity;// Offset=0x4 Size=0x4
    float radius;// Offset=0x8 Size=0x4
    float cosHalfFovOuter;// Offset=0xc Size=0x4
    float cosHalfFovInner;// Offset=0x10 Size=0x4
};

struct netchan_t// Size=0x620 (Id=4350)
{
    int outgoingSequence;// Offset=0x0 Size=0x4
    enum netsrc_t sock;// Offset=0x4 Size=0x4
    int dropped;// Offset=0x8 Size=0x4
    int incomingSequence;// Offset=0xc Size=0x4
    struct netadr_t remoteAddress;// Offset=0x10 Size=0xc
    int fragmentSequence;// Offset=0x1c Size=0x4
    int fragmentLength;// Offset=0x20 Size=0x4
    unsigned char * fragmentBuffer;// Offset=0x24 Size=0x4
    int fragmentBufferSize;// Offset=0x28 Size=0x4
    int unsentFragments;// Offset=0x2c Size=0x4
    int unsentFragmentStart;// Offset=0x30 Size=0x4
    int unsentLength;// Offset=0x34 Size=0x4
    unsigned char * unsentBuffer;// Offset=0x38 Size=0x4
    int unsentBufferSize;// Offset=0x3c Size=0x4
    struct netProfileInfo_t prof;// Offset=0x40 Size=0x5e0
};

struct PlayerActiveWeaponState// Size=0x1c (Id=4351)
{
    int weapAnim;// Offset=0x0 Size=0x4
    int weaponTime;// Offset=0x4 Size=0x4
    int weaponDelay;// Offset=0x8 Size=0x4
    int weaponRestrictKickTime;// Offset=0xc Size=0x4
    int weaponState;// Offset=0x10 Size=0x4
    int weapHandFlags;// Offset=0x14 Size=0x4
    unsigned int weaponShotCount;// Offset=0x18 Size=0x4
};

struct LoadedSound// Size=0xa0 (Id=4352)
{
    char * name;// Offset=0x0 Size=0x4
    struct XaSound sound;// Offset=0x4 Size=0x9c
};

struct SndEntHandle::<unnamed-type-field>// Size=0x4 (Id=4353)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned int entIndex:12;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0xc
        unsigned int localClientNum:2;// Offset=0x0 Size=0x4 BitOffset=0x12 BitSize=0x2
        unsigned int isInKillCam:1;// Offset=0x0 Size=0x4 BitOffset=0x11 BitSize=0x1
    };
};

struct netProfilePacket_t// Size=0xc (Id=4354)
{
    int iTime;// Offset=0x0 Size=0x4
    int iSize;// Offset=0x4 Size=0x4
    int bFragment;// Offset=0x8 Size=0x4
};

struct LerpEntityStateMissile// Size=0x8 (Id=4355)
{
    int launchTime;// Offset=0x0 Size=0x4
    enum MissileFlightMode flightMode;// Offset=0x4 Size=0x4
};

struct LerpEntityStateScriptMover// Size=0x10 (Id=4356)
{
    int entToTakeMarksFrom;// Offset=0x0 Size=0x4
    int xModelIndex;// Offset=0x4 Size=0x4
    int animIndex;// Offset=0x8 Size=0x4
    int animTime;// Offset=0xc Size=0x4
};

union SoundFileRef// Size=0xc (Id=4357)
{
    struct LoadedSound * loadSnd;// Offset=0x0 Size=0x4
    struct StreamedSound streamSnd;// Offset=0x0 Size=0xc
};

enum weapType_t
{
    WEAPTYPE_BULLET=0,
    WEAPTYPE_GRENADE=1,
    WEAPTYPE_PROJECTILE=2,
    WEAPTYPE_RIOTSHIELD=3,
    WEAPTYPE_NUM=4
};

struct StreamFileNameRaw// Size=0x8 (Id=4359)
{
    char * dir;// Offset=0x0 Size=0x4
    char * name;// Offset=0x4 Size=0x4
};

struct LerpEntityStateSoundBlend// Size=0x4 (Id=4360)
{
    float lerp;// Offset=0x0 Size=0x4
};

struct LerpEntityStateExplosionJolt// Size=0x14 (Id=4361)
{
    float innerRadius;// Offset=0x0 Size=0x4
    float outerRadius;// Offset=0x4 Size=0x4
    float impulse[3];// Offset=0x8 Size=0xc
};

struct playerState_s// Size=0x3180 (Id=4362)
{
    union // Size=0x848 (Id=0)
    {
        int commandTime;// Offset=0x0 Size=0x4
        int pm_type;// Offset=0x4 Size=0x4
        int pm_time;// Offset=0x8 Size=0x4
        int pm_flags;// Offset=0xc Size=0x4
        int otherFlags;// Offset=0x10 Size=0x4
        int linkFlags;// Offset=0x14 Size=0x4
        int bobCycle;// Offset=0x18 Size=0x4
        float origin[3];// Offset=0x1c Size=0xc
        float velocity[3];// Offset=0x28 Size=0xc
        int grenadeTimeLeft;// Offset=0x34 Size=0x4
        int throwbackGrenadeOwner;// Offset=0x38 Size=0x4
        int throwbackGrenadeTimeLeft;// Offset=0x3c Size=0x4
        unsigned int throwbackWeaponIndex;// Offset=0x40 Size=0x4
        int remoteEyesEnt;// Offset=0x44 Size=0x4
        int remoteEyesTagname;// Offset=0x48 Size=0x4
        int remoteControlEnt;// Offset=0x4c Size=0x4
        int foliageSoundTime;// Offset=0x50 Size=0x4
        int gravity;// Offset=0x54 Size=0x4
        float leanf;// Offset=0x58 Size=0x4
        int speed;// Offset=0x5c Size=0x4
        float delta_angles[3];// Offset=0x60 Size=0xc
        int groundEntityNum;// Offset=0x6c Size=0x4
        float vLadderVec[3];// Offset=0x70 Size=0xc
        int jumpTime;// Offset=0x7c Size=0x4
        float jumpOriginZ;// Offset=0x80 Size=0x4
        int legsTimer;// Offset=0x84 Size=0x4
        int legsAnim;// Offset=0x88 Size=0x4
        int torsoTimer;// Offset=0x8c Size=0x4
        int torsoAnim;// Offset=0x90 Size=0x4
        int legsAnimDuration;// Offset=0x94 Size=0x4
        int torsoAnimDuration;// Offset=0x98 Size=0x4
        int damageTimer;// Offset=0x9c Size=0x4
        int damageDuration;// Offset=0xa0 Size=0x4
        int flinchYawAnim;// Offset=0xa4 Size=0x4
        int corpseIndex;// Offset=0xa8 Size=0x4
        int movementDir;// Offset=0xac Size=0x4
        int eFlags;// Offset=0xb0 Size=0x4
        int eventSequence;// Offset=0xb4 Size=0x4
        int events[4];// Offset=0xb8 Size=0x10
        unsigned int eventParms[4];// Offset=0xc8 Size=0x10
        int oldEventSequence;// Offset=0xd8 Size=0x4
        int unpredictableEventSequence;// Offset=0xdc Size=0x4
        int unpredictableEventSequenceOld;// Offset=0xe0 Size=0x4
        int unpredictableEvents[4];// Offset=0xe4 Size=0x10
        unsigned int unpredictableEventParms[4];// Offset=0xf4 Size=0x10
        int clientNum;// Offset=0x104 Size=0x4
        int viewmodelIndex;// Offset=0x108 Size=0x4
        float viewangles[3];// Offset=0x10c Size=0xc
        int viewHeightTarget;// Offset=0x118 Size=0x4
        float viewHeightCurrent;// Offset=0x11c Size=0x4
        int viewHeightLerpTime;// Offset=0x120 Size=0x4
        int viewHeightLerpTarget;// Offset=0x124 Size=0x4
        int viewHeightLerpDown;// Offset=0x128 Size=0x4
        float viewAngleClampBase[2];// Offset=0x12c Size=0x8
        float viewAngleClampRange[2];// Offset=0x134 Size=0x8
        int damageEvent;// Offset=0x13c Size=0x4
        int damageYaw;// Offset=0x140 Size=0x4
        int damagePitch;// Offset=0x144 Size=0x4
        int damageCount;// Offset=0x148 Size=0x4
        int damageFlags;// Offset=0x14c Size=0x4
        int stats[4];// Offset=0x150 Size=0x10
        float proneDirection;// Offset=0x160 Size=0x4
        float proneDirectionPitch;// Offset=0x164 Size=0x4
        float proneTorsoPitch;// Offset=0x168 Size=0x4
        enum ViewLockTypes viewlocked;// Offset=0x16c Size=0x4
        int viewlocked_entNum;// Offset=0x170 Size=0x4
        float linkAngles[3];// Offset=0x174 Size=0xc
        float linkWeaponAngles[3];// Offset=0x180 Size=0xc
        int linkWeaponEnt;// Offset=0x18c Size=0x4
        int loopSound;// Offset=0x190 Size=0x4
        int cursorHint;// Offset=0x194 Size=0x4
        int cursorHintString;// Offset=0x198 Size=0x4
        int cursorHintEntIndex;// Offset=0x19c Size=0x4
        int cursorHintDualWield;// Offset=0x1a0 Size=0x4
        int iCompassPlayerInfo;// Offset=0x1a4 Size=0x4
        int radarEnabled;// Offset=0x1a8 Size=0x4
        int radarBlocked;// Offset=0x1ac Size=0x4
        int radarMode;// Offset=0x1b0 Size=0x4
        int locationSelectionInfo;// Offset=0x1b4 Size=0x4
        struct SprintState sprintState;// Offset=0x1b8 Size=0x14
        float holdBreathScale;// Offset=0x1cc Size=0x4
        int holdBreathTimer;// Offset=0x1d0 Size=0x4
        float moveSpeedScaleMultiplier;// Offset=0x1d4 Size=0x4
        struct MantleState mantleState;// Offset=0x1d8 Size=0x10
        struct PlayerActiveWeaponState weapState[2];// Offset=0x1e8 Size=0x38
        unsigned int weaponsEquipped[15];// Offset=0x220 Size=0x3c
        struct PlayerEquippedWeaponState weapEquippedData[15];// Offset=0x25c Size=0x4b
        unsigned char __align0[1];// Offset=0x2a7 Size=0x1
        struct PlayerWeaponCommonState weapCommon;// Offset=0x2a8 Size=0x174
        float meleeChargeYaw;// Offset=0x41c Size=0x4
        int meleeChargeDist;// Offset=0x420 Size=0x4
        int meleeChargeTime;// Offset=0x424 Size=0x4
        unsigned int perks[2];// Offset=0x428 Size=0x8
        unsigned int perkSlots[8];// Offset=0x430 Size=0x20
        enum ActionSlotType actionSlotType[4];// Offset=0x450 Size=0x10
        struct ActionSlotParam actionSlotParam[4];// Offset=0x460 Size=0x10
        int weaponHudIconOverrides[6];// Offset=0x470 Size=0x18
        int animScriptedType;// Offset=0x488 Size=0x4
        int shellshockIndex;// Offset=0x48c Size=0x4
        int shellshockTime;// Offset=0x490 Size=0x4
        int shellshockDuration;// Offset=0x494 Size=0x4
        float dofNearStart;// Offset=0x498 Size=0x4
        float dofNearEnd;// Offset=0x49c Size=0x4
        float dofFarStart;// Offset=0x4a0 Size=0x4
        float dofFarEnd;// Offset=0x4a4 Size=0x4
        float dofNearBlur;// Offset=0x4a8 Size=0x4
        float dofFarBlur;// Offset=0x4ac Size=0x4
        float dofViewmodelStart;// Offset=0x4b0 Size=0x4
        float dofViewmodelEnd;// Offset=0x4b4 Size=0x4
        struct objective_t objective[32];// Offset=0x4b8 Size=0x380
        int deltaTime;// Offset=0x838 Size=0x4
        int killCamEntity;// Offset=0x83c Size=0x4
        int killCamLookAtEntity;// Offset=0x840 Size=0x4
        int killCamClientNum;// Offset=0x844 Size=0x4
        struct <unnamed-type-hud>// Size=0x28b0 (Id=49203)
        {
            struct hudelem_s current[31];// Offset=0x0 Size=0x1458
            struct hudelem_s archival[31];// Offset=0x1458 Size=0x1458
        };
    };
    struct playerState_s::<unnamed-type-hud> hud;// Offset=0x848 Size=0x28b0
    unsigned int partBits[5];// Offset=0x30f8 Size=0x14
    int recoilScale;// Offset=0x310c Size=0x4
    int diveDirection;// Offset=0x3110 Size=0x4
    int stunTime;// Offset=0x3114 Size=0x4
};

struct playerState_s::<unnamed-type-hud>// Size=0x28b0 (Id=4363)
{
    struct hudelem_s current[31];// Offset=0x0 Size=0x1458
    struct hudelem_s archival[31];// Offset=0x1458 Size=0x1458
};

struct vidConfig_t// Size=0x30 (Id=4364)
{
    unsigned int sceneWidth;// Offset=0x0 Size=0x4
    unsigned int sceneHeight;// Offset=0x4 Size=0x4
    unsigned int displayWidth;// Offset=0x8 Size=0x4
    unsigned int displayHeight;// Offset=0xc Size=0x4
    float displayFrequency;// Offset=0x10 Size=0x4
    int isHiDef;// Offset=0x14 Size=0x4
    int isFullscreen;// Offset=0x18 Size=0x4
    float aspectRatioWindow;// Offset=0x1c Size=0x4
    float aspectRatioScenePixel;// Offset=0x20 Size=0x4
    float aspectRatioDisplayPixel;// Offset=0x24 Size=0x4
    unsigned int maxTextureSize;// Offset=0x28 Size=0x4
    bool deviceSupportsGamma;// Offset=0x2c Size=0x1
};

struct snd_channelvolgroup// Size=0x304 (Id=4365)
{
    struct snd_volume_info_t channelvol[64];// Offset=0x0 Size=0x300
    bool active;// Offset=0x300 Size=0x1
};

struct LerpEntityStateRadiusDamage// Size=0xc (Id=4366)
{
    float range;// Offset=0x0 Size=0x4
    int damageMin;// Offset=0x4 Size=0x4
    int damageMax;// Offset=0x8 Size=0x4
};

struct XModelLodInfo// Size=0x24 (Id=4367)
{
    float dist;// Offset=0x0 Size=0x4
    unsigned short numsurfs;// Offset=0x4 Size=0x2
    unsigned short surfIndex;// Offset=0x6 Size=0x2
    struct XModelSurfs * modelSurfs;// Offset=0x8 Size=0x4
    int partBits[5];// Offset=0xc Size=0x14
    struct XSurface * surfs;// Offset=0x20 Size=0x4
};

struct ActionSlotParam// Size=0x4 (Id=4368)
{
    struct ActionSlotParam_SpecifyWeapon specifyWeapon;// Offset=0x0 Size=0x4
};

struct TriggerModel// Size=0x8 (Id=4369)
{
    int contents;// Offset=0x0 Size=0x4
    unsigned short hullCount;// Offset=0x4 Size=0x2
    unsigned short firstHull;// Offset=0x6 Size=0x2
};

struct FxImpactTable// Size=0x8 (Id=4370)
{
    char * name;// Offset=0x0 Size=0x4
    struct FxImpactEntry * table;// Offset=0x4 Size=0x4
};

union StreamFileInfo// Size=0x8 (Id=4371)
{
    struct StreamFileNameRaw raw;// Offset=0x0 Size=0x8
    struct StreamFileNamePacked packed;// Offset=0x0 Size=0x8
};

union XAssetHeader// Size=0x4 (Id=4372)
{
    struct PhysPreset * physPreset;// Offset=0x0 Size=0x4
    struct PhysCollmap * physCollmap;// Offset=0x0 Size=0x4
    struct XAnimParts * parts;// Offset=0x0 Size=0x4
    struct XModelSurfs * modelSurfs;// Offset=0x0 Size=0x4
    struct XModel * model;// Offset=0x0 Size=0x4
    struct Material * material;// Offset=0x0 Size=0x4
    struct MaterialPixelShader * pixelShader;// Offset=0x0 Size=0x4
    struct MaterialVertexShader * vertexShader;// Offset=0x0 Size=0x4
    struct MaterialTechniqueSet * techniqueSet;// Offset=0x0 Size=0x4
    struct GfxImage * image;// Offset=0x0 Size=0x4
    struct snd_alias_list_t * sound;// Offset=0x0 Size=0x4
    struct SndCurve * sndCurve;// Offset=0x0 Size=0x4
    struct LoadedSound * loadSnd;// Offset=0x0 Size=0x4
    struct clipMap_t * clipMap;// Offset=0x0 Size=0x4
    struct ComWorld * comWorld;// Offset=0x0 Size=0x4
    struct GameWorldSp * gameWorldSp;// Offset=0x0 Size=0x4
    struct GameWorldMp * gameWorldMp;// Offset=0x0 Size=0x4
    struct MapEnts * mapEnts;// Offset=0x0 Size=0x4
    struct FxWorld * fxWorld;// Offset=0x0 Size=0x4
    struct GfxWorld * gfxWorld;// Offset=0x0 Size=0x4
    struct GfxLightDef * lightDef;// Offset=0x0 Size=0x4
    struct Font_s * font;// Offset=0x0 Size=0x4
    struct MenuList * menuList;// Offset=0x0 Size=0x4
    struct menuDef_t * menu;// Offset=0x0 Size=0x4
    struct LocalizeEntry * localize;// Offset=0x0 Size=0x4
    struct WeaponCompleteDef * weapon;// Offset=0x0 Size=0x4
    struct SndDriverGlobals * sndDriverGlobals;// Offset=0x0 Size=0x4
    struct FxEffectDef * fx;// Offset=0x0 Size=0x4
    struct FxImpactTable * impactFx;// Offset=0x0 Size=0x4
    struct RawFile * rawfile;// Offset=0x0 Size=0x4
    struct StringTable * stringTable;// Offset=0x0 Size=0x4
    struct LeaderboardDef * leaderboardDef;// Offset=0x0 Size=0x4
    struct StructuredDataDefSet * structuredDataDefSet;// Offset=0x0 Size=0x4
    struct TracerDef * tracerDef;// Offset=0x0 Size=0x4
    struct VehicleDef * vehDef;// Offset=0x0 Size=0x4
    struct AddonMapEnts * addonMapEnts;// Offset=0x0 Size=0x4
    void * data;// Offset=0x0 Size=0x4
};

enum WeapOverlayInteface_t
{
    WEAPOVERLAYINTERFACE_NONE=0,
    WEAPOVERLAYINTERFACE_JAVELIN=1,
    WEAPOVERLAYINTERFACE_TURRETSCOPE=2,
    WEAPOVERLAYINTERFACECOUNT=3
};

struct LerpEntityStatePlane// Size=0xc (Id=4374)
{
    int ownerNum;// Offset=0x0 Size=0x4
    int enemyIcon;// Offset=0x4 Size=0x4
    int friendIcon;// Offset=0x8 Size=0x4
};

struct clientState_s// Size=0x94 (Id=4375)
{
    int clientIndex;// Offset=0x0 Size=0x4
    enum team_t team;// Offset=0x4 Size=0x4
    int modelindex;// Offset=0x8 Size=0x4
    int dualWielding;// Offset=0xc Size=0x4
    int riotShieldNext;// Offset=0x10 Size=0x4
    int attachModelIndex[6];// Offset=0x14 Size=0x18
    int attachTagIndex[6];// Offset=0x2c Size=0x18
    char name[32];// Offset=0x44 Size=0x20
    float maxSprintTimeMultiplier;// Offset=0x64 Size=0x4
    int rank;// Offset=0x68 Size=0x4
    int prestige;// Offset=0x6c Size=0x4
    unsigned int perks[2];// Offset=0x70 Size=0x8
    int diveState;// Offset=0x78 Size=0x4
    int voiceConnectivityBits;// Offset=0x7c Size=0x4
    char clanAbbrev[8];// Offset=0x80 Size=0x8
    unsigned int playerCardIcon;// Offset=0x88 Size=0x4
    unsigned int playerCardTitle;// Offset=0x8c Size=0x4
    unsigned int playerCardNameplate;// Offset=0x90 Size=0x4
};

struct ClientVoicePacket_t// Size=0xa (Id=4376)
{
    unsigned char data[10];// Offset=0x0 Size=0xa
};

struct SndDriverGlobals// Size=0x8 (Id=4377)
{
    struct XaReverbSettings * reverbSettings;// Offset=0x0 Size=0x4
    char * name;// Offset=0x4 Size=0x4
};

struct clSnapshot_t// Size=0x3200 (Id=4378)
{
    struct playerState_s ps;// Offset=0x0 Size=0x3180
    int valid;// Offset=0x3180 Size=0x4
    int snapFlags;// Offset=0x3184 Size=0x4
    int serverTime;// Offset=0x3188 Size=0x4
    int messageNum;// Offset=0x318c Size=0x4
    int deltaNum;// Offset=0x3190 Size=0x4
    int ping;// Offset=0x3194 Size=0x4
    int cmdNum;// Offset=0x3198 Size=0x4
    int numEntities;// Offset=0x319c Size=0x4
    int numClients;// Offset=0x31a0 Size=0x4
    int parseEntitiesIndex;// Offset=0x31a4 Size=0x4
    int parseClientsIndex;// Offset=0x31a8 Size=0x4
    int serverCommandNum;// Offset=0x31ac Size=0x4
};

struct snd_alias_list_t// Size=0xc (Id=4379)
{
    char * aliasName;// Offset=0x0 Size=0x4
    struct snd_alias_t * head;// Offset=0x4 Size=0x4
    int count;// Offset=0x8 Size=0x4
};

union LerpEntityStateTypeUnion// Size=0x24 (Id=4380)
{
    struct LerpEntityStateTurret turret;// Offset=0x0 Size=0x20
    struct LerpEntityStateLoopFx loopFx;// Offset=0x0 Size=0x8
    struct LerpEntityStatePrimaryLight primaryLight;// Offset=0x0 Size=0x14
    struct LerpEntityStatePlayer player;// Offset=0x0 Size=0x18
    struct LerpEntityStateVehicle vehicle;// Offset=0x0 Size=0x24
    struct LerpEntityStatePlane plane;// Offset=0x0 Size=0xc
    struct LerpEntityStateMissile missile;// Offset=0x0 Size=0x8
    struct LerpEntityStateSoundBlend soundBlend;// Offset=0x0 Size=0x4
    struct LerpEntityStateBulletHit bulletHit;// Offset=0x0 Size=0xc
    struct LerpEntityStateEarthquake earthquake;// Offset=0x0 Size=0xc
    struct LerpEntityStateCustomExplode customExplode;// Offset=0x0 Size=0x4
    struct LerpEntityStateExplosion explosion;// Offset=0x0 Size=0xc
    struct LerpEntityStateExplosionJolt explosionJolt;// Offset=0x0 Size=0x14
    struct LerpEntityStatePhysicsJitter physicsJitter;// Offset=0x0 Size=0x10
    struct LerpEntityStateRadiusDamage radiusDamage;// Offset=0x0 Size=0xc
    struct LerpEntityStateScriptMover scriptMover;// Offset=0x0 Size=0x10
    struct LerpEntityStateAnonymous anonymous;// Offset=0x0 Size=0x24
};

struct PhysCollmap// Size=0x48 (Id=4381)
{
    char * name;// Offset=0x0 Size=0x4
    unsigned int count;// Offset=0x4 Size=0x4
    struct PhysGeomInfo * geoms;// Offset=0x8 Size=0x4
    struct PhysMass mass;// Offset=0xc Size=0x24
    struct Bounds bounds;// Offset=0x30 Size=0x18
};

enum weapClass_t
{
    WEAPCLASS_RIFLE=0,
    WEAPCLASS_SNIPER=1,
    WEAPCLASS_MG=2,
    WEAPCLASS_SMG=3,
    WEAPCLASS_SPREAD=4,
    WEAPCLASS_PISTOL=5,
    WEAPCLASS_GRENADE=6,
    WEAPCLASS_ROCKETLAUNCHER=7,
    WEAPCLASS_TURRET=8,
    WEAPCLASS_THROWINGKNIFE=9,
    WEAPCLASS_NON_PLAYER=10,
    WEAPCLASS_ITEM=11,
    WEAPCLASS_NUM=12
};

struct MapTriggers// Size=0x18 (Id=4383)
{
    unsigned int count;// Offset=0x0 Size=0x4
    struct TriggerModel * models;// Offset=0x4 Size=0x4
    unsigned int hullCount;// Offset=0x8 Size=0x4
    struct TriggerHull * hulls;// Offset=0xc Size=0x4
    unsigned int slabCount;// Offset=0x10 Size=0x4
    struct TriggerSlab * slabs;// Offset=0x14 Size=0x4
};

enum TraceHitType
{
    TRACE_HITTYPE_NONE=0,
    TRACE_HITTYPE_ENTITY=1,
    TRACE_HITTYPE_DYNENT_MODEL=2,
    TRACE_HITTYPE_DYNENT_BRUSH=3,
    TRACE_HITTYPE_GLASS=4
};

struct trace_t// Size=0x2c (Id=4385)
{
    float fraction;// Offset=0x0 Size=0x4
    float normal[3];// Offset=0x4 Size=0xc
    int surfaceFlags;// Offset=0x10 Size=0x4
    int contents;// Offset=0x14 Size=0x4
    char * material;// Offset=0x18 Size=0x4
    enum TraceHitType hitType;// Offset=0x1c Size=0x4
    unsigned short hitId;// Offset=0x20 Size=0x2
    unsigned short modelIndex;// Offset=0x22 Size=0x2
    unsigned short partName;// Offset=0x24 Size=0x2
    unsigned short partGroup;// Offset=0x26 Size=0x2
    bool allsolid;// Offset=0x28 Size=0x1
    bool startsolid;// Offset=0x29 Size=0x1
    bool walkable;// Offset=0x2a Size=0x1
};

struct XModel// Size=0x10c (Id=4386)
{
    char * name;// Offset=0x0 Size=0x4
    unsigned char numBones;// Offset=0x4 Size=0x1
    unsigned char numRootBones;// Offset=0x5 Size=0x1
    unsigned char numsurfs;// Offset=0x6 Size=0x1
    unsigned char __align0[1];// Offset=0x7 Size=0x1
    float scale;// Offset=0x8 Size=0x4
    unsigned int noScalePartBits[5];// Offset=0xc Size=0x14
    unsigned short * boneNames;// Offset=0x20 Size=0x4
    unsigned char * parentList;// Offset=0x24 Size=0x4
    short * quats;// Offset=0x28 Size=0x4
    float * trans;// Offset=0x2c Size=0x4
    unsigned char * partClassification;// Offset=0x30 Size=0x4
    struct DObjAnimMat * baseMat;// Offset=0x34 Size=0x4
    struct Material ** materialHandles;// Offset=0x38 Size=0x4
    struct XModelLodInfo lodInfo[4];// Offset=0x3c Size=0x90
    char maxLoadedLod;// Offset=0xcc Size=0x1
    char numLods;// Offset=0xcd Size=0x1
    char collLod;// Offset=0xce Size=0x1
    unsigned char flags;// Offset=0xcf Size=0x1
    struct XModelCollSurf_s * collSurfs;// Offset=0xd0 Size=0x4
    int numCollSurfs;// Offset=0xd4 Size=0x4
    int contents;// Offset=0xd8 Size=0x4
    struct XBoneInfo * boneInfo;// Offset=0xdc Size=0x4
    float radius;// Offset=0xe0 Size=0x4
    struct Bounds bounds;// Offset=0xe4 Size=0x18
    unsigned short * invHighMipRadius;// Offset=0xfc Size=0x4
    int memUsage;// Offset=0x100 Size=0x4
    struct PhysPreset * physPreset;// Offset=0x104 Size=0x4
    struct PhysCollmap * physCollmap;// Offset=0x108 Size=0x4
};

struct Stage// Size=0x14 (Id=4387)
{
    char * name;// Offset=0x0 Size=0x4
    float origin[3];// Offset=0x4 Size=0xc
    unsigned short triggerIndex;// Offset=0x10 Size=0x2
    unsigned char sunPrimaryLightIndex;// Offset=0x12 Size=0x1
};

struct snd_listener// Size=0x3c (Id=4388)
{
    struct orientation_t orient;// Offset=0x0 Size=0x30
    float velocity;// Offset=0x30 Size=0x4
    int clientNum;// Offset=0x34 Size=0x4
    bool active;// Offset=0x38 Size=0x1
};

struct GfxLightImage// Size=0x8 (Id=4389)
{
    struct GfxImage * image;// Offset=0x0 Size=0x4
    unsigned char samplerState;// Offset=0x4 Size=0x1
};

struct snd_volume_info_t// Size=0xc (Id=4390)
{
    float volume;// Offset=0x0 Size=0x4
    float goalvolume;// Offset=0x4 Size=0x4
    float goalrate;// Offset=0x8 Size=0x4
};

enum weapOverlayReticle_t
{
    WEAPOVERLAYRETICLE_NONE=0,
    WEAPOVERLAYRETICLE_CROSSHAIR=1,
    WEAPOVERLAYRETICLE_NUM=2
};

struct RawFile// Size=0x10 (Id=4392)
{
    char * name;// Offset=0x0 Size=0x4
    int compressedLen;// Offset=0x4 Size=0x4
    int len;// Offset=0x8 Size=0x4
    char * buffer;// Offset=0xc Size=0x4
};

struct outPacket_t// Size=0xc (Id=4393)
{
    int p_cmdNumber;// Offset=0x0 Size=0x4
    int p_serverTime;// Offset=0x4 Size=0x4
    int p_realtime;// Offset=0x8 Size=0x4
};

struct SprintState// Size=0x14 (Id=4394)
{
    int sprintButtonUpRequired;// Offset=0x0 Size=0x4
    int sprintDelay;// Offset=0x4 Size=0x4
    int lastSprintStart;// Offset=0x8 Size=0x4
    int lastSprintEnd;// Offset=0xc Size=0x4
    int sprintStartMaxLength;// Offset=0x10 Size=0x4
};

struct PlayerWeaponCommonState// Size=0x174 (Id=4395)
{
    int offHandIndex;// Offset=0x0 Size=0x4
    enum OffhandClass offhandPrimary;// Offset=0x4 Size=0x4
    enum OffhandClass offhandSecondary;// Offset=0x8 Size=0x4
    unsigned int weapon;// Offset=0xc Size=0x4
    unsigned int primaryWeaponForAltMode;// Offset=0x10 Size=0x4
    int weapFlags;// Offset=0x14 Size=0x4
    float fWeaponPosFrac;// Offset=0x18 Size=0x4
    float aimSpreadScale;// Offset=0x1c Size=0x4
    int adsDelayTime;// Offset=0x20 Size=0x4
    int spreadOverride;// Offset=0x24 Size=0x4
    int spreadOverrideState;// Offset=0x28 Size=0x4
    enum PlayerHandIndex lastWeaponHand;// Offset=0x2c Size=0x4
    struct GlobalAmmo ammoNotInClip[15];// Offset=0x30 Size=0x78
    struct ClipAmmo ammoInClip[15];// Offset=0xa8 Size=0xb4
    int weapLockFlags;// Offset=0x15c Size=0x4
    int weapLockedEntnum;// Offset=0x160 Size=0x4
    float weapLockedPos[3];// Offset=0x164 Size=0xc
    int weaponIdleTime;// Offset=0x170 Size=0x4
};

struct SndFileSpecificChannelInfo// Size=0xc (Id=4396)
{
    enum SndFileLoadingState loadingState;// Offset=0x0 Size=0x4
    int srcChannelCount;// Offset=0x4 Size=0x4
    int baserate;// Offset=0x8 Size=0x4
};

struct AsyncPlaySound// Size=0x14 (Id=4397)
{
    struct snd_alias_t * alias;// Offset=0x0 Size=0x4
    union SndEntHandle sndEnt;// Offset=0x4 Size=0x4
    float origin[3];// Offset=0x8 Size=0xc
};

struct StreamFileName// Size=0xc (Id=4398)
{
    unsigned int fileIndex;// Offset=0x0 Size=0x4
    union StreamFileInfo info;// Offset=0x4 Size=0x8
};

union DvarLimits// Size=0x8 (Id=4399)
{
    struct <unnamed-type-enumeration>// Size=0x8 (Id=49509)
    {
        int stringCount;// Offset=0x0 Size=0x4
        char ** strings;// Offset=0x4 Size=0x4
    };
    struct DvarLimits::<unnamed-type-enumeration> enumeration;// Offset=0x0 Size=0x8
    struct <unnamed-type-integer>// Size=0x8 (Id=49513)
    {
        int min;// Offset=0x0 Size=0x4
        int max;// Offset=0x4 Size=0x4
    };
    struct DvarLimits::<unnamed-type-integer> integer;// Offset=0x0 Size=0x8
    struct <unnamed-type-value>// Size=0x8 (Id=49517)
    {
        float min;// Offset=0x0 Size=0x4
        float max;// Offset=0x4 Size=0x4
    };
    struct DvarLimits::<unnamed-type-value> value;// Offset=0x0 Size=0x8
    struct <unnamed-type-vector>// Size=0x8 (Id=49521)
    {
        float min;// Offset=0x0 Size=0x4
        float max;// Offset=0x4 Size=0x4
    };
    struct DvarLimits::<unnamed-type-vector> vector;// Offset=0x0 Size=0x8
};

struct DvarLimits::<unnamed-type-vector>// Size=0x8 (Id=4400)
{
    float min;// Offset=0x0 Size=0x4
    float max;// Offset=0x4 Size=0x4
};

struct DvarLimits::<unnamed-type-value>// Size=0x8 (Id=4401)
{
    float min;// Offset=0x0 Size=0x4
    float max;// Offset=0x4 Size=0x4
};

struct DvarLimits::<unnamed-type-integer>// Size=0x8 (Id=4402)
{
    int min;// Offset=0x0 Size=0x4
    int max;// Offset=0x4 Size=0x4
};

struct DvarLimits::<unnamed-type-enumeration>// Size=0x8 (Id=4403)
{
    int stringCount;// Offset=0x0 Size=0x4
    char ** strings;// Offset=0x4 Size=0x4
};

struct MapEnts// Size=0x2c (Id=4404)
{
    char * name;// Offset=0x0 Size=0x4
    char * entityString;// Offset=0x4 Size=0x4
    int numEntityChars;// Offset=0x8 Size=0x4
    struct MapTriggers trigger;// Offset=0xc Size=0x18
    struct Stage * stages;// Offset=0x24 Size=0x4
    unsigned char stageCount;// Offset=0x28 Size=0x1
};

enum OffhandSecondaryClass
{
    PLAYER_OFFHAND_SECONDARY_SMOKE=0,
    PLAYER_OFFHAND_SECONDARY_FLASH=1,
    PLAYER_OFFHAND_SECONDARIES_TOTAL=2
};

union DvarValue// Size=0x10 (Id=4406)
{
    union // Size=0x10 (Id=0)
    {
        bool enabled;// Offset=0x0 Size=0x1
        int integer;// Offset=0x0 Size=0x4
        unsigned int unsignedInt;// Offset=0x0 Size=0x4
        float value;// Offset=0x0 Size=0x4
        float vector[4];// Offset=0x0 Size=0x10
        char * string;// Offset=0x0 Size=0x4
        unsigned char color[4];// Offset=0x0 Size=0x4
    };
};

struct DObjSkelMat// Size=0x40 (Id=4407)
{
    float axis[3][4];// Offset=0x0 Size=0x30
    float origin[4];// Offset=0x30 Size=0x10
};

enum weapStance_t
{
    WEAPSTANCE_STAND=0,
    WEAPSTANCE_DUCK=1,
    WEAPSTANCE_PRONE=2,
    WEAPSTANCE_NUM=3
};

struct sndLengthNotifyInfo// Size=0x24 (Id=4409)
{
    enum SndLengthId id[4];// Offset=0x0 Size=0x10
    void * data[4];// Offset=0x10 Size=0x10
    int count;// Offset=0x20 Size=0x4
};

enum weaponIconRatioType_t
{
    WEAPON_ICON_RATIO_1TO1=0,
    WEAPON_ICON_RATIO_2TO1=1,
    WEAPON_ICON_RATIO_4TO1=2,
    WEAPON_ICON_RATIO_COUNT=3
};

enum print_msg_dest_t
{
    CON_DEST_CONSOLE=0,
    CON_DEST_MINICON=1,
    CON_DEST_ERROR=2,
    CON_DEST_GAME_FIRST=3,
    CON_DEST_GAME1=3,
    CON_DEST_GAME2=4,
    CON_DEST_GAME3=5,
    CON_DEST_GAME4=6,
    CON_DEST_GAME_LAST=6,
    CON_DEST_COUNT=7
};

enum StanceState
{
    CL_STANCE_STAND=0,
    CL_STANCE_CROUCH=1,
    CL_STANCE_PRONE=2
};

struct clientActive_t// Size=0x6d00 (Id=4413)
{
    bool usingAds;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    int timeoutcount;// Offset=0x4 Size=0x4
    unsigned char __align1[120];// Offset=0x8 Size=0x78
    struct clSnapshot_t snap;// Offset=0x80 Size=0x3200
    bool alwaysFalse;// Offset=0x3280 Size=0x1
    unsigned char __align2[3];// Offset=0x3281 Size=0x3
    int serverTime;// Offset=0x3284 Size=0x4
    int oldServerTime;// Offset=0x3288 Size=0x4
    int oldFrameServerTime;// Offset=0x328c Size=0x4
    int serverTimeDelta;// Offset=0x3290 Size=0x4
    int oldSnapServerTime;// Offset=0x3294 Size=0x4
    int extrapolatedSnapshot;// Offset=0x3298 Size=0x4
    int newSnapshots;// Offset=0x329c Size=0x4
    int serverId;// Offset=0x32a0 Size=0x4
    char mapname[64];// Offset=0x32a4 Size=0x40
    int parseEntitiesIndex;// Offset=0x32e4 Size=0x4
    int parseClientsIndex;// Offset=0x32e8 Size=0x4
    int mouseDx[2];// Offset=0x32ec Size=0x8
    int mouseDy[2];// Offset=0x32f4 Size=0x8
    int mouseIndex;// Offset=0x32fc Size=0x4
    bool stanceHeld;// Offset=0x3300 Size=0x1
    unsigned char __align3[3];// Offset=0x3301 Size=0x3
    enum StanceState stance;// Offset=0x3304 Size=0x4
    enum StanceState stancePosition;// Offset=0x3308 Size=0x4
    int stanceTime;// Offset=0x330c Size=0x4
    int cgameUserCmdWeapon;// Offset=0x3310 Size=0x4
    int cgameUserCmdOffHandIndex;// Offset=0x3314 Size=0x4
    float cgameFOVSensitivityScale;// Offset=0x3318 Size=0x4
    float cgameMaxPitchSpeed;// Offset=0x331c Size=0x4
    float cgameMaxYawSpeed;// Offset=0x3320 Size=0x4
    float cgameKickAngles[3];// Offset=0x3324 Size=0xc
    float cgameOrigin[3];// Offset=0x3330 Size=0xc
    float cgameVelocity[3];// Offset=0x333c Size=0xc
    int cgameBobCycle;// Offset=0x3348 Size=0x4
    int cgameMovementDir;// Offset=0x334c Size=0x4
    int cgameExtraButtons;// Offset=0x3350 Size=0x4
    int cgamePredictedDataServerTime;// Offset=0x3354 Size=0x4
    float viewangles[3];// Offset=0x3358 Size=0xc
    struct usercmd_s cmds[128];// Offset=0x3364 Size=0x1400
    int cmdNumber;// Offset=0x4764 Size=0x4
    struct ClientArchiveData clientArchive[256];// Offset=0x4768 Size=0x2400
    int clientArchiveIndex;// Offset=0x6b68 Size=0x4
    int packetBackupCount;// Offset=0x6b6c Size=0x4
    int packetBackupMask;// Offset=0x6b70 Size=0x4
    int parseEntitiesCount;// Offset=0x6b74 Size=0x4
    int parseClientsCount;// Offset=0x6b78 Size=0x4
    struct outPacket_t * outPackets;// Offset=0x6b7c Size=0x4
    struct clSnapshot_t * snapshots;// Offset=0x6b80 Size=0x4
    struct entityState_s * parseEntities;// Offset=0x6b84 Size=0x4
    struct clientState_s * parseClients;// Offset=0x6b88 Size=0x4
    int corruptedTranslationFile;// Offset=0x6b8c Size=0x4
    char translationVersion[256];// Offset=0x6b90 Size=0x100
};

enum PenetrateType
{
    PENETRATE_TYPE_NONE=0,
    PENETRATE_TYPE_SMALL=1,
    PENETRATE_TYPE_MEDIUM=2,
    PENETRATE_TYPE_LARGE=3,
    PENETRATE_TYPE_COUNT=4
};

enum weapInventoryType_t
{
    WEAPINVENTORY_PRIMARY=0,
    WEAPINVENTORY_OFFHAND=1,
    WEAPINVENTORY_ITEM=2,
    WEAPINVENTORY_ALTMODE=3,
    WEAPINVENTORY_EXCLUSIVE=4,
    WEAPINVENTORY_SCAVENGER=5,
    WEAPINVENTORYCOUNT=6
};

enum activeReticleType_t
{
    VEH_ACTIVE_RETICLE_NONE=0,
    VEH_ACTIVE_RETICLE_PIP_ON_A_STICK=1,
    VEH_ACTIVE_RETICLE_BOUNCING_DIAMOND=2,
    VEH_ACTIVE_RETICLE_COUNT=3
};

enum ammoCounterClipType_t
{
    AMMO_COUNTER_CLIP_NONE=0,
    AMMO_COUNTER_CLIP_MAGAZINE=1,
    AMMO_COUNTER_CLIP_SHORTMAGAZINE=2,
    AMMO_COUNTER_CLIP_SHOTGUN=3,
    AMMO_COUNTER_CLIP_ROCKET=4,
    AMMO_COUNTER_CLIP_BELTFED=5,
    AMMO_COUNTER_CLIP_ALTWEAPON=6,
    AMMO_COUNTER_CLIP_COUNT=7
};

enum weapProjExposion_t
{
    WEAPPROJEXP_GRENADE=0,
    WEAPPROJEXP_ROCKET=1,
    WEAPPROJEXP_FLASHBANG=2,
    WEAPPROJEXP_NONE=3,
    WEAPPROJEXP_DUD=4,
    WEAPPROJEXP_SMOKE=5,
    WEAPPROJEXP_HEAVY=6,
    WEAPPROJEXP_NUM=7
};

enum guidedMissileType_t
{
    MISSILE_GUIDANCE_NONE=0,
    MISSILE_GUIDANCE_SIDEWINDER=1,
    MISSILE_GUIDANCE_HELLFIRE=2,
    MISSILE_GUIDANCE_JAVELIN=3,
    MISSILE_GUIDANCE_COUNT=4
};

struct WeaponDef// Size=0x680 (Id=4420)
{
    char * szOverlayName;// Offset=0x0 Size=0x4
    struct XModel ** gunXModel;// Offset=0x4 Size=0x4
    struct XModel * handXModel;// Offset=0x8 Size=0x4
    char ** szXAnimsRightHanded;// Offset=0xc Size=0x4
    char ** szXAnimsLeftHanded;// Offset=0x10 Size=0x4
    char * szModeName;// Offset=0x14 Size=0x4
    unsigned short * notetrackSoundMapKeys;// Offset=0x18 Size=0x4
    unsigned short * notetrackSoundMapValues;// Offset=0x1c Size=0x4
    unsigned short * notetrackRumbleMapKeys;// Offset=0x20 Size=0x4
    unsigned short * notetrackRumbleMapValues;// Offset=0x24 Size=0x4
    int playerAnimType;// Offset=0x28 Size=0x4
    enum weapType_t weapType;// Offset=0x2c Size=0x4
    enum weapClass_t weapClass;// Offset=0x30 Size=0x4
    enum PenetrateType penetrateType;// Offset=0x34 Size=0x4
    enum weapInventoryType_t inventoryType;// Offset=0x38 Size=0x4
    enum weapFireType_t fireType;// Offset=0x3c Size=0x4
    enum OffhandClass offhandClass;// Offset=0x40 Size=0x4
    enum weapStance_t stance;// Offset=0x44 Size=0x4
    struct FxEffectDef * viewFlashEffect;// Offset=0x48 Size=0x4
    struct FxEffectDef * worldFlashEffect;// Offset=0x4c Size=0x4
    struct snd_alias_list_t * pickupSound;// Offset=0x50 Size=0x4
    struct snd_alias_list_t * pickupSoundPlayer;// Offset=0x54 Size=0x4
    struct snd_alias_list_t * ammoPickupSound;// Offset=0x58 Size=0x4
    struct snd_alias_list_t * ammoPickupSoundPlayer;// Offset=0x5c Size=0x4
    struct snd_alias_list_t * projectileSound;// Offset=0x60 Size=0x4
    struct snd_alias_list_t * pullbackSound;// Offset=0x64 Size=0x4
    struct snd_alias_list_t * pullbackSoundPlayer;// Offset=0x68 Size=0x4
    struct snd_alias_list_t * fireSound;// Offset=0x6c Size=0x4
    struct snd_alias_list_t * fireSoundPlayer;// Offset=0x70 Size=0x4
    struct snd_alias_list_t * fireSoundPlayerAkimbo;// Offset=0x74 Size=0x4
    struct snd_alias_list_t * fireLoopSound;// Offset=0x78 Size=0x4
    struct snd_alias_list_t * fireLoopSoundPlayer;// Offset=0x7c Size=0x4
    struct snd_alias_list_t * fireStopSound;// Offset=0x80 Size=0x4
    struct snd_alias_list_t * fireStopSoundPlayer;// Offset=0x84 Size=0x4
    struct snd_alias_list_t * fireLastSound;// Offset=0x88 Size=0x4
    struct snd_alias_list_t * fireLastSoundPlayer;// Offset=0x8c Size=0x4
    struct snd_alias_list_t * emptyFireSound;// Offset=0x90 Size=0x4
    struct snd_alias_list_t * emptyFireSoundPlayer;// Offset=0x94 Size=0x4
    struct snd_alias_list_t * meleeSwipeSound;// Offset=0x98 Size=0x4
    struct snd_alias_list_t * meleeSwipeSoundPlayer;// Offset=0x9c Size=0x4
    struct snd_alias_list_t * meleeHitSound;// Offset=0xa0 Size=0x4
    struct snd_alias_list_t * meleeMissSound;// Offset=0xa4 Size=0x4
    struct snd_alias_list_t * rechamberSound;// Offset=0xa8 Size=0x4
    struct snd_alias_list_t * rechamberSoundPlayer;// Offset=0xac Size=0x4
    struct snd_alias_list_t * reloadSound;// Offset=0xb0 Size=0x4
    struct snd_alias_list_t * reloadSoundPlayer;// Offset=0xb4 Size=0x4
    struct snd_alias_list_t * reloadEmptySound;// Offset=0xb8 Size=0x4
    struct snd_alias_list_t * reloadEmptySoundPlayer;// Offset=0xbc Size=0x4
    struct snd_alias_list_t * reloadStartSound;// Offset=0xc0 Size=0x4
    struct snd_alias_list_t * reloadStartSoundPlayer;// Offset=0xc4 Size=0x4
    struct snd_alias_list_t * reloadEndSound;// Offset=0xc8 Size=0x4
    struct snd_alias_list_t * reloadEndSoundPlayer;// Offset=0xcc Size=0x4
    struct snd_alias_list_t * detonateSound;// Offset=0xd0 Size=0x4
    struct snd_alias_list_t * detonateSoundPlayer;// Offset=0xd4 Size=0x4
    struct snd_alias_list_t * nightVisionWearSound;// Offset=0xd8 Size=0x4
    struct snd_alias_list_t * nightVisionWearSoundPlayer;// Offset=0xdc Size=0x4
    struct snd_alias_list_t * nightVisionRemoveSound;// Offset=0xe0 Size=0x4
    struct snd_alias_list_t * nightVisionRemoveSoundPlayer;// Offset=0xe4 Size=0x4
    struct snd_alias_list_t * altSwitchSound;// Offset=0xe8 Size=0x4
    struct snd_alias_list_t * altSwitchSoundPlayer;// Offset=0xec Size=0x4
    struct snd_alias_list_t * raiseSound;// Offset=0xf0 Size=0x4
    struct snd_alias_list_t * raiseSoundPlayer;// Offset=0xf4 Size=0x4
    struct snd_alias_list_t * firstRaiseSound;// Offset=0xf8 Size=0x4
    struct snd_alias_list_t * firstRaiseSoundPlayer;// Offset=0xfc Size=0x4
    struct snd_alias_list_t * putawaySound;// Offset=0x100 Size=0x4
    struct snd_alias_list_t * putawaySoundPlayer;// Offset=0x104 Size=0x4
    struct snd_alias_list_t * scanSound;// Offset=0x108 Size=0x4
    struct snd_alias_list_t ** bounceSound;// Offset=0x10c Size=0x4
    struct FxEffectDef * viewShellEjectEffect;// Offset=0x110 Size=0x4
    struct FxEffectDef * worldShellEjectEffect;// Offset=0x114 Size=0x4
    struct FxEffectDef * viewLastShotEjectEffect;// Offset=0x118 Size=0x4
    struct FxEffectDef * worldLastShotEjectEffect;// Offset=0x11c Size=0x4
    struct Material * reticleCenter;// Offset=0x120 Size=0x4
    struct Material * reticleSide;// Offset=0x124 Size=0x4
    int iReticleCenterSize;// Offset=0x128 Size=0x4
    int iReticleSideSize;// Offset=0x12c Size=0x4
    int iReticleMinOfs;// Offset=0x130 Size=0x4
    enum activeReticleType_t activeReticleType;// Offset=0x134 Size=0x4
    float vStandMove[3];// Offset=0x138 Size=0xc
    float vStandRot[3];// Offset=0x144 Size=0xc
    float strafeMove[3];// Offset=0x150 Size=0xc
    float strafeRot[3];// Offset=0x15c Size=0xc
    float vDuckedOfs[3];// Offset=0x168 Size=0xc
    float vDuckedMove[3];// Offset=0x174 Size=0xc
    float vDuckedRot[3];// Offset=0x180 Size=0xc
    float vProneOfs[3];// Offset=0x18c Size=0xc
    float vProneMove[3];// Offset=0x198 Size=0xc
    float vProneRot[3];// Offset=0x1a4 Size=0xc
    float fPosMoveRate;// Offset=0x1b0 Size=0x4
    float fPosProneMoveRate;// Offset=0x1b4 Size=0x4
    float fStandMoveMinSpeed;// Offset=0x1b8 Size=0x4
    float fDuckedMoveMinSpeed;// Offset=0x1bc Size=0x4
    float fProneMoveMinSpeed;// Offset=0x1c0 Size=0x4
    float fPosRotRate;// Offset=0x1c4 Size=0x4
    float fPosProneRotRate;// Offset=0x1c8 Size=0x4
    float fStandRotMinSpeed;// Offset=0x1cc Size=0x4
    float fDuckedRotMinSpeed;// Offset=0x1d0 Size=0x4
    float fProneRotMinSpeed;// Offset=0x1d4 Size=0x4
    struct XModel ** worldModel;// Offset=0x1d8 Size=0x4
    struct XModel * worldClipModel;// Offset=0x1dc Size=0x4
    struct XModel * rocketModel;// Offset=0x1e0 Size=0x4
    struct XModel * knifeModel;// Offset=0x1e4 Size=0x4
    struct XModel * worldKnifeModel;// Offset=0x1e8 Size=0x4
    struct Material * hudIcon;// Offset=0x1ec Size=0x4
    enum weaponIconRatioType_t hudIconRatio;// Offset=0x1f0 Size=0x4
    struct Material * pickupIcon;// Offset=0x1f4 Size=0x4
    enum weaponIconRatioType_t pickupIconRatio;// Offset=0x1f8 Size=0x4
    struct Material * ammoCounterIcon;// Offset=0x1fc Size=0x4
    enum weaponIconRatioType_t ammoCounterIconRatio;// Offset=0x200 Size=0x4
    enum ammoCounterClipType_t ammoCounterClip;// Offset=0x204 Size=0x4
    int iStartAmmo;// Offset=0x208 Size=0x4
    char * szAmmoName;// Offset=0x20c Size=0x4
    int iAmmoIndex;// Offset=0x210 Size=0x4
    char * szClipName;// Offset=0x214 Size=0x4
    int iClipIndex;// Offset=0x218 Size=0x4
    int iMaxAmmo;// Offset=0x21c Size=0x4
    int shotCount;// Offset=0x220 Size=0x4
    char * szSharedAmmoCapName;// Offset=0x224 Size=0x4
    int iSharedAmmoCapIndex;// Offset=0x228 Size=0x4
    int iSharedAmmoCap;// Offset=0x22c Size=0x4
    int damage;// Offset=0x230 Size=0x4
    int playerDamage;// Offset=0x234 Size=0x4
    int iMeleeDamage;// Offset=0x238 Size=0x4
    int iDamageType;// Offset=0x23c Size=0x4
    int iFireDelay;// Offset=0x240 Size=0x4
    int iMeleeDelay;// Offset=0x244 Size=0x4
    int meleeChargeDelay;// Offset=0x248 Size=0x4
    int iDetonateDelay;// Offset=0x24c Size=0x4
    int iRechamberTime;// Offset=0x250 Size=0x4
    int rechamberTimeOneHanded;// Offset=0x254 Size=0x4
    int iRechamberBoltTime;// Offset=0x258 Size=0x4
    int iHoldFireTime;// Offset=0x25c Size=0x4
    int iDetonateTime;// Offset=0x260 Size=0x4
    int iMeleeTime;// Offset=0x264 Size=0x4
    int meleeChargeTime;// Offset=0x268 Size=0x4
    int iReloadTime;// Offset=0x26c Size=0x4
    int reloadShowRocketTime;// Offset=0x270 Size=0x4
    int iReloadEmptyTime;// Offset=0x274 Size=0x4
    int iReloadAddTime;// Offset=0x278 Size=0x4
    int iReloadStartTime;// Offset=0x27c Size=0x4
    int iReloadStartAddTime;// Offset=0x280 Size=0x4
    int iReloadEndTime;// Offset=0x284 Size=0x4
    int iDropTime;// Offset=0x288 Size=0x4
    int iRaiseTime;// Offset=0x28c Size=0x4
    int iAltDropTime;// Offset=0x290 Size=0x4
    int quickDropTime;// Offset=0x294 Size=0x4
    int quickRaiseTime;// Offset=0x298 Size=0x4
    int iBreachRaiseTime;// Offset=0x29c Size=0x4
    int iEmptyRaiseTime;// Offset=0x2a0 Size=0x4
    int iEmptyDropTime;// Offset=0x2a4 Size=0x4
    int sprintInTime;// Offset=0x2a8 Size=0x4
    int sprintLoopTime;// Offset=0x2ac Size=0x4
    int sprintOutTime;// Offset=0x2b0 Size=0x4
    int stunnedTimeBegin;// Offset=0x2b4 Size=0x4
    int stunnedTimeLoop;// Offset=0x2b8 Size=0x4
    int stunnedTimeEnd;// Offset=0x2bc Size=0x4
    int nightVisionWearTime;// Offset=0x2c0 Size=0x4
    int nightVisionWearTimeFadeOutEnd;// Offset=0x2c4 Size=0x4
    int nightVisionWearTimePowerUp;// Offset=0x2c8 Size=0x4
    int nightVisionRemoveTime;// Offset=0x2cc Size=0x4
    int nightVisionRemoveTimePowerDown;// Offset=0x2d0 Size=0x4
    int nightVisionRemoveTimeFadeInStart;// Offset=0x2d4 Size=0x4
    int fuseTime;// Offset=0x2d8 Size=0x4
    int aiFuseTime;// Offset=0x2dc Size=0x4
    float autoAimRange;// Offset=0x2e0 Size=0x4
    float aimAssistRange;// Offset=0x2e4 Size=0x4
    float aimAssistRangeAds;// Offset=0x2e8 Size=0x4
    float aimPadding;// Offset=0x2ec Size=0x4
    float enemyCrosshairRange;// Offset=0x2f0 Size=0x4
    float moveSpeedScale;// Offset=0x2f4 Size=0x4
    float adsMoveSpeedScale;// Offset=0x2f8 Size=0x4
    float sprintDurationScale;// Offset=0x2fc Size=0x4
    float fAdsZoomInFrac;// Offset=0x300 Size=0x4
    float fAdsZoomOutFrac;// Offset=0x304 Size=0x4
    struct Material * overlayMaterial;// Offset=0x308 Size=0x4
    struct Material * overlayMaterialLowRes;// Offset=0x30c Size=0x4
    struct Material * overlayMaterialEMP;// Offset=0x310 Size=0x4
    struct Material * overlayMaterialEMPLowRes;// Offset=0x314 Size=0x4
    enum weapOverlayReticle_t overlayReticle;// Offset=0x318 Size=0x4
    enum WeapOverlayInteface_t overlayInterface;// Offset=0x31c Size=0x4
    float overlayWidth;// Offset=0x320 Size=0x4
    float overlayHeight;// Offset=0x324 Size=0x4
    float overlayWidthSplitscreen;// Offset=0x328 Size=0x4
    float overlayHeightSplitscreen;// Offset=0x32c Size=0x4
    float fAdsBobFactor;// Offset=0x330 Size=0x4
    float fAdsViewBobMult;// Offset=0x334 Size=0x4
    float fHipSpreadStandMin;// Offset=0x338 Size=0x4
    float fHipSpreadDuckedMin;// Offset=0x33c Size=0x4
    float fHipSpreadProneMin;// Offset=0x340 Size=0x4
    float hipSpreadStandMax;// Offset=0x344 Size=0x4
    float hipSpreadDuckedMax;// Offset=0x348 Size=0x4
    float hipSpreadProneMax;// Offset=0x34c Size=0x4
    float fHipSpreadDecayRate;// Offset=0x350 Size=0x4
    float fHipSpreadFireAdd;// Offset=0x354 Size=0x4
    float fHipSpreadTurnAdd;// Offset=0x358 Size=0x4
    float fHipSpreadMoveAdd;// Offset=0x35c Size=0x4
    float fHipSpreadDuckedDecay;// Offset=0x360 Size=0x4
    float fHipSpreadProneDecay;// Offset=0x364 Size=0x4
    float fHipReticleSidePos;// Offset=0x368 Size=0x4
    float fAdsIdleAmount;// Offset=0x36c Size=0x4
    float fHipIdleAmount;// Offset=0x370 Size=0x4
    float adsIdleSpeed;// Offset=0x374 Size=0x4
    float hipIdleSpeed;// Offset=0x378 Size=0x4
    float fIdleCrouchFactor;// Offset=0x37c Size=0x4
    float fIdleProneFactor;// Offset=0x380 Size=0x4
    float fGunMaxPitch;// Offset=0x384 Size=0x4
    float fGunMaxYaw;// Offset=0x388 Size=0x4
    float swayMaxAngle;// Offset=0x38c Size=0x4
    float swayLerpSpeed;// Offset=0x390 Size=0x4
    float swayPitchScale;// Offset=0x394 Size=0x4
    float swayYawScale;// Offset=0x398 Size=0x4
    float swayHorizScale;// Offset=0x39c Size=0x4
    float swayVertScale;// Offset=0x3a0 Size=0x4
    float swayShellShockScale;// Offset=0x3a4 Size=0x4
    float adsSwayMaxAngle;// Offset=0x3a8 Size=0x4
    float adsSwayLerpSpeed;// Offset=0x3ac Size=0x4
    float adsSwayPitchScale;// Offset=0x3b0 Size=0x4
    float adsSwayYawScale;// Offset=0x3b4 Size=0x4
    float adsSwayHorizScale;// Offset=0x3b8 Size=0x4
    float adsSwayVertScale;// Offset=0x3bc Size=0x4
    float adsViewErrorMin;// Offset=0x3c0 Size=0x4
    float adsViewErrorMax;// Offset=0x3c4 Size=0x4
    struct PhysCollmap * physCollmap;// Offset=0x3c8 Size=0x4
    float dualWieldViewModelOffset;// Offset=0x3cc Size=0x4
    enum weaponIconRatioType_t killIconRatio;// Offset=0x3d0 Size=0x4
    int iReloadAmmoAdd;// Offset=0x3d4 Size=0x4
    int iReloadStartAdd;// Offset=0x3d8 Size=0x4
    int ammoDropStockMin;// Offset=0x3dc Size=0x4
    int ammoDropClipPercentMin;// Offset=0x3e0 Size=0x4
    int ammoDropClipPercentMax;// Offset=0x3e4 Size=0x4
    int iExplosionRadius;// Offset=0x3e8 Size=0x4
    int iExplosionRadiusMin;// Offset=0x3ec Size=0x4
    int iExplosionInnerDamage;// Offset=0x3f0 Size=0x4
    int iExplosionOuterDamage;// Offset=0x3f4 Size=0x4
    float damageConeAngle;// Offset=0x3f8 Size=0x4
    float bulletExplDmgMult;// Offset=0x3fc Size=0x4
    float bulletExplRadiusMult;// Offset=0x400 Size=0x4
    int iProjectileSpeed;// Offset=0x404 Size=0x4
    int iProjectileSpeedUp;// Offset=0x408 Size=0x4
    int iProjectileSpeedForward;// Offset=0x40c Size=0x4
    int iProjectileActivateDist;// Offset=0x410 Size=0x4
    float projLifetime;// Offset=0x414 Size=0x4
    float timeToAccelerate;// Offset=0x418 Size=0x4
    float projectileCurvature;// Offset=0x41c Size=0x4
    struct XModel * projectileModel;// Offset=0x420 Size=0x4
    enum weapProjExposion_t projExplosion;// Offset=0x424 Size=0x4
    struct FxEffectDef * projExplosionEffect;// Offset=0x428 Size=0x4
    struct FxEffectDef * projDudEffect;// Offset=0x42c Size=0x4
    struct snd_alias_list_t * projExplosionSound;// Offset=0x430 Size=0x4
    struct snd_alias_list_t * projDudSound;// Offset=0x434 Size=0x4
    enum WeapStickinessType stickiness;// Offset=0x438 Size=0x4
    float lowAmmoWarningThreshold;// Offset=0x43c Size=0x4
    float ricochetChance;// Offset=0x440 Size=0x4
    float * parallelBounce;// Offset=0x444 Size=0x4
    float * perpendicularBounce;// Offset=0x448 Size=0x4
    struct FxEffectDef * projTrailEffect;// Offset=0x44c Size=0x4
    struct FxEffectDef * projBeaconEffect;// Offset=0x450 Size=0x4
    float vProjectileColor[3];// Offset=0x454 Size=0xc
    enum guidedMissileType_t guidedMissileType;// Offset=0x460 Size=0x4
    float maxSteeringAccel;// Offset=0x464 Size=0x4
    int projIgnitionDelay;// Offset=0x468 Size=0x4
    struct FxEffectDef * projIgnitionEffect;// Offset=0x46c Size=0x4
    struct snd_alias_list_t * projIgnitionSound;// Offset=0x470 Size=0x4
    float fAdsAimPitch;// Offset=0x474 Size=0x4
    float fAdsCrosshairInFrac;// Offset=0x478 Size=0x4
    float fAdsCrosshairOutFrac;// Offset=0x47c Size=0x4
    int adsGunKickReducedKickBullets;// Offset=0x480 Size=0x4
    float adsGunKickReducedKickPercent;// Offset=0x484 Size=0x4
    float fAdsGunKickPitchMin;// Offset=0x488 Size=0x4
    float fAdsGunKickPitchMax;// Offset=0x48c Size=0x4
    float fAdsGunKickYawMin;// Offset=0x490 Size=0x4
    float fAdsGunKickYawMax;// Offset=0x494 Size=0x4
    float fAdsGunKickAccel;// Offset=0x498 Size=0x4
    float fAdsGunKickSpeedMax;// Offset=0x49c Size=0x4
    float fAdsGunKickSpeedDecay;// Offset=0x4a0 Size=0x4
    float fAdsGunKickStaticDecay;// Offset=0x4a4 Size=0x4
    float fAdsViewKickPitchMin;// Offset=0x4a8 Size=0x4
    float fAdsViewKickPitchMax;// Offset=0x4ac Size=0x4
    float fAdsViewKickYawMin;// Offset=0x4b0 Size=0x4
    float fAdsViewKickYawMax;// Offset=0x4b4 Size=0x4
    float fAdsViewScatterMin;// Offset=0x4b8 Size=0x4
    float fAdsViewScatterMax;// Offset=0x4bc Size=0x4
    float fAdsSpread;// Offset=0x4c0 Size=0x4
    int hipGunKickReducedKickBullets;// Offset=0x4c4 Size=0x4
    float hipGunKickReducedKickPercent;// Offset=0x4c8 Size=0x4
    float fHipGunKickPitchMin;// Offset=0x4cc Size=0x4
    float fHipGunKickPitchMax;// Offset=0x4d0 Size=0x4
    float fHipGunKickYawMin;// Offset=0x4d4 Size=0x4
    float fHipGunKickYawMax;// Offset=0x4d8 Size=0x4
    float fHipGunKickAccel;// Offset=0x4dc Size=0x4
    float fHipGunKickSpeedMax;// Offset=0x4e0 Size=0x4
    float fHipGunKickSpeedDecay;// Offset=0x4e4 Size=0x4
    float fHipGunKickStaticDecay;// Offset=0x4e8 Size=0x4
    float fHipViewKickPitchMin;// Offset=0x4ec Size=0x4
    float fHipViewKickPitchMax;// Offset=0x4f0 Size=0x4
    float fHipViewKickYawMin;// Offset=0x4f4 Size=0x4
    float fHipViewKickYawMax;// Offset=0x4f8 Size=0x4
    float fHipViewScatterMin;// Offset=0x4fc Size=0x4
    float fHipViewScatterMax;// Offset=0x500 Size=0x4
    float fightDist;// Offset=0x504 Size=0x4
    float maxDist;// Offset=0x508 Size=0x4
    char * accuracyGraphName[2];// Offset=0x50c Size=0x8
    float * originalAccuracyGraphKnots[2][2];// Offset=0x514 Size=0x8
    unsigned short originalAccuracyGraphKnotCount[2];// Offset=0x51c Size=0x4
    int iPositionReloadTransTime;// Offset=0x520 Size=0x4
    float leftArc;// Offset=0x524 Size=0x4
    float rightArc;// Offset=0x528 Size=0x4
    float topArc;// Offset=0x52c Size=0x4
    float bottomArc;// Offset=0x530 Size=0x4
    float accuracy;// Offset=0x534 Size=0x4
    float aiSpread;// Offset=0x538 Size=0x4
    float playerSpread;// Offset=0x53c Size=0x4
    float minTurnSpeed[2];// Offset=0x540 Size=0x8
    float maxTurnSpeed[2];// Offset=0x548 Size=0x8
    float pitchConvergenceTime;// Offset=0x550 Size=0x4
    float yawConvergenceTime;// Offset=0x554 Size=0x4
    float suppressTime;// Offset=0x558 Size=0x4
    float maxRange;// Offset=0x55c Size=0x4
    float fAnimHorRotateInc;// Offset=0x560 Size=0x4
    float fPlayerPositionDist;// Offset=0x564 Size=0x4
    char * szUseHintString;// Offset=0x568 Size=0x4
    char * dropHintString;// Offset=0x56c Size=0x4
    int iUseHintStringIndex;// Offset=0x570 Size=0x4
    int dropHintStringIndex;// Offset=0x574 Size=0x4
    float horizViewJitter;// Offset=0x578 Size=0x4
    float vertViewJitter;// Offset=0x57c Size=0x4
    float scanSpeed;// Offset=0x580 Size=0x4
    float scanAccel;// Offset=0x584 Size=0x4
    int scanPauseTime;// Offset=0x588 Size=0x4
    char * szScript;// Offset=0x58c Size=0x4
    float fOOPosAnimLength[2];// Offset=0x590 Size=0x8
    int minDamage;// Offset=0x598 Size=0x4
    int minPlayerDamage;// Offset=0x59c Size=0x4
    float fMaxDamageRange;// Offset=0x5a0 Size=0x4
    float fMinDamageRange;// Offset=0x5a4 Size=0x4
    float destabilizationRateTime;// Offset=0x5a8 Size=0x4
    float destabilizationCurvatureMax;// Offset=0x5ac Size=0x4
    int destabilizeDistance;// Offset=0x5b0 Size=0x4
    float * locationDamageMultipliers;// Offset=0x5b4 Size=0x4
    char * fireRumble;// Offset=0x5b8 Size=0x4
    char * meleeImpactRumble;// Offset=0x5bc Size=0x4
    struct TracerDef * tracerType;// Offset=0x5c0 Size=0x4
    float turretScopeZoomRate;// Offset=0x5c4 Size=0x4
    float turretScopeZoomMin;// Offset=0x5c8 Size=0x4
    float turretScopeZoomMax;// Offset=0x5cc Size=0x4
    float turretOverheatUpRate;// Offset=0x5d0 Size=0x4
    float turretOverheatDownRate;// Offset=0x5d4 Size=0x4
    float turretOverheatPenalty;// Offset=0x5d8 Size=0x4
    struct snd_alias_list_t * turretOverheatSound;// Offset=0x5dc Size=0x4
    struct FxEffectDef * turretOverheatEffect;// Offset=0x5e0 Size=0x4
    char * turretBarrelSpinRumble;// Offset=0x5e4 Size=0x4
    float turretBarrelSpinSpeed;// Offset=0x5e8 Size=0x4
    float turretBarrelSpinUpTime;// Offset=0x5ec Size=0x4
    float turretBarrelSpinDownTime;// Offset=0x5f0 Size=0x4
    struct snd_alias_list_t * turretBarrelSpinMaxSnd;// Offset=0x5f4 Size=0x4
    struct snd_alias_list_t * turretBarrelSpinUpSnd[4];// Offset=0x5f8 Size=0x10
    struct snd_alias_list_t * turretBarrelSpinDownSnd[4];// Offset=0x608 Size=0x10
    struct snd_alias_list_t * missileConeSoundAlias;// Offset=0x618 Size=0x4
    struct snd_alias_list_t * missileConeSoundAliasAtBase;// Offset=0x61c Size=0x4
    float missileConeSoundRadiusAtTop;// Offset=0x620 Size=0x4
    float missileConeSoundRadiusAtBase;// Offset=0x624 Size=0x4
    float missileConeSoundHeight;// Offset=0x628 Size=0x4
    float missileConeSoundOriginOffset;// Offset=0x62c Size=0x4
    float missileConeSoundVolumescaleAtCore;// Offset=0x630 Size=0x4
    float missileConeSoundVolumescaleAtEdge;// Offset=0x634 Size=0x4
    float missileConeSoundVolumescaleCoreSize;// Offset=0x638 Size=0x4
    float missileConeSoundPitchAtTop;// Offset=0x63c Size=0x4
    float missileConeSoundPitchAtBottom;// Offset=0x640 Size=0x4
    float missileConeSoundPitchTopSize;// Offset=0x644 Size=0x4
    float missileConeSoundPitchBottomSize;// Offset=0x648 Size=0x4
    float missileConeSoundCrossfadeTopSize;// Offset=0x64c Size=0x4
    float missileConeSoundCrossfadeBottomSize;// Offset=0x650 Size=0x4
    bool sharedAmmo;// Offset=0x654 Size=0x1
    bool lockonSupported;// Offset=0x655 Size=0x1
    bool requireLockonToFire;// Offset=0x656 Size=0x1
    bool bigExplosion;// Offset=0x657 Size=0x1
    bool noAdsWhenMagEmpty;// Offset=0x658 Size=0x1
    bool avoidDropCleanup;// Offset=0x659 Size=0x1
    bool inheritsPerks;// Offset=0x65a Size=0x1
    bool crosshairColorChange;// Offset=0x65b Size=0x1
    bool bRifleBullet;// Offset=0x65c Size=0x1
    bool armorPiercing;// Offset=0x65d Size=0x1
    bool bBoltAction;// Offset=0x65e Size=0x1
    bool aimDownSight;// Offset=0x65f Size=0x1
    bool bRechamberWhileAds;// Offset=0x660 Size=0x1
    bool bBulletExplosiveDamage;// Offset=0x661 Size=0x1
    bool bCookOffHold;// Offset=0x662 Size=0x1
    bool bClipOnly;// Offset=0x663 Size=0x1
    bool adsFireOnly;// Offset=0x664 Size=0x1
    bool cancelAutoHolsterWhenEmpty;// Offset=0x665 Size=0x1
    bool suppressAmmoReserveDisplay;// Offset=0x666 Size=0x1
    bool laserSightDuringNightvision;// Offset=0x667 Size=0x1
    bool markableViewmodel;// Offset=0x668 Size=0x1
    bool noDualWield;// Offset=0x669 Size=0x1
    bool flipKillIcon;// Offset=0x66a Size=0x1
    bool bNoPartialReload;// Offset=0x66b Size=0x1
    bool bSegmentedReload;// Offset=0x66c Size=0x1
    bool blocksProne;// Offset=0x66d Size=0x1
    bool silenced;// Offset=0x66e Size=0x1
    bool isRollingGrenade;// Offset=0x66f Size=0x1
    bool projExplosionEffectForceNormalUp;// Offset=0x670 Size=0x1
    bool bProjImpactExplode;// Offset=0x671 Size=0x1
    bool stickToPlayers;// Offset=0x672 Size=0x1
    bool hasDetonator;// Offset=0x673 Size=0x1
    bool timedDetonation;// Offset=0x674 Size=0x1
    bool rotate;// Offset=0x675 Size=0x1
    bool holdButtonToThrow;// Offset=0x676 Size=0x1
    bool freezeMovementWhenFiring;// Offset=0x677 Size=0x1
    bool thermalScope;// Offset=0x678 Size=0x1
    bool altModeSameWeapon;// Offset=0x679 Size=0x1
    bool turretBarrelSpinEnabled;// Offset=0x67a Size=0x1
    bool missileConeSoundEnabled;// Offset=0x67b Size=0x1
    bool missileConeSoundPitchshiftEnabled;// Offset=0x67c Size=0x1
    bool missileConeSoundCrossfadeEnabled;// Offset=0x67d Size=0x1
};

struct snd_alias_t// Size=0x64 (Id=4421)
{
    char * aliasName;// Offset=0x0 Size=0x4
    char * subtitle;// Offset=0x4 Size=0x4
    char * secondaryAliasName;// Offset=0x8 Size=0x4
    char * chainAliasName;// Offset=0xc Size=0x4
    char * mixerGroup;// Offset=0x10 Size=0x4
    struct SoundFile * soundFile;// Offset=0x14 Size=0x4
    int sequence;// Offset=0x18 Size=0x4
    float volMin;// Offset=0x1c Size=0x4
    float volMax;// Offset=0x20 Size=0x4
    float pitchMin;// Offset=0x24 Size=0x4
    float pitchMax;// Offset=0x28 Size=0x4
    float distMin;// Offset=0x2c Size=0x4
    float distMax;// Offset=0x30 Size=0x4
    float velocityMin;// Offset=0x34 Size=0x4
    int flags;// Offset=0x38 Size=0x4
    union // Size=0x4 (Id=0)
    {
        float slavePercentage;// Offset=0x3c Size=0x4
        float masterPercentage;// Offset=0x3c Size=0x4
    };
    float probability;// Offset=0x40 Size=0x4
    float lfePercentage;// Offset=0x44 Size=0x4
    float centerPercentage;// Offset=0x48 Size=0x4
    int startDelay;// Offset=0x4c Size=0x4
    struct SndCurve * volumeFalloffCurve;// Offset=0x50 Size=0x4
    float envelopMin;// Offset=0x54 Size=0x4
    float envelopMax;// Offset=0x58 Size=0x4
    float envelopPercentage;// Offset=0x5c Size=0x4
    struct SpeakerMap * speakerMap;// Offset=0x60 Size=0x4
};

struct PhysPreset// Size=0x2c (Id=4422)
{
    char * name;// Offset=0x0 Size=0x4
    int type;// Offset=0x4 Size=0x4
    float mass;// Offset=0x8 Size=0x4
    float bounce;// Offset=0xc Size=0x4
    float friction;// Offset=0x10 Size=0x4
    float bulletForceScale;// Offset=0x14 Size=0x4
    float explosiveForceScale;// Offset=0x18 Size=0x4
    char * sndAliasPrefix;// Offset=0x1c Size=0x4
    float piecesSpreadFraction;// Offset=0x20 Size=0x4
    float piecesUpwardVelocity;// Offset=0x24 Size=0x4
    bool tempDefaultToCylinder;// Offset=0x28 Size=0x1
    bool perSurfaceSndAlias;// Offset=0x29 Size=0x1
};

struct XModelSurfs// Size=0x20 (Id=4423)
{
    char * name;// Offset=0x0 Size=0x4
    struct XSurface * surfs;// Offset=0x4 Size=0x4
    unsigned short numsurfs;// Offset=0x8 Size=0x2
    unsigned char __align0[2];// Offset=0xa Size=0x2
    int partBits[5];// Offset=0xc Size=0x14
};

struct entityState_s// Size=0x100 (Id=4424)
{
    union // Size=0xdc (Id=0)
    {
        int number;// Offset=0x0 Size=0x4
        int eType;// Offset=0x4 Size=0x4
        struct LerpEntityState lerp;// Offset=0x8 Size=0x70
        int time2;// Offset=0x78 Size=0x4
        int otherEntityNum;// Offset=0x7c Size=0x4
        int attackerEntityNum;// Offset=0x80 Size=0x4
        int groundEntityNum;// Offset=0x84 Size=0x4
        int loopSound;// Offset=0x88 Size=0x4
        int surfType;// Offset=0x8c Size=0x4
        union <unnamed-type-index>// Size=0x4 (Id=50103)
        {
            int brushModel;// Offset=0x0 Size=0x4
            int triggerModel;// Offset=0x0 Size=0x4
            int item;// Offset=0x0 Size=0x4
            int xmodel;// Offset=0x0 Size=0x4
            int primaryLight;// Offset=0x0 Size=0x4
        };
        unsigned char __align0[140];// Offset=0x4 Size=0x8c
        union entityState_s::<unnamed-type-index> index;// Offset=0x90 Size=0x4
        int clientNum;// Offset=0x94 Size=0x4
        int iHeadIcon;// Offset=0x98 Size=0x4
        int iHeadIconTeam;// Offset=0x9c Size=0x4
        int solid;// Offset=0xa0 Size=0x4
        unsigned int eventParm;// Offset=0xa4 Size=0x4
        int eventSequence;// Offset=0xa8 Size=0x4
        int events[4];// Offset=0xac Size=0x10
        unsigned int eventParms[4];// Offset=0xbc Size=0x10
        struct <unnamed-type-wes>// Size=0x4 (Id=50118)
        {
            unsigned short weapon;// Offset=0x0 Size=0x2
            unsigned short primaryWeapon;// Offset=0x2 Size=0x2
        };
        unsigned char __align1[200];// Offset=0x4 Size=0xc8
        struct entityState_s::<unnamed-type-wes> wes;// Offset=0xcc Size=0x4
        int legsAnim;// Offset=0xd0 Size=0x4
        int torsoAnim;// Offset=0xd4 Size=0x4
        union <unnamed-type-un1>// Size=0x4 (Id=50124)
        {
            int eventParm2;// Offset=0x0 Size=0x4
            int hintString;// Offset=0x0 Size=0x4
            int fxId;// Offset=0x0 Size=0x4
            int helicopterStage;// Offset=0x0 Size=0x4
        };
        unsigned char __align2[212];// Offset=0x4 Size=0xd4
        union entityState_s::<unnamed-type-un1> un1;// Offset=0xd8 Size=0x4
        union <unnamed-type-un2>// Size=0x4 (Id=50130)
        {
            int hintType;// Offset=0x0 Size=0x4
            int vehicleXModel;// Offset=0x0 Size=0x4
            int actorFlags;// Offset=0x0 Size=0x4
            unsigned char weaponModel;// Offset=0x0 Size=0x1
        };
        unsigned char __align3[216];// Offset=0x4 Size=0xd8
    };
    union entityState_s::<unnamed-type-un2> un2;// Offset=0xdc Size=0x4
    struct clientLinkInfo_t clientLinkInfo;// Offset=0xe0 Size=0x4
    unsigned int partBits[5];// Offset=0xe4 Size=0x14
    int clientMask[1];// Offset=0xf8 Size=0x4
    unsigned int pad[1];// Offset=0xfc Size=0x4
};

struct GlobalAmmo// Size=0x8 (Id=4425)
{
    int ammoType;// Offset=0x0 Size=0x4
    int ammoCount;// Offset=0x4 Size=0x4
};

struct WeaponCompleteDef// Size=0x74 (Id=4426)
{
    char * szInternalName;// Offset=0x0 Size=0x4
    struct WeaponDef * weapDef;// Offset=0x4 Size=0x4
    char * szDisplayName;// Offset=0x8 Size=0x4
    unsigned short * hideTags;// Offset=0xc Size=0x4
    char ** szXAnims;// Offset=0x10 Size=0x4
    float fAdsZoomFov;// Offset=0x14 Size=0x4
    int iAdsTransInTime;// Offset=0x18 Size=0x4
    int iAdsTransOutTime;// Offset=0x1c Size=0x4
    int iClipSize;// Offset=0x20 Size=0x4
    enum ImpactType impactType;// Offset=0x24 Size=0x4
    int iFireTime;// Offset=0x28 Size=0x4
    enum weaponIconRatioType_t dpadIconRatio;// Offset=0x2c Size=0x4
    float penetrateMultiplier;// Offset=0x30 Size=0x4
    float fAdsViewKickCenterSpeed;// Offset=0x34 Size=0x4
    float fHipViewKickCenterSpeed;// Offset=0x38 Size=0x4
    char * szAltWeaponName;// Offset=0x3c Size=0x4
    unsigned int altWeaponIndex;// Offset=0x40 Size=0x4
    int iAltRaiseTime;// Offset=0x44 Size=0x4
    struct Material * killIcon;// Offset=0x48 Size=0x4
    struct Material * dpadIcon;// Offset=0x4c Size=0x4
    int fireAnimLength;// Offset=0x50 Size=0x4
    int iFirstRaiseTime;// Offset=0x54 Size=0x4
    int ammoDropStockMax;// Offset=0x58 Size=0x4
    float adsDofStart;// Offset=0x5c Size=0x4
    float adsDofEnd;// Offset=0x60 Size=0x4
    unsigned short accuracyGraphKnotCount[2];// Offset=0x64 Size=0x4
    float * accuracyGraphKnots[2][2];// Offset=0x68 Size=0x8
    bool motionTracker;// Offset=0x70 Size=0x1
    bool enhanced;// Offset=0x71 Size=0x1
    bool dpadIconShowsAmmo;// Offset=0x72 Size=0x1
};

struct snd_enveffect// Size=0x20 (Id=4427)
{
    int roomtype;// Offset=0x0 Size=0x4
    float drylevel;// Offset=0x4 Size=0x4
    float drygoal;// Offset=0x8 Size=0x4
    float dryrate;// Offset=0xc Size=0x4
    float wetlevel;// Offset=0x10 Size=0x4
    float wetgoal;// Offset=0x14 Size=0x4
    float wetrate;// Offset=0x18 Size=0x4
    bool active;// Offset=0x1c Size=0x1
};

struct netProfileInfo_t// Size=0x5e0 (Id=4428)
{
    struct netProfileStream_t send;// Offset=0x0 Size=0x2f0
    struct netProfileStream_t recieve;// Offset=0x2f0 Size=0x2f0
};

struct orientation_t// Size=0x30 (Id=4429)
{
    float origin[3];// Offset=0x0 Size=0xc
    float axis[3][3];// Offset=0xc Size=0x24
};

struct AddonMapEnts// Size=0x24 (Id=4430)
{
    char * name;// Offset=0x0 Size=0x4
    char * entityString;// Offset=0x4 Size=0x4
    int numEntityChars;// Offset=0x8 Size=0x4
    struct MapTriggers trigger;// Offset=0xc Size=0x18
};

struct MantleState// Size=0x10 (Id=4431)
{
    float yaw;// Offset=0x0 Size=0x4
    int timer;// Offset=0x4 Size=0x4
    int transIndex;// Offset=0x8 Size=0x4
    int flags;// Offset=0xc Size=0x4
};

struct usercmd_s// Size=0x28 (Id=4432)
{
    int serverTime;// Offset=0x0 Size=0x4
    int buttons;// Offset=0x4 Size=0x4
    int angles[3];// Offset=0x8 Size=0xc
    unsigned short weapon;// Offset=0x14 Size=0x2
    unsigned short primaryWeaponForAltMode;// Offset=0x16 Size=0x2
    unsigned short offHandIndex;// Offset=0x18 Size=0x2
    char forwardmove;// Offset=0x1a Size=0x1
    char rightmove;// Offset=0x1b Size=0x1
    float meleeChargeYaw;// Offset=0x1c Size=0x4
    unsigned char meleeChargeDist;// Offset=0x20 Size=0x1
    char selectedLoc[2];// Offset=0x21 Size=0x2
    unsigned char selectedLocAngle;// Offset=0x23 Size=0x1
    char remoteControlAngles[2];// Offset=0x24 Size=0x2
};

struct objective_t// Size=0x1c (Id=4433)
{
    enum objectiveState_t state;// Offset=0x0 Size=0x4
    float origin[3];// Offset=0x4 Size=0xc
    int entNum;// Offset=0x10 Size=0x4
    int teamNum;// Offset=0x14 Size=0x4
    int icon;// Offset=0x18 Size=0x4
};

struct SndCurve// Size=0x88 (Id=4434)
{
    char * filename;// Offset=0x0 Size=0x4
    unsigned short knotCount;// Offset=0x4 Size=0x2
    unsigned char __align0[2];// Offset=0x6 Size=0x2
    float knots[16][2];// Offset=0x8 Size=0x80
};

struct SpeakerMap// Size=0x28 (Id=4435)
{
    bool isDefault;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    char * name;// Offset=0x4 Size=0x4
    struct XAUDIOCHANNELMAP channelMaps[2][2];// Offset=0x8 Size=0x20
};

struct netadr_t// Size=0xc (Id=4436)
{
    enum netadrtype_t type;// Offset=0x0 Size=0x4
    unsigned char ip[4];// Offset=0x4 Size=0x4
    unsigned short port;// Offset=0x8 Size=0x2
};

struct snd_overlay_info_t// Size=0x110 (Id=4437)
{
    char pszSampleName[128];// Offset=0x0 Size=0x80
    char aliasName[64];// Offset=0x80 Size=0x40
    char entchannel[64];// Offset=0xc0 Size=0x40
    float fBaseVolume;// Offset=0x100 Size=0x4
    float fCurVolume;// Offset=0x104 Size=0x4
    int dist;// Offset=0x108 Size=0x4
    float fPitch;// Offset=0x10c Size=0x4
};

struct snd_background_info_t// Size=0x8 (Id=4438)
{
    float goalvolume;// Offset=0x0 Size=0x4
    float goalrate;// Offset=0x4 Size=0x4
};

struct ClientArchiveData// Size=0x24 (Id=4439)
{
    int serverTime;// Offset=0x0 Size=0x4
    float origin[3];// Offset=0x4 Size=0xc
    float velocity[3];// Offset=0x10 Size=0xc
    int bobCycle;// Offset=0x1c Size=0x4
    int movementDir;// Offset=0x20 Size=0x4
};

struct SoundFile// Size=0x10 (Id=4440)
{
    unsigned char type;// Offset=0x0 Size=0x1
    unsigned char exists;// Offset=0x1 Size=0x1
    unsigned char __align0[2];// Offset=0x2 Size=0x2
    union SoundFileRef u;// Offset=0x4 Size=0xc
};

struct dvar_t// Size=0x48 (Id=4441)
{
    char * name;// Offset=0x0 Size=0x4
    char * description;// Offset=0x4 Size=0x4
    unsigned short flags;// Offset=0x8 Size=0x2
    unsigned char type;// Offset=0xa Size=0x1
    bool modified;// Offset=0xb Size=0x1
    union DvarValue current;// Offset=0xc Size=0x10
    union DvarValue latched;// Offset=0x1c Size=0x10
    union DvarValue reset;// Offset=0x2c Size=0x10
    union DvarLimits domain;// Offset=0x3c Size=0x8
    struct dvar_t * hashNext;// Offset=0x44 Size=0x4
};

struct DObjAnimMat// Size=0x20 (Id=4442)
{
    float quat[4];// Offset=0x0 Size=0x10
    float trans[3];// Offset=0x10 Size=0xc
    float transWeight;// Offset=0x1c Size=0x4
};

struct LerpEntityState// Size=0x70 (Id=4443)
{
    int eFlags;// Offset=0x0 Size=0x4
    struct trajectory_t pos;// Offset=0x4 Size=0x24
    struct trajectory_t apos;// Offset=0x28 Size=0x24
    union LerpEntityStateTypeUnion u;// Offset=0x4c Size=0x24
};

struct GfxMarkContext// Size=0x7 (Id=4444)
{
    union // Size=0x2 (Id=0)
    {
        unsigned char modelType;// Offset=0x0 Size=0x1
        unsigned char lmapIndex;// Offset=0x1 Size=0x1
        unsigned char boneIndex;// Offset=0x1 Size=0x1
        union <unnamed-type-typeSpecificIndex>// Size=0x2 (Id=50251)
        {
            unsigned char modelIndex[2];// Offset=0x0 Size=0x2
            unsigned char entnum[2];// Offset=0x0 Size=0x2
            unsigned char glassPieceIndex[2];// Offset=0x0 Size=0x2
            unsigned char lightHandle[2];// Offset=0x0 Size=0x2
        };
    };
    union GfxMarkContext::<unnamed-type-typeSpecificIndex> typeSpecificIndex;// Offset=0x2 Size=0x2
    union // Size=0x1 (Id=0)
    {
        unsigned char surfIndex;// Offset=0x4 Size=0x1
        unsigned char entModelBits;// Offset=0x4 Size=0x1
    };
    unsigned char primaryLightIndex;// Offset=0x5 Size=0x1
    unsigned char reflectionProbeIndex;// Offset=0x6 Size=0x1
};

union GfxMarkContext::<unnamed-type-typeSpecificIndex>// Size=0x2 (Id=4445)
{
    unsigned char modelIndex[2];// Offset=0x0 Size=0x2
    unsigned char entnum[2];// Offset=0x0 Size=0x2
    unsigned char glassPieceIndex[2];// Offset=0x0 Size=0x2
    unsigned char lightHandle[2];// Offset=0x0 Size=0x2
};

struct IXHVEngine// Size=0x4 (Id=4446)
{
    unsigned long AddRef();
    unsigned long Release();
    HRESULT Lock(unsigned long );
    HRESULT StartLocalProcessingModes(unsigned long ,const void ** ,unsigned long );
    HRESULT StopLocalProcessingModes(unsigned long ,const void ** ,unsigned long );
    HRESULT StartRemoteProcessingModes(unsigned long long ,const void ** ,unsigned long );
    HRESULT StopRemoteProcessingModes(unsigned long long ,const void ** ,unsigned long );
    HRESULT SetMaxDecodePackets(unsigned long );
    HRESULT RegisterLocalTalker(unsigned long );
    HRESULT UnregisterLocalTalker(unsigned long );
    HRESULT RegisterRemoteTalker(unsigned long long ,struct XAUDIOVOICEFXCHAIN * ,struct XAUDIOVOICEFXCHAIN * ,struct IXAudioSubmixVoice * );
    HRESULT UnregisterRemoteTalker(unsigned long long );
    HRESULT GetRemoteTalkers(unsigned long * ,unsigned long long * );
    int IsHeadsetPresent(unsigned long );
    int IsLocalTalking(unsigned long );
    int IsRemoteTalking(unsigned long long );
    HRESULT SetRemoteTalkerOutputVoice(unsigned long long ,struct IXAudioSubmixVoice * );
    HRESULT SetRemoteTalkerEffectParam(unsigned long long ,int ,unsigned char ,unsigned char ,unsigned char ,union XAUDIOFXPARAM * );
    unsigned long GetDataReadyFlags();
    HRESULT GetLocalChatData(unsigned long ,unsigned char * ,unsigned long * ,unsigned long * );
    HRESULT SetPlaybackPriority(unsigned long long ,unsigned long ,unsigned long );
    HRESULT SubmitIncomingChatData(unsigned long long ,unsigned char * ,unsigned long * );
    void IXHVEngine(struct IXHVEngine & );
    void IXHVEngine();
    struct IXHVEngine & operator=(struct IXHVEngine & );
};

struct IXHVEngine// Size=0x4 (Id=4447)
{
    unsigned long AddRef();
    unsigned long Release();
    HRESULT Lock(unsigned long );
    HRESULT StartLocalProcessingModes(unsigned long ,const void ** ,unsigned long );
    HRESULT StopLocalProcessingModes(unsigned long ,const void ** ,unsigned long );
    HRESULT StartRemoteProcessingModes(unsigned long long ,const void ** ,unsigned long );
    HRESULT StopRemoteProcessingModes(unsigned long long ,const void ** ,unsigned long );
    HRESULT SetMaxDecodePackets(unsigned long );
    HRESULT RegisterLocalTalker(unsigned long );
    HRESULT UnregisterLocalTalker(unsigned long );
    HRESULT RegisterRemoteTalker(unsigned long long ,struct XAUDIOVOICEFXCHAIN * ,struct XAUDIOVOICEFXCHAIN * ,struct IXAudioSubmixVoice * );
    HRESULT UnregisterRemoteTalker(unsigned long long );
    HRESULT GetRemoteTalkers(unsigned long * ,unsigned long long * );
    int IsHeadsetPresent(unsigned long );
    int IsLocalTalking(unsigned long );
    int IsRemoteTalking(unsigned long long );
    HRESULT SetRemoteTalkerOutputVoice(unsigned long long ,struct IXAudioSubmixVoice * );
    HRESULT SetRemoteTalkerEffectParam(unsigned long long ,int ,unsigned char ,unsigned char ,unsigned char ,union XAUDIOFXPARAM * );
    unsigned long GetDataReadyFlags();
    HRESULT GetLocalChatData(unsigned long ,unsigned char * ,unsigned long * ,unsigned long * );
    HRESULT SetPlaybackPriority(unsigned long long ,unsigned long ,unsigned long );
    HRESULT SubmitIncomingChatData(unsigned long long ,unsigned char * ,unsigned long * );
    void IXHVEngine(struct IXHVEngine & );
    void IXHVEngine();
    struct IXHVEngine & operator=(struct IXHVEngine & );
};

union entityState_s::<unnamed-type-un2>// Size=0x4 (Id=4448)
{
    union // Size=0x4 (Id=0)
    {
        int hintType;// Offset=0x0 Size=0x4
        int vehicleXModel;// Offset=0x0 Size=0x4
        int actorFlags;// Offset=0x0 Size=0x4
        unsigned char weaponModel;// Offset=0x0 Size=0x1
    };
};

union entityState_s::<unnamed-type-un1>// Size=0x4 (Id=4449)
{
    int eventParm2;// Offset=0x0 Size=0x4
    int hintString;// Offset=0x0 Size=0x4
    int fxId;// Offset=0x0 Size=0x4
    int helicopterStage;// Offset=0x0 Size=0x4
};

struct entityState_s::<unnamed-type-wes>// Size=0x4 (Id=4450)
{
    unsigned short weapon;// Offset=0x0 Size=0x2
    unsigned short primaryWeapon;// Offset=0x2 Size=0x2
};

union entityState_s::<unnamed-type-index>// Size=0x4 (Id=4451)
{
    int brushModel;// Offset=0x0 Size=0x4
    int triggerModel;// Offset=0x0 Size=0x4
    int item;// Offset=0x0 Size=0x4
    int xmodel;// Offset=0x0 Size=0x4
    int primaryLight;// Offset=0x0 Size=0x4
};

struct PlayerEquippedWeaponState// Size=0x5 (Id=4452)
{
    bool usedBefore;// Offset=0x0 Size=0x1
    bool dualWielding;// Offset=0x1 Size=0x1
    unsigned char weaponModel;// Offset=0x2 Size=0x1
    bool needsRechamber[2];// Offset=0x3 Size=0x2
};

struct ClipAmmo// Size=0xc (Id=4453)
{
    int clipIndex;// Offset=0x0 Size=0x4
    int ammoCount[2];// Offset=0x4 Size=0x8
};

struct GfxLightDef// Size=0x10 (Id=4454)
{
    char * name;// Offset=0x0 Size=0x4
    struct GfxLightImage attenuation;// Offset=0x4 Size=0x8
    int lmapLookupStart;// Offset=0xc Size=0x4
};

struct StringTable// Size=0x10 (Id=4455)
{
    char * name;// Offset=0x0 Size=0x4
    int columnCount;// Offset=0x4 Size=0x4
    int rowCount;// Offset=0x8 Size=0x4
    struct StringTableCell * values;// Offset=0xc Size=0x4
};

enum _unnamed_4456
{
    IMAGE_TRACK_MISC=0,
    IMAGE_TRACK_DEBUG=1,
    IMAGE_TRACK_TEXTURENAME=2,
    IMAGE_TRACK_UI=3,
    IMAGE_TRACK_LIGHTMAP=4,
    IMAGE_TRACK_LIGHT=5,
    IMAGE_TRACK_FX=6,
    IMAGE_TRACK_HUD=7,
    IMAGE_TRACK_MODEL=8,
    IMAGE_TRACK_WORLD=9,
    IMAGE_TRACK_COUNT=10
};

struct StringTable// Size=0x10 (Id=4457)
{
    char * name;// Offset=0x0 Size=0x4
    int columnCount;// Offset=0x4 Size=0x4
    int rowCount;// Offset=0x8 Size=0x4
    struct StringTableCell * values;// Offset=0xc Size=0x4
};

struct StringTableCell// Size=0x8 (Id=4458)
{
    char * string;// Offset=0x0 Size=0x4
    int hash;// Offset=0x4 Size=0x4
};

struct PartyMember// Size=0xc0 (Id=4459)
{
    unsigned char status;// Offset=0x0 Size=0x1
    bool headsetPresent;// Offset=0x1 Size=0x1
    char gamertag[32];// Offset=0x2 Size=0x20
    char clanAbbrev[5];// Offset=0x22 Size=0x5
    unsigned char __align0[1];// Offset=0x27 Size=0x1
    int qport;// Offset=0x28 Size=0x4
    char challenge[6];// Offset=0x2c Size=0x6
    unsigned char __align1[2];// Offset=0x32 Size=0x2
    int lastPacketTime;// Offset=0x34 Size=0x4
    int lastHeartbeatTime;// Offset=0x38 Size=0x4
    int lastPartyStateAck;// Offset=0x3c Size=0x4
    struct XNADDR xnaddr;// Offset=0x40 Size=0x24
    int availableMapPackFlags;// Offset=0x64 Size=0x4
    int ackedMembers;// Offset=0x68 Size=0x4
    struct XNKID privatePartyId;// Offset=0x6c Size=0x8
    int subpartyIndex;// Offset=0x74 Size=0x4
    int trueSkill;// Offset=0x78 Size=0x4
    int rank;// Offset=0x7c Size=0x4
    int prestige;// Offset=0x80 Size=0x4
    int team;// Offset=0x84 Size=0x4
    short score;// Offset=0x88 Size=0x2
    unsigned char __align2[2];// Offset=0x8a Size=0x2
    int deaths;// Offset=0x8c Size=0x4
    bool vetoedMap;// Offset=0x90 Size=0x1
    unsigned char __align3[3];// Offset=0x91 Size=0x3
    unsigned int playerCardIcon;// Offset=0x94 Size=0x4
    unsigned int playerCardTitle;// Offset=0x98 Size=0x4
    unsigned int playerCardNameplate;// Offset=0x9c Size=0x4
    int voiceConnectivityBits;// Offset=0xa0 Size=0x4
    bool invited;// Offset=0xa4 Size=0x1
    unsigned char __align4[3];// Offset=0xa5 Size=0x3
    int natType;// Offset=0xa8 Size=0x4
    unsigned char __align5[4];// Offset=0xac Size=0x4
    unsigned long long player;// Offset=0xb0 Size=0x8
    bool migrateHeardFrom;// Offset=0xb8 Size=0x1
};

struct PlayerCardData// Size=0x44 (Id=4460)
{
    unsigned int lastUpdateTime;// Offset=0x0 Size=0x4
    unsigned int titleIndex;// Offset=0x4 Size=0x4
    unsigned int iconIndex;// Offset=0x8 Size=0x4
    unsigned int nameplateIndex;// Offset=0xc Size=0x4
    int rank;// Offset=0x10 Size=0x4
    int prestige;// Offset=0x14 Size=0x4
    enum team_t team;// Offset=0x18 Size=0x4
    char name[32];// Offset=0x1c Size=0x20
    char clanAbbrev[5];// Offset=0x3c Size=0x5
};

enum PlayerCardClientLookupType
{
    PLAYERCARD_LOOKUP_SCRIPTSLOT=0,
    PLAYERCARD_LOOKUP_LIVEPROFILE_CLIENT=1,
    PLAYERCARD_LOOKUP_LIVEPROFILE_CONTROLLER=2,
    PLAYERCARD_LOOKUP_LOBBY=3,
    PLAYERCARD_LOOKUP_MYTEAM=4,
    PLAYERCARD_LOOKUP_ENEMYTEAM=5,
    PLAYERCARD_LOOKUP_COUNT=6
};

enum PlayerCardClientLookupType
{
    PLAYERCARD_LOOKUP_SCRIPTSLOT=0,
    PLAYERCARD_LOOKUP_LIVEPROFILE_CLIENT=1,
    PLAYERCARD_LOOKUP_LIVEPROFILE_CONTROLLER=2,
    PLAYERCARD_LOOKUP_LOBBY=3,
    PLAYERCARD_LOOKUP_MYTEAM=4,
    PLAYERCARD_LOOKUP_ENEMYTEAM=5,
    PLAYERCARD_LOOKUP_COUNT=6
};

struct PlayerCardData// Size=0x44 (Id=4463)
{
    unsigned int lastUpdateTime;// Offset=0x0 Size=0x4
    unsigned int titleIndex;// Offset=0x4 Size=0x4
    unsigned int iconIndex;// Offset=0x8 Size=0x4
    unsigned int nameplateIndex;// Offset=0xc Size=0x4
    int rank;// Offset=0x10 Size=0x4
    int prestige;// Offset=0x14 Size=0x4
    enum team_t team;// Offset=0x18 Size=0x4
    char name[32];// Offset=0x1c Size=0x20
    char clanAbbrev[5];// Offset=0x3c Size=0x5
};

struct PartyData// Size=0x1fb0 (Id=4464)
{
    struct SessionData * session;// Offset=0x0 Size=0x4
    struct SessionData * presenceSession;// Offset=0x4 Size=0x4
    struct SessionData * searchSession;// Offset=0x8 Size=0x4
    struct MigrateData migrateData;// Offset=0xc Size=0x28
    struct QoSData qosData;// Offset=0x34 Size=0x4
    struct PartyInfo * partyList;// Offset=0x38 Size=0x4
    int partyListSize;// Offset=0x3c Size=0x4
    struct PartyMember partyMembers[18];// Offset=0x40 Size=0xd80
    struct SubpartyInfo subparties[18];// Offset=0xdc0 Size=0x630
    int subpartyCount;// Offset=0x13f0 Size=0x4
    struct PartyHostDetails currentHost;// Offset=0x13f4 Size=0x68
    struct PartyHostDetails potentialHost;// Offset=0x145c Size=0x68
    struct PartyHostData hostData;// Offset=0x14c4 Size=0x18
    int areWeHost;// Offset=0x14dc Size=0x4
    int joiningAnotherParty;// Offset=0x14e0 Size=0x4
    int searchingForGames;// Offset=0x14e4 Size=0x4
    int inParty;// Offset=0x14e8 Size=0x4
    int party_systemActive;// Offset=0x14ec Size=0x4
    bool veto;// Offset=0x14f0 Size=0x1
    unsigned char __align0[3];// Offset=0x14f1 Size=0x3
    int vetoTime;// Offset=0x14f4 Size=0x4
    int headsetPresent;// Offset=0x14f8 Size=0x4
    int headsetTime;// Offset=0x14fc Size=0x4
    int clanAbbrevTime;// Offset=0x1500 Size=0x4
    int rankTime;// Offset=0x1504 Size=0x4
    int playerCardTime;// Offset=0x1508 Size=0x4
    int uploadSentTime;// Offset=0x150c Size=0x4
    int voiceBitsTime;// Offset=0x1510 Size=0x4
    int idTime;// Offset=0x1514 Size=0x4
    int availableMapPackFlagsTime;// Offset=0x1518 Size=0x4
    int searchStartTime;// Offset=0x151c Size=0x4
    int searchEndTime;// Offset=0x1520 Size=0x4
    int joinAttemptForUI;// Offset=0x1524 Size=0x4
    int lastMergeTime;// Offset=0x1528 Size=0x4
    int mergeAttemptStartTime;// Offset=0x152c Size=0x4
    int originalPartiesInList;// Offset=0x1530 Size=0x4
    int partyId;// Offset=0x1534 Size=0x4
    int nextSessionSearchTime;// Offset=0x1538 Size=0x4
    int mapPackFlags;// Offset=0x153c Size=0x4
    int lastPartyStateTime;// Offset=0x1540 Size=0x4
    int gameStartTime;// Offset=0x1544 Size=0x4
    int interEndTime;// Offset=0x1548 Size=0x4
    int hostTimeouts;// Offset=0x154c Size=0x4
    unsigned char lobbyFlags;// Offset=0x1550 Size=0x1
    unsigned char __align1[3];// Offset=0x1551 Size=0x3
    struct PartyData * partyToNotify;// Offset=0x1554 Size=0x4
    bool registeredWithArbitration;// Offset=0x1558 Size=0x1
    bool rejoining;// Offset=0x1559 Size=0x1
    unsigned char __align2[2];// Offset=0x155a Size=0x2
    int partyStatePacketCount;// Offset=0x155c Size=0x4
    int partyStateLastMemberIndex;// Offset=0x1560 Size=0x4
    int unfinishedPartServerTimes[2];// Offset=0x1564 Size=0x8
    struct msg_t partyStatePartMsgs[2];// Offset=0x156c Size=0x50
    unsigned char partyStatePartMsgBufs[2][1264];// Offset=0x15bc Size=0x9e0
    unsigned char lastEntries[8];// Offset=0x1f9c Size=0x8
    int currentEntry;// Offset=0x1fa4 Size=0x4
    unsigned char axisWins;// Offset=0x1fa8 Size=0x1
    unsigned char alliesWins;// Offset=0x1fa9 Size=0x1
};

enum expDataType
{
    VAL_INT=0,
    VAL_FLOAT=1,
    VAL_STRING=2,
    NUM_INTERNAL_DATATYPES=3,
    VAL_FUNCTION=3,
    NUM_DATATYPES=4
};

enum operationEnum
{
    OP_NOOP=0,
    OP_RIGHTPAREN=1,
    OP_MULTIPLY=2,
    OP_DIVIDE=3,
    OP_MODULUS=4,
    OP_ADD=5,
    OP_SUBTRACT=6,
    OP_NOT=7,
    OP_LESSTHAN=8,
    OP_LESSTHANEQUALTO=9,
    OP_GREATERTHAN=10,
    OP_GREATERTHANEQUALTO=11,
    OP_EQUALS=12,
    OP_NOTEQUAL=13,
    OP_AND=14,
    OP_OR=15,
    OP_LEFTPAREN=16,
    OP_COMMA=17,
    OP_BITWISEAND=18,
    OP_BITWISEOR=19,
    OP_BITWISENOT=20,
    OP_BITSHIFTLEFT=21,
    OP_BITSHIFTRIGHT=22,
    OP_STATICDVARINT=23,
    OP_FIRSTFUNCTIONCALL=23,
    OP_STATICDVARBOOL=24,
    OP_STATICDVARFLOAT=25,
    OP_STATICDVARSTRING=26,
    OP_TOINT=27,
    OP_TOSTRING=28,
    OP_TOFLOAT=29,
    LAST_COMMONLY_CALLED_FUNCTION=29,
    OP_SIN=30,
    OP_COS=31,
    OP_MIN=32,
    OP_MAX=33,
    OP_MILLISECONDS=34,
    OP_DVARINT=35,
    OP_DVARBOOL=36,
    OP_DVARFLOAT=37,
    OP_DVARSTRING=38,
    OP_STAT=39,
    OP_UIACTIVE=40,
    OP_FLASHBANGED=41,
    OP_USINGVEHICLE=42,
    OP_MISSILECAM=43,
    OP_SCOPED=44,
    OP_SCOPEDTHERMAL=45,
    OP_SCOREBOARDVISIBLE=46,
    OP_INKILLCAM=47,
    OP_INKILLCAM_NPC=48,
    OP_PLAYERFIELD=49,
    OP_GET_PLAYER_PERK=50,
    OP_SELECTINGLOCATION=51,
    OP_SELECTINGDIRECTION=52,
    OP_TEAMFIELD=53,
    OP_OTHERTEAMFIELD=54,
    OP_MARINESFIELD=55,
    OP_OPFORFIELD=56,
    OP_MENUISOPEN=57,
    OP_WRITINGDATA=58,
    OP_INLOBBY=59,
    OP_INPRIVATEPARTY=60,
    OP_PRIVATEPARTYHOST=61,
    OP_PRIVATEPARTYHOSTINLOBBY=62,
    OP_ALONEINPARTY=63,
    OP_ADSJAVELIN=64,
    OP_WEAPLOCKBLINK=65,
    OP_WEAPATTACKTOP=66,
    OP_WEAPATTACKDIRECT=67,
    OP_WEAPLOCKING=68,
    OP_WEAPLOCKED=69,
    OP_WEAPLOCKTOOCLOSE=70,
    OP_WEAPLOCKSCREENPOSX=71,
    OP_WEAPLOCKSCREENPOSY=72,
    OP_SECONDSASTIME=73,
    OP_TABLELOOKUP=74,
    OP_TABLELOOKUPBYROW=75,
    OP_TABLEGETROWNUM=76,
    OP_LOCALIZESTRING=77,
    OP_LOCALVARINT=78,
    OP_LOCALVARBOOL=79,
    OP_LOCALVARFLOAT=80,
    OP_LOCALVARSTRING=81,
    OP_TIMELEFT=82,
    OP_SECONDSASCOUNTDOWN=83,
    OP_GAMEMSGWNDACTIVE=84,
    OP_GAMETYPENAME=85,
    OP_GAMETYPE=86,
    OP_GAMETYPEDESCRIPTION=87,
    OP_SCORE=88,
    OP_FRIENDSONLINE=89,
    OP_FOLLOWING=90,
    OP_SPECTATINGFREE=91,
    OP_STATRANGEBITSSET=92,
    OP_KEYBINDING=93,
    OP_ACTIONSLOTUSABLE=94,
    OP_HUDFADE=95,
    OP_MAXPLAYERS=96,
    OP_ACCEPTINGINVITE=97,
    OP_ISINTERMISSION=98,
    OP_GAMEHOST=99,
    OP_PARTYHASMISSINGMAPPACK=100,
    OP_PARTYMISSINGMAPPACKERROR=101,
    OP_ANYNEWMAPPACKS=102,
    OP_AMISELECTED=103,
    OP_PARTYSTATUSSTRING=104,
    OP_ATTACHED_CONTROLLER_COUNT=105,
    OP_IS_SPLIT_SCREEN_ONLINE_POSSIBLE=106,
    OP_SPLITSCREENPLAYERCOUNT=107,
    OP_GETPLAYERDATA=108,
    OP_GETPLAYERDATASPLITSCREEN=109,
    OP_EXPERIENCE_FOR_LEVEL=110,
    OP_LEVEL_FOR_EXPERIENCE=111,
    OP_IS_ITEM_UNLOCKED=112,
    OP_IS_ITEM_UNLOCKEDSPLITSCREEN=113,
    OP_DEBUG_PRINT=114,
    OP_GETPLAYERDATA_ANYBOOLTRUE=115,
    OP_WEAPON_CLASS_NEW=116,
    OP_WEAPONNAME=117,
    OP_ISRELOADING=118,
    OP_SAVE_GAME_AVAILABLE=119,
    OP_UNLOCKED_ITEM_COUNT=120,
    OP_UNLOCKED_ITEM_COUNT_SPLITSCREEN=121,
    OP_UNLOCKED_ITEM=122,
    OP_UNLOCKED_ITEM_SPLITSCREEN=123,
    OP_MAIL_SUBJECT=124,
    OP_MAIL_FROM=125,
    OP_MAIL_RECEIVED=126,
    OP_MAIL_BODY=127,
    OP_MAIL_LOOT_LOCALIZED=128,
    OP_MAIL_GIVES_LOOT=129,
    OP_ANY_NEW_MAIL=130,
    OP_MAIL_TIME_TO_FOLLOWUP=131,
    OP_MAIL_LOOT_TYPE=132,
    OP_MAIL_RAN_LOTTERY=133,
    OP_LOTTERY_LOOT_LOCALIZED=134,
    OP_RADAR_IS_JAMMED=135,
    OP_RADAR_JAM_INTENSITY=136,
    OP_RADAR_IS_ENABLED=137,
    OP_EMP_JAMMED=138,
    OP_PLAYERADS=139,
    OP_WEAPON_HEAT_ACTIVE=140,
    OP_WEAPON_HEAT_VALUE=141,
    OP_WEAPON_HEAT_OVERHEATED=142,
    OP_SPLASH_TEXT=143,
    OP_SPLASH_DESCRIPTION=144,
    OP_SPLASH_MATERIAL=145,
    OP_SPLASH_HAS_ICON=146,
    OP_SPLASH_ROWNUM=147,
    OP_GETFOCUSED_NAME=148,
    OP_GETFOCUSED_X=149,
    OP_GETFOCUSED_Y=150,
    OP_GETFOCUSED_W=151,
    OP_GETFOCUSED_H=152,
    OP_GETITEMDEF_X=153,
    OP_GETITEMDEF_Y=154,
    OP_GETITEMDEF_W=155,
    OP_GETITEMDEF_H=156,
    OP_PLAYLISTFIELD=157,
    OP_SCOREBOARD_EXTERNALMUTE_NOTICE=158,
    OP_CLIENT_MATCH_DATA=159,
    OP_CLIENT_MATCH_DATA_DEF=160,
    OP_GET_MAP_NAME=161,
    OP_GET_MAP_IMAGE=162,
    OP_GET_MAP_CUSTOM=163,
    OP_GET_MIGRATION_STATUS=164,
    OP_GET_PLAYERCARD_INFO=165,
    OP_IS_OFFLINE_PROFILE_SELECTED=166,
    OP_COOP_PLAYERFIELD=167,
    OP_IS_COOP=168,
    OP_GETPARTYSTATUS=169,
    OP_GETSEARCHPARAMS=170,
    OP_GETTIMEPLAYED=171,
    OP_IS_SELECTED_PLAYER_FRIEND=172,
    OP_GETCHARBYINDEX=173,
    OP_GETPLAYERPROFILEDATA=174,
    OP_IS_PROFILE_SIGNED_IN=175,
    OP_GET_WAIT_POPUP_STATUS=176,
    NUM_OPERATORS=177
};

enum _unnamed_4467
{
    MT_NODE_SIZE=12
};

enum _unnamed_4468
{
    MEMORY_NODE_BITS=16,
    MEMORY_NODE_COUNT=65536,
    MT_SIZE=786432,
    REFSTRING_STRING_OFFSET=4
};

enum _unnamed_4469
{
    STRINGLIST_SIZE=28672
};

enum _unnamed_4470
{
    HUD_STANCE_STAND=0,
    HUD_STANCE_CROUCH=1,
    HUD_STANCE_PRONE=2,
    HUD_STANCE_FLASH=3,
    HUD_STANCE_NUM=4
};

enum _unnamed_4471
{
    HUD_OBJ_SAME=0,
    HUD_OBJ_NUM=1
};

enum _unnamed_4472
{
    FRIEND_ICON=0,
    FRIEND_CHAT_ICON=1,
    FRIEND_ICON_NUM=2
};

enum _unnamed_4473
{
    PARTYSTATUS_EMPTY=0,
    PARTYSTATUS_ZOMBIE=1,
    PARTYSTATUS_ANONYMOUS=2,
    PARTYSTATUS_PRESENT=3
};

struct columnInfo_s// Size=0x10 (Id=4474)
{
    int pos;// Offset=0x0 Size=0x4
    int width;// Offset=0x4 Size=0x4
    int maxChars;// Offset=0x8 Size=0x4
    int alignment;// Offset=0xc Size=0x4
};

struct CEntFx// Size=0x8 (Id=4475)
{
    int triggerTime;// Offset=0x0 Size=0x4
    struct FxEffect * effect;// Offset=0x4 Size=0x4
};

struct SetLocalVarData// Size=0x8 (Id=4476)
{
    char * localVarName;// Offset=0x0 Size=0x4
    struct Statement_s * expression;// Offset=0x4 Size=0x4
};

struct GfxDepthOfField// Size=0x20 (Id=4477)
{
    float viewModelStart;// Offset=0x0 Size=0x4
    float viewModelEnd;// Offset=0x4 Size=0x4
    float nearStart;// Offset=0x8 Size=0x4
    float nearEnd;// Offset=0xc Size=0x4
    float farStart;// Offset=0x10 Size=0x4
    float farEnd;// Offset=0x14 Size=0x4
    float nearBlur;// Offset=0x18 Size=0x4
    float farBlur;// Offset=0x1c Size=0x4
};

struct ConditionalScript// Size=0x8 (Id=4478)
{
    struct MenuEventHandlerSet * eventHandlerSet;// Offset=0x0 Size=0x4
    struct Statement_s * eventExpression;// Offset=0x4 Size=0x4
};

struct GfxFilm// Size=0x3c (Id=4479)
{
    bool enabled;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    float brightness;// Offset=0x4 Size=0x4
    float contrast;// Offset=0x8 Size=0x4
    float desaturation;// Offset=0xc Size=0x4
    float desaturationDark;// Offset=0x10 Size=0x4
    bool invert;// Offset=0x14 Size=0x1
    unsigned char __align1[3];// Offset=0x15 Size=0x3
    float tintDark[3];// Offset=0x18 Size=0xc
    float tintMedium[3];// Offset=0x24 Size=0xc
    float tintLight[3];// Offset=0x30 Size=0xc
};

struct CEntPlayerInfo// Size=0x8 (Id=4480)
{
    struct clientControllers_t * control;// Offset=0x0 Size=0x4
    unsigned char tag[4];// Offset=0x4 Size=0x4
};

struct CEntTurretAngles// Size=0x8 (Id=4481)
{
    float pitch;// Offset=0x0 Size=0x4
    float yaw;// Offset=0x4 Size=0x4
};

struct GfxGlow// Size=0x14 (Id=4482)
{
    bool enabled;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    float bloomCutoff;// Offset=0x4 Size=0x4
    float bloomDesaturation;// Offset=0x8 Size=0x4
    float bloomIntensity;// Offset=0xc Size=0x4
    float radius;// Offset=0x10 Size=0x4
};

struct listBoxDef_s// Size=0x158 (Id=4483)
{
    int startPos[4];// Offset=0x0 Size=0x10
    int endPos[4];// Offset=0x10 Size=0x10
    int drawPadding;// Offset=0x20 Size=0x4
    float elementWidth;// Offset=0x24 Size=0x4
    float elementHeight;// Offset=0x28 Size=0x4
    int elementStyle;// Offset=0x2c Size=0x4
    int numColumns;// Offset=0x30 Size=0x4
    struct columnInfo_s columnInfo[16];// Offset=0x34 Size=0x100
    struct MenuEventHandlerSet * onDoubleClick;// Offset=0x134 Size=0x4
    int notselectable;// Offset=0x138 Size=0x4
    int noScrollBars;// Offset=0x13c Size=0x4
    int usePaging;// Offset=0x140 Size=0x4
    float selectBorder[4];// Offset=0x144 Size=0x10
    struct Material * selectIcon;// Offset=0x154 Size=0x4
};

struct CEntTurretInfo// Size=0x24 (Id=4484)
{
    union // Size=0x8 (Id=0)
    {
        struct CEntTurretAngles angles;// Offset=0x0 Size=0x8
        float * viewAngles;// Offset=0x0 Size=0x4
        unsigned char __align0[4];// Offset=0x4 Size=0x4
    };
    float barrelPitch;// Offset=0x8 Size=0x4
    bool playerUsing;// Offset=0xc Size=0x1
    unsigned char tagIdx_aim;// Offset=0xd Size=0x1
    unsigned char tagIdx_aim_animated;// Offset=0xe Size=0x1
    unsigned char tagIdx_aim_pivot;// Offset=0xf Size=0x1
    unsigned char tagIdx_flash;// Offset=0x10 Size=0x1
    unsigned char tagIdx_barrel;// Offset=0x11 Size=0x1
    unsigned char __align1[2];// Offset=0x12 Size=0x2
    float barrelRoll;// Offset=0x14 Size=0x4
    bool barrelRollSndLastRotating;// Offset=0x18 Size=0x1
    bool barrelRollSndNotified;// Offset=0x19 Size=0x1
    unsigned char __align2[2];// Offset=0x1a Size=0x2
    int barrelRollSndTime;// Offset=0x1c Size=0x4
    unsigned char barrelRollSndIndex;// Offset=0x20 Size=0x1
    bool wasOverheat;// Offset=0x21 Size=0x1
};

struct WeaponHand// Size=0x14 (Id=4485)
{
    struct DObj * viewModelDObj;// Offset=0x0 Size=0x4
    struct XAnimTree_s * tree;// Offset=0x4 Size=0x4
    struct XModel * rocketModel;// Offset=0x8 Size=0x4
    int iPrevAnim;// Offset=0xc Size=0x4
    int hasAnimTree;// Offset=0x10 Size=0x4
};

struct editFieldDef_s// Size=0x20 (Id=4486)
{
    float minVal;// Offset=0x0 Size=0x4
    float maxVal;// Offset=0x4 Size=0x4
    float defVal;// Offset=0x8 Size=0x4
    float range;// Offset=0xc Size=0x4
    int maxChars;// Offset=0x10 Size=0x4
    int maxCharsGotoNext;// Offset=0x14 Size=0x4
    int maxPaintChars;// Offset=0x18 Size=0x4
    int paintOffset;// Offset=0x1c Size=0x4
};

struct GfxLight// Size=0x40 (Id=4487)
{
    unsigned char type;// Offset=0x0 Size=0x1
    unsigned char canUseShadowMap;// Offset=0x1 Size=0x1
    unsigned char unused[2];// Offset=0x2 Size=0x2
    float color[3];// Offset=0x4 Size=0xc
    float dir[3];// Offset=0x10 Size=0xc
    float origin[3];// Offset=0x1c Size=0xc
    float radius;// Offset=0x28 Size=0x4
    float cosHalfFovOuter;// Offset=0x2c Size=0x4
    float cosHalfFovInner;// Offset=0x30 Size=0x4
    int exponent;// Offset=0x34 Size=0x4
    unsigned int spotShadowIndex;// Offset=0x38 Size=0x4
    struct GfxLightDef * def;// Offset=0x3c Size=0x4
};

struct GfxViewport// Size=0x10 (Id=4488)
{
    int x;// Offset=0x0 Size=0x4
    int y;// Offset=0x4 Size=0x4
    int width;// Offset=0x8 Size=0x4
    int height;// Offset=0xc Size=0x4
};

struct textScrollDef_s// Size=0x4 (Id=4489)
{
    int startTime;// Offset=0x0 Size=0x4
};

struct CEntVehicleInfo// Size=0x30 (Id=4490)
{
    short pitch;// Offset=0x0 Size=0x2
    short yaw;// Offset=0x2 Size=0x2
    short roll;// Offset=0x4 Size=0x2
    short barrelPitch;// Offset=0x6 Size=0x2
    float barrelRoll;// Offset=0x8 Size=0x4
    short steerYaw;// Offset=0xc Size=0x2
    unsigned char __align0[2];// Offset=0xe Size=0x2
    float time;// Offset=0x10 Size=0x4
    unsigned short wheelFraction[6];// Offset=0x14 Size=0xc
    unsigned char wheelBoneIndex[6];// Offset=0x20 Size=0x6
    unsigned char wheelSurfaceType[6];// Offset=0x26 Size=0x6
    unsigned char tag_body;// Offset=0x2c Size=0x1
    unsigned char tag_turret;// Offset=0x2d Size=0x1
    unsigned char tag_barrel;// Offset=0x2e Size=0x1
};

struct animScriptItem_t// Size=0x140 (Id=4491)
{
    int numConditions;// Offset=0x0 Size=0x4
    struct animScriptCondition_t conditions[18];// Offset=0x4 Size=0xd8
    int numCommands;// Offset=0xdc Size=0x4
    struct animScriptCommand_t commands[8];// Offset=0xe0 Size=0x60
};

struct animScriptCommand_t// Size=0xc (Id=4492)
{
    short bodyPart[2];// Offset=0x0 Size=0x4
    short animIndex[2];// Offset=0x4 Size=0x4
    short animDuration[2];// Offset=0x8 Size=0x4
};

struct newsTickerDef_s// Size=0x1c (Id=4493)
{
    int feedId;// Offset=0x0 Size=0x4
    int speed;// Offset=0x4 Size=0x4
    int spacing;// Offset=0x8 Size=0x4
    int lastTime;// Offset=0xc Size=0x4
    int start;// Offset=0x10 Size=0x4
    int end;// Offset=0x14 Size=0x4
    float x;// Offset=0x18 Size=0x4
};

struct animation_s// Size=0x68 (Id=4494)
{
    char name[64];// Offset=0x0 Size=0x40
    int initialLerp;// Offset=0x40 Size=0x4
    float moveSpeed;// Offset=0x44 Size=0x4
    int duration;// Offset=0x48 Size=0x4
    int nameHash;// Offset=0x4c Size=0x4
    int flags;// Offset=0x50 Size=0x4
    unsigned char __align0[4];// Offset=0x54 Size=0x4
    long long movetype;// Offset=0x58 Size=0x8
    int noteType;// Offset=0x60 Size=0x4
};

struct animScript_t// Size=0x204 (Id=4495)
{
    int numItems;// Offset=0x0 Size=0x4
    struct animScriptItem_t * items[128];// Offset=0x4 Size=0x200
};

struct GfxCompositeFx// Size=0x6c (Id=4496)
{
    struct GfxFilm film;// Offset=0x0 Size=0x3c
    float distortionScale[3];// Offset=0x3c Size=0xc
    float blurRadius;// Offset=0x48 Size=0x4
    float distortionMagnitude;// Offset=0x4c Size=0x4
    float frameRate;// Offset=0x50 Size=0x4
    int lastUpdate;// Offset=0x54 Size=0x4
    int frame;// Offset=0x58 Size=0x4
    int startMSec;// Offset=0x5c Size=0x4
    int currentTime;// Offset=0x60 Size=0x4
    int duration;// Offset=0x64 Size=0x4
    bool enabled;// Offset=0x68 Size=0x1
    bool scriptEnabled;// Offset=0x69 Size=0x1
};

struct animScriptData_t// Size=0x73720 (Id=4497)
{
    struct animation_s animations[512];// Offset=0x0 Size=0xd000
    unsigned int numAnimations;// Offset=0xd000 Size=0x4
    struct animScript_t scriptAnims[1][54];// Offset=0xd004 Size=0x6cd8
    struct animScript_t scriptCannedAnims[1][54];// Offset=0x13cdc Size=0x6cd8
    struct animScript_t scriptStateChange[1][1];// Offset=0x1a9b4 Size=0x204
    struct animScript_t scriptEvents[22];// Offset=0x1abb8 Size=0x2c58
    struct animScriptItem_t scriptItems[1100];// Offset=0x1d810 Size=0x55f00
    int numScriptItems;// Offset=0x73710 Size=0x4
    struct scr_animtree_t animTree;// Offset=0x73714 Size=0x4
    unsigned short torsoAnim;// Offset=0x73718 Size=0x2
    unsigned short legsAnim;// Offset=0x7371a Size=0x2
    unsigned short turningAnim;// Offset=0x7371c Size=0x2
    unsigned short codeAnim;// Offset=0x7371e Size=0x2
};

struct cpose_t// Size=0x60 (Id=4498)
{
    unsigned short lightingHandle;// Offset=0x0 Size=0x2
    unsigned char eType;// Offset=0x2 Size=0x1
    unsigned char cullIn;// Offset=0x3 Size=0x1
    unsigned int usedInScene;// Offset=0x4 Size=0x4
    unsigned char isRagdoll;// Offset=0x8 Size=0x1
    unsigned char __align0[3];// Offset=0x9 Size=0x3
    int ragdollHandle;// Offset=0xc Size=0x4
    int killcamRagdollHandle;// Offset=0x10 Size=0x4
    int physObjId;// Offset=0x14 Size=0x4
    float origin[3];// Offset=0x18 Size=0xc
    float angles[3];// Offset=0x24 Size=0xc
    union // Size=0x60 (Id=0)
    {
        struct CEntPlayerInfo player;// Offset=0x30 Size=0x8
        struct CEntTurretInfo turret;// Offset=0x30 Size=0x24
        struct CEntVehicleInfo vehicle;// Offset=0x30 Size=0x30
        struct CEntFx fx;// Offset=0x30 Size=0x8
    };
};

struct windowDef_t// Size=0xb0 (Id=4499)
{
    char * name;// Offset=0x0 Size=0x4
    struct rectDef_s rect;// Offset=0x4 Size=0x14
    struct rectDef_s rectClient;// Offset=0x18 Size=0x14
    char * group;// Offset=0x2c Size=0x4
    int style;// Offset=0x30 Size=0x4
    int border;// Offset=0x34 Size=0x4
    int ownerDraw;// Offset=0x38 Size=0x4
    int ownerDrawFlags;// Offset=0x3c Size=0x4
    float borderSize;// Offset=0x40 Size=0x4
    int staticFlags;// Offset=0x44 Size=0x4
    int dynamicFlags[4];// Offset=0x48 Size=0x10
    int nextTime;// Offset=0x58 Size=0x4
    float foreColor[4];// Offset=0x5c Size=0x10
    float backColor[4];// Offset=0x6c Size=0x10
    float borderColor[4];// Offset=0x7c Size=0x10
    float outlineColor[4];// Offset=0x8c Size=0x10
    float disableColor[4];// Offset=0x9c Size=0x10
    struct Material * background;// Offset=0xac Size=0x4
};

enum DemoType
{
    DEMO_TYPE_NONE=0,
    DEMO_TYPE_CLIENT=1,
    DEMO_TYPE_SERVER=2
};

enum CubemapShot
{
    CUBEMAPSHOT_NONE=0,
    CUBEMAPSHOT_RIGHT=1,
    CUBEMAPSHOT_LEFT=2,
    CUBEMAPSHOT_BACK=3,
    CUBEMAPSHOT_FRONT=4,
    CUBEMAPSHOT_UP=5,
    CUBEMAPSHOT_DOWN=6,
    CUBEMAPSHOT_COUNT=7
};

enum InvalidCmdHintType
{
    INVALID_CMD_NONE=0,
    INVALID_CMD_NO_AMMO_BULLETS=1,
    INVALID_CMD_NO_AMMO_GRENADE=2,
    INVALID_CMD_STAND_BLOCKED=3,
    INVALID_CMD_CROUCH_BLOCKED=4,
    INVALID_CMD_PRONE_BLOCKED=5,
    INVALID_CMD_TARGET_TOO_CLOSE=6,
    INVALID_CMD_LOCKON_REQUIRED=7,
    INVALID_CMD_NOT_ENOUGH_CLEARANCE=8
};

enum KillCamEntityType
{
    KC_NO_ENTITY=0,
    KC_HELICOPTER=1,
    KC_AIRSTRIKE=2,
    KC_EXPLOSIVE=3,
    KC_FAST_EXPLOSIVE=4,
    KC_ROCKET=5,
    KC_TURRET=6,
    KC_JAVELIN=7,
    KC_REMOTE_MISSILE=8
};

enum KillCamEntityRestState
{
    KC_ENT_MOVING=0,
    KC_ENT_AT_REST=1,
    KC_ENT_STUCK_GROUND=2,
    KC_ENT_STUCK_WALL=3
};

struct cg_s// Size=0xeea00 (Id=4505)
{
    union // Size=0xee4c8 (Id=0)
    {
        struct playerState_s predictedPlayerState;// Offset=0x0 Size=0x3180
        struct centity_s predictedPlayerEntity;// Offset=0x3180 Size=0x1f4
        struct playerEntity_t playerEntity;// Offset=0x3374 Size=0x20
        int predictedErrorTime;// Offset=0x3394 Size=0x4
        float predictedError[3];// Offset=0x3398 Size=0xc
        int clientNum;// Offset=0x33a4 Size=0x4
        int localClientNum;// Offset=0x33a8 Size=0x4
        enum DemoType demoType;// Offset=0x33ac Size=0x4
        enum CubemapShot cubemapShot;// Offset=0x33b0 Size=0x4
        int cubemapSize;// Offset=0x33b4 Size=0x4
        int renderScreen;// Offset=0x33b8 Size=0x4
        int latestSnapshotNum;// Offset=0x33bc Size=0x4
        int latestSnapshotTime;// Offset=0x33c0 Size=0x4
        struct snapshot_s * snap;// Offset=0x33c4 Size=0x4
        struct snapshot_s * nextSnap;// Offset=0x33c8 Size=0x4
        unsigned char __align0[52];// Offset=0x33cc Size=0x34
        struct snapshot_s activeSnapshots[2];// Offset=0x3400 Size=0x67800
        float frameInterpolation;// Offset=0x6ac00 Size=0x4
        int frametime;// Offset=0x6ac04 Size=0x4
        int time;// Offset=0x6ac08 Size=0x4
        int oldTime;// Offset=0x6ac0c Size=0x4
        int physicsTime;// Offset=0x6ac10 Size=0x4
        int mapRestart;// Offset=0x6ac14 Size=0x4
        int renderingThirdPerson;// Offset=0x6ac18 Size=0x4
        float landChange;// Offset=0x6ac1c Size=0x4
        int landTime;// Offset=0x6ac20 Size=0x4
        float heightToCeiling;// Offset=0x6ac24 Size=0x4
        struct refdef_t refdef;// Offset=0x6ac28 Size=0x3f60
        float refdefViewAngles[3];// Offset=0x6eb88 Size=0xc
        float baseGunAngles[3];// Offset=0x6eb94 Size=0xc
        float aimAssistEyeOrigin[3];// Offset=0x6eba0 Size=0xc
        float aimAssistViewOrigin[3];// Offset=0x6ebac Size=0xc
        float aimAssistViewAngles[3];// Offset=0x6ebb8 Size=0xc
        float thirdPersonGunPitch;// Offset=0x6ebc4 Size=0x4
        float thirdPersonGunYaw;// Offset=0x6ebc8 Size=0x4
        float thirdPersonAdsLerp;// Offset=0x6ebcc Size=0x4
        float swayViewAngles[3];// Offset=0x6ebd0 Size=0xc
        float swayAngles[3];// Offset=0x6ebdc Size=0xc
        float swayOffset[3];// Offset=0x6ebe8 Size=0xc
        float recoilAngles[3];// Offset=0x6ebf4 Size=0xc
        float recoilSpeed[3];// Offset=0x6ec00 Size=0xc
        int iEntityLastType[2048];// Offset=0x6ec0c Size=0x2000
        struct XModel * pEntityLastXModel[2048];// Offset=0x70c0c Size=0x2000
        float zoomSensitivity;// Offset=0x72c0c Size=0x4
        int vehicleInitView;// Offset=0x72c10 Size=0x4
        float prevVehicleInvAxis[3][3];// Offset=0x72c14 Size=0x24
        char objectiveText[1024];// Offset=0x72c38 Size=0x400
        char scriptMainMenu[256];// Offset=0x73038 Size=0x100
        int scoresRequestTime;// Offset=0x73138 Size=0x4
        int numScores;// Offset=0x7313c Size=0x4
        int teamScores[4];// Offset=0x73140 Size=0x10
        int teamPings[4];// Offset=0x73150 Size=0x10
        int teamPlayers[4];// Offset=0x73160 Size=0x10
        struct score_t scores[18];// Offset=0x73170 Size=0x318
        int scoreLimit;// Offset=0x73488 Size=0x4
        int scoreFadeTime;// Offset=0x7348c Size=0x4
        int scoresTop;// Offset=0x73490 Size=0x4
        int scoresOffBottom;// Offset=0x73494 Size=0x4
        int scoresBottom;// Offset=0x73498 Size=0x4
        int selectedGamerIndex;// Offset=0x7349c Size=0x4
        int bannerLines[4];// Offset=0x734a0 Size=0x10
        unsigned long long selectedGamerXuid;// Offset=0x734b0 Size=0x8
        int unmutableNoticeTime;// Offset=0x734b8 Size=0x4
        int crosshairClientNum;// Offset=0x734bc Size=0x4
        int crosshairClientLastTime;// Offset=0x734c0 Size=0x4
        int crosshairClientStartTime;// Offset=0x734c4 Size=0x4
        int cursorHintIcon;// Offset=0x734c8 Size=0x4
        int cursorHintEntType;// Offset=0x734cc Size=0x4
        int cursorHintTime;// Offset=0x734d0 Size=0x4
        int cursorHintFade;// Offset=0x734d4 Size=0x4
        int cursorHintString;// Offset=0x734d8 Size=0x4
        int cursorHintDualWield;// Offset=0x734dc Size=0x4
        int lastClipFlashTime;// Offset=0x734e0 Size=0x4
        enum InvalidCmdHintType invalidCmdHintType;// Offset=0x734e4 Size=0x4
        int invalidCmdHintWeapon;// Offset=0x734e8 Size=0x4
        int invalidCmdHintTime;// Offset=0x734ec Size=0x4
        int lastHealthPulseTime;// Offset=0x734f0 Size=0x4
        int lastHealthLerpDelay;// Offset=0x734f4 Size=0x4
        int lastHealthClient;// Offset=0x734f8 Size=0x4
        float lastHealth;// Offset=0x734fc Size=0x4
        int showHud;// Offset=0x73500 Size=0x4
        float bloodOverlayAlpha;// Offset=0x73504 Size=0x4
        int lastStance;// Offset=0x73508 Size=0x4
        int lastStanceChangeTime;// Offset=0x7350c Size=0x4
        int lastStanceFlashTime;// Offset=0x73510 Size=0x4
        int voiceTime;// Offset=0x73514 Size=0x4
        unsigned int weaponSelect;// Offset=0x73518 Size=0x4
        int weaponSelectTime;// Offset=0x7351c Size=0x4
        unsigned int weaponLatestPrimaryIdx;// Offset=0x73520 Size=0x4
        unsigned short primaryWeaponForAlt[1200];// Offset=0x73524 Size=0x960
        unsigned int prevViewmodelWeapon;// Offset=0x73e84 Size=0x4
        int prevDualWielding;// Offset=0x73e88 Size=0x4
        int equippedOffHand;// Offset=0x73e8c Size=0x4
        struct viewDamage_t viewDamage[12];// Offset=0x73e90 Size=0x330
        int damageTime;// Offset=0x741c0 Size=0x4
        float damageX;// Offset=0x741c4 Size=0x4
        float damageY;// Offset=0x741c8 Size=0x4
        float damageValue;// Offset=0x741cc Size=0x4
        float viewFade;// Offset=0x741d0 Size=0x4
        int weapIdleTime;// Offset=0x741d4 Size=0x4
        int v_dmg_time;// Offset=0x741d8 Size=0x4
        int v_dmg_stun_time;// Offset=0x741dc Size=0x4
        float v_dmg_pitch;// Offset=0x741e0 Size=0x4
        float v_dmg_roll;// Offset=0x741e4 Size=0x4
        float xyspeed;// Offset=0x741e8 Size=0x4
        float kickAVel[3];// Offset=0x741ec Size=0xc
        float kickAngles[3];// Offset=0x741f8 Size=0xc
        float offsetAngles[3];// Offset=0x74204 Size=0xc
        float gunPitch;// Offset=0x74210 Size=0x4
        float gunYaw;// Offset=0x74214 Size=0x4
        float gunXOfs;// Offset=0x74218 Size=0x4
        float gunYOfs;// Offset=0x7421c Size=0x4
        float gunZOfs;// Offset=0x74220 Size=0x4
        float viewModelAxis[4][3];// Offset=0x74224 Size=0x30
        float rumbleScale;// Offset=0x74254 Size=0x4
        float compassNorthYaw;// Offset=0x74258 Size=0x4
        float compassNorth[2];// Offset=0x7425c Size=0x8
        struct Material * compassMapMaterial;// Offset=0x74264 Size=0x4
        float compassMapUpperLeft[2];// Offset=0x74268 Size=0x8
        float compassMapWorldSize[2];// Offset=0x74270 Size=0x8
        int compassFadeTime;// Offset=0x74278 Size=0x4
        int healthFadeTime;// Offset=0x7427c Size=0x4
        int ammoFadeTime;// Offset=0x74280 Size=0x4
        int stanceFadeTime;// Offset=0x74284 Size=0x4
        int sprintFadeTime;// Offset=0x74288 Size=0x4
        int offhandFadeTime;// Offset=0x7428c Size=0x4
        int offhandFlashTime;// Offset=0x74290 Size=0x4
        struct shellshock_t shellshock;// Offset=0x74294 Size=0x20
        struct <unnamed-type-testShock>// Size=0x8 (Id=51023)
        {
            int time;// Offset=0x0 Size=0x4
            int duration;// Offset=0x4 Size=0x4
        };
        unsigned char __align1[475820];// Offset=0x8 Size=0x742ac
        struct cg_s::<unnamed-type-testShock> testShock;// Offset=0x742b4 Size=0x8
        int holdBreathTime;// Offset=0x742bc Size=0x4
        int holdBreathInTime;// Offset=0x742c0 Size=0x4
        int holdBreathDelay;// Offset=0x742c4 Size=0x4
        float holdBreathFrac;// Offset=0x742c8 Size=0x4
        bool painVisionActive;// Offset=0x742cc Size=0x1
        unsigned char __align2[3];// Offset=0x742cd Size=0x3
        float painVisionLerp;// Offset=0x742d0 Size=0x4
        bool painVisionSoundActive;// Offset=0x742d4 Size=0x1
        unsigned char __align3[3];// Offset=0x742d5 Size=0x3
        struct PlayerDiveView diveView;// Offset=0x742d8 Size=0x8
        float radarProgress;// Offset=0x742e0 Size=0x4
        float selectedLocation[2];// Offset=0x742e4 Size=0x8
        float selectedLocationAngle;// Offset=0x742ec Size=0x4
        struct SprintState sprintStates;// Offset=0x742f0 Size=0x14
        int adsViewErrorDone;// Offset=0x74304 Size=0x4
        int inKillCam;// Offset=0x74308 Size=0x4
        bool killCamFirstFrameRan;// Offset=0x7430c Size=0x1
        unsigned char __align4[3];// Offset=0x7430d Size=0x3
        int killCamEntity;// Offset=0x74310 Size=0x4
        int invalidKillCamEntity;// Offset=0x74314 Size=0x4
        enum KillCamEntityType killCamEntityType;// Offset=0x74318 Size=0x4
        float killCamLastEntityOrg[3];// Offset=0x7431c Size=0xc
        float killCamLastEntityAngles[3];// Offset=0x74328 Size=0xc
        enum KillCamEntityRestState killCamEntityRestState;// Offset=0x74334 Size=0x4
        int killCamLookAtEntity;// Offset=0x74338 Size=0x4
        float killCamLookAt[3];// Offset=0x7433c Size=0xc
        float killCamHelicopterOffset[3];// Offset=0x74348 Size=0xc
        int killCamStoppedTime;// Offset=0x74354 Size=0x4
        float killCamStoppedDecelTime;// Offset=0x74358 Size=0x4
        float killCamStoppedPos[3];// Offset=0x7435c Size=0xc
        float killCamStoppedVel[3];// Offset=0x74368 Size=0xc
        float killCamPrevBombOrigin[3];// Offset=0x74374 Size=0xc
        int killCamLerpEndTime;// Offset=0x74380 Size=0x4
        float killCamOldViewAngles[3];// Offset=0x74384 Size=0xc
        float killCamOldViewOrg[3];// Offset=0x74390 Size=0xc
        unsigned char __align5[4];// Offset=0x7439c Size=0x4
        struct bgs_t bgs;// Offset=0x743a0 Size=0x795d8
        struct cpose_t viewModelPose;// Offset=0xed978 Size=0x60
        struct cpose_t viewModelPoseLeftHand;// Offset=0xed9d8 Size=0x60
        struct visionSetVars_t visionSetPreLoaded[4];// Offset=0xeda38 Size=0x1b0
        char visionSetPreLoadedName[4][64];// Offset=0xedbe8 Size=0x100
        struct visionSetVars_t visionSetFrom[5];// Offset=0xedce8 Size=0x21c
        struct visionSetVars_t visionSetTo[5];// Offset=0xedf04 Size=0x21c
        struct visionSetVars_t visionSetCurrent[5];// Offset=0xee120 Size=0x21c
        struct visionSetLerpData_t visionSetLerpData[5];// Offset=0xee33c Size=0x3c
        char visionName[5][64];// Offset=0xee378 Size=0x140
        int extraButtons;// Offset=0xee4b8 Size=0x4
        bool playerTeleported;// Offset=0xee4bc Size=0x1
        unsigned char __align6[3];// Offset=0xee4bd Size=0x3
        int stepViewStart;// Offset=0xee4c0 Size=0x4
        float stepViewChange;// Offset=0xee4c4 Size=0x4
        struct <unnamed-type-lastFrame>// Size=0x4 (Id=51078)
        {
            float aimSpreadScale;// Offset=0x0 Size=0x4
        };
        unsigned char __align7[976068];// Offset=0x4 Size=0xee4c4
    };
    struct cg_s::<unnamed-type-lastFrame> lastFrame;// Offset=0xee4c8 Size=0x4
    int oldCommandTime;// Offset=0xee4cc Size=0x4
    float oldOrigin[3];// Offset=0xee4d0 Size=0xc
    float oldViewangles[3];// Offset=0xee4dc Size=0xc
    struct transPlayerState_t oldTransPlayerState;// Offset=0xee4e8 Size=0x30
    struct hudElemSoundInfo_t hudElemSound[32];// Offset=0xee518 Size=0x80
    struct HudGrenade hudGrenades[32];// Offset=0xee598 Size=0x200
    unsigned int hudGrenadeCount;// Offset=0xee798 Size=0x4
    struct HudSplash splashes[4];// Offset=0xee79c Size=0x40
    bool remoteMissileCam;// Offset=0xee7dc Size=0x1
    bool remoteMissileCamInitialized;// Offset=0xee7dd Size=0x1
    unsigned char __align8[2];// Offset=0xee7de Size=0x2
    float remoteMissileCamAngles[3];// Offset=0xee7e0 Size=0xc
    unsigned int teamFx[1];// Offset=0xee7ec Size=0x4
    unsigned int teamFxPlaying[1];// Offset=0xee7f0 Size=0x4
    int killcamFXWeapons[5];// Offset=0xee7f4 Size=0x14
    float radarJammedDist;// Offset=0xee808 Size=0x4
    float turretFov;// Offset=0xee80c Size=0x4
    bool thermalVisionActive;// Offset=0xee810 Size=0x1
    unsigned char __align9[3];// Offset=0xee811 Size=0x3
    unsigned int weaponAltWasUsedLast[38];// Offset=0xee814 Size=0x98
    float motionTrackerPrevCenter[2];// Offset=0xee8ac Size=0x8
    float motionTrackerProgress;// Offset=0xee8b4 Size=0x4
    float targetPosCached[2];// Offset=0xee8b8 Size=0x8
    int targetPosCachedTime;// Offset=0xee8c0 Size=0x4
    int delayedShieldHitEventsCount;// Offset=0xee8c4 Size=0x4
    struct ShieldHitDelayedEvent delayedShieldHitEvents[2];// Offset=0xee8c8 Size=0x8
    struct Material * thermalBodyMaterial;// Offset=0xee8d0 Size=0x4
    float streamOrigin[3];// Offset=0xee8d4 Size=0xc
    bool streamOriginValid;// Offset=0xee8e0 Size=0x1
    unsigned char __align10[3];// Offset=0xee8e1 Size=0x3
    struct CachedPlayerCard cachedPlayerCard[18];// Offset=0xee8e4 Size=0xd8
};

struct cg_s::<unnamed-type-lastFrame>// Size=0x4 (Id=4506)
{
    float aimSpreadScale;// Offset=0x0 Size=0x4
};

struct cg_s::<unnamed-type-testShock>// Size=0x8 (Id=4507)
{
    int time;// Offset=0x0 Size=0x4
    int duration;// Offset=0x4 Size=0x4
};

struct UiContext// Size=0x167c (Id=4508)
{
    union // Size=0x10 (Id=0)
    {
        int localClientNum;// Offset=0x0 Size=0x4
        float bias;// Offset=0x4 Size=0x4
        int realTime;// Offset=0x8 Size=0x4
        int frameTime;// Offset=0xc Size=0x4
        struct <unnamed-type-cursor>// Size=0x8 (Id=51119)
        {
            float x;// Offset=0x0 Size=0x4
            float y;// Offset=0x4 Size=0x4
        };
        unsigned char __align0[8];// Offset=0x8 Size=0x8
    };
    struct UiContext::<unnamed-type-cursor> cursor;// Offset=0x10 Size=0x8
    int isCursorVisible;// Offset=0x18 Size=0x4
    int paintFull;// Offset=0x1c Size=0x4
    int screenWidth;// Offset=0x20 Size=0x4
    int screenHeight;// Offset=0x24 Size=0x4
    float screenAspect;// Offset=0x28 Size=0x4
    float FPS;// Offset=0x2c Size=0x4
    float blurRadiusOut;// Offset=0x30 Size=0x4
    struct menuDef_t * Menus[640];// Offset=0x34 Size=0xa00
    int menuCount;// Offset=0xa34 Size=0x4
    struct menuDef_t * menuStack[16];// Offset=0xa38 Size=0x40
    int openMenuCount;// Offset=0xa78 Size=0x4
    struct UILocalVarContext localVars;// Offset=0xa7c Size=0xc00
};

struct UiContext::<unnamed-type-cursor>// Size=0x8 (Id=4509)
{
    float x;// Offset=0x0 Size=0x4
    float y;// Offset=0x4 Size=0x4
};

struct Operand// Size=0x8 (Id=4510)
{
    enum expDataType dataType;// Offset=0x0 Size=0x4
    union operandInternalDataUnion internals;// Offset=0x4 Size=0x4
};

union entryInternalData// Size=0x8 (Id=4511)
{
    enum operationEnum op;// Offset=0x0 Size=0x4
    struct Operand operand;// Offset=0x0 Size=0x8
};

enum clc_ops_e
{
    clc_move=0,
    clc_moveNoDelta=1,
    clc_clientCommand=2,
    clc_EOF=3
};

struct DObjModel_s// Size=0x8 (Id=4513)
{
    struct XModel * model;// Offset=0x0 Size=0x4
    unsigned short boneName;// Offset=0x4 Size=0x2
    bool ignoreCollision;// Offset=0x6 Size=0x1
};

struct lerpFrame_t// Size=0x30 (Id=4514)
{
    float yawAngle;// Offset=0x0 Size=0x4
    int yawing;// Offset=0x4 Size=0x4
    float pitchAngle;// Offset=0x8 Size=0x4
    int pitching;// Offset=0xc Size=0x4
    int animationNumber;// Offset=0x10 Size=0x4
    struct animation_s * animation;// Offset=0x14 Size=0x4
    int animationTime;// Offset=0x18 Size=0x4
    float oldFramePos[3];// Offset=0x1c Size=0xc
    float animSpeedScale;// Offset=0x28 Size=0x4
    int oldFrameSnapshotTime;// Offset=0x2c Size=0x4
};

struct PartyHostData// Size=0x18 (Id=4515)
{
    int partyStateChangeTime;// Offset=0x0 Size=0x4
    int expectedPlayers;// Offset=0x4 Size=0x4
    int vetoPassTime;// Offset=0x8 Size=0x4
    bool vetoPossible;// Offset=0xc Size=0x1
    bool preloadingMap;// Offset=0xd Size=0x1
    bool firstLobby;// Offset=0xe Size=0x1
    bool migrateAfterRound;// Offset=0xf Size=0x1
    bool stopAfterRound;// Offset=0x10 Size=0x1
    unsigned char __align0[3];// Offset=0x11 Size=0x3
    int partyCreationTime;// Offset=0x14 Size=0x4
};

struct snapshot_s// Size=0x33c00 (Id=4516)
{
    struct playerState_s ps;// Offset=0x0 Size=0x3180
    int snapFlags;// Offset=0x3180 Size=0x4
    int ping;// Offset=0x3184 Size=0x4
    int serverTime;// Offset=0x3188 Size=0x4
    int numEntities;// Offset=0x318c Size=0x4
    int numClients;// Offset=0x3190 Size=0x4
    struct entityState_s entities[768];// Offset=0x3194 Size=0x30000
    struct clientState_s clients[18];// Offset=0x33194 Size=0xa68
    int serverCommandSequence;// Offset=0x33bfc Size=0x4
};

struct CachedPlayerCard// Size=0xc (Id=4517)
{
    unsigned short iconIndex;// Offset=0x0 Size=0x2
    unsigned short titleIndex;// Offset=0x2 Size=0x2
    struct Material * iconMaterial;// Offset=0x4 Size=0x4
    struct Material * titleMaterial;// Offset=0x8 Size=0x4
};

struct centity_s// Size=0x1f4 (Id=4518)
{
    struct cpose_t pose;// Offset=0x0 Size=0x60
    struct LerpEntityState prevState;// Offset=0x60 Size=0x70
    struct entityState_s nextState;// Offset=0xd0 Size=0x100
    int flags;// Offset=0x1d0 Size=0x4
    unsigned char tracerDrawRateCounter;// Offset=0x1d4 Size=0x1
    unsigned char weaponVisTestCounter;// Offset=0x1d5 Size=0x1
    unsigned char __align0[2];// Offset=0x1d6 Size=0x2
    int previousEventSequence;// Offset=0x1d8 Size=0x4
    int pickupPredictionTime;// Offset=0x1dc Size=0x4
    float lightingOrigin[3];// Offset=0x1e0 Size=0xc
    struct XAnimTree_s * tree;// Offset=0x1ec Size=0x4
    struct centity_s * updateDelayedNext;// Offset=0x1f0 Size=0x4
};

struct clientControllers_t// Size=0x48 (Id=4519)
{
    float angles[4][3];// Offset=0x0 Size=0x30
    float tag_origin_angles[3];// Offset=0x30 Size=0xc
    float tag_origin_offset[3];// Offset=0x3c Size=0xc
};

struct MenuEventHandler// Size=0x8 (Id=4520)
{
    union EventData eventData;// Offset=0x0 Size=0x4
    unsigned char eventType;// Offset=0x4 Size=0x1
};

union EventData// Size=0x4 (Id=4521)
{
    char * unconditionalScript;// Offset=0x0 Size=0x4
    struct ConditionalScript * conditionalScript;// Offset=0x0 Size=0x4
    struct MenuEventHandlerSet * elseScript;// Offset=0x0 Size=0x4
    struct SetLocalVarData * setLocalVarData;// Offset=0x0 Size=0x4
};

struct SubpartyInfo// Size=0x58 (Id=4522)
{
    int members[18];// Offset=0x0 Size=0x48
    int count;// Offset=0x48 Size=0x4
    int skill;// Offset=0x4c Size=0x4
    int score;// Offset=0x50 Size=0x4
    int team;// Offset=0x54 Size=0x4
};

struct score_t// Size=0x2c (Id=4523)
{
    int client;// Offset=0x0 Size=0x4
    int score;// Offset=0x4 Size=0x4
    int ping;// Offset=0x8 Size=0x4
    int deaths;// Offset=0xc Size=0x4
    int team;// Offset=0x10 Size=0x4
    int kills;// Offset=0x14 Size=0x4
    int rank;// Offset=0x18 Size=0x4
    int assists;// Offset=0x1c Size=0x4
    int skill;// Offset=0x20 Size=0x4
    struct Material * hStatusIcon;// Offset=0x24 Size=0x4
    struct Material * hRankIcon;// Offset=0x28 Size=0x4
};

struct vector4 : public vector3// Size=0x40 (Id=4524)
{
    unsigned char __align0[48];// Offset=0x0 Size=0x30
    struct __vector4 w;// Offset=0x30 Size=0x10
};

struct shellshock_parms_t// Size=0x268 (Id=4525)
{
    union // Size=0x264 (Id=0)
    {
        struct <unnamed-type-screenBlend>// Size=0x14 (Id=51225)
        {
            int blurredFadeTime;// Offset=0x0 Size=0x4
            int blurredEffectTime;// Offset=0x4 Size=0x4
            int flashWhiteFadeTime;// Offset=0x8 Size=0x4
            int flashShotFadeTime;// Offset=0xc Size=0x4
            enum ShockViewTypes type;// Offset=0x10 Size=0x4
        };
        struct shellshock_parms_t::<unnamed-type-screenBlend> screenBlend;// Offset=0x0 Size=0x14
        struct <unnamed-type-view>// Size=0xc (Id=51232)
        {
            int fadeTime;// Offset=0x0 Size=0x4
            float kickRate;// Offset=0x4 Size=0x4
            float kickRadius;// Offset=0x8 Size=0x4
        };
        unsigned char __align0[8];// Offset=0xc Size=0x8
        struct shellshock_parms_t::<unnamed-type-view> view;// Offset=0x14 Size=0xc
        struct <unnamed-type-sound>// Size=0x230 (Id=51237)
        {
            bool affect;// Offset=0x0 Size=0x1
            char loop[64];// Offset=0x1 Size=0x40
            char loopSilent[64];// Offset=0x41 Size=0x40
            char end[64];// Offset=0x81 Size=0x40
            char endAbort[64];// Offset=0xc1 Size=0x40
            unsigned char __align0[3];// Offset=0x101 Size=0x3
            int fadeInTime;// Offset=0x104 Size=0x4
            int fadeOutTime;// Offset=0x108 Size=0x4
            float drylevel;// Offset=0x10c Size=0x4
            float wetlevel;// Offset=0x110 Size=0x4
            char roomtype[16];// Offset=0x114 Size=0x10
            float channelvolume[64];// Offset=0x124 Size=0x100
            int modEndDelay;// Offset=0x224 Size=0x4
            int loopFadeTime;// Offset=0x228 Size=0x4
            int loopEndDelay;// Offset=0x22c Size=0x4
        };
        struct shellshock_parms_t::<unnamed-type-sound> sound;// Offset=0x20 Size=0x230
        struct <unnamed-type-lookControl>// Size=0x14 (Id=51253)
        {
            bool affect;// Offset=0x0 Size=0x1
            unsigned char __align0[3];// Offset=0x1 Size=0x3
            int fadeTime;// Offset=0x4 Size=0x4
            float mouseSensitivity;// Offset=0x8 Size=0x4
            float maxPitchSpeed;// Offset=0xc Size=0x4
            float maxYawSpeed;// Offset=0x10 Size=0x4
        };
        unsigned char __align1[572];// Offset=0x14 Size=0x23c
        struct shellshock_parms_t::<unnamed-type-lookControl> lookControl;// Offset=0x250 Size=0x14
        struct <unnamed-type-movement>// Size=0x1 (Id=51260)
        {
            bool affect;// Offset=0x0 Size=0x1
        };
        unsigned char __align2[611];// Offset=0x1 Size=0x263
    };
    struct shellshock_parms_t::<unnamed-type-movement> movement;// Offset=0x264 Size=0x1
};

struct weaponInfo_s// Size=0x20 (Id=4526)
{
    struct XModel * handModel;// Offset=0x0 Size=0x4
    struct XModel * gogglesModel;// Offset=0x4 Size=0x4
    struct XModel * knifeModel;// Offset=0x8 Size=0x4
    unsigned char weapModelIdx;// Offset=0xc Size=0x1
    bool hideReticle;// Offset=0xd Size=0x1
    unsigned char __align0[2];// Offset=0xe Size=0x2
    int registered;// Offset=0x10 Size=0x4
    char * translatedDisplayName;// Offset=0x14 Size=0x4
    char * translatedModename;// Offset=0x18 Size=0x4
    char * translatedAIOverlayDescription;// Offset=0x1c Size=0x4
};

struct viewDamage_t// Size=0x44 (Id=4527)
{
    int time;// Offset=0x0 Size=0x4
    int duration;// Offset=0x4 Size=0x4
    float dir[3];// Offset=0x8 Size=0xc
    float yaw;// Offset=0x14 Size=0x4
    float playerYaw;// Offset=0x18 Size=0x4
    float playerDir[3][3];// Offset=0x1c Size=0x24
    bool stun;// Offset=0x40 Size=0x1
};

struct scr_anim_s// Size=0x4 (Id=4528)
{
    union // Size=0x4 (Id=0)
    {
        unsigned short index;// Offset=0x0 Size=0x2
        unsigned short tree;// Offset=0x2 Size=0x2
        char * linkPointer;// Offset=0x0 Size=0x4
    };
};

enum UILocalVarType
{
    UILOCALVAR_INT=0,
    UILOCALVAR_FLOAT=1,
    UILOCALVAR_STRING=2
};

struct UILocalVar// Size=0xc (Id=4530)
{
    union // Size=0x8 (Id=0)
    {
        enum UILocalVarType type;// Offset=0x0 Size=0x4
        char * name;// Offset=0x4 Size=0x4
        union <unnamed-type-u>// Size=0x4 (Id=51287)
        {
            int integer;// Offset=0x0 Size=0x4
            float value;// Offset=0x0 Size=0x4
            char * string;// Offset=0x0 Size=0x4
        };
        unsigned char __align0[4];// Offset=0x4 Size=0x4
    };
    union UILocalVar::<unnamed-type-u> u;// Offset=0x8 Size=0x4
};

union UILocalVar::<unnamed-type-u>// Size=0x4 (Id=4531)
{
    int integer;// Offset=0x0 Size=0x4
    float value;// Offset=0x0 Size=0x4
    char * string;// Offset=0x0 Size=0x4
};

struct HudSplash// Size=0x10 (Id=4532)
{
    int splashIndex;// Offset=0x0 Size=0x4
    int splashStartTime;// Offset=0x4 Size=0x4
    int splashDuration;// Offset=0x8 Size=0x4
    int optionalNumParam;// Offset=0xc Size=0x4
};

struct multiDef_s// Size=0x188 (Id=4533)
{
    char * dvarList[32];// Offset=0x0 Size=0x80
    char * dvarStr[32];// Offset=0x80 Size=0x80
    float dvarValue[32];// Offset=0x100 Size=0x80
    int count;// Offset=0x180 Size=0x4
    int strDef;// Offset=0x184 Size=0x4
};

struct GfxLightScale// Size=0x8 (Id=4534)
{
    float diffuseScale;// Offset=0x0 Size=0x4
    float specularScale;// Offset=0x4 Size=0x4
};

enum visionSetLerpStyle_t
{
    VISIONSETLERP_UNDEFINED=0,
    VISIONSETLERP_NONE=1,
    VISIONSETLERP_TO_LINEAR=2,
    VISIONSETLERP_TO_SMOOTH=3,
    VISIONSETLERP_BACKFORTH_LINEAR=4,
    VISIONSETLERP_BACKFORTH_SMOOTH=5
};

struct visionSetLerpData_t// Size=0xc (Id=4536)
{
    int timeStart;// Offset=0x0 Size=0x4
    int timeDuration;// Offset=0x4 Size=0x4
    enum visionSetLerpStyle_t style;// Offset=0x8 Size=0x4
};

struct RefdefView// Size=0x3c (Id=4537)
{
    float tanHalfFovX;// Offset=0x0 Size=0x4
    float tanHalfFovY;// Offset=0x4 Size=0x4
    float org[3];// Offset=0x8 Size=0xc
    float axis[3][3];// Offset=0x14 Size=0x24
    float zNear;// Offset=0x38 Size=0x4
};

struct itemDef_s// Size=0x1f4 (Id=4538)
{
    struct windowDef_t window;// Offset=0x0 Size=0xb0
    struct rectDef_s textRect[4];// Offset=0xb0 Size=0x50
    int type;// Offset=0x100 Size=0x4
    int dataType;// Offset=0x104 Size=0x4
    int alignment;// Offset=0x108 Size=0x4
    int fontEnum;// Offset=0x10c Size=0x4
    int textAlignMode;// Offset=0x110 Size=0x4
    float textalignx;// Offset=0x114 Size=0x4
    float textaligny;// Offset=0x118 Size=0x4
    float textscale;// Offset=0x11c Size=0x4
    int textStyle;// Offset=0x120 Size=0x4
    int gameMsgWindowIndex;// Offset=0x124 Size=0x4
    int gameMsgWindowMode;// Offset=0x128 Size=0x4
    char * text;// Offset=0x12c Size=0x4
    int itemFlags;// Offset=0x130 Size=0x4
    struct menuDef_t * parent;// Offset=0x134 Size=0x4
    struct MenuEventHandlerSet * mouseEnterText;// Offset=0x138 Size=0x4
    struct MenuEventHandlerSet * mouseExitText;// Offset=0x13c Size=0x4
    struct MenuEventHandlerSet * mouseEnter;// Offset=0x140 Size=0x4
    struct MenuEventHandlerSet * mouseExit;// Offset=0x144 Size=0x4
    struct MenuEventHandlerSet * action;// Offset=0x148 Size=0x4
    struct MenuEventHandlerSet * accept;// Offset=0x14c Size=0x4
    struct MenuEventHandlerSet * onFocus;// Offset=0x150 Size=0x4
    struct MenuEventHandlerSet * leaveFocus;// Offset=0x154 Size=0x4
    char * dvar;// Offset=0x158 Size=0x4
    char * dvarTest;// Offset=0x15c Size=0x4
    struct ItemKeyHandler * onKey;// Offset=0x160 Size=0x4
    char * enableDvar;// Offset=0x164 Size=0x4
    int dvarFlags;// Offset=0x168 Size=0x4
    struct snd_alias_list_t * focusSound;// Offset=0x16c Size=0x4
    float special;// Offset=0x170 Size=0x4
    int cursorPos[4];// Offset=0x174 Size=0x10
    union itemDefData_t typeData;// Offset=0x184 Size=0x4
    int imageTrack;// Offset=0x188 Size=0x4
    struct Statement_s * visibleExp;// Offset=0x18c Size=0x4
    struct Statement_s * textExp;// Offset=0x190 Size=0x4
    struct Statement_s * materialExp;// Offset=0x194 Size=0x4
    struct Statement_s * disabledExp;// Offset=0x198 Size=0x4
    struct Statement_s * rectXExp;// Offset=0x19c Size=0x4
    struct Statement_s * rectYExp;// Offset=0x1a0 Size=0x4
    struct Statement_s * rectWExp;// Offset=0x1a4 Size=0x4
    struct Statement_s * rectHExp;// Offset=0x1a8 Size=0x4
    struct Statement_s * forecolorRExp;// Offset=0x1ac Size=0x4
    struct Statement_s * forecolorGExp;// Offset=0x1b0 Size=0x4
    struct Statement_s * forecolorBExp;// Offset=0x1b4 Size=0x4
    struct Statement_s * forecolorAExp;// Offset=0x1b8 Size=0x4
    struct Statement_s * glowColorRExp;// Offset=0x1bc Size=0x4
    struct Statement_s * glowColorGExp;// Offset=0x1c0 Size=0x4
    struct Statement_s * glowColorBExp;// Offset=0x1c4 Size=0x4
    struct Statement_s * glowColorAExp;// Offset=0x1c8 Size=0x4
    float glowColor[4];// Offset=0x1cc Size=0x10
    bool decayActive;// Offset=0x1dc Size=0x1
    unsigned char __align0[3];// Offset=0x1dd Size=0x3
    int fxBirthTime;// Offset=0x1e0 Size=0x4
    int fxLetterTime;// Offset=0x1e4 Size=0x4
    int fxDecayStartTime;// Offset=0x1e8 Size=0x4
    int fxDecayDuration;// Offset=0x1ec Size=0x4
    int lastSoundPlayedTime;// Offset=0x1f0 Size=0x4
};

struct cgs_t// Size=0x3d50 (Id=4539)
{
    int viewX;// Offset=0x0 Size=0x4
    int viewY;// Offset=0x4 Size=0x4
    int viewWidth;// Offset=0x8 Size=0x4
    int viewHeight;// Offset=0xc Size=0x4
    float viewAspect;// Offset=0x10 Size=0x4
    int serverCommandSequence;// Offset=0x14 Size=0x4
    int processedSnapshotNum;// Offset=0x18 Size=0x4
    int localServer;// Offset=0x1c Size=0x4
    char gametype[32];// Offset=0x20 Size=0x20
    char szHostName[256];// Offset=0x40 Size=0x100
    bool hardcore;// Offset=0x140 Size=0x1
    unsigned char __align0[3];// Offset=0x141 Size=0x3
    int maxclients;// Offset=0x144 Size=0x4
    int privateClients;// Offset=0x148 Size=0x4
    char mapname[64];// Offset=0x14c Size=0x40
    int gameEndTime;// Offset=0x18c Size=0x4
    int voteTime;// Offset=0x190 Size=0x4
    int voteYes;// Offset=0x194 Size=0x4
    int voteNo;// Offset=0x198 Size=0x4
    char voteString[256];// Offset=0x19c Size=0x100
    int redCrosshair;// Offset=0x29c Size=0x4
    struct XModel * gameModels[512];// Offset=0x2a0 Size=0x800
    struct FxEffectDef * smokeGrenadeFx;// Offset=0xaa0 Size=0x4
    struct shellshock_parms_t holdBreathParams;// Offset=0xaa4 Size=0x268
    char teamChatMsgs[8][193];// Offset=0xd0c Size=0x608
    int teamChatMsgTimes[8];// Offset=0x1314 Size=0x20
    int teamChatPos;// Offset=0x1334 Size=0x4
    int teamLastChatPos;// Offset=0x1338 Size=0x4
    float compassWidth;// Offset=0x133c Size=0x4
    float compassHeight;// Offset=0x1340 Size=0x4
    float compassY;// Offset=0x1344 Size=0x4
    struct clientInfo_t corpseinfo[8];// Offset=0x1348 Size=0x2a00
    bool entUpdateToggleContextKey;// Offset=0x3d48 Size=0x1
    unsigned char __align1[3];// Offset=0x3d49 Size=0x3
    struct XAnim_s * helicopterAnims;// Offset=0x3d4c Size=0x4
};

struct refdef_t// Size=0x3f60 (Id=4540)
{
    unsigned int x;// Offset=0x0 Size=0x4
    unsigned int y;// Offset=0x4 Size=0x4
    unsigned int width;// Offset=0x8 Size=0x4
    unsigned int height;// Offset=0xc Size=0x4
    struct RefdefView view;// Offset=0x10 Size=0x3c
    float viewOffset[3];// Offset=0x4c Size=0xc
    int time;// Offset=0x58 Size=0x4
    float blurRadius;// Offset=0x5c Size=0x4
    struct GfxDepthOfField dof;// Offset=0x60 Size=0x20
    struct GfxFilm film;// Offset=0x80 Size=0x3c
    struct GfxGlow glow;// Offset=0xbc Size=0x14
    struct GfxLightScale charPrimaryLightScale;// Offset=0xd0 Size=0x8
    struct GfxCompositeFx waterSheetingFx;// Offset=0xd8 Size=0x6c
    struct GfxLight primaryLights[248];// Offset=0x144 Size=0x3e00
    struct GfxViewport scissorViewport;// Offset=0x3f44 Size=0x10
    bool useScissorViewport;// Offset=0x3f54 Size=0x1
    bool viewModelHasDistortion;// Offset=0x3f55 Size=0x1
    unsigned char forceSunShadowsGenerate;// Offset=0x3f56 Size=0x1
    bool halfResParticles;// Offset=0x3f57 Size=0x1
    bool playerTeleported;// Offset=0x3f58 Size=0x1
    unsigned char __align0[3];// Offset=0x3f59 Size=0x3
    int localClientNum;// Offset=0x3f5c Size=0x4
};

union operandInternalDataUnion// Size=0x4 (Id=4541)
{
    int intVal;// Offset=0x0 Size=0x4
    float floatVal;// Offset=0x0 Size=0x4
    struct ExpressionString stringVal;// Offset=0x0 Size=0x4
    struct Statement_s * function;// Offset=0x0 Size=0x4
};

struct rectDef_s// Size=0x14 (Id=4542)
{
    float x;// Offset=0x0 Size=0x4
    float y;// Offset=0x4 Size=0x4
    float w;// Offset=0x8 Size=0x4
    float h;// Offset=0xc Size=0x4
    unsigned char horzAlign;// Offset=0x10 Size=0x1
    unsigned char vertAlign;// Offset=0x11 Size=0x1
};

enum visionSetMode_t
{
    VISIONSET_NORMAL=0,
    VISIONSET_NIGHT=1,
    VISIONSET_MISSILECAM=2,
    VISIONSET_THERMAL=3,
    VISIONSET_PAIN=4,
    VISIONSETCOUNT=5
};

struct ItemKeyHandler// Size=0xc (Id=4544)
{
    int key;// Offset=0x0 Size=0x4
    struct MenuEventHandlerSet * action;// Offset=0x4 Size=0x4
    struct ItemKeyHandler * next;// Offset=0x8 Size=0x4
};

struct StaticDvar// Size=0x8 (Id=4545)
{
    struct dvar_t * dvar;// Offset=0x0 Size=0x4
    char * dvarName;// Offset=0x4 Size=0x4
};

struct PartyMember// Size=0xc0 (Id=4546)
{
    unsigned char status;// Offset=0x0 Size=0x1
    bool headsetPresent;// Offset=0x1 Size=0x1
    char gamertag[32];// Offset=0x2 Size=0x20
    char clanAbbrev[5];// Offset=0x22 Size=0x5
    unsigned char __align0[1];// Offset=0x27 Size=0x1
    int qport;// Offset=0x28 Size=0x4
    char challenge[6];// Offset=0x2c Size=0x6
    unsigned char __align1[2];// Offset=0x32 Size=0x2
    int lastPacketTime;// Offset=0x34 Size=0x4
    int lastHeartbeatTime;// Offset=0x38 Size=0x4
    int lastPartyStateAck;// Offset=0x3c Size=0x4
    struct XNADDR xnaddr;// Offset=0x40 Size=0x24
    int availableMapPackFlags;// Offset=0x64 Size=0x4
    int ackedMembers;// Offset=0x68 Size=0x4
    struct XNKID privatePartyId;// Offset=0x6c Size=0x8
    int subpartyIndex;// Offset=0x74 Size=0x4
    int trueSkill;// Offset=0x78 Size=0x4
    int rank;// Offset=0x7c Size=0x4
    int prestige;// Offset=0x80 Size=0x4
    int team;// Offset=0x84 Size=0x4
    short score;// Offset=0x88 Size=0x2
    unsigned char __align2[2];// Offset=0x8a Size=0x2
    int deaths;// Offset=0x8c Size=0x4
    bool vetoedMap;// Offset=0x90 Size=0x1
    unsigned char __align3[3];// Offset=0x91 Size=0x3
    unsigned int playerCardIcon;// Offset=0x94 Size=0x4
    unsigned int playerCardTitle;// Offset=0x98 Size=0x4
    unsigned int playerCardNameplate;// Offset=0x9c Size=0x4
    int voiceConnectivityBits;// Offset=0xa0 Size=0x4
    bool invited;// Offset=0xa4 Size=0x1
    unsigned char __align4[3];// Offset=0xa5 Size=0x3
    int natType;// Offset=0xa8 Size=0x4
    unsigned char __align5[4];// Offset=0xac Size=0x4
    unsigned long long player;// Offset=0xb0 Size=0x8
    bool migrateHeardFrom;// Offset=0xb8 Size=0x1
};

struct BestHostData// Size=0x18 (Id=4547)
{
    int nominee;// Offset=0x0 Size=0x4
    int nomineeUpload;// Offset=0x4 Size=0x4
    int nomineeNAT;// Offset=0x8 Size=0x4
    bool nomineeOnLSP;// Offset=0xc Size=0x1
    unsigned char __align0[3];// Offset=0xd Size=0x3
    int lastHeardFrom;// Offset=0x10 Size=0x4
    int lastSentTo;// Offset=0x14 Size=0x4
};

struct QoSData// Size=0x4 (Id=4548)
{
    float percent;// Offset=0x0 Size=0x4
};

struct PlayerDiveView// Size=0x8 (Id=4549)
{
    float diveYaw;// Offset=0x0 Size=0x4
    float roll;// Offset=0x4 Size=0x4
};

union itemDefData_t// Size=0x4 (Id=4550)
{
    struct listBoxDef_s * listBox;// Offset=0x0 Size=0x4
    struct editFieldDef_s * editField;// Offset=0x0 Size=0x4
    struct multiDef_s * multi;// Offset=0x0 Size=0x4
    char * enumDvarName;// Offset=0x0 Size=0x4
    struct newsTickerDef_s * ticker;// Offset=0x0 Size=0x4
    struct textScrollDef_s * scroll;// Offset=0x0 Size=0x4
    void * data;// Offset=0x0 Size=0x4
};

struct Statement_s// Size=0x18 (Id=4551)
{
    int numEntries;// Offset=0x0 Size=0x4
    struct expressionEntry * entries;// Offset=0x4 Size=0x4
    struct ExpressionSupportingData * supportingData;// Offset=0x8 Size=0x4
    int lastExecuteTime;// Offset=0xc Size=0x4
    struct Operand lastResult;// Offset=0x10 Size=0x8
};

struct scr_animtree_t// Size=0x4 (Id=4552)
{
    struct XAnim_s * anims;// Offset=0x0 Size=0x4
};

struct animScriptCondition_t// Size=0xc (Id=4553)
{
    int index;// Offset=0x0 Size=0x4
    unsigned int value[2];// Offset=0x4 Size=0x8
};

struct hudElemSoundInfo_t// Size=0x4 (Id=4554)
{
    int lastPlayedTime;// Offset=0x0 Size=0x4
};

struct ExpressionString// Size=0x4 (Id=4555)
{
    char * string;// Offset=0x0 Size=0x4
};

struct msg_t// Size=0x28 (Id=4556)
{
    int overflowed;// Offset=0x0 Size=0x4
    int readOnly;// Offset=0x4 Size=0x4
    unsigned char * data;// Offset=0x8 Size=0x4
    unsigned char * splitData;// Offset=0xc Size=0x4
    int maxsize;// Offset=0x10 Size=0x4
    int cursize;// Offset=0x14 Size=0x4
    int splitSize;// Offset=0x18 Size=0x4
    int readcount;// Offset=0x1c Size=0x4
    int bit;// Offset=0x20 Size=0x4
    int lastEntityRef;// Offset=0x24 Size=0x4
};

struct StaticDvarList// Size=0x8 (Id=4557)
{
    int numStaticDvars;// Offset=0x0 Size=0x4
    struct StaticDvar ** staticDvars;// Offset=0x4 Size=0x4
};

union PackedTexCoords// Size=0x4 (Id=4558)
{
    unsigned int packed;// Offset=0x0 Size=0x4
};

struct StringList// Size=0x8 (Id=4559)
{
    int totalStrings;// Offset=0x0 Size=0x4
    char ** strings;// Offset=0x4 Size=0x4
};

struct expressionEntry// Size=0xc (Id=4560)
{
    int type;// Offset=0x0 Size=0x4
    union entryInternalData data;// Offset=0x4 Size=0x8
};

enum PlayerDiveState
{
    DIVE_NONE=0,
    DIVE_FORWARD=1,
    DIVE_FORWARDLEFT=2,
    DIVE_LEFT=3,
    DIVE_BACKLEFT=4,
    DIVE_BACK=5,
    DIVE_BACKRIGHT=6,
    DIVE_RIGHT=7,
    DIVE_FORWARDRIGHT=8
};

struct clientInfo_t// Size=0x540 (Id=4562)
{
    int infoValid;// Offset=0x0 Size=0x4
    int nextValid;// Offset=0x4 Size=0x4
    int clientNum;// Offset=0x8 Size=0x4
    char name[32];// Offset=0xc Size=0x20
    enum team_t team;// Offset=0x2c Size=0x4
    enum team_t oldteam;// Offset=0x30 Size=0x4
    int rank;// Offset=0x34 Size=0x4
    int prestige;// Offset=0x38 Size=0x4
    unsigned int perks[2];// Offset=0x3c Size=0x8
    char clanAbbrev[8];// Offset=0x44 Size=0x8
    int score;// Offset=0x4c Size=0x4
    int location;// Offset=0x50 Size=0x4
    int health;// Offset=0x54 Size=0x4
    char model[64];// Offset=0x58 Size=0x40
    char attachModelNames[6][64];// Offset=0x98 Size=0x180
    char attachTagNames[6][64];// Offset=0x218 Size=0x180
    unsigned int partBits[5];// Offset=0x398 Size=0x14
    struct lerpFrame_t legs;// Offset=0x3ac Size=0x30
    struct lerpFrame_t torso;// Offset=0x3dc Size=0x30
    float lerpMoveDir;// Offset=0x40c Size=0x4
    float lerpLean;// Offset=0x410 Size=0x4
    float playerAngles[3];// Offset=0x414 Size=0xc
    int legsAnim;// Offset=0x420 Size=0x4
    int torsoAnim;// Offset=0x424 Size=0x4
    float fTorsoPitch;// Offset=0x428 Size=0x4
    float fWaistPitch;// Offset=0x42c Size=0x4
    int leftHandGun;// Offset=0x430 Size=0x4
    int dobjDirty;// Offset=0x434 Size=0x4
    struct clientControllers_t control;// Offset=0x438 Size=0x48
    unsigned int clientConditions[18][2];// Offset=0x480 Size=0x90
    struct XAnimTree_s * pXAnimTree;// Offset=0x510 Size=0x4
    int iDObjWeapon;// Offset=0x514 Size=0x4
    unsigned char weaponModel;// Offset=0x518 Size=0x1
    unsigned char __align0[3];// Offset=0x519 Size=0x3
    int stanceTransitionTime;// Offset=0x51c Size=0x4
    int turnAnimEndTime;// Offset=0x520 Size=0x4
    char turnAnimType;// Offset=0x524 Size=0x1
    bool hideWeapon;// Offset=0x525 Size=0x1
    bool usingKnife;// Offset=0x526 Size=0x1
    unsigned char __align1[1];// Offset=0x527 Size=0x1
    int dualWielding;// Offset=0x528 Size=0x4
    enum PlayerDiveState diveState;// Offset=0x52c Size=0x4
    int riotShieldNext;// Offset=0x530 Size=0x4
    unsigned int playerCardIcon;// Offset=0x534 Size=0x4
    unsigned int playerCardTitle;// Offset=0x538 Size=0x4
    unsigned int playerCardNameplate;// Offset=0x53c Size=0x4
};

union PackedUnitVec// Size=0x4 (Id=4563)
{
    unsigned int packed;// Offset=0x0 Size=0x4
};

struct vector3// Size=0x30 (Id=4564)
{
    struct __vector4 x;// Offset=0x0 Size=0x10
    struct __vector4 y;// Offset=0x10 Size=0x10
    struct __vector4 z;// Offset=0x20 Size=0x10
};

struct transPlayerState_t// Size=0x30 (Id=4565)
{
    int otherFlags;// Offset=0x0 Size=0x4
    int damageEvent;// Offset=0x4 Size=0x4
    int eventSequence;// Offset=0x8 Size=0x4
    int events[4];// Offset=0xc Size=0x10
    int unpredictableEventSequence;// Offset=0x1c Size=0x4
    int unpredictableEvents[4];// Offset=0x20 Size=0x10
};

struct UIFunctionList// Size=0x8 (Id=4566)
{
    int totalFunctions;// Offset=0x0 Size=0x4
    struct Statement_s ** functions;// Offset=0x4 Size=0x4
};

struct shellshock_parms_t::<unnamed-type-movement>// Size=0x1 (Id=4567)
{
    bool affect;// Offset=0x0 Size=0x1
};

struct shellshock_parms_t::<unnamed-type-lookControl>// Size=0x14 (Id=4568)
{
    bool affect;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    int fadeTime;// Offset=0x4 Size=0x4
    float mouseSensitivity;// Offset=0x8 Size=0x4
    float maxPitchSpeed;// Offset=0xc Size=0x4
    float maxYawSpeed;// Offset=0x10 Size=0x4
};

struct shellshock_parms_t::<unnamed-type-sound>// Size=0x230 (Id=4569)
{
    bool affect;// Offset=0x0 Size=0x1
    char loop[64];// Offset=0x1 Size=0x40
    char loopSilent[64];// Offset=0x41 Size=0x40
    char end[64];// Offset=0x81 Size=0x40
    char endAbort[64];// Offset=0xc1 Size=0x40
    unsigned char __align0[3];// Offset=0x101 Size=0x3
    int fadeInTime;// Offset=0x104 Size=0x4
    int fadeOutTime;// Offset=0x108 Size=0x4
    float drylevel;// Offset=0x10c Size=0x4
    float wetlevel;// Offset=0x110 Size=0x4
    char roomtype[16];// Offset=0x114 Size=0x10
    float channelvolume[64];// Offset=0x124 Size=0x100
    int modEndDelay;// Offset=0x224 Size=0x4
    int loopFadeTime;// Offset=0x228 Size=0x4
    int loopEndDelay;// Offset=0x22c Size=0x4
};

struct shellshock_parms_t::<unnamed-type-view>// Size=0xc (Id=4570)
{
    int fadeTime;// Offset=0x0 Size=0x4
    float kickRate;// Offset=0x4 Size=0x4
    float kickRadius;// Offset=0x8 Size=0x4
};

enum ShockViewTypes
{
    SHELLSHOCK_VIEWTYPE_BLURRED=0,
    SHELLSHOCK_VIEWTYPE_FLASHED=1,
    SHELLSHOCK_VIEWTYPE_NONE=2
};

struct shellshock_parms_t::<unnamed-type-screenBlend>// Size=0x14 (Id=4572)
{
    int blurredFadeTime;// Offset=0x0 Size=0x4
    int blurredEffectTime;// Offset=0x4 Size=0x4
    int flashWhiteFadeTime;// Offset=0x8 Size=0x4
    int flashShotFadeTime;// Offset=0xc Size=0x4
    enum ShockViewTypes type;// Offset=0x10 Size=0x4
};

struct shellshock_parms_t// Size=0x268 (Id=4573)
{
    union // Size=0x264 (Id=0)
    {
        struct <unnamed-type-screenBlend>// Size=0x14 (Id=51225)
        {
            int blurredFadeTime;// Offset=0x0 Size=0x4
            int blurredEffectTime;// Offset=0x4 Size=0x4
            int flashWhiteFadeTime;// Offset=0x8 Size=0x4
            int flashShotFadeTime;// Offset=0xc Size=0x4
            enum ShockViewTypes type;// Offset=0x10 Size=0x4
        };
        struct shellshock_parms_t::<unnamed-type-screenBlend> screenBlend;// Offset=0x0 Size=0x14
        struct <unnamed-type-view>// Size=0xc (Id=51232)
        {
            int fadeTime;// Offset=0x0 Size=0x4
            float kickRate;// Offset=0x4 Size=0x4
            float kickRadius;// Offset=0x8 Size=0x4
        };
        unsigned char __align0[8];// Offset=0xc Size=0x8
        struct shellshock_parms_t::<unnamed-type-view> view;// Offset=0x14 Size=0xc
        struct <unnamed-type-sound>// Size=0x230 (Id=51237)
        {
            bool affect;// Offset=0x0 Size=0x1
            char loop[64];// Offset=0x1 Size=0x40
            char loopSilent[64];// Offset=0x41 Size=0x40
            char end[64];// Offset=0x81 Size=0x40
            char endAbort[64];// Offset=0xc1 Size=0x40
            unsigned char __align0[3];// Offset=0x101 Size=0x3
            int fadeInTime;// Offset=0x104 Size=0x4
            int fadeOutTime;// Offset=0x108 Size=0x4
            float drylevel;// Offset=0x10c Size=0x4
            float wetlevel;// Offset=0x110 Size=0x4
            char roomtype[16];// Offset=0x114 Size=0x10
            float channelvolume[64];// Offset=0x124 Size=0x100
            int modEndDelay;// Offset=0x224 Size=0x4
            int loopFadeTime;// Offset=0x228 Size=0x4
            int loopEndDelay;// Offset=0x22c Size=0x4
        };
        struct shellshock_parms_t::<unnamed-type-sound> sound;// Offset=0x20 Size=0x230
        struct <unnamed-type-lookControl>// Size=0x14 (Id=51253)
        {
            bool affect;// Offset=0x0 Size=0x1
            unsigned char __align0[3];// Offset=0x1 Size=0x3
            int fadeTime;// Offset=0x4 Size=0x4
            float mouseSensitivity;// Offset=0x8 Size=0x4
            float maxPitchSpeed;// Offset=0xc Size=0x4
            float maxYawSpeed;// Offset=0x10 Size=0x4
        };
        unsigned char __align1[572];// Offset=0x14 Size=0x23c
        struct shellshock_parms_t::<unnamed-type-lookControl> lookControl;// Offset=0x250 Size=0x14
        struct <unnamed-type-movement>// Size=0x1 (Id=51260)
        {
            bool affect;// Offset=0x0 Size=0x1
        };
        unsigned char __align2[611];// Offset=0x1 Size=0x263
    };
    struct shellshock_parms_t::<unnamed-type-movement> movement;// Offset=0x264 Size=0x1
};

struct shellshock_t// Size=0x20 (Id=4574)
{
    struct shellshock_parms_t * parms;// Offset=0x0 Size=0x4
    int startTime;// Offset=0x4 Size=0x4
    int duration;// Offset=0x8 Size=0x4
    float sensitivity;// Offset=0xc Size=0x4
    float viewDelta[2];// Offset=0x10 Size=0x8
    int hasSavedScreen;// Offset=0x18 Size=0x4
    int loopEndTime;// Offset=0x1c Size=0x4
};

struct bgs_t// Size=0x795d8 (Id=4575)
{
    union // Size=0x73720 (Id=0)
    {
        struct animScriptData_t animScriptData;// Offset=0x0 Size=0x73720
        struct <unnamed-type-generic_human>// Size=0x10 (Id=51592)
        {
            struct scr_animtree_t tree;// Offset=0x0 Size=0x4
            struct scr_anim_s torso;// Offset=0x4 Size=0x4
            struct scr_anim_s legs;// Offset=0x8 Size=0x4
            struct scr_anim_s turning;// Offset=0xc Size=0x4
        };
        unsigned char __align0[472848];// Offset=0x10 Size=0x73710
    };
    struct bgs_t::<unnamed-type-generic_human> generic_human;// Offset=0x73720 Size=0x10
    int time;// Offset=0x73730 Size=0x4
    int latestSnapshotTime;// Offset=0x73734 Size=0x4
    int frametime;// Offset=0x73738 Size=0x4
    int anim_user;// Offset=0x7373c Size=0x4
    struct XModel *  ( * GetXModel)(char * );// Offset=0x73740 Size=0x4
    struct DObj *  ( * CreateDObj)(struct DObjModel_s * ,unsigned short ,struct XAnimTree_s * ,int ,int ,int );// Offset=0x73744 Size=0x4
    unsigned short  ( * AttachWeapon)(struct DObjModel_s * ,unsigned short ,struct clientInfo_t * );// Offset=0x73748 Size=0x4
    void  ( * SafeDObjFree)(int ,int );// Offset=0x7374c Size=0x4
    struct DObj *  ( * GetDObj)(int ,int );// Offset=0x73750 Size=0x4
    void *  ( * AllocXAnim)(int );// Offset=0x73754 Size=0x4
    struct clientInfo_t clientinfo[18];// Offset=0x73758 Size=0x5e80
};

struct bgs_t::<unnamed-type-generic_human>// Size=0x10 (Id=4576)
{
    struct scr_animtree_t tree;// Offset=0x0 Size=0x4
    struct scr_anim_s torso;// Offset=0x4 Size=0x4
    struct scr_anim_s legs;// Offset=0x8 Size=0x4
    struct scr_anim_s turning;// Offset=0xc Size=0x4
};

struct playerEntity_t// Size=0x20 (Id=4577)
{
    int bPositionToADS;// Offset=0x0 Size=0x4
    float fLastIdleFactor;// Offset=0x4 Size=0x4
    float baseMoveOrigin[3];// Offset=0x8 Size=0xc
    float baseMoveAngles[3];// Offset=0x14 Size=0xc
};

struct menuTransition// Size=0x1c (Id=4578)
{
    int transitionType;// Offset=0x0 Size=0x4
    int targetField;// Offset=0x4 Size=0x4
    int startTime;// Offset=0x8 Size=0x4
    float startVal;// Offset=0xc Size=0x4
    float endVal;// Offset=0x10 Size=0x4
    float time;// Offset=0x14 Size=0x4
    int endTriggerType;// Offset=0x18 Size=0x4
};

struct menuDef_t// Size=0x1a0 (Id=4579)
{
    struct windowDef_t window;// Offset=0x0 Size=0xb0
    char * font;// Offset=0xb0 Size=0x4
    int fullScreen;// Offset=0xb4 Size=0x4
    int itemCount;// Offset=0xb8 Size=0x4
    int fontIndex;// Offset=0xbc Size=0x4
    int cursorItem[4];// Offset=0xc0 Size=0x10
    int fadeCycle;// Offset=0xd0 Size=0x4
    float fadeClamp;// Offset=0xd4 Size=0x4
    float fadeAmount;// Offset=0xd8 Size=0x4
    float fadeInAmount;// Offset=0xdc Size=0x4
    float blurRadius;// Offset=0xe0 Size=0x4
    struct MenuEventHandlerSet * onOpen;// Offset=0xe4 Size=0x4
    struct MenuEventHandlerSet * onCloseRequest;// Offset=0xe8 Size=0x4
    struct MenuEventHandlerSet * onClose;// Offset=0xec Size=0x4
    struct MenuEventHandlerSet * onESC;// Offset=0xf0 Size=0x4
    struct ItemKeyHandler * onKey;// Offset=0xf4 Size=0x4
    struct Statement_s * visibleExp;// Offset=0xf8 Size=0x4
    char * allowedBinding;// Offset=0xfc Size=0x4
    char * soundName;// Offset=0x100 Size=0x4
    int imageTrack;// Offset=0x104 Size=0x4
    float focusColor[4];// Offset=0x108 Size=0x10
    struct Statement_s * rectXExp;// Offset=0x118 Size=0x4
    struct Statement_s * rectYExp;// Offset=0x11c Size=0x4
    struct Statement_s * openSoundExp;// Offset=0x120 Size=0x4
    struct Statement_s * closeSoundExp;// Offset=0x124 Size=0x4
    struct itemDef_s ** items;// Offset=0x128 Size=0x4
    struct menuTransition scaleTransition;// Offset=0x12c Size=0x1c
    struct menuTransition alphaTransition;// Offset=0x148 Size=0x1c
    struct menuTransition xTransition;// Offset=0x164 Size=0x1c
    struct menuTransition yTransition;// Offset=0x180 Size=0x1c
    struct ExpressionSupportingData * expressionData;// Offset=0x19c Size=0x4
};

struct HudGrenade// Size=0x10 (Id=4580)
{
    float origin[3];// Offset=0x0 Size=0xc
    struct Material * material;// Offset=0xc Size=0x4
};

struct visionSetVars_t// Size=0x6c (Id=4581)
{
    bool glowEnable;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    float glowBloomCutoff;// Offset=0x4 Size=0x4
    float glowBloomDesaturation;// Offset=0x8 Size=0x4
    float glowBloomIntensity0;// Offset=0xc Size=0x4
    float glowBloomIntensity1;// Offset=0x10 Size=0x4
    float glowRadius0;// Offset=0x14 Size=0x4
    float glowRadius1;// Offset=0x18 Size=0x4
    float glowSkyBleedIntensity0;// Offset=0x1c Size=0x4
    float glowSkyBleedIntensity1;// Offset=0x20 Size=0x4
    bool filmEnable;// Offset=0x24 Size=0x1
    unsigned char __align1[3];// Offset=0x25 Size=0x3
    float filmBrightness;// Offset=0x28 Size=0x4
    float filmContrast;// Offset=0x2c Size=0x4
    float filmDesaturation;// Offset=0x30 Size=0x4
    float filmDesaturationDark;// Offset=0x34 Size=0x4
    bool filmInvert;// Offset=0x38 Size=0x1
    unsigned char __align2[3];// Offset=0x39 Size=0x3
    float filmLightTint[3];// Offset=0x3c Size=0xc
    float filmMediumTint[3];// Offset=0x48 Size=0xc
    float filmDarkTint[3];// Offset=0x54 Size=0xc
    bool charPrimaryUseTweaks;// Offset=0x60 Size=0x1
    unsigned char __align3[3];// Offset=0x61 Size=0x3
    float charPrimaryDiffuseScale;// Offset=0x64 Size=0x4
    float charPrimarySpecularScale;// Offset=0x68 Size=0x4
};

struct MenuEventHandlerSet// Size=0x8 (Id=4582)
{
    int eventHandlerCount;// Offset=0x0 Size=0x4
    struct MenuEventHandler ** eventHandlers;// Offset=0x4 Size=0x4
};

struct ShieldHitDelayedEvent// Size=0x4 (Id=4583)
{
    unsigned int eventParm;// Offset=0x0 Size=0x4
};

struct UILocalVarContext// Size=0xc00 (Id=4584)
{
    struct UILocalVar table[256];// Offset=0x0 Size=0xc00
};

struct PartyInfo// Size=0x5c (Id=4585)
{
    bool active;// Offset=0x0 Size=0x1
    struct _XSESSION_INFO info;// Offset=0x1 Size=0x3c
    unsigned char __align0[3];// Offset=0x3d Size=0x3
    int occupiedPublicSlots;// Offset=0x40 Size=0x4
    int occupiedPrivateSlots;// Offset=0x44 Size=0x4
    int numPublicSlots;// Offset=0x48 Size=0x4
    int numPrivateSlots;// Offset=0x4c Size=0x4
    int ping;// Offset=0x50 Size=0x4
    int upload;// Offset=0x54 Size=0x4
    int desirability;// Offset=0x58 Size=0x4
};

struct PartyHostDetails// Size=0x68 (Id=4586)
{
    int partyListSlot;// Offset=0x0 Size=0x4
    struct netadr_t addr;// Offset=0x4 Size=0xc
    struct _XSESSION_INFO sessionInfo;// Offset=0x10 Size=0x3c
    int lastPacketTime;// Offset=0x4c Size=0x4
    int lastPacketSentTime;// Offset=0x50 Size=0x4
    int numPrivateSlots;// Offset=0x54 Size=0x4
    int numPublicSlots;// Offset=0x58 Size=0x4
    int hostNum;// Offset=0x5c Size=0x4
    bool accepted;// Offset=0x60 Size=0x1
    char challenge[6];// Offset=0x61 Size=0x6
};

struct ExpressionSupportingData// Size=0x18 (Id=4587)
{
    struct UIFunctionList uifunctions;// Offset=0x0 Size=0x8
    struct StaticDvarList staticDvarList;// Offset=0x8 Size=0x8
    struct StringList uiStrings;// Offset=0x10 Size=0x8
};

struct MigrateData// Size=0x28 (Id=4588)
{
    bool migrateActive;// Offset=0x0 Size=0x1
    bool weAreArbitrating;// Offset=0x1 Size=0x1
    unsigned char __align0[2];// Offset=0x2 Size=0x2
    int indexBits;// Offset=0x4 Size=0x4
    int startTime;// Offset=0x8 Size=0x4
    int lastBroadcastTime;// Offset=0xc Size=0x4
    struct BestHostData bestHost;// Offset=0x10 Size=0x18
};

struct SessionData// Size=0x6c8 (Id=4589)
{
    struct SessionStaticData staticData;// Offset=0x0 Size=0xc
    unsigned char __align0[4];// Offset=0xc Size=0x4
    struct SessionDynamicData dyn;// Offset=0x10 Size=0x6b8
};

enum taskCompleteResults
{
    TASK_NOTCOMPLETE=0,
    TASK_COMPLETE=1,
    TASK_ERROR=2
};

enum _unnamed_4591
{
    XFILE_BLOCK_TEMP=0,
    XFILE_BLOCK_PHYSICAL=1,
    XFILE_BLOCK_RUNTIME=2,
    XFILE_BLOCK_VIRTUAL=3,
    XFILE_BLOCK_LARGE=4,
    XFILE_BLOCK_CALLBACK=5,
    MAX_XFILE_COUNT=6
};

enum _unnamed_4592
{
    LSP_UNKNOWNCOMMAND=0,
    LSP_HELLO=1,
    LSP_LOGREQUEST=2,
    LSP_LOGREQUESTFORUSER=3,
    LSP_KEEPALIVE=4,
    LSP_STATSDUMP=5,
    LSP_MATCHDATA=6,
    NUM_LSP_COMMANDS=7
};

enum _unnamed_4593
{
    LSP_SUCCESS=0,
    LSP_BADPROTOCOL=1,
    LSP_ERR_AUTHFAILED=2,
    LSP_ERR_BETAEXPIRED=3,
    LSP_ERR_BANNED=4,
    LSP_ERR_OLDBUILD=5,
    LSP_ERR_INVALIDPARAM=6
};

enum IWNetClientNetworkMessage
{
    IWN_CLIENT_ASKFORNONCE=0,
    IWN_CLIENT_CREATESESSION=1,
    IWN_CLIENT_ACKTRANSACTION=2,
    IWN_CLIENT_UPDATEPLAYERSINSESSION=3,
    IWN_CLIENT_DELETESESSION=4,
    IWN_CLIENT_SEARCHFORGAME=5,
    IWN_CLIENT_SESSIONHEARTBEAT=6,
    IWN_CLIENT_ENCRYPTEDMSG=7,
    IWN_BEGIN_AUTH_MSG=8,
    IWN_AUTH_CREATE=8,
    IWN_AUTH_CHANGEPASSWORD=9,
    IWN_AUTH_LOGIN=10,
    IWN_END_AUTH_MSG=11,
    IWN_BEGIN_BLOB_MSG=11,
    IWN_BLOB_FILEBEGINWRITE=11,
    IWN_BLOB_FILEWRITE=12,
    IWN_BLOB_FILEENDWRITE=13,
    IWN_BLOB_FILEBEGINREAD=14,
    IWN_BLOB_FILEREAD=15,
    IWN_BLOB_FILEENDREAD=16,
    IWN_END_BLOB_MSG=17,
    IWN_BEGIN_TEAMMAKING_MSG=17,
    IWN_TEAMMAKING_REQUEST=17,
    IWN_END_TEAMMAKING_MSG=18,
    IWN_AUTH_CLAIM_KEY=19,
    IWN_EXTERNAL_IP_REQUEST=20,
    IWN_AUTH_RESETPASSWORD=21,
    IWN_AUTH_CHANGEEMAIL=22,
    IWN_TOTALCLIENTNETWORKMESSAGES=22
};

enum IWNetServerNetworkMessage
{
    IWN_SERVER_INVALID_VERSION=0,
    IWN_SERVER_CREATENONCE_SUCCESS=1,
    IWN_SERVER_CREATENONCE_FAILURE=2,
    IWN_SERVER_NONCE_DELETED=3,
    IWN_SERVER_CREATESESSION_SUCCESS=4,
    IWN_SERVER_CREATESESSION_FAILURE=5,
    IWN_SERVER_SESSIONUPDATE_SUCCESS=6,
    IWN_SERVER_SESSIONUPDATE_FAILURE=7,
    IWN_SERVER_DELETESESSION_SUCCESS=8,
    IWN_SERVER_DELETESESSION_FAILURE=9,
    IWN_SERVER_SEARCHFORGAME_SUCCESS=10,
    IWN_SERVER_SEARCHFORGAME_FAILURE=11,
    IWN_SERVER_HEARTBEAT_SUCCESS=12,
    IWN_SERVER_HEARTBEAT_FAILURE=13,
    IWN_BEGIN_AUTH_SERVER_MSG=14,
    IWN_AUTH_CREATE_REPLY=14,
    IWN_AUTH_LOGIN_REPLY=15,
    IWN_AUTH_CHANGEPASSWORD_REPLY=16,
    IWN_END_AUTH_SERVER_MSG=17,
    IWN_BEGIN_BLOB_SERVER_MSG=17,
    IWN_BLOB_SUCCESS_VOID=17,
    IWN_BLOB_SUCCESS_FILE_ID=18,
    IWN_BLOB_SUCCESS_DATA=19,
    IWN_BLOB_FAILURE_BAD_FILE_ID=20,
    IWN_BLOB_FAILURE_FILE_TOO_BIG=21,
    IWN_BLOB_FAILURE_FILE_NOT_FOUND=22,
    IWN_BLOB_FAILURE_SERVER_INTERNAL=23,
    IWN_END_BLOB_SERVER_MSG=24,
    IWN_TEAMMAKING_REPLY=24,
    IWN_TEAMMAKING_FAILURE=25,
    IWN_AUTH_CLAIM_KEY_REPLY=26,
    IWN_EXTERNAL_IP_REPLY=27,
    IWN_AUTH_RESETPASSWORD_REPLY=28,
    IWN_AUTH_CHANGEEMAIL_REPLY=29,
    IWN_TOTALSERVERNETWORKMESSAGES=29
};

enum StatsSource
{
    STATS_ONLINE=0,
    STATS_OFFLINE=1,
    STATS_COUNT=2
};

enum <unnamed-type-teamTaskEnum>
{
    TASK_FINDTITLESERVERS=1,
    NUM_LSP_TASKS=2
};

struct OverlappedTaskSet// Size=0x1008 (Id=4598)
{
    unsigned int registeredIndex;// Offset=0x0 Size=0x4
    unsigned char __align0[4];// Offset=0x4 Size=0x4
    struct overlappedTask tasks[32];// Offset=0x8 Size=0x1000
};

enum IWNetStorageTaskStateState
{
    IWNET_STORAGE_INACTIVE=0,
    IWNET_STORAGE_WORKING=1,
    IWNET_STORAGE_COMPLETE=2
};

enum IWNetStorageError
{
    IWNET_STORAGE_ERROR_OK=0,
    IWNET_STORAGE_ERROR_NOT_FOUND=1,
    IWNET_STORAGE_ERROR_NETWORK=2,
    IWNET_STORAGE_ERROR_GENERAL=3,
    IWNET_STORAGE_ERROR_CANCELLED=4,
    IWNET_STORAGE_ERROR__COUNT=5
};

struct IWNetStorageTaskState// Size=0x68 (Id=4601)
{
    char filename[64];// Offset=0x0 Size=0x40
    unsigned char * data;// Offset=0x40 Size=0x4
    unsigned int maxSize;// Offset=0x44 Size=0x4
    unsigned int size;// Offset=0x48 Size=0x4
    unsigned char __align0[4];// Offset=0x4c Size=0x4
    unsigned long long fileId;// Offset=0x50 Size=0x8
    unsigned int writePos;// Offset=0x58 Size=0x4
    enum IWNetStorageTaskStateState state;// Offset=0x5c Size=0x4
    enum IWNetStorageError errorCode;// Offset=0x60 Size=0x4
};

struct mover_slidedata_t// Size=0x24 (Id=4602)
{
    struct Bounds bounds;// Offset=0x0 Size=0x18
    float velocity[3];// Offset=0x18 Size=0xc
};

enum MissileStage
{
    MISSILESTAGE_SOFTLAUNCH=0,
    MISSILESTAGE_ASCENT=1,
    MISSILESTAGE_DESCENT=2
};

struct missile_fields_nonGrenade// Size=0x34 (Id=4604)
{
    float curvature[3];// Offset=0x0 Size=0xc
    float targetEntOffset[3];// Offset=0xc Size=0xc
    float targetPos[3];// Offset=0x18 Size=0xc
    float launchOrigin[3];// Offset=0x24 Size=0xc
    enum MissileStage stage;// Offset=0x30 Size=0x4
};

struct entityShared_t// Size=0x58 (Id=4605)
{
    unsigned char isLinked;// Offset=0x0 Size=0x1
    unsigned char modelType;// Offset=0x1 Size=0x1
    unsigned char svFlags;// Offset=0x2 Size=0x1
    unsigned char isInUse;// Offset=0x3 Size=0x1
    struct Bounds box;// Offset=0x4 Size=0x18
    int contents;// Offset=0x1c Size=0x4
    struct Bounds absBox;// Offset=0x20 Size=0x18
    float currentOrigin[3];// Offset=0x38 Size=0xc
    float currentAngles[3];// Offset=0x44 Size=0xc
    class EntHandle ownerNum;// Offset=0x50 Size=0x4
    int eventTime;// Offset=0x54 Size=0x4
};

struct gentity_s// Size=0x280 (Id=4606)
{
    struct entityState_s s;// Offset=0x0 Size=0x100
    struct entityShared_t r;// Offset=0x100 Size=0x58
    struct gclient_s * client;// Offset=0x158 Size=0x4
    struct Turret * turret;// Offset=0x15c Size=0x4
    struct Vehicle * vehicle;// Offset=0x160 Size=0x4
    int physObjId;// Offset=0x164 Size=0x4
    unsigned short model;// Offset=0x168 Size=0x2
    unsigned char physicsObject;// Offset=0x16a Size=0x1
    unsigned char takedamage;// Offset=0x16b Size=0x1
    unsigned char active;// Offset=0x16c Size=0x1
    unsigned char handler;// Offset=0x16d Size=0x1
    unsigned char team;// Offset=0x16e Size=0x1
    bool freeAfterEvent;// Offset=0x16f Size=0x1
    short padding_short;// Offset=0x170 Size=0x2
    unsigned short classname;// Offset=0x172 Size=0x2
    unsigned short script_classname;// Offset=0x174 Size=0x2
    unsigned short script_linkName;// Offset=0x176 Size=0x2
    unsigned short target;// Offset=0x178 Size=0x2
    unsigned short targetname;// Offset=0x17a Size=0x2
    unsigned int attachIgnoreCollision;// Offset=0x17c Size=0x4
    int spawnflags;// Offset=0x180 Size=0x4
    int flags;// Offset=0x184 Size=0x4
    int eventTime;// Offset=0x188 Size=0x4
    int clipmask;// Offset=0x18c Size=0x4
    int processedFrame;// Offset=0x190 Size=0x4
    class EntHandle parent;// Offset=0x194 Size=0x4
    int nextthink;// Offset=0x198 Size=0x4
    int health;// Offset=0x19c Size=0x4
    int maxHealth;// Offset=0x1a0 Size=0x4
    int damage;// Offset=0x1a4 Size=0x4
    int count;// Offset=0x1a8 Size=0x4
    union // Size=0x20c (Id=0)
    {
        struct item_ent_t item[2];// Offset=0x1ac Size=0x28
        struct spawner_ent_t spawner;// Offset=0x1ac Size=0xc
        struct trigger_ent_t trigger;// Offset=0x1ac Size=0x14
        struct mover_ent_t mover;// Offset=0x1ac Size=0x60
        struct corpse_ent_t corpse;// Offset=0x1ac Size=0x4
        struct missile_ent_t missile;// Offset=0x1ac Size=0x58
        struct blend_ent_t blend;// Offset=0x1ac Size=0x3c
        unsigned char __align0[36];// Offset=0x1e8 Size=0x24
    };
    class EntHandle missileTargetEnt;// Offset=0x20c Size=0x4
    class EntHandle remoteControlledOwner;// Offset=0x210 Size=0x4
    struct tagInfo_s * tagInfo;// Offset=0x214 Size=0x4
    struct gentity_s * tagChildren;// Offset=0x218 Size=0x4
    unsigned short attachModelNames[19];// Offset=0x21c Size=0x26
    unsigned short attachTagNames[19];// Offset=0x242 Size=0x26
    int useCount;// Offset=0x268 Size=0x4
    struct gentity_s * nextFree;// Offset=0x26c Size=0x4
    int birthTime;// Offset=0x270 Size=0x4
    int padding[3];// Offset=0x274 Size=0xc
};

struct mover_positions_t// Size=0x30 (Id=4607)
{
    float decelTime;// Offset=0x0 Size=0x4
    float speed;// Offset=0x4 Size=0x4
    float midTime;// Offset=0x8 Size=0x4
    float pos1[3];// Offset=0xc Size=0xc
    float pos2[3];// Offset=0x18 Size=0xc
    float pos3[3];// Offset=0x24 Size=0xc
};

struct missile_fields_grenade// Size=0x8 (Id=4608)
{
    float wobbleCycle;// Offset=0x0 Size=0x4
    float curve;// Offset=0x4 Size=0x4
};

struct svEntity_s// Size=0x18 (Id=4609)
{
    unsigned short worldSector;// Offset=0x0 Size=0x2
    unsigned short nextEntityInWorldSector;// Offset=0x2 Size=0x2
    int linkcontents;// Offset=0x4 Size=0x4
    float linkmin[2];// Offset=0x8 Size=0x8
    float linkmax[2];// Offset=0x10 Size=0x8
};

enum IWNetCommand
{
    IWNET_COMMAND_INVALID=0,
    IWNET_MATCH_COMMAND_FIRST=1,
    IWNET_CREATESESSION_GETNONCE=1,
    IWNET_CREATESESSION=2,
    IWNET_ACKTRANSACTION=3,
    IWNET_UPDATEPLAYERS=4,
    IWNET_SESSIONHEARTBEAT=5,
    IWNET_DELETESESSION=6,
    IWNET_SEARCH=7,
    IWNET_MATCH_COMMAND_LAST=7,
    IWNET_STORAGE_COMMAND_FIRST=8,
    IWNET_STORAGE_BEGIN_WRITE=8,
    IWNET_STORAGE_WRITE=9,
    IWNET_STORAGE_END_WRITE=10,
    IWNET_STORAGE_BEGIN_READ=11,
    IWNET_STORAGE_READ=12,
    IWNET_STORAGE_END_READ=13,
    IWNET_STORAGE_COMMAND_LAST=13,
    IWNET_TOTALCOMMANDCOUNT=14
};

struct item_ent_t// Size=0x14 (Id=4611)
{
    int ammoCount;// Offset=0x0 Size=0x4
    int clipAmmoCount[2];// Offset=0x4 Size=0x8
    int index;// Offset=0xc Size=0x4
    bool dualWieldItem;// Offset=0x10 Size=0x1
};

enum TaskSubsystem
{
    TASKSUBSYSTEM_INVALID=0,
    TASKSUBSYSTEM_NATIVE=1,
    TASKSUBSYSTEM_IWNET_STORAGE=2
};

struct overlappedTask// Size=0x80 (Id=4613)
{
    union // Size=0x4 (Id=0)
    {
        enum TaskSubsystem subsystem;// Offset=0x0 Size=0x4
        union <unnamed-type-u>// Size=0x68 (Id=51956)
        {
            struct _XOVERLAPPED overlappedIO;// Offset=0x0 Size=0x1c
            struct IWNetStorageTaskState storageRequest;// Offset=0x0 Size=0x68
        };
    };
    union overlappedTask::<unnamed-type-u> u;// Offset=0x8 Size=0x68
    int type;// Offset=0x70 Size=0x4
    bool active;// Offset=0x74 Size=0x1
    unsigned char controllerIndex;// Offset=0x75 Size=0x1
    unsigned char __align0[2];// Offset=0x76 Size=0x2
    void * data;// Offset=0x78 Size=0x4
};

union overlappedTask::<unnamed-type-u>// Size=0x68 (Id=4614)
{
    struct _XOVERLAPPED overlappedIO;// Offset=0x0 Size=0x1c
    struct IWNetStorageTaskState storageRequest;// Offset=0x0 Size=0x68
};

struct ActivePlaylistId// Size=0x8 (Id=4615)
{
    int playlistId;// Offset=0x0 Size=0x4
    int count;// Offset=0x4 Size=0x4
};

struct trigger_ent_t// Size=0x14 (Id=4616)
{
    int threshold;// Offset=0x0 Size=0x4
    int accumulate;// Offset=0x4 Size=0x4
    int timestamp;// Offset=0x8 Size=0x4
    int singleUserEntIndex;// Offset=0xc Size=0x4
    bool requireLookAt;// Offset=0x10 Size=0x1
};

class EntHandle// Size=0x4 (Id=4617)
{
    public int isDefined();
    public int isDefinedAndMatchesEnt(struct gentity_s * );
    public struct gentity_s * ent();
    public unsigned int entnum();
    union // Size=0xb8 (Id=0)
    {
        void setEnt(struct gentity_s * );// Offset=0x0 Size=0xb8
        void Init();// Offset=0x0 Size=0x50
        void Shutdown();// Offset=0x0 Size=0x4
        unsigned short number;// Offset=0x0 Size=0x2
        unsigned short infoIndex;// Offset=0x2 Size=0x2
    };
};

struct gentity_s// Size=0x280 (Id=4618)
{
    struct entityState_s s;// Offset=0x0 Size=0x100
    struct entityShared_t r;// Offset=0x100 Size=0x58
    struct gclient_s * client;// Offset=0x158 Size=0x4
    struct Turret * turret;// Offset=0x15c Size=0x4
    struct Vehicle * vehicle;// Offset=0x160 Size=0x4
    int physObjId;// Offset=0x164 Size=0x4
    unsigned short model;// Offset=0x168 Size=0x2
    unsigned char physicsObject;// Offset=0x16a Size=0x1
    unsigned char takedamage;// Offset=0x16b Size=0x1
    unsigned char active;// Offset=0x16c Size=0x1
    unsigned char handler;// Offset=0x16d Size=0x1
    unsigned char team;// Offset=0x16e Size=0x1
    bool freeAfterEvent;// Offset=0x16f Size=0x1
    short padding_short;// Offset=0x170 Size=0x2
    unsigned short classname;// Offset=0x172 Size=0x2
    unsigned short script_classname;// Offset=0x174 Size=0x2
    unsigned short script_linkName;// Offset=0x176 Size=0x2
    unsigned short target;// Offset=0x178 Size=0x2
    unsigned short targetname;// Offset=0x17a Size=0x2
    unsigned int attachIgnoreCollision;// Offset=0x17c Size=0x4
    int spawnflags;// Offset=0x180 Size=0x4
    int flags;// Offset=0x184 Size=0x4
    int eventTime;// Offset=0x188 Size=0x4
    int clipmask;// Offset=0x18c Size=0x4
    int processedFrame;// Offset=0x190 Size=0x4
    class EntHandle parent;// Offset=0x194 Size=0x4
    int nextthink;// Offset=0x198 Size=0x4
    int health;// Offset=0x19c Size=0x4
    int maxHealth;// Offset=0x1a0 Size=0x4
    int damage;// Offset=0x1a4 Size=0x4
    int count;// Offset=0x1a8 Size=0x4
    union // Size=0x20c (Id=0)
    {
        struct item_ent_t item[2];// Offset=0x1ac Size=0x28
        struct spawner_ent_t spawner;// Offset=0x1ac Size=0xc
        struct trigger_ent_t trigger;// Offset=0x1ac Size=0x14
        struct mover_ent_t mover;// Offset=0x1ac Size=0x60
        struct corpse_ent_t corpse;// Offset=0x1ac Size=0x4
        struct missile_ent_t missile;// Offset=0x1ac Size=0x58
        struct blend_ent_t blend;// Offset=0x1ac Size=0x3c
        unsigned char __align0[36];// Offset=0x1e8 Size=0x24
    };
    class EntHandle missileTargetEnt;// Offset=0x20c Size=0x4
    class EntHandle remoteControlledOwner;// Offset=0x210 Size=0x4
    struct tagInfo_s * tagInfo;// Offset=0x214 Size=0x4
    struct gentity_s * tagChildren;// Offset=0x218 Size=0x4
    unsigned short attachModelNames[19];// Offset=0x21c Size=0x26
    unsigned short attachTagNames[19];// Offset=0x242 Size=0x26
    int useCount;// Offset=0x268 Size=0x4
    struct gentity_s * nextFree;// Offset=0x26c Size=0x4
    int birthTime;// Offset=0x270 Size=0x4
    int padding[3];// Offset=0x274 Size=0xc
};

class EntHandle// Size=0x4 (Id=4619)
{
    public int isDefined();
    public int isDefinedAndMatchesEnt(struct gentity_s * );
    public struct gentity_s * ent();
    public unsigned int entnum();
    union // Size=0xb8 (Id=0)
    {
        void setEnt(struct gentity_s * );// Offset=0x0 Size=0xb8
        void Init();// Offset=0x0 Size=0x50
        void Shutdown();// Offset=0x0 Size=0x4
        unsigned short number;// Offset=0x0 Size=0x2
        unsigned short infoIndex;// Offset=0x2 Size=0x2
    };
};

enum serverState_t
{
    SS_DEAD=0,
    SS_LOADING=1,
    SS_GAME=2
};

struct server_t// Size=0x16f3c (Id=4621)
{
    enum serverState_t state;// Offset=0x0 Size=0x4
    int timeResidual;// Offset=0x4 Size=0x4
    bool inFrame;// Offset=0x8 Size=0x1
    unsigned char __align0[3];// Offset=0x9 Size=0x3
    int levelTime;// Offset=0xc Size=0x4
    bool allowNetPackets;// Offset=0x10 Size=0x1
    unsigned char __align1[3];// Offset=0x11 Size=0x3
    int restarting;// Offset=0x14 Size=0x4
    int start_frameTime;// Offset=0x18 Size=0x4
    int checksumFeed;// Offset=0x1c Size=0x4
    struct cmodel_t * models[512];// Offset=0x20 Size=0x800
    unsigned short emptyConfigString;// Offset=0x820 Size=0x2
    unsigned short configstrings[4083];// Offset=0x822 Size=0x1fe6
    struct svEntity_s svEntities[2048];// Offset=0x2808 Size=0xc000
    int checksum;// Offset=0xe808 Size=0x4
    struct gentity_s * gentities;// Offset=0xe80c Size=0x4
    int num_entities;// Offset=0xe810 Size=0x4
    struct playerState_s * gameClients;// Offset=0xe814 Size=0x4
    int gameClientSize;// Offset=0xe818 Size=0x4
    int skelTimeStamp;// Offset=0xe81c Size=0x4
    int skelMemPos;// Offset=0xe820 Size=0x4
    int bpsWindow[20];// Offset=0xe824 Size=0x50
    int bpsWindowSteps;// Offset=0xe874 Size=0x4
    int bpsTotalBytes;// Offset=0xe878 Size=0x4
    int bpsMaxBytes;// Offset=0xe87c Size=0x4
    int ubpsWindow[20];// Offset=0xe880 Size=0x50
    int ubpsTotalBytes;// Offset=0xe8d0 Size=0x4
    int ubpsMaxBytes;// Offset=0xe8d4 Size=0x4
    float ucompAve;// Offset=0xe8d8 Size=0x4
    int ucompNum;// Offset=0xe8dc Size=0x4
    char gametype[64];// Offset=0xe8e0 Size=0x40
    bool killServer;// Offset=0xe920 Size=0x1
    unsigned char __align2[3];// Offset=0xe921 Size=0x3
    char * killReason;// Offset=0xe924 Size=0x4
    struct recentFrame recentFrameInfo[400];// Offset=0xe928 Size=0x190
    int currentFrameNum;// Offset=0xeab8 Size=0x4
    char matchDataDef[64];// Offset=0xeabc Size=0x40
    unsigned char matchData[32768];// Offset=0xeafc Size=0x8000
    struct ClientMatchData clientMatchData;// Offset=0x16afc Size=0x440
};

struct mover_ent_t// Size=0x60 (Id=4622)
{
    union // Size=0x30 (Id=0)
    {
        struct mover_positions_t pos;// Offset=0x0 Size=0x30
        struct mover_slidedata_t slide;// Offset=0x0 Size=0x24
        unsigned char __align0[12];// Offset=0x24 Size=0xc
    };
    struct mover_positions_t angle;// Offset=0x30 Size=0x30
};

struct PacketHandler// Size=0x8 (Id=4623)
{
    short startPort;// Offset=0x0 Size=0x2
    short lastPort;// Offset=0x2 Size=0x2
    void  ( * handler)(struct msg_t * );// Offset=0x4 Size=0x4
};

struct recentFrame// Size=0x1 (Id=4624)
{
    bool lagged;// Offset=0x0 Size=0x1
};

struct spawner_ent_t// Size=0xc (Id=4625)
{
    int team;// Offset=0x0 Size=0x4
    int timestamp;// Offset=0x4 Size=0x4
    int index;// Offset=0x8 Size=0x4
};

struct missile_ent_t// Size=0x58 (Id=4626)
{
    float time;// Offset=0x0 Size=0x4
    int timeOfBirth;// Offset=0x4 Size=0x4
    float travelDist;// Offset=0x8 Size=0x4
    float surfaceNormal[3];// Offset=0xc Size=0xc
    enum team_t team;// Offset=0x18 Size=0x4
    int flags;// Offset=0x1c Size=0x4
    int antilagTimeOffset;// Offset=0x20 Size=0x4
    union // Size=0x8 (Id=0)
    {
        struct missile_fields_grenade grenade;// Offset=0x24 Size=0x8
        struct missile_fields_nonGrenade nonGrenade;// Offset=0x24 Size=0x34
    };
};

struct blend_ent_t// Size=0x3c (Id=4627)
{
    float pos[3];// Offset=0x0 Size=0xc
    float vel[3];// Offset=0xc Size=0xc
    float viewQuat[4];// Offset=0x18 Size=0x10
    bool changed;// Offset=0x28 Size=0x1
    unsigned char __align0[3];// Offset=0x29 Size=0x3
    float accelTime;// Offset=0x2c Size=0x4
    float decelTime;// Offset=0x30 Size=0x4
    float startTime;// Offset=0x34 Size=0x4
    float totalTime;// Offset=0x38 Size=0x4
};

struct corpse_ent_t// Size=0x4 (Id=4628)
{
    int deathAnimStartTime;// Offset=0x0 Size=0x4
};

struct NetField// Size=0x10 (Id=4629)
{
    char * name;// Offset=0x0 Size=0x4
    int offset;// Offset=0x4 Size=0x4
    int bits;// Offset=0x8 Size=0x4
    unsigned char changeHints;// Offset=0xc Size=0x1
};

struct TeamMakingRequest// Size=0xa0 (Id=4630)
{
    struct TeamMakingRequestParty parties[18];// Offset=0x0 Size=0x90
    int partyCount;// Offset=0x90 Size=0x4
    int totalSkill;// Offset=0x94 Size=0x4
    int maxCountDiff;// Offset=0x98 Size=0x4
    int maxSkill;// Offset=0x9c Size=0x4
};

struct TeamMarker// Size=0x8 (Id=4631)
{
    bool realizable;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    int partyIdx;// Offset=0x4 Size=0x4
};

struct TeamMakingRequestParty// Size=0x8 (Id=4632)
{
    int totalSkill;// Offset=0x0 Size=0x4
    int memberCount;// Offset=0x4 Size=0x4
};

struct TeamMakingRequest// Size=0xa0 (Id=4633)
{
    struct TeamMakingRequestParty parties[18];// Offset=0x0 Size=0x90
    int partyCount;// Offset=0x90 Size=0x4
    int totalSkill;// Offset=0x94 Size=0x4
    int maxCountDiff;// Offset=0x98 Size=0x4
    int maxSkill;// Offset=0x9c Size=0x4
};

struct TeamMakingResponse// Size=0x12 (Id=4634)
{
    unsigned char teams[18];// Offset=0x0 Size=0x12
};

struct TeamMakingResponse// Size=0x12 (Id=4635)
{
    unsigned char teams[18];// Offset=0x0 Size=0x12
};

enum _unnamed_4636
{
    TEAMMAKING_FAILED=0,
    TEAMMAKING_PENDING=1,
    TEAMMAKING_SUCCEEDED=2
};

union IWNetParameters// Size=0x14 (Id=4637)
{
    union // Size=0x14 (Id=0)
    {
        struct SessionCreateData sessionCreateParams;// Offset=0x0 Size=0x14
        struct AckTransactionData ackTransactionParams;// Offset=0x0 Size=0x4
        struct SessionSearchData searchParams;// Offset=0x0 Size=0xc
        struct SessionUpdateData sessionUpdateParams;// Offset=0x0 Size=0x4
        struct SessionHeartbeatData sessionHeartbeatParams;// Offset=0x0 Size=0x4
        struct SessionDeleteData sessionDeleteParams;// Offset=0x0 Size=0x4
        struct IWNetStorageTaskState * storageParams;// Offset=0x0 Size=0x4
    };
};

struct IWNetCommandWriter// Size=0x8 (Id=4638)
{
    enum IWNetCommand command;// Offset=0x0 Size=0x4
    void  ( * handler)(const int ,struct IWNetCommandData * ,struct msg_t * );// Offset=0x4 Size=0x4
};

struct StorageHandler// Size=0x10 (Id=4639)
{
    int result;// Offset=0x0 Size=0x4
    bool anyClientMessage;// Offset=0x4 Size=0x1
    unsigned char __align0[3];// Offset=0x5 Size=0x3
    enum IWNetClientNetworkMessage clientNetworkMessage;// Offset=0x8 Size=0x4
    void  ( * function)(struct IWNetCommandData * ,struct msg_t * );// Offset=0xc Size=0x4
};

struct SessionHeartbeatData// Size=0x4 (Id=4640)
{
    struct SessionData * session;// Offset=0x0 Size=0x4
};

struct IwNetTicket// Size=0x18 (Id=4641)
{
    char userName[16];// Offset=0x0 Size=0x10
    unsigned long long xuid;// Offset=0x10 Size=0x8
};

struct SessionCreateData// Size=0x14 (Id=4642)
{
    struct SessionData * session;// Offset=0x0 Size=0x4
    int nonce;// Offset=0x4 Size=0x4
    int flags;// Offset=0x8 Size=0x4
    int maxPlayers;// Offset=0xc Size=0x4
    int playlistId;// Offset=0x10 Size=0x4
};

struct IWNetCommandData// Size=0x2c (Id=4643)
{
    bool active;// Offset=0x0 Size=0x1
    unsigned char __align0[1];// Offset=0x1 Size=0x1
    unsigned short sequenceNumber;// Offset=0x2 Size=0x2
    enum IWNetCommand command;// Offset=0x4 Size=0x4
    enum IWNetClientNetworkMessage networkCommand;// Offset=0x8 Size=0x4
    union IWNetParameters params;// Offset=0xc Size=0x14
    struct IWNetInternalData internalData;// Offset=0x20 Size=0xc
};

struct IWNetCommandWriter// Size=0x8 (Id=4644)
{
    enum IWNetCommand command;// Offset=0x0 Size=0x4
    void  ( * handler)(const int ,struct IWNetCommandData * ,struct msg_t * );// Offset=0x4 Size=0x4
};

struct StorageHandler// Size=0x10 (Id=4645)
{
    int result;// Offset=0x0 Size=0x4
    bool anyClientMessage;// Offset=0x4 Size=0x1
    unsigned char __align0[3];// Offset=0x5 Size=0x3
    enum IWNetClientNetworkMessage clientNetworkMessage;// Offset=0x8 Size=0x4
    void  ( * function)(struct IWNetCommandData * ,struct msg_t * );// Offset=0xc Size=0x4
};

struct AckTransactionData// Size=0x4 (Id=4646)
{
    int nonce;// Offset=0x0 Size=0x4
};

struct SessionDeleteData// Size=0x4 (Id=4647)
{
    struct SessionData * session;// Offset=0x0 Size=0x4
};

struct SessionSearchData// Size=0xc (Id=4648)
{
    int numSearchResultsAdded;// Offset=0x0 Size=0x4
    int offsetProcessed[2];// Offset=0x4 Size=0x8
};

struct IWNetInternalData// Size=0xc (Id=4649)
{
    int localControllerIndex;// Offset=0x0 Size=0x4
    int nextSendTime;// Offset=0x4 Size=0x4
    unsigned char numSendFailures;// Offset=0x8 Size=0x1
};

struct SessionUpdateData// Size=0x4 (Id=4650)
{
    struct SessionData * session;// Offset=0x0 Size=0x4
};

struct IWNetPacketParser// Size=0x8 (Id=4651)
{
    enum IWNetServerNetworkMessage type;// Offset=0x0 Size=0x4
    bool  ( * handler)(struct IWNetCommandData * ,struct msg_t * );// Offset=0x4 Size=0x4
};

struct IWNetPacketParser// Size=0x8 (Id=4652)
{
    enum IWNetServerNetworkMessage type;// Offset=0x0 Size=0x4
    bool  ( * handler)(struct IWNetCommandData * ,struct msg_t * );// Offset=0x4 Size=0x4
};

enum IWNetClientNetworkMessage
{
    IWN_CLIENT_ASKFORNONCE=0,
    IWN_CLIENT_CREATESESSION=1,
    IWN_CLIENT_ACKTRANSACTION=2,
    IWN_CLIENT_UPDATEPLAYERSINSESSION=3,
    IWN_CLIENT_DELETESESSION=4,
    IWN_CLIENT_SEARCHFORGAME=5,
    IWN_CLIENT_SESSIONHEARTBEAT=6,
    IWN_CLIENT_ENCRYPTEDMSG=7,
    IWN_BEGIN_AUTH_MSG=8,
    IWN_AUTH_CREATE=8,
    IWN_AUTH_CHANGEPASSWORD=9,
    IWN_AUTH_LOGIN=10,
    IWN_END_AUTH_MSG=11,
    IWN_BEGIN_BLOB_MSG=11,
    IWN_BLOB_FILEBEGINWRITE=11,
    IWN_BLOB_FILEWRITE=12,
    IWN_BLOB_FILEENDWRITE=13,
    IWN_BLOB_FILEBEGINREAD=14,
    IWN_BLOB_FILEREAD=15,
    IWN_BLOB_FILEENDREAD=16,
    IWN_END_BLOB_MSG=17,
    IWN_BEGIN_TEAMMAKING_MSG=17,
    IWN_TEAMMAKING_REQUEST=17,
    IWN_END_TEAMMAKING_MSG=18,
    IWN_AUTH_CLAIM_KEY=19,
    IWN_EXTERNAL_IP_REQUEST=20,
    IWN_AUTH_RESETPASSWORD=21,
    IWN_AUTH_CHANGEEMAIL=22,
    IWN_TOTALCLIENTNETWORKMESSAGES=22
};

struct IwNetTicket// Size=0x18 (Id=4654)
{
    char userName[16];// Offset=0x0 Size=0x10
    unsigned long long xuid;// Offset=0x10 Size=0x8
};

struct IWNetCommandData// Size=0x2c (Id=4655)
{
    bool active;// Offset=0x0 Size=0x1
    unsigned char __align0[1];// Offset=0x1 Size=0x1
    unsigned short sequenceNumber;// Offset=0x2 Size=0x2
    enum IWNetCommand command;// Offset=0x4 Size=0x4
    enum IWNetClientNetworkMessage networkCommand;// Offset=0x8 Size=0x4
    union IWNetParameters params;// Offset=0xc Size=0x14
    struct IWNetInternalData internalData;// Offset=0x20 Size=0xc
};

enum turret_handler
{
    TURRET_HANDLER_CLIENT=0,
    TURRET_HANDLER_SERVER=1,
    TURRET_HANDLER_COUNT=2
};

enum turret_handler
{
    TURRET_HANDLER_CLIENT=0,
    TURRET_HANDLER_SERVER=1,
    TURRET_HANDLER_COUNT=2
};

struct Bounds// Size=0x18 (Id=4658)
{
    float midPoint[3];// Offset=0x0 Size=0xc
    float halfSize[3];// Offset=0xc Size=0xc
};

struct entityState_s// Size=0x100 (Id=4659)
{
    union // Size=0xdc (Id=0)
    {
        int number;// Offset=0x0 Size=0x4
        int eType;// Offset=0x4 Size=0x4
        struct LerpEntityState lerp;// Offset=0x8 Size=0x70
        int time2;// Offset=0x78 Size=0x4
        int otherEntityNum;// Offset=0x7c Size=0x4
        int attackerEntityNum;// Offset=0x80 Size=0x4
        int groundEntityNum;// Offset=0x84 Size=0x4
        int loopSound;// Offset=0x88 Size=0x4
        int surfType;// Offset=0x8c Size=0x4
        union <unnamed-type-index>// Size=0x4 (Id=50103)
        {
            int brushModel;// Offset=0x0 Size=0x4
            int triggerModel;// Offset=0x0 Size=0x4
            int item;// Offset=0x0 Size=0x4
            int xmodel;// Offset=0x0 Size=0x4
            int primaryLight;// Offset=0x0 Size=0x4
        };
        unsigned char __align0[140];// Offset=0x4 Size=0x8c
        union entityState_s::<unnamed-type-index> index;// Offset=0x90 Size=0x4
        int clientNum;// Offset=0x94 Size=0x4
        int iHeadIcon;// Offset=0x98 Size=0x4
        int iHeadIconTeam;// Offset=0x9c Size=0x4
        int solid;// Offset=0xa0 Size=0x4
        unsigned int eventParm;// Offset=0xa4 Size=0x4
        int eventSequence;// Offset=0xa8 Size=0x4
        int events[4];// Offset=0xac Size=0x10
        unsigned int eventParms[4];// Offset=0xbc Size=0x10
        struct <unnamed-type-wes>// Size=0x4 (Id=50118)
        {
            unsigned short weapon;// Offset=0x0 Size=0x2
            unsigned short primaryWeapon;// Offset=0x2 Size=0x2
        };
        unsigned char __align1[200];// Offset=0x4 Size=0xc8
        struct entityState_s::<unnamed-type-wes> wes;// Offset=0xcc Size=0x4
        int legsAnim;// Offset=0xd0 Size=0x4
        int torsoAnim;// Offset=0xd4 Size=0x4
        union <unnamed-type-un1>// Size=0x4 (Id=50124)
        {
            int eventParm2;// Offset=0x0 Size=0x4
            int hintString;// Offset=0x0 Size=0x4
            int fxId;// Offset=0x0 Size=0x4
            int helicopterStage;// Offset=0x0 Size=0x4
        };
        unsigned char __align2[212];// Offset=0x4 Size=0xd4
        union entityState_s::<unnamed-type-un1> un1;// Offset=0xd8 Size=0x4
        union <unnamed-type-un2>// Size=0x4 (Id=50130)
        {
            int hintType;// Offset=0x0 Size=0x4
            int vehicleXModel;// Offset=0x0 Size=0x4
            int actorFlags;// Offset=0x0 Size=0x4
            unsigned char weaponModel;// Offset=0x0 Size=0x1
        };
        unsigned char __align3[216];// Offset=0x4 Size=0xd8
    };
    union entityState_s::<unnamed-type-un2> un2;// Offset=0xdc Size=0x4
    struct clientLinkInfo_t clientLinkInfo;// Offset=0xe0 Size=0x4
    unsigned int partBits[5];// Offset=0xe4 Size=0x14
    int clientMask[1];// Offset=0xf8 Size=0x4
    unsigned int pad[1];// Offset=0xfc Size=0x4
};

struct playerState_s// Size=0x3180 (Id=4660)
{
    union // Size=0x848 (Id=0)
    {
        int commandTime;// Offset=0x0 Size=0x4
        int pm_type;// Offset=0x4 Size=0x4
        int pm_time;// Offset=0x8 Size=0x4
        int pm_flags;// Offset=0xc Size=0x4
        int otherFlags;// Offset=0x10 Size=0x4
        int linkFlags;// Offset=0x14 Size=0x4
        int bobCycle;// Offset=0x18 Size=0x4
        float origin[3];// Offset=0x1c Size=0xc
        float velocity[3];// Offset=0x28 Size=0xc
        int grenadeTimeLeft;// Offset=0x34 Size=0x4
        int throwbackGrenadeOwner;// Offset=0x38 Size=0x4
        int throwbackGrenadeTimeLeft;// Offset=0x3c Size=0x4
        unsigned int throwbackWeaponIndex;// Offset=0x40 Size=0x4
        int remoteEyesEnt;// Offset=0x44 Size=0x4
        int remoteEyesTagname;// Offset=0x48 Size=0x4
        int remoteControlEnt;// Offset=0x4c Size=0x4
        int foliageSoundTime;// Offset=0x50 Size=0x4
        int gravity;// Offset=0x54 Size=0x4
        float leanf;// Offset=0x58 Size=0x4
        int speed;// Offset=0x5c Size=0x4
        float delta_angles[3];// Offset=0x60 Size=0xc
        int groundEntityNum;// Offset=0x6c Size=0x4
        float vLadderVec[3];// Offset=0x70 Size=0xc
        int jumpTime;// Offset=0x7c Size=0x4
        float jumpOriginZ;// Offset=0x80 Size=0x4
        int legsTimer;// Offset=0x84 Size=0x4
        int legsAnim;// Offset=0x88 Size=0x4
        int torsoTimer;// Offset=0x8c Size=0x4
        int torsoAnim;// Offset=0x90 Size=0x4
        int legsAnimDuration;// Offset=0x94 Size=0x4
        int torsoAnimDuration;// Offset=0x98 Size=0x4
        int damageTimer;// Offset=0x9c Size=0x4
        int damageDuration;// Offset=0xa0 Size=0x4
        int flinchYawAnim;// Offset=0xa4 Size=0x4
        int corpseIndex;// Offset=0xa8 Size=0x4
        int movementDir;// Offset=0xac Size=0x4
        int eFlags;// Offset=0xb0 Size=0x4
        int eventSequence;// Offset=0xb4 Size=0x4
        int events[4];// Offset=0xb8 Size=0x10
        unsigned int eventParms[4];// Offset=0xc8 Size=0x10
        int oldEventSequence;// Offset=0xd8 Size=0x4
        int unpredictableEventSequence;// Offset=0xdc Size=0x4
        int unpredictableEventSequenceOld;// Offset=0xe0 Size=0x4
        int unpredictableEvents[4];// Offset=0xe4 Size=0x10
        unsigned int unpredictableEventParms[4];// Offset=0xf4 Size=0x10
        int clientNum;// Offset=0x104 Size=0x4
        int viewmodelIndex;// Offset=0x108 Size=0x4
        float viewangles[3];// Offset=0x10c Size=0xc
        int viewHeightTarget;// Offset=0x118 Size=0x4
        float viewHeightCurrent;// Offset=0x11c Size=0x4
        int viewHeightLerpTime;// Offset=0x120 Size=0x4
        int viewHeightLerpTarget;// Offset=0x124 Size=0x4
        int viewHeightLerpDown;// Offset=0x128 Size=0x4
        float viewAngleClampBase[2];// Offset=0x12c Size=0x8
        float viewAngleClampRange[2];// Offset=0x134 Size=0x8
        int damageEvent;// Offset=0x13c Size=0x4
        int damageYaw;// Offset=0x140 Size=0x4
        int damagePitch;// Offset=0x144 Size=0x4
        int damageCount;// Offset=0x148 Size=0x4
        int damageFlags;// Offset=0x14c Size=0x4
        int stats[4];// Offset=0x150 Size=0x10
        float proneDirection;// Offset=0x160 Size=0x4
        float proneDirectionPitch;// Offset=0x164 Size=0x4
        float proneTorsoPitch;// Offset=0x168 Size=0x4
        enum ViewLockTypes viewlocked;// Offset=0x16c Size=0x4
        int viewlocked_entNum;// Offset=0x170 Size=0x4
        float linkAngles[3];// Offset=0x174 Size=0xc
        float linkWeaponAngles[3];// Offset=0x180 Size=0xc
        int linkWeaponEnt;// Offset=0x18c Size=0x4
        int loopSound;// Offset=0x190 Size=0x4
        int cursorHint;// Offset=0x194 Size=0x4
        int cursorHintString;// Offset=0x198 Size=0x4
        int cursorHintEntIndex;// Offset=0x19c Size=0x4
        int cursorHintDualWield;// Offset=0x1a0 Size=0x4
        int iCompassPlayerInfo;// Offset=0x1a4 Size=0x4
        int radarEnabled;// Offset=0x1a8 Size=0x4
        int radarBlocked;// Offset=0x1ac Size=0x4
        int radarMode;// Offset=0x1b0 Size=0x4
        int locationSelectionInfo;// Offset=0x1b4 Size=0x4
        struct SprintState sprintState;// Offset=0x1b8 Size=0x14
        float holdBreathScale;// Offset=0x1cc Size=0x4
        int holdBreathTimer;// Offset=0x1d0 Size=0x4
        float moveSpeedScaleMultiplier;// Offset=0x1d4 Size=0x4
        struct MantleState mantleState;// Offset=0x1d8 Size=0x10
        struct PlayerActiveWeaponState weapState[2];// Offset=0x1e8 Size=0x38
        unsigned int weaponsEquipped[15];// Offset=0x220 Size=0x3c
        struct PlayerEquippedWeaponState weapEquippedData[15];// Offset=0x25c Size=0x4b
        unsigned char __align0[1];// Offset=0x2a7 Size=0x1
        struct PlayerWeaponCommonState weapCommon;// Offset=0x2a8 Size=0x174
        float meleeChargeYaw;// Offset=0x41c Size=0x4
        int meleeChargeDist;// Offset=0x420 Size=0x4
        int meleeChargeTime;// Offset=0x424 Size=0x4
        unsigned int perks[2];// Offset=0x428 Size=0x8
        unsigned int perkSlots[8];// Offset=0x430 Size=0x20
        enum ActionSlotType actionSlotType[4];// Offset=0x450 Size=0x10
        struct ActionSlotParam actionSlotParam[4];// Offset=0x460 Size=0x10
        int weaponHudIconOverrides[6];// Offset=0x470 Size=0x18
        int animScriptedType;// Offset=0x488 Size=0x4
        int shellshockIndex;// Offset=0x48c Size=0x4
        int shellshockTime;// Offset=0x490 Size=0x4
        int shellshockDuration;// Offset=0x494 Size=0x4
        float dofNearStart;// Offset=0x498 Size=0x4
        float dofNearEnd;// Offset=0x49c Size=0x4
        float dofFarStart;// Offset=0x4a0 Size=0x4
        float dofFarEnd;// Offset=0x4a4 Size=0x4
        float dofNearBlur;// Offset=0x4a8 Size=0x4
        float dofFarBlur;// Offset=0x4ac Size=0x4
        float dofViewmodelStart;// Offset=0x4b0 Size=0x4
        float dofViewmodelEnd;// Offset=0x4b4 Size=0x4
        struct objective_t objective[32];// Offset=0x4b8 Size=0x380
        int deltaTime;// Offset=0x838 Size=0x4
        int killCamEntity;// Offset=0x83c Size=0x4
        int killCamLookAtEntity;// Offset=0x840 Size=0x4
        int killCamClientNum;// Offset=0x844 Size=0x4
        struct <unnamed-type-hud>// Size=0x28b0 (Id=49203)
        {
            struct hudelem_s current[31];// Offset=0x0 Size=0x1458
            struct hudelem_s archival[31];// Offset=0x1458 Size=0x1458
        };
    };
    struct playerState_s::<unnamed-type-hud> hud;// Offset=0x848 Size=0x28b0
    unsigned int partBits[5];// Offset=0x30f8 Size=0x14
    int recoilScale;// Offset=0x310c Size=0x4
    int diveDirection;// Offset=0x3110 Size=0x4
    int stunTime;// Offset=0x3114 Size=0x4
};

enum hudelem_update_t
{
    HUDELEM_UPDATE_ARCHIVAL=1,
    HUDELEM_UPDATE_CURRENT=2,
    HUDELEM_UPDATE_ARCHIVAL_AND_CURRENT=3
};

struct level_locals_t// Size=0x2f78 (Id=4662)
{
    struct gclient_s * clients;// Offset=0x0 Size=0x4
    struct gentity_s * gentities;// Offset=0x4 Size=0x4
    int num_entities;// Offset=0x8 Size=0x4
    struct gentity_s * firstFreeEnt;// Offset=0xc Size=0x4
    struct gentity_s * lastFreeEnt;// Offset=0x10 Size=0x4
    struct Turret * turrets;// Offset=0x14 Size=0x4
    void * logFile;// Offset=0x18 Size=0x4
    int initializing;// Offset=0x1c Size=0x4
    int clientIsSpawning;// Offset=0x20 Size=0x4
    struct objective_t objectives[32];// Offset=0x24 Size=0x380
    int maxclients;// Offset=0x3a4 Size=0x4
    int framenum;// Offset=0x3a8 Size=0x4
    int time;// Offset=0x3ac Size=0x4
    int previousTime;// Offset=0x3b0 Size=0x4
    int frametime;// Offset=0x3b4 Size=0x4
    int startTime;// Offset=0x3b8 Size=0x4
    int teamScores[4];// Offset=0x3bc Size=0x10
    int lastTeammateHealthTime;// Offset=0x3cc Size=0x4
    int bUpdateScoresForIntermission;// Offset=0x3d0 Size=0x4
    bool teamHasRadar[4];// Offset=0x3d4 Size=0x4
    bool teamRadarBlocked[4];// Offset=0x3d8 Size=0x4
    int manualNameChange;// Offset=0x3dc Size=0x4
    int numConnectedClients;// Offset=0x3e0 Size=0x4
    int sortedClients[18];// Offset=0x3e4 Size=0x48
    char voteString[1024];// Offset=0x42c Size=0x400
    char voteDisplayString[1024];// Offset=0x82c Size=0x400
    int voteTime;// Offset=0xc2c Size=0x4
    int voteExecuteTime;// Offset=0xc30 Size=0x4
    int voteYes;// Offset=0xc34 Size=0x4
    int voteNo;// Offset=0xc38 Size=0x4
    int numVotingClients;// Offset=0xc3c Size=0x4
    struct SpawnVar spawnVar;// Offset=0xc40 Size=0xa0c
    int savepersist;// Offset=0x164c Size=0x4
    class EntHandle droppedWeaponCue[32];// Offset=0x1650 Size=0x80
    float fFogOpaqueDist;// Offset=0x16d0 Size=0x4
    float fFogOpaqueDistSqrd;// Offset=0x16d4 Size=0x4
    int currentPlayerClone;// Offset=0x16d8 Size=0x4
    struct trigger_info_t pendingTriggerList[256];// Offset=0x16dc Size=0xc00
    struct trigger_info_t currentTriggerList[256];// Offset=0x22dc Size=0xc00
    int pendingTriggerListSize;// Offset=0x2edc Size=0x4
    int currentTriggerListSize;// Offset=0x2ee0 Size=0x4
    int finished;// Offset=0x2ee4 Size=0x4
    int bPlayerIgnoreRadiusDamage;// Offset=0x2ee8 Size=0x4
    int bPlayerIgnoreRadiusDamageLatched;// Offset=0x2eec Size=0x4
    int registerWeapons;// Offset=0x2ef0 Size=0x4
    int bRegisterItems;// Offset=0x2ef4 Size=0x4
    int currentEntityThink;// Offset=0x2ef8 Size=0x4
    void * openScriptIOFileHandles[1];// Offset=0x2efc Size=0x4
    char * openScriptIOFileBuffers[1];// Offset=0x2f00 Size=0x4
    struct com_parse_mark_t currentScriptIOLineMark[1];// Offset=0x2f04 Size=0x14
    struct cached_tag_mat_t cachedTagMat;// Offset=0x2f18 Size=0x3c
    int scriptPrintChannel;// Offset=0x2f54 Size=0x4
    float compassMapUpperLeft[2];// Offset=0x2f58 Size=0x8
    float compassMapWorldSize[2];// Offset=0x2f60 Size=0x8
    float compassNorth[2];// Offset=0x2f68 Size=0x8
    struct Vehicle * vehicles;// Offset=0x2f70 Size=0x4
    int hudElemLastAssignedSoundID;// Offset=0x2f74 Size=0x4
};

struct com_parse_mark_t// Size=0x14 (Id=4663)
{
    int lines;// Offset=0x0 Size=0x4
    char * text;// Offset=0x4 Size=0x4
    int ungetToken;// Offset=0x8 Size=0x4
    int backup_lines;// Offset=0xc Size=0x4
    char * backup_text;// Offset=0x10 Size=0x4
};

struct cached_tag_mat_t// Size=0x3c (Id=4664)
{
    int time;// Offset=0x0 Size=0x4
    int entnum;// Offset=0x4 Size=0x4
    unsigned short name;// Offset=0x8 Size=0x2
    unsigned char __align0[2];// Offset=0xa Size=0x2
    float tagMat[4][3];// Offset=0xc Size=0x30
};

struct trigger_info_t// Size=0xc (Id=4665)
{
    unsigned short entnum;// Offset=0x0 Size=0x2
    unsigned short otherEntnum;// Offset=0x2 Size=0x2
    int useCount;// Offset=0x4 Size=0x4
    int otherUseCount;// Offset=0x8 Size=0x4
};

struct SpawnVar// Size=0xa0c (Id=4666)
{
    bool spawnVarsValid;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    int numSpawnVars;// Offset=0x4 Size=0x4
    char * spawnVars[64][2];// Offset=0x8 Size=0x200
    int numSpawnVarChars;// Offset=0x208 Size=0x4
    char spawnVarChars[2048];// Offset=0x20c Size=0x800
};

enum SideClassification
{
    SIDE_FRONT=0,
    SIDE_BACK=1,
    SIDE_ON=2,
    SIDE_CROSS=3,
    SIDE_COUNT=4
};

enum clientConnected_t
{
    CON_DISCONNECTED=0,
    CON_CONNECTING=1,
    CON_CONNECTED=2
};

struct ExtentBounds// Size=0x18 (Id=4669)
{
    float mins[3];// Offset=0x0 Size=0xc
    float maxs[3];// Offset=0xc Size=0xc
};

enum sessionState_t
{
    SESS_STATE_PLAYING=0,
    SESS_STATE_DEAD=1,
    SESS_STATE_SPECTATOR=2,
    SESS_STATE_INTERMISSION=3
};

struct playerTeamState_t// Size=0x4 (Id=4671)
{
    int location;// Offset=0x0 Size=0x4
};

struct viewClamp// Size=0x18 (Id=4672)
{
    float start[2];// Offset=0x0 Size=0x8
    float current[2];// Offset=0x8 Size=0x8
    float goal[2];// Offset=0x10 Size=0x8
};

struct clientSession_t// Size=0x2a0 (Id=4673)
{
    enum sessionState_t sessionState;// Offset=0x0 Size=0x4
    int forceSpectatorClient;// Offset=0x4 Size=0x4
    int killCamEntity;// Offset=0x8 Size=0x4
    int killCamLookAtEntity;// Offset=0xc Size=0x4
    int status_icon;// Offset=0x10 Size=0x4
    int archiveTime;// Offset=0x14 Size=0x4
    int score;// Offset=0x18 Size=0x4
    int deaths;// Offset=0x1c Size=0x4
    int kills;// Offset=0x20 Size=0x4
    int assists;// Offset=0x24 Size=0x4
    unsigned short scriptPersId;// Offset=0x28 Size=0x2
    unsigned char __align0[2];// Offset=0x2a Size=0x2
    enum clientConnected_t connected;// Offset=0x2c Size=0x4
    struct usercmd_s cmd;// Offset=0x30 Size=0x28
    struct usercmd_s oldcmd;// Offset=0x58 Size=0x28
    int localClient;// Offset=0x80 Size=0x4
    int predictItemPickup;// Offset=0x84 Size=0x4
    char newnetname[32];// Offset=0x88 Size=0x20
    int maxHealth;// Offset=0xa8 Size=0x4
    int enterTime;// Offset=0xac Size=0x4
    struct playerTeamState_t teamState;// Offset=0xb0 Size=0x4
    int voteCount;// Offset=0xb4 Size=0x4
    int teamVoteCount;// Offset=0xb8 Size=0x4
    float moveSpeedScaleMultiplier;// Offset=0xbc Size=0x4
    int viewmodelIndex;// Offset=0xc0 Size=0x4
    int noSpectate;// Offset=0xc4 Size=0x4
    int teamInfo;// Offset=0xc8 Size=0x4
    struct clientState_s cs;// Offset=0xcc Size=0x94
    int psOffsetTime;// Offset=0x160 Size=0x4
    int hasRadar;// Offset=0x164 Size=0x4
    int isRadarBlocked;// Offset=0x168 Size=0x4
    int radarMode;// Offset=0x16c Size=0x4
    int weaponHudIconOverrides[6];// Offset=0x170 Size=0x18
    unsigned int unusableEntFlags[64];// Offset=0x188 Size=0x100
    float spectateDefaultPos[3];// Offset=0x288 Size=0xc
    float spectateDefaultAngles[3];// Offset=0x294 Size=0xc
};

struct Sphere// Size=0x14 (Id=4674)
{
    float origin[3];// Offset=0x0 Size=0xc
    float radius;// Offset=0xc Size=0x4
    float radiusSq;// Offset=0x10 Size=0x4
};

struct BuildBounds// Size=0x20 (Id=4675)
{
    struct __vector4 mins;// Offset=0x0 Size=0x10
    struct __vector4 maxs;// Offset=0x10 Size=0x10
};

struct viewClampState// Size=0x40 (Id=4676)
{
    struct viewClamp min;// Offset=0x0 Size=0x18
    struct viewClamp max;// Offset=0x18 Size=0x18
    float accelTime;// Offset=0x30 Size=0x4
    float decelTime;// Offset=0x34 Size=0x4
    float totalTime;// Offset=0x38 Size=0x4
    float startTime;// Offset=0x3c Size=0x4
};

struct tagInfo_s// Size=0x70 (Id=4677)
{
    struct gentity_s * parent;// Offset=0x0 Size=0x4
    struct gentity_s * next;// Offset=0x4 Size=0x4
    unsigned short name;// Offset=0x8 Size=0x2
    bool blendToParent;// Offset=0xa Size=0x1
    unsigned char __align0[1];// Offset=0xb Size=0x1
    int index;// Offset=0xc Size=0x4
    float axis[4][3];// Offset=0x10 Size=0x30
    float parentInvAxis[4][3];// Offset=0x40 Size=0x30
};

struct gclient_s// Size=0x3700 (Id=4678)
{
    struct playerState_s ps;// Offset=0x0 Size=0x3180
    struct clientSession_t sess;// Offset=0x3180 Size=0x2a0
    int flags;// Offset=0x3420 Size=0x4
    int spectatorClient;// Offset=0x3424 Size=0x4
    int lastCmdTime;// Offset=0x3428 Size=0x4
    int buttons;// Offset=0x342c Size=0x4
    int oldbuttons;// Offset=0x3430 Size=0x4
    int latched_buttons;// Offset=0x3434 Size=0x4
    int buttonsSinceLastFrame;// Offset=0x3438 Size=0x4
    float oldOrigin[3];// Offset=0x343c Size=0xc
    float fGunPitch;// Offset=0x3448 Size=0x4
    float fGunYaw;// Offset=0x344c Size=0x4
    int damage_blood;// Offset=0x3450 Size=0x4
    int damage_stun;// Offset=0x3454 Size=0x4
    float damage_from[3];// Offset=0x3458 Size=0xc
    int damage_fromWorld;// Offset=0x3464 Size=0x4
    int accurateCount;// Offset=0x3468 Size=0x4
    int accuracy_shots;// Offset=0x346c Size=0x4
    int accuracy_hits;// Offset=0x3470 Size=0x4
    int inactivityTime;// Offset=0x3474 Size=0x4
    int inactivityWarning;// Offset=0x3478 Size=0x4
    int lastVoiceTime;// Offset=0x347c Size=0x4
    int switchTeamTime;// Offset=0x3480 Size=0x4
    float currentAimSpreadScale;// Offset=0x3484 Size=0x4
    float prevLinkedInvQuat[4];// Offset=0x3488 Size=0x10
    bool prevLinkAnglesSet;// Offset=0x3498 Size=0x1
    bool link_rotationMovesEyePos;// Offset=0x3499 Size=0x1
    bool link_doCollision;// Offset=0x349a Size=0x1
    bool link_useTagAnglesForViewAngles;// Offset=0x349b Size=0x1
    float linkAnglesFrac;// Offset=0x349c Size=0x4
    struct viewClampState link_viewClamp;// Offset=0x34a0 Size=0x40
    struct gentity_s * persistantPowerup;// Offset=0x34e0 Size=0x4
    int portalID;// Offset=0x34e4 Size=0x4
    int dropWeaponTime;// Offset=0x34e8 Size=0x4
    int sniperRifleFiredTime;// Offset=0x34ec Size=0x4
    float sniperRifleMuzzleYaw;// Offset=0x34f0 Size=0x4
    int PCSpecialPickedUpCount;// Offset=0x34f4 Size=0x4
    class EntHandle useHoldEntity;// Offset=0x34f8 Size=0x4
    int useHoldTime;// Offset=0x34fc Size=0x4
    int useButtonDone;// Offset=0x3500 Size=0x4
    int iLastCompassPlayerInfoEnt;// Offset=0x3504 Size=0x4
    int compassPingTime;// Offset=0x3508 Size=0x4
    int damageTime;// Offset=0x350c Size=0x4
    float v_dmg_roll;// Offset=0x3510 Size=0x4
    float v_dmg_pitch;// Offset=0x3514 Size=0x4
    float baseAngles[3];// Offset=0x3518 Size=0xc
    float baseOrigin[3];// Offset=0x3524 Size=0xc
    float swayViewAngles[3];// Offset=0x3530 Size=0xc
    float swayOffset[3];// Offset=0x353c Size=0xc
    float swayAngles[3];// Offset=0x3548 Size=0xc
    float recoilAngles[3];// Offset=0x3554 Size=0xc
    float recoilSpeed[3];// Offset=0x3560 Size=0xc
    float fLastIdleFactor;// Offset=0x356c Size=0x4
    int weapIdleTime;// Offset=0x3570 Size=0x4
    int lastServerTime;// Offset=0x3574 Size=0x4
    unsigned int lastWeapon;// Offset=0x3578 Size=0x4
    bool previouslyFiring;// Offset=0x357c Size=0x1
    bool previouslyFiringLeftHand;// Offset=0x357d Size=0x1
    bool previouslyUsingNightVision;// Offset=0x357e Size=0x1
    bool previouslySprinting;// Offset=0x357f Size=0x1
    int visionDuration[5];// Offset=0x3580 Size=0x14
    char visionName[5][64];// Offset=0x3594 Size=0x140
    int lastStand;// Offset=0x36d4 Size=0x4
    int lastStandTime;// Offset=0x36d8 Size=0x4
    int hudElemLastAssignedSoundID;// Offset=0x36dc Size=0x4
    float lockedTargetOffset[3];// Offset=0x36e0 Size=0xc
    int attachShieldTagName;// Offset=0x36ec Size=0x4
    enum hintType_t hintForcedType;// Offset=0x36f0 Size=0x4
    int hintForcedString;// Offset=0x36f4 Size=0x4
};

union EntityCustomData// Size=0x4 (Id=4679)
{
    void * sndNotifyData;// Offset=0x0 Size=0x4
    unsigned short entityData[2];// Offset=0x0 Size=0x4
};

enum _unnamed_4680
{
    ENTITYCUSTOMDATA_LOCALCLIENTNUM=0,
    ENTITYCUSTOMDATA_ENTNUM=1
};

struct TracerDef// Size=0x70 (Id=4681)
{
    char * name;// Offset=0x0 Size=0x4
    struct Material * material;// Offset=0x4 Size=0x4
    unsigned int drawInterval;// Offset=0x8 Size=0x4
    float speed;// Offset=0xc Size=0x4
    float beamLength;// Offset=0x10 Size=0x4
    float beamWidth;// Offset=0x14 Size=0x4
    float screwRadius;// Offset=0x18 Size=0x4
    float screwDist;// Offset=0x1c Size=0x4
    float colors[5][4];// Offset=0x20 Size=0x50
};

struct centity_s// Size=0x1f4 (Id=4682)
{
    struct cpose_t pose;// Offset=0x0 Size=0x60
    struct LerpEntityState prevState;// Offset=0x60 Size=0x70
    struct entityState_s nextState;// Offset=0xd0 Size=0x100
    int flags;// Offset=0x1d0 Size=0x4
    unsigned char tracerDrawRateCounter;// Offset=0x1d4 Size=0x1
    unsigned char weaponVisTestCounter;// Offset=0x1d5 Size=0x1
    unsigned char __align0[2];// Offset=0x1d6 Size=0x2
    int previousEventSequence;// Offset=0x1d8 Size=0x4
    int pickupPredictionTime;// Offset=0x1dc Size=0x4
    float lightingOrigin[3];// Offset=0x1e0 Size=0xc
    struct XAnimTree_s * tree;// Offset=0x1ec Size=0x4
    struct centity_s * updateDelayedNext;// Offset=0x1f0 Size=0x4
};

struct WeaponDef// Size=0x680 (Id=4683)
{
    char * szOverlayName;// Offset=0x0 Size=0x4
    struct XModel ** gunXModel;// Offset=0x4 Size=0x4
    struct XModel * handXModel;// Offset=0x8 Size=0x4
    char ** szXAnimsRightHanded;// Offset=0xc Size=0x4
    char ** szXAnimsLeftHanded;// Offset=0x10 Size=0x4
    char * szModeName;// Offset=0x14 Size=0x4
    unsigned short * notetrackSoundMapKeys;// Offset=0x18 Size=0x4
    unsigned short * notetrackSoundMapValues;// Offset=0x1c Size=0x4
    unsigned short * notetrackRumbleMapKeys;// Offset=0x20 Size=0x4
    unsigned short * notetrackRumbleMapValues;// Offset=0x24 Size=0x4
    int playerAnimType;// Offset=0x28 Size=0x4
    enum weapType_t weapType;// Offset=0x2c Size=0x4
    enum weapClass_t weapClass;// Offset=0x30 Size=0x4
    enum PenetrateType penetrateType;// Offset=0x34 Size=0x4
    enum weapInventoryType_t inventoryType;// Offset=0x38 Size=0x4
    enum weapFireType_t fireType;// Offset=0x3c Size=0x4
    enum OffhandClass offhandClass;// Offset=0x40 Size=0x4
    enum weapStance_t stance;// Offset=0x44 Size=0x4
    struct FxEffectDef * viewFlashEffect;// Offset=0x48 Size=0x4
    struct FxEffectDef * worldFlashEffect;// Offset=0x4c Size=0x4
    struct snd_alias_list_t * pickupSound;// Offset=0x50 Size=0x4
    struct snd_alias_list_t * pickupSoundPlayer;// Offset=0x54 Size=0x4
    struct snd_alias_list_t * ammoPickupSound;// Offset=0x58 Size=0x4
    struct snd_alias_list_t * ammoPickupSoundPlayer;// Offset=0x5c Size=0x4
    struct snd_alias_list_t * projectileSound;// Offset=0x60 Size=0x4
    struct snd_alias_list_t * pullbackSound;// Offset=0x64 Size=0x4
    struct snd_alias_list_t * pullbackSoundPlayer;// Offset=0x68 Size=0x4
    struct snd_alias_list_t * fireSound;// Offset=0x6c Size=0x4
    struct snd_alias_list_t * fireSoundPlayer;// Offset=0x70 Size=0x4
    struct snd_alias_list_t * fireSoundPlayerAkimbo;// Offset=0x74 Size=0x4
    struct snd_alias_list_t * fireLoopSound;// Offset=0x78 Size=0x4
    struct snd_alias_list_t * fireLoopSoundPlayer;// Offset=0x7c Size=0x4
    struct snd_alias_list_t * fireStopSound;// Offset=0x80 Size=0x4
    struct snd_alias_list_t * fireStopSoundPlayer;// Offset=0x84 Size=0x4
    struct snd_alias_list_t * fireLastSound;// Offset=0x88 Size=0x4
    struct snd_alias_list_t * fireLastSoundPlayer;// Offset=0x8c Size=0x4
    struct snd_alias_list_t * emptyFireSound;// Offset=0x90 Size=0x4
    struct snd_alias_list_t * emptyFireSoundPlayer;// Offset=0x94 Size=0x4
    struct snd_alias_list_t * meleeSwipeSound;// Offset=0x98 Size=0x4
    struct snd_alias_list_t * meleeSwipeSoundPlayer;// Offset=0x9c Size=0x4
    struct snd_alias_list_t * meleeHitSound;// Offset=0xa0 Size=0x4
    struct snd_alias_list_t * meleeMissSound;// Offset=0xa4 Size=0x4
    struct snd_alias_list_t * rechamberSound;// Offset=0xa8 Size=0x4
    struct snd_alias_list_t * rechamberSoundPlayer;// Offset=0xac Size=0x4
    struct snd_alias_list_t * reloadSound;// Offset=0xb0 Size=0x4
    struct snd_alias_list_t * reloadSoundPlayer;// Offset=0xb4 Size=0x4
    struct snd_alias_list_t * reloadEmptySound;// Offset=0xb8 Size=0x4
    struct snd_alias_list_t * reloadEmptySoundPlayer;// Offset=0xbc Size=0x4
    struct snd_alias_list_t * reloadStartSound;// Offset=0xc0 Size=0x4
    struct snd_alias_list_t * reloadStartSoundPlayer;// Offset=0xc4 Size=0x4
    struct snd_alias_list_t * reloadEndSound;// Offset=0xc8 Size=0x4
    struct snd_alias_list_t * reloadEndSoundPlayer;// Offset=0xcc Size=0x4
    struct snd_alias_list_t * detonateSound;// Offset=0xd0 Size=0x4
    struct snd_alias_list_t * detonateSoundPlayer;// Offset=0xd4 Size=0x4
    struct snd_alias_list_t * nightVisionWearSound;// Offset=0xd8 Size=0x4
    struct snd_alias_list_t * nightVisionWearSoundPlayer;// Offset=0xdc Size=0x4
    struct snd_alias_list_t * nightVisionRemoveSound;// Offset=0xe0 Size=0x4
    struct snd_alias_list_t * nightVisionRemoveSoundPlayer;// Offset=0xe4 Size=0x4
    struct snd_alias_list_t * altSwitchSound;// Offset=0xe8 Size=0x4
    struct snd_alias_list_t * altSwitchSoundPlayer;// Offset=0xec Size=0x4
    struct snd_alias_list_t * raiseSound;// Offset=0xf0 Size=0x4
    struct snd_alias_list_t * raiseSoundPlayer;// Offset=0xf4 Size=0x4
    struct snd_alias_list_t * firstRaiseSound;// Offset=0xf8 Size=0x4
    struct snd_alias_list_t * firstRaiseSoundPlayer;// Offset=0xfc Size=0x4
    struct snd_alias_list_t * putawaySound;// Offset=0x100 Size=0x4
    struct snd_alias_list_t * putawaySoundPlayer;// Offset=0x104 Size=0x4
    struct snd_alias_list_t * scanSound;// Offset=0x108 Size=0x4
    struct snd_alias_list_t ** bounceSound;// Offset=0x10c Size=0x4
    struct FxEffectDef * viewShellEjectEffect;// Offset=0x110 Size=0x4
    struct FxEffectDef * worldShellEjectEffect;// Offset=0x114 Size=0x4
    struct FxEffectDef * viewLastShotEjectEffect;// Offset=0x118 Size=0x4
    struct FxEffectDef * worldLastShotEjectEffect;// Offset=0x11c Size=0x4
    struct Material * reticleCenter;// Offset=0x120 Size=0x4
    struct Material * reticleSide;// Offset=0x124 Size=0x4
    int iReticleCenterSize;// Offset=0x128 Size=0x4
    int iReticleSideSize;// Offset=0x12c Size=0x4
    int iReticleMinOfs;// Offset=0x130 Size=0x4
    enum activeReticleType_t activeReticleType;// Offset=0x134 Size=0x4
    float vStandMove[3];// Offset=0x138 Size=0xc
    float vStandRot[3];// Offset=0x144 Size=0xc
    float strafeMove[3];// Offset=0x150 Size=0xc
    float strafeRot[3];// Offset=0x15c Size=0xc
    float vDuckedOfs[3];// Offset=0x168 Size=0xc
    float vDuckedMove[3];// Offset=0x174 Size=0xc
    float vDuckedRot[3];// Offset=0x180 Size=0xc
    float vProneOfs[3];// Offset=0x18c Size=0xc
    float vProneMove[3];// Offset=0x198 Size=0xc
    float vProneRot[3];// Offset=0x1a4 Size=0xc
    float fPosMoveRate;// Offset=0x1b0 Size=0x4
    float fPosProneMoveRate;// Offset=0x1b4 Size=0x4
    float fStandMoveMinSpeed;// Offset=0x1b8 Size=0x4
    float fDuckedMoveMinSpeed;// Offset=0x1bc Size=0x4
    float fProneMoveMinSpeed;// Offset=0x1c0 Size=0x4
    float fPosRotRate;// Offset=0x1c4 Size=0x4
    float fPosProneRotRate;// Offset=0x1c8 Size=0x4
    float fStandRotMinSpeed;// Offset=0x1cc Size=0x4
    float fDuckedRotMinSpeed;// Offset=0x1d0 Size=0x4
    float fProneRotMinSpeed;// Offset=0x1d4 Size=0x4
    struct XModel ** worldModel;// Offset=0x1d8 Size=0x4
    struct XModel * worldClipModel;// Offset=0x1dc Size=0x4
    struct XModel * rocketModel;// Offset=0x1e0 Size=0x4
    struct XModel * knifeModel;// Offset=0x1e4 Size=0x4
    struct XModel * worldKnifeModel;// Offset=0x1e8 Size=0x4
    struct Material * hudIcon;// Offset=0x1ec Size=0x4
    enum weaponIconRatioType_t hudIconRatio;// Offset=0x1f0 Size=0x4
    struct Material * pickupIcon;// Offset=0x1f4 Size=0x4
    enum weaponIconRatioType_t pickupIconRatio;// Offset=0x1f8 Size=0x4
    struct Material * ammoCounterIcon;// Offset=0x1fc Size=0x4
    enum weaponIconRatioType_t ammoCounterIconRatio;// Offset=0x200 Size=0x4
    enum ammoCounterClipType_t ammoCounterClip;// Offset=0x204 Size=0x4
    int iStartAmmo;// Offset=0x208 Size=0x4
    char * szAmmoName;// Offset=0x20c Size=0x4
    int iAmmoIndex;// Offset=0x210 Size=0x4
    char * szClipName;// Offset=0x214 Size=0x4
    int iClipIndex;// Offset=0x218 Size=0x4
    int iMaxAmmo;// Offset=0x21c Size=0x4
    int shotCount;// Offset=0x220 Size=0x4
    char * szSharedAmmoCapName;// Offset=0x224 Size=0x4
    int iSharedAmmoCapIndex;// Offset=0x228 Size=0x4
    int iSharedAmmoCap;// Offset=0x22c Size=0x4
    int damage;// Offset=0x230 Size=0x4
    int playerDamage;// Offset=0x234 Size=0x4
    int iMeleeDamage;// Offset=0x238 Size=0x4
    int iDamageType;// Offset=0x23c Size=0x4
    int iFireDelay;// Offset=0x240 Size=0x4
    int iMeleeDelay;// Offset=0x244 Size=0x4
    int meleeChargeDelay;// Offset=0x248 Size=0x4
    int iDetonateDelay;// Offset=0x24c Size=0x4
    int iRechamberTime;// Offset=0x250 Size=0x4
    int rechamberTimeOneHanded;// Offset=0x254 Size=0x4
    int iRechamberBoltTime;// Offset=0x258 Size=0x4
    int iHoldFireTime;// Offset=0x25c Size=0x4
    int iDetonateTime;// Offset=0x260 Size=0x4
    int iMeleeTime;// Offset=0x264 Size=0x4
    int meleeChargeTime;// Offset=0x268 Size=0x4
    int iReloadTime;// Offset=0x26c Size=0x4
    int reloadShowRocketTime;// Offset=0x270 Size=0x4
    int iReloadEmptyTime;// Offset=0x274 Size=0x4
    int iReloadAddTime;// Offset=0x278 Size=0x4
    int iReloadStartTime;// Offset=0x27c Size=0x4
    int iReloadStartAddTime;// Offset=0x280 Size=0x4
    int iReloadEndTime;// Offset=0x284 Size=0x4
    int iDropTime;// Offset=0x288 Size=0x4
    int iRaiseTime;// Offset=0x28c Size=0x4
    int iAltDropTime;// Offset=0x290 Size=0x4
    int quickDropTime;// Offset=0x294 Size=0x4
    int quickRaiseTime;// Offset=0x298 Size=0x4
    int iBreachRaiseTime;// Offset=0x29c Size=0x4
    int iEmptyRaiseTime;// Offset=0x2a0 Size=0x4
    int iEmptyDropTime;// Offset=0x2a4 Size=0x4
    int sprintInTime;// Offset=0x2a8 Size=0x4
    int sprintLoopTime;// Offset=0x2ac Size=0x4
    int sprintOutTime;// Offset=0x2b0 Size=0x4
    int stunnedTimeBegin;// Offset=0x2b4 Size=0x4
    int stunnedTimeLoop;// Offset=0x2b8 Size=0x4
    int stunnedTimeEnd;// Offset=0x2bc Size=0x4
    int nightVisionWearTime;// Offset=0x2c0 Size=0x4
    int nightVisionWearTimeFadeOutEnd;// Offset=0x2c4 Size=0x4
    int nightVisionWearTimePowerUp;// Offset=0x2c8 Size=0x4
    int nightVisionRemoveTime;// Offset=0x2cc Size=0x4
    int nightVisionRemoveTimePowerDown;// Offset=0x2d0 Size=0x4
    int nightVisionRemoveTimeFadeInStart;// Offset=0x2d4 Size=0x4
    int fuseTime;// Offset=0x2d8 Size=0x4
    int aiFuseTime;// Offset=0x2dc Size=0x4
    float autoAimRange;// Offset=0x2e0 Size=0x4
    float aimAssistRange;// Offset=0x2e4 Size=0x4
    float aimAssistRangeAds;// Offset=0x2e8 Size=0x4
    float aimPadding;// Offset=0x2ec Size=0x4
    float enemyCrosshairRange;// Offset=0x2f0 Size=0x4
    float moveSpeedScale;// Offset=0x2f4 Size=0x4
    float adsMoveSpeedScale;// Offset=0x2f8 Size=0x4
    float sprintDurationScale;// Offset=0x2fc Size=0x4
    float fAdsZoomInFrac;// Offset=0x300 Size=0x4
    float fAdsZoomOutFrac;// Offset=0x304 Size=0x4
    struct Material * overlayMaterial;// Offset=0x308 Size=0x4
    struct Material * overlayMaterialLowRes;// Offset=0x30c Size=0x4
    struct Material * overlayMaterialEMP;// Offset=0x310 Size=0x4
    struct Material * overlayMaterialEMPLowRes;// Offset=0x314 Size=0x4
    enum weapOverlayReticle_t overlayReticle;// Offset=0x318 Size=0x4
    enum WeapOverlayInteface_t overlayInterface;// Offset=0x31c Size=0x4
    float overlayWidth;// Offset=0x320 Size=0x4
    float overlayHeight;// Offset=0x324 Size=0x4
    float overlayWidthSplitscreen;// Offset=0x328 Size=0x4
    float overlayHeightSplitscreen;// Offset=0x32c Size=0x4
    float fAdsBobFactor;// Offset=0x330 Size=0x4
    float fAdsViewBobMult;// Offset=0x334 Size=0x4
    float fHipSpreadStandMin;// Offset=0x338 Size=0x4
    float fHipSpreadDuckedMin;// Offset=0x33c Size=0x4
    float fHipSpreadProneMin;// Offset=0x340 Size=0x4
    float hipSpreadStandMax;// Offset=0x344 Size=0x4
    float hipSpreadDuckedMax;// Offset=0x348 Size=0x4
    float hipSpreadProneMax;// Offset=0x34c Size=0x4
    float fHipSpreadDecayRate;// Offset=0x350 Size=0x4
    float fHipSpreadFireAdd;// Offset=0x354 Size=0x4
    float fHipSpreadTurnAdd;// Offset=0x358 Size=0x4
    float fHipSpreadMoveAdd;// Offset=0x35c Size=0x4
    float fHipSpreadDuckedDecay;// Offset=0x360 Size=0x4
    float fHipSpreadProneDecay;// Offset=0x364 Size=0x4
    float fHipReticleSidePos;// Offset=0x368 Size=0x4
    float fAdsIdleAmount;// Offset=0x36c Size=0x4
    float fHipIdleAmount;// Offset=0x370 Size=0x4
    float adsIdleSpeed;// Offset=0x374 Size=0x4
    float hipIdleSpeed;// Offset=0x378 Size=0x4
    float fIdleCrouchFactor;// Offset=0x37c Size=0x4
    float fIdleProneFactor;// Offset=0x380 Size=0x4
    float fGunMaxPitch;// Offset=0x384 Size=0x4
    float fGunMaxYaw;// Offset=0x388 Size=0x4
    float swayMaxAngle;// Offset=0x38c Size=0x4
    float swayLerpSpeed;// Offset=0x390 Size=0x4
    float swayPitchScale;// Offset=0x394 Size=0x4
    float swayYawScale;// Offset=0x398 Size=0x4
    float swayHorizScale;// Offset=0x39c Size=0x4
    float swayVertScale;// Offset=0x3a0 Size=0x4
    float swayShellShockScale;// Offset=0x3a4 Size=0x4
    float adsSwayMaxAngle;// Offset=0x3a8 Size=0x4
    float adsSwayLerpSpeed;// Offset=0x3ac Size=0x4
    float adsSwayPitchScale;// Offset=0x3b0 Size=0x4
    float adsSwayYawScale;// Offset=0x3b4 Size=0x4
    float adsSwayHorizScale;// Offset=0x3b8 Size=0x4
    float adsSwayVertScale;// Offset=0x3bc Size=0x4
    float adsViewErrorMin;// Offset=0x3c0 Size=0x4
    float adsViewErrorMax;// Offset=0x3c4 Size=0x4
    struct PhysCollmap * physCollmap;// Offset=0x3c8 Size=0x4
    float dualWieldViewModelOffset;// Offset=0x3cc Size=0x4
    enum weaponIconRatioType_t killIconRatio;// Offset=0x3d0 Size=0x4
    int iReloadAmmoAdd;// Offset=0x3d4 Size=0x4
    int iReloadStartAdd;// Offset=0x3d8 Size=0x4
    int ammoDropStockMin;// Offset=0x3dc Size=0x4
    int ammoDropClipPercentMin;// Offset=0x3e0 Size=0x4
    int ammoDropClipPercentMax;// Offset=0x3e4 Size=0x4
    int iExplosionRadius;// Offset=0x3e8 Size=0x4
    int iExplosionRadiusMin;// Offset=0x3ec Size=0x4
    int iExplosionInnerDamage;// Offset=0x3f0 Size=0x4
    int iExplosionOuterDamage;// Offset=0x3f4 Size=0x4
    float damageConeAngle;// Offset=0x3f8 Size=0x4
    float bulletExplDmgMult;// Offset=0x3fc Size=0x4
    float bulletExplRadiusMult;// Offset=0x400 Size=0x4
    int iProjectileSpeed;// Offset=0x404 Size=0x4
    int iProjectileSpeedUp;// Offset=0x408 Size=0x4
    int iProjectileSpeedForward;// Offset=0x40c Size=0x4
    int iProjectileActivateDist;// Offset=0x410 Size=0x4
    float projLifetime;// Offset=0x414 Size=0x4
    float timeToAccelerate;// Offset=0x418 Size=0x4
    float projectileCurvature;// Offset=0x41c Size=0x4
    struct XModel * projectileModel;// Offset=0x420 Size=0x4
    enum weapProjExposion_t projExplosion;// Offset=0x424 Size=0x4
    struct FxEffectDef * projExplosionEffect;// Offset=0x428 Size=0x4
    struct FxEffectDef * projDudEffect;// Offset=0x42c Size=0x4
    struct snd_alias_list_t * projExplosionSound;// Offset=0x430 Size=0x4
    struct snd_alias_list_t * projDudSound;// Offset=0x434 Size=0x4
    enum WeapStickinessType stickiness;// Offset=0x438 Size=0x4
    float lowAmmoWarningThreshold;// Offset=0x43c Size=0x4
    float ricochetChance;// Offset=0x440 Size=0x4
    float * parallelBounce;// Offset=0x444 Size=0x4
    float * perpendicularBounce;// Offset=0x448 Size=0x4
    struct FxEffectDef * projTrailEffect;// Offset=0x44c Size=0x4
    struct FxEffectDef * projBeaconEffect;// Offset=0x450 Size=0x4
    float vProjectileColor[3];// Offset=0x454 Size=0xc
    enum guidedMissileType_t guidedMissileType;// Offset=0x460 Size=0x4
    float maxSteeringAccel;// Offset=0x464 Size=0x4
    int projIgnitionDelay;// Offset=0x468 Size=0x4
    struct FxEffectDef * projIgnitionEffect;// Offset=0x46c Size=0x4
    struct snd_alias_list_t * projIgnitionSound;// Offset=0x470 Size=0x4
    float fAdsAimPitch;// Offset=0x474 Size=0x4
    float fAdsCrosshairInFrac;// Offset=0x478 Size=0x4
    float fAdsCrosshairOutFrac;// Offset=0x47c Size=0x4
    int adsGunKickReducedKickBullets;// Offset=0x480 Size=0x4
    float adsGunKickReducedKickPercent;// Offset=0x484 Size=0x4
    float fAdsGunKickPitchMin;// Offset=0x488 Size=0x4
    float fAdsGunKickPitchMax;// Offset=0x48c Size=0x4
    float fAdsGunKickYawMin;// Offset=0x490 Size=0x4
    float fAdsGunKickYawMax;// Offset=0x494 Size=0x4
    float fAdsGunKickAccel;// Offset=0x498 Size=0x4
    float fAdsGunKickSpeedMax;// Offset=0x49c Size=0x4
    float fAdsGunKickSpeedDecay;// Offset=0x4a0 Size=0x4
    float fAdsGunKickStaticDecay;// Offset=0x4a4 Size=0x4
    float fAdsViewKickPitchMin;// Offset=0x4a8 Size=0x4
    float fAdsViewKickPitchMax;// Offset=0x4ac Size=0x4
    float fAdsViewKickYawMin;// Offset=0x4b0 Size=0x4
    float fAdsViewKickYawMax;// Offset=0x4b4 Size=0x4
    float fAdsViewScatterMin;// Offset=0x4b8 Size=0x4
    float fAdsViewScatterMax;// Offset=0x4bc Size=0x4
    float fAdsSpread;// Offset=0x4c0 Size=0x4
    int hipGunKickReducedKickBullets;// Offset=0x4c4 Size=0x4
    float hipGunKickReducedKickPercent;// Offset=0x4c8 Size=0x4
    float fHipGunKickPitchMin;// Offset=0x4cc Size=0x4
    float fHipGunKickPitchMax;// Offset=0x4d0 Size=0x4
    float fHipGunKickYawMin;// Offset=0x4d4 Size=0x4
    float fHipGunKickYawMax;// Offset=0x4d8 Size=0x4
    float fHipGunKickAccel;// Offset=0x4dc Size=0x4
    float fHipGunKickSpeedMax;// Offset=0x4e0 Size=0x4
    float fHipGunKickSpeedDecay;// Offset=0x4e4 Size=0x4
    float fHipGunKickStaticDecay;// Offset=0x4e8 Size=0x4
    float fHipViewKickPitchMin;// Offset=0x4ec Size=0x4
    float fHipViewKickPitchMax;// Offset=0x4f0 Size=0x4
    float fHipViewKickYawMin;// Offset=0x4f4 Size=0x4
    float fHipViewKickYawMax;// Offset=0x4f8 Size=0x4
    float fHipViewScatterMin;// Offset=0x4fc Size=0x4
    float fHipViewScatterMax;// Offset=0x500 Size=0x4
    float fightDist;// Offset=0x504 Size=0x4
    float maxDist;// Offset=0x508 Size=0x4
    char * accuracyGraphName[2];// Offset=0x50c Size=0x8
    float * originalAccuracyGraphKnots[2][2];// Offset=0x514 Size=0x8
    unsigned short originalAccuracyGraphKnotCount[2];// Offset=0x51c Size=0x4
    int iPositionReloadTransTime;// Offset=0x520 Size=0x4
    float leftArc;// Offset=0x524 Size=0x4
    float rightArc;// Offset=0x528 Size=0x4
    float topArc;// Offset=0x52c Size=0x4
    float bottomArc;// Offset=0x530 Size=0x4
    float accuracy;// Offset=0x534 Size=0x4
    float aiSpread;// Offset=0x538 Size=0x4
    float playerSpread;// Offset=0x53c Size=0x4
    float minTurnSpeed[2];// Offset=0x540 Size=0x8
    float maxTurnSpeed[2];// Offset=0x548 Size=0x8
    float pitchConvergenceTime;// Offset=0x550 Size=0x4
    float yawConvergenceTime;// Offset=0x554 Size=0x4
    float suppressTime;// Offset=0x558 Size=0x4
    float maxRange;// Offset=0x55c Size=0x4
    float fAnimHorRotateInc;// Offset=0x560 Size=0x4
    float fPlayerPositionDist;// Offset=0x564 Size=0x4
    char * szUseHintString;// Offset=0x568 Size=0x4
    char * dropHintString;// Offset=0x56c Size=0x4
    int iUseHintStringIndex;// Offset=0x570 Size=0x4
    int dropHintStringIndex;// Offset=0x574 Size=0x4
    float horizViewJitter;// Offset=0x578 Size=0x4
    float vertViewJitter;// Offset=0x57c Size=0x4
    float scanSpeed;// Offset=0x580 Size=0x4
    float scanAccel;// Offset=0x584 Size=0x4
    int scanPauseTime;// Offset=0x588 Size=0x4
    char * szScript;// Offset=0x58c Size=0x4
    float fOOPosAnimLength[2];// Offset=0x590 Size=0x8
    int minDamage;// Offset=0x598 Size=0x4
    int minPlayerDamage;// Offset=0x59c Size=0x4
    float fMaxDamageRange;// Offset=0x5a0 Size=0x4
    float fMinDamageRange;// Offset=0x5a4 Size=0x4
    float destabilizationRateTime;// Offset=0x5a8 Size=0x4
    float destabilizationCurvatureMax;// Offset=0x5ac Size=0x4
    int destabilizeDistance;// Offset=0x5b0 Size=0x4
    float * locationDamageMultipliers;// Offset=0x5b4 Size=0x4
    char * fireRumble;// Offset=0x5b8 Size=0x4
    char * meleeImpactRumble;// Offset=0x5bc Size=0x4
    struct TracerDef * tracerType;// Offset=0x5c0 Size=0x4
    float turretScopeZoomRate;// Offset=0x5c4 Size=0x4
    float turretScopeZoomMin;// Offset=0x5c8 Size=0x4
    float turretScopeZoomMax;// Offset=0x5cc Size=0x4
    float turretOverheatUpRate;// Offset=0x5d0 Size=0x4
    float turretOverheatDownRate;// Offset=0x5d4 Size=0x4
    float turretOverheatPenalty;// Offset=0x5d8 Size=0x4
    struct snd_alias_list_t * turretOverheatSound;// Offset=0x5dc Size=0x4
    struct FxEffectDef * turretOverheatEffect;// Offset=0x5e0 Size=0x4
    char * turretBarrelSpinRumble;// Offset=0x5e4 Size=0x4
    float turretBarrelSpinSpeed;// Offset=0x5e8 Size=0x4
    float turretBarrelSpinUpTime;// Offset=0x5ec Size=0x4
    float turretBarrelSpinDownTime;// Offset=0x5f0 Size=0x4
    struct snd_alias_list_t * turretBarrelSpinMaxSnd;// Offset=0x5f4 Size=0x4
    struct snd_alias_list_t * turretBarrelSpinUpSnd[4];// Offset=0x5f8 Size=0x10
    struct snd_alias_list_t * turretBarrelSpinDownSnd[4];// Offset=0x608 Size=0x10
    struct snd_alias_list_t * missileConeSoundAlias;// Offset=0x618 Size=0x4
    struct snd_alias_list_t * missileConeSoundAliasAtBase;// Offset=0x61c Size=0x4
    float missileConeSoundRadiusAtTop;// Offset=0x620 Size=0x4
    float missileConeSoundRadiusAtBase;// Offset=0x624 Size=0x4
    float missileConeSoundHeight;// Offset=0x628 Size=0x4
    float missileConeSoundOriginOffset;// Offset=0x62c Size=0x4
    float missileConeSoundVolumescaleAtCore;// Offset=0x630 Size=0x4
    float missileConeSoundVolumescaleAtEdge;// Offset=0x634 Size=0x4
    float missileConeSoundVolumescaleCoreSize;// Offset=0x638 Size=0x4
    float missileConeSoundPitchAtTop;// Offset=0x63c Size=0x4
    float missileConeSoundPitchAtBottom;// Offset=0x640 Size=0x4
    float missileConeSoundPitchTopSize;// Offset=0x644 Size=0x4
    float missileConeSoundPitchBottomSize;// Offset=0x648 Size=0x4
    float missileConeSoundCrossfadeTopSize;// Offset=0x64c Size=0x4
    float missileConeSoundCrossfadeBottomSize;// Offset=0x650 Size=0x4
    bool sharedAmmo;// Offset=0x654 Size=0x1
    bool lockonSupported;// Offset=0x655 Size=0x1
    bool requireLockonToFire;// Offset=0x656 Size=0x1
    bool bigExplosion;// Offset=0x657 Size=0x1
    bool noAdsWhenMagEmpty;// Offset=0x658 Size=0x1
    bool avoidDropCleanup;// Offset=0x659 Size=0x1
    bool inheritsPerks;// Offset=0x65a Size=0x1
    bool crosshairColorChange;// Offset=0x65b Size=0x1
    bool bRifleBullet;// Offset=0x65c Size=0x1
    bool armorPiercing;// Offset=0x65d Size=0x1
    bool bBoltAction;// Offset=0x65e Size=0x1
    bool aimDownSight;// Offset=0x65f Size=0x1
    bool bRechamberWhileAds;// Offset=0x660 Size=0x1
    bool bBulletExplosiveDamage;// Offset=0x661 Size=0x1
    bool bCookOffHold;// Offset=0x662 Size=0x1
    bool bClipOnly;// Offset=0x663 Size=0x1
    bool adsFireOnly;// Offset=0x664 Size=0x1
    bool cancelAutoHolsterWhenEmpty;// Offset=0x665 Size=0x1
    bool suppressAmmoReserveDisplay;// Offset=0x666 Size=0x1
    bool laserSightDuringNightvision;// Offset=0x667 Size=0x1
    bool markableViewmodel;// Offset=0x668 Size=0x1
    bool noDualWield;// Offset=0x669 Size=0x1
    bool flipKillIcon;// Offset=0x66a Size=0x1
    bool bNoPartialReload;// Offset=0x66b Size=0x1
    bool bSegmentedReload;// Offset=0x66c Size=0x1
    bool blocksProne;// Offset=0x66d Size=0x1
    bool silenced;// Offset=0x66e Size=0x1
    bool isRollingGrenade;// Offset=0x66f Size=0x1
    bool projExplosionEffectForceNormalUp;// Offset=0x670 Size=0x1
    bool bProjImpactExplode;// Offset=0x671 Size=0x1
    bool stickToPlayers;// Offset=0x672 Size=0x1
    bool hasDetonator;// Offset=0x673 Size=0x1
    bool timedDetonation;// Offset=0x674 Size=0x1
    bool rotate;// Offset=0x675 Size=0x1
    bool holdButtonToThrow;// Offset=0x676 Size=0x1
    bool freezeMovementWhenFiring;// Offset=0x677 Size=0x1
    bool thermalScope;// Offset=0x678 Size=0x1
    bool altModeSameWeapon;// Offset=0x679 Size=0x1
    bool turretBarrelSpinEnabled;// Offset=0x67a Size=0x1
    bool missileConeSoundEnabled;// Offset=0x67b Size=0x1
    bool missileConeSoundPitchshiftEnabled;// Offset=0x67c Size=0x1
    bool missileConeSoundCrossfadeEnabled;// Offset=0x67d Size=0x1
};

enum TracerDrawFlags
{
    TRACER_DRAW_FLAG_NONE=0,
    TRACER_DRAW_FLAG_THERMAL=1
};

struct FxBeam// Size=0x40 (Id=4685)
{
    unsigned char type;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    float begin[3];// Offset=0x4 Size=0xc
    float end[3];// Offset=0x10 Size=0xc
    union GfxColor colors[5];// Offset=0x1c Size=0x14
    float radius;// Offset=0x30 Size=0x4
    struct Material * material;// Offset=0x34 Size=0x4
    unsigned char segmentCount;// Offset=0x38 Size=0x1
    unsigned char __align1[3];// Offset=0x39 Size=0x3
    union // Size=0x4 (Id=0)
    {
        struct FxBeamTracerData tracer;// Offset=0x3c Size=0x4
        struct FxBeamLaserData laser;// Offset=0x3c Size=0x4
    };
};

struct cgMedia_t// Size=0x57e0 (Id=4686)
{
    struct Material * whiteMaterial;// Offset=0x0 Size=0x4
    struct Material * teamStatusBar;// Offset=0x4 Size=0x4
    struct Material * splatterMaterial;// Offset=0x8 Size=0x4
    struct Material * balloonMaterial;// Offset=0xc Size=0x4
    struct Material * youInKillCamMaterial;// Offset=0x10 Size=0x4
    struct TracerDef * tracerDefault;// Offset=0x14 Size=0x4
    struct Material * tracerThermalOverrideMat;// Offset=0x18 Size=0x4
    struct Material * laserMaterial;// Offset=0x1c Size=0x4
    struct Material * laserLightMaterial;// Offset=0x20 Size=0x4
    struct Material * lagometerMaterial;// Offset=0x24 Size=0x4
    struct Material * hintMaterials[1205];// Offset=0x28 Size=0x12d4
    struct Material * stanceMaterials[4];// Offset=0x12fc Size=0x10
    struct Material * objectiveMaterials[1];// Offset=0x130c Size=0x4
    struct Material * friendMaterials[2];// Offset=0x1310 Size=0x8
    struct Material * friendPartyMaterials[2];// Offset=0x1318 Size=0x8
    struct Material * damageMaterial;// Offset=0x1320 Size=0x4
    struct Material * damageMaterialStun;// Offset=0x1324 Size=0x4
    struct Material * mantleHint;// Offset=0x1328 Size=0x4
    struct Font_s * smallDevFont;// Offset=0x132c Size=0x4
    struct Font_s * bigDevFont;// Offset=0x1330 Size=0x4
    struct snd_alias_list_t * landDmgSound;// Offset=0x1334 Size=0x4
    struct snd_alias_list_t * grenadeExplodeSound[31];// Offset=0x1338 Size=0x7c
    struct snd_alias_list_t * rocketExplodeSound[31];// Offset=0x13b4 Size=0x7c
    struct snd_alias_list_t * bulletExplodeSound[31];// Offset=0x1430 Size=0x7c
    struct snd_alias_list_t * trophyExplodeSound;// Offset=0x14ac Size=0x4
    struct snd_alias_list_t * bulletHitSmallSound[31];// Offset=0x14b0 Size=0x7c
    struct snd_alias_list_t * bulletHitLargeSound[31];// Offset=0x152c Size=0x7c
    struct snd_alias_list_t * bulletHitAPSound[31];// Offset=0x15a8 Size=0x7c
    struct snd_alias_list_t * shotgunHitSound[31];// Offset=0x1624 Size=0x7c
    struct snd_alias_list_t * bulletExitSmallSound[31];// Offset=0x16a0 Size=0x7c
    struct snd_alias_list_t * bulletExitLargeSound[31];// Offset=0x171c Size=0x7c
    struct snd_alias_list_t * bulletExitAPSound[31];// Offset=0x1798 Size=0x7c
    struct snd_alias_list_t * shotgunExitSound[31];// Offset=0x1814 Size=0x7c
    struct snd_alias_list_t * stepSprintSound[62];// Offset=0x1890 Size=0xf8
    struct snd_alias_list_t * stepSprintSoundPlayer[62];// Offset=0x1988 Size=0xf8
    struct snd_alias_list_t * stepRunSound[62];// Offset=0x1a80 Size=0xf8
    struct snd_alias_list_t * stepRunSoundPlayer[62];// Offset=0x1b78 Size=0xf8
    struct snd_alias_list_t * stepWalkSound[62];// Offset=0x1c70 Size=0xf8
    struct snd_alias_list_t * stepWalkSoundPlayer[62];// Offset=0x1d68 Size=0xf8
    struct snd_alias_list_t * stepProneSound[62];// Offset=0x1e60 Size=0xf8
    struct snd_alias_list_t * stepProneSoundPlayer[62];// Offset=0x1f58 Size=0xf8
    struct snd_alias_list_t * landSound[62];// Offset=0x2050 Size=0xf8
    struct snd_alias_list_t * landSoundPlayer[62];// Offset=0x2148 Size=0xf8
    struct snd_alias_list_t * qsprintingEquipmentSound;// Offset=0x2240 Size=0x4
    struct snd_alias_list_t * qsprintingEquipmentSoundPlayer;// Offset=0x2244 Size=0x4
    struct snd_alias_list_t * qrunningEquipmentSound;// Offset=0x2248 Size=0x4
    struct snd_alias_list_t * qrunningEquipmentSoundPlayer;// Offset=0x224c Size=0x4
    struct snd_alias_list_t * qwalkingEquipmentSound;// Offset=0x2250 Size=0x4
    struct snd_alias_list_t * qwalkingEquipmentSoundPlayer;// Offset=0x2254 Size=0x4
    struct snd_alias_list_t * sprintingEquipmentSound;// Offset=0x2258 Size=0x4
    struct snd_alias_list_t * sprintingEquipmentSoundPlayer;// Offset=0x225c Size=0x4
    struct snd_alias_list_t * runningEquipmentSound;// Offset=0x2260 Size=0x4
    struct snd_alias_list_t * runningEquipmentSoundPlayer;// Offset=0x2264 Size=0x4
    struct snd_alias_list_t * walkingEquipmentSound;// Offset=0x2268 Size=0x4
    struct snd_alias_list_t * walkingEquipmentSoundPlayer;// Offset=0x226c Size=0x4
    struct snd_alias_list_t * foliageMovement;// Offset=0x2270 Size=0x4
    struct snd_alias_list_t * bulletWhizby;// Offset=0x2274 Size=0x4
    struct snd_alias_list_t * meleeHit;// Offset=0x2278 Size=0x4
    struct snd_alias_list_t * meleeHitOther;// Offset=0x227c Size=0x4
    struct snd_alias_list_t * meleeKnifeHit;// Offset=0x2280 Size=0x4
    struct snd_alias_list_t * meleeKnifeHitOther;// Offset=0x2284 Size=0x4
    struct snd_alias_list_t * meleeKnifeHitShield;// Offset=0x2288 Size=0x4
    struct snd_alias_list_t * nightVisionOn;// Offset=0x228c Size=0x4
    struct snd_alias_list_t * nightVisionOff;// Offset=0x2290 Size=0x4
    struct snd_alias_list_t * playerHeartBeatSound;// Offset=0x2294 Size=0x4
    struct snd_alias_list_t * playerBreathInSound;// Offset=0x2298 Size=0x4
    struct snd_alias_list_t * playerBreathOutSound;// Offset=0x229c Size=0x4
    struct snd_alias_list_t * playerBreathGaspSound;// Offset=0x22a0 Size=0x4
    struct snd_alias_list_t * playerSwapOffhand;// Offset=0x22a4 Size=0x4
    struct snd_alias_list_t * physCollisionSound[100][31];// Offset=0x22a8 Size=0x3070
    struct snd_alias_list_t * glassDamaged;// Offset=0x5318 Size=0x4
    struct snd_alias_list_t * glassDestroyed;// Offset=0x531c Size=0x4
    struct snd_alias_list_t * glassDestroyedQuiet;// Offset=0x5320 Size=0x4
    struct Material * compassping_friendlyfiring;// Offset=0x5324 Size=0x4
    struct Material * compassping_friendlyyelling;// Offset=0x5328 Size=0x4
    struct Material * compassping_friendlyfiring_party;// Offset=0x532c Size=0x4
    struct Material * compassping_friendlyyelling_party;// Offset=0x5330 Size=0x4
    struct Material * compassping_enemy;// Offset=0x5334 Size=0x4
    struct Material * compassping_enemyfiring;// Offset=0x5338 Size=0x4
    struct Material * compassping_enemyyelling;// Offset=0x533c Size=0x4
    struct Material * compassping_grenade;// Offset=0x5340 Size=0x4
    struct Material * compassping_explosion;// Offset=0x5344 Size=0x4
    struct Material * compass_radarline;// Offset=0x5348 Size=0x4
    struct Material * compassping_sentry_friendly;// Offset=0x534c Size=0x4
    struct Material * compassping_sentry_friendlyfiring;// Offset=0x5350 Size=0x4
    struct Material * compassping_sentry_enemy;// Offset=0x5354 Size=0x4
    struct Material * compassping_sentry_enemyfiring;// Offset=0x5358 Size=0x4
    struct Material * grenadeIconFrag;// Offset=0x535c Size=0x4
    struct Material * grenadeIconFlash;// Offset=0x5360 Size=0x4
    struct Material * grenadeIconThrowBack;// Offset=0x5364 Size=0x4
    struct Material * grenadePointer;// Offset=0x5368 Size=0x4
    struct Material * offscreenObjectivePointer;// Offset=0x536c Size=0x4
    struct FxImpactTable * fx;// Offset=0x5370 Size=0x4
    struct FxEffectDef * fxNoBloodFleshHit;// Offset=0x5374 Size=0x4
    struct FxEffectDef * fxKnifeBlood;// Offset=0x5378 Size=0x4
    struct FxEffectDef * fxKnifeNoBlood;// Offset=0x537c Size=0x4
    struct FxEffectDef * fxTrophyExplode;// Offset=0x5380 Size=0x4
    struct FxEffectDef * fxTrophyFlash;// Offset=0x5384 Size=0x4
    struct FxEffectDef * fxRiotShieldImpact;// Offset=0x5388 Size=0x4
    struct FxEffectDef * fxBloodOnRiotshield;// Offset=0x538c Size=0x4
    struct FxEffectDef * heliDustEffect;// Offset=0x5390 Size=0x4
    struct FxEffectDef * heliWaterEffect;// Offset=0x5394 Size=0x4
    struct FxEffectDef * helicopterLightSmoke;// Offset=0x5398 Size=0x4
    struct FxEffectDef * helicopterHeavySmoke;// Offset=0x539c Size=0x4
    struct FxEffectDef * helicopterOnFire;// Offset=0x53a0 Size=0x4
    struct FxEffectDef * glassPieceBreak;// Offset=0x53a4 Size=0x4
    struct FxEffectDef * glassShatter;// Offset=0x53a8 Size=0x4
    struct FxEffectDef * glassShatterSmall;// Offset=0x53ac Size=0x4
    struct Material * nightVisionOverlay;// Offset=0x53b0 Size=0x4
    struct Material * hudIconNVG;// Offset=0x53b4 Size=0x4
    struct Material * hudDpadArrow;// Offset=0x53b8 Size=0x4
    struct Material * ammoCounterBullet;// Offset=0x53bc Size=0x4
    struct Material * ammoCounterBeltBullet;// Offset=0x53c0 Size=0x4
    struct Material * ammoCounterRifleBullet;// Offset=0x53c4 Size=0x4
    struct Material * ammoCounterRocket;// Offset=0x53c8 Size=0x4
    struct Material * ammoCounterShotgunShell;// Offset=0x53cc Size=0x4
    struct Material * mapLocationSelectorArrow;// Offset=0x53d0 Size=0x4
    struct Material * FOFTargetBox_Hostile;// Offset=0x53d4 Size=0x4
    struct Material * FOFTargetBox_HostileVehicle;// Offset=0x53d8 Size=0x4
    struct Material * FOFTargetBox_Self;// Offset=0x53dc Size=0x4
    struct FxEffectDef * fxs[256];// Offset=0x53e0 Size=0x400
};

enum leType_t
{
    LE_MOVING_TRACER=0
};

struct FxBeamTracerData// Size=0x4 (Id=4688)
{
    float wiggleDist;// Offset=0x0 Size=0x4
};

struct localEntity_s// Size=0x64 (Id=4689)
{
    struct localEntity_s * prev;// Offset=0x0 Size=0x4
    struct localEntity_s * next;// Offset=0x4 Size=0x4
    enum leType_t leType;// Offset=0x8 Size=0x4
    struct trajectory_t pos;// Offset=0xc Size=0x24
    int endTime;// Offset=0x30 Size=0x4
    struct TracerInfo tracer;// Offset=0x34 Size=0x30
};

union GfxColor// Size=0x4 (Id=4690)
{
    unsigned int packed;// Offset=0x0 Size=0x4
    unsigned char array[4];// Offset=0x0 Size=0x4
};

struct TracerInfo// Size=0x30 (Id=4691)
{
    struct Material * material;// Offset=0x0 Size=0x4
    float clipDist;// Offset=0x4 Size=0x4
    float length;// Offset=0x8 Size=0x4
    float width;// Offset=0xc Size=0x4
    float screwDist;// Offset=0x10 Size=0x4
    float screwRadius;// Offset=0x14 Size=0x4
    unsigned char colors[5][4];// Offset=0x18 Size=0x14
    int isClientEmitter;// Offset=0x2c Size=0x4
};

struct FxBeamLaserData// Size=0x4 (Id=4692)
{
    float endRadius;// Offset=0x0 Size=0x4
};

enum FxBeamType
{
    BEAMTYPE_TRACER=0,
    BEAMTYPE_LASER=1,
    BEAMTYPE_COUNT=2
};

enum surfaceType_t
{
    SF_TRIANGLES=0,
    SF_TRIANGLES_NO_SUN_SHADOW=1,
    SF_BEGIN_STATICMODEL=2,
    SF_STATICMODEL_RIGID=2,
    SF_STATICMODEL_RIGID_NO_SUN_SHADOW=3,
    SF_END_STATICMODEL=4,
    SF_BMODEL=4,
    SF_BEGIN_XMODEL=5,
    SF_XMODEL_RIGID=5,
    SF_XMODEL_SKINNED=6,
    SF_END_XMODEL=7,
    SF_BEGIN_FX=7,
    SF_CODE=7,
    SF_GLASS=8,
    SF_MARK=9,
    SF_SPARK=10,
    SF_PARTICLE_CLOUD=11,
    SF_PARTICLE_SPARK_CLOUD=12,
    SF_END_FX=13,
    SF_NUM_SURFACE_TYPES=13,
    SF_FORCE_32_BITS=-1
};

enum GfxSceneViewType
{
    SCENE_VIEW_CAMERA=0,
    SCENE_VIEW_SUNSHADOW_0=1,
    SCENE_VIEW_SUNSHADOW_1=2,
    SCENE_VIEW_COUNT=3,
    SCENE_VIEW_SPOTSHADOW_0=3,
    SCENE_VIEW_SPOTSHADOW_1=4,
    SCENE_VIEW_SPOTSHADOW_2=5,
    SCENE_VIEW_SPOTSHADOW_3=6,
    SCENE_VIEW_COUNT_ENTVIS=7,
    SCENE_VIEW_INVALID=-1
};

enum _unnamed_4696
{
    TS_2D=0,
    TS_FUNCTION=1,
    TS_COLOR_MAP=2,
    TS_DETAIL_MAP=3,
    TS_UNUSED_2=4,
    TS_NORMAL_MAP=5,
    TS_UNUSED_3=6,
    TS_UNUSED_4=7,
    TS_SPECULAR_MAP=8,
    TS_UNUSED_5=9,
    TS_UNUSED_6=10,
    TS_WATER_MAP=11
};

enum _unnamed_4697
{
    IMG_CATEGORY_UNKNOWN=0,
    IMG_CATEGORY_AUTO_GENERATED=1,
    IMG_CATEGORY_LIGHTMAP=2,
    IMG_CATEGORY_LOAD_FROM_FILE=3,
    IMG_CATEGORY_RAW=4,
    IMG_CATEGORY_FIRST_UNMANAGED=5,
    IMG_CATEGORY_WATER=5,
    IMG_CATEGORY_RENDERTARGET=6,
    IMG_CATEGORY_TEMP=7
};

enum _unnamed_4698
{
    PICMIP_PLATFORM_USED=0,
    PICMIP_PLATFORM_COUNT=1
};

enum _unnamed_4699
{
    IMAGE_CACHED_NO=0,
    IMAGE_CACHED_AUTO=1,
    IMAGE_CACHED_MANUAL=2
};

enum MaterialTextureSource
{
    TEXTURE_SRC_CODE_BLACK=0,
    TEXTURE_SRC_CODE_WHITE=1,
    TEXTURE_SRC_CODE_IDENTITY_NORMAL_MAP=2,
    TEXTURE_SRC_CODE_MODEL_LIGHTING=3,
    TEXTURE_SRC_CODE_LIGHTMAP_PRIMARY=4,
    TEXTURE_SRC_CODE_LIGHTMAP_SECONDARY=5,
    TEXTURE_SRC_CODE_SHADOWMAP_SUN=6,
    TEXTURE_SRC_CODE_SHADOWMAP_SPOT=7,
    TEXTURE_SRC_CODE_FEEDBACK=8,
    TEXTURE_SRC_CODE_RESOLVED_POST_SUN=9,
    TEXTURE_SRC_CODE_RESOLVED_SCENE=10,
    TEXTURE_SRC_CODE_POST_EFFECT_0=11,
    TEXTURE_SRC_CODE_POST_EFFECT_1=12,
    TEXTURE_SRC_CODE_LIGHT_ATTENUATION=13,
    TEXTURE_SRC_CODE_OUTDOOR=14,
    TEXTURE_SRC_CODE_FLOATZ=15,
    TEXTURE_SRC_CODE_PROCESSED_FLOATZ=16,
    TEXTURE_SRC_CODE_RAW_FLOATZ=17,
    TEXTURE_SRC_CODE_HALF_PARTICLES=18,
    TEXTURE_SRC_CODE_HALF_PARTICLES_Z=19,
    TEXTURE_SRC_CODE_CASE_TEXTURE=20,
    TEXTURE_SRC_CODE_CINEMATIC_Y=21,
    TEXTURE_SRC_CODE_CINEMATIC_CR=22,
    TEXTURE_SRC_CODE_CINEMATIC_CB=23,
    TEXTURE_SRC_CODE_CINEMATIC_A=24,
    TEXTURE_SRC_CODE_REFLECTION_PROBE=25,
    TEXTURE_SRC_CODE_ALTERNATE_SCENE=26,
    TEXTURE_SRC_CODE_COLOR_MANIPULATION=27,
    TEXTURE_SRC_CODE_COUNT=28
};

enum _unnamed_4701
{
    IMAGE_STREAM_BASE=0,
    IMAGE_STREAM_LOW=1,
    IMAGE_STREAM_MIDDLE=2,
    IMAGE_STREAM_HIGH=3,
    IMAGE_STREAM_COUNT=4
};

enum GfxRenderTargetId
{
    R_RENDERTARGET_SAVED_SCREEN=0,
    R_RENDERTARGET_FRAME_BUFFER=1,
    R_RENDERTARGET_SCENE=2,
    R_RENDERTARGET_SCENE_GAMMA=3,
    R_RENDERTARGET_RESOLVED_POST_SUN=4,
    R_RENDERTARGET_RESOLVED_SCENE=5,
    R_RENDERTARGET_FLOAT_Z=6,
    R_RENDERTARGET_HALF_PARTICLES=7,
    R_RENDERTARGET_HALF_PARTICLES_Z=8,
    R_RENDERTARGET_POST_EFFECT_0=9,
    R_RENDERTARGET_POST_EFFECT_1=10,
    R_RENDERTARGET_SHADOWMAP_LARGE=11,
    R_RENDERTARGET_SHADOWMAP_SMALL=12,
    R_RENDERTARGET_HALF_RESAMPLED_SCENE=13,
    R_RENDERTARGET_COUNT=14,
    R_RENDERTARGET_NONE=15
};

enum GfxRenderer
{
    GFX_RENDERER_SHADER_3=0,
    GFX_RENDERER_COUNT=1,
    GFX_RENDERER_UNSPECIFIED=1
};

enum _unnamed_4704
{
    GFX_SYM_FILTER_1=0,
    GFX_SYM_FILTER_2=1,
    GFX_SYM_FILTER_3=2,
    GFX_SYM_FILTER_4=3,
    GFX_SYM_FILTER_5=4,
    GFX_SYM_FILTER_6=5,
    GFX_SYM_FILTER_7=6,
    GFX_SYM_FILTER_8=7,
    GFX_SYM_FILTER_COUNT=8
};

enum _unnamed_4705
{
    GFX_SYM_FILTER_GAMMA_OFF=0,
    GFX_SYM_FILTER_GAMMA_ON=1,
    GFX_SYM_FILTER_GAMMA_COUNT=2
};

enum _unnamed_4706
{
    GFX_POSTFX_BIT_COLOR=0,
    GFX_POSTFX_BIT_COLOR2=1,
    GFX_POSTFX_BIT_DOF=2,
    GFX_POSTFX_BIT_COUNT=3,
    GFX_POSTFX_NONE=0,
    GFX_POSTFX_COLOR=1,
    GFX_POSTFX_COLOR2=2,
    GFX_POSTFX_DOF=4,
    GFX_POSTFX_MATERIAL_COUNT=8
};

enum _unnamed_4707
{
    TEXTURE_FILTER_DISABLED=0,
    TEXTURE_FILTER_NEAREST=1,
    TEXTURE_FILTER_LINEAR=2,
    TEXTURE_FILTER_ANISO2X=3,
    TEXTURE_FILTER_ANISO4X=4
};

enum _unnamed_4708
{
    SAMPLER_FILTER_SHIFT=0,
    SAMPLER_FILTER_NEAREST=1,
    SAMPLER_FILTER_LINEAR=2,
    SAMPLER_FILTER_ANISO2X=3,
    SAMPLER_FILTER_ANISO4X=4,
    SAMPLER_FILTER_MASK=7,
    SAMPLER_MIPMAP_SHIFT=3,
    SAMPLER_MIPMAP_DISABLED=0,
    SAMPLER_MIPMAP_NEAREST=8,
    SAMPLER_MIPMAP_LINEAR=16,
    SAMPLER_MIPMAP_COUNT=3,
    SAMPLER_MIPMAP_MASK=24,
    SAMPLER_CLAMP_U_SHIFT=5,
    SAMPLER_CLAMP_V_SHIFT=6,
    SAMPLER_CLAMP_W_SHIFT=7,
    SAMPLER_CLAMP_U=32,
    SAMPLER_CLAMP_V=64,
    SAMPLER_CLAMP_W=128,
    SAMPLER_CLAMP_MASK=224
};

enum GfxBlend
{
    GFXS_BLEND_DISABLED=0,
    GFXS_BLEND_ZERO=1,
    GFXS_BLEND_ONE=2,
    GFXS_BLEND_SRCCOLOR=3,
    GFXS_BLEND_INVSRCCOLOR=4,
    GFXS_BLEND_SRCALPHA=5,
    GFXS_BLEND_INVSRCALPHA=6,
    GFXS_BLEND_DESTALPHA=7,
    GFXS_BLEND_INVDESTALPHA=8,
    GFXS_BLEND_DESTCOLOR=9,
    GFXS_BLEND_INVDESTCOLOR=10,
    GFXS_BLEND_MASK=15
};

enum GfxBlendOp
{
    GFXS_BLENDOP_DISABLED=0,
    GFXS_BLENDOP_ADD=1,
    GFXS_BLENDOP_SUBTRACT=2,
    GFXS_BLENDOP_REVSUBTRACT=3,
    GFXS_BLENDOP_MIN=4,
    GFXS_BLENDOP_MAX=5,
    GFXS_BLENDOP_MASK=7
};

enum _unnamed_4711
{
    FOG_NONE=0,
    FOG_SERVER=1,
    FOG_CURRENT=2,
    FOG_LAST=3,
    FOG_TARGET=4,
    FOG_COUNT=5
};

enum _unnamed_4712
{
    GFXS0_SRCBLEND_RGB_SHIFT=0,
    GFXS0_SRCBLEND_RGB_MASK=15,
    GFXS0_DSTBLEND_RGB_SHIFT=4,
    GFXS0_DSTBLEND_RGB_MASK=240,
    GFXS0_BLENDOP_RGB_SHIFT=8,
    GFXS0_BLENDOP_RGB_MASK=1792,
    GFXS0_BLEND_RGB_MASK=2047,
    GFXS0_ATEST_DISABLE=2048,
    GFXS0_ATEST_GT_0=4096,
    GFXS0_ATEST_LT_128=8192,
    GFXS0_ATEST_GE_128=12288,
    GFXS0_ATEST_MASK=12288,
    GFXS0_CULL_SHIFT=14,
    GFXS0_CULL_NONE=16384,
    GFXS0_CULL_BACK=32768,
    GFXS0_CULL_FRONT=49152,
    GFXS0_CULL_MASK=49152,
    GFXS0_SRCBLEND_ALPHA_SHIFT=16,
    GFXS0_SRCBLEND_ALPHA_MASK=983040,
    GFXS0_DSTBLEND_ALPHA_SHIFT=20,
    GFXS0_DSTBLEND_ALPHA_MASK=15728640,
    GFXS0_BLENDOP_ALPHA_SHIFT=24,
    GFXS0_BLENDOP_ALPHA_MASK=117440512,
    GFXS0_BLEND_ALPHA_MASK=134152192,
    GFXS0_COLORWRITE_RGB=134217728,
    GFXS0_COLORWRITE_ALPHA=268435456,
    GFXS0_COLORWRITE_MASK=402653184,
    GFXS0_GAMMAWRITE=1073741824,
    GFXS0_POLYMODE_LINE=-2147483648,
    GFXS1_DEPTHWRITE=1,
    GFXS1_DEPTHTEST_DISABLE=2,
    GFXS1_DEPTHTEST_SHIFT=2,
    GFXS1_DEPTHTEST_ALWAYS=0,
    GFXS1_DEPTHTEST_LESS=4,
    GFXS1_DEPTHTEST_EQUAL=8,
    GFXS1_DEPTHTEST_LESSEQUAL=12,
    GFXS1_DEPTHTEST_MASK=12,
    GFXS1_POLYGON_OFFSET_SHIFT=4,
    GFXS1_POLYGON_OFFSET_0=0,
    GFXS1_POLYGON_OFFSET_1=16,
    GFXS1_POLYGON_OFFSET_2=32,
    GFXS1_POLYGON_OFFSET_SHADOWMAP=48,
    GFXS1_POLYGON_OFFSET_MASK=48,
    GFXS1_STENCIL_FRONT_ENABLE=64,
    GFXS1_STENCIL_BACK_ENABLE=128,
    GFXS1_STENCIL_MASK=192,
    GFXS1_STENCIL_FRONT_PASS_SHIFT=8,
    GFXS1_STENCIL_FRONT_FAIL_SHIFT=11,
    GFXS1_STENCIL_FRONT_ZFAIL_SHIFT=14,
    GFXS1_STENCIL_FRONT_FUNC_SHIFT=17,
    GFXS1_STENCIL_FRONT_MASK=1048320,
    GFXS1_STENCIL_BACK_PASS_SHIFT=20,
    GFXS1_STENCIL_BACK_FAIL_SHIFT=23,
    GFXS1_STENCIL_BACK_ZFAIL_SHIFT=26,
    GFXS1_STENCIL_BACK_FUNC_SHIFT=29,
    GFXS1_STENCIL_BACK_MASK=-1048576,
    GFXS1_STENCILFUNC_FRONTBACK_MASK=-535953408,
    GFXS1_STENCILOP_FRONTBACK_MASK=535953152
};

enum GfxTextureOp
{
    GFXS_TEXOP_DISABLE=0,
    GFXS_TEXOP_SELECTARG1=1,
    GFXS_TEXOP_SELECTARG2=2,
    GFXS_TEXOP_MODULATE=3,
    GFXS_TEXOP_MODULATE2X=4,
    GFXS_TEXOP_MODULATE4X=5,
    GFXS_TEXOP_ADD=6,
    GFXS_TEXOP_ADDSIGNED=7,
    GFXS_TEXOP_ADDSIGNED2X=8,
    GFXS_TEXOP_SUBTRACT=9,
    GFXS_TEXOP_ADDSMOOTH=10,
    GFXS_TEXOP_BLENDDIFFUSEALPHA=11,
    GFXS_TEXOP_BLENDTEXTUREALPHA=12,
    GFXS_TEXOP_BLENDFACTORALPHA=13,
    GFXS_TEXOP_BLENDTEXTUREALPHAPM=14,
    GFXS_TEXOP_BLENDCURRENTALPHA=15,
    GFXS_TEXOP_MODULATEALPHA_ADDCOLOR=16,
    GFXS_TEXOP_MODULATECOLOR_ADDALPHA=17,
    GFXS_TEXOP_MODULATEINVALPHA_ADDCOLOR=18,
    GFXS_TEXOP_MODULATEINVCOLOR_ADDALPHA=19,
    GFXS_TEXOP_DOTPRODUCT3=20,
    GFXS_TEXOP_MULTIPLYADD=21,
    GFXS_TEXOP_LERP=22,
    GFXS_TEXOP_COUNT=23,
    GFXS_TEXOP_BITS=5,
    GFXS_TEXOP_MASK=31
};

enum GfxTextureArg
{
    GFXS_TEXARG_CONSTANT=0,
    GFXS_TEXARG_CURRENT=1,
    GFXS_TEXARG_COLOR_0=2,
    GFXS_TEXARG_COLOR_1=3,
    GFXS_TEXARG_TEMP=4,
    GFXS_TEXARG_TEXTURE=5,
    GFXS_TEXARG_TFACTOR=6,
    GFXS_TEXARG_COUNT=7,
    GFXS_TEXARG_BASE_BITS=3,
    GFXS_TEXARG_BASE_MASK=7,
    GFXS_TEXARG_COMPLEMENT=8,
    GFXS_TEXARG_ALPHA_REPLICATE=16,
    GFXS_TEXARG_BITS=5,
    GFXS_TEXARG_MASK=31
};

enum _unnamed_4715
{
    CMDBUF_OPAQUE=0,
    CMDBUF_PREPASS=1,
    CMDBUF_TRANS=2,
    CMDBUF_TRANS_PREPASS=3,
    CMDBUF_LIGHT_MAP_OPAQUE=4,
    CMDBUF_LIGHT_MAP_PREPASS=5,
    CMDBUF_LIGHT_MAP_OPAQUE1=6,
    CMDBUF_LIGHT_MAP_PREPASS1=7,
    CMDBUF_LIGHT_MAP_OPAQUE2=8,
    CMDBUF_LIGHT_MAP_PREPASS2=9,
    CMDBUF_DEPTH_HACK=10,
    CMDBUF_SHADOW0=11,
    CMDBUF_SHADOW1=12,
    CMDBUF_EMISSIVE=13,
    CMDBUF_SPOTSHADOW0=14,
    CMDBUF_SPOTSHADOW1=15,
    CMDBUF_SPOTSHADOW2=16,
    CMDBUF_SPOTSHADOW3=17,
    CMDBUF_COUNT=18
};

enum GfxTextureFunc
{
    GFXS_TEXFUNC_OP_SHIFT=0,
    GFXS_TEXFUNC_DEST_SHIFT=5,
    GFXS_TEXFUNC_ARG1_SHIFT=10,
    GFXS_TEXFUNC_ARG2_SHIFT=15,
    GFXS_TEXFUNC_ARG0_SHIFT=20
};

enum _unnamed_4717
{
    CONST_SRC_CODE_MAYBE_DIRTY_PS_BEGIN=0,
    CONST_SRC_CODE_LIGHT_POSITION=0,
    CONST_SRC_CODE_LIGHT_DIFFUSE=1,
    CONST_SRC_CODE_LIGHT_SPECULAR=2,
    CONST_SRC_CODE_LIGHT_SPOTDIR=3,
    CONST_SRC_CODE_LIGHT_SPOTFACTORS=4,
    CONST_SRC_CODE_LIGHT_FALLOFF_PLACEMENT=5,
    CONST_SRC_CODE_PARTICLE_CLOUD_COLOR=6,
    CONST_SRC_CODE_GAMETIME=7,
    CONST_SRC_CODE_MAYBE_DIRTY_PS_END=8,
    CONST_SRC_CODE_ALWAYS_DIRTY_PS_BEGIN=8,
    CONST_SRC_CODE_PIXEL_COST_FRACS=8,
    CONST_SRC_CODE_PIXEL_COST_DECODE=9,
    CONST_SRC_CODE_FILTER_TAP_0=10,
    CONST_SRC_CODE_FILTER_TAP_1=11,
    CONST_SRC_CODE_FILTER_TAP_2=12,
    CONST_SRC_CODE_FILTER_TAP_3=13,
    CONST_SRC_CODE_FILTER_TAP_4=14,
    CONST_SRC_CODE_FILTER_TAP_5=15,
    CONST_SRC_CODE_FILTER_TAP_6=16,
    CONST_SRC_CODE_FILTER_TAP_7=17,
    CONST_SRC_CODE_COLOR_MATRIX_R=18,
    CONST_SRC_CODE_COLOR_MATRIX_G=19,
    CONST_SRC_CODE_COLOR_MATRIX_B=20,
    CONST_SRC_CODE_RENDER_TARGET_SIZE=21,
    CONST_SRC_CODE_ALWAYS_DIRTY_PS_END=22,
    CONST_SRC_CODE_FIXED_PS_BEGIN=22,
    CONST_SRC_CODE_DOF_EQUATION_VIEWMODEL_AND_FAR_BLUR=22,
    CONST_SRC_CODE_DOF_EQUATION_SCENE=23,
    CONST_SRC_CODE_DOF_LERP_SCALE=24,
    CONST_SRC_CODE_DOF_LERP_BIAS=25,
    CONST_SRC_CODE_DOF_ROW_DELTA=26,
    CONST_SRC_CODE_MOTION_MATRIX_X=27,
    CONST_SRC_CODE_MOTION_MATRIX_Y=28,
    CONST_SRC_CODE_MOTION_MATRIX_W=29,
    CONST_SRC_CODE_SHADOWMAP_SWITCH_PARTITION=30,
    CONST_SRC_CODE_SHADOWMAP_SCALE=31,
    CONST_SRC_CODE_ZNEAR=32,
    CONST_SRC_CODE_LIGHTING_LOOKUP_SCALE=33,
    CONST_SRC_CODE_DEBUG_BUMPMAP=34,
    CONST_SRC_CODE_MATERIAL_COLOR=35,
    CONST_SRC_CODE_FOG=36,
    CONST_SRC_CODE_FOG_COLOR_LINEAR=37,
    CONST_SRC_CODE_FOG_COLOR_GAMMA=38,
    CONST_SRC_CODE_FOG_SUN_CONSTS=39,
    CONST_SRC_CODE_FOG_SUN_COLOR_LINEAR=40,
    CONST_SRC_CODE_FOG_SUN_COLOR_GAMMA=41,
    CONST_SRC_CODE_FOG_SUN_DIR=42,
    CONST_SRC_CODE_GLOW_SETUP=43,
    CONST_SRC_CODE_GLOW_APPLY=44,
    CONST_SRC_CODE_COLOR_BIAS=45,
    CONST_SRC_CODE_COLOR_TINT_BASE=46,
    CONST_SRC_CODE_COLOR_TINT_DELTA=47,
    CONST_SRC_CODE_COLOR_TINT_QUADRATIC_DELTA=48,
    CONST_SRC_CODE_OUTDOOR_FEATHER_PARMS=49,
    CONST_SRC_CODE_ENVMAP_PARMS=50,
    CONST_SRC_CODE_SUN_SHADOWMAP_PIXEL_ADJUST=51,
    CONST_SRC_CODE_SPOT_SHADOWMAP_PIXEL_ADJUST=52,
    CONST_SRC_CODE_COMPOSITE_FX_DISTORTION=53,
    CONST_SRC_CODE_POSTFX_FADE_EFFECT=54,
    CONST_SRC_CODE_VIEWPORT_DIMENSIONS=55,
    CONST_SRC_CODE_FRAMEBUFFER_READ=56,
    CONST_SRC_CODE_FIXED_PS_END=57,
    CONST_SRC_CODE_NON_PS_BEGIN=57,
    CONST_SRC_CODE_BASE_LIGHTING_COORDS=57,
    CONST_SRC_CODE_LIGHT_PROBE_AMBIENT=58,
    CONST_SRC_CODE_NEARPLANE_ORG=59,
    CONST_SRC_CODE_NEARPLANE_DX=60,
    CONST_SRC_CODE_NEARPLANE_DY=61,
    CONST_SRC_CODE_CLIP_SPACE_LOOKUP_SCALE=62,
    CONST_SRC_CODE_CLIP_SPACE_LOOKUP_OFFSET=63,
    CONST_SRC_CODE_PARTICLE_CLOUD_MATRIX0=64,
    CONST_SRC_CODE_PARTICLE_CLOUD_MATRIX1=65,
    CONST_SRC_CODE_PARTICLE_CLOUD_MATRIX2=66,
    CONST_SRC_CODE_PARTICLE_CLOUD_SPARK_COLOR0=67,
    CONST_SRC_CODE_PARTICLE_CLOUD_SPARK_COLOR1=68,
    CONST_SRC_CODE_PARTICLE_CLOUD_SPARK_COLOR2=69,
    CONST_SRC_CODE_PARTICLE_FOUNTAIN_PARM0=70,
    CONST_SRC_CODE_PARTICLE_FOUNTAIN_PARM1=71,
    CONST_SRC_CODE_DEPTH_FROM_CLIP=72,
    CONST_SRC_CODE_CODE_MESH_ARG_0=73,
    CONST_SRC_CODE_CODE_MESH_ARG_1=74,
    CONST_SRC_CODE_CODE_MESH_ARG_LAST=74,
    CONST_SRC_CODE_NON_PS_END=75,
    CONST_SRC_CODE_COUNT_FLOAT4=75,
    CONST_SRC_FIRST_CODE_MATRIX=75,
    CONST_SRC_CODE_VIEW_MATRIX=75,
    CONST_SRC_CODE_INVERSE_VIEW_MATRIX=76,
    CONST_SRC_CODE_TRANSPOSE_VIEW_MATRIX=77,
    CONST_SRC_CODE_INVERSE_TRANSPOSE_VIEW_MATRIX=78,
    CONST_SRC_CODE_PROJECTION_MATRIX=79,
    CONST_SRC_CODE_INVERSE_PROJECTION_MATRIX=80,
    CONST_SRC_CODE_TRANSPOSE_PROJECTION_MATRIX=81,
    CONST_SRC_CODE_INVERSE_TRANSPOSE_PROJECTION_MATRIX=82,
    CONST_SRC_CODE_VIEW_PROJECTION_MATRIX=83,
    CONST_SRC_CODE_INVERSE_VIEW_PROJECTION_MATRIX=84,
    CONST_SRC_CODE_TRANSPOSE_VIEW_PROJECTION_MATRIX=85,
    CONST_SRC_CODE_INVERSE_TRANSPOSE_VIEW_PROJECTION_MATRIX=86,
    CONST_SRC_CODE_SHADOW_LOOKUP_MATRIX=87,
    CONST_SRC_CODE_INVERSE_SHADOW_LOOKUP_MATRIX=88,
    CONST_SRC_CODE_TRANSPOSE_SHADOW_LOOKUP_MATRIX=89,
    CONST_SRC_CODE_INVERSE_TRANSPOSE_SHADOW_LOOKUP_MATRIX=90,
    CONST_SRC_CODE_WORLD_OUTDOOR_LOOKUP_MATRIX=91,
    CONST_SRC_CODE_INVERSE_WORLD_OUTDOOR_LOOKUP_MATRIX=92,
    CONST_SRC_CODE_TRANSPOSE_WORLD_OUTDOOR_LOOKUP_MATRIX=93,
    CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_OUTDOOR_LOOKUP_MATRIX=94,
    CONST_SRC_CODE_WORLD_MATRIX0=95,
    CONST_SRC_CODE_INVERSE_WORLD_MATRIX0=96,
    CONST_SRC_CODE_TRANSPOSE_WORLD_MATRIX0=97,
    CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_MATRIX0=98,
    CONST_SRC_CODE_WORLD_VIEW_MATRIX0=99,
    CONST_SRC_CODE_INVERSE_WORLD_VIEW_MATRIX0=100,
    CONST_SRC_CODE_TRANSPOSE_WORLD_VIEW_MATRIX0=101,
    CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_VIEW_MATRIX0=102,
    CONST_SRC_CODE_WORLD_VIEW_PROJECTION_MATRIX0=103,
    CONST_SRC_CODE_INVERSE_WORLD_VIEW_PROJECTION_MATRIX0=104,
    CONST_SRC_CODE_TRANSPOSE_WORLD_VIEW_PROJECTION_MATRIX0=105,
    CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_VIEW_PROJECTION_MATRIX0=106,
    CONST_SRC_CODE_WORLD_MATRIX1=107,
    CONST_SRC_CODE_INVERSE_WORLD_MATRIX1=108,
    CONST_SRC_CODE_TRANSPOSE_WORLD_MATRIX1=109,
    CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_MATRIX1=110,
    CONST_SRC_CODE_WORLD_VIEW_MATRIX1=111,
    CONST_SRC_CODE_INVERSE_WORLD_VIEW_MATRIX1=112,
    CONST_SRC_CODE_TRANSPOSE_WORLD_VIEW_MATRIX1=113,
    CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_VIEW_MATRIX1=114,
    CONST_SRC_CODE_WORLD_VIEW_PROJECTION_MATRIX1=115,
    CONST_SRC_CODE_INVERSE_WORLD_VIEW_PROJECTION_MATRIX1=116,
    CONST_SRC_CODE_TRANSPOSE_WORLD_VIEW_PROJECTION_MATRIX1=117,
    CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_VIEW_PROJECTION_MATRIX1=118,
    CONST_SRC_CODE_WORLD_MATRIX2=119,
    CONST_SRC_CODE_INVERSE_WORLD_MATRIX2=120,
    CONST_SRC_CODE_TRANSPOSE_WORLD_MATRIX2=121,
    CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_MATRIX2=122,
    CONST_SRC_CODE_WORLD_VIEW_MATRIX2=123,
    CONST_SRC_CODE_INVERSE_WORLD_VIEW_MATRIX2=124,
    CONST_SRC_CODE_TRANSPOSE_WORLD_VIEW_MATRIX2=125,
    CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_VIEW_MATRIX2=126,
    CONST_SRC_CODE_WORLD_VIEW_PROJECTION_MATRIX2=127,
    CONST_SRC_CODE_INVERSE_WORLD_VIEW_PROJECTION_MATRIX2=128,
    CONST_SRC_CODE_TRANSPOSE_WORLD_VIEW_PROJECTION_MATRIX2=129,
    CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_VIEW_PROJECTION_MATRIX2=130,
    CONST_SRC_TOTAL_COUNT=131,
    CONST_SRC_NONE=132
};

enum _unnamed_4718
{
    STREAM_SRC_POSITION=0,
    STREAM_SRC_COLOR=1,
    STREAM_SRC_TEXCOORD_0=2,
    STREAM_SRC_NORMAL=3,
    STREAM_SRC_TANGENT=4,
    STREAM_SRC_OPTIONAL_BEGIN=5,
    STREAM_SRC_PRE_OPTIONAL_BEGIN=4,
    STREAM_SRC_TEXCOORD_1=5,
    STREAM_SRC_TEXCOORD_2=6,
    STREAM_SRC_NORMAL_TRANSFORM_0=7,
    STREAM_SRC_NORMAL_TRANSFORM_1=8,
    STREAM_SRC_COUNT=9
};

enum _unnamed_4719
{
    STREAM_DST_POSITION=0,
    STREAM_DST_NORMAL=1,
    STREAM_DST_COLOR_0=2,
    STREAM_DST_COLOR_1=3,
    STREAM_DST_DEPTH=4,
    STREAM_DST_TEXCOORD_0=5,
    STREAM_DST_TEXCOORD_1=6,
    STREAM_DST_TEXCOORD_2=7,
    STREAM_DST_TEXCOORD_3=8,
    STREAM_DST_TEXCOORD_4=9,
    STREAM_DST_TEXCOORD_5=10,
    STREAM_DST_TEXCOORD_6=11,
    STREAM_DST_TEXCOORD_7=12,
    STREAM_DST_COUNT=13
};

enum DynEntityDrawType
{
    DYNENT_DRAW_MODEL=0,
    DYNENT_DRAW_BRUSH=1,
    DYNENT_DRAW_COUNT=2
};

enum _unnamed_4721
{
    MTL_ARG_MATERIAL_VERTEX_CONST=0,
    MTL_ARG_LITERAL_VERTEX_CONST=1,
    MTL_ARG_MATERIAL_PIXEL_SAMPLER=2,
    MTL_ARG_CODE_PRIM_BEGIN=3,
    MTL_ARG_CODE_VERTEX_CONST=3,
    MTL_ARG_CODE_PIXEL_SAMPLER=4,
    MTL_ARG_CODE_PIXEL_CONST=5,
    MTL_ARG_CODE_PRIM_END=6,
    MTL_ARG_MATERIAL_PIXEL_CONST=6,
    MTL_ARG_LITERAL_PIXEL_CONST=7,
    MLT_ARG_COUNT=8
};

struct MaterialArgumentCodeConst// Size=0x4 (Id=4722)
{
    unsigned short index;// Offset=0x0 Size=0x2
    unsigned char firstRow;// Offset=0x2 Size=0x1
    unsigned char rowCount;// Offset=0x3 Size=0x1
};

struct DpvsPlane// Size=0x10 (Id=4723)
{
    float coeffs[4];// Offset=0x0 Size=0x10
};

struct GfxShaderLoadDef// Size=0xc (Id=4724)
{
    unsigned char * cachedPart;// Offset=0x0 Size=0x4
    unsigned char * physicalPart;// Offset=0x4 Size=0x4
    unsigned short cachedPartSize;// Offset=0x8 Size=0x2
    unsigned short physicalPartSize;// Offset=0xa Size=0x2
};

union MaterialPixelShaderProgram// Size=0xc (Id=4725)
{
    struct D3DPixelShader * ps;// Offset=0x0 Size=0x4
    struct GfxShaderLoadDef loadDef;// Offset=0x0 Size=0xc
};

struct GfxPortalWritable// Size=0xc (Id=4726)
{
    bool isQueued;// Offset=0x0 Size=0x1
    bool isAncestor;// Offset=0x1 Size=0x1
    unsigned char recursionDepth;// Offset=0x2 Size=0x1
    unsigned char hullPointCount;// Offset=0x3 Size=0x1
    float * hullPoints[2];// Offset=0x4 Size=0x4
    struct GfxPortal * queuedParent;// Offset=0x8 Size=0x4
};

struct MaterialStreamRouting// Size=0x2 (Id=4727)
{
    unsigned char source;// Offset=0x0 Size=0x1
    unsigned char dest;// Offset=0x1 Size=0x1
};

struct GfxWorldVertex// Size=0x2c (Id=4728)
{
    float xyz[3];// Offset=0x0 Size=0xc
    float binormalSign;// Offset=0xc Size=0x4
    union GfxColor color;// Offset=0x10 Size=0x4
    float texCoord[2];// Offset=0x14 Size=0x8
    float lmapCoord[2];// Offset=0x1c Size=0x8
    union PackedUnitVec normal;// Offset=0x24 Size=0x4
    union PackedUnitVec tangent;// Offset=0x28 Size=0x4
};

union MaterialArgumentDef// Size=0x4 (Id=4729)
{
    float * literalConst;// Offset=0x0 Size=0x4
    struct MaterialArgumentCodeConst codeConst;// Offset=0x0 Size=0x4
    unsigned int codeSampler;// Offset=0x0 Size=0x4
    unsigned int nameHash;// Offset=0x0 Size=0x4
};

union MaterialVertexStreamRouting// Size=0x3c (Id=4730)
{
    struct MaterialStreamRouting data[13];// Offset=0x0 Size=0x1a
    struct D3DVertexDeclaration * decl[15];// Offset=0x0 Size=0x3c
};

struct MaterialShaderArgument// Size=0x8 (Id=4731)
{
    unsigned short type;// Offset=0x0 Size=0x2
    unsigned short dest;// Offset=0x2 Size=0x2
    union MaterialArgumentDef u;// Offset=0x4 Size=0x4
};

struct GfxPortal// Size=0x3c (Id=4732)
{
    struct GfxPortalWritable writable;// Offset=0x0 Size=0xc
    struct DpvsPlane plane;// Offset=0xc Size=0x10
    float * vertices[3];// Offset=0x1c Size=0x4
    unsigned short cellIndex;// Offset=0x20 Size=0x2
    unsigned char vertexCount;// Offset=0x22 Size=0x1
    unsigned char __align0[1];// Offset=0x23 Size=0x1
    float hullAxis[2][3];// Offset=0x24 Size=0x18
};

struct BModelDrawInfo// Size=0x2 (Id=4733)
{
    unsigned short surfId;// Offset=0x0 Size=0x2
};

union MaterialVertexShaderProgram// Size=0xc (Id=4734)
{
    struct D3DVertexShader * vs;// Offset=0x0 Size=0x4
    struct GfxShaderLoadDef loadDef;// Offset=0x0 Size=0xc
};

struct GfxLightGridColors// Size=0xa8 (Id=4735)
{
    unsigned char rgb[56][3];// Offset=0x0 Size=0xa8
};

struct MaterialVertexShader// Size=0x10 (Id=4736)
{
    char * name;// Offset=0x0 Size=0x4
    union MaterialVertexShaderProgram prog;// Offset=0x4 Size=0xc
};

struct GfxLightRegionAxis// Size=0x14 (Id=4737)
{
    float dir[3];// Offset=0x0 Size=0xc
    float midPoint;// Offset=0xc Size=0x4
    float halfSize;// Offset=0x10 Size=0x4
};

struct GfxWorldVertexLayerData// Size=0x24 (Id=4738)
{
    unsigned char * data;// Offset=0x0 Size=0x4
    struct D3DVertexBuffer layerVb;// Offset=0x4 Size=0x20
};

struct MaterialVertexDeclaration// Size=0x40 (Id=4739)
{
    unsigned char streamCount;// Offset=0x0 Size=0x1
    bool hasOptionalSource;// Offset=0x1 Size=0x1
    unsigned char __align0[2];// Offset=0x2 Size=0x2
    union MaterialVertexStreamRouting routing;// Offset=0x4 Size=0x3c
};

struct MaterialPixelShader// Size=0x10 (Id=4740)
{
    char * name;// Offset=0x0 Size=0x4
    union MaterialPixelShaderProgram prog;// Offset=0x4 Size=0xc
};

struct WaterWritable// Size=0x4 (Id=4741)
{
    float floatTime;// Offset=0x0 Size=0x4
};

struct ComWorld// Size=0x10 (Id=4742)
{
    char * name;// Offset=0x0 Size=0x4
    int isInUse;// Offset=0x4 Size=0x4
    unsigned int primaryLightCount;// Offset=0x8 Size=0x4
    struct ComPrimaryLight * primaryLights;// Offset=0xc Size=0x4
};

struct GfxDrawSurfFields// Size=0x8 (Id=4743)
{
    struct // Size=0x8 (Id=0)
    {
        unsigned long long unused:1;// Offset=0x0 Size=0x8 BitOffset=0x3f BitSize=0x1
        unsigned long long primarySortKey:6;// Offset=0x0 Size=0x8 BitOffset=0x39 BitSize=0x6
        unsigned long long surfType:4;// Offset=0x0 Size=0x8 BitOffset=0x35 BitSize=0x4
        unsigned long long sceneLightIndex:8;// Offset=0x0 Size=0x8 BitOffset=0x2d BitSize=0x8
        unsigned long long useHeroLighting:1;// Offset=0x0 Size=0x8 BitOffset=0x2c BitSize=0x1
        unsigned long long prepass:2;// Offset=0x0 Size=0x8 BitOffset=0x2a BitSize=0x2
        unsigned long long materialSortedIndex:12;// Offset=0x0 Size=0x8 BitOffset=0x1e BitSize=0xc
        unsigned long long customIndex:5;// Offset=0x0 Size=0x8 BitOffset=0x19 BitSize=0x5
        unsigned long long hasGfxEntIndex:1;// Offset=0x0 Size=0x8 BitOffset=0x18 BitSize=0x1
        unsigned long long reflectionProbeIndex:8;// Offset=0x0 Size=0x8 BitOffset=0x10 BitSize=0x8
        unsigned long long objectId:16;// Offset=0x0 Size=0x8 BitOffset=0x0 BitSize=0x10
    };
};

struct XSurfaceCollisionAabb// Size=0xc (Id=4744)
{
    unsigned short mins[3];// Offset=0x0 Size=0x6
    unsigned short maxs[3];// Offset=0x6 Size=0x6
};

struct GfxLightRegionHull// Size=0x50 (Id=4745)
{
    float kdopMidPoint[9];// Offset=0x0 Size=0x24
    float kdopHalfSize[9];// Offset=0x24 Size=0x24
    unsigned int axisCount;// Offset=0x48 Size=0x4
    struct GfxLightRegionAxis * axis;// Offset=0x4c Size=0x4
};

struct GfxCell// Size=0x28 (Id=4746)
{
    struct Bounds bounds;// Offset=0x0 Size=0x18
    int portalCount;// Offset=0x18 Size=0x4
    struct GfxPortal * portals;// Offset=0x1c Size=0x4
    unsigned char reflectionProbeCount;// Offset=0x20 Size=0x1
    unsigned char __align0[3];// Offset=0x21 Size=0x3
    unsigned char * reflectionProbes;// Offset=0x24 Size=0x4
};

struct srfTriangles_t// Size=0x10 (Id=4747)
{
    unsigned int vertexLayerData;// Offset=0x0 Size=0x4
    unsigned int firstVertex;// Offset=0x4 Size=0x4
    unsigned short vertexCount;// Offset=0x8 Size=0x2
    unsigned short triCount;// Offset=0xa Size=0x2
    unsigned int baseIndex;// Offset=0xc Size=0x4
};

struct GfxSurface// Size=0x18 (Id=4748)
{
    struct srfTriangles_t tris;// Offset=0x0 Size=0x10
    struct Material * material;// Offset=0x10 Size=0x4
    unsigned char lightmapIndex;// Offset=0x14 Size=0x1
    unsigned char reflectionProbeIndex;// Offset=0x15 Size=0x1
    unsigned char primaryLightIndex;// Offset=0x16 Size=0x1
    unsigned char flags;// Offset=0x17 Size=0x1
};

struct water_t// Size=0x48 (Id=4749)
{
    struct WaterWritable writable;// Offset=0x0 Size=0x4
    float * H0X;// Offset=0x4 Size=0x4
    float * H0Y;// Offset=0x8 Size=0x4
    float * wTerm;// Offset=0xc Size=0x4
    int M;// Offset=0x10 Size=0x4
    int N;// Offset=0x14 Size=0x4
    float Lx;// Offset=0x18 Size=0x4
    float Lz;// Offset=0x1c Size=0x4
    float gravity;// Offset=0x20 Size=0x4
    float windvel;// Offset=0x24 Size=0x4
    float winddir[2];// Offset=0x28 Size=0x8
    float amplitude;// Offset=0x30 Size=0x4
    float codeConstant[4];// Offset=0x34 Size=0x10
    struct GfxImage * image;// Offset=0x44 Size=0x4
};

struct GfxSceneDynBrush// Size=0x4 (Id=4750)
{
    struct BModelDrawInfo info;// Offset=0x0 Size=0x2
    unsigned short dynEntId;// Offset=0x2 Size=0x2
};

struct GfxLightRegion// Size=0x8 (Id=4751)
{
    unsigned int hullCount;// Offset=0x0 Size=0x4
    struct GfxLightRegionHull * hulls;// Offset=0x4 Size=0x4
};

struct GfxLightGridEntry// Size=0x4 (Id=4752)
{
    unsigned short colorsIndex;// Offset=0x0 Size=0x2
    unsigned char primaryLightIndex;// Offset=0x2 Size=0x1
    unsigned char needsTrace;// Offset=0x3 Size=0x1
};

struct sunflare_t// Size=0x60 (Id=4753)
{
    bool hasValidData;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    struct Material * spriteMaterial;// Offset=0x4 Size=0x4
    struct Material * flareMaterial;// Offset=0x8 Size=0x4
    float spriteSize;// Offset=0xc Size=0x4
    float flareMinSize;// Offset=0x10 Size=0x4
    float flareMinDot;// Offset=0x14 Size=0x4
    float flareMaxSize;// Offset=0x18 Size=0x4
    float flareMaxDot;// Offset=0x1c Size=0x4
    float flareMaxAlpha;// Offset=0x20 Size=0x4
    int flareFadeInTime;// Offset=0x24 Size=0x4
    int flareFadeOutTime;// Offset=0x28 Size=0x4
    float blindMinDot;// Offset=0x2c Size=0x4
    float blindMaxDot;// Offset=0x30 Size=0x4
    float blindMaxDarken;// Offset=0x34 Size=0x4
    int blindFadeInTime;// Offset=0x38 Size=0x4
    int blindFadeOutTime;// Offset=0x3c Size=0x4
    float glareMinDot;// Offset=0x40 Size=0x4
    float glareMaxDot;// Offset=0x44 Size=0x4
    float glareMaxLighten;// Offset=0x48 Size=0x4
    int glareFadeInTime;// Offset=0x4c Size=0x4
    int glareFadeOutTime;// Offset=0x50 Size=0x4
    float sunFxPosition[3];// Offset=0x54 Size=0xc
};

struct XSurfaceCollisionNode// Size=0x10 (Id=4754)
{
    struct XSurfaceCollisionAabb aabb;// Offset=0x0 Size=0xc
    unsigned short childBeginIndex;// Offset=0xc Size=0x2
    unsigned short childCount;// Offset=0xe Size=0x2
};

struct GfxWorldVertexData// Size=0x24 (Id=4755)
{
    struct GfxWorldVertex * vertices;// Offset=0x0 Size=0x4
    struct D3DVertexBuffer worldVb;// Offset=0x4 Size=0x20
};

struct GfxSurfaceBounds// Size=0x20 (Id=4756)
{
    struct Bounds bounds;// Offset=0x0 Size=0x18
    unsigned short mipRadius;// Offset=0x18 Size=0x2
    unsigned char invHighMipRadius[5];// Offset=0x1a Size=0x5
};

struct GfxLightmapArray// Size=0x8 (Id=4757)
{
    struct GfxImage * primary;// Offset=0x0 Size=0x4
    struct GfxImage * secondary;// Offset=0x4 Size=0x4
};

struct MaterialPass// Size=0x54 (Id=4758)
{
    struct MaterialVertexDeclaration * vertexDecl;// Offset=0x0 Size=0x4
    struct MaterialVertexShader * vertexShaderArray[15];// Offset=0x4 Size=0x3c
    struct MaterialVertexShader * vertexShader;// Offset=0x40 Size=0x4
    struct MaterialPixelShader * pixelShader;// Offset=0x44 Size=0x4
    unsigned char perPrimArgCount;// Offset=0x48 Size=0x1
    unsigned char perObjArgCount;// Offset=0x49 Size=0x1
    unsigned char stableArgCount;// Offset=0x4a Size=0x1
    unsigned char customSamplerFlags;// Offset=0x4b Size=0x1
    unsigned char precompiledIndex;// Offset=0x4c Size=0x1
    unsigned char __align0[3];// Offset=0x4d Size=0x3
    struct MaterialShaderArgument * args;// Offset=0x50 Size=0x4
};

enum GfxStencilOp
{
    GFXS_STENCILOP_KEEP=0,
    GFXS_STENCILOP_ZERO=1,
    GFXS_STENCILOP_REPLACE=2,
    GFXS_STENCILOP_INCRSAT=3,
    GFXS_STENCILOP_DECRSAT=4,
    GFXS_STENCILOP_INVERT=5,
    GFXS_STENCILOP_INCR=6,
    GFXS_STENCILOP_DECR=7,
    GFXS_STENCILOP_COUNT=8
};

struct GfxLightGrid// Size=0x38 (Id=4760)
{
    bool hasLightRegions;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    unsigned int lastSunPrimaryLightIndex;// Offset=0x4 Size=0x4
    unsigned short mins[3];// Offset=0x8 Size=0x6
    unsigned short maxs[3];// Offset=0xe Size=0x6
    unsigned int rowAxis;// Offset=0x14 Size=0x4
    unsigned int colAxis;// Offset=0x18 Size=0x4
    unsigned short * rowDataStart;// Offset=0x1c Size=0x4
    unsigned int rawRowDataSize;// Offset=0x20 Size=0x4
    unsigned char * rawRowData;// Offset=0x24 Size=0x4
    unsigned int entryCount;// Offset=0x28 Size=0x4
    struct GfxLightGridEntry * entries;// Offset=0x2c Size=0x4
    unsigned int colorCount;// Offset=0x30 Size=0x4
    struct GfxLightGridColors * colors;// Offset=0x34 Size=0x4
};

struct GfxPackedVertex// Size=0x20 (Id=4761)
{
    float xyz[3];// Offset=0x0 Size=0xc
    float binormalSign;// Offset=0xc Size=0x4
    union GfxColor color;// Offset=0x10 Size=0x4
    union PackedTexCoords texCoord;// Offset=0x14 Size=0x4
    union PackedUnitVec normal;// Offset=0x18 Size=0x4
    union PackedUnitVec tangent;// Offset=0x1c Size=0x4
};

union MaterialTextureDefInfo// Size=0x4 (Id=4762)
{
    struct GfxImage * image;// Offset=0x0 Size=0x4
    struct water_t * water;// Offset=0x0 Size=0x4
};

struct GfxWorldDpvsPlanes// Size=0x10 (Id=4763)
{
    int cellCount;// Offset=0x0 Size=0x4
    struct cplane_s * planes;// Offset=0x4 Size=0x4
    unsigned short * nodes;// Offset=0x8 Size=0x4
    unsigned int * sceneEntCellBits;// Offset=0xc Size=0x4
};

struct GfxSky// Size=0x10 (Id=4764)
{
    int skySurfCount;// Offset=0x0 Size=0x4
    int * skyStartSurfs;// Offset=0x4 Size=0x4
    struct GfxImage * skyImage;// Offset=0x8 Size=0x4
    unsigned char skySamplerState;// Offset=0xc Size=0x1
};

struct GfxReflectionProbe// Size=0xc (Id=4765)
{
    float origin[3];// Offset=0x0 Size=0xc
};

struct GfxStateBits// Size=0x8 (Id=4766)
{
    unsigned int loadBits[2];// Offset=0x0 Size=0x8
};

enum MaterialVertexDeclType
{
    VERTDECL_GENERIC=0,
    VERTDECL_PACKED=1,
    VERTDECL_WORLD=2,
    VERTDECL_WORLD_T1N0=3,
    VERTDECL_WORLD_T1N1=4,
    VERTDECL_WORLD_T2N0=5,
    VERTDECL_WORLD_T2N1=6,
    VERTDECL_WORLD_T2N2=7,
    VERTDECL_WORLD_T3N0=8,
    VERTDECL_WORLD_T3N1=9,
    VERTDECL_WORLD_T3N2=10,
    VERTDECL_WORLD_T4N0=11,
    VERTDECL_WORLD_T4N1=12,
    VERTDECL_WORLD_T4N2=13,
    VERTDECL_POS_TEX=14,
    VERTDECL_COUNT=15
};

struct XSurfaceCollisionLeaf// Size=0x2 (Id=4768)
{
    unsigned short triangleBeginIndex;// Offset=0x0 Size=0x2
};

struct GfxCmdRingBuf// Size=0x228 (Id=4769)
{
    struct GfxDrawListIter * drawListIter;// Offset=0x0 Size=0x4
    unsigned int memoryPos;// Offset=0x4 Size=0x4
    unsigned int maxMemoryPos;// Offset=0x8 Size=0x4
    unsigned char * memoryPool;// Offset=0xc Size=0x4
    unsigned int fencePosIndex;// Offset=0x10 Size=0x4
    unsigned int fenceIndex;// Offset=0x14 Size=0x4
    unsigned int availIndex;// Offset=0x18 Size=0x4
    unsigned int availMemoryPos;// Offset=0x1c Size=0x4
    unsigned int reserveMemoryPos0;// Offset=0x20 Size=0x4
    unsigned int reserveMemoryPos1;// Offset=0x24 Size=0x4
    unsigned int fencePos[64];// Offset=0x28 Size=0x100
    unsigned long fence[64];// Offset=0x128 Size=0x100
};

struct GfxBrushModelWritable// Size=0x18 (Id=4770)
{
    struct Bounds bounds;// Offset=0x0 Size=0x18
};

struct MaterialMemory// Size=0x8 (Id=4771)
{
    struct Material * material;// Offset=0x0 Size=0x4
    int memory;// Offset=0x4 Size=0x4
};

struct XSurfaceVertexInfo// Size=0xc (Id=4772)
{
    short vertCount[4];// Offset=0x0 Size=0x8
    unsigned short * vertsBlend;// Offset=0x8 Size=0x4
};

struct Material// Size=0x58 (Id=4773)
{
    struct MaterialInfo info;// Offset=0x0 Size=0x18
    unsigned char stateBitsEntry[33];// Offset=0x18 Size=0x21
    unsigned char textureCount;// Offset=0x39 Size=0x1
    unsigned char constantCount;// Offset=0x3a Size=0x1
    unsigned char stateBitsCount;// Offset=0x3b Size=0x1
    unsigned char stateFlags;// Offset=0x3c Size=0x1
    unsigned char cameraRegion;// Offset=0x3d Size=0x1
    unsigned char layerCount;// Offset=0x3e Size=0x1
    unsigned char __align0[1];// Offset=0x3f Size=0x1
    struct MaterialTechniqueSet * techniqueSet;// Offset=0x40 Size=0x4
    struct MaterialTextureDef * textureTable;// Offset=0x44 Size=0x4
    struct MaterialConstantDef * constantTable;// Offset=0x48 Size=0x4
    struct GfxStateBits * stateBitsTable;// Offset=0x4c Size=0x4
    char ** subMaterials;// Offset=0x50 Size=0x4
};

struct GfxAabbTree// Size=0x28 (Id=4774)
{
    struct Bounds bounds;// Offset=0x0 Size=0x18
    unsigned short childCount;// Offset=0x18 Size=0x2
    unsigned short surfaceCount;// Offset=0x1a Size=0x2
    unsigned short startSurfIndex;// Offset=0x1c Size=0x2
    unsigned short smodelIndexCount;// Offset=0x1e Size=0x2
    unsigned short * smodelIndexes;// Offset=0x20 Size=0x4
    int childrenOffset;// Offset=0x24 Size=0x4
};

struct r_global_permanent_t// Size=0x2200 (Id=4775)
{
    unsigned short sortedMaterials[4096];// Offset=0x0 Size=0x2000
    unsigned short mtlSortIndexBeginKey[64];// Offset=0x2000 Size=0x80
    int needSortMaterials;// Offset=0x2080 Size=0x4
    unsigned int materialCount;// Offset=0x2084 Size=0x4
    struct GfxImage * whiteImage;// Offset=0x2088 Size=0x4
    struct GfxImage * blackImage;// Offset=0x208c Size=0x4
    struct GfxImage * grayImage;// Offset=0x2090 Size=0x4
    struct GfxImage * identityNormalMapImage;// Offset=0x2094 Size=0x4
    struct GfxImage * specularityImage;// Offset=0x2098 Size=0x4
    struct GfxImage * outdoorImage;// Offset=0x209c Size=0x4
    struct GfxLightDef * dlightDef;// Offset=0x20a0 Size=0x4
    struct Material * defaultMaterial;// Offset=0x20a4 Size=0x4
    struct Material * whiteMaterial;// Offset=0x20a8 Size=0x4
    struct Material * additiveMaterial;// Offset=0x20ac Size=0x4
    struct Material * pointMaterial;// Offset=0x20b0 Size=0x4
    struct Material * lineMaterial;// Offset=0x20b4 Size=0x4
    struct Material * lineMaterialNoDepth;// Offset=0x20b8 Size=0x4
    struct Material * shadowClearMaterial;// Offset=0x20bc Size=0x4
    struct Material * shadowCasterWorldMaterial;// Offset=0x20c0 Size=0x4
    struct Material * shadowCasterModelMaterial;// Offset=0x20c4 Size=0x4
    struct Material * shadowOverlayMaterial;// Offset=0x20c8 Size=0x4
    struct Material * depthPrepassMaterial;// Offset=0x20cc Size=0x4
    struct Material * glareBlindMaterial;// Offset=0x20d0 Size=0x4
    struct Material * pixelCostAddDepthAlwaysMaterial;// Offset=0x20d4 Size=0x4
    struct Material * pixelCostAddDepthDisableMaterial;// Offset=0x20d8 Size=0x4
    struct Material * pixelCostAddDepthEqualMaterial;// Offset=0x20dc Size=0x4
    struct Material * pixelCostAddDepthLessMaterial;// Offset=0x20e0 Size=0x4
    struct Material * pixelCostAddDepthWriteMaterial;// Offset=0x20e4 Size=0x4
    struct Material * pixelCostAddNoDepthWriteMaterial;// Offset=0x20e8 Size=0x4
    struct Material * pixelCostColorCodeMaterial;// Offset=0x20ec Size=0x4
    struct Material * stencilShadowMaterial;// Offset=0x20f0 Size=0x4
    struct Material * stencilDisplayMaterial;// Offset=0x20f4 Size=0x4
    struct Material * floatZDisplayMaterial;// Offset=0x20f8 Size=0x4
    struct Material * colorChannelMixerMaterial;// Offset=0x20fc Size=0x4
    struct Material * frameColorDebugMaterial;// Offset=0x2100 Size=0x4
    struct Material * frameAlphaDebugMaterial;// Offset=0x2104 Size=0x4
    struct GfxWorld * world;// Offset=0x2108 Size=0x4
    struct GfxImage * colorManipImage;// Offset=0x210c Size=0x4
    struct Material * feedbackReplaceMaterial;// Offset=0x2110 Size=0x4
    struct Material * blurApplyMaterial;// Offset=0x2114 Size=0x4
    struct Material * blurApplyFilmMaterial[2];// Offset=0x2118 Size=0x8
    struct Material * cinematicMaterial;// Offset=0x2120 Size=0x4
    struct Material * dofDownsampleMaterial;// Offset=0x2124 Size=0x4
    struct Material * dofNearCocMaterial;// Offset=0x2128 Size=0x4
    struct Material * smallBlurMaterial;// Offset=0x212c Size=0x4
    struct Material * postFxMaterial[8];// Offset=0x2130 Size=0x20
    struct Material * particleBlendMaterial;// Offset=0x2150 Size=0x4
    struct Material * particleZDownsampleMaterial;// Offset=0x2154 Size=0x4
    struct Material * symmetricFilterMaterial[2][8];// Offset=0x2158 Size=0x40
    struct Material * shellShockBlurredMaterial;// Offset=0x2198 Size=0x4
    struct Material * shellShockFlashedMaterial;// Offset=0x219c Size=0x4
    struct Material * glowConsistentSetupMaterial[2];// Offset=0x21a0 Size=0x8
    struct Material * glowApplyBloomMaterial;// Offset=0x21a8 Size=0x4
    struct Material * thermalBodyDefault;// Offset=0x21ac Size=0x4
    struct Material * waterSheetingFXMaterial;// Offset=0x21b0 Size=0x4
    int savedScreenTimes[4];// Offset=0x21b4 Size=0x10
};

struct XSurfaceCollisionTree// Size=0x28 (Id=4776)
{
    float trans[3];// Offset=0x0 Size=0xc
    float scale[3];// Offset=0xc Size=0xc
    unsigned int nodeCount;// Offset=0x18 Size=0x4
    struct XSurfaceCollisionNode * nodes;// Offset=0x1c Size=0x4
    unsigned int leafCount;// Offset=0x20 Size=0x4
    struct XSurfaceCollisionLeaf * leafs;// Offset=0x24 Size=0x4
};

struct XModelDrawInfo// Size=0x4 (Id=4777)
{
    unsigned char hasGfxEntIndex;// Offset=0x0 Size=0x1
    unsigned char lod;// Offset=0x1 Size=0x1
    unsigned short surfId;// Offset=0x2 Size=0x2
};

struct GfxBrushModel// Size=0x38 (Id=4778)
{
    struct GfxBrushModelWritable writable;// Offset=0x0 Size=0x18
    struct Bounds bounds;// Offset=0x18 Size=0x18
    float radius;// Offset=0x30 Size=0x4
    unsigned short surfaceCount;// Offset=0x34 Size=0x2
    unsigned short startSurfIndex;// Offset=0x36 Size=0x2
};

struct XRigidVertList// Size=0xc (Id=4779)
{
    unsigned short boneOffset;// Offset=0x0 Size=0x2
    unsigned short vertCount;// Offset=0x2 Size=0x2
    unsigned short triOffset;// Offset=0x4 Size=0x2
    unsigned short triCount;// Offset=0x6 Size=0x2
    struct XSurfaceCollisionTree * collisionTree;// Offset=0x8 Size=0x4
};

struct GfxSceneDynModel// Size=0x6 (Id=4780)
{
    struct XModelDrawInfo info;// Offset=0x0 Size=0x4
    unsigned short dynEntId;// Offset=0x4 Size=0x2
};

union GfxTexture// Size=0x34 (Id=4781)
{
    struct D3DBaseTexture basemap;// Offset=0x0 Size=0x34
    struct D3DLineTexture linemap;// Offset=0x0 Size=0x34
    struct D3DTexture map;// Offset=0x0 Size=0x34
    struct D3DVolumeTexture volmap;// Offset=0x0 Size=0x34
    struct D3DCubeTexture cubemap;// Offset=0x0 Size=0x34
};

union GfxDrawSurf// Size=0x8 (Id=4782)
{
    struct GfxDrawSurfFields fields;// Offset=0x0 Size=0x8
    unsigned long long packed;// Offset=0x0 Size=0x8
};

struct MaterialTechnique// Size=0x5c (Id=4783)
{
    char * name;// Offset=0x0 Size=0x4
    unsigned short flags;// Offset=0x4 Size=0x2
    unsigned short passCount;// Offset=0x6 Size=0x2
    struct MaterialPass passArray[1];// Offset=0x8 Size=0x54
};

struct GfxWorldDraw// Size=0xa0 (Id=4784)
{
    unsigned int reflectionProbeCount;// Offset=0x0 Size=0x4
    struct GfxImage ** reflectionProbes;// Offset=0x4 Size=0x4
    struct GfxReflectionProbe * reflectionProbeOrigins;// Offset=0x8 Size=0x4
    union GfxTexture * reflectionProbeTextures;// Offset=0xc Size=0x4
    int lightmapCount;// Offset=0x10 Size=0x4
    struct GfxLightmapArray * lightmaps;// Offset=0x14 Size=0x4
    union GfxTexture * lightmapPrimaryTextures;// Offset=0x18 Size=0x4
    union GfxTexture * lightmapSecondaryTextures;// Offset=0x1c Size=0x4
    struct GfxImage * lightmapOverridePrimary;// Offset=0x20 Size=0x4
    struct GfxImage * lightmapOverrideSecondary;// Offset=0x24 Size=0x4
    unsigned int vertexCount;// Offset=0x28 Size=0x4
    struct GfxWorldVertexData vd;// Offset=0x2c Size=0x24
    unsigned int vertexLayerDataSize;// Offset=0x50 Size=0x4
    struct GfxWorldVertexLayerData vld;// Offset=0x54 Size=0x24
    unsigned int indexCount;// Offset=0x78 Size=0x4
    unsigned short * indices;// Offset=0x7c Size=0x4
    struct D3DIndexBuffer indexBuffer;// Offset=0x80 Size=0x20
};

struct MaterialInfo// Size=0x18 (Id=4785)
{
    char * name;// Offset=0x0 Size=0x4
    unsigned char gameFlags;// Offset=0x4 Size=0x1
    unsigned char sortKey;// Offset=0x5 Size=0x1
    unsigned char textureAtlasRowCount;// Offset=0x6 Size=0x1
    unsigned char textureAtlasColumnCount;// Offset=0x7 Size=0x1
    union GfxDrawSurf drawSurf;// Offset=0x8 Size=0x8
    unsigned int surfaceTypeBits;// Offset=0x10 Size=0x4
};

struct CardMemory// Size=0x4 (Id=4786)
{
    int platform[1];// Offset=0x0 Size=0x4
};

struct GfxWorldDpvsDynamic// Size=0x30 (Id=4787)
{
    unsigned int dynEntClientWordCount[2];// Offset=0x0 Size=0x8
    unsigned int dynEntClientCount[2];// Offset=0x8 Size=0x8
    unsigned int * dynEntCellBits[2];// Offset=0x10 Size=0x8
    unsigned char * dynEntVisData[2][3];// Offset=0x18 Size=0x18
};

struct GfxShadowGeometry// Size=0xc (Id=4788)
{
    unsigned short surfaceCount;// Offset=0x0 Size=0x2
    unsigned short smodelCount;// Offset=0x2 Size=0x2
    unsigned short * sortedSurfIndex;// Offset=0x4 Size=0x4
    unsigned short * smodelIndex;// Offset=0x8 Size=0x4
};

struct MaterialTextureDef// Size=0xc (Id=4789)
{
    unsigned int nameHash;// Offset=0x0 Size=0x4
    char nameStart;// Offset=0x4 Size=0x1
    char nameEnd;// Offset=0x5 Size=0x1
    unsigned char samplerState;// Offset=0x6 Size=0x1
    unsigned char semantic;// Offset=0x7 Size=0x1
    union MaterialTextureDefInfo u;// Offset=0x8 Size=0x4
};

struct MaterialConstantDef// Size=0x20 (Id=4790)
{
    unsigned int nameHash;// Offset=0x0 Size=0x4
    char name[12];// Offset=0x4 Size=0xc
    float literal[4];// Offset=0x10 Size=0x10
};

enum GfxStencilFunc
{
    GFXS_STENCILFUNC_NEVER=0,
    GFXS_STENCILFUNC_LESS=1,
    GFXS_STENCILFUNC_EQUAL=2,
    GFXS_STENCILFUNC_LESSEQUAL=3,
    GFXS_STENCILFUNC_GREATER=4,
    GFXS_STENCILFUNC_NOTEQUAL=5,
    GFXS_STENCILFUNC_GREATEREQUAL=6,
    GFXS_STENCILFUNC_ALWAYS=7,
    GFXS_STENCILFUNC_COUNT=8
};

struct mnode_t// Size=0x4 (Id=4792)
{
    unsigned short cellIndex;// Offset=0x0 Size=0x2
    unsigned short rightChildOffset;// Offset=0x2 Size=0x2
};

struct GfxCellTreeCount// Size=0x4 (Id=4793)
{
    int aabbTreeCount;// Offset=0x0 Size=0x4
};

struct GfxCellTree// Size=0x4 (Id=4794)
{
    struct GfxAabbTree * aabbTree;// Offset=0x0 Size=0x4
};

struct GfxWorldDpvsStatic// Size=0x68 (Id=4795)
{
    unsigned int smodelCount;// Offset=0x0 Size=0x4
    unsigned int staticSurfaceCount;// Offset=0x4 Size=0x4
    unsigned int litOpaqueSurfsBegin;// Offset=0x8 Size=0x4
    unsigned int litOpaqueSurfsEnd;// Offset=0xc Size=0x4
    unsigned int litTransSurfsBegin;// Offset=0x10 Size=0x4
    unsigned int litTransSurfsEnd;// Offset=0x14 Size=0x4
    unsigned int shadowCasterSurfsBegin;// Offset=0x18 Size=0x4
    unsigned int shadowCasterSurfsEnd;// Offset=0x1c Size=0x4
    unsigned int emissiveSurfsBegin;// Offset=0x20 Size=0x4
    unsigned int emissiveSurfsEnd;// Offset=0x24 Size=0x4
    unsigned int smodelVisDataCount;// Offset=0x28 Size=0x4
    unsigned int surfaceVisDataCount;// Offset=0x2c Size=0x4
    unsigned char * smodelVisData[3];// Offset=0x30 Size=0xc
    unsigned char * surfaceVisData[3];// Offset=0x3c Size=0xc
    unsigned short * sortedSurfIndex;// Offset=0x48 Size=0x4
    struct GfxStaticModelInst * smodelInsts;// Offset=0x4c Size=0x4
    struct GfxSurface * surfaces;// Offset=0x50 Size=0x4
    struct GfxSurfaceBounds * surfacesBounds;// Offset=0x54 Size=0x4
    struct GfxStaticModelDrawInst * smodelDrawInsts;// Offset=0x58 Size=0x4
    union GfxDrawSurf * surfaceMaterials;// Offset=0x5c Size=0x4
    unsigned int * surfaceCastsSunShadow;// Offset=0x60 Size=0x4
    long usageCount;// Offset=0x64 Size=0x4
};

struct DxGlobals// Size=0x510 (Id=4796)
{
    struct HINSTANCE__ * hinst;// Offset=0x0 Size=0x4
    struct Direct3D * d3d9;// Offset=0x4 Size=0x4
    struct D3DDevice * device;// Offset=0x8 Size=0x4
    unsigned int adapterIndex;// Offset=0xc Size=0x4
    enum _D3DFORMAT depthStencilFormat;// Offset=0x10 Size=0x4
    struct D3DDevice * cmdBufDevice[18];// Offset=0x14 Size=0x48
    struct GfxDrawListIter * cmdBufAbortDrawListIter;// Offset=0x5c Size=0x4
    struct GfxCmdRingBuf cmdBuf[2];// Offset=0x60 Size=0x450
    enum _D3DMULTISAMPLE_TYPE multiSampleType;// Offset=0x4b0 Size=0x4
    unsigned long multiSampleQuality;// Offset=0x4b4 Size=0x4
    struct D3DSurface * singleSampleDepthStencilSurface;// Offset=0x4b8 Size=0x4
    struct D3DTexture * frontBufferTexture[2];// Offset=0x4bc Size=0x8
    unsigned int frontBufferTextureIndex;// Offset=0x4c4 Size=0x4
    enum _D3DTEXTUREFILTERTYPE linearNonMippedMinFilter;// Offset=0x4c8 Size=0x4
    enum _D3DTEXTUREFILTERTYPE linearNonMippedMagFilter;// Offset=0x4cc Size=0x4
    enum _D3DTEXTUREFILTERTYPE linearMippedMinFilter;// Offset=0x4d0 Size=0x4
    enum _D3DTEXTUREFILTERTYPE linearMippedMagFilter;// Offset=0x4d4 Size=0x4
    enum _D3DTEXTUREFILTERTYPE anisotropicMinFilter;// Offset=0x4d8 Size=0x4
    enum _D3DTEXTUREFILTERTYPE anisotropicMagFilter;// Offset=0x4dc Size=0x4
    int linearMippedAnisotropy;// Offset=0x4e0 Size=0x4
    int anisotropyFor2x;// Offset=0x4e4 Size=0x4
    int anisotropyFor4x;// Offset=0x4e8 Size=0x4
    int mipFilterMode;// Offset=0x4ec Size=0x4
    unsigned long mipBias;// Offset=0x4f0 Size=0x4
    struct _D3DRING_BUFFER_PARAMETERS ringBufferParameters;// Offset=0x4f4 Size=0x18
    int showDirtyDiscError;// Offset=0x50c Size=0x4
};

struct MaterialTechniqueSet// Size=0x90 (Id=4797)
{
    char * name;// Offset=0x0 Size=0x4
    unsigned char worldVertFormat;// Offset=0x4 Size=0x1
    unsigned char unused[2];// Offset=0x5 Size=0x2
    unsigned char __align0[1];// Offset=0x7 Size=0x1
    struct MaterialTechniqueSet * remappedTechniqueSet;// Offset=0x8 Size=0x4
    struct MaterialTechnique * techniques[33];// Offset=0xc Size=0x84
};

struct GfxWorld// Size=0x2c8 (Id=4798)
{
    char * name;// Offset=0x0 Size=0x4
    char * baseName;// Offset=0x4 Size=0x4
    int planeCount;// Offset=0x8 Size=0x4
    int nodeCount;// Offset=0xc Size=0x4
    unsigned int surfaceCount;// Offset=0x10 Size=0x4
    int skyCount;// Offset=0x14 Size=0x4
    struct GfxSky * skies;// Offset=0x18 Size=0x4
    unsigned int lastSunPrimaryLightIndex;// Offset=0x1c Size=0x4
    unsigned int primaryLightCount;// Offset=0x20 Size=0x4
    unsigned int sortKeyLitDecal;// Offset=0x24 Size=0x4
    unsigned int sortKeyEffectDecal;// Offset=0x28 Size=0x4
    unsigned int sortKeyEffectAuto;// Offset=0x2c Size=0x4
    unsigned int sortKeyDistortion;// Offset=0x30 Size=0x4
    struct GfxWorldDpvsPlanes dpvsPlanes;// Offset=0x34 Size=0x10
    struct GfxCellTreeCount * aabbTreeCounts;// Offset=0x44 Size=0x4
    struct GfxCellTree * aabbTrees;// Offset=0x48 Size=0x4
    struct GfxCell * cells;// Offset=0x4c Size=0x4
    struct GfxWorldDraw draw;// Offset=0x50 Size=0xa0
    struct GfxLightGrid lightGrid;// Offset=0xf0 Size=0x38
    int modelCount;// Offset=0x128 Size=0x4
    struct GfxBrushModel * models;// Offset=0x12c Size=0x4
    struct Bounds bounds;// Offset=0x130 Size=0x18
    unsigned int checksum;// Offset=0x148 Size=0x4
    int materialMemoryCount;// Offset=0x14c Size=0x4
    struct MaterialMemory * materialMemory;// Offset=0x150 Size=0x4
    struct sunflare_t sun;// Offset=0x154 Size=0x60
    float outdoorLookupMatrix[4][4];// Offset=0x1b4 Size=0x40
    struct GfxImage * outdoorImage;// Offset=0x1f4 Size=0x4
    unsigned int * cellCasterBits;// Offset=0x1f8 Size=0x4
    unsigned int * cellHasSunLitSurfsBits;// Offset=0x1fc Size=0x4
    struct GfxSceneDynModel * sceneDynModel;// Offset=0x200 Size=0x4
    struct GfxSceneDynBrush * sceneDynBrush;// Offset=0x204 Size=0x4
    unsigned int * primaryLightEntityShadowVis;// Offset=0x208 Size=0x4
    unsigned int * primaryLightDynEntShadowVis[2];// Offset=0x20c Size=0x8
    unsigned char * nonSunPrimaryLightForModelDynEnt;// Offset=0x214 Size=0x4
    struct GfxShadowGeometry * shadowGeom;// Offset=0x218 Size=0x4
    struct GfxLightRegion * lightRegion;// Offset=0x21c Size=0x4
    struct GfxWorldDpvsStatic dpvs;// Offset=0x220 Size=0x68
    struct GfxWorldDpvsDynamic dpvsDyn;// Offset=0x288 Size=0x30
    unsigned int mapVtxChecksum;// Offset=0x2b8 Size=0x4
    unsigned int heroOnlyLightCount;// Offset=0x2bc Size=0x4
    struct GfxHeroOnlyLight * heroOnlyLights;// Offset=0x2c0 Size=0x4
    unsigned char fogTypesAllowed;// Offset=0x2c4 Size=0x1
};

struct _XGTEXTURE_DESC// Size=0x3c (Id=4799)
{
    enum _D3DRESOURCETYPE ResourceType;// Offset=0x0 Size=0x4
    unsigned int Width;// Offset=0x4 Size=0x4
    unsigned int Height;// Offset=0x8 Size=0x4
    unsigned int Depth;// Offset=0xc Size=0x4
    enum _D3DFORMAT Format;// Offset=0x10 Size=0x4
    unsigned int RowPitch;// Offset=0x14 Size=0x4
    unsigned int SlicePitch;// Offset=0x18 Size=0x4
    unsigned int BitsPerPixel;// Offset=0x1c Size=0x4
    unsigned int WidthInBlocks;// Offset=0x20 Size=0x4
    unsigned int HeightInBlocks;// Offset=0x24 Size=0x4
    unsigned int DepthInBlocks;// Offset=0x28 Size=0x4
    unsigned int BytesPerBlock;// Offset=0x2c Size=0x4
    int ExpBias;// Offset=0x30 Size=0x4
    unsigned long Flags;// Offset=0x34 Size=0x4
    enum _D3DMULTISAMPLE_TYPE MultiSampleType;// Offset=0x38 Size=0x4
};

struct GfxImage// Size=0x70 (Id=4800)
{
    union GfxTexture texture;// Offset=0x0 Size=0x34
    int format;// Offset=0x34 Size=0x4
    unsigned char mapType;// Offset=0x38 Size=0x1
    unsigned char semantic;// Offset=0x39 Size=0x1
    unsigned char category;// Offset=0x3a Size=0x1
    unsigned char __align0[1];// Offset=0x3b Size=0x1
    struct CardMemory cardMemory;// Offset=0x3c Size=0x4
    unsigned short width;// Offset=0x40 Size=0x2
    unsigned short height;// Offset=0x42 Size=0x2
    unsigned short depth;// Offset=0x44 Size=0x2
    unsigned char levelCount;// Offset=0x46 Size=0x1
    unsigned char cached;// Offset=0x47 Size=0x1
    unsigned char * pixels;// Offset=0x48 Size=0x4
    struct GfxImageStreamData streams[4];// Offset=0x4c Size=0x20
    char * name;// Offset=0x6c Size=0x4
};

struct GfxImageStreamData// Size=0x8 (Id=4801)
{
    unsigned short width;// Offset=0x0 Size=0x2
    unsigned short height;// Offset=0x2 Size=0x2
    unsigned int pixelSize;// Offset=0x4 Size=0x4
};

struct XSurface// Size=0x78 (Id=4802)
{
    unsigned char tileMode;// Offset=0x0 Size=0x1
    bool deformed;// Offset=0x1 Size=0x1
    unsigned short vertCount;// Offset=0x2 Size=0x2
    unsigned short triCount;// Offset=0x4 Size=0x2
    unsigned char __align0[2];// Offset=0x6 Size=0x2
    unsigned short * triIndices;// Offset=0x8 Size=0x4
    struct XSurfaceVertexInfo vertInfo;// Offset=0xc Size=0xc
    struct GfxPackedVertex * verts0;// Offset=0x18 Size=0x4
    struct D3DVertexBuffer vb0;// Offset=0x1c Size=0x20
    unsigned int vertListCount;// Offset=0x3c Size=0x4
    struct XRigidVertList * vertList;// Offset=0x40 Size=0x4
    struct D3DIndexBuffer indexBuffer;// Offset=0x44 Size=0x20
    int partBits[5];// Offset=0x64 Size=0x14
};

struct ComPrimaryLight// Size=0x44 (Id=4803)
{
    unsigned char type;// Offset=0x0 Size=0x1
    unsigned char canUseShadowMap;// Offset=0x1 Size=0x1
    unsigned char exponent;// Offset=0x2 Size=0x1
    unsigned char unused;// Offset=0x3 Size=0x1
    float color[3];// Offset=0x4 Size=0xc
    float dir[3];// Offset=0x10 Size=0xc
    float origin[3];// Offset=0x1c Size=0xc
    float radius;// Offset=0x28 Size=0x4
    float cosHalfFovOuter;// Offset=0x2c Size=0x4
    float cosHalfFovInner;// Offset=0x30 Size=0x4
    float cosHalfFovExpanded;// Offset=0x34 Size=0x4
    float rotationLimit;// Offset=0x38 Size=0x4
    float translationLimit;// Offset=0x3c Size=0x4
    char * defName;// Offset=0x40 Size=0x4
};

enum LightEditMsg
{
    LIGHTMSG_PRINT=0,
    LIGHTMSG_SET_MAP=1,
    LIGHTMSG_STAGE_INDEX=2,
    LIGHTMSG_UPDATE_STAGE=3,
    LIGHTMSG_UPDATE_POINT_LIGHT=4,
    LIGHTMSG_UPDATE_LIGHTMAP_BEGIN=5,
    LIGHTMSG_UPDATE_LIGHTMAP=6,
    LIGHTMSG_UPDATE_LIGHTMAP_END=7,
    LIGHTMSG_UPDATE_LIGHTGRID_BEGIN=8,
    LIGHTMSG_UPDATE_LIGHTGRID_BEGIN_PHASE=9,
    LIGHTMSG_UPDATE_LIGHTGRID=10,
    LIGHTMSG_UPDATE_LIGHTGRID_END=11,
    LIGHTMSG_UPDATE_LIGHTGRID_END_PHASE=12,
    LIGHTMSG_COUNT=13
};

struct <unnamed-type-g_lighteditCommon>// Size=0xffc (Id=4805)
{
    unsigned char msgBuf[4092];// Offset=0x0 Size=0xffc
};

struct _XSESSION_INFO// Size=0x3c (Id=4806)
{
    struct XNKID sessionID;// Offset=0x0 Size=0x8
    struct XNADDR hostAddress;// Offset=0x8 Size=0x24
    struct XNKEY keyExchangeKey;// Offset=0x2c Size=0x10
};

struct netadr_t// Size=0xc (Id=4807)
{
    enum netadrtype_t type;// Offset=0x0 Size=0x4
    unsigned char ip[4];// Offset=0x4 Size=0x4
    unsigned short port;// Offset=0x8 Size=0x2
};

struct XNADDR// Size=0x24 (Id=4808)
{
    struct in_addr ina;// Offset=0x0 Size=0x4
    struct in_addr inaOnline;// Offset=0x4 Size=0x4
    unsigned short wPortOnline;// Offset=0x8 Size=0x2
    unsigned char abEnet[6];// Offset=0xa Size=0x6
    unsigned char abOnline[20];// Offset=0x10 Size=0x14
};

struct in_addr// Size=0x4 (Id=4809)
{
    union // Size=0x4 (Id=0)
    {
        union <unnamed-type-S_un>// Size=0x4 (Id=14256)
        {
            struct <unnamed-type-S_un_b>// Size=0x4 (Id=14257)
            {
                unsigned char s_b1;// Offset=0x0 Size=0x1
                unsigned char s_b2;// Offset=0x1 Size=0x1
                unsigned char s_b3;// Offset=0x2 Size=0x1
                unsigned char s_b4;// Offset=0x3 Size=0x1
            };
            struct in_addr::<unnamed-type-S_un>::<unnamed-type-S_un_b> S_un_b;// Offset=0x0 Size=0x4
            struct <unnamed-type-S_un_w>// Size=0x4 (Id=14263)
            {
                unsigned short s_w1;// Offset=0x0 Size=0x2
                unsigned short s_w2;// Offset=0x2 Size=0x2
            };
            struct in_addr::<unnamed-type-S_un>::<unnamed-type-S_un_w> S_un_w;// Offset=0x0 Size=0x4
            unsigned long S_addr;// Offset=0x0 Size=0x4
        };
        union in_addr::<unnamed-type-S_un> S_un;// Offset=0x0 Size=0x4
    };
};

struct SessionModSkillData// Size=0x98 (Id=4810)
{
    bool needsUpdate;// Offset=0x0 Size=0x1
    bool active;// Offset=0x1 Size=0x1
    unsigned char __align0[6];// Offset=0x2 Size=0x6
    unsigned long long playerList[18];// Offset=0x8 Size=0x90
};

struct SessionCalcSkillData// Size=0x1138 (Id=4811)
{
    bool needsUpdate;// Offset=0x0 Size=0x1
    bool active;// Offset=0x1 Size=0x1
    unsigned char __align0[6];// Offset=0x2 Size=0x6
    unsigned long long playerList[18];// Offset=0x8 Size=0x90
    unsigned char skillBuffer[4096];// Offset=0x98 Size=0x1000
    unsigned long bufferSize;// Offset=0x1098 Size=0x4
    struct _XUSER_STATS_SPEC spec;// Offset=0x109c Size=0x88
    unsigned char __align1[4];// Offset=0x1124 Size=0x4
    float mu;// Offset=0x1128 Size=0x8
    float sigma;// Offset=0x1130 Size=0x8
};

enum <unnamed-type-sessionTaskEnum>
{
    TASK_JOININGSESSION=1,
    TASK_CREATINGHOSTSESSION=2,
    TASK_STARTINGGAMESESSION=3,
    TASK_LEAVINGSESSION=4,
    TASK_DELETESESSIONHANDLE=5,
    TASK_FINDINGSESSIONNOPARAMS=6,
    TASK_MODIFYINGSESSION=7,
    TASK_MODIFYINGSKILL=8,
    TASK_CALCULATINGSKILL=9,
    NUM_SESSION_TASKS=10
};

struct lconv// Size=0x30 (Id=4813)
{
    char * decimal_point;// Offset=0x0 Size=0x4
    char * thousands_sep;// Offset=0x4 Size=0x4
    char * grouping;// Offset=0x8 Size=0x4
    char * int_curr_symbol;// Offset=0xc Size=0x4
    char * currency_symbol;// Offset=0x10 Size=0x4
    char * mon_decimal_point;// Offset=0x14 Size=0x4
    char * mon_thousands_sep;// Offset=0x18 Size=0x4
    char * mon_grouping;// Offset=0x1c Size=0x4
    char * positive_sign;// Offset=0x20 Size=0x4
    char * negative_sign;// Offset=0x24 Size=0x4
    char int_frac_digits;// Offset=0x28 Size=0x1
    char frac_digits;// Offset=0x29 Size=0x1
    char p_cs_precedes;// Offset=0x2a Size=0x1
    char p_sep_by_space;// Offset=0x2b Size=0x1
    char n_cs_precedes;// Offset=0x2c Size=0x1
    char n_sep_by_space;// Offset=0x2d Size=0x1
    char p_sign_posn;// Offset=0x2e Size=0x1
    char n_sign_posn;// Offset=0x2f Size=0x1
};

struct SessionLeaveData// Size=0x90 (Id=4814)
{
    unsigned long long playerList[18];// Offset=0x0 Size=0x90
};

struct SessionGraveYard// Size=0x6d0 (Id=4815)
{
    bool active;// Offset=0x0 Size=0x1
    unsigned char __align0[7];// Offset=0x1 Size=0x7
    struct SessionData sessionData;// Offset=0x8 Size=0x6c8
};

struct SessionJoinData// Size=0x10 (Id=4816)
{
    int privateSlot;// Offset=0x0 Size=0x4
    int slot;// Offset=0x4 Size=0x4
    unsigned long long player;// Offset=0x8 Size=0x8
};

struct SessionTaskData// Size=0x98 (Id=4817)
{
    bool active;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    struct SessionData * session;// Offset=0x4 Size=0x4
    union // Size=0x10 (Id=0)
    {
        struct SessionJoinData joinData;// Offset=0x8 Size=0x10
        struct SessionLeaveData leaveData;// Offset=0x8 Size=0x90
    };
};

enum LbAggType
{
    LBAGG_TYPE_MIN=0,
    LBAGG_TYPE_MAX=1,
    LBAGG_TYPE_SUM=2,
    LBAGG_TYPE_LAST=3,
    LBAGG_TYPE_COUNT=4
};

enum LbColType
{
    LBCOL_TYPE_NUMBER=0,
    LBCOL_TYPE_TIME=1,
    LBCOL_TYPE_LEVELXP=2,
    LBCOL_TYPE_PRESTIGE=3,
    LBCOL_TYPE_BIGNUMBER=4,
    LBCOL_TYPE_PERCENT=5,
    LBCOL_TYPE_COUNT=6
};

struct LbColumnDef// Size=0x20 (Id=4820)
{
    char * name;// Offset=0x0 Size=0x4
    int id;// Offset=0x4 Size=0x4
    int propertyId;// Offset=0x8 Size=0x4
    bool hidden;// Offset=0xc Size=0x1
    unsigned char __align0[3];// Offset=0xd Size=0x3
    char * statName;// Offset=0x10 Size=0x4
    enum LbColType type;// Offset=0x14 Size=0x4
    int precision;// Offset=0x18 Size=0x4
    enum LbAggType agg;// Offset=0x1c Size=0x4
};

struct LeaderboardDef// Size=0x18 (Id=4821)
{
    char * name;// Offset=0x0 Size=0x4
    int id;// Offset=0x4 Size=0x4
    int columnCount;// Offset=0x8 Size=0x4
    int xpColId;// Offset=0xc Size=0x4
    int prestigeColId;// Offset=0x10 Size=0x4
    struct LbColumnDef * columns;// Offset=0x14 Size=0x4
};

enum LbFilter
{
    LB_FILTER_NONE=0,
    LB_FILTER_FRIENDS=1,
    LB_FILTER_COUNT=2
};

enum rankTableColumns_t
{
    MP_RANKTABLE_RANKID=0,
    MP_RANKTABLE_RANK=1,
    MP_RANKTABLE_MINXP=2,
    MP_RANKTABLE_XPTONEXT=3,
    MP_RANKTABLE_SHORTRANK=4,
    MP_RANKTABLE_FULLRANK=5,
    MP_RANKTABLE_ICON=6,
    MP_RANKTABLE_MAXXP=7,
    MP_RANKTABLE_WEAPUNLOCK=8,
    MP_RANKTABLE_PERKUNLOCK=9,
    MP_RANKTABLE_CHALLENGE=10,
    MP_RANKTABLE_CAMO=11,
    MP_RANKTABLE_ATTACHMENT=12,
    MP_RANKTABLE_LEVEL=13,
    MP_RANKTABLE_DISPLAYLEVEL=14,
    MP_RANKTABLE_COUNT=15
};

struct LbGlob// Size=0xd890 (Id=4824)
{
    struct OverlappedTaskSet tasks;// Offset=0x0 Size=0x1008
    struct Leaderboard leaderboard;// Offset=0x1008 Size=0x6420
    char feederText[32];// Offset=0x7428 Size=0x20
    struct LeaderboardDef * writeLeaderboards[5];// Offset=0x7448 Size=0x14
    int writeCount;// Offset=0x745c Size=0x4
    struct LbFriends friends;// Offset=0x7460 Size=0x4fc8
    struct _XUSER_STATS_SPEC spec;// Offset=0xc428 Size=0x88
    struct LbPlayerStat playerStats[4];// Offset=0xc4b0 Size=0x13e0
};

struct LbFriends// Size=0x4fc8 (Id=4825)
{
    struct _XONLINE_FRIEND xfriends[100];// Offset=0x0 Size=0x4c90
    unsigned long size;// Offset=0x4c90 Size=0x4
    unsigned char __align0[4];// Offset=0x4c94 Size=0x4
    unsigned long long xuids[101];// Offset=0x4c98 Size=0x328
    unsigned long numXuids;// Offset=0x4fc0 Size=0x4
    void * enumHandle;// Offset=0x4fc4 Size=0x4
};

struct LbPlayerStat// Size=0x4f8 (Id=4826)
{
    unsigned long long xuid;// Offset=0x0 Size=0x8
    struct _XUSER_PROPERTY props[50];// Offset=0x8 Size=0x4b0
    struct _XSESSION_VIEW_PROPERTIES views[5];// Offset=0x4b8 Size=0x3c
};

struct Leaderboard// Size=0x6420 (Id=4827)
{
    unsigned char userStats[25600];// Offset=0x0 Size=0x6400
    unsigned long size;// Offset=0x6400 Size=0x4
    void * enumHandle;// Offset=0x6404 Size=0x4
    struct LeaderboardDef * lbDef;// Offset=0x6408 Size=0x4
    int offset;// Offset=0x640c Size=0x4
    int curIdx;// Offset=0x6410 Size=0x4
    bool forceRefresh;// Offset=0x6414 Size=0x1
    bool isUpdating;// Offset=0x6415 Size=0x1
    bool notSameFilter;// Offset=0x6416 Size=0x1
    unsigned char __align0[1];// Offset=0x6417 Size=0x1
    int lastUpdate;// Offset=0x6418 Size=0x4
    int filter;// Offset=0x641c Size=0x4
};

enum printParm_t
{
    PRINT_ALL=0,
    PRINT_DEVELOPER=1,
    PRINT_WARNING=2,
    PRINT_ERROR=3
};

enum VehicleWheelType
{
    FL_WHEEL=0,
    FR_WHEEL=1,
    BL_WHEEL=2,
    BR_WHEEL=3,
    ML_WHEEL=4,
    MR_WHEEL=5,
    NUM_VEHICLE_WHEELS=6
};

struct VehicleTrackObstacle// Size=0xc (Id=4830)
{
    float origin[2];// Offset=0x0 Size=0x8
    float radius;// Offset=0x8 Size=0x4
};

struct VehicleTrackSector// Size=0x3c (Id=4831)
{
    float startEdgeDir[2];// Offset=0x0 Size=0x8
    float startEdgeDist;// Offset=0x8 Size=0x4
    float leftEdgeDir[2];// Offset=0xc Size=0x8
    float leftEdgeDist;// Offset=0x14 Size=0x4
    float rightEdgeDir[2];// Offset=0x18 Size=0x8
    float rightEdgeDist;// Offset=0x20 Size=0x4
    float sectorLength;// Offset=0x24 Size=0x4
    float sectorWidth;// Offset=0x28 Size=0x4
    float totalPriorLength;// Offset=0x2c Size=0x4
    float totalFollowingLength;// Offset=0x30 Size=0x4
    struct VehicleTrackObstacle * obstacles;// Offset=0x34 Size=0x4
    unsigned int obstacleCount;// Offset=0x38 Size=0x4
};

struct VehicleTrackSegment// Size=0x2c (Id=4832)
{
    char * targetName;// Offset=0x0 Size=0x4
    struct VehicleTrackSector * sectors;// Offset=0x4 Size=0x4
    unsigned int sectorCount;// Offset=0x8 Size=0x4
    struct VehicleTrackSegment ** nextBranches;// Offset=0xc Size=0x4
    unsigned int nextBranchesCount;// Offset=0x10 Size=0x4
    struct VehicleTrackSegment ** prevBranches;// Offset=0x14 Size=0x4
    unsigned int prevBranchesCount;// Offset=0x18 Size=0x4
    float endEdgeDir[2];// Offset=0x1c Size=0x8
    float endEdgeDist;// Offset=0x24 Size=0x4
    float totalLength;// Offset=0x28 Size=0x4
};

struct VehicleTrackSegment// Size=0x2c (Id=4833)
{
    char * targetName;// Offset=0x0 Size=0x4
    struct VehicleTrackSector * sectors;// Offset=0x4 Size=0x4
    unsigned int sectorCount;// Offset=0x8 Size=0x4
    struct VehicleTrackSegment ** nextBranches;// Offset=0xc Size=0x4
    unsigned int nextBranchesCount;// Offset=0x10 Size=0x4
    struct VehicleTrackSegment ** prevBranches;// Offset=0x14 Size=0x4
    unsigned int prevBranchesCount;// Offset=0x18 Size=0x4
    float endEdgeDir[2];// Offset=0x1c Size=0x8
    float endEdgeDist;// Offset=0x24 Size=0x4
    float totalLength;// Offset=0x28 Size=0x4
};

struct VehiclePathPos// Size=0xbc (Id=4834)
{
    short nodeIdx;// Offset=0x0 Size=0x2
    short flags;// Offset=0x2 Size=0x2
    float frac;// Offset=0x4 Size=0x4
    float speed;// Offset=0x8 Size=0x4
    float lookAhead;// Offset=0xc Size=0x4
    float origin[3];// Offset=0x10 Size=0xc
    float angles[3];// Offset=0x1c Size=0xc
    float lookPos[3];// Offset=0x28 Size=0xc
    struct VehiclePathNode switchNode[2];// Offset=0x34 Size=0x88
};

struct VehicleJitter// Size=0x3c (Id=4835)
{
    int jitterPeriodMin;// Offset=0x0 Size=0x4
    int jitterPeriodMax;// Offset=0x4 Size=0x4
    int jitterEndTime;// Offset=0x8 Size=0x4
    float jitterOffsetRange[3];// Offset=0xc Size=0xc
    float jitterDeltaAccel[3];// Offset=0x18 Size=0xc
    float jitterAccel[3];// Offset=0x24 Size=0xc
    float jitterPos[3];// Offset=0x30 Size=0xc
};

struct VehicleTrackpos// Size=0x8 (Id=4836)
{
    struct VehicleTrackSegment * segment;// Offset=0x0 Size=0x4
    unsigned int sectorIndex;// Offset=0x4 Size=0x4
};

struct vehicle_physic_t// Size=0x138 (Id=4837)
{
    float origin[3];// Offset=0x0 Size=0xc
    float prevOrigin[3];// Offset=0xc Size=0xc
    float angles[3];// Offset=0x18 Size=0xc
    float prevAngles[3];// Offset=0x24 Size=0xc
    float maxAngleVel[3];// Offset=0x30 Size=0xc
    float yawAccel;// Offset=0x3c Size=0x4
    float yawDecel;// Offset=0x40 Size=0x4
    struct Bounds bounds;// Offset=0x44 Size=0x18
    float vel[3];// Offset=0x5c Size=0xc
    float bodyVel[3];// Offset=0x68 Size=0xc
    float accel[3];// Offset=0x74 Size=0xc
    float bodyAccel[3];// Offset=0x80 Size=0xc
    float rotVel[3];// Offset=0x8c Size=0xc
    float bodyPitchVel;// Offset=0x98 Size=0x4
    float bodyRollVel;// Offset=0x9c Size=0x4
    float maxPitchAngle;// Offset=0xa0 Size=0x4
    float maxRollAngle;// Offset=0xa4 Size=0x4
    float wheelZVel[6];// Offset=0xa8 Size=0x18
    float wheelZPos[6];// Offset=0xc0 Size=0x18
    int wheelSurfType[6];// Offset=0xd8 Size=0x18
    float wheelCompression[6];// Offset=0xf0 Size=0x18
    float wheelPrevCompression[6];// Offset=0x108 Size=0x18
    float worldTilt[3];// Offset=0x120 Size=0xc
    float worldTiltVel[3];// Offset=0x12c Size=0xc
};

struct VehicleTurret// Size=0x14 (Id=4838)
{
    int fireTime;// Offset=0x0 Size=0x4
    int fireBarrel;// Offset=0x4 Size=0x4
    float barrelOffset;// Offset=0x8 Size=0x4
    int barrelBlocked;// Offset=0xc Size=0x4
    bool turretMoving;// Offset=0x10 Size=0x1
};

struct VehiclePathNode// Size=0x44 (Id=4839)
{
    unsigned short name;// Offset=0x0 Size=0x2
    unsigned short target;// Offset=0x2 Size=0x2
    unsigned short script_linkname;// Offset=0x4 Size=0x2
    unsigned short script_noteworthy;// Offset=0x6 Size=0x2
    short index;// Offset=0x8 Size=0x2
    short flags;// Offset=0xa Size=0x2
    float speed;// Offset=0xc Size=0x4
    float lookAhead;// Offset=0x10 Size=0x4
    float origin[3];// Offset=0x14 Size=0xc
    float dir[3];// Offset=0x20 Size=0xc
    float angles[3];// Offset=0x2c Size=0xc
    float length;// Offset=0x38 Size=0x4
    short nextIdx;// Offset=0x3c Size=0x2
    short prevIdx;// Offset=0x3e Size=0x2
    short notifyIdx;// Offset=0x40 Size=0x2
};

enum VehicleDrivingState
{
    VEH_DRIVE_NONE=0,
    VEH_DRIVE_PATH_CONSTRAINED=1,
    VEH_DRIVE_PATH_FOLLOW=2,
    VEH_DRIVE_TRACK=3,
    VEH_DRIVE_AI=4,
    VEH_DRIVE_PLAYER=5
};

enum VehicleTransmission
{
    VEH_TRANS_FORWARD=0,
    VEH_TRANS_REVERSE=1
};

enum VehiclePathDir
{
    VEH_PATH_FORWARD=0,
    VEH_PATH_REVERSE=1
};

enum VehicleMoveState
{
    VEH_MOVESTATE_STOP=0,
    VEH_MOVESTATE_MOVE=1,
    VEH_MOVESTATE_HOVER=2
};

enum VehicleCameraState
{
    VEH_CAMERA_DEFAULT=0,
    VEH_CAMERA_DELAYED=1,
    VEH_CAMERA_CHANGED=2
};

enum VehicleManualMode
{
    VEH_MANUAL_OFF=0,
    VEH_MANUAL_ON=1,
    VEH_MANUAL_TRANS=2
};

enum VehicleRotateToMode
{
    VEH_ROTATE_TO_OFF=0,
    VEH_ROTATE_TO_ACCEL=1,
    VEH_ROTATE_TO_DECEL=2
};

enum VehiclePathType
{
    VEH_PATH_FOLLOW=0,
    VEH_PATH_CONSTRAINED=1
};

struct Vehicle// Size=0x3cc (Id=4848)
{
    struct gentity_s * ent;// Offset=0x0 Size=0x4
    struct LerpEntityStateVehicle * lerp;// Offset=0x4 Size=0x4
    enum VehicleDrivingState drivingState;// Offset=0x8 Size=0x4
    enum VehicleTransmission transMode;// Offset=0xc Size=0x4
    struct VehiclePathPos pathPos;// Offset=0x10 Size=0xbc
    enum VehiclePathDir pathDir;// Offset=0xcc Size=0x4
    struct VehicleTrackpos trackPos;// Offset=0xd0 Size=0x8
    struct vehicle_physic_t phys;// Offset=0xd8 Size=0x138
    struct PhysVehicle * physVeh;// Offset=0x210 Size=0x4
    struct PhysVehicleControl physVehCtrl;// Offset=0x214 Size=0x18
    int boostTime;// Offset=0x22c Size=0x4
    int defIndex;// Offset=0x230 Size=0x4
    int team;// Offset=0x234 Size=0x4
    int useHintStringIndex;// Offset=0x238 Size=0x4
    enum VehicleMoveState moveState;// Offset=0x23c Size=0x4
    float speed;// Offset=0x240 Size=0x4
    float pathSpeed;// Offset=0x244 Size=0x4
    short waitNode;// Offset=0x248 Size=0x2
    unsigned char __align0[2];// Offset=0x24a Size=0x2
    float waitSpeed;// Offset=0x24c Size=0x4
    struct VehicleTurret turret;// Offset=0x250 Size=0x14
    struct VehicleJitter jitter;// Offset=0x264 Size=0x3c
    struct VehicleHover hover;// Offset=0x2a0 Size=0x1c
    struct VehicleBoat boat;// Offset=0x2bc Size=0xc
    enum VehicleCameraState cameraState;// Offset=0x2c8 Size=0x4
    unsigned short lookAtText0;// Offset=0x2cc Size=0x2
    unsigned short lookAtText1;// Offset=0x2ce Size=0x2
    enum VehicleManualMode manualMode;// Offset=0x2d0 Size=0x4
    float manualSpeed;// Offset=0x2d4 Size=0x4
    float manualAccel;// Offset=0x2d8 Size=0x4
    float manualDecel;// Offset=0x2dc Size=0x4
    float manualTime;// Offset=0x2e0 Size=0x4
    enum VehicleRotateToMode rotateToYawMode;// Offset=0x2e4 Size=0x4
    float rotateToYaw;// Offset=0x2e8 Size=0x4
    float rotateToYawAccel;// Offset=0x2ec Size=0x4
    float maxDragSpeed;// Offset=0x2f0 Size=0x4
    float turningAbility;// Offset=0x2f4 Size=0x4
    int hasTarget;// Offset=0x2f8 Size=0x4
    int hasTargetYaw;// Offset=0x2fc Size=0x4
    int hasGoalYaw;// Offset=0x300 Size=0x4
    int stopAtGoal;// Offset=0x304 Size=0x4
    int stopping;// Offset=0x308 Size=0x4
    int targetEnt;// Offset=0x30c Size=0x4
    class EntHandle lookAtEnt;// Offset=0x310 Size=0x4
    float targetOrigin[3];// Offset=0x314 Size=0xc
    float targetOffset[3];// Offset=0x320 Size=0xc
    float targetYaw;// Offset=0x32c Size=0x4
    float goalPosition[3];// Offset=0x330 Size=0xc
    float goalYaw;// Offset=0x33c Size=0x4
    float prevGoalYaw;// Offset=0x340 Size=0x4
    float yawOverShoot;// Offset=0x344 Size=0x4
    int yawSlowDown;// Offset=0x348 Size=0x4
    float nearGoalNotifyDist;// Offset=0x34c Size=0x4
    float joltDir[2];// Offset=0x350 Size=0x8
    float joltTime;// Offset=0x358 Size=0x4
    float joltWave;// Offset=0x35c Size=0x4
    float joltSpeed;// Offset=0x360 Size=0x4
    float joltDecel;// Offset=0x364 Size=0x4
    float throttle;// Offset=0x368 Size=0x4
    float brake;// Offset=0x36c Size=0x4
    float impactSpeed;// Offset=0x370 Size=0x4
    struct VehicleTags boneIndex;// Offset=0x374 Size=0x48
    int turretHitNum;// Offset=0x3bc Size=0x4
    unsigned int trophyAmmo;// Offset=0x3c0 Size=0x4
    int trophyReloadEndTime;// Offset=0x3c4 Size=0x4
    enum VehiclePathType pathType;// Offset=0x3c8 Size=0x4
};

struct VehicleHover// Size=0x1c (Id=4849)
{
    float hoverRadius;// Offset=0x0 Size=0x4
    float hoverSpeed;// Offset=0x4 Size=0x4
    float hoverAccel;// Offset=0x8 Size=0x4
    float hoverGoalPos[3];// Offset=0xc Size=0xc
    int useHoverAccelForAngles;// Offset=0x18 Size=0x4
};

struct PhysVehicleControl// Size=0x18 (Id=4850)
{
    float steering;// Offset=0x0 Size=0x4
    float desiredSpeed;// Offset=0x4 Size=0x4
    float desiredSpeedReverse;// Offset=0x8 Size=0x4
    float accelOverride;// Offset=0xc Size=0x4
    float brake;// Offset=0x10 Size=0x4
    float pitch;// Offset=0x14 Size=0x4
};

struct VehicleBoat// Size=0xc (Id=4851)
{
    float rockingDirYaw;// Offset=0x0 Size=0x4
    float bounceCurrentForce;// Offset=0x4 Size=0x4
    float bouncePeakForce;// Offset=0x8 Size=0x4
};

struct VehicleTags// Size=0x48 (Id=4852)
{
    int player;// Offset=0x0 Size=0x4
    int detach;// Offset=0x4 Size=0x4
    int popout;// Offset=0x8 Size=0x4
    int body;// Offset=0xc Size=0x4
    int turret;// Offset=0x10 Size=0x4
    int turret_base;// Offset=0x14 Size=0x4
    int barrel;// Offset=0x18 Size=0x4
    int flash[5];// Offset=0x1c Size=0x14
    int wheel[6];// Offset=0x30 Size=0x18
};

struct scr_const_t// Size=0x1fe (Id=4853)
{
    unsigned short _;// Offset=0x0 Size=0x2
    unsigned short active;// Offset=0x2 Size=0x2
    unsigned short aim_bone;// Offset=0x4 Size=0x2
    unsigned short aim_highest_bone;// Offset=0x6 Size=0x2
    unsigned short aim_vis_bone;// Offset=0x8 Size=0x2
    unsigned short all;// Offset=0xa Size=0x2
    unsigned short allies;// Offset=0xc Size=0x2
    unsigned short angles;// Offset=0xe Size=0x2
    unsigned short auto_ai;// Offset=0x10 Size=0x2
    unsigned short auto_nonai;// Offset=0x12 Size=0x2
    unsigned short axis;// Offset=0x14 Size=0x2
    unsigned short back;// Offset=0x16 Size=0x2
    unsigned short bad_guys;// Offset=0x18 Size=0x2
    unsigned short bad_path;// Offset=0x1a Size=0x2
    unsigned short begin_firing;// Offset=0x1c Size=0x2
    unsigned short begin_firing_left;// Offset=0x1e Size=0x2
    unsigned short cancel_location;// Offset=0x20 Size=0x2
    unsigned short chest;// Offset=0x22 Size=0x2
    unsigned short confirm_location;// Offset=0x24 Size=0x2
    unsigned short crouch;// Offset=0x26 Size=0x2
    unsigned short current;// Offset=0x28 Size=0x2
    unsigned short damage;// Offset=0x2a Size=0x2
    unsigned short dead;// Offset=0x2c Size=0x2
    unsigned short death;// Offset=0x2e Size=0x2
    unsigned short deathshield;// Offset=0x30 Size=0x2
    unsigned short detonate;// Offset=0x32 Size=0x2
    unsigned short direct;// Offset=0x34 Size=0x2
    unsigned short dlight;// Offset=0x36 Size=0x2
    unsigned short done;// Offset=0x38 Size=0x2
    unsigned short empty;// Offset=0x3a Size=0x2
    unsigned short empty_offhand;// Offset=0x3c Size=0x2
    unsigned short end_firing;// Offset=0x3e Size=0x2
    unsigned short end_firing_left;// Offset=0x40 Size=0x2
    unsigned short entity;// Offset=0x42 Size=0x2
    unsigned short explode;// Offset=0x44 Size=0x2
    unsigned short failed;// Offset=0x46 Size=0x2
    unsigned short first_person;// Offset=0x48 Size=0x2
    unsigned short forward;// Offset=0x4a Size=0x2
    unsigned short fraction;// Offset=0x4c Size=0x2
    unsigned short free;// Offset=0x4e Size=0x2
    unsigned short goal;// Offset=0x50 Size=0x2
    unsigned short goal_changed;// Offset=0x52 Size=0x2
    unsigned short goal_yaw;// Offset=0x54 Size=0x2
    unsigned short grenade;// Offset=0x56 Size=0x2
    unsigned short grenadedanger;// Offset=0x58 Size=0x2
    unsigned short grenade_fire;// Offset=0x5a Size=0x2
    unsigned short glass_destroyed;// Offset=0x5c Size=0x2
    unsigned short missile_fire;// Offset=0x5e Size=0x2
    unsigned short grenade_pullback;// Offset=0x60 Size=0x2
    unsigned short missile_stuck;// Offset=0x62 Size=0x2
    unsigned short info_notnull;// Offset=0x64 Size=0x2
    unsigned short invisible;// Offset=0x66 Size=0x2
    unsigned short key1;// Offset=0x68 Size=0x2
    unsigned short key2;// Offset=0x6a Size=0x2
    unsigned short killanimscript;// Offset=0x6c Size=0x2
    unsigned short left;// Offset=0x6e Size=0x2
    unsigned short light;// Offset=0x70 Size=0x2
    unsigned short manual;// Offset=0x72 Size=0x2
    unsigned short manual_ai;// Offset=0x74 Size=0x2
    unsigned short movedone;// Offset=0x76 Size=0x2
    unsigned short none;// Offset=0x78 Size=0x2
    unsigned short normal;// Offset=0x7a Size=0x2
    unsigned short origin;// Offset=0x7c Size=0x2
    unsigned short other;// Offset=0x7e Size=0x2
    unsigned short player;// Offset=0x80 Size=0x2
    unsigned short physics_finished;// Offset=0x82 Size=0x2
    unsigned short position;// Offset=0x84 Size=0x2
    unsigned short projectile_impact;// Offset=0x86 Size=0x2
    unsigned short prone;// Offset=0x88 Size=0x2
    unsigned short right;// Offset=0x8a Size=0x2
    unsigned short reload;// Offset=0x8c Size=0x2
    unsigned short reload_start;// Offset=0x8e Size=0x2
    unsigned short result;// Offset=0x90 Size=0x2
    unsigned short reverse;// Offset=0x92 Size=0x2
    unsigned short rocket;// Offset=0x94 Size=0x2
    unsigned short rotatedone;// Offset=0x96 Size=0x2
    unsigned short script_brushmodel;// Offset=0x98 Size=0x2
    unsigned short script_model;// Offset=0x9a Size=0x2
    unsigned short script_origin;// Offset=0x9c Size=0x2
    unsigned short sentry;// Offset=0x9e Size=0x2
    unsigned short sentry_offline;// Offset=0xa0 Size=0x2
    unsigned short snd_enveffectsprio_level;// Offset=0xa2 Size=0x2
    unsigned short snd_enveffectsprio_shellshock;// Offset=0xa4 Size=0x2
    unsigned short snd_channelvolprio_holdbreath;// Offset=0xa6 Size=0x2
    unsigned short snd_channelvolprio_pain;// Offset=0xa8 Size=0x2
    unsigned short snd_channelvolprio_shellshock;// Offset=0xaa Size=0x2
    unsigned short spawned;// Offset=0xac Size=0x2
    unsigned short stand;// Offset=0xae Size=0x2
    unsigned short suppression;// Offset=0xb0 Size=0x2
    unsigned short suppression_end;// Offset=0xb2 Size=0x2
    unsigned short surfacetype;// Offset=0xb4 Size=0x2
    unsigned short tag_aim;// Offset=0xb6 Size=0x2
    unsigned short tag_aim_animated;// Offset=0xb8 Size=0x2
    unsigned short tag_aim_pivot;// Offset=0xba Size=0x2
    unsigned short tag_brass;// Offset=0xbc Size=0x2
    unsigned short tag_butt;// Offset=0xbe Size=0x2
    unsigned short tag_clip;// Offset=0xc0 Size=0x2
    unsigned short tag_eye;// Offset=0xc2 Size=0x2
    unsigned short tag_flash;// Offset=0xc4 Size=0x2
    unsigned short tag_flash_silenced;// Offset=0xc6 Size=0x2
    unsigned short tag_flash_11;// Offset=0xc8 Size=0x2
    unsigned short tag_flash_2;// Offset=0xca Size=0x2
    unsigned short tag_flash_22;// Offset=0xcc Size=0x2
    unsigned short tag_flash_3;// Offset=0xce Size=0x2
    unsigned short tag_fx;// Offset=0xd0 Size=0x2
    unsigned short tag_inhand;// Offset=0xd2 Size=0x2
    unsigned short tag_knife_fx;// Offset=0xd4 Size=0x2
    unsigned short tag_laser;// Offset=0xd6 Size=0x2
    unsigned short tag_origin;// Offset=0xd8 Size=0x2
    unsigned short tag_weapon;// Offset=0xda Size=0x2
    unsigned short tag_player;// Offset=0xdc Size=0x2
    unsigned short tag_camera;// Offset=0xde Size=0x2
    unsigned short tag_weapon_left;// Offset=0xe0 Size=0x2
    unsigned short tag_weapon_right;// Offset=0xe2 Size=0x2
    unsigned short tag_weapon_chest;// Offset=0xe4 Size=0x2
    unsigned short tag_stowed_back;// Offset=0xe6 Size=0x2
    unsigned short tag_gasmask;// Offset=0xe8 Size=0x2
    unsigned short tag_gasmask2;// Offset=0xea Size=0x2
    unsigned short tag_sync;// Offset=0xec Size=0x2
    unsigned short tag_motion_tracker_tl;// Offset=0xee Size=0x2
    unsigned short tag_motion_tracker_bl;// Offset=0xf0 Size=0x2
    unsigned short tag_motion_tracker_br;// Offset=0xf2 Size=0x2
    unsigned short tag_motion_tracker_fx;// Offset=0xf4 Size=0x2
    unsigned short tag_reticle_acog;// Offset=0xf6 Size=0x2
    unsigned short tag_reticle_red_dot;// Offset=0xf8 Size=0x2
    unsigned short tag_reticle_tavor_scope;// Offset=0xfa Size=0x2
    unsigned short tag_reticle_thermal_scope;// Offset=0xfc Size=0x2
    unsigned short tag_eotech_reticle;// Offset=0xfe Size=0x2
    unsigned short target_script_trigger;// Offset=0x100 Size=0x2
    unsigned short third_person;// Offset=0x102 Size=0x2
    unsigned short top;// Offset=0x104 Size=0x2
    unsigned short touch;// Offset=0x106 Size=0x2
    unsigned short trigger;// Offset=0x108 Size=0x2
    unsigned short trigger_use;// Offset=0x10a Size=0x2
    unsigned short trigger_use_touch;// Offset=0x10c Size=0x2
    unsigned short trigger_damage;// Offset=0x10e Size=0x2
    unsigned short truck_cam;// Offset=0x110 Size=0x2
    unsigned short weapon_change;// Offset=0x112 Size=0x2
    unsigned short weapon_fired;// Offset=0x114 Size=0x2
    unsigned short weapon_switch_started;// Offset=0x116 Size=0x2
    unsigned short weapon_taken;// Offset=0x118 Size=0x2
    unsigned short weapon_dropped;// Offset=0x11a Size=0x2
    unsigned short worldspawn;// Offset=0x11c Size=0x2
    unsigned short flashbang;// Offset=0x11e Size=0x2
    unsigned short flash;// Offset=0x120 Size=0x2
    unsigned short smoke;// Offset=0x122 Size=0x2
    unsigned short frag;// Offset=0x124 Size=0x2
    unsigned short throwingknife;// Offset=0x126 Size=0x2
    unsigned short night_vision_on;// Offset=0x128 Size=0x2
    unsigned short night_vision_off;// Offset=0x12a Size=0x2
    unsigned short mod_unknown;// Offset=0x12c Size=0x2
    unsigned short mod_pistol_bullet;// Offset=0x12e Size=0x2
    unsigned short mod_rifle_bullet;// Offset=0x130 Size=0x2
    unsigned short mod_explosive_bullet;// Offset=0x132 Size=0x2
    unsigned short mod_grenade;// Offset=0x134 Size=0x2
    unsigned short mod_grenade_splash;// Offset=0x136 Size=0x2
    unsigned short mod_projectile;// Offset=0x138 Size=0x2
    unsigned short mod_projectile_splash;// Offset=0x13a Size=0x2
    unsigned short mod_melee;// Offset=0x13c Size=0x2
    unsigned short mod_head_shot;// Offset=0x13e Size=0x2
    unsigned short mod_crush;// Offset=0x140 Size=0x2
    unsigned short mod_falling;// Offset=0x142 Size=0x2
    unsigned short mod_suicide;// Offset=0x144 Size=0x2
    unsigned short mod_trigger_hurt;// Offset=0x146 Size=0x2
    unsigned short mod_explosive;// Offset=0x148 Size=0x2
    unsigned short mod_impact;// Offset=0x14a Size=0x2
    unsigned short script_vehicle;// Offset=0x14c Size=0x2
    unsigned short script_vehicle_collision;// Offset=0x14e Size=0x2
    unsigned short script_vehicle_collmap;// Offset=0x150 Size=0x2
    unsigned short script_vehicle_corpse;// Offset=0x152 Size=0x2
    unsigned short turret_deactivate;// Offset=0x154 Size=0x2
    unsigned short turret_fire;// Offset=0x156 Size=0x2
    unsigned short turret_no_vis;// Offset=0x158 Size=0x2
    unsigned short turret_not_on_target;// Offset=0x15a Size=0x2
    unsigned short turret_on_target;// Offset=0x15c Size=0x2
    unsigned short turret_on_vistarget;// Offset=0x15e Size=0x2
    unsigned short turret_pitch_clamped;// Offset=0x160 Size=0x2
    unsigned short turret_rotate_stopped;// Offset=0x162 Size=0x2
    unsigned short turret_yaw_clamped;// Offset=0x164 Size=0x2
    unsigned short turretstatechange;// Offset=0x166 Size=0x2
    unsigned short turretownerchange;// Offset=0x168 Size=0x2
    unsigned short reached_end_node;// Offset=0x16a Size=0x2
    unsigned short reached_wait_node;// Offset=0x16c Size=0x2
    unsigned short reached_wait_speed;// Offset=0x16e Size=0x2
    unsigned short near_goal;// Offset=0x170 Size=0x2
    unsigned short tag_wheel_front_left;// Offset=0x172 Size=0x2
    unsigned short tag_wheel_front_right;// Offset=0x174 Size=0x2
    unsigned short tag_wheel_back_left;// Offset=0x176 Size=0x2
    unsigned short tag_wheel_back_right;// Offset=0x178 Size=0x2
    unsigned short tag_wheel_middle_left;// Offset=0x17a Size=0x2
    unsigned short tag_wheel_middle_right;// Offset=0x17c Size=0x2
    unsigned short tag_detach;// Offset=0x17e Size=0x2
    unsigned short tag_popout;// Offset=0x180 Size=0x2
    unsigned short tag_body;// Offset=0x182 Size=0x2
    unsigned short tag_turret;// Offset=0x184 Size=0x2
    unsigned short tag_turret_base;// Offset=0x186 Size=0x2
    unsigned short tag_barrel;// Offset=0x188 Size=0x2
    unsigned short front_left;// Offset=0x18a Size=0x2
    unsigned short front_right;// Offset=0x18c Size=0x2
    unsigned short back_left;// Offset=0x18e Size=0x2
    unsigned short back_right;// Offset=0x190 Size=0x2
    unsigned short middle_left;// Offset=0x192 Size=0x2
    unsigned short middle_right;// Offset=0x194 Size=0x2
    unsigned short veh_boatbounce;// Offset=0x196 Size=0x2
    unsigned short veh_collision;// Offset=0x198 Size=0x2
    unsigned short veh_predictedcollision;// Offset=0x19a Size=0x2
    unsigned short veh_leftground;// Offset=0x19c Size=0x2
    unsigned short veh_landed;// Offset=0x19e Size=0x2
    unsigned short veh_jolt;// Offset=0x1a0 Size=0x2
    unsigned short vehicle_mount;// Offset=0x1a2 Size=0x2
    unsigned short vehicle_dismount;// Offset=0x1a4 Size=0x2
    unsigned short constrained;// Offset=0x1a6 Size=0x2
    unsigned short follow;// Offset=0x1a8 Size=0x2
    unsigned short j_head;// Offset=0x1aa Size=0x2
    unsigned short j_neck;// Offset=0x1ac Size=0x2
    unsigned short thermal;// Offset=0x1ae Size=0x2
    unsigned short primary;// Offset=0x1b0 Size=0x2
    unsigned short offhand;// Offset=0x1b2 Size=0x2
    unsigned short item;// Offset=0x1b4 Size=0x2
    unsigned short altmode;// Offset=0x1b6 Size=0x2
    unsigned short exclusive;// Offset=0x1b8 Size=0x2
    unsigned short scavenger;// Offset=0x1ba Size=0x2
    unsigned short primaryoffhand;// Offset=0x1bc Size=0x2
    unsigned short secondaryoffhand;// Offset=0x1be Size=0x2
    unsigned short actionslot1;// Offset=0x1c0 Size=0x2
    unsigned short actionslot2;// Offset=0x1c2 Size=0x2
    unsigned short actionslot3;// Offset=0x1c4 Size=0x2
    unsigned short actionslot4;// Offset=0x1c6 Size=0x2
    unsigned short back_low;// Offset=0x1c8 Size=0x2
    unsigned short back_mid;// Offset=0x1ca Size=0x2
    unsigned short back_up;// Offset=0x1cc Size=0x2
    unsigned short pelvis;// Offset=0x1ce Size=0x2
    unsigned short auto_change;// Offset=0x1d0 Size=0x2
    unsigned short begin;// Offset=0x1d2 Size=0x2
    unsigned short call_vote;// Offset=0x1d4 Size=0x2
    unsigned short freelook;// Offset=0x1d6 Size=0x2
    unsigned short intermission;// Offset=0x1d8 Size=0x2
    unsigned short j_mainroot;// Offset=0x1da Size=0x2
    unsigned short manual_change;// Offset=0x1dc Size=0x2
    unsigned short menuresponse;// Offset=0x1de Size=0x2
    unsigned short pistol;// Offset=0x1e0 Size=0x2
    unsigned short plane_waypoint;// Offset=0x1e2 Size=0x2
    unsigned short playing;// Offset=0x1e4 Size=0x2
    unsigned short spectator;// Offset=0x1e6 Size=0x2
    unsigned short spectating_cycle;// Offset=0x1e8 Size=0x2
    unsigned short vote;// Offset=0x1ea Size=0x2
    unsigned short sprint_begin;// Offset=0x1ec Size=0x2
    unsigned short sprint_end;// Offset=0x1ee Size=0x2
    unsigned short normal_radar;// Offset=0x1f0 Size=0x2
    unsigned short fast_radar;// Offset=0x1f2 Size=0x2
    unsigned short host_sucks_end_game;// Offset=0x1f4 Size=0x2
    unsigned short tag_engine_left;// Offset=0x1f6 Size=0x2
    unsigned short tag_engine_right;// Offset=0x1f8 Size=0x2
    unsigned short slowmo_active;// Offset=0x1fa Size=0x2
    unsigned short slowmo_passive;// Offset=0x1fc Size=0x2
};

enum entityType_t
{
    ET_GENERAL=0,
    ET_PLAYER=1,
    ET_PLAYER_CORPSE=2,
    ET_ITEM=3,
    ET_MISSILE=4,
    ET_INVISIBLE=5,
    ET_SCRIPTMOVER=6,
    ET_SOUND_BLEND=7,
    ET_FX=8,
    ET_LOOP_FX=9,
    ET_PRIMARY_LIGHT=10,
    ET_TURRET=11,
    ET_HELICOPTER=12,
    ET_PLANE=13,
    ET_VEHICLE=14,
    ET_VEHICLE_COLLMAP=15,
    ET_VEHICLE_CORPSE=16,
    ET_VEHICLE_SPAWNER=17,
    ET_EVENTS=18
};

struct PhysPreset// Size=0x2c (Id=4855)
{
    char * name;// Offset=0x0 Size=0x4
    int type;// Offset=0x4 Size=0x4
    float mass;// Offset=0x8 Size=0x4
    float bounce;// Offset=0xc Size=0x4
    float friction;// Offset=0x10 Size=0x4
    float bulletForceScale;// Offset=0x14 Size=0x4
    float explosiveForceScale;// Offset=0x18 Size=0x4
    char * sndAliasPrefix;// Offset=0x1c Size=0x4
    float piecesSpreadFraction;// Offset=0x20 Size=0x4
    float piecesUpwardVelocity;// Offset=0x24 Size=0x4
    bool tempDefaultToCylinder;// Offset=0x28 Size=0x1
    bool perSurfaceSndAlias;// Offset=0x29 Size=0x1
};

enum VehicleAxleType
{
    VEH_AXLE_FRONT=0,
    VEH_AXLE_REAR=1,
    VEH_AXLE_ALL=2,
    VEH_AXLE_COUNT=3
};

struct VehiclePhysDef// Size=0xb4 (Id=4857)
{
    int physicsEnabled;// Offset=0x0 Size=0x4
    char * physPresetName;// Offset=0x4 Size=0x4
    struct PhysPreset * physPreset;// Offset=0x8 Size=0x4
    char * accelGraphName;// Offset=0xc Size=0x4
    enum VehicleAxleType steeringAxle;// Offset=0x10 Size=0x4
    enum VehicleAxleType powerAxle;// Offset=0x14 Size=0x4
    enum VehicleAxleType brakingAxle;// Offset=0x18 Size=0x4
    float topSpeed;// Offset=0x1c Size=0x4
    float reverseSpeed;// Offset=0x20 Size=0x4
    float maxVelocity;// Offset=0x24 Size=0x4
    float maxPitch;// Offset=0x28 Size=0x4
    float maxRoll;// Offset=0x2c Size=0x4
    float suspensionTravelFront;// Offset=0x30 Size=0x4
    float suspensionTravelRear;// Offset=0x34 Size=0x4
    float suspensionStrengthFront;// Offset=0x38 Size=0x4
    float suspensionDampingFront;// Offset=0x3c Size=0x4
    float suspensionStrengthRear;// Offset=0x40 Size=0x4
    float suspensionDampingRear;// Offset=0x44 Size=0x4
    float frictionBraking;// Offset=0x48 Size=0x4
    float frictionCoasting;// Offset=0x4c Size=0x4
    float frictionTopSpeed;// Offset=0x50 Size=0x4
    float frictionSide;// Offset=0x54 Size=0x4
    float frictionSideRear;// Offset=0x58 Size=0x4
    float velocityDependentSlip;// Offset=0x5c Size=0x4
    float rollStability;// Offset=0x60 Size=0x4
    float rollResistance;// Offset=0x64 Size=0x4
    float pitchResistance;// Offset=0x68 Size=0x4
    float yawResistance;// Offset=0x6c Size=0x4
    float uprightStrengthPitch;// Offset=0x70 Size=0x4
    float uprightStrengthRoll;// Offset=0x74 Size=0x4
    float targetAirPitch;// Offset=0x78 Size=0x4
    float airYawTorque;// Offset=0x7c Size=0x4
    float airPitchTorque;// Offset=0x80 Size=0x4
    float minimumMomentumForCollision;// Offset=0x84 Size=0x4
    float collisionLaunchForceScale;// Offset=0x88 Size=0x4
    float wreckedMassScale;// Offset=0x8c Size=0x4
    float wreckedBodyFriction;// Offset=0x90 Size=0x4
    float minimumJoltForNotify;// Offset=0x94 Size=0x4
    float slipThresholdFront;// Offset=0x98 Size=0x4
    float slipThresholdRear;// Offset=0x9c Size=0x4
    float slipFricScaleFront;// Offset=0xa0 Size=0x4
    float slipFricScaleRear;// Offset=0xa4 Size=0x4
    float slipFricRateFront;// Offset=0xa8 Size=0x4
    float slipFricRateRear;// Offset=0xac Size=0x4
    float slipYawTorque;// Offset=0xb0 Size=0x4
};

enum VehicleType
{
    VEH_WHEELS_4=0,
    VEH_TANK=1,
    VEH_PLANE=2,
    VEH_BOAT=3,
    VEH_ARTILLERY=4,
    VEH_HELICOPTER=5,
    VEH_SNOWMOBILE=6,
    VEH_TYPE_COUNT=7
};

struct VehicleDef// Size=0x2d0 (Id=4859)
{
    char * name;// Offset=0x0 Size=0x4
    enum VehicleType type;// Offset=0x4 Size=0x4
    char * useHintString;// Offset=0x8 Size=0x4
    int health;// Offset=0xc Size=0x4
    int quadBarrel;// Offset=0x10 Size=0x4
    float texScrollScale;// Offset=0x14 Size=0x4
    float topSpeed;// Offset=0x18 Size=0x4
    float accel;// Offset=0x1c Size=0x4
    float rotRate;// Offset=0x20 Size=0x4
    float rotAccel;// Offset=0x24 Size=0x4
    float maxBodyPitch;// Offset=0x28 Size=0x4
    float maxBodyRoll;// Offset=0x2c Size=0x4
    float fakeBodyAccelPitch;// Offset=0x30 Size=0x4
    float fakeBodyAccelRoll;// Offset=0x34 Size=0x4
    float fakeBodyVelPitch;// Offset=0x38 Size=0x4
    float fakeBodyVelRoll;// Offset=0x3c Size=0x4
    float fakeBodySideVelPitch;// Offset=0x40 Size=0x4
    float fakeBodyPitchStrength;// Offset=0x44 Size=0x4
    float fakeBodyRollStrength;// Offset=0x48 Size=0x4
    float fakeBodyPitchDampening;// Offset=0x4c Size=0x4
    float fakeBodyRollDampening;// Offset=0x50 Size=0x4
    float fakeBodyBoatRockingAmplitude;// Offset=0x54 Size=0x4
    float fakeBodyBoatRockingPeriod;// Offset=0x58 Size=0x4
    float fakeBodyBoatRockingRotationPeriod;// Offset=0x5c Size=0x4
    float fakeBodyBoatRockingFadeoutSpeed;// Offset=0x60 Size=0x4
    float boatBouncingMinForce;// Offset=0x64 Size=0x4
    float boatBouncingMaxForce;// Offset=0x68 Size=0x4
    float boatBouncingRate;// Offset=0x6c Size=0x4
    float boatBouncingFadeinSpeed;// Offset=0x70 Size=0x4
    float boatBouncingFadeoutSteeringAngle;// Offset=0x74 Size=0x4
    float collisionDamage;// Offset=0x78 Size=0x4
    float collisionSpeed;// Offset=0x7c Size=0x4
    float killcamOffset[3];// Offset=0x80 Size=0xc
    int playerProtected;// Offset=0x8c Size=0x4
    int bulletDamage;// Offset=0x90 Size=0x4
    int armorPiercingDamage;// Offset=0x94 Size=0x4
    int grenadeDamage;// Offset=0x98 Size=0x4
    int projectileDamage;// Offset=0x9c Size=0x4
    int projectileSplashDamage;// Offset=0xa0 Size=0x4
    int heavyExplosiveDamage;// Offset=0xa4 Size=0x4
    struct VehiclePhysDef vehPhysDef;// Offset=0xa8 Size=0xb4
    float boostDuration;// Offset=0x15c Size=0x4
    float boostRechargeTime;// Offset=0x160 Size=0x4
    float boostAcceleration;// Offset=0x164 Size=0x4
    float suspensionTravel;// Offset=0x168 Size=0x4
    float maxSteeringAngle;// Offset=0x16c Size=0x4
    float steeringLerp;// Offset=0x170 Size=0x4
    float minSteeringScale;// Offset=0x174 Size=0x4
    float minSteeringSpeed;// Offset=0x178 Size=0x4
    int camLookEnabled;// Offset=0x17c Size=0x4
    float camLerp;// Offset=0x180 Size=0x4
    float camPitchInfluence;// Offset=0x184 Size=0x4
    float camRollInfluence;// Offset=0x188 Size=0x4
    float camFovIncrease;// Offset=0x18c Size=0x4
    float camFovOffset;// Offset=0x190 Size=0x4
    float camFovSpeed;// Offset=0x194 Size=0x4
    char * turretWeaponName;// Offset=0x198 Size=0x4
    struct WeaponCompleteDef * turretWeapon;// Offset=0x19c Size=0x4
    float turretHorizSpanLeft;// Offset=0x1a0 Size=0x4
    float turretHorizSpanRight;// Offset=0x1a4 Size=0x4
    float turretVertSpanUp;// Offset=0x1a8 Size=0x4
    float turretVertSpanDown;// Offset=0x1ac Size=0x4
    float turretRotRate;// Offset=0x1b0 Size=0x4
    struct snd_alias_list_t * turretSpinSnd;// Offset=0x1b4 Size=0x4
    struct snd_alias_list_t * turretStopSnd;// Offset=0x1b8 Size=0x4
    int trophyEnabled;// Offset=0x1bc Size=0x4
    float trophyRadius;// Offset=0x1c0 Size=0x4
    float trophyInactiveRadius;// Offset=0x1c4 Size=0x4
    int trophyAmmoCount;// Offset=0x1c8 Size=0x4
    float trophyReloadTime;// Offset=0x1cc Size=0x4
    unsigned short trophyTags[4];// Offset=0x1d0 Size=0x8
    struct Material * compassFriendlyIcon;// Offset=0x1d8 Size=0x4
    struct Material * compassEnemyIcon;// Offset=0x1dc Size=0x4
    int compassIconWidth;// Offset=0x1e0 Size=0x4
    int compassIconHeight;// Offset=0x1e4 Size=0x4
    struct snd_alias_list_t * idleLowSnd;// Offset=0x1e8 Size=0x4
    struct snd_alias_list_t * idleHighSnd;// Offset=0x1ec Size=0x4
    struct snd_alias_list_t * engineLowSnd;// Offset=0x1f0 Size=0x4
    struct snd_alias_list_t * engineHighSnd;// Offset=0x1f4 Size=0x4
    float engineSndSpeed;// Offset=0x1f8 Size=0x4
    struct snd_alias_list_t * engineStartUpSnd;// Offset=0x1fc Size=0x4
    int engineStartUpLength;// Offset=0x200 Size=0x4
    struct snd_alias_list_t * engineShutdownSnd;// Offset=0x204 Size=0x4
    struct snd_alias_list_t * engineIdleSnd;// Offset=0x208 Size=0x4
    struct snd_alias_list_t * engineSustainSnd;// Offset=0x20c Size=0x4
    struct snd_alias_list_t * engineRampUpSnd;// Offset=0x210 Size=0x4
    int engineRampUpLength;// Offset=0x214 Size=0x4
    struct snd_alias_list_t * engineRampDownSnd;// Offset=0x218 Size=0x4
    int engineRampDownLength;// Offset=0x21c Size=0x4
    struct snd_alias_list_t * suspensionSoftSnd;// Offset=0x220 Size=0x4
    float suspensionSoftCompression;// Offset=0x224 Size=0x4
    struct snd_alias_list_t * suspensionHardSnd;// Offset=0x228 Size=0x4
    float suspensionHardCompression;// Offset=0x22c Size=0x4
    struct snd_alias_list_t * collisionSnd;// Offset=0x230 Size=0x4
    float collisionBlendSpeed;// Offset=0x234 Size=0x4
    struct snd_alias_list_t * speedSnd;// Offset=0x238 Size=0x4
    float speedSndBlendSpeed;// Offset=0x23c Size=0x4
    char * surfaceSndPrefix;// Offset=0x240 Size=0x4
    struct snd_alias_list_t * surfaceSnds[31];// Offset=0x244 Size=0x7c
    float surfaceSndBlendSpeed;// Offset=0x2c0 Size=0x4
    float slideVolume;// Offset=0x2c4 Size=0x4
    float slideBlendSpeed;// Offset=0x2c8 Size=0x4
    float inAirPitch;// Offset=0x2cc Size=0x4
};

struct VehicleScriptField// Size=0x14 (Id=4860)
{
    char * name;// Offset=0x0 Size=0x4
    int ofs;// Offset=0x4 Size=0x4
    enum fieldtype_t type;// Offset=0x8 Size=0x4
    void  ( * setter)(struct Vehicle * ,struct VehicleScriptField * );// Offset=0xc Size=0x4
    void  ( * getter)(struct Vehicle * ,struct VehicleScriptField * );// Offset=0x10 Size=0x4
};

struct scr_entref_t// Size=0x4 (Id=4861)
{
    unsigned short entnum;// Offset=0x0 Size=0x2
    unsigned short classnum;// Offset=0x2 Size=0x2
};

struct WeaponCompleteDef// Size=0x74 (Id=4862)
{
    char * szInternalName;// Offset=0x0 Size=0x4
    struct WeaponDef * weapDef;// Offset=0x4 Size=0x4
    char * szDisplayName;// Offset=0x8 Size=0x4
    unsigned short * hideTags;// Offset=0xc Size=0x4
    char ** szXAnims;// Offset=0x10 Size=0x4
    float fAdsZoomFov;// Offset=0x14 Size=0x4
    int iAdsTransInTime;// Offset=0x18 Size=0x4
    int iAdsTransOutTime;// Offset=0x1c Size=0x4
    int iClipSize;// Offset=0x20 Size=0x4
    enum ImpactType impactType;// Offset=0x24 Size=0x4
    int iFireTime;// Offset=0x28 Size=0x4
    enum weaponIconRatioType_t dpadIconRatio;// Offset=0x2c Size=0x4
    float penetrateMultiplier;// Offset=0x30 Size=0x4
    float fAdsViewKickCenterSpeed;// Offset=0x34 Size=0x4
    float fHipViewKickCenterSpeed;// Offset=0x38 Size=0x4
    char * szAltWeaponName;// Offset=0x3c Size=0x4
    unsigned int altWeaponIndex;// Offset=0x40 Size=0x4
    int iAltRaiseTime;// Offset=0x44 Size=0x4
    struct Material * killIcon;// Offset=0x48 Size=0x4
    struct Material * dpadIcon;// Offset=0x4c Size=0x4
    int fireAnimLength;// Offset=0x50 Size=0x4
    int iFirstRaiseTime;// Offset=0x54 Size=0x4
    int ammoDropStockMax;// Offset=0x58 Size=0x4
    float adsDofStart;// Offset=0x5c Size=0x4
    float adsDofEnd;// Offset=0x60 Size=0x4
    unsigned short accuracyGraphKnotCount[2];// Offset=0x64 Size=0x4
    float * accuracyGraphKnots[2][2];// Offset=0x68 Size=0x8
    bool motionTracker;// Offset=0x70 Size=0x1
    bool enhanced;// Offset=0x71 Size=0x1
    bool dpadIconShowsAmmo;// Offset=0x72 Size=0x1
};

struct weaponParms// Size=0x48 (Id=4863)
{
    float forward[3];// Offset=0x0 Size=0xc
    float right[3];// Offset=0xc Size=0xc
    float up[3];// Offset=0x18 Size=0xc
    float muzzleTrace[3];// Offset=0x24 Size=0xc
    float gunForward[3];// Offset=0x30 Size=0xc
    unsigned int weaponIndex;// Offset=0x3c Size=0x4
    struct WeaponDef * weapDef;// Offset=0x40 Size=0x4
    struct WeaponCompleteDef * weapCompleteDef;// Offset=0x44 Size=0x4
};

struct lockonFireParms// Size=0x18 (Id=4864)
{
    bool lockon;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    struct gentity_s * target;// Offset=0x4 Size=0x4
    float targetPosOrOffset[3];// Offset=0x8 Size=0xc
    bool topFire;// Offset=0x14 Size=0x1
};

struct BuiltinMethodDef// Size=0xc (Id=4865)
{
    char * actionString;// Offset=0x0 Size=0x4
    void  ( * actionFunc)(struct scr_entref_t );// Offset=0x4 Size=0x4
    int type;// Offset=0x8 Size=0x4
};

enum fieldtype_t
{
    F_INT=0,
    F_SHORT=1,
    F_BYTE=2,
    F_FLOAT=3,
    F_CSTRING=4,
    F_STRING=5,
    F_VECTOR=6,
    F_ENTITY=7,
    F_ENTHANDLE=8,
    F_ANGLES_YAW=9,
    F_OBJECT=10,
    F_MODEL=11
};

enum _unnamed_4867
{
    ENTFIELD_ENTITY=0,
    ENTFIELD_SENTIENT=8192,
    ENTFIELD_ACTOR=16384,
    ENTFIELD_CLIENT=24576,
    ENTFIELD_VEHICLE=32768,
    ENTFIELD_MASK=57344
};

enum _unnamed_4868
{
    FL_GODMODE=1,
    FL_DEMI_GODMODE=2,
    FL_NOTARGET=4,
    FL_NO_KNOCKBACK=8,
    FL_NO_RADIUS_DAMAGE=16,
    FL_SUPPORTS_LINKTO=4096,
    FL_NO_AUTO_ANIM_UPDATE=8192,
    FL_GRENADE_TOUCH_DAMAGE=16384,
    FL_STABLE_MISSILES=131072,
    FL_REPEAT_ANIM_UPDATE=262144,
    FL_VEHICLE_TARGET=524288,
    FL_GROUND_ENT=1048576,
    FL_CURSOR_HINT=2097152,
    FL_MISSILE_ATTRACTOR=8388608,
    FL_WEAPON_BEING_GRABBED=16777216,
    FL_DELETE=33554432,
    FL_BOUNCE=67108864,
    FL_MOVER_SLIDE=134217728
};

struct BuiltinMethodDef// Size=0xc (Id=4869)
{
    char * actionString;// Offset=0x0 Size=0x4
    void  ( * actionFunc)(struct scr_entref_t );// Offset=0x4 Size=0x4
    int type;// Offset=0x8 Size=0x4
};

enum ClassNum
{
    CLASS_NUM_ENTITY=0,
    CLASS_NUM_HUDELEM=1,
    CLASS_NUM_PATHNODE=2,
    CLASS_NUM_VEHICLENODE=3,
    CLASS_NUM_VEHTRACK_SEGMENT=4,
    CLASS_NUM_FXENTITY=5,
    CLASS_NUM_COUNT=6
};

enum hitLocation_t
{
    HITLOC_NONE=0,
    HITLOC_HELMET=1,
    HITLOC_HEAD=2,
    HITLOC_NECK=3,
    HITLOC_TORSO_UPR=4,
    HITLOC_TORSO_LWR=5,
    HITLOC_R_ARM_UPR=6,
    HITLOC_L_ARM_UPR=7,
    HITLOC_R_ARM_LWR=8,
    HITLOC_L_ARM_LWR=9,
    HITLOC_R_HAND=10,
    HITLOC_L_HAND=11,
    HITLOC_R_LEG_UPR=12,
    HITLOC_L_LEG_UPR=13,
    HITLOC_R_LEG_LWR=14,
    HITLOC_L_LEG_LWR=15,
    HITLOC_R_FOOT=16,
    HITLOC_L_FOOT=17,
    HITLOC_GUN=18,
    HITLOC_SHIELD=19,
    HITLOC_NUM=20
};

struct VehicleScriptField// Size=0x14 (Id=4872)
{
    char * name;// Offset=0x0 Size=0x4
    int ofs;// Offset=0x4 Size=0x4
    enum fieldtype_t type;// Offset=0x8 Size=0x4
    void  ( * setter)(struct Vehicle * ,struct VehicleScriptField * );// Offset=0xc Size=0x4
    void  ( * getter)(struct Vehicle * ,struct VehicleScriptField * );// Offset=0x10 Size=0x4
};

struct Vehicle// Size=0x3cc (Id=4873)
{
    struct gentity_s * ent;// Offset=0x0 Size=0x4
    struct LerpEntityStateVehicle * lerp;// Offset=0x4 Size=0x4
    enum VehicleDrivingState drivingState;// Offset=0x8 Size=0x4
    enum VehicleTransmission transMode;// Offset=0xc Size=0x4
    struct VehiclePathPos pathPos;// Offset=0x10 Size=0xbc
    enum VehiclePathDir pathDir;// Offset=0xcc Size=0x4
    struct VehicleTrackpos trackPos;// Offset=0xd0 Size=0x8
    struct vehicle_physic_t phys;// Offset=0xd8 Size=0x138
    struct PhysVehicle * physVeh;// Offset=0x210 Size=0x4
    struct PhysVehicleControl physVehCtrl;// Offset=0x214 Size=0x18
    int boostTime;// Offset=0x22c Size=0x4
    int defIndex;// Offset=0x230 Size=0x4
    int team;// Offset=0x234 Size=0x4
    int useHintStringIndex;// Offset=0x238 Size=0x4
    enum VehicleMoveState moveState;// Offset=0x23c Size=0x4
    float speed;// Offset=0x240 Size=0x4
    float pathSpeed;// Offset=0x244 Size=0x4
    short waitNode;// Offset=0x248 Size=0x2
    unsigned char __align0[2];// Offset=0x24a Size=0x2
    float waitSpeed;// Offset=0x24c Size=0x4
    struct VehicleTurret turret;// Offset=0x250 Size=0x14
    struct VehicleJitter jitter;// Offset=0x264 Size=0x3c
    struct VehicleHover hover;// Offset=0x2a0 Size=0x1c
    struct VehicleBoat boat;// Offset=0x2bc Size=0xc
    enum VehicleCameraState cameraState;// Offset=0x2c8 Size=0x4
    unsigned short lookAtText0;// Offset=0x2cc Size=0x2
    unsigned short lookAtText1;// Offset=0x2ce Size=0x2
    enum VehicleManualMode manualMode;// Offset=0x2d0 Size=0x4
    float manualSpeed;// Offset=0x2d4 Size=0x4
    float manualAccel;// Offset=0x2d8 Size=0x4
    float manualDecel;// Offset=0x2dc Size=0x4
    float manualTime;// Offset=0x2e0 Size=0x4
    enum VehicleRotateToMode rotateToYawMode;// Offset=0x2e4 Size=0x4
    float rotateToYaw;// Offset=0x2e8 Size=0x4
    float rotateToYawAccel;// Offset=0x2ec Size=0x4
    float maxDragSpeed;// Offset=0x2f0 Size=0x4
    float turningAbility;// Offset=0x2f4 Size=0x4
    int hasTarget;// Offset=0x2f8 Size=0x4
    int hasTargetYaw;// Offset=0x2fc Size=0x4
    int hasGoalYaw;// Offset=0x300 Size=0x4
    int stopAtGoal;// Offset=0x304 Size=0x4
    int stopping;// Offset=0x308 Size=0x4
    int targetEnt;// Offset=0x30c Size=0x4
    class EntHandle lookAtEnt;// Offset=0x310 Size=0x4
    float targetOrigin[3];// Offset=0x314 Size=0xc
    float targetOffset[3];// Offset=0x320 Size=0xc
    float targetYaw;// Offset=0x32c Size=0x4
    float goalPosition[3];// Offset=0x330 Size=0xc
    float goalYaw;// Offset=0x33c Size=0x4
    float prevGoalYaw;// Offset=0x340 Size=0x4
    float yawOverShoot;// Offset=0x344 Size=0x4
    int yawSlowDown;// Offset=0x348 Size=0x4
    float nearGoalNotifyDist;// Offset=0x34c Size=0x4
    float joltDir[2];// Offset=0x350 Size=0x8
    float joltTime;// Offset=0x358 Size=0x4
    float joltWave;// Offset=0x35c Size=0x4
    float joltSpeed;// Offset=0x360 Size=0x4
    float joltDecel;// Offset=0x364 Size=0x4
    float throttle;// Offset=0x368 Size=0x4
    float brake;// Offset=0x36c Size=0x4
    float impactSpeed;// Offset=0x370 Size=0x4
    struct VehicleTags boneIndex;// Offset=0x374 Size=0x48
    int turretHitNum;// Offset=0x3bc Size=0x4
    unsigned int trophyAmmo;// Offset=0x3c0 Size=0x4
    int trophyReloadEndTime;// Offset=0x3c4 Size=0x4
    enum VehiclePathType pathType;// Offset=0x3c8 Size=0x4
};

struct VehicleDef// Size=0x2d0 (Id=4874)
{
    char * name;// Offset=0x0 Size=0x4
    enum VehicleType type;// Offset=0x4 Size=0x4
    char * useHintString;// Offset=0x8 Size=0x4
    int health;// Offset=0xc Size=0x4
    int quadBarrel;// Offset=0x10 Size=0x4
    float texScrollScale;// Offset=0x14 Size=0x4
    float topSpeed;// Offset=0x18 Size=0x4
    float accel;// Offset=0x1c Size=0x4
    float rotRate;// Offset=0x20 Size=0x4
    float rotAccel;// Offset=0x24 Size=0x4
    float maxBodyPitch;// Offset=0x28 Size=0x4
    float maxBodyRoll;// Offset=0x2c Size=0x4
    float fakeBodyAccelPitch;// Offset=0x30 Size=0x4
    float fakeBodyAccelRoll;// Offset=0x34 Size=0x4
    float fakeBodyVelPitch;// Offset=0x38 Size=0x4
    float fakeBodyVelRoll;// Offset=0x3c Size=0x4
    float fakeBodySideVelPitch;// Offset=0x40 Size=0x4
    float fakeBodyPitchStrength;// Offset=0x44 Size=0x4
    float fakeBodyRollStrength;// Offset=0x48 Size=0x4
    float fakeBodyPitchDampening;// Offset=0x4c Size=0x4
    float fakeBodyRollDampening;// Offset=0x50 Size=0x4
    float fakeBodyBoatRockingAmplitude;// Offset=0x54 Size=0x4
    float fakeBodyBoatRockingPeriod;// Offset=0x58 Size=0x4
    float fakeBodyBoatRockingRotationPeriod;// Offset=0x5c Size=0x4
    float fakeBodyBoatRockingFadeoutSpeed;// Offset=0x60 Size=0x4
    float boatBouncingMinForce;// Offset=0x64 Size=0x4
    float boatBouncingMaxForce;// Offset=0x68 Size=0x4
    float boatBouncingRate;// Offset=0x6c Size=0x4
    float boatBouncingFadeinSpeed;// Offset=0x70 Size=0x4
    float boatBouncingFadeoutSteeringAngle;// Offset=0x74 Size=0x4
    float collisionDamage;// Offset=0x78 Size=0x4
    float collisionSpeed;// Offset=0x7c Size=0x4
    float killcamOffset[3];// Offset=0x80 Size=0xc
    int playerProtected;// Offset=0x8c Size=0x4
    int bulletDamage;// Offset=0x90 Size=0x4
    int armorPiercingDamage;// Offset=0x94 Size=0x4
    int grenadeDamage;// Offset=0x98 Size=0x4
    int projectileDamage;// Offset=0x9c Size=0x4
    int projectileSplashDamage;// Offset=0xa0 Size=0x4
    int heavyExplosiveDamage;// Offset=0xa4 Size=0x4
    struct VehiclePhysDef vehPhysDef;// Offset=0xa8 Size=0xb4
    float boostDuration;// Offset=0x15c Size=0x4
    float boostRechargeTime;// Offset=0x160 Size=0x4
    float boostAcceleration;// Offset=0x164 Size=0x4
    float suspensionTravel;// Offset=0x168 Size=0x4
    float maxSteeringAngle;// Offset=0x16c Size=0x4
    float steeringLerp;// Offset=0x170 Size=0x4
    float minSteeringScale;// Offset=0x174 Size=0x4
    float minSteeringSpeed;// Offset=0x178 Size=0x4
    int camLookEnabled;// Offset=0x17c Size=0x4
    float camLerp;// Offset=0x180 Size=0x4
    float camPitchInfluence;// Offset=0x184 Size=0x4
    float camRollInfluence;// Offset=0x188 Size=0x4
    float camFovIncrease;// Offset=0x18c Size=0x4
    float camFovOffset;// Offset=0x190 Size=0x4
    float camFovSpeed;// Offset=0x194 Size=0x4
    char * turretWeaponName;// Offset=0x198 Size=0x4
    struct WeaponCompleteDef * turretWeapon;// Offset=0x19c Size=0x4
    float turretHorizSpanLeft;// Offset=0x1a0 Size=0x4
    float turretHorizSpanRight;// Offset=0x1a4 Size=0x4
    float turretVertSpanUp;// Offset=0x1a8 Size=0x4
    float turretVertSpanDown;// Offset=0x1ac Size=0x4
    float turretRotRate;// Offset=0x1b0 Size=0x4
    struct snd_alias_list_t * turretSpinSnd;// Offset=0x1b4 Size=0x4
    struct snd_alias_list_t * turretStopSnd;// Offset=0x1b8 Size=0x4
    int trophyEnabled;// Offset=0x1bc Size=0x4
    float trophyRadius;// Offset=0x1c0 Size=0x4
    float trophyInactiveRadius;// Offset=0x1c4 Size=0x4
    int trophyAmmoCount;// Offset=0x1c8 Size=0x4
    float trophyReloadTime;// Offset=0x1cc Size=0x4
    unsigned short trophyTags[4];// Offset=0x1d0 Size=0x8
    struct Material * compassFriendlyIcon;// Offset=0x1d8 Size=0x4
    struct Material * compassEnemyIcon;// Offset=0x1dc Size=0x4
    int compassIconWidth;// Offset=0x1e0 Size=0x4
    int compassIconHeight;// Offset=0x1e4 Size=0x4
    struct snd_alias_list_t * idleLowSnd;// Offset=0x1e8 Size=0x4
    struct snd_alias_list_t * idleHighSnd;// Offset=0x1ec Size=0x4
    struct snd_alias_list_t * engineLowSnd;// Offset=0x1f0 Size=0x4
    struct snd_alias_list_t * engineHighSnd;// Offset=0x1f4 Size=0x4
    float engineSndSpeed;// Offset=0x1f8 Size=0x4
    struct snd_alias_list_t * engineStartUpSnd;// Offset=0x1fc Size=0x4
    int engineStartUpLength;// Offset=0x200 Size=0x4
    struct snd_alias_list_t * engineShutdownSnd;// Offset=0x204 Size=0x4
    struct snd_alias_list_t * engineIdleSnd;// Offset=0x208 Size=0x4
    struct snd_alias_list_t * engineSustainSnd;// Offset=0x20c Size=0x4
    struct snd_alias_list_t * engineRampUpSnd;// Offset=0x210 Size=0x4
    int engineRampUpLength;// Offset=0x214 Size=0x4
    struct snd_alias_list_t * engineRampDownSnd;// Offset=0x218 Size=0x4
    int engineRampDownLength;// Offset=0x21c Size=0x4
    struct snd_alias_list_t * suspensionSoftSnd;// Offset=0x220 Size=0x4
    float suspensionSoftCompression;// Offset=0x224 Size=0x4
    struct snd_alias_list_t * suspensionHardSnd;// Offset=0x228 Size=0x4
    float suspensionHardCompression;// Offset=0x22c Size=0x4
    struct snd_alias_list_t * collisionSnd;// Offset=0x230 Size=0x4
    float collisionBlendSpeed;// Offset=0x234 Size=0x4
    struct snd_alias_list_t * speedSnd;// Offset=0x238 Size=0x4
    float speedSndBlendSpeed;// Offset=0x23c Size=0x4
    char * surfaceSndPrefix;// Offset=0x240 Size=0x4
    struct snd_alias_list_t * surfaceSnds[31];// Offset=0x244 Size=0x7c
    float surfaceSndBlendSpeed;// Offset=0x2c0 Size=0x4
    float slideVolume;// Offset=0x2c4 Size=0x4
    float slideBlendSpeed;// Offset=0x2c8 Size=0x4
    float inAirPitch;// Offset=0x2cc Size=0x4
};

struct VehiclePathNode// Size=0x44 (Id=4875)
{
    unsigned short name;// Offset=0x0 Size=0x2
    unsigned short target;// Offset=0x2 Size=0x2
    unsigned short script_linkname;// Offset=0x4 Size=0x2
    unsigned short script_noteworthy;// Offset=0x6 Size=0x2
    short index;// Offset=0x8 Size=0x2
    short flags;// Offset=0xa Size=0x2
    float speed;// Offset=0xc Size=0x4
    float lookAhead;// Offset=0x10 Size=0x4
    float origin[3];// Offset=0x14 Size=0xc
    float dir[3];// Offset=0x20 Size=0xc
    float angles[3];// Offset=0x2c Size=0xc
    float length;// Offset=0x38 Size=0x4
    short nextIdx;// Offset=0x3c Size=0x2
    short prevIdx;// Offset=0x3e Size=0x2
    short notifyIdx;// Offset=0x40 Size=0x2
};

struct VehiclePathPos// Size=0xbc (Id=4876)
{
    short nodeIdx;// Offset=0x0 Size=0x2
    short flags;// Offset=0x2 Size=0x2
    float frac;// Offset=0x4 Size=0x4
    float speed;// Offset=0x8 Size=0x4
    float lookAhead;// Offset=0xc Size=0x4
    float origin[3];// Offset=0x10 Size=0xc
    float angles[3];// Offset=0x1c Size=0xc
    float lookPos[3];// Offset=0x28 Size=0xc
    struct VehiclePathNode switchNode[2];// Offset=0x34 Size=0x88
};

enum VehiclePathNotifyMode
{
    VEH_PATH_NOTIFY_SCRIPT=0,
    VEH_PATH_NOTIFY_DRAW=1
};

struct VehicleNodeField// Size=0xc (Id=4878)
{
    char * name;// Offset=0x0 Size=0x4
    int ofs;// Offset=0x4 Size=0x4
    enum fieldtype_t type;// Offset=0x8 Size=0x4
};

struct rectDef_s// Size=0x14 (Id=4879)
{
    float x;// Offset=0x0 Size=0x4
    float y;// Offset=0x4 Size=0x4
    float w;// Offset=0x8 Size=0x4
    float h;// Offset=0xc Size=0x4
    unsigned char horzAlign;// Offset=0x10 Size=0x1
    unsigned char vertAlign;// Offset=0x11 Size=0x1
};

struct DObj// Size=0x88 (Id=4880)
{
    struct XAnimTree_s * tree;// Offset=0x0 Size=0x4
    unsigned short duplicateParts;// Offset=0x4 Size=0x2
    unsigned short entnum;// Offset=0x6 Size=0x2
    unsigned char duplicatePartsSize;// Offset=0x8 Size=0x1
    unsigned char numModels;// Offset=0x9 Size=0x1
    unsigned char numBones;// Offset=0xa Size=0x1
    unsigned char flags;// Offset=0xb Size=0x1
    unsigned int ignoreCollision;// Offset=0xc Size=0x4
    long locked;// Offset=0x10 Size=0x4
    struct DSkel skel;// Offset=0x14 Size=0x58
    float radius;// Offset=0x6c Size=0x4
    unsigned int hidePartBits[5];// Offset=0x70 Size=0x14
    struct XModel ** models;// Offset=0x84 Size=0x4
};

enum CompassType
{
    COMPASS_TYPE_PARTIAL=0,
    COMPASS_TYPE_FULL=1
};

struct ScreenPlacement// Size=0x6c (Id=4882)
{
    float scaleVirtualToReal[2];// Offset=0x0 Size=0x8
    float scaleVirtualToFull[2];// Offset=0x8 Size=0x8
    float scaleRealToVirtual[2];// Offset=0x10 Size=0x8
    float realViewportPosition[2];// Offset=0x18 Size=0x8
    float realViewportSize[2];// Offset=0x20 Size=0x8
    float virtualViewableMin[2];// Offset=0x28 Size=0x8
    float virtualViewableMax[2];// Offset=0x30 Size=0x8
    float realViewableMin[2];// Offset=0x38 Size=0x8
    float realViewableMax[2];// Offset=0x40 Size=0x8
    float virtualAdjustableMin[2];// Offset=0x48 Size=0x8
    float virtualAdjustableMax[2];// Offset=0x50 Size=0x8
    float realAdjustableMin[2];// Offset=0x58 Size=0x8
    float realAdjustableMax[2];// Offset=0x60 Size=0x8
    float subScreenLeft;// Offset=0x68 Size=0x4
};

struct VehicleClient// Size=0x84 (Id=4883)
{
    int index;// Offset=0x0 Size=0x4
    int defIndex;// Offset=0x4 Size=0x4
    int entIndex;// Offset=0x8 Size=0x4
    int localClientNum;// Offset=0xc Size=0x4
    int frameTime;// Offset=0x10 Size=0x4
    int time;// Offset=0x14 Size=0x4
    unsigned int flags;// Offset=0x18 Size=0x4
    float localSpeed[3];// Offset=0x1c Size=0xc
    float rotateSpeed[3];// Offset=0x28 Size=0xc
    float materialTime;// Offset=0x34 Size=0x4
    int playerIndex;// Offset=0x38 Size=0x4
    struct VehicleAudioState audioState;// Offset=0x3c Size=0x48
};

enum VehicleEngineState
{
    VEH_ENGINE_STATE_OFF=0,
    VEH_ENGINE_STATE_STARTUP=1,
    VEH_ENGINE_STATE_IDLE=2,
    VEH_ENGINE_STATE_RAMPUP=3,
    VEH_ENGINE_STATE_SUSTAIN=4,
    VEH_ENGINE_STATE_RAMPDOWN=5
};

struct VehicleAudioState// Size=0x48 (Id=4885)
{
    float entOrigin[3];// Offset=0x0 Size=0xc
    bool throttle;// Offset=0xc Size=0x1
    unsigned char __align0[3];// Offset=0xd Size=0x3
    int stateTime;// Offset=0x10 Size=0x4
    int spawnTime;// Offset=0x14 Size=0x4
    int spawnTimeDelay;// Offset=0x18 Size=0x4
    float spawnVolumeScale;// Offset=0x1c Size=0x4
    float inAirPitch;// Offset=0x20 Size=0x4
    enum VehicleEngineState engineState;// Offset=0x24 Size=0x4
    int engineRampUpTime;// Offset=0x28 Size=0x4
    bool engineRampUpDelay;// Offset=0x2c Size=0x1
    unsigned char __align1[3];// Offset=0x2d Size=0x3
    float engineRampUpDelayFrac;// Offset=0x30 Size=0x4
    int engineRampDownTime;// Offset=0x34 Size=0x4
    bool turretMoving;// Offset=0x38 Size=0x1
    unsigned char __align2[3];// Offset=0x39 Size=0x3
    int lastImpactTime;// Offset=0x3c Size=0x4
    float lastImpactScale;// Offset=0x40 Size=0x4
    unsigned char surfaceType;// Offset=0x44 Size=0x1
};

struct VehicleClient// Size=0x84 (Id=4886)
{
    int index;// Offset=0x0 Size=0x4
    int defIndex;// Offset=0x4 Size=0x4
    int entIndex;// Offset=0x8 Size=0x4
    int localClientNum;// Offset=0xc Size=0x4
    int frameTime;// Offset=0x10 Size=0x4
    int time;// Offset=0x14 Size=0x4
    unsigned int flags;// Offset=0x18 Size=0x4
    float localSpeed[3];// Offset=0x1c Size=0xc
    float rotateSpeed[3];// Offset=0x28 Size=0xc
    float materialTime;// Offset=0x34 Size=0x4
    int playerIndex;// Offset=0x38 Size=0x4
    struct VehicleAudioState audioState;// Offset=0x3c Size=0x48
};

enum _unnamed_4887
{
    CULL_OUT=0,
    CULL_CALC_POSE=1,
    CULL_CALC_SKIN=2
};

enum VehCamMode
{
    VEHCAM_MODE_1ST_PERSON=0,
    VEHCAM_MODE_3RD_PERSON=1,
    VEHCAM_MODE_EDIT=2,
    VEHCAM_MODE_COUNT=3
};

struct cg_s// Size=0xeea00 (Id=4889)
{
    union // Size=0xee4c8 (Id=0)
    {
        struct playerState_s predictedPlayerState;// Offset=0x0 Size=0x3180
        struct centity_s predictedPlayerEntity;// Offset=0x3180 Size=0x1f4
        struct playerEntity_t playerEntity;// Offset=0x3374 Size=0x20
        int predictedErrorTime;// Offset=0x3394 Size=0x4
        float predictedError[3];// Offset=0x3398 Size=0xc
        int clientNum;// Offset=0x33a4 Size=0x4
        int localClientNum;// Offset=0x33a8 Size=0x4
        enum DemoType demoType;// Offset=0x33ac Size=0x4
        enum CubemapShot cubemapShot;// Offset=0x33b0 Size=0x4
        int cubemapSize;// Offset=0x33b4 Size=0x4
        int renderScreen;// Offset=0x33b8 Size=0x4
        int latestSnapshotNum;// Offset=0x33bc Size=0x4
        int latestSnapshotTime;// Offset=0x33c0 Size=0x4
        struct snapshot_s * snap;// Offset=0x33c4 Size=0x4
        struct snapshot_s * nextSnap;// Offset=0x33c8 Size=0x4
        unsigned char __align0[52];// Offset=0x33cc Size=0x34
        struct snapshot_s activeSnapshots[2];// Offset=0x3400 Size=0x67800
        float frameInterpolation;// Offset=0x6ac00 Size=0x4
        int frametime;// Offset=0x6ac04 Size=0x4
        int time;// Offset=0x6ac08 Size=0x4
        int oldTime;// Offset=0x6ac0c Size=0x4
        int physicsTime;// Offset=0x6ac10 Size=0x4
        int mapRestart;// Offset=0x6ac14 Size=0x4
        int renderingThirdPerson;// Offset=0x6ac18 Size=0x4
        float landChange;// Offset=0x6ac1c Size=0x4
        int landTime;// Offset=0x6ac20 Size=0x4
        float heightToCeiling;// Offset=0x6ac24 Size=0x4
        struct refdef_t refdef;// Offset=0x6ac28 Size=0x3f60
        float refdefViewAngles[3];// Offset=0x6eb88 Size=0xc
        float baseGunAngles[3];// Offset=0x6eb94 Size=0xc
        float aimAssistEyeOrigin[3];// Offset=0x6eba0 Size=0xc
        float aimAssistViewOrigin[3];// Offset=0x6ebac Size=0xc
        float aimAssistViewAngles[3];// Offset=0x6ebb8 Size=0xc
        float thirdPersonGunPitch;// Offset=0x6ebc4 Size=0x4
        float thirdPersonGunYaw;// Offset=0x6ebc8 Size=0x4
        float thirdPersonAdsLerp;// Offset=0x6ebcc Size=0x4
        float swayViewAngles[3];// Offset=0x6ebd0 Size=0xc
        float swayAngles[3];// Offset=0x6ebdc Size=0xc
        float swayOffset[3];// Offset=0x6ebe8 Size=0xc
        float recoilAngles[3];// Offset=0x6ebf4 Size=0xc
        float recoilSpeed[3];// Offset=0x6ec00 Size=0xc
        int iEntityLastType[2048];// Offset=0x6ec0c Size=0x2000
        struct XModel * pEntityLastXModel[2048];// Offset=0x70c0c Size=0x2000
        float zoomSensitivity;// Offset=0x72c0c Size=0x4
        int vehicleInitView;// Offset=0x72c10 Size=0x4
        float prevVehicleInvAxis[3][3];// Offset=0x72c14 Size=0x24
        char objectiveText[1024];// Offset=0x72c38 Size=0x400
        char scriptMainMenu[256];// Offset=0x73038 Size=0x100
        int scoresRequestTime;// Offset=0x73138 Size=0x4
        int numScores;// Offset=0x7313c Size=0x4
        int teamScores[4];// Offset=0x73140 Size=0x10
        int teamPings[4];// Offset=0x73150 Size=0x10
        int teamPlayers[4];// Offset=0x73160 Size=0x10
        struct score_t scores[18];// Offset=0x73170 Size=0x318
        int scoreLimit;// Offset=0x73488 Size=0x4
        int scoreFadeTime;// Offset=0x7348c Size=0x4
        int scoresTop;// Offset=0x73490 Size=0x4
        int scoresOffBottom;// Offset=0x73494 Size=0x4
        int scoresBottom;// Offset=0x73498 Size=0x4
        int selectedGamerIndex;// Offset=0x7349c Size=0x4
        int bannerLines[4];// Offset=0x734a0 Size=0x10
        unsigned long long selectedGamerXuid;// Offset=0x734b0 Size=0x8
        int unmutableNoticeTime;// Offset=0x734b8 Size=0x4
        int crosshairClientNum;// Offset=0x734bc Size=0x4
        int crosshairClientLastTime;// Offset=0x734c0 Size=0x4
        int crosshairClientStartTime;// Offset=0x734c4 Size=0x4
        int cursorHintIcon;// Offset=0x734c8 Size=0x4
        int cursorHintEntType;// Offset=0x734cc Size=0x4
        int cursorHintTime;// Offset=0x734d0 Size=0x4
        int cursorHintFade;// Offset=0x734d4 Size=0x4
        int cursorHintString;// Offset=0x734d8 Size=0x4
        int cursorHintDualWield;// Offset=0x734dc Size=0x4
        int lastClipFlashTime;// Offset=0x734e0 Size=0x4
        enum InvalidCmdHintType invalidCmdHintType;// Offset=0x734e4 Size=0x4
        int invalidCmdHintWeapon;// Offset=0x734e8 Size=0x4
        int invalidCmdHintTime;// Offset=0x734ec Size=0x4
        int lastHealthPulseTime;// Offset=0x734f0 Size=0x4
        int lastHealthLerpDelay;// Offset=0x734f4 Size=0x4
        int lastHealthClient;// Offset=0x734f8 Size=0x4
        float lastHealth;// Offset=0x734fc Size=0x4
        int showHud;// Offset=0x73500 Size=0x4
        float bloodOverlayAlpha;// Offset=0x73504 Size=0x4
        int lastStance;// Offset=0x73508 Size=0x4
        int lastStanceChangeTime;// Offset=0x7350c Size=0x4
        int lastStanceFlashTime;// Offset=0x73510 Size=0x4
        int voiceTime;// Offset=0x73514 Size=0x4
        unsigned int weaponSelect;// Offset=0x73518 Size=0x4
        int weaponSelectTime;// Offset=0x7351c Size=0x4
        unsigned int weaponLatestPrimaryIdx;// Offset=0x73520 Size=0x4
        unsigned short primaryWeaponForAlt[1200];// Offset=0x73524 Size=0x960
        unsigned int prevViewmodelWeapon;// Offset=0x73e84 Size=0x4
        int prevDualWielding;// Offset=0x73e88 Size=0x4
        int equippedOffHand;// Offset=0x73e8c Size=0x4
        struct viewDamage_t viewDamage[12];// Offset=0x73e90 Size=0x330
        int damageTime;// Offset=0x741c0 Size=0x4
        float damageX;// Offset=0x741c4 Size=0x4
        float damageY;// Offset=0x741c8 Size=0x4
        float damageValue;// Offset=0x741cc Size=0x4
        float viewFade;// Offset=0x741d0 Size=0x4
        int weapIdleTime;// Offset=0x741d4 Size=0x4
        int v_dmg_time;// Offset=0x741d8 Size=0x4
        int v_dmg_stun_time;// Offset=0x741dc Size=0x4
        float v_dmg_pitch;// Offset=0x741e0 Size=0x4
        float v_dmg_roll;// Offset=0x741e4 Size=0x4
        float xyspeed;// Offset=0x741e8 Size=0x4
        float kickAVel[3];// Offset=0x741ec Size=0xc
        float kickAngles[3];// Offset=0x741f8 Size=0xc
        float offsetAngles[3];// Offset=0x74204 Size=0xc
        float gunPitch;// Offset=0x74210 Size=0x4
        float gunYaw;// Offset=0x74214 Size=0x4
        float gunXOfs;// Offset=0x74218 Size=0x4
        float gunYOfs;// Offset=0x7421c Size=0x4
        float gunZOfs;// Offset=0x74220 Size=0x4
        float viewModelAxis[4][3];// Offset=0x74224 Size=0x30
        float rumbleScale;// Offset=0x74254 Size=0x4
        float compassNorthYaw;// Offset=0x74258 Size=0x4
        float compassNorth[2];// Offset=0x7425c Size=0x8
        struct Material * compassMapMaterial;// Offset=0x74264 Size=0x4
        float compassMapUpperLeft[2];// Offset=0x74268 Size=0x8
        float compassMapWorldSize[2];// Offset=0x74270 Size=0x8
        int compassFadeTime;// Offset=0x74278 Size=0x4
        int healthFadeTime;// Offset=0x7427c Size=0x4
        int ammoFadeTime;// Offset=0x74280 Size=0x4
        int stanceFadeTime;// Offset=0x74284 Size=0x4
        int sprintFadeTime;// Offset=0x74288 Size=0x4
        int offhandFadeTime;// Offset=0x7428c Size=0x4
        int offhandFlashTime;// Offset=0x74290 Size=0x4
        struct shellshock_t shellshock;// Offset=0x74294 Size=0x20
        struct <unnamed-type-testShock>// Size=0x8 (Id=51023)
        {
            int time;// Offset=0x0 Size=0x4
            int duration;// Offset=0x4 Size=0x4
        };
        unsigned char __align1[475820];// Offset=0x8 Size=0x742ac
        struct cg_s::<unnamed-type-testShock> testShock;// Offset=0x742b4 Size=0x8
        int holdBreathTime;// Offset=0x742bc Size=0x4
        int holdBreathInTime;// Offset=0x742c0 Size=0x4
        int holdBreathDelay;// Offset=0x742c4 Size=0x4
        float holdBreathFrac;// Offset=0x742c8 Size=0x4
        bool painVisionActive;// Offset=0x742cc Size=0x1
        unsigned char __align2[3];// Offset=0x742cd Size=0x3
        float painVisionLerp;// Offset=0x742d0 Size=0x4
        bool painVisionSoundActive;// Offset=0x742d4 Size=0x1
        unsigned char __align3[3];// Offset=0x742d5 Size=0x3
        struct PlayerDiveView diveView;// Offset=0x742d8 Size=0x8
        float radarProgress;// Offset=0x742e0 Size=0x4
        float selectedLocation[2];// Offset=0x742e4 Size=0x8
        float selectedLocationAngle;// Offset=0x742ec Size=0x4
        struct SprintState sprintStates;// Offset=0x742f0 Size=0x14
        int adsViewErrorDone;// Offset=0x74304 Size=0x4
        int inKillCam;// Offset=0x74308 Size=0x4
        bool killCamFirstFrameRan;// Offset=0x7430c Size=0x1
        unsigned char __align4[3];// Offset=0x7430d Size=0x3
        int killCamEntity;// Offset=0x74310 Size=0x4
        int invalidKillCamEntity;// Offset=0x74314 Size=0x4
        enum KillCamEntityType killCamEntityType;// Offset=0x74318 Size=0x4
        float killCamLastEntityOrg[3];// Offset=0x7431c Size=0xc
        float killCamLastEntityAngles[3];// Offset=0x74328 Size=0xc
        enum KillCamEntityRestState killCamEntityRestState;// Offset=0x74334 Size=0x4
        int killCamLookAtEntity;// Offset=0x74338 Size=0x4
        float killCamLookAt[3];// Offset=0x7433c Size=0xc
        float killCamHelicopterOffset[3];// Offset=0x74348 Size=0xc
        int killCamStoppedTime;// Offset=0x74354 Size=0x4
        float killCamStoppedDecelTime;// Offset=0x74358 Size=0x4
        float killCamStoppedPos[3];// Offset=0x7435c Size=0xc
        float killCamStoppedVel[3];// Offset=0x74368 Size=0xc
        float killCamPrevBombOrigin[3];// Offset=0x74374 Size=0xc
        int killCamLerpEndTime;// Offset=0x74380 Size=0x4
        float killCamOldViewAngles[3];// Offset=0x74384 Size=0xc
        float killCamOldViewOrg[3];// Offset=0x74390 Size=0xc
        unsigned char __align5[4];// Offset=0x7439c Size=0x4
        struct bgs_t bgs;// Offset=0x743a0 Size=0x795d8
        struct cpose_t viewModelPose;// Offset=0xed978 Size=0x60
        struct cpose_t viewModelPoseLeftHand;// Offset=0xed9d8 Size=0x60
        struct visionSetVars_t visionSetPreLoaded[4];// Offset=0xeda38 Size=0x1b0
        char visionSetPreLoadedName[4][64];// Offset=0xedbe8 Size=0x100
        struct visionSetVars_t visionSetFrom[5];// Offset=0xedce8 Size=0x21c
        struct visionSetVars_t visionSetTo[5];// Offset=0xedf04 Size=0x21c
        struct visionSetVars_t visionSetCurrent[5];// Offset=0xee120 Size=0x21c
        struct visionSetLerpData_t visionSetLerpData[5];// Offset=0xee33c Size=0x3c
        char visionName[5][64];// Offset=0xee378 Size=0x140
        int extraButtons;// Offset=0xee4b8 Size=0x4
        bool playerTeleported;// Offset=0xee4bc Size=0x1
        unsigned char __align6[3];// Offset=0xee4bd Size=0x3
        int stepViewStart;// Offset=0xee4c0 Size=0x4
        float stepViewChange;// Offset=0xee4c4 Size=0x4
        struct <unnamed-type-lastFrame>// Size=0x4 (Id=51078)
        {
            float aimSpreadScale;// Offset=0x0 Size=0x4
        };
        unsigned char __align7[976068];// Offset=0x4 Size=0xee4c4
    };
    struct cg_s::<unnamed-type-lastFrame> lastFrame;// Offset=0xee4c8 Size=0x4
    int oldCommandTime;// Offset=0xee4cc Size=0x4
    float oldOrigin[3];// Offset=0xee4d0 Size=0xc
    float oldViewangles[3];// Offset=0xee4dc Size=0xc
    struct transPlayerState_t oldTransPlayerState;// Offset=0xee4e8 Size=0x30
    struct hudElemSoundInfo_t hudElemSound[32];// Offset=0xee518 Size=0x80
    struct HudGrenade hudGrenades[32];// Offset=0xee598 Size=0x200
    unsigned int hudGrenadeCount;// Offset=0xee798 Size=0x4
    struct HudSplash splashes[4];// Offset=0xee79c Size=0x40
    bool remoteMissileCam;// Offset=0xee7dc Size=0x1
    bool remoteMissileCamInitialized;// Offset=0xee7dd Size=0x1
    unsigned char __align8[2];// Offset=0xee7de Size=0x2
    float remoteMissileCamAngles[3];// Offset=0xee7e0 Size=0xc
    unsigned int teamFx[1];// Offset=0xee7ec Size=0x4
    unsigned int teamFxPlaying[1];// Offset=0xee7f0 Size=0x4
    int killcamFXWeapons[5];// Offset=0xee7f4 Size=0x14
    float radarJammedDist;// Offset=0xee808 Size=0x4
    float turretFov;// Offset=0xee80c Size=0x4
    bool thermalVisionActive;// Offset=0xee810 Size=0x1
    unsigned char __align9[3];// Offset=0xee811 Size=0x3
    unsigned int weaponAltWasUsedLast[38];// Offset=0xee814 Size=0x98
    float motionTrackerPrevCenter[2];// Offset=0xee8ac Size=0x8
    float motionTrackerProgress;// Offset=0xee8b4 Size=0x4
    float targetPosCached[2];// Offset=0xee8b8 Size=0x8
    int targetPosCachedTime;// Offset=0xee8c0 Size=0x4
    int delayedShieldHitEventsCount;// Offset=0xee8c4 Size=0x4
    struct ShieldHitDelayedEvent delayedShieldHitEvents[2];// Offset=0xee8c8 Size=0x8
    struct Material * thermalBodyMaterial;// Offset=0xee8d0 Size=0x4
    float streamOrigin[3];// Offset=0xee8d4 Size=0xc
    bool streamOriginValid;// Offset=0xee8e0 Size=0x1
    unsigned char __align10[3];// Offset=0xee8e1 Size=0x3
    struct CachedPlayerCard cachedPlayerCard[18];// Offset=0xee8e4 Size=0xd8
};

enum VehCamZOffsetMode
{
    VEHCAM_ZMODE_WORLD=0,
    VEHCAM_ZMODE_VEHICLE=1,
    VEHCAM_ZMODE_VIEW=2,
    VEHCAM_ZMODE_COUNT=3
};

struct VehicleCameraParams// Size=0x34 (Id=4891)
{
    float angles[3];// Offset=0x0 Size=0xc
    float offset[3];// Offset=0xc Size=0xc
    float radius;// Offset=0x18 Size=0x4
    float speedInfluence;// Offset=0x1c Size=0x4
    float pitchTurnRate;// Offset=0x20 Size=0x4
    float pitchClamp;// Offset=0x24 Size=0x4
    float yawTurnRate;// Offset=0x28 Size=0x4
    float yawClamp;// Offset=0x2c Size=0x4
    enum VehCamZOffsetMode zOffsetMode;// Offset=0x30 Size=0x4
};

struct VehicleCamera// Size=0x38 (Id=4892)
{
    enum VehCamMode mode;// Offset=0x0 Size=0x4
    float angles[3];// Offset=0x4 Size=0xc
    float offset[3];// Offset=0x10 Size=0xc
    float userAngles[3];// Offset=0x1c Size=0xc
    float radius;// Offset=0x28 Size=0x4
    float fov;// Offset=0x2c Size=0x4
    float fovOffset;// Offset=0x30 Size=0x4
    bool initialized;// Offset=0x34 Size=0x1
};

struct GraphFloat// Size=0x148 (Id=4893)
{
    char name[64];// Offset=0x0 Size=0x40
    float knots[32][2];// Offset=0x40 Size=0x100
    unsigned short knotCount;// Offset=0x140 Size=0x2
    unsigned char __align0[2];// Offset=0x142 Size=0x2
    float scale;// Offset=0x144 Size=0x4
};

struct G_StepSlideMoveParams// Size=0x24 (Id=4894)
{
    float deltaTime;// Offset=0x0 Size=0x4
    float * origin;// Offset=0x4 Size=0x4
    float * velocity;// Offset=0x8 Size=0x4
    struct Bounds * bounds;// Offset=0xc Size=0x4
    bool gravity;// Offset=0x10 Size=0x1
    bool hasGround;// Offset=0x11 Size=0x1
    unsigned char __align0[2];// Offset=0x12 Size=0x2
    float * groundNormal;// Offset=0x14 Size=0x4
    int passEntityNum;// Offset=0x18 Size=0x4
    int clipMask;// Offset=0x1c Size=0x4
    void  ( * clipVelocityFunc)(float * ,float * ,float * );// Offset=0x20 Size=0x4
};

enum hitLocation_t
{
    HITLOC_NONE=0,
    HITLOC_HELMET=1,
    HITLOC_HEAD=2,
    HITLOC_NECK=3,
    HITLOC_TORSO_UPR=4,
    HITLOC_TORSO_LWR=5,
    HITLOC_R_ARM_UPR=6,
    HITLOC_L_ARM_UPR=7,
    HITLOC_R_ARM_LWR=8,
    HITLOC_L_ARM_LWR=9,
    HITLOC_R_HAND=10,
    HITLOC_L_HAND=11,
    HITLOC_R_LEG_UPR=12,
    HITLOC_L_LEG_UPR=13,
    HITLOC_R_LEG_LWR=14,
    HITLOC_L_LEG_LWR=15,
    HITLOC_R_FOOT=16,
    HITLOC_L_FOOT=17,
    HITLOC_GUN=18,
    HITLOC_SHIELD=19,
    HITLOC_NUM=20
};

struct VehicleHandler// Size=0x1c (Id=4896)
{
    void  ( * UpdateAnimScriptedMove)(struct Vehicle * );// Offset=0x0 Size=0x4
    void  ( * UpdatePathConstrainedMove)(struct Vehicle * );// Offset=0x4 Size=0x4
    void  ( * UpdatePathFollowMove)(struct Vehicle * );// Offset=0x8 Size=0x4
    void  ( * UpdateTrackMove)(struct Vehicle * );// Offset=0xc Size=0x4
    void  ( * UpdateAiMove)(struct Vehicle * );// Offset=0x10 Size=0x4
    void  ( * UpdatePlayerMove)(struct Vehicle * );// Offset=0x14 Size=0x4
    void  ( * UpdateDefaultMove)(struct Vehicle * );// Offset=0x18 Size=0x4
};

enum _unnamed_4897
{
    ENT_HANDLER_NULL=0,
    ENT_HANDLER_TRIGGER_MULTIPLE=1,
    ENT_HANDLER_TRIGGER_HURT=2,
    ENT_HANDLER_TRIGGER_HURT_TOUCH=3,
    ENT_HANDLER_TRIGGER_DAMAGE=4,
    ENT_HANDLER_SCRIPT_MOVER=5,
    ENT_HANDLER_SCRIPT_MODEL=6,
    ENT_HANDLER_GRENADE=7,
    ENT_HANDLER_TIMED_OBJECT=8,
    ENT_HANDLER_ROCKET=9,
    ENT_HANDLER_CLIENT=10,
    ENT_HANDLER_CLIENT_SPECTATOR=11,
    ENT_HANDLER_CLIENT_DEAD=12,
    ENT_HANDLER_PLAYER_CLONE=13,
    ENT_HANDLER_TURRET_INIT=14,
    ENT_HANDLER_TURRET=15,
    ENT_HANDLER_DROPPED_ITEM=16,
    ENT_HANDLER_ITEM_INIT=17,
    ENT_HANDLER_ITEM=18,
    ENT_HANDLER_PRIMARY_LIGHT=19,
    ENT_HANDLER_PLAYER_BLOCK=20,
    ENT_HANDLER_VEHICLE=21,
    ENT_HANDLER_COUNT=22
};

enum _unnamed_4898
{
    PMOVE_HANDLER_CLIENT=0,
    PMOVE_HANDLER_SERVER=1,
    PMOVE_HANDLER_SERVER_AI=2,
    PMOVE_HANDLER_COUNT=3
};

enum saveFieldtype_t
{
    SF_NONE=0,
    SF_STRING=1,
    SF_MODEL=2,
    SF_ENTITY=3,
    SF_ENTHANDLE=4,
    SF_CLIENT=5,
    SF_VEHICLE=6,
    SF_TURRET=7,
    SF_THREAD=8,
    SF_PHYS_OBJ=9,
    SF_ANIMTREE=10,
    SF_TYPE_TAG_INFO=11
};

enum _unnamed_4900
{
    SCR_SYS_GAME=1
};

struct scr_data_t// Size=0x3b4c (Id=4901)
{
    union // Size=0x8 (Id=0)
    {
        int levelscript;// Offset=0x0 Size=0x4
        int gametypescript;// Offset=0x4 Size=0x4
        struct <unnamed-type-gametype>// Size=0x10b8 (Id=54694)
        {
            int main;// Offset=0x0 Size=0x4
            int startupgametype;// Offset=0x4 Size=0x4
            int playerconnect;// Offset=0x8 Size=0x4
            int playerdisconnect;// Offset=0xc Size=0x4
            int playerdamage;// Offset=0x10 Size=0x4
            int playerkilled;// Offset=0x14 Size=0x4
            int vehicleDamage;// Offset=0x18 Size=0x4
            int votecalled;// Offset=0x1c Size=0x4
            int playervote;// Offset=0x20 Size=0x4
            int codeendgame;// Offset=0x24 Size=0x4
            int playerlaststand;// Offset=0x28 Size=0x4
            int playermigrated;// Offset=0x2c Size=0x4
            int updateGameTypeList;// Offset=0x30 Size=0x4
            int iNumGameTypes;// Offset=0x34 Size=0x4
            struct gameTypeScript_t list[32];// Offset=0x38 Size=0x1080
        };
    };
    struct scr_data_t::<unnamed-type-gametype> gametype;// Offset=0x8 Size=0x10b8
    int delete_;// Offset=0x10c0 Size=0x4
    int initstructs;// Offset=0x10c4 Size=0x4
    int createstruct;// Offset=0x10c8 Size=0x4
    struct corpseInfo_t playerCorpseInfo[8];// Offset=0x10cc Size=0x2a80
};

enum DAMAGE_FLAGS
{
    DAMAGE_NOFLAG=0,
    DAMAGE_RADIUS=1,
    DAMAGE_NO_ARMOR=2,
    DAMAGE_NO_KNOCKBACK=4,
    DAMAGE_PENETRATION=8,
    DAMAGE_STUN=16,
    DAMAGE_SHIELD_EXPLOSIVE_IMPACT=32,
    DAMAGE_SHIELD_EXPLOSIVE_SPLASH=64
};

struct saveField_t// Size=0x8 (Id=4903)
{
    int ofs;// Offset=0x0 Size=0x4
    enum saveFieldtype_t type;// Offset=0x4 Size=0x4
};

enum _unnamed_4904
{
    MODELTYPE_CAPSULE=0,
    MODELTYPE_CYLINDER=1,
    MODELTYPE_DISK=2,
    MODELTYPE_TRIGGER=3,
    MODELTYPE_BRUSH=4
};

enum ExplosionType
{
    EXPLOSION_TYPE_DEFAULT=0,
    EXPLOSION_TYPE_TROPHY=1
};

struct VehicleLocalPhysics// Size=0x34 (Id=4906)
{
    struct trace_t groundTrace;// Offset=0x0 Size=0x2c
    int hasGround;// Offset=0x2c Size=0x4
    int onGround;// Offset=0x30 Size=0x4
};

enum _unnamed_4907
{
    ACTIVE_STATE_INACTIVE=0,
    ACTIVE_STATE_ACTIVE=1,
    ACTIVE_STATE_WANTS_TURRET_DISMOUNT=2
};

struct VehiclePhysicsBackup// Size=0x1f4 (Id=4908)
{
    struct VehiclePathPos pathPos;// Offset=0x0 Size=0xbc
    struct vehicle_physic_t phys;// Offset=0xbc Size=0x138
};

enum pmtype_t
{
    PM_NORMAL=0,
    PM_NORMAL_LINKED=1,
    PM_NOCLIP=2,
    PM_UFO=3,
    PM_MPVIEWER=4,
    PM_SPECTATOR=5,
    PM_INTERMISSION=6,
    PM_LASTSTAND=7,
    PM_DEAD=8,
    PM_DEAD_LINKED=9
};

struct entityHandler_t// Size=0x28 (Id=4910)
{
    void  ( * think)(struct gentity_s * );// Offset=0x0 Size=0x4
    void  ( * reached)(struct gentity_s * );// Offset=0x4 Size=0x4
    void  ( * blocked)(struct gentity_s * ,struct gentity_s * );// Offset=0x8 Size=0x4
    void  ( * touch)(struct gentity_s * ,struct gentity_s * ,int );// Offset=0xc Size=0x4
    void  ( * use)(struct gentity_s * ,struct gentity_s * ,struct gentity_s * );// Offset=0x10 Size=0x4
    void  ( * pain)(struct gentity_s * ,struct gentity_s * ,int ,float * ,const int ,float * ,const enum hitLocation_t ,const int );// Offset=0x14 Size=0x4
    void  ( * die)(struct gentity_s * ,struct gentity_s * ,struct gentity_s * ,int ,int ,const int ,float * ,const enum hitLocation_t ,int );// Offset=0x18 Size=0x4
    void  ( * controller)(struct gentity_s * ,int * );// Offset=0x1c Size=0x4
    enum meansOfDeath_t methodOfDeath;// Offset=0x20 Size=0x4
    enum meansOfDeath_t splashMethodOfDeath;// Offset=0x24 Size=0x4
};

struct qtime_s// Size=0x24 (Id=4911)
{
    int tm_sec;// Offset=0x0 Size=0x4
    int tm_min;// Offset=0x4 Size=0x4
    int tm_hour;// Offset=0x8 Size=0x4
    int tm_mday;// Offset=0xc Size=0x4
    int tm_mon;// Offset=0x10 Size=0x4
    int tm_year;// Offset=0x14 Size=0x4
    int tm_wday;// Offset=0x18 Size=0x4
    int tm_yday;// Offset=0x1c Size=0x4
    int tm_isdst;// Offset=0x20 Size=0x4
};

struct gameTypeScript_t// Size=0x84 (Id=4912)
{
    char pszScript[64];// Offset=0x0 Size=0x40
    char pszName[64];// Offset=0x40 Size=0x40
    int bTeamBased;// Offset=0x80 Size=0x4
};

struct GraphFloat// Size=0x148 (Id=4913)
{
    char name[64];// Offset=0x0 Size=0x40
    float knots[32][2];// Offset=0x40 Size=0x100
    unsigned short knotCount;// Offset=0x140 Size=0x2
    unsigned char __align0[2];// Offset=0x142 Size=0x2
    float scale;// Offset=0x144 Size=0x4
};

struct corpseInfo_t// Size=0x550 (Id=4914)
{
    struct XAnimTree_s * tree;// Offset=0x0 Size=0x4
    int entnum;// Offset=0x4 Size=0x4
    int time;// Offset=0x8 Size=0x4
    struct clientInfo_t ci;// Offset=0xc Size=0x540
    bool falling;// Offset=0x54c Size=0x1
};

struct VehicleHandler// Size=0x1c (Id=4915)
{
    void  ( * UpdateAnimScriptedMove)(struct Vehicle * );// Offset=0x0 Size=0x4
    void  ( * UpdatePathConstrainedMove)(struct Vehicle * );// Offset=0x4 Size=0x4
    void  ( * UpdatePathFollowMove)(struct Vehicle * );// Offset=0x8 Size=0x4
    void  ( * UpdateTrackMove)(struct Vehicle * );// Offset=0xc Size=0x4
    void  ( * UpdateAiMove)(struct Vehicle * );// Offset=0x10 Size=0x4
    void  ( * UpdatePlayerMove)(struct Vehicle * );// Offset=0x14 Size=0x4
    void  ( * UpdateDefaultMove)(struct Vehicle * );// Offset=0x18 Size=0x4
};

struct saveField_t// Size=0x8 (Id=4916)
{
    int ofs;// Offset=0x0 Size=0x4
    enum saveFieldtype_t type;// Offset=0x4 Size=0x4
};

enum SaveType
{
    SAVE_TYPE_INTERNAL=0,
    SAVE_TYPE_AUTOSAVE=1,
    SAVE_TYPE_CONSOLE=2,
    SAVE_TYPESCOUNT=3
};

struct SaveHeader// Size=0x480 (Id=4918)
{
    int saveVersion;// Offset=0x0 Size=0x4
    int gameCheckSum;// Offset=0x4 Size=0x4
    int saveCheckSum;// Offset=0x8 Size=0x4
    int saveId;// Offset=0xc Size=0x4
    bool demoPlayback;// Offset=0x10 Size=0x1
    bool splitscreen;// Offset=0x11 Size=0x1
    unsigned char __align0[2];// Offset=0x12 Size=0x2
    int scrCheckSum[3];// Offset=0x14 Size=0xc
    char mapName[256];// Offset=0x20 Size=0x100
    char buildNumber[128];// Offset=0x120 Size=0x80
    char gametype[256];// Offset=0x1a0 Size=0x100
    char buildVersionSuffix[16];// Offset=0x2a0 Size=0x10
    unsigned int networkProtocol;// Offset=0x2b0 Size=0x4
    char screenShotName[64];// Offset=0x2b4 Size=0x40
    char description[256];// Offset=0x2f4 Size=0x100
    char filename[64];// Offset=0x3f4 Size=0x40
    enum SaveType saveType;// Offset=0x434 Size=0x4
    struct qtime_s time;// Offset=0x438 Size=0x24
    int bodySize;// Offset=0x45c Size=0x4
    unsigned int pad[8];// Offset=0x460 Size=0x20
};

struct Turret// Size=0xc4 (Id=4919)
{
    bool inuse;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    int flags;// Offset=0x4 Size=0x4
    int fireTime;// Offset=0x8 Size=0x4
    float arcmin[2];// Offset=0xc Size=0x8
    float arcmax[2];// Offset=0x14 Size=0x8
    float dropPitch;// Offset=0x1c Size=0x4
    int stance;// Offset=0x20 Size=0x4
    int prevStance;// Offset=0x24 Size=0x4
    int fireSndDelay;// Offset=0x28 Size=0x4
    float userOrigin[3];// Offset=0x2c Size=0xc
    float playerSpread;// Offset=0x38 Size=0x4
    int state;// Offset=0x3c Size=0x4
    class EntHandle target;// Offset=0x40 Size=0x4
    float targetOffset[3];// Offset=0x44 Size=0xc
    class EntHandle manualTarget;// Offset=0x50 Size=0x4
    float manualTargetOffset[3];// Offset=0x54 Size=0xc
    int targetTime;// Offset=0x60 Size=0x4
    int stateChangeTime;// Offset=0x64 Size=0x4
    int modeChangeTime;// Offset=0x68 Size=0x4
    float maxRangeSquared;// Offset=0x6c Size=0x4
    int prevTargetIndex;// Offset=0x70 Size=0x4
    enum team_t eTeam;// Offset=0x74 Size=0x4
    int convergenceTime[2];// Offset=0x78 Size=0x8
    float targetPos[3];// Offset=0x80 Size=0xc
    float missOffsetNormalized[3];// Offset=0x8c Size=0xc
    float scanSpeed;// Offset=0x98 Size=0x4
    float scanDecelYaw;// Offset=0x9c Size=0x4
    int scanPauseTime;// Offset=0xa0 Size=0x4
    bool triggerDown;// Offset=0xa4 Size=0x1
    unsigned char __align1[3];// Offset=0xa5 Size=0x3
    float heatLevel;// Offset=0xa8 Size=0x4
    int heatPenaltyEndTime;// Offset=0xac Size=0x4
    float barrelRollRate;// Offset=0xb0 Size=0x4
    int autoRotationStopDelay;// Offset=0xb4 Size=0x4
    int lastAutoRotationRequestTime;// Offset=0xb8 Size=0x4
    unsigned char fireSnd;// Offset=0xbc Size=0x1
    unsigned char fireSndPlayer;// Offset=0xbd Size=0x1
    unsigned char stopSnd;// Offset=0xbe Size=0x1
    unsigned char stopSndPlayer;// Offset=0xbf Size=0x1
    unsigned char scanSnd;// Offset=0xc0 Size=0x1
};

struct SaveGame// Size=0x500 (Id=4920)
{
    struct SaveHeader header;// Offset=0x0 Size=0x480
    struct MemoryFile memFile;// Offset=0x480 Size=0x24
};

struct scr_data_t::<unnamed-type-gametype>// Size=0x10b8 (Id=4921)
{
    int main;// Offset=0x0 Size=0x4
    int startupgametype;// Offset=0x4 Size=0x4
    int playerconnect;// Offset=0x8 Size=0x4
    int playerdisconnect;// Offset=0xc Size=0x4
    int playerdamage;// Offset=0x10 Size=0x4
    int playerkilled;// Offset=0x14 Size=0x4
    int vehicleDamage;// Offset=0x18 Size=0x4
    int votecalled;// Offset=0x1c Size=0x4
    int playervote;// Offset=0x20 Size=0x4
    int codeendgame;// Offset=0x24 Size=0x4
    int playerlaststand;// Offset=0x28 Size=0x4
    int playermigrated;// Offset=0x2c Size=0x4
    int updateGameTypeList;// Offset=0x30 Size=0x4
    int iNumGameTypes;// Offset=0x34 Size=0x4
    struct gameTypeScript_t list[32];// Offset=0x38 Size=0x1080
};

struct MD5_CTX// Size=0x68 (Id=4922)
{
    unsigned long i[2];// Offset=0x0 Size=0x8
    unsigned long buf[4];// Offset=0x8 Size=0x10
    unsigned char in[64];// Offset=0x18 Size=0x40
    unsigned char digest[16];// Offset=0x58 Size=0x10
};

struct MD4_CTX// Size=0x58 (Id=4923)
{
    unsigned long state[4];// Offset=0x0 Size=0x10
    unsigned long count[2];// Offset=0x10 Size=0x8
    unsigned char buffer[64];// Offset=0x18 Size=0x40
};

struct cpose_t// Size=0x60 (Id=4924)
{
    unsigned short lightingHandle;// Offset=0x0 Size=0x2
    unsigned char eType;// Offset=0x2 Size=0x1
    unsigned char cullIn;// Offset=0x3 Size=0x1
    unsigned int usedInScene;// Offset=0x4 Size=0x4
    unsigned char isRagdoll;// Offset=0x8 Size=0x1
    unsigned char __align0[3];// Offset=0x9 Size=0x3
    int ragdollHandle;// Offset=0xc Size=0x4
    int killcamRagdollHandle;// Offset=0x10 Size=0x4
    int physObjId;// Offset=0x14 Size=0x4
    float origin[3];// Offset=0x18 Size=0xc
    float angles[3];// Offset=0x24 Size=0xc
    union // Size=0x60 (Id=0)
    {
        struct CEntPlayerInfo player;// Offset=0x30 Size=0x8
        struct CEntTurretInfo turret;// Offset=0x30 Size=0x24
        struct CEntVehicleInfo vehicle;// Offset=0x30 Size=0x30
        struct CEntFx fx;// Offset=0x30 Size=0x8
    };
};

struct DObjAnimMat// Size=0x20 (Id=4925)
{
    float quat[4];// Offset=0x0 Size=0x10
    float trans[3];// Offset=0x10 Size=0xc
    float transWeight;// Offset=0x1c Size=0x4
};

struct PhysContact// Size=0x24 (Id=4926)
{
    float pos[3];// Offset=0x0 Size=0xc
    float normal[3];// Offset=0xc Size=0xc
    float depth;// Offset=0x18 Size=0x4
    float friction;// Offset=0x1c Size=0x4
    float bounce;// Offset=0x20 Size=0x4
};

enum BodyState
{
    BS_DEAD=0,
    BS_DOBJ_WAIT=1,
    BS_VELOCITY_CAPTURE=2,
    BS_TUNNEL_TEST=3,
    BS_RUNNING=4,
    BS_IDLE=5,
    RAGDOLL_NUM_STATES=6
};

enum JointType
{
    RAGDOLL_JOINT_NONE=0,
    RAGDOLL_JOINT_HINGE=1,
    RAGDOLL_JOINT_SWIVEL=2
};

enum PhysicsGeomType
{
    PHYS_GEOM_NONE=0,
    PHYS_GEOM_BOX=1,
    PHYS_GEOM_BRUSHMODEL=2,
    PHYS_GEOM_BRUSH=3,
    PHYS_GEOM_COLLMAP=4,
    PHYS_GEOM_CYLINDER=5,
    PHYS_GEOM_CAPSULE=6,
    PHYS_GEOM_GLASS=7,
    PHYS_GEOM_COUNT=8
};

struct BoneOrientation// Size=0x20 (Id=4930)
{
    float origin[3];// Offset=0x0 Size=0xc
    int boneFlags;// Offset=0xc Size=0x4
    float orientation[4];// Offset=0x10 Size=0x10
};

struct BaseLerpBoneDef// Size=0x20 (Id=4931)
{
    char animBoneTextName[20];// Offset=0x0 Size=0x14
    unsigned int animBoneName;// Offset=0x14 Size=0x4
    unsigned int parentBoneIndex;// Offset=0x18 Size=0x4
    int lerpTime;// Offset=0x1c Size=0x4
};

struct BoneDef// Size=0x50 (Id=4932)
{
    char animBoneTextNames[2][20];// Offset=0x0 Size=0x28
    unsigned int animBoneNames[2];// Offset=0x28 Size=0x8
    float radius;// Offset=0x30 Size=0x4
    bool mirror;// Offset=0x34 Size=0x1
    unsigned char __align0[3];// Offset=0x35 Size=0x3
    float percent;// Offset=0x38 Size=0x4
    float mass;// Offset=0x3c Size=0x4
    float friction;// Offset=0x40 Size=0x4
    int parentBone;// Offset=0x44 Size=0x4
    float parentBoneDistSq;// Offset=0x48 Size=0x4
    enum PhysicsGeomType geomType;// Offset=0x4c Size=0x4
};

struct SelfPairDef// Size=0x2 (Id=4933)
{
    unsigned char bones[2];// Offset=0x0 Size=0x2
};

struct Bone// Size=0x20 (Id=4934)
{
    int parentBone;// Offset=0x0 Size=0x4
    unsigned char animBones[2];// Offset=0x4 Size=0x2
    unsigned char __align0[2];// Offset=0x6 Size=0x2
    int rigidBody;// Offset=0x8 Size=0x4
    float length;// Offset=0xc Size=0x4
    float parentDist;// Offset=0x10 Size=0x4
    float center[3];// Offset=0x14 Size=0xc
};

struct RagdollBody// Size=0xa40 (Id=4935)
{
    int references;// Offset=0x0 Size=0x4
    int ragdollDef;// Offset=0x4 Size=0x4
    int dobj;// Offset=0x8 Size=0x4
    struct DObj * obj;// Offset=0xc Size=0x4
    struct cpose_t * pose;// Offset=0x10 Size=0x4
    float poseOffset[3];// Offset=0x14 Size=0xc
    int localClientNum;// Offset=0x20 Size=0x4
    enum BodyState state;// Offset=0x24 Size=0x4
    int stateMsec;// Offset=0x28 Size=0x4
    int stateFrames;// Offset=0x2c Size=0x4
    int velCaptureMsec;// Offset=0x30 Size=0x4
    float prevCentroidPosition[3];// Offset=0x34 Size=0xc
    float centroidPosition[3];// Offset=0x40 Size=0xc
    float centroidVelocityEstimate[3];// Offset=0x4c Size=0xc
    int numBones;// Offset=0x58 Size=0x4
    struct Bone bones[14];// Offset=0x5c Size=0x1c0
    int numLerpBones;// Offset=0x21c Size=0x4
    struct LerpBone lerpBones[9];// Offset=0x220 Size=0x48
    int numJoints;// Offset=0x268 Size=0x4
    struct Joint joints[28];// Offset=0x26c Size=0xe0
    int curOrientationBuffer;// Offset=0x34c Size=0x4
    struct BoneOrientation boneOrientations[2][23];// Offset=0x350 Size=0x5c0
    struct BoneOrientation lerpBoneOffsets[9];// Offset=0x910 Size=0x120
    int hitLocation;// Offset=0xa30 Size=0x4
    float impactVector[3];// Offset=0xa34 Size=0xc
};

struct Joint// Size=0x8 (Id=4936)
{
    int joint;// Offset=0x0 Size=0x4
    int joint2;// Offset=0x4 Size=0x4
};

struct LerpBone// Size=0x8 (Id=4937)
{
    int parentBone;// Offset=0x0 Size=0x4
    unsigned char animBone;// Offset=0x4 Size=0x1
};

struct JointDef// Size=0x54 (Id=4938)
{
    unsigned char bone;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    enum JointType type;// Offset=0x4 Size=0x4
    int numLimitAxes;// Offset=0x8 Size=0x4
    float limitAxes[3][3];// Offset=0xc Size=0x24
    float minAngles[3];// Offset=0x30 Size=0xc
    float maxAngles[3];// Offset=0x3c Size=0xc
    float axisFriction[3];// Offset=0x48 Size=0xc
};

struct RagdollDef// Size=0xf58 (Id=4939)
{
    bool inUse;// Offset=0x0 Size=0x1
    bool bound;// Offset=0x1 Size=0x1
    unsigned char __align0[2];// Offset=0x2 Size=0x2
    int numBones;// Offset=0x4 Size=0x4
    struct BoneDef boneDefs[14];// Offset=0x8 Size=0x460
    int numBaseLerpBones;// Offset=0x468 Size=0x4
    struct BaseLerpBoneDef baseLerpBoneDefs[9];// Offset=0x46c Size=0x120
    int numJoints;// Offset=0x58c Size=0x4
    struct JointDef jointDefs[28];// Offset=0x590 Size=0x930
    int numSelfPairs;// Offset=0xec0 Size=0x4
    struct SelfPairDef selfPairDefs[33];// Offset=0xec4 Size=0x42
    unsigned char __align1[2];// Offset=0xf06 Size=0x2
    int hitLocMapping[20];// Offset=0xf08 Size=0x50
};

struct StateEnt// Size=0xc (Id=4940)
{
    bool  ( * enterFunc)(struct RagdollBody * ,enum BodyState ,enum BodyState );// Offset=0x0 Size=0x4
    bool  ( * exitFunc)(struct RagdollBody * ,enum BodyState ,enum BodyState );// Offset=0x4 Size=0x4
    void  ( * updateFunc)(struct RagdollBody * );// Offset=0x8 Size=0x4
};

struct <unnamed-type-axisTable>// Size=0x10 (Id=4941)
{
    char * name;// Offset=0x0 Size=0x4
    float axis[3];// Offset=0x4 Size=0xc
};

struct PhysicsCmd2// Size=0x14 (Id=4942)
{
    struct dxWorld * world;// Offset=0x0 Size=0x4
    unsigned short bodyCount;// Offset=0x4 Size=0x2
    unsigned short jointCount;// Offset=0x6 Size=0x2
    struct dxBody ** body;// Offset=0x8 Size=0x4
    struct dxJoint ** joint;// Offset=0xc Size=0x4
    float stepsize;// Offset=0x10 Size=0x4
};

enum GfxWarningType
{
    R_WARN_FRONTEND_ENT_LIMIT=0,
    R_WARN_KNOWN_MODELS=1,
    R_WARN_KNOWN_PER_CLIENT_MODELS=2,
    R_WARN_KNOWN_SPECIAL_MODELS=3,
    R_WARN_MODEL_LIGHT_CACHE=4,
    R_WARN_SCENE_ENTITIES=5,
    R_WARN_TEMP_SKIN_BUF_SIZE=6,
    R_WARN_MAX_SKINNED_CACHE_VERTICES=7,
    R_WARN_MAX_SCENE_SURFS_SIZE=8,
    R_WARN_MAX_SURF_BUF=9,
    R_WARN_PORTAL_PLANES=10,
    R_WARN_MAX_CLOUDS=11,
    R_WARN_MAX_DLIGHTS=12,
    R_WARN_SMODEL_LIGHTING=13,
    R_WARN_SMODEL_VIS_DATA_LIMIT=14,
    R_WARN_SMODEL_SURF_LIMIT=15,
    R_WARN_SMODEL_SURF_DELAY_LIMIT=16,
    R_WARN_BSPSURF_DATA_LIMIT=17,
    R_WARN_MAX_DRAWSURFS=18,
    R_WARN_GFX_CODE_EMISSIVE_SURF_LIMIT=19,
    R_WARN_GFX_CODE_TRANS_SURF_LIMIT=20,
    R_WARN_GFX_GLASS_SURF_LIMIT=21,
    R_WARN_GFX_MARK_SURF_LIMIT=22,
    R_WARN_GFX_SPARK_SURF_LIMIT=23,
    R_WARN_MAX_SCENE_DRAWSURFS=24,
    R_WARN_MAX_FX_DRAWSURFS=25,
    R_WARN_NONEMISSIVE_FX_MATERIAL=26,
    R_WARN_NONLIT_MARK_MATERIAL=27,
    R_WARN_CMDBUF_OVERFLOW=28,
    R_WARN_MISSING_DECL_NONDEBUG=29,
    R_WARN_MAX_DYNENT_REFS=30,
    R_WARN_MAX_SCENE_DOBJ_REFS=31,
    R_WARN_MAX_SCENE_MODEL_REFS=32,
    R_WARN_MAX_SCENE_BRUSH_REFS=33,
    R_WARN_MAX_CODE_EMISSIVE_INDS=34,
    R_WARN_MAX_CODE_EMISSIVE_VERTS=35,
    R_WARN_MAX_CODE_EMISSIVE_ARGS=36,
    R_WARN_MAX_CODE_TRANS_INDS=37,
    R_WARN_MAX_CODE_TRANS_VERTS=38,
    R_WARN_MAX_CODE_TRANS_ARGS=39,
    R_WARN_MAX_GLASS_INDS=40,
    R_WARN_MAX_GLASS_VERTS=41,
    R_WARN_MAX_MARK_INDS=42,
    R_WARN_MAX_MARK_VERTS=43,
    R_WARN_MAX_SPARK_INDS=44,
    R_WARN_MAX_SPARK_VERTS=45,
    R_WARN_DEBUG_ALLOC=46,
    R_WARN_SPOT_LIGHT_LIMIT=47,
    R_WARN_FX_ELEM_LIMIT=48,
    R_WARN_FX_BOLT_LIMIT=49,
    R_WARN_WORKER_CMD_SIZE=50,
    R_WARN_PHYSICS_BODY=51,
    R_WARN_PHYSICS_JOINT=52,
    R_WARN_UNKNOWN_STATICMODEL_SHADER=53,
    R_WARN_UNKNOWN_XMODEL_SHADER=54,
    R_WARN_DYNAMIC_INDEX_BUFFER_SIZE=55,
    R_WARN_TOO_MANY_LIGHT_GRID_POINTS=56,
    R_WARN_FOGABLE_2DTEXT=57,
    R_WARN_FOGABLE_2DGLYPH=58,
    R_WARN_SUN_QUERY=59,
    R_WARN_ESTIMATED_BOUNDS_TOO_SMALL=60,
    R_WARN_COUNT=61
};

enum WorkerCmdType
{
    WRKCMD_PHYSICS=0,
    WRKCMD_FIRST_FRONTEND=1,
    WRKCMD_DPVS_CELL_DYN_BRUSH=1,
    WRKCMD_DPVS_CELL_DYN_MODEL=2,
    WRKCMD_DPVS_CELL_SCENE_ENT=3,
    WRKCMD_DPVS_ENTITY=4,
    WRKCMD_BOUNDS_ENT_DELAYED=5,
    WRKCMD_SPOT_SHADOW_ENT=6,
    WRKCMD_UPDATE_FX_NON_DEPENDENT=7,
    WRKCMD_UPDATE_GLASS=8,
    WRKCMD_UPDATE_FX_REMAINING=9,
    WRKCMD_DPVS_CELL_STATIC=10,
    WRKCMD_ADD_BSP=11,
    WRKCMD_ADD_STATICMODEL=12,
    WRKCMD_ADD_BSP_SUNSHADOW=13,
    WRKCMD_ADD_STATICMODEL_SUNSHADOW=14,
    WRKCMD_ADD_SCENE_ENT=15,
    WRKCMD_DPVS_CELL_GLASS=16,
    WRKCMD_GLASS_PIECE_LIGHT=17,
    WRKCMD_GENERATE_GLASS_VERTS=18,
    WRKCMD_GENERATE_MARK_VERTS=19,
    WRKCMD_GENERATE_DYN_MARK_VERTS=20,
    WRKCMD_GENERATE_FX_VERTS=21,
    WRKCMD_SKIN_XMODEL=22,
    WRKCMD_END_FRONTEND=23,
    WRKCMD_LAST_FRONTEND=22,
    WRKCMD_FX_RUN_PHYSICS=23,
    WRKCMD_RUN_PHYSICS=24,
    WRKCMD_STREAM_TABULATION=25,
    WRKCMD_DRAW_LIT_OPAQUE=26,
    WRKCMD_UPLOAD_WATER=27,
    WRKCMD_COUNT=28
};

enum _unnamed_4945
{
    ODE_BODY_FLAG_FINITE_ROTATIONS=1,
    ODE_BODY_FLAG_FINITE_ROTATION_AXIS=2,
    ODE_BODY_FLAG_DISABLED=4,
    ODE_BODY_FLAG_NO_GRAVITY=8,
    ODE_BODY_FLAG_AUTO_DISABLE=16,
    ODE_BODY_FLAG_HAS_CONTACTS=32,
    ODE_BODY_FLAG_USE_SOFT_CONTACTS=64
};

enum _unnamed_4946
{
    dMaxUserClasses=6
};

enum _unnamed_4947
{
    dBoxClass=0,
    dGeomTransformClass=1,
    dFirstSpaceClass=2,
    dSimpleSpaceClass=2,
    dLastSpaceClass=2,
    dFirstUserClass=3,
    dLastUserClass=8,
    dGeomNumClasses=9
};

struct dxQuickStepParameters// Size=0x8 (Id=4948)
{
    int num_iterations;// Offset=0x0 Size=0x4
    float w;// Offset=0x4 Size=0x4
};

struct dMass// Size=0x44 (Id=4949)
{
    float mass;// Offset=0x0 Size=0x4
    float c[4];// Offset=0x4 Size=0x10
    float I[12];// Offset=0x14 Size=0x30
    void dMass();
    void setZero();
    void setParameters(float ,float ,float ,float ,float ,float ,float ,float ,float ,float );
    void setSphere(float ,float );
    void setCappedCylinder(float ,int ,float ,float );
    void setBox(float ,float ,float ,float );
    void adjust(float );
    void translate(float ,float ,float );
    void rotate(float * );
    void add(struct dMass * );
};

struct dMass// Size=0x44 (Id=4950)
{
    float mass;// Offset=0x0 Size=0x4
    float c[4];// Offset=0x4 Size=0x10
    float I[12];// Offset=0x14 Size=0x30
    void dMass();
    void setZero();
    void setParameters(float ,float ,float ,float ,float ,float ,float ,float ,float ,float );
    void setSphere(float ,float );
    void setCappedCylinder(float ,int ,float ,float );
    void setBox(float ,float ,float ,float );
    void adjust(float );
    void translate(float ,float ,float );
    void rotate(float * );
    void add(struct dMass * );
};

class std::_Container_base_secure// Size=0x1 (Id=4951)
{
};

class std::allocator<void>// Size=0x1 (Id=4952)
{
    public void allocator<void>(class std::allocator<void> & );
    public void allocator<void>();
};

class std::allocator<void>// Size=0x1 (Id=4953)
{
    public void allocator<void>(class std::allocator<void> & );
    public void allocator<void>();
};

struct std::_Unsecure_char_traits_tag// Size=0x1 (Id=4954)
{
};

struct std::char_traits<wchar_t> : public std::_Char_traits_base// Size=0x1 (Id=4955)
{
    wchar_t * assign(wchar_t * ,unsigned int ,wchar_t );
    void assign(wchar_t & ,wchar_t & );
    bool eq(wchar_t & ,wchar_t & );
    bool lt(wchar_t & ,wchar_t & );
    int compare(wchar_t * ,wchar_t * ,unsigned int );
    unsigned int length(wchar_t * );
    wchar_t * copy(wchar_t * ,wchar_t * ,unsigned int );
    wchar_t * _Copy_s(wchar_t * ,unsigned int ,wchar_t * ,unsigned int );
    wchar_t * find(wchar_t * ,unsigned int ,wchar_t & );
    wchar_t * move(wchar_t * ,wchar_t * ,unsigned int );
    wchar_t * _Move_s(wchar_t * ,unsigned int ,wchar_t * ,unsigned int );
    wchar_t to_char_type(unsigned short & );
    unsigned short to_int_type(wchar_t & );
    bool eq_int_type(unsigned short & ,unsigned short & );
    unsigned short eof();
    unsigned short not_eof(unsigned short & );
};

struct std::_Char_traits_base// Size=0x1 (Id=4956)
{
};

struct std::char_traits<char> : public std::_Char_traits_base// Size=0x1 (Id=4957)
{
    char * assign(char * ,unsigned int ,char );
    void assign(char & ,char & );
    bool eq(char & ,char & );
    bool lt(char & ,char & );
    int compare(char * ,char * ,unsigned int );
    unsigned int length(char * );
    char * copy(char * ,char * ,unsigned int );
    char * _Copy_s(char * ,unsigned int ,char * ,unsigned int );
    char * find(char * ,unsigned int ,char & );
    char * move(char * ,char * ,unsigned int );
    char * _Move_s(char * ,unsigned int ,char * ,unsigned int );
    char to_char_type(int & );
    int to_int_type(char & );
    bool eq_int_type(int & ,int & );
    int eof();
    int not_eof(int & );
};

class std::bad_cast : public stdext::exception// Size=0x8 (Id=4958)
{
    public void bad_cast(class std::bad_cast & );
    public void bad_cast(char * );
    public void ~bad_cast();
    protected void _Doraise();
    public class std::bad_cast & operator=(class std::bad_cast & );
    public void __dflt_ctor_closure();
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class std::bad_cast : public stdext::exception// Size=0x8 (Id=4959)
{
    public void bad_cast(class std::bad_cast & );
    public void bad_cast(char * );
    public void ~bad_cast();
    protected void _Doraise();
    public class std::bad_cast & operator=(class std::bad_cast & );
    public void __dflt_ctor_closure();
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

struct std::_Unchanged_checked_iterator_base_type_tag// Size=0x1 (Id=4960)
{
};

class std::_Iterator_base_universal// Size=0x1 (Id=4961)
{
};

class std::bad_typeid : public stdext::exception// Size=0x8 (Id=4962)
{
    public void bad_typeid(class std::bad_typeid & );
    public void bad_typeid(char * );
    public void ~bad_typeid();
    protected void _Doraise();
    public class std::bad_typeid & operator=(class std::bad_typeid & );
    public void __dflt_ctor_closure();
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class std::bad_typeid : public stdext::exception// Size=0x8 (Id=4963)
{
    public void bad_typeid(class std::bad_typeid & );
    public void bad_typeid(char * );
    public void ~bad_typeid();
    protected void _Doraise();
    public class std::bad_typeid & operator=(class std::bad_typeid & );
    public void __dflt_ctor_closure();
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class std::_Container_base_aux// Size=0x4 (Id=4964)
{
    public void _Container_base_aux(class std::_Container_base_aux & );
    public void _Container_base_aux();
    public class std::_Container_base_aux & operator=(class std::_Container_base_aux & );
    public void _Swap_aux(class std::_Container_base_aux & );
    public void ~_Container_base_aux();
    protected class std::_Aux_cont * _Myownedaux;// Offset=0x0 Size=0x4
    public void * __vecDelDtor(unsigned int );
};

class std::_Iterator_base_aux : public std::_Iterator_base_universal// Size=0x4 (Id=4965)
{
    public void _Iterator_base_aux();
    public void _Set_container(const class std::_Container_base_aux * );
    public class std::_Container_base_aux * _Getmycont();
    public bool _Same_container(class std::_Iterator_base_aux & );
    public bool _Has_container();
    private class std::_Aux_cont * _Myaux;// Offset=0x0 Size=0x4
};

class std::_Aux_cont// Size=0x4 (Id=4966)
{
    public void _Aux_cont(const class std::_Container_base_aux * );
    public class std::_Container_base_aux * _Getcont();
    private class std::_Container_base_aux * _Mycontainer;// Offset=0x0 Size=0x4
};

class std::_Iterator_base_aux : public std::_Iterator_base_universal// Size=0x4 (Id=4967)
{
    public void _Iterator_base_aux();
    public void _Set_container(const class std::_Container_base_aux * );
    public class std::_Container_base_aux * _Getmycont();
    public bool _Same_container(class std::_Iterator_base_aux & );
    public bool _Has_container();
    private class std::_Aux_cont * _Myaux;// Offset=0x0 Size=0x4
};

class std::_Container_base_aux// Size=0x4 (Id=4968)
{
    public void _Container_base_aux(class std::_Container_base_aux & );
    public void _Container_base_aux();
    public class std::_Container_base_aux & operator=(class std::_Container_base_aux & );
    public void _Swap_aux(class std::_Container_base_aux & );
    public void ~_Container_base_aux();
    protected class std::_Aux_cont * _Myownedaux;// Offset=0x0 Size=0x4
    public void * __vecDelDtor(unsigned int );
};

struct std::forward_iterator_tag : public std::input_iterator_tag// Size=0x1 (Id=4969)
{
};

class stdext::exception// Size=0x8 (Id=4970)
{
    public void  ( * )(class stdext::exception & ) _Set_raise_handler(void  ( * )(class stdext::exception & ));
    public void exception(class stdext::exception & );
    public void exception(char * ,int );
    public class stdext::exception & operator=(class stdext::exception & );
    public void ~exception();
    public char * what();
    public void _Raise();
    protected void _Doraise();
    private unsigned char __align0[4];// Offset=0x0 Size=0x4
    protected char * _Ptr;// Offset=0x4 Size=0x4
    public void __dflt_ctor_closure();
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class std::tr1::bad_weak_ptr : public stdext::exception// Size=0x8 (Id=4971)
{
    public void bad_weak_ptr(class std::tr1::bad_weak_ptr & );
    public void bad_weak_ptr(char * );
    public char * what();
    public void ~bad_weak_ptr();
    public class std::tr1::bad_weak_ptr & operator=(class std::tr1::bad_weak_ptr & );
    public void __dflt_ctor_closure();
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class std::tr1::bad_weak_ptr : public stdext::exception// Size=0x8 (Id=4972)
{
    public void bad_weak_ptr(class std::tr1::bad_weak_ptr & );
    public void bad_weak_ptr(char * );
    public char * what();
    public void ~bad_weak_ptr();
    public class std::tr1::bad_weak_ptr & operator=(class std::tr1::bad_weak_ptr & );
    public void __dflt_ctor_closure();
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class std::tr1::_Ref_count_base// Size=0x10 (Id=4973)
{
    private void _Destroy();
    private void _Delete_this();
    private unsigned char __align0[4];// Offset=0x0 Size=0x4
    private void * _Ptr;// Offset=0x4 Size=0x4
    private long _Uses;// Offset=0x8 Size=0x4
    private long _Weaks;// Offset=0xc Size=0x4
    public void _Ref_count_base(class std::tr1::_Ref_count_base & );
    protected void _Ref_count_base(void * );
    public void ~_Ref_count_base();
    public bool _Incref_nz();
    public void _Incref();
    public void _Incwref();
    public void _Decref();
    public void _Decwref();
    public long _Use_count();
    public bool _Expired();
    public void * _Get_deleter(class type_info & );
    public void * _Getptr();
    public class std::tr1::_Ref_count_base & operator=(class std::tr1::_Ref_count_base & );
    public void * __vecDelDtor(unsigned int );
};

class std::tr1::_Ref_count_base// Size=0x10 (Id=4974)
{
    private void _Destroy();
    private void _Delete_this();
    private unsigned char __align0[4];// Offset=0x0 Size=0x4
    private void * _Ptr;// Offset=0x4 Size=0x4
    private long _Uses;// Offset=0x8 Size=0x4
    private long _Weaks;// Offset=0xc Size=0x4
    public void _Ref_count_base(class std::tr1::_Ref_count_base & );
    protected void _Ref_count_base(void * );
    public void ~_Ref_count_base();
    public bool _Incref_nz();
    public void _Incref();
    public void _Incwref();
    public void _Decref();
    public void _Decwref();
    public long _Use_count();
    public bool _Expired();
    public void * _Get_deleter(class type_info & );
    public void * _Getptr();
    public class std::tr1::_Ref_count_base & operator=(class std::tr1::_Ref_count_base & );
    public void * __vecDelDtor(unsigned int );
};

struct std::_Unchecked_iterator_tag// Size=0x1 (Id=4975)
{
};

class std::__non_rtti_object : public std::bad_typeid// Size=0x8 (Id=4976)
{
    public void __non_rtti_object(class std::__non_rtti_object & );
    public void __non_rtti_object(char * );
    public void ~__non_rtti_object();
    public class std::__non_rtti_object & operator=(class std::__non_rtti_object & );
    public void * __vecDelDtor(unsigned int );
};

class std::__non_rtti_object : public std::bad_typeid// Size=0x8 (Id=4977)
{
    public void __non_rtti_object(class std::__non_rtti_object & );
    public void __non_rtti_object(char * );
    public void ~__non_rtti_object();
    public class std::__non_rtti_object & operator=(class std::__non_rtti_object & );
    public void * __vecDelDtor(unsigned int );
};

class std::_Container_base_secure// Size=0x1 (Id=4978)
{
};

class std::_Iterator_base_secure : public std::_Iterator_base_universal// Size=0x4 (Id=4979)
{
    public void _Iterator_base_secure();
    public class std::_Container_base_secure * _Getmycont();
    public bool _Same_container(class std::_Iterator_base_secure & );
    public bool _Has_container();
    public class std::_Container_base_secure * _Mycont;// Offset=0x0 Size=0x4
};

class std::_Iterator_base_secure : public std::_Iterator_base_universal// Size=0x4 (Id=4980)
{
    public void _Iterator_base_secure();
    public class std::_Container_base_secure * _Getmycont();
    public bool _Same_container(class std::_Iterator_base_secure & );
    public bool _Has_container();
    public class std::_Container_base_secure * _Mycont;// Offset=0x0 Size=0x4
};

struct std::_Range_checked_iterator_tag// Size=0x1 (Id=4981)
{
};

struct std::_Undefined_inner_type_tag// Size=0x1 (Id=4982)
{
};

struct std::random_access_iterator_tag : public std::bidirectional_iterator_tag// Size=0x1 (Id=4983)
{
};

class std::_Aux_cont// Size=0x4 (Id=4984)
{
    public void _Aux_cont(const class std::_Container_base_aux * );
    public class std::_Container_base_aux * _Getcont();
    private class std::_Container_base_aux * _Mycontainer;// Offset=0x0 Size=0x4
};

struct std::input_iterator_tag// Size=0x1 (Id=4985)
{
};

struct std::bidirectional_iterator_tag : public std::forward_iterator_tag// Size=0x1 (Id=4986)
{
};

struct dxBody : public dObject// Size=0x150 (Id=4987)
{
    unsigned char __align0[20];// Offset=0x0 Size=0x14
    struct dxJointNode * firstjoint;// Offset=0x14 Size=0x4
    int flags;// Offset=0x18 Size=0x4
    struct dxGeom * geom;// Offset=0x1c Size=0x4
    struct dMass mass;// Offset=0x20 Size=0x44
    float invI[12];// Offset=0x64 Size=0x30
    float invMass;// Offset=0x94 Size=0x4
    float facc[4];// Offset=0x98 Size=0x10
    float tacc[4];// Offset=0xa8 Size=0x10
    float finite_rot_axis[4];// Offset=0xb8 Size=0x10
    struct dxAutoDisable adis;// Offset=0xc8 Size=0x10
    float adis_timeleft;// Offset=0xd8 Size=0x4
    int adis_stepsleft;// Offset=0xdc Size=0x4
    struct dxBodyInfo info;// Offset=0xe0 Size=0x70
    void dxBody();
};

class stdext::bad_exception : public stdext::exception// Size=0x8 (Id=4988)
{
    public void bad_exception(class stdext::bad_exception & );
    public void bad_exception(char * );
    public void ~bad_exception();
    protected void _Doraise();
    public class stdext::bad_exception & operator=(class stdext::bad_exception & );
    public void __dflt_ctor_closure();
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class stdext::bad_exception : public stdext::exception// Size=0x8 (Id=4989)
{
    public void bad_exception(class stdext::bad_exception & );
    public void bad_exception(char * );
    public void ~bad_exception();
    protected void _Doraise();
    public class stdext::bad_exception & operator=(class stdext::bad_exception & );
    public void __dflt_ctor_closure();
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class stdext::exception// Size=0x8 (Id=4990)
{
    public void  ( * )(class stdext::exception & ) _Set_raise_handler(void  ( * )(class stdext::exception & ));
    public void exception(class stdext::exception & );
    public void exception(char * ,int );
    public class stdext::exception & operator=(class stdext::exception & );
    public void ~exception();
    public char * what();
    public void _Raise();
    protected void _Doraise();
    private unsigned char __align0[4];// Offset=0x0 Size=0x4
    protected char * _Ptr;// Offset=0x4 Size=0x4
    public void __dflt_ctor_closure();
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class stdext::bad_alloc : public stdext::exception// Size=0x8 (Id=4991)
{
    public void bad_alloc(class stdext::bad_alloc & );
    public void bad_alloc();
    public void bad_alloc(char * );
    public void ~bad_alloc();
    protected void _Doraise();
    public class stdext::bad_alloc & operator=(class stdext::bad_alloc & );
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class stdext::bad_alloc : public stdext::exception// Size=0x8 (Id=4992)
{
    public void bad_alloc(class stdext::bad_alloc & );
    public void bad_alloc();
    public void bad_alloc(char * );
    public void ~bad_alloc();
    protected void _Doraise();
    public class stdext::bad_alloc & operator=(class stdext::bad_alloc & );
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class type_info// Size=0xc (Id=4993)
{
    public void ~type_info();
    public bool operator==(class type_info & );
    public bool operator!=(class type_info & );
    public int before(class type_info & );
    public char * name(struct __type_info_node * );
    public char * raw_name();
    private unsigned char __align0[4];// Offset=0x0 Size=0x4
    private void * _m_data;// Offset=0x4 Size=0x4
    private char _m_d_name[1];// Offset=0x8 Size=0x1
    private void type_info(class type_info & );
    private class type_info & operator=(class type_info & );
    private char * _Name_base(class type_info * ,struct __type_info_node * );
    private void _Type_info_dtor(class type_info * );
    public void * __vecDelDtor(unsigned int );
};

struct dxAutoDisable// Size=0x10 (Id=4994)
{
    float linearThresholdSqrd;// Offset=0x0 Size=0x4
    float angularThresholdSqrd;// Offset=0x4 Size=0x4
    float idle_time;// Offset=0x8 Size=0x4
    int idle_steps;// Offset=0xc Size=0x4
};

struct dxContactParameters// Size=0x8 (Id=4995)
{
    float max_vel;// Offset=0x0 Size=0x4
    float min_depth;// Offset=0x4 Size=0x4
};

struct dxWorld : public dBase// Size=0x5c (Id=4996)
{
    struct dxBody * firstbody;// Offset=0x0 Size=0x4
    struct dxJoint * firstjoint;// Offset=0x4 Size=0x4
    int bodyCount;// Offset=0x8 Size=0x4
    int jointCount;// Offset=0xc Size=0x4
    struct dxWorldStepInfo stepInfo;// Offset=0x10 Size=0x28
    struct dxAutoDisable adis;// Offset=0x38 Size=0x10
    int adis_flag;// Offset=0x48 Size=0x4
    float seconds;// Offset=0x4c Size=0x4
    int useWorkerCmd;// Offset=0x50 Size=0x4
    enum PhysWorld worldIndex;// Offset=0x54 Size=0x4
    float angularVelocityMax;// Offset=0x58 Size=0x4
};

struct dObject : public dBase// Size=0x14 (Id=4997)
{
    struct dxWorld * world;// Offset=0x0 Size=0x4
    struct dObject * next;// Offset=0x4 Size=0x4
    struct dObject ** tome;// Offset=0x8 Size=0x4
    void * userdata;// Offset=0xc Size=0x4
    int tag;// Offset=0x10 Size=0x4
};

struct dxBody : public dObject// Size=0x150 (Id=4998)
{
    unsigned char __align0[20];// Offset=0x0 Size=0x14
    struct dxJointNode * firstjoint;// Offset=0x14 Size=0x4
    int flags;// Offset=0x18 Size=0x4
    struct dxGeom * geom;// Offset=0x1c Size=0x4
    struct dMass mass;// Offset=0x20 Size=0x44
    float invI[12];// Offset=0x64 Size=0x30
    float invMass;// Offset=0x94 Size=0x4
    float facc[4];// Offset=0x98 Size=0x10
    float tacc[4];// Offset=0xa8 Size=0x10
    float finite_rot_axis[4];// Offset=0xb8 Size=0x10
    struct dxAutoDisable adis;// Offset=0xc8 Size=0x10
    float adis_timeleft;// Offset=0xd8 Size=0x4
    int adis_stepsleft;// Offset=0xdc Size=0x4
    struct dxBodyInfo info;// Offset=0xe0 Size=0x70
    void dxBody();
};

struct ShouldNotRemoveJoint// Size=0x8 (Id=4999)
{
    struct dxBody ** body;// Offset=0x0 Size=0x4
    int bodyCount;// Offset=0x4 Size=0x4
    void ShouldNotRemoveJoint(struct dxBody ** ,int );
    bool operator()(struct dxJoint * );
};

struct ShouldNotRemoveJoint// Size=0x8 (Id=5000)
{
    struct dxBody ** body;// Offset=0x0 Size=0x4
    int bodyCount;// Offset=0x4 Size=0x4
    void ShouldNotRemoveJoint(struct dxBody ** ,int );
    bool operator()(struct dxJoint * );
};

enum JointType
{
    ODE_JOINT_TYPE_NONE=0,
    ODE_JOINT_TYPE_BALL=1,
    ODE_JOINT_TYPE_HINGE=2,
    ODE_JOINT_TYPE_SLIDER=3,
    ODE_JOINT_TYPE_CONTACT=4,
    ODE_JOINT_TYPE_ORIENTATION=5,
    ODE_JOINT_TYPE_PATH=6,
    ODE_JOINT_TYPE_UNIVERSAL=7,
    ODE_JOINT_TYPE_FIXED=8,
    ODE_JOINT_TYPE_NULL=9,
    ODE_JOINT_TYPE_AMOTOR=10
};

struct dxJoint : public dObject// Size=0x3c (Id=5002)
{
    union // Size=0x8 (Id=0)
    {
        struct Info1// Size=0x8 (Id=55494)
        {
            int m;// Offset=0x0 Size=0x4
            int nub;// Offset=0x4 Size=0x4
        };
        struct Info2// Size=0x34 (Id=55497)
        {
            float fps;// Offset=0x0 Size=0x4
            float erp;// Offset=0x4 Size=0x4
            float * J1l;// Offset=0x8 Size=0x4
            float * J1a;// Offset=0xc Size=0x4
            float * J2l;// Offset=0x10 Size=0x4
            float * J2a;// Offset=0x14 Size=0x4
            int rowskip;// Offset=0x18 Size=0x4
            float * c;// Offset=0x1c Size=0x4
            float * cfm;// Offset=0x20 Size=0x4
            float * lo;// Offset=0x24 Size=0x4
            float * hi;// Offset=0x28 Size=0x4
            unsigned int * oneSided;// Offset=0x2c Size=0x4
            int * findex;// Offset=0x30 Size=0x4
        };
    };
    enum JointType type;// Offset=0x14 Size=0x4
    int flags;// Offset=0x18 Size=0x4
    struct dxJointNode node[2];// Offset=0x1c Size=0x20
};

struct dxJoint::Info2// Size=0x34 (Id=5003)
{
    float fps;// Offset=0x0 Size=0x4
    float erp;// Offset=0x4 Size=0x4
    float * J1l;// Offset=0x8 Size=0x4
    float * J1a;// Offset=0xc Size=0x4
    float * J2l;// Offset=0x10 Size=0x4
    float * J2a;// Offset=0x14 Size=0x4
    int rowskip;// Offset=0x18 Size=0x4
    float * c;// Offset=0x1c Size=0x4
    float * cfm;// Offset=0x20 Size=0x4
    float * lo;// Offset=0x24 Size=0x4
    float * hi;// Offset=0x28 Size=0x4
    unsigned int * oneSided;// Offset=0x2c Size=0x4
    int * findex;// Offset=0x30 Size=0x4
};

struct dxJoint::Info1// Size=0x8 (Id=5004)
{
    int m;// Offset=0x0 Size=0x4
    int nub;// Offset=0x4 Size=0x4
};

struct dxBodyInfo// Size=0x70 (Id=5005)
{
    float pos[4];// Offset=0x0 Size=0x10
    float q[4];// Offset=0x10 Size=0x10
    float R[12];// Offset=0x20 Size=0x30
    float lvel[4];// Offset=0x50 Size=0x10
    float avel[4];// Offset=0x60 Size=0x10
};

struct __type_info_node// Size=0x8 (Id=5006)
{
    void * memPtr;// Offset=0x0 Size=0x4
    struct __type_info_node * next;// Offset=0x4 Size=0x4
};

struct dxWorldStepInfo// Size=0x28 (Id=5007)
{
    float gravity[4];// Offset=0x0 Size=0x10
    float global_erp;// Offset=0x10 Size=0x4
    float global_cfm;// Offset=0x14 Size=0x4
    struct dxQuickStepParameters qs;// Offset=0x18 Size=0x8
    struct dxContactParameters contactp;// Offset=0x20 Size=0x8
};

struct dBase// Size=0x1 (Id=5008)
{
    void * operator new(unsigned int ,void * );
    void * operator new(unsigned int );
    void operator delete(void * ,void * );
    void operator delete(void * ,unsigned int );
    void * operator new[](unsigned int );
    void operator delete[](void * ,unsigned int );
};

struct dxJointNode// Size=0x10 (Id=5009)
{
    struct dxJoint * joint;// Offset=0x0 Size=0x4
    struct dxBody * body;// Offset=0x4 Size=0x4
    int bodyTag;// Offset=0x8 Size=0x4
    struct dxJointNode * next;// Offset=0xc Size=0x4
};

enum _unnamed_5010
{
    ODE_ONESIDED_OFF=0,
    ODE_ONESIDED_BODY1=1,
    ODE_ONESIDED_BODY2=2
};

enum _unnamed_5011
{
    GEOM_DIRTY=1,
    GEOM_AABB_BAD=2,
    GEOM_PLACEABLE=4,
    GEOM_ENABLED=8,
    RAY_FIRSTCONTACT=65536,
    RAY_BACKFACECULL=131072,
    RAY_CLOSEST_HIT=262144
};

struct QuickstepData// Size=0x14d00 (Id=5012)
{
    struct ConstraintRowData rowData[576];// Offset=0x0 Size=0x14400
    struct SorLcpData sd;// Offset=0x14400 Size=0x900
};

struct ConstraintRowData// Size=0x90 (Id=5013)
{
    float J_body1Linear[3];// Offset=0x0 Size=0xc
    float lambda;// Offset=0xc Size=0x4
    float J_body1Angular[3];// Offset=0x10 Size=0xc
    int body1;// Offset=0x1c Size=0x4
    float J_body2Linear[3];// Offset=0x20 Size=0xc
    int body2;// Offset=0x2c Size=0x4
    float J_body2Angular[3];// Offset=0x30 Size=0xc
    float padding1;// Offset=0x3c Size=0x4
    float iMJ_body1Linear[3];// Offset=0x40 Size=0xc
    float padding2;// Offset=0x4c Size=0x4
    float iMJ_body1Angular[3];// Offset=0x50 Size=0xc
    float padding3;// Offset=0x5c Size=0x4
    float iMJ_body2Linear[3];// Offset=0x60 Size=0xc
    float padding4;// Offset=0x6c Size=0x4
    float iMJ_body2Angular[3];// Offset=0x70 Size=0xc
    unsigned int oneSided;// Offset=0x7c Size=0x4
    float lo;// Offset=0x80 Size=0x4
    float hi;// Offset=0x84 Size=0x4
    float rhs;// Offset=0x88 Size=0x4
    float Ad;// Offset=0x8c Size=0x4
};

struct ConstraintForce// Size=0x20 (Id=5014)
{
    float linear[3];// Offset=0x0 Size=0xc
    float padding0;// Offset=0xc Size=0x4
    float angular[3];// Offset=0x10 Size=0xc
    float padding1;// Offset=0x1c Size=0x4
};

struct dxGeom : public dBase// Size=0x4c (Id=5015)
{
    union // Size=0xc4 (Id=0)
    {
        unsigned char __align0[4];// Offset=0x0 Size=0x4
        int type;// Offset=0x4 Size=0x4
        int gflags;// Offset=0x8 Size=0x4
        void * data;// Offset=0xc Size=0x4
        struct dxBody * body;// Offset=0x10 Size=0x4
        struct dxGeom * body_next;// Offset=0x14 Size=0x4
        float * pos;// Offset=0x18 Size=0x4
        float * R;// Offset=0x1c Size=0x4
        struct dxGeom * next;// Offset=0x20 Size=0x4
        struct dxGeom ** tome;// Offset=0x24 Size=0x4
        struct dxSpace * parent_space;// Offset=0x28 Size=0x4
        float aabb[6];// Offset=0x2c Size=0x18
        unsigned long category_bits;// Offset=0x44 Size=0x4
        unsigned long collide_bits;// Offset=0x48 Size=0x4
        void dxGeom(struct dxGeom & );
        void dxGeom(struct dxSpace * ,int ,struct dxBody * );// Offset=0x0 Size=0xc4
        void ~dxGeom();
        void computeAABB();
        int AABBTest(struct dxGeom * ,float * );// Offset=0x0 Size=0x8
        void recomputeAABB();
        void spaceAdd(struct dxGeom ** );
        void spaceRemove();
        void bodyAdd(struct dxBody * );
        void bodyRemove();// Offset=0x0 Size=0x58
        struct dxGeom & operator=(struct dxGeom & );
        void * __vecDelDtor(unsigned int );
    };
};

struct dxGeom : public dBase// Size=0x4c (Id=5016)
{
    union // Size=0xc4 (Id=0)
    {
        unsigned char __align0[4];// Offset=0x0 Size=0x4
        int type;// Offset=0x4 Size=0x4
        int gflags;// Offset=0x8 Size=0x4
        void * data;// Offset=0xc Size=0x4
        struct dxBody * body;// Offset=0x10 Size=0x4
        struct dxGeom * body_next;// Offset=0x14 Size=0x4
        float * pos;// Offset=0x18 Size=0x4
        float * R;// Offset=0x1c Size=0x4
        struct dxGeom * next;// Offset=0x20 Size=0x4
        struct dxGeom ** tome;// Offset=0x24 Size=0x4
        struct dxSpace * parent_space;// Offset=0x28 Size=0x4
        float aabb[6];// Offset=0x2c Size=0x18
        unsigned long category_bits;// Offset=0x44 Size=0x4
        unsigned long collide_bits;// Offset=0x48 Size=0x4
        void dxGeom(struct dxGeom & );
        void dxGeom(struct dxSpace * ,int ,struct dxBody * );// Offset=0x0 Size=0xc4
        void ~dxGeom();
        void computeAABB();
        int AABBTest(struct dxGeom * ,float * );// Offset=0x0 Size=0x8
        void recomputeAABB();
        void spaceAdd(struct dxGeom ** );
        void spaceRemove();
        void bodyAdd(struct dxBody * );
        void bodyRemove();// Offset=0x0 Size=0x58
        struct dxGeom & operator=(struct dxGeom & );
        void * __vecDelDtor(unsigned int );
    };
};

struct dxSpace : public dxGeom// Size=0x64 (Id=5017)
{
    union // Size=0x138 (Id=0)
    {
        unsigned char __align0[76];// Offset=0x0 Size=0x4c
        int count;// Offset=0x4c Size=0x4
        struct dxGeom * first;// Offset=0x50 Size=0x4
        int cleanup;// Offset=0x54 Size=0x4
        int current_index;// Offset=0x58 Size=0x4
        struct dxGeom * current_geom;// Offset=0x5c Size=0x4
        int lock_count;// Offset=0x60 Size=0x4
        void dxSpace(struct dxSpace & );
        void dxSpace(struct dxSpace * );// Offset=0x0 Size=0x64
        void ~dxSpace();// Offset=0x0 Size=0x44
        void clear();// Offset=0x0 Size=0x90
        void computeAABB();// Offset=0x0 Size=0x138
        void setCleanup(int );// Offset=0x0 Size=0x10
        int getCleanup();// Offset=0x0 Size=0x8
        int query(struct dxGeom * );// Offset=0x0 Size=0x14
        int getNumGeoms();// Offset=0x0 Size=0x8
        struct dxGeom * getGeom(int );// Offset=0x0 Size=0x70
        void add(struct dxGeom * );// Offset=0x0 Size=0x50
        void remove(struct dxGeom * );// Offset=0x0 Size=0x44
        void dirty(struct dxGeom * );// Offset=0x0 Size=0x4c
        void cleanGeoms();
        void collide(void * ,void  ( * )(void * ,struct dxGeom * ,struct dxGeom * ));
        void collide2(void * ,struct dxGeom * ,void  ( * )(void * ,struct dxGeom * ,struct dxGeom * ));
        struct dxSpace & operator=(struct dxSpace & );
        void * __vecDelDtor(unsigned int );
    };
};

struct dxSpace : public dxGeom// Size=0x64 (Id=5018)
{
    union // Size=0x138 (Id=0)
    {
        unsigned char __align0[76];// Offset=0x0 Size=0x4c
        int count;// Offset=0x4c Size=0x4
        struct dxGeom * first;// Offset=0x50 Size=0x4
        int cleanup;// Offset=0x54 Size=0x4
        int current_index;// Offset=0x58 Size=0x4
        struct dxGeom * current_geom;// Offset=0x5c Size=0x4
        int lock_count;// Offset=0x60 Size=0x4
        void dxSpace(struct dxSpace & );
        void dxSpace(struct dxSpace * );// Offset=0x0 Size=0x64
        void ~dxSpace();// Offset=0x0 Size=0x44
        void clear();// Offset=0x0 Size=0x90
        void computeAABB();// Offset=0x0 Size=0x138
        void setCleanup(int );// Offset=0x0 Size=0x10
        int getCleanup();// Offset=0x0 Size=0x8
        int query(struct dxGeom * );// Offset=0x0 Size=0x14
        int getNumGeoms();// Offset=0x0 Size=0x8
        struct dxGeom * getGeom(int );// Offset=0x0 Size=0x70
        void add(struct dxGeom * );// Offset=0x0 Size=0x50
        void remove(struct dxGeom * );// Offset=0x0 Size=0x44
        void dirty(struct dxGeom * );// Offset=0x0 Size=0x4c
        void cleanGeoms();
        void collide(void * ,void  ( * )(void * ,struct dxGeom * ,struct dxGeom * ));
        void collide2(void * ,struct dxGeom * ,void  ( * )(void * ,struct dxGeom * ,struct dxGeom * ));
        struct dxSpace & operator=(struct dxSpace & );
        void * __vecDelDtor(unsigned int );
    };
};

struct dxUserGeom : public dxGeom// Size=0x5c (Id=5019)
{
    union // Size=0x68 (Id=0)
    {
        unsigned char __align0[76];// Offset=0x0 Size=0x4c
        char user_data[16];// Offset=0x4c Size=0x10
        void dxUserGeom(struct dxUserGeom & );
        void dxUserGeom(int ,struct dxSpace * ,struct dxBody * );// Offset=0x0 Size=0x68
        void dxUserGeom();
        void ~dxUserGeom();
        void computeAABB();// Offset=0x0 Size=0x30
        int AABBTest(struct dxGeom * ,float * );// Offset=0x0 Size=0x3c
        struct dxUserGeom & operator=(struct dxUserGeom & );
        void __local_vftable_ctor_closure();
        void * __vecDelDtor(unsigned int );
    };
};

struct dxUserGeom : public dxGeom// Size=0x5c (Id=5020)
{
    union // Size=0x68 (Id=0)
    {
        unsigned char __align0[76];// Offset=0x0 Size=0x4c
        char user_data[16];// Offset=0x4c Size=0x10
        void dxUserGeom(struct dxUserGeom & );
        void dxUserGeom(int ,struct dxSpace * ,struct dxBody * );// Offset=0x0 Size=0x68
        void dxUserGeom();
        void ~dxUserGeom();
        void computeAABB();// Offset=0x0 Size=0x30
        int AABBTest(struct dxGeom * ,float * );// Offset=0x0 Size=0x3c
        struct dxUserGeom & operator=(struct dxUserGeom & );
        void __local_vftable_ctor_closure();
        void * __vecDelDtor(unsigned int );
    };
};

struct SorLcpData// Size=0x900 (Id=5021)
{
    int order[576];// Offset=0x0 Size=0x900
};

struct dSurfaceParameters// Size=0x2c (Id=5022)
{
    int mode;// Offset=0x0 Size=0x4
    float mu;// Offset=0x4 Size=0x4
    float mu2;// Offset=0x8 Size=0x4
    float bounce;// Offset=0xc Size=0x4
    float bounce_vel;// Offset=0x10 Size=0x4
    float soft_erp;// Offset=0x14 Size=0x4
    float soft_cfm;// Offset=0x18 Size=0x4
    float motion1;// Offset=0x1c Size=0x4
    float motion2;// Offset=0x20 Size=0x4
    float slip1;// Offset=0x24 Size=0x4
    float slip2;// Offset=0x28 Size=0x4
};

struct dContactGeom// Size=0x20 (Id=5023)
{
    float pos[3];// Offset=0x0 Size=0xc
    float normal[3];// Offset=0xc Size=0xc
    float depth;// Offset=0x18 Size=0x4
    int surfFlags;// Offset=0x1c Size=0x4
};

enum _unnamed_5024
{
    dJOINT_INGROUP=1,
    dJOINT_REVERSE=2,
    dJOINT_TWOBODIES=4
};

struct odeGlob_t// Size=0x5c (Id=5025)
{
    struct dxUserGeom worldGeom;// Offset=0x0 Size=0x5c
    void odeGlob_t(struct odeGlob_t & );
    void odeGlob_t();
    void ~odeGlob_t();
    struct odeGlob_t & operator=(struct odeGlob_t & );
    void * __vecDelDtor(unsigned int );
};

struct odeGlob_t// Size=0x5c (Id=5026)
{
    struct dxUserGeom worldGeom;// Offset=0x0 Size=0x5c
    void odeGlob_t(struct odeGlob_t & );
    void odeGlob_t();
    void ~odeGlob_t();
    struct odeGlob_t & operator=(struct odeGlob_t & );
    void * __vecDelDtor(unsigned int );
};

struct dContact// Size=0x5c (Id=5027)
{
    struct dSurfaceParameters surface;// Offset=0x0 Size=0x2c
    struct dContactGeom geom;// Offset=0x2c Size=0x20
    float fdir1[4];// Offset=0x4c Size=0x10
};

struct dxJointContact : public dxJoint// Size=0x9c (Id=5028)
{
    unsigned char __align0[60];// Offset=0x0 Size=0x3c
    int the_m;// Offset=0x3c Size=0x4
    struct dContact contact;// Offset=0x40 Size=0x5c
};

struct dContactGeom// Size=0x20 (Id=5029)
{
    float pos[3];// Offset=0x0 Size=0xc
    float normal[3];// Offset=0xc Size=0xc
    float depth;// Offset=0x18 Size=0x4
    int surfFlags;// Offset=0x1c Size=0x4
};

struct dxJointGroup// Size=0xc (Id=5030)
{
    unsigned int useCount;// Offset=0x0 Size=0x4
    unsigned int max;// Offset=0x4 Size=0x4
    struct dxJointContact * joints;// Offset=0x8 Size=0x4
};

struct dSurfaceParameters// Size=0x2c (Id=5031)
{
    int mode;// Offset=0x0 Size=0x4
    float mu;// Offset=0x4 Size=0x4
    float mu2;// Offset=0x8 Size=0x4
    float bounce;// Offset=0xc Size=0x4
    float bounce_vel;// Offset=0x10 Size=0x4
    float soft_erp;// Offset=0x14 Size=0x4
    float soft_cfm;// Offset=0x18 Size=0x4
    float motion1;// Offset=0x1c Size=0x4
    float motion2;// Offset=0x20 Size=0x4
    float slip1;// Offset=0x24 Size=0x4
    float slip2;// Offset=0x28 Size=0x4
};

struct dxJointLimitMotor// Size=0x2c (Id=5032)
{
    union // Size=0xa8 (Id=0)
    {
        float vel;// Offset=0x0 Size=0x4
        float fmax;// Offset=0x4 Size=0x4
        float lostop;// Offset=0x8 Size=0x4
        float histop;// Offset=0xc Size=0x4
        float fudge_factor;// Offset=0x10 Size=0x4
        float normal_cfm;// Offset=0x14 Size=0x4
        float stop_erp;// Offset=0x18 Size=0x4
        float stop_cfm;// Offset=0x1c Size=0x4
        float bounce;// Offset=0x20 Size=0x4
        int limit;// Offset=0x24 Size=0x4
        float limit_err;// Offset=0x28 Size=0x4
        void init(struct dxWorld * );// Offset=0x0 Size=0x60
        void set(int ,float );// Offset=0x0 Size=0xa8
        float get(int );// Offset=0x0 Size=0x84
        int testRotationalLimit(float );// Offset=0x0 Size=0x5c
        int addLimot(struct dxJoint * ,struct dxJoint::Info2 * ,int ,float * ,int );// Offset=0x0 Size=0x5ec
    };
};

struct dxJoint : public dObject// Size=0x3c (Id=5033)
{
    union // Size=0x8 (Id=0)
    {
        struct Info1// Size=0x8 (Id=55494)
        {
            int m;// Offset=0x0 Size=0x4
            int nub;// Offset=0x4 Size=0x4
        };
        struct Info2// Size=0x34 (Id=55497)
        {
            float fps;// Offset=0x0 Size=0x4
            float erp;// Offset=0x4 Size=0x4
            float * J1l;// Offset=0x8 Size=0x4
            float * J1a;// Offset=0xc Size=0x4
            float * J2l;// Offset=0x10 Size=0x4
            float * J2a;// Offset=0x14 Size=0x4
            int rowskip;// Offset=0x18 Size=0x4
            float * c;// Offset=0x1c Size=0x4
            float * cfm;// Offset=0x20 Size=0x4
            float * lo;// Offset=0x24 Size=0x4
            float * hi;// Offset=0x28 Size=0x4
            unsigned int * oneSided;// Offset=0x2c Size=0x4
            int * findex;// Offset=0x30 Size=0x4
        };
    };
    enum JointType type;// Offset=0x14 Size=0x4
    int flags;// Offset=0x18 Size=0x4
    struct dxJointNode node[2];// Offset=0x1c Size=0x20
};

struct dxJointBall : public dxJoint// Size=0x5c (Id=5034)
{
    unsigned char __align0[60];// Offset=0x0 Size=0x3c
    float anchor1[4];// Offset=0x3c Size=0x10
    float anchor2[4];// Offset=0x4c Size=0x10
};

struct dxJointHinge : public dxJoint// Size=0xb8 (Id=5035)
{
    unsigned char __align0[60];// Offset=0x0 Size=0x3c
    float anchor1[4];// Offset=0x3c Size=0x10
    float anchor2[4];// Offset=0x4c Size=0x10
    float axis1[4];// Offset=0x5c Size=0x10
    float axis2[4];// Offset=0x6c Size=0x10
    float qrel[4];// Offset=0x7c Size=0x10
    struct dxJointLimitMotor limot;// Offset=0x8c Size=0x2c
};

struct JointOrientation : public dxJoint// Size=0x64 (Id=5036)
{
    unsigned char __align0[60];// Offset=0x0 Size=0x3c
    unsigned int constraintRowCount;// Offset=0x3c Size=0x4
    float rollResistance;// Offset=0x40 Size=0x4
    float pitchResistance;// Offset=0x44 Size=0x4
    float yawResistance;// Offset=0x48 Size=0x4
    float uprightStrengthRoll;// Offset=0x4c Size=0x4
    float uprightStrengthPitch;// Offset=0x50 Size=0x4
    bool uprightCorrection;// Offset=0x54 Size=0x1
    unsigned char __align1[3];// Offset=0x55 Size=0x3
    float targetPitch;// Offset=0x58 Size=0x4
    float maxRoll;// Offset=0x5c Size=0x4
    float maxPitch;// Offset=0x60 Size=0x4
};

struct dxWorldStepInfo// Size=0x28 (Id=5037)
{
    float gravity[4];// Offset=0x0 Size=0x10
    float global_erp;// Offset=0x10 Size=0x4
    float global_cfm;// Offset=0x14 Size=0x4
    struct dxQuickStepParameters qs;// Offset=0x18 Size=0x8
    struct dxContactParameters contactp;// Offset=0x20 Size=0x8
};

struct JointPath : public dxJoint// Size=0x64 (Id=5038)
{
    unsigned char __align0[60];// Offset=0x0 Size=0x3c
    int substeps;// Offset=0x3c Size=0x4
    float pos[2];// Offset=0x40 Size=0x8
    float vel[2];// Offset=0x48 Size=0x8
    float yaw;// Offset=0x50 Size=0x4
    float yawVel;// Offset=0x54 Size=0x4
    float cfm;// Offset=0x58 Size=0x4
    float erp;// Offset=0x5c Size=0x4
    bool enabled;// Offset=0x60 Size=0x1
};

struct dxJointContact : public dxJoint// Size=0x9c (Id=5039)
{
    unsigned char __align0[60];// Offset=0x0 Size=0x3c
    int the_m;// Offset=0x3c Size=0x4
    struct dContact contact;// Offset=0x40 Size=0x5c
};

struct dxJointFixed : public dxJoint// Size=0x5c (Id=5040)
{
    unsigned char __align0[60];// Offset=0x0 Size=0x3c
    float qrel[4];// Offset=0x3c Size=0x10
    float offset[4];// Offset=0x4c Size=0x10
};

struct dxJointNull : public dxJoint// Size=0x3c (Id=5041)
{
};

struct dxJointSlider : public dxJoint// Size=0x98 (Id=5042)
{
    unsigned char __align0[60];// Offset=0x0 Size=0x3c
    float axis1[4];// Offset=0x3c Size=0x10
    float qrel[4];// Offset=0x4c Size=0x10
    float offset[4];// Offset=0x5c Size=0x10
    struct dxJointLimitMotor limot;// Offset=0x6c Size=0x2c
};

struct dxJointUniversal : public dxJoint// Size=0xf4 (Id=5043)
{
    unsigned char __align0[60];// Offset=0x0 Size=0x3c
    float anchor1[4];// Offset=0x3c Size=0x10
    float anchor2[4];// Offset=0x4c Size=0x10
    float axis1[4];// Offset=0x5c Size=0x10
    float axis2[4];// Offset=0x6c Size=0x10
    float qrel1[4];// Offset=0x7c Size=0x10
    float qrel2[4];// Offset=0x8c Size=0x10
    struct dxJointLimitMotor limot1;// Offset=0x9c Size=0x2c
    struct dxJointLimitMotor limot2;// Offset=0xc8 Size=0x2c
};

struct dxJointAMotor : public dxJoint// Size=0x124 (Id=5044)
{
    unsigned char __align0[60];// Offset=0x0 Size=0x3c
    int num;// Offset=0x3c Size=0x4
    int mode;// Offset=0x40 Size=0x4
    int rel[3];// Offset=0x44 Size=0xc
    float axis[3][4];// Offset=0x50 Size=0x30
    struct dxJointLimitMotor limot[3];// Offset=0x80 Size=0x84
    float reference1[4];// Offset=0x104 Size=0x10
    float reference2[4];// Offset=0x114 Size=0x10
};

enum _unnamed_5045
{
    ODE_CONTACTFLAG_MU2=1,
    ODE_CONTACTFLAG_FDIR1=2,
    ODE_CONTACTFLAG_BOUNCE=4,
    ODE_CONTACTFLAG_SOFT_ERP=8,
    ODE_CONTACTFLAG_SOFT_CFM=16,
    ODE_CONTACTFLAG_MOTION1=32,
    ODE_CONTACTFLAG_MOTION2=64,
    ODE_CONTACTFLAG_SLIP1=128,
    ODE_CONTACTFLAG_SLIP2=256,
    ODE_CONTACTFLAG_NO_MCV=512,
    ODE_CONTACTFLAG_FRICTION_ONLY=1024,
    ODE_CONTACTFLAG_APPROX0=0,
    ODE_CONTACTFLAG_APPROX1_1=4096,
    ODE_CONTACTFLAG_APPROX1_2=8192,
    ODE_CONTACTFLAG_APPROX1=12288,
    ODE_CONTACTFLAG_ONESIDED_OFF=0,
    ODE_CONTACTFLAG_ONESIDED_BODY1=16384,
    ODE_CONTACTFLAG_ONESIDED_BODY2=32768
};

enum _unnamed_5046
{
    GEOM_CLASS_BRUSHMODEL=3,
    GEOM_CLASS_COLLMAP=4,
    GEOM_CLASS_CYLINDER=5,
    GEOM_CLASS_CAPSULE=6,
    GEOM_CLASS_GLASS=7,
    GEOM_CLASS_WORLD=8
};

enum _unnamed_5047
{
    dParamLoStop=0,
    dParamHiStop=1,
    dParamVel=2,
    dParamFMax=3,
    dParamFudgeFactor=4,
    dParamBounce=5,
    dParamCFM=6,
    dParamStopERP=7,
    dParamStopCFM=8,
    dParamSuspensionERP=9,
    dParamSuspensionCFM=10,
    dParamLoStop2=256,
    dParamHiStop2=257,
    dParamVel2=258,
    dParamFMax2=259,
    dParamFudgeFactor2=260,
    dParamBounce2=261,
    dParamCFM2=262,
    dParamStopERP2=263,
    dParamStopCFM2=264,
    dParamSuspensionERP2=265,
    dParamSuspensionCFM2=266,
    dParamLoStop3=512,
    dParamHiStop3=513,
    dParamVel3=514,
    dParamFMax3=515,
    dParamFudgeFactor3=516,
    dParamBounce3=517,
    dParamCFM3=518,
    dParamStopERP3=519,
    dParamStopCFM3=520,
    dParamSuspensionERP3=521,
    dParamSuspensionCFM3=522,
    dParamGroup=256
};

enum _unnamed_5048
{
    dAMotorUser=0,
    dAMotorEuler=1
};

struct dxJointHinge : public dxJoint// Size=0xb8 (Id=5049)
{
    unsigned char __align0[60];// Offset=0x0 Size=0x3c
    float anchor1[4];// Offset=0x3c Size=0x10
    float anchor2[4];// Offset=0x4c Size=0x10
    float axis1[4];// Offset=0x5c Size=0x10
    float axis2[4];// Offset=0x6c Size=0x10
    float qrel[4];// Offset=0x7c Size=0x10
    struct dxJointLimitMotor limot;// Offset=0x8c Size=0x2c
};

struct dxJointAMotor : public dxJoint// Size=0x124 (Id=5050)
{
    unsigned char __align0[60];// Offset=0x0 Size=0x3c
    int num;// Offset=0x3c Size=0x4
    int mode;// Offset=0x40 Size=0x4
    int rel[3];// Offset=0x44 Size=0xc
    float axis[3][4];// Offset=0x50 Size=0x30
    struct dxJointLimitMotor limot[3];// Offset=0x80 Size=0x84
    float reference1[4];// Offset=0x104 Size=0x10
    float reference2[4];// Offset=0x114 Size=0x10
};

struct dxJointSlider : public dxJoint// Size=0x98 (Id=5051)
{
    unsigned char __align0[60];// Offset=0x0 Size=0x3c
    float axis1[4];// Offset=0x3c Size=0x10
    float qrel[4];// Offset=0x4c Size=0x10
    float offset[4];// Offset=0x5c Size=0x10
    struct dxJointLimitMotor limot;// Offset=0x6c Size=0x2c
};

struct JointOrientation : public dxJoint// Size=0x64 (Id=5052)
{
    unsigned char __align0[60];// Offset=0x0 Size=0x3c
    unsigned int constraintRowCount;// Offset=0x3c Size=0x4
    float rollResistance;// Offset=0x40 Size=0x4
    float pitchResistance;// Offset=0x44 Size=0x4
    float yawResistance;// Offset=0x48 Size=0x4
    float uprightStrengthRoll;// Offset=0x4c Size=0x4
    float uprightStrengthPitch;// Offset=0x50 Size=0x4
    bool uprightCorrection;// Offset=0x54 Size=0x1
    unsigned char __align1[3];// Offset=0x55 Size=0x3
    float targetPitch;// Offset=0x58 Size=0x4
    float maxRoll;// Offset=0x5c Size=0x4
    float maxPitch;// Offset=0x60 Size=0x4
};

struct dxJointFixed : public dxJoint// Size=0x5c (Id=5053)
{
    unsigned char __align0[60];// Offset=0x0 Size=0x3c
    float qrel[4];// Offset=0x3c Size=0x10
    float offset[4];// Offset=0x4c Size=0x10
};

struct JointPath : public dxJoint// Size=0x64 (Id=5054)
{
    unsigned char __align0[60];// Offset=0x0 Size=0x3c
    int substeps;// Offset=0x3c Size=0x4
    float pos[2];// Offset=0x40 Size=0x8
    float vel[2];// Offset=0x48 Size=0x8
    float yaw;// Offset=0x50 Size=0x4
    float yawVel;// Offset=0x54 Size=0x4
    float cfm;// Offset=0x58 Size=0x4
    float erp;// Offset=0x5c Size=0x4
    bool enabled;// Offset=0x60 Size=0x1
};

struct dxJointNull : public dxJoint// Size=0x3c (Id=5055)
{
};

struct dxJointUniversal : public dxJoint// Size=0xf4 (Id=5056)
{
    unsigned char __align0[60];// Offset=0x0 Size=0x3c
    float anchor1[4];// Offset=0x3c Size=0x10
    float anchor2[4];// Offset=0x4c Size=0x10
    float axis1[4];// Offset=0x5c Size=0x10
    float axis2[4];// Offset=0x6c Size=0x10
    float qrel1[4];// Offset=0x7c Size=0x10
    float qrel2[4];// Offset=0x8c Size=0x10
    struct dxJointLimitMotor limot1;// Offset=0x9c Size=0x2c
    struct dxJointLimitMotor limot2;// Offset=0xc8 Size=0x2c
};

struct dxJointBall : public dxJoint// Size=0x5c (Id=5057)
{
    unsigned char __align0[60];// Offset=0x0 Size=0x3c
    float anchor1[4];// Offset=0x3c Size=0x10
    float anchor2[4];// Offset=0x4c Size=0x10
};

struct dxJointLimitMotor// Size=0x2c (Id=5058)
{
    union // Size=0xa8 (Id=0)
    {
        float vel;// Offset=0x0 Size=0x4
        float fmax;// Offset=0x4 Size=0x4
        float lostop;// Offset=0x8 Size=0x4
        float histop;// Offset=0xc Size=0x4
        float fudge_factor;// Offset=0x10 Size=0x4
        float normal_cfm;// Offset=0x14 Size=0x4
        float stop_erp;// Offset=0x18 Size=0x4
        float stop_cfm;// Offset=0x1c Size=0x4
        float bounce;// Offset=0x20 Size=0x4
        int limit;// Offset=0x24 Size=0x4
        float limit_err;// Offset=0x28 Size=0x4
        void init(struct dxWorld * );// Offset=0x0 Size=0x60
        void set(int ,float );// Offset=0x0 Size=0xa8
        float get(int );// Offset=0x0 Size=0x84
        int testRotationalLimit(float );// Offset=0x0 Size=0x5c
        int addLimot(struct dxJoint * ,struct dxJoint::Info2 * ,int ,float * ,int );// Offset=0x0 Size=0x5ec
    };
};

struct collData_t// Size=0xc4 (Id=5059)
{
    float mHullBoxRot[12];// Offset=0x0 Size=0x30
    float vHullBoxPos[4];// Offset=0x30 Size=0x10
    float vBoxHalfSize[4];// Offset=0x40 Size=0x10
    float vBestNormal[4];// Offset=0x50 Size=0x10
    float fBestDepth;// Offset=0x60 Size=0x4
    int iBestAxis;// Offset=0x64 Size=0x4
    float triangleEdge0[4];// Offset=0x68 Size=0x10
    float triangleEdge1[4];// Offset=0x78 Size=0x10
    float triangleEdge2[4];// Offset=0x88 Size=0x10
    float triangleNormal[4];// Offset=0x98 Size=0x10
    int iFlags;// Offset=0xa8 Size=0x4
    struct dContactGeom * ContactGeoms;// Offset=0xac Size=0x4
    int iStride;// Offset=0xb0 Size=0x4
    struct dxGeom * Geom1;// Offset=0xb4 Size=0x4
    struct dxGeom * Geom2;// Offset=0xb8 Size=0x4
    int ctContacts;// Offset=0xbc Size=0x4
    float * bodyCenter;// Offset=0xc0 Size=0x4
};

struct dxGeomTransform : public dxGeom// Size=0xd0 (Id=5060)
{
    union // Size=0xd0 (Id=0)
    {
        unsigned char __align0[76];// Offset=0x0 Size=0x4c
        struct dxGeom * obj;// Offset=0x4c Size=0x4
        int cleanup;// Offset=0x50 Size=0x4
        int infomode;// Offset=0x54 Size=0x4
        float localR[12];// Offset=0x58 Size=0x30
        float localPos[3];// Offset=0x88 Size=0xc
        float finalR[12];// Offset=0x94 Size=0x30
        float finalPos[3];// Offset=0xc4 Size=0xc
        void dxGeomTransform(struct dxGeomTransform & );
        void dxGeomTransform(struct dxSpace * ,struct dxBody * );// Offset=0x0 Size=0x8c
        void Destruct();// Offset=0x0 Size=0x24
        void ~dxGeomTransform();// Offset=0x0 Size=0x5c
        void computeAABB();// Offset=0x0 Size=0xac
        void computeFinalTx();// Offset=0x0 Size=0xf0
    };
    struct dxGeomTransform & operator=(struct dxGeomTransform & );
    void * __vecDelDtor(unsigned int );
};

struct dxGeomTransform : public dxGeom// Size=0xd0 (Id=5061)
{
    union // Size=0xd0 (Id=0)
    {
        unsigned char __align0[76];// Offset=0x0 Size=0x4c
        struct dxGeom * obj;// Offset=0x4c Size=0x4
        int cleanup;// Offset=0x50 Size=0x4
        int infomode;// Offset=0x54 Size=0x4
        float localR[12];// Offset=0x58 Size=0x30
        float localPos[3];// Offset=0x88 Size=0xc
        float finalR[12];// Offset=0x94 Size=0x30
        float finalPos[3];// Offset=0xc4 Size=0xc
        void dxGeomTransform(struct dxGeomTransform & );
        void dxGeomTransform(struct dxSpace * ,struct dxBody * );// Offset=0x0 Size=0x8c
        void Destruct();// Offset=0x0 Size=0x24
        void ~dxGeomTransform();// Offset=0x0 Size=0x5c
        void computeAABB();// Offset=0x0 Size=0xac
        void computeFinalTx();// Offset=0x0 Size=0xf0
    };
    struct dxGeomTransform & operator=(struct dxGeomTransform & );
    void * __vecDelDtor(unsigned int );
};

struct dxBox : public dxGeom// Size=0x5c (Id=5062)
{
    union // Size=0x7c (Id=0)
    {
        unsigned char __align0[76];// Offset=0x0 Size=0x4c
        float side[4];// Offset=0x4c Size=0x10
        void dxBox(struct dxBox & );
        void dxBox(struct dxSpace * ,struct dxBody * ,float ,float ,float );// Offset=0x0 Size=0x7c
        void computeAABB();// Offset=0x0 Size=0xf8
    };
    void ~dxBox();
    struct dxBox & operator=(struct dxBox & );
    void * __vecDelDtor(unsigned int );
};

struct dxBox : public dxGeom// Size=0x5c (Id=5063)
{
    union // Size=0x7c (Id=0)
    {
        unsigned char __align0[76];// Offset=0x0 Size=0x4c
        float side[4];// Offset=0x4c Size=0x10
        void dxBox(struct dxBox & );
        void dxBox(struct dxSpace * ,struct dxBody * ,float ,float ,float );// Offset=0x0 Size=0x7c
        void computeAABB();// Offset=0x0 Size=0xf8
    };
    void ~dxBox();
    struct dxBox & operator=(struct dxBox & );
    void * __vecDelDtor(unsigned int );
};

struct dxSimpleSpace : public dxSpace// Size=0x64 (Id=5064)
{
    void dxSimpleSpace(struct dxSimpleSpace & );
    union // Size=0xfc (Id=0)
    {
        void dxSimpleSpace(struct dxSpace * );// Offset=0x0 Size=0x6c
        void dxSimpleSpace();// Offset=0x0 Size=0x70
        void cleanGeoms();// Offset=0x0 Size=0xbc
        void collide(void * ,void  ( * )(void * ,struct dxGeom * ,struct dxGeom * ));// Offset=0x0 Size=0xfc
        void collide2(void * ,struct dxGeom * ,void  ( * )(void * ,struct dxGeom * ,struct dxGeom * ));// Offset=0x0 Size=0xd4
        void ~dxSimpleSpace();
        struct dxSimpleSpace & operator=(struct dxSimpleSpace & );
        void __local_vftable_ctor_closure();
        void * __vecDelDtor(unsigned int );
    };
};

struct dxSimpleSpace : public dxSpace// Size=0x64 (Id=5065)
{
    void dxSimpleSpace(struct dxSimpleSpace & );
    union // Size=0xfc (Id=0)
    {
        void dxSimpleSpace(struct dxSpace * );// Offset=0x0 Size=0x6c
        void dxSimpleSpace();// Offset=0x0 Size=0x70
        void cleanGeoms();// Offset=0x0 Size=0xbc
        void collide(void * ,void  ( * )(void * ,struct dxGeom * ,struct dxGeom * ));// Offset=0x0 Size=0xfc
        void collide2(void * ,struct dxGeom * ,void  ( * )(void * ,struct dxGeom * ,struct dxGeom * ));// Offset=0x0 Size=0xd4
        void ~dxSimpleSpace();
        struct dxSimpleSpace & operator=(struct dxSimpleSpace & );
        void __local_vftable_ctor_closure();
        void * __vecDelDtor(unsigned int );
    };
};

struct SpaceGeomColliderData// Size=0xc (Id=5066)
{
    int flags;// Offset=0x0 Size=0x4
    struct dContactGeom * contact;// Offset=0x4 Size=0x4
    int skip;// Offset=0x8 Size=0x4
};

struct dGeomClass// Size=0x14 (Id=5067)
{
    unsigned int bytes;// Offset=0x0 Size=0x4
    int  ( * )(struct dxGeom * ,struct dxGeom * ,int ,struct dContactGeom * ,int ) ( * collider)(int );// Offset=0x4 Size=0x4
    void  ( * aabb)(struct dxGeom * ,float * );// Offset=0x8 Size=0x4
    int  ( * aabb_test)(struct dxGeom * ,struct dxGeom * ,float * );// Offset=0xc Size=0x4
    bool isPlaceable;// Offset=0x10 Size=0x1
};

struct dColliderEntry// Size=0x8 (Id=5068)
{
    int  ( * fn)(struct dxGeom * ,struct dxGeom * ,int ,struct dContactGeom * ,int );// Offset=0x0 Size=0x4
    int reverse;// Offset=0x4 Size=0x4
};

struct dGeomClass// Size=0x14 (Id=5069)
{
    unsigned int bytes;// Offset=0x0 Size=0x4
    int  ( * )(struct dxGeom * ,struct dxGeom * ,int ,struct dContactGeom * ,int ) ( * collider)(int );// Offset=0x4 Size=0x4
    void  ( * aabb)(struct dxGeom * ,float * );// Offset=0x8 Size=0x4
    int  ( * aabb_test)(struct dxGeom * ,struct dxGeom * ,float * );// Offset=0xc Size=0x4
    bool isPlaceable;// Offset=0x10 Size=0x1
};

struct cbrush_t// Size=0x24 (Id=5070)
{
    unsigned short numsides;// Offset=0x0 Size=0x2
    unsigned short glassPieceIndex;// Offset=0x2 Size=0x2
    struct cbrushside_t * sides;// Offset=0x4 Size=0x4
    unsigned char * baseAdjacentSide;// Offset=0x8 Size=0x4
    short axialMaterialNum[2][3];// Offset=0xc Size=0xc
    unsigned char firstAdjacentSideOffsets[2][3];// Offset=0x18 Size=0x6
    unsigned char edgeCount[2][3];// Offset=0x1e Size=0x6
};

struct objInfo// Size=0xa4 (Id=5071)
{
    union // Size=0x84 (Id=0)
    {
        int clipMask;// Offset=0x0 Size=0x4
        int cylDirection;// Offset=0x4 Size=0x4
        struct TraceThreadInfo threadInfo;// Offset=0x8 Size=0x8
        struct Bounds bounds;// Offset=0x10 Size=0x18
        float radius;// Offset=0x28 Size=0x4
        enum PhysicsGeomType type;// Offset=0x2c Size=0x4
        float pos[3];// Offset=0x30 Size=0xc
        float R[3][3];// Offset=0x3c Size=0x24
        float RTransposed[3][3];// Offset=0x60 Size=0x24
        union <unnamed-type-u>// Size=0xc (Id=56143)
        {
            float sideExtents[3];// Offset=0x0 Size=0xc
            struct cmodel_t * brushModel;// Offset=0x0 Size=0x4
            struct BrushWrapper * brushWrapper;// Offset=0x0 Size=0x4
            struct GeomStateGlass * glass;// Offset=0x0 Size=0x4
        };
        unsigned char __align0[120];// Offset=0xc Size=0x78
    };
    union objInfo::<unnamed-type-u> u;// Offset=0x84 Size=0xc
    float bodyCenter[3];// Offset=0x90 Size=0xc
    bool isNarrow;// Offset=0x9c Size=0x1
    unsigned char __align1[3];// Offset=0x9d Size=0x3
    enum PhysWorld worldIndex;// Offset=0xa0 Size=0x4
};

struct objInfo// Size=0xa4 (Id=5072)
{
    union // Size=0x84 (Id=0)
    {
        int clipMask;// Offset=0x0 Size=0x4
        int cylDirection;// Offset=0x4 Size=0x4
        struct TraceThreadInfo threadInfo;// Offset=0x8 Size=0x8
        struct Bounds bounds;// Offset=0x10 Size=0x18
        float radius;// Offset=0x28 Size=0x4
        enum PhysicsGeomType type;// Offset=0x2c Size=0x4
        float pos[3];// Offset=0x30 Size=0xc
        float R[3][3];// Offset=0x3c Size=0x24
        float RTransposed[3][3];// Offset=0x60 Size=0x24
        union <unnamed-type-u>// Size=0xc (Id=56143)
        {
            float sideExtents[3];// Offset=0x0 Size=0xc
            struct cmodel_t * brushModel;// Offset=0x0 Size=0x4
            struct BrushWrapper * brushWrapper;// Offset=0x0 Size=0x4
            struct GeomStateGlass * glass;// Offset=0x0 Size=0x4
        };
        unsigned char __align0[120];// Offset=0xc Size=0x78
    };
    union objInfo::<unnamed-type-u> u;// Offset=0x84 Size=0xc
    float bodyCenter[3];// Offset=0x90 Size=0xc
    bool isNarrow;// Offset=0x9c Size=0x1
    unsigned char __align1[3];// Offset=0x9d Size=0x3
    enum PhysWorld worldIndex;// Offset=0xa0 Size=0x4
};

struct InputOutput// Size=0x8 (Id=5073)
{
    struct objInfo * Input;// Offset=0x0 Size=0x4
    struct Results * Output;// Offset=0x4 Size=0x4
};

struct leafList_t// Size=0x28 (Id=5074)
{
    int count;// Offset=0x0 Size=0x4
    int maxcount;// Offset=0x4 Size=0x4
    int overflowed;// Offset=0x8 Size=0x4
    unsigned short * list;// Offset=0xc Size=0x4
    struct Bounds bounds;// Offset=0x10 Size=0x18
};

struct Results// Size=0x10 (Id=5075)
{
    struct dContactGeom * contacts;// Offset=0x0 Size=0x4
    int contactCount;// Offset=0x4 Size=0x4
    int maxContacts;// Offset=0x8 Size=0x4
    int stride;// Offset=0xc Size=0x4
};

struct PhysCollmap// Size=0x48 (Id=5076)
{
    char * name;// Offset=0x0 Size=0x4
    unsigned int count;// Offset=0x4 Size=0x4
    struct PhysGeomInfo * geoms;// Offset=0x8 Size=0x4
    struct PhysMass mass;// Offset=0xc Size=0x24
    struct Bounds bounds;// Offset=0x30 Size=0x18
};

struct GeomStateCylinder// Size=0xc (Id=5077)
{
    int direction;// Offset=0x0 Size=0x4
    float radius;// Offset=0x4 Size=0x4
    float halfHeight;// Offset=0x8 Size=0x4
};

struct GeomStateGlass// Size=0x10 (Id=5078)
{
    struct FxGlassSystem * glassSys;// Offset=0x0 Size=0x4
    unsigned int pieceIndex;// Offset=0x4 Size=0x4
    float halfThickness;// Offset=0x8 Size=0x4
    unsigned int convexHullMask;// Offset=0xc Size=0x4
};

enum _unnamed_5079
{
    FX_ATLAS_START_FIXED=0,
    FX_ATLAS_START_RANDOM=1,
    FX_ATLAS_START_INDEXED=2,
    FX_ATLAS_START_MASK=3,
    FX_ATLAS_PLAY_OVER_LIFE=4,
    FX_ATLAS_LOOP_ONLY_N_TIMES=8
};

struct PhysGlob// Size=0x10e0d0 (Id=5080)
{
    union // Size=0x10e0cc (Id=0)
    {
        struct dxWorld world[5];// Offset=0x0 Size=0x1cc
        struct PhysWorldData worldData[5];// Offset=0x1cc Size=0x488
        struct dxSimpleSpace space[5];// Offset=0x654 Size=0x1f4
        struct dxJointContact contactBufferDynents[400];// Offset=0x848 Size=0xf3c0
        struct dxJointContact contactBufferFX[1000];// Offset=0xfc08 Size=0x26160
        struct dxJointContact contactBufferRagdoll[700];// Offset=0x35d68 Size=0x1aa90
        struct dxJointContact contactBufferVehicle[100];// Offset=0x507f8 Size=0x3cf0
        struct dxJointContact contactBufferWeapon[100];// Offset=0x544e8 Size=0x3cf0
        struct dxGeom * worldGeom;// Offset=0x581d8 Size=0x4
        unsigned char __align0[4];// Offset=0x581dc Size=0x4
        struct dxBody bodies[504];// Offset=0x581e0 Size=0x29580
        struct pooldata_t bodyPool;// Offset=0x81760 Size=0x10
        unsigned char geoms[419328];// Offset=0x81770 Size=0x66600
        struct pooldata_t geomPool;// Offset=0xe7d70 Size=0x10
        struct PhysObjUserData userData[504];// Offset=0xe7d80 Size=0xd4a0
        struct pooldata_t userDataPool;// Offset=0xf5220 Size=0x10
        struct <unnamed-type-vehicle>// Size=0x1490 (Id=56207)
        {
            struct dxBody bodies[8];// Offset=0x0 Size=0xa80
            struct pooldata_t bodyPool;// Offset=0xa80 Size=0x10
            unsigned char geoms[1664];// Offset=0xa90 Size=0x680
            struct pooldata_t geomPool;// Offset=0x1110 Size=0x10
            struct PhysObjUserData userData[8];// Offset=0x1120 Size=0x360
            struct pooldata_t userDataPool;// Offset=0x1480 Size=0x10
            void <unnamed-type-vehicle>();
        };
        unsigned char __align1[998816];// Offset=0x1490 Size=0xf3da0
        struct PhysGlob::<unnamed-type-vehicle> vehicle;// Offset=0xf5230 Size=0x1490
        class PhysStaticArray<dxJointHinge,192> hingeArray;// Offset=0xf66c0 Size=0x8a04
        class PhysStaticArray<dxJointBall,160> ballArray;// Offset=0xff0c4 Size=0x3984
        class PhysStaticArray<dxJointAMotor,160> aMotorArray;// Offset=0x102a48 Size=0xb684
        void PhysGlob(struct PhysGlob & );
        void PhysGlob();// Offset=0x0 Size=0x80
        void ~PhysGlob();// Offset=0x0 Size=0x48
        struct PhysGlob & operator=(struct PhysGlob & );
        void * __vecDelDtor(unsigned int );
    };
};

struct PhysGlob// Size=0x10e0d0 (Id=5081)
{
    union // Size=0x10e0cc (Id=0)
    {
        struct dxWorld world[5];// Offset=0x0 Size=0x1cc
        struct PhysWorldData worldData[5];// Offset=0x1cc Size=0x488
        struct dxSimpleSpace space[5];// Offset=0x654 Size=0x1f4
        struct dxJointContact contactBufferDynents[400];// Offset=0x848 Size=0xf3c0
        struct dxJointContact contactBufferFX[1000];// Offset=0xfc08 Size=0x26160
        struct dxJointContact contactBufferRagdoll[700];// Offset=0x35d68 Size=0x1aa90
        struct dxJointContact contactBufferVehicle[100];// Offset=0x507f8 Size=0x3cf0
        struct dxJointContact contactBufferWeapon[100];// Offset=0x544e8 Size=0x3cf0
        struct dxGeom * worldGeom;// Offset=0x581d8 Size=0x4
        unsigned char __align0[4];// Offset=0x581dc Size=0x4
        struct dxBody bodies[504];// Offset=0x581e0 Size=0x29580
        struct pooldata_t bodyPool;// Offset=0x81760 Size=0x10
        unsigned char geoms[419328];// Offset=0x81770 Size=0x66600
        struct pooldata_t geomPool;// Offset=0xe7d70 Size=0x10
        struct PhysObjUserData userData[504];// Offset=0xe7d80 Size=0xd4a0
        struct pooldata_t userDataPool;// Offset=0xf5220 Size=0x10
        struct <unnamed-type-vehicle>// Size=0x1490 (Id=56207)
        {
            struct dxBody bodies[8];// Offset=0x0 Size=0xa80
            struct pooldata_t bodyPool;// Offset=0xa80 Size=0x10
            unsigned char geoms[1664];// Offset=0xa90 Size=0x680
            struct pooldata_t geomPool;// Offset=0x1110 Size=0x10
            struct PhysObjUserData userData[8];// Offset=0x1120 Size=0x360
            struct pooldata_t userDataPool;// Offset=0x1480 Size=0x10
            void <unnamed-type-vehicle>();
        };
        unsigned char __align1[998816];// Offset=0x1490 Size=0xf3da0
        struct PhysGlob::<unnamed-type-vehicle> vehicle;// Offset=0xf5230 Size=0x1490
        class PhysStaticArray<dxJointHinge,192> hingeArray;// Offset=0xf66c0 Size=0x8a04
        class PhysStaticArray<dxJointBall,160> ballArray;// Offset=0xff0c4 Size=0x3984
        class PhysStaticArray<dxJointAMotor,160> aMotorArray;// Offset=0x102a48 Size=0xb684
        void PhysGlob(struct PhysGlob & );
        void PhysGlob();// Offset=0x0 Size=0x80
        void ~PhysGlob();// Offset=0x0 Size=0x48
        struct PhysGlob & operator=(struct PhysGlob & );
        void * __vecDelDtor(unsigned int );
    };
};

enum DynEntityCollType
{
    DYNENT_COLL_CLIENT_FIRST=0,
    DYNENT_COLL_CLIENT_MODEL=0,
    DYNENT_COLL_CLIENT_BRUSH=1,
    DYNENT_COLL_COUNT=2
};

enum _unnamed_5083
{
    FX_STATUS_REF_COUNT_MASK=8191,
    FX_STATUS_DONT_REWIND=8192,
    FX_STATUS_DONT_DRAW=16384,
    FX_STATUS_HAS_PENDING_LOOP_ELEMS=32768,
    FX_STATUS_OWNED_EFFECTS_SHIFT=16,
    FX_STATUS_OWNED_EFFECTS_MASK=67043328,
    FX_STATUS_DEFER_UPDATE=67108864,
    FX_STATUS_SELF_OWNED=134217728,
    FX_STATUS_IS_LOCKED=1073741824,
    FX_STATUS_IS_LOCKED_MASK=-1073741824
};

enum _unnamed_5084
{
    FX_ELEM_CLASS_SPRITE=0,
    FX_ELEM_CLASS_NONSPRITE=1,
    FX_ELEM_CLASS_CLOUD=2,
    FX_ELEM_CLASS_COUNT=3
};

struct clipMap_t// Size=0x100 (Id=5085)
{
    char * name;// Offset=0x0 Size=0x4
    int isInUse;// Offset=0x4 Size=0x4
    int planeCount;// Offset=0x8 Size=0x4
    struct cplane_s * planes;// Offset=0xc Size=0x4
    unsigned int numStaticModels;// Offset=0x10 Size=0x4
    struct cStaticModel_s * staticModelList;// Offset=0x14 Size=0x4
    unsigned int numMaterials;// Offset=0x18 Size=0x4
    struct ClipMaterial * materials;// Offset=0x1c Size=0x4
    unsigned int numBrushSides;// Offset=0x20 Size=0x4
    struct cbrushside_t * brushsides;// Offset=0x24 Size=0x4
    unsigned int numBrushEdges;// Offset=0x28 Size=0x4
    unsigned char * brushEdges;// Offset=0x2c Size=0x4
    unsigned int numNodes;// Offset=0x30 Size=0x4
    struct cNode_t * nodes;// Offset=0x34 Size=0x4
    unsigned int numLeafs;// Offset=0x38 Size=0x4
    struct cLeaf_t * leafs;// Offset=0x3c Size=0x4
    unsigned int leafbrushNodesCount;// Offset=0x40 Size=0x4
    struct cLeafBrushNode_s * leafbrushNodes;// Offset=0x44 Size=0x4
    unsigned int numLeafBrushes;// Offset=0x48 Size=0x4
    unsigned short * leafbrushes;// Offset=0x4c Size=0x4
    unsigned int numLeafSurfaces;// Offset=0x50 Size=0x4
    unsigned int * leafsurfaces;// Offset=0x54 Size=0x4
    unsigned int vertCount;// Offset=0x58 Size=0x4
    float * verts[3];// Offset=0x5c Size=0x4
    int triCount;// Offset=0x60 Size=0x4
    unsigned short * triIndices;// Offset=0x64 Size=0x4
    unsigned char * triEdgeIsWalkable;// Offset=0x68 Size=0x4
    int borderCount;// Offset=0x6c Size=0x4
    struct CollisionBorder * borders;// Offset=0x70 Size=0x4
    int partitionCount;// Offset=0x74 Size=0x4
    struct CollisionPartition * partitions;// Offset=0x78 Size=0x4
    int aabbTreeCount;// Offset=0x7c Size=0x4
    struct CollisionAabbTree * aabbTrees;// Offset=0x80 Size=0x4
    unsigned int numSubModels;// Offset=0x84 Size=0x4
    struct cmodel_t * cmodels;// Offset=0x88 Size=0x4
    unsigned short numBrushes;// Offset=0x8c Size=0x2
    unsigned char __align0[2];// Offset=0x8e Size=0x2
    struct cbrush_t * brushes;// Offset=0x90 Size=0x4
    struct Bounds * brushBounds;// Offset=0x94 Size=0x4
    int * brushContents;// Offset=0x98 Size=0x4
    struct MapEnts * mapEnts;// Offset=0x9c Size=0x4
    unsigned short smodelNodeCount;// Offset=0xa0 Size=0x2
    unsigned char __align1[2];// Offset=0xa2 Size=0x2
    struct SModelAabbNode * smodelNodes;// Offset=0xa4 Size=0x4
    unsigned short dynEntCount[2];// Offset=0xa8 Size=0x4
    struct DynEntityDef * dynEntDefList[2];// Offset=0xac Size=0x8
    struct DynEntityPose * dynEntPoseList[2];// Offset=0xb4 Size=0x8
    struct DynEntityClient * dynEntClientList[2];// Offset=0xbc Size=0x8
    struct DynEntityColl * dynEntCollList[2];// Offset=0xc4 Size=0x8
    unsigned int checksum;// Offset=0xcc Size=0x4
};

enum _unnamed_5086
{
    FX_MARK_VISUALS_CLASS_MODEL_INDEX=0,
    FX_MARK_VISUALS_CLASS_WORLD_INDEX=1,
    FX_MARK_VISUALS_CLASS_COUNT=2
};

enum _unnamed_5087
{
    FX_ELEM_CLOUD_SHAPE_SHIFT=29
};

enum _unnamed_5088
{
    FX_ELEM_SPAWN_RELATIVE_TO_EFFECT=2,
    FX_ELEM_SPAWN_FRUSTUM_CULL=4,
    FX_ELEM_RUNNER_USES_RAND_ROT=8,
    FX_ELEM_SPAWN_OFFSET_NONE=0,
    FX_ELEM_SPAWN_OFFSET_SPHERE=16,
    FX_ELEM_SPAWN_OFFSET_CYLINDER=32,
    FX_ELEM_SPAWN_OFFSET_MASK=48,
    FX_ELEM_RUN_RELATIVE_TO_WORLD=0,
    FX_ELEM_RUN_RELATIVE_TO_SPAWN=64,
    FX_ELEM_RUN_RELATIVE_TO_EFFECT=128,
    FX_ELEM_RUN_RELATIVE_TO_OFFSET=192,
    FX_ELEM_RUN_MASK=192,
    FX_ELEM_USE_COLLISION=256,
    FX_ELEM_DIE_ON_TOUCH=512,
    FX_ELEM_DRAW_PAST_FOG=1024,
    FX_ELEM_DRAW_WITH_VIEWMODEL=2048,
    FX_ELEM_BLOCK_SIGHT=4096,
    FX_ELEM_DRAW_IN_THERMAL_VIEW_ONLY=8192,
    FX_ELEM_TRAIL_ORIENT_BY_VELOCITY=16384,
    FX_ELEM_EMIT_ORIENT_BY_ELEM=32768,
    FX_ELEM_HAS_VELOCITY_GRAPH_LOCAL=16777216,
    FX_ELEM_HAS_VELOCITY_GRAPH_WORLD=33554432,
    FX_ELEM_HAS_GRAVITY=67108864,
    FX_ELEM_USE_MODEL_PHYSICS=134217728,
    FX_ELEM_NONUNIFORM_SCALE=268435456,
    FX_ELEM_CLOUD_SHAPE_CUBE=0,
    FX_ELEM_CLOUD_SHAPE_SPHERE_LARGE=536870912,
    FX_ELEM_CLOUD_SHAPE_SPHERE_MEDIUM=1073741824,
    FX_ELEM_CLOUD_SHAPE_SPHERE_SMALL=1610612736,
    FX_ELEM_CLOUD_SHAPE_MASK=1610612736,
    FX_ELEM_FOUNTAIN_DISABLE_COLLISION=-2147483648
};

enum _unnamed_5089
{
    THREAD_VALUE_PROF_STACK=0,
    THREAD_VALUE_VA=1,
    THREAD_VALUE_COM_ERROR=2,
    THREAD_VALUE_TRACE=3,
    THREAD_VALUE_COUNT=4
};

enum _unnamed_5090
{
    FX_ELEM_TYPE_SPRITE_BILLBOARD=0,
    FX_ELEM_TYPE_SPRITE_ORIENTED=1,
    FX_ELEM_TYPE_TAIL=2,
    FX_ELEM_TYPE_TRAIL=3,
    FX_ELEM_TYPE_CLOUD=4,
    FX_ELEM_TYPE_SPARK_CLOUD=5,
    FX_ELEM_TYPE_SPARK_FOUNTAIN=6,
    FX_ELEM_TYPE_MODEL=7,
    FX_ELEM_TYPE_OMNI_LIGHT=8,
    FX_ELEM_TYPE_SPOT_LIGHT=9,
    FX_ELEM_TYPE_SOUND=10,
    FX_ELEM_TYPE_DECAL=11,
    FX_ELEM_TYPE_RUNNER=12,
    FX_ELEM_TYPE_COUNT=13,
    FX_ELEM_TYPE_LAST_SPRITE=3,
    FX_ELEM_TYPE_LAST_DRAWN=9
};

struct FxTrailVertex// Size=0x14 (Id=5091)
{
    float pos[2];// Offset=0x0 Size=0x8
    float normal[2];// Offset=0x8 Size=0x8
    float texCoord;// Offset=0x10 Size=0x4
};

struct FxEffect// Size=0x90 (Id=5092)
{
    union // Size=0x4 (Id=0)
    {
        const int HANDLE_SCALE;// Offset=0x0 Size=0x4
        struct FxEffectDef * def;// Offset=0x0 Size=0x4
    };
    long status;// Offset=0x4 Size=0x4
    unsigned short firstElemHandle[3];// Offset=0x8 Size=0x6
    unsigned short firstSortedElemHandle;// Offset=0xe Size=0x2
    unsigned short firstTrailHandle;// Offset=0x10 Size=0x2
    unsigned short firstSparkFountainHandle;// Offset=0x12 Size=0x2
    unsigned short pad16[1];// Offset=0x14 Size=0x2
    unsigned short randomSeed;// Offset=0x16 Size=0x2
    unsigned short owner;// Offset=0x18 Size=0x2
    unsigned char lighting[3];// Offset=0x1a Size=0x3
    unsigned char pad8[2];// Offset=0x1d Size=0x2
    unsigned char markViewmodelClientIndex;// Offset=0x1f Size=0x1
    unsigned short markEntnum;// Offset=0x20 Size=0x2
    unsigned short flags;// Offset=0x22 Size=0x2
    unsigned char bolt;// Offset=0x24 Size=0x1
    unsigned char runnerSortOrder;// Offset=0x25 Size=0x1
    unsigned char __align0[2];// Offset=0x26 Size=0x2
    long frameCount;// Offset=0x28 Size=0x4
    int msecBegin;// Offset=0x2c Size=0x4
    int msecLastUpdate;// Offset=0x30 Size=0x4
    struct FxSpatialFrame frameAtSpawn;// Offset=0x34 Size=0x1c
    struct FxSpatialFrame frameNow;// Offset=0x50 Size=0x1c
    struct FxSpatialFrame framePrev;// Offset=0x6c Size=0x1c
    float distanceTravelled;// Offset=0x88 Size=0x4
    char pad2[4];// Offset=0x8c Size=0x4
};

struct FxTrailDef// Size=0x24 (Id=5093)
{
    int scrollTimeMsec;// Offset=0x0 Size=0x4
    int repeatDist;// Offset=0x4 Size=0x4
    float invSplitDist;// Offset=0x8 Size=0x4
    float invSplitArcDist;// Offset=0xc Size=0x4
    float invSplitTime;// Offset=0x10 Size=0x4
    int vertCount;// Offset=0x14 Size=0x4
    struct FxTrailVertex * verts;// Offset=0x18 Size=0x4
    int indCount;// Offset=0x1c Size=0x4
    unsigned short * inds;// Offset=0x20 Size=0x4
};

struct FxElemVec3Range// Size=0x18 (Id=5094)
{
    float base[3];// Offset=0x0 Size=0xc
    float amplitude[3];// Offset=0xc Size=0xc
};

struct FxGlassVertex// Size=0x4 (Id=5095)
{
    short x;// Offset=0x0 Size=0x2
    short y;// Offset=0x2 Size=0x2
};

class PhysStaticArray<dxJointHinge,192>// Size=0x8a04 (Id=5096)
{
    union // Size=0x8a04 (Id=0)
    {
        int freeEntry;// Offset=0x0 Size=0x4
        struct dxJointHinge entries[192];// Offset=0x4 Size=0x8a00
        void init();// Offset=0x0 Size=0x78
        struct dxJointHinge * allocate();
        void release(struct dxJointHinge * );
        bool isMember(unsigned int );
    };
};

struct FxGlassHoleHeader// Size=0x4 (Id=5097)
{
    unsigned short uniqueVertCount;// Offset=0x0 Size=0x2
    unsigned char touchVert;// Offset=0x2 Size=0x1
    unsigned char pad[1];// Offset=0x3 Size=0x1
};

struct FxSparkFountainDef// Size=0x34 (Id=5098)
{
    float gravity;// Offset=0x0 Size=0x4
    float bounceFrac;// Offset=0x4 Size=0x4
    float bounceRand;// Offset=0x8 Size=0x4
    float sparkSpacing;// Offset=0xc Size=0x4
    float sparkLength;// Offset=0x10 Size=0x4
    int sparkCount;// Offset=0x14 Size=0x4
    float loopTime;// Offset=0x18 Size=0x4
    float velMin;// Offset=0x1c Size=0x4
    float velMax;// Offset=0x20 Size=0x4
    float velConeFrac;// Offset=0x24 Size=0x4
    float restSpeed;// Offset=0x28 Size=0x4
    float boostTime;// Offset=0x2c Size=0x4
    float boostFactor;// Offset=0x30 Size=0x4
};

struct FxGlassCrackHeader// Size=0x4 (Id=5099)
{
    unsigned short uniqueVertCount;// Offset=0x0 Size=0x2
    unsigned char beginVertIndex;// Offset=0x2 Size=0x1
    unsigned char endVertIndex;// Offset=0x3 Size=0x1
};

struct FxElemVelStateInFrame// Size=0x30 (Id=5100)
{
    struct FxElemVec3Range velocity;// Offset=0x0 Size=0x18
    struct FxElemVec3Range totalDelta;// Offset=0x18 Size=0x18
};

struct GfxPlacement// Size=0x1c (Id=5101)
{
    float quat[4];// Offset=0x0 Size=0x10
    float origin[3];// Offset=0x10 Size=0xc
};

struct pooldata_t// Size=0x10 (Id=5102)
{
    void * firstFree;// Offset=0x0 Size=0x4
    int activeCount;// Offset=0x4 Size=0x4
    void * bufferStart;// Offset=0x8 Size=0x4
    int bufferSize;// Offset=0xc Size=0x4
};

class PhysStaticArray<dxJointBall,160>// Size=0x3984 (Id=5103)
{
    union // Size=0x3984 (Id=0)
    {
        int freeEntry;// Offset=0x0 Size=0x4
        struct dxJointBall entries[160];// Offset=0x4 Size=0x3980
        void init();// Offset=0x0 Size=0x70
        struct dxJointBall * allocate();
        void release(struct dxJointBall * );
        bool isMember(unsigned int );
    };
};

struct Jitter// Size=0x24 (Id=5104)
{
    float origin[3];// Offset=0x0 Size=0xc
    float innerRadiusSq;// Offset=0xc Size=0x4
    float outerRadiusSq;// Offset=0x10 Size=0x4
    float innerRadius;// Offset=0x14 Size=0x4
    float outerRadius;// Offset=0x18 Size=0x4
    float minDisplacement;// Offset=0x1c Size=0x4
    float maxDisplacement;// Offset=0x20 Size=0x4
};

class PhysStaticArray<dxJointAMotor,160>// Size=0xb684 (Id=5105)
{
    union // Size=0xb684 (Id=0)
    {
        int freeEntry;// Offset=0x0 Size=0x4
        struct dxJointAMotor entries[160];// Offset=0x4 Size=0xb680
        void init();// Offset=0x0 Size=0x78
        struct dxJointAMotor * allocate();
        void release(struct dxJointAMotor * );
        bool isMember(unsigned int );
    };
};

union FxElemExtendedDefPtr// Size=0x4 (Id=5106)
{
    struct FxTrailDef * trailDef;// Offset=0x0 Size=0x4
    struct FxSparkFountainDef * sparkFountainDef;// Offset=0x0 Size=0x4
    void * unknownDef;// Offset=0x0 Size=0x4
};

struct FxElemMarkVisuals// Size=0x8 (Id=5107)
{
    struct Material * materials[2];// Offset=0x0 Size=0x8
};

struct DynEntityPose// Size=0x20 (Id=5108)
{
    struct GfxPlacement pose;// Offset=0x0 Size=0x1c
    float radius;// Offset=0x1c Size=0x4
};

struct PhysGlob::<unnamed-type-vehicle>// Size=0x1490 (Id=5109)
{
    struct dxBody bodies[8];// Offset=0x0 Size=0xa80
    struct pooldata_t bodyPool;// Offset=0xa80 Size=0x10
    unsigned char geoms[1664];// Offset=0xa90 Size=0x680
    struct pooldata_t geomPool;// Offset=0x1110 Size=0x10
    struct PhysObjUserData userData[8];// Offset=0x1120 Size=0x360
    struct pooldata_t userDataPool;// Offset=0x1480 Size=0x10
    void <unnamed-type-vehicle>();
};

struct cStaticModel_s// Size=0x4c (Id=5110)
{
    struct XModel * xmodel;// Offset=0x0 Size=0x4
    float origin[3];// Offset=0x4 Size=0xc
    float invScaledAxis[3][3];// Offset=0x10 Size=0x24
    struct Bounds absBounds;// Offset=0x34 Size=0x18
};

struct cNode_t// Size=0x8 (Id=5111)
{
    struct cplane_s * plane;// Offset=0x0 Size=0x4
    short children[2];// Offset=0x4 Size=0x4
};

struct FxSpawnDefLooping// Size=0x8 (Id=5112)
{
    int intervalMsec;// Offset=0x0 Size=0x4
    int count;// Offset=0x4 Size=0x4
};

struct FxSpatialFrame// Size=0x1c (Id=5113)
{
    float quat[4];// Offset=0x0 Size=0x10
    float origin[3];// Offset=0x10 Size=0xc
};

struct FxGlassPieceDynamics// Size=0x24 (Id=5114)
{
    int fallTime;// Offset=0x0 Size=0x4
    int physObjId;// Offset=0x4 Size=0x4
    int physJointId;// Offset=0x8 Size=0x4
    float vel[3];// Offset=0xc Size=0xc
    float avel[3];// Offset=0x18 Size=0xc
};

struct FxFloatRange// Size=0x8 (Id=5115)
{
    float base;// Offset=0x0 Size=0x4
    float amplitude;// Offset=0x4 Size=0x4
};

union FxElemVisuals// Size=0x4 (Id=5116)
{
    void * anonymous;// Offset=0x0 Size=0x4
    struct Material * material;// Offset=0x0 Size=0x4
    struct XModel * model;// Offset=0x0 Size=0x4
    union FxEffectDefRef effectDef;// Offset=0x0 Size=0x4
    char * soundName;// Offset=0x0 Size=0x4
};

struct FxElemVelStateSample// Size=0x60 (Id=5117)
{
    struct FxElemVelStateInFrame local;// Offset=0x0 Size=0x30
    struct FxElemVelStateInFrame world;// Offset=0x30 Size=0x30
};

struct FxElemDef// Size=0xfc (Id=5118)
{
    int flags;// Offset=0x0 Size=0x4
    union FxSpawnDef spawn;// Offset=0x4 Size=0x8
    struct FxFloatRange spawnRange;// Offset=0xc Size=0x8
    struct FxFloatRange fadeInRange;// Offset=0x14 Size=0x8
    struct FxFloatRange fadeOutRange;// Offset=0x1c Size=0x8
    float spawnFrustumCullRadius;// Offset=0x24 Size=0x4
    struct FxIntRange spawnDelayMsec;// Offset=0x28 Size=0x8
    struct FxIntRange lifeSpanMsec;// Offset=0x30 Size=0x8
    struct FxFloatRange spawnOrigin[3];// Offset=0x38 Size=0x18
    struct FxFloatRange spawnOffsetRadius;// Offset=0x50 Size=0x8
    struct FxFloatRange spawnOffsetHeight;// Offset=0x58 Size=0x8
    struct FxFloatRange spawnAngles[3];// Offset=0x60 Size=0x18
    struct FxFloatRange angularVelocity[3];// Offset=0x78 Size=0x18
    struct FxFloatRange initialRotation;// Offset=0x90 Size=0x8
    struct FxFloatRange gravity;// Offset=0x98 Size=0x8
    struct FxFloatRange reflectionFactor;// Offset=0xa0 Size=0x8
    struct FxElemAtlas atlas;// Offset=0xa8 Size=0x8
    unsigned char elemType;// Offset=0xb0 Size=0x1
    unsigned char visualCount;// Offset=0xb1 Size=0x1
    unsigned char velIntervalCount;// Offset=0xb2 Size=0x1
    unsigned char visStateIntervalCount;// Offset=0xb3 Size=0x1
    struct FxElemVelStateSample * velSamples;// Offset=0xb4 Size=0x4
    struct FxElemVisStateSample * visSamples;// Offset=0xb8 Size=0x4
    union FxElemDefVisuals visuals;// Offset=0xbc Size=0x4
    struct Bounds collBounds;// Offset=0xc0 Size=0x18
    union FxEffectDefRef effectOnImpact;// Offset=0xd8 Size=0x4
    union FxEffectDefRef effectOnDeath;// Offset=0xdc Size=0x4
    union FxEffectDefRef effectEmitted;// Offset=0xe0 Size=0x4
    struct FxFloatRange emitDist;// Offset=0xe4 Size=0x8
    struct FxFloatRange emitDistVariance;// Offset=0xec Size=0x8
    union FxElemExtendedDefPtr extended;// Offset=0xf4 Size=0x4
    unsigned char sortOrder;// Offset=0xf8 Size=0x1
    unsigned char lightingFrac;// Offset=0xf9 Size=0x1
    unsigned char useItemClip;// Offset=0xfa Size=0x1
    unsigned char fadeInfo;// Offset=0xfb Size=0x1
};

struct FxEffectDef// Size=0x20 (Id=5119)
{
    char * name;// Offset=0x0 Size=0x4
    int flags;// Offset=0x4 Size=0x4
    int totalSize;// Offset=0x8 Size=0x4
    int msecLoopingLife;// Offset=0xc Size=0x4
    int elemDefCountLooping;// Offset=0x10 Size=0x4
    int elemDefCountOneShot;// Offset=0x14 Size=0x4
    int elemDefCountEmission;// Offset=0x18 Size=0x4
    struct FxElemDef * elemDefs;// Offset=0x1c Size=0x4
};

struct cLeafBrushNodeLeaf_t// Size=0x4 (Id=5120)
{
    unsigned short * brushes;// Offset=0x0 Size=0x4
};

struct FxGlassPieceState// Size=0x20 (Id=5121)
{
    float texCoordOrigin[2];// Offset=0x0 Size=0x8
    unsigned int supportMask;// Offset=0x8 Size=0x4
    unsigned short initIndex;// Offset=0xc Size=0x2
    unsigned short geoDataStart;// Offset=0xe Size=0x2
    unsigned char defIndex;// Offset=0x10 Size=0x1
    unsigned char pad[5];// Offset=0x11 Size=0x5
    unsigned char vertCount;// Offset=0x16 Size=0x1
    unsigned char holeDataCount;// Offset=0x17 Size=0x1
    unsigned char crackDataCount;// Offset=0x18 Size=0x1
    unsigned char fanDataCount;// Offset=0x19 Size=0x1
    unsigned short flags;// Offset=0x1a Size=0x2
    float areaX2;// Offset=0x1c Size=0x4
};

enum physStuckState_t
{
    PHYS_OBJ_STATE_POSSIBLY_STUCK=0,
    PHYS_OBJ_STATE_STUCK=1,
    PHYS_OBJ_STATE_FREE=2
};

struct PhysObjUserData// Size=0x6c (Id=5123)
{
    float translation[3];// Offset=0x0 Size=0xc
    struct dxBody * body;// Offset=0xc Size=0x4
    float savedPos[3];// Offset=0x10 Size=0xc
    float savedRot[3][3];// Offset=0x1c Size=0x24
    float lastTunnelTracePos[3];// Offset=0x40 Size=0xc
    int sndClass;// Offset=0x4c Size=0x4
    float friction;// Offset=0x50 Size=0x4
    float bounce;// Offset=0x54 Size=0x4
    enum physStuckState_t state;// Offset=0x58 Size=0x4
    float contactCentroid[3];// Offset=0x5c Size=0xc
    unsigned int flags;// Offset=0x68 Size=0x4
};

struct cLeafBrushNode_s// Size=0x14 (Id=5124)
{
    unsigned char axis;// Offset=0x0 Size=0x1
    unsigned char __align0[1];// Offset=0x1 Size=0x1
    short leafBrushCount;// Offset=0x2 Size=0x2
    int contents;// Offset=0x4 Size=0x4
    union cLeafBrushNodeData_t data;// Offset=0x8 Size=0xc
};

struct TraceCheckCount// Size=0x8 (Id=5125)
{
    int global;// Offset=0x0 Size=0x4
    int * partitions;// Offset=0x4 Size=0x4
};

struct PhysWorldData// Size=0xe8 (Id=5126)
{
    int timeLastSnapshot;// Offset=0x0 Size=0x4
    int timeLastUpdate;// Offset=0x4 Size=0x4
    float timeNowLerpFrac;// Offset=0x8 Size=0x4
    void  ( * collisionCallback)();// Offset=0xc Size=0x4
    void  ( * postFrameCallback)();// Offset=0x10 Size=0x4
    void  ( * impactCallback)(int ,float * ,float ,bool );// Offset=0x14 Size=0x4
    void  ( * glassCallback)(float * ,float * );// Offset=0x18 Size=0x4
    int numJitterRegions;// Offset=0x1c Size=0x4
    struct Jitter jitterRegions[5];// Offset=0x20 Size=0xb4
    float gravityDirection[3];// Offset=0xd4 Size=0xc
    int clipMask;// Offset=0xe0 Size=0x4
    bool useContactCentroids;// Offset=0xe4 Size=0x1
    bool doInterBodyCollisions;// Offset=0xe5 Size=0x1
};

struct GeomStateCylinder// Size=0xc (Id=5127)
{
    int direction;// Offset=0x0 Size=0x4
    float radius;// Offset=0x4 Size=0x4
    float halfHeight;// Offset=0x8 Size=0x4
};

struct FxSpawnDefOneShot// Size=0x8 (Id=5128)
{
    struct FxIntRange count;// Offset=0x0 Size=0x8
};

union FxElemDefVisuals// Size=0x4 (Id=5129)
{
    struct FxElemMarkVisuals * markArray;// Offset=0x0 Size=0x4
    union FxElemVisuals * array;// Offset=0x0 Size=0x4
    union FxElemVisuals instance;// Offset=0x0 Size=0x4
};

struct FxElemVisualState// Size=0x18 (Id=5130)
{
    unsigned char color[4];// Offset=0x0 Size=0x4
    float rotationDelta;// Offset=0x4 Size=0x4
    float rotationTotal;// Offset=0x8 Size=0x4
    float size[2];// Offset=0xc Size=0x8
    float scale;// Offset=0x14 Size=0x4
};

union CollisionAabbTreeIndex// Size=0x4 (Id=5131)
{
    int firstChildIndex;// Offset=0x0 Size=0x4
    int partitionIndex;// Offset=0x0 Size=0x4
};

struct FxElemAtlas// Size=0x8 (Id=5132)
{
    unsigned char behavior;// Offset=0x0 Size=0x1
    unsigned char index;// Offset=0x1 Size=0x1
    unsigned char fps;// Offset=0x2 Size=0x1
    unsigned char loopCount;// Offset=0x3 Size=0x1
    unsigned char colIndexBits;// Offset=0x4 Size=0x1
    unsigned char rowIndexBits;// Offset=0x5 Size=0x1
    short entryCount;// Offset=0x6 Size=0x2
};

union FxGlassGeometryData// Size=0x4 (Id=5133)
{
    struct FxGlassVertex vert;// Offset=0x0 Size=0x4
    struct FxGlassHoleHeader hole;// Offset=0x0 Size=0x4
    struct FxGlassCrackHeader crack;// Offset=0x0 Size=0x4
    unsigned char asBytes[4];// Offset=0x0 Size=0x4
    short anonymous[2];// Offset=0x0 Size=0x4
};

struct FxGlassInitPieceState// Size=0x34 (Id=5134)
{
    struct FxSpatialFrame frame;// Offset=0x0 Size=0x1c
    float radius;// Offset=0x1c Size=0x4
    float texCoordOrigin[2];// Offset=0x20 Size=0x8
    unsigned int supportMask;// Offset=0x28 Size=0x4
    float areaX2;// Offset=0x2c Size=0x4
    unsigned char defIndex;// Offset=0x30 Size=0x1
    unsigned char vertCount;// Offset=0x31 Size=0x1
    unsigned char fanDataCount;// Offset=0x32 Size=0x1
    unsigned char pad[1];// Offset=0x33 Size=0x1
};

struct FxElemVisStateSample// Size=0x30 (Id=5135)
{
    struct FxElemVisualState base;// Offset=0x0 Size=0x18
    struct FxElemVisualState amplitude;// Offset=0x18 Size=0x18
};

struct ClipMaterial// Size=0xc (Id=5136)
{
    char * name;// Offset=0x0 Size=0x4
    int surfaceFlags;// Offset=0x4 Size=0x4
    int contents;// Offset=0x8 Size=0x4
};

struct FxIntRange// Size=0x8 (Id=5137)
{
    int base;// Offset=0x0 Size=0x4
    int amplitude;// Offset=0x4 Size=0x4
};

union FxEffectDefRef// Size=0x4 (Id=5138)
{
    struct FxEffectDef * handle;// Offset=0x0 Size=0x4
    char * name;// Offset=0x0 Size=0x4
};

enum DynEntityType
{
    DYNENT_TYPE_INVALID=0,
    DYNENT_TYPE_CLUTTER=1,
    DYNENT_TYPE_DESTRUCT=2,
    DYNENT_TYPE_COUNT=3
};

struct DynEntityDef// Size=0x5c (Id=5140)
{
    enum DynEntityType type;// Offset=0x0 Size=0x4
    struct GfxPlacement pose;// Offset=0x4 Size=0x1c
    struct XModel * xModel;// Offset=0x20 Size=0x4
    unsigned short brushModel;// Offset=0x24 Size=0x2
    unsigned short physicsBrushModel;// Offset=0x26 Size=0x2
    struct FxEffectDef * destroyFx;// Offset=0x28 Size=0x4
    struct PhysPreset * physPreset;// Offset=0x2c Size=0x4
    int health;// Offset=0x30 Size=0x4
    struct PhysMass mass;// Offset=0x34 Size=0x24
    int contents;// Offset=0x58 Size=0x4
};

union FxSpawnDef// Size=0x8 (Id=5141)
{
    struct FxSpawnDefLooping looping;// Offset=0x0 Size=0x8
    struct FxSpawnDefOneShot oneShot;// Offset=0x0 Size=0x8
};

struct CollisionAabbTree// Size=0x20 (Id=5142)
{
    float midPoint[3];// Offset=0x0 Size=0xc
    unsigned short materialIndex;// Offset=0xc Size=0x2
    unsigned short childCount;// Offset=0xe Size=0x2
    float halfSize[3];// Offset=0x10 Size=0xc
    union CollisionAabbTreeIndex u;// Offset=0x1c Size=0x4
};

struct SModelAabbNode// Size=0x1c (Id=5143)
{
    struct Bounds bounds;// Offset=0x0 Size=0x18
    unsigned short firstChild;// Offset=0x18 Size=0x2
    unsigned short childCount;// Offset=0x1a Size=0x2
};

struct FxElemVelStateSample// Size=0x60 (Id=5144)
{
    struct FxElemVelStateInFrame local;// Offset=0x0 Size=0x30
    struct FxElemVelStateInFrame world;// Offset=0x30 Size=0x30
};

struct FxElemVisStateSample// Size=0x30 (Id=5145)
{
    struct FxElemVisualState base;// Offset=0x0 Size=0x18
    struct FxElemVisualState amplitude;// Offset=0x18 Size=0x18
};

struct FxElemDef// Size=0xfc (Id=5146)
{
    int flags;// Offset=0x0 Size=0x4
    union FxSpawnDef spawn;// Offset=0x4 Size=0x8
    struct FxFloatRange spawnRange;// Offset=0xc Size=0x8
    struct FxFloatRange fadeInRange;// Offset=0x14 Size=0x8
    struct FxFloatRange fadeOutRange;// Offset=0x1c Size=0x8
    float spawnFrustumCullRadius;// Offset=0x24 Size=0x4
    struct FxIntRange spawnDelayMsec;// Offset=0x28 Size=0x8
    struct FxIntRange lifeSpanMsec;// Offset=0x30 Size=0x8
    struct FxFloatRange spawnOrigin[3];// Offset=0x38 Size=0x18
    struct FxFloatRange spawnOffsetRadius;// Offset=0x50 Size=0x8
    struct FxFloatRange spawnOffsetHeight;// Offset=0x58 Size=0x8
    struct FxFloatRange spawnAngles[3];// Offset=0x60 Size=0x18
    struct FxFloatRange angularVelocity[3];// Offset=0x78 Size=0x18
    struct FxFloatRange initialRotation;// Offset=0x90 Size=0x8
    struct FxFloatRange gravity;// Offset=0x98 Size=0x8
    struct FxFloatRange reflectionFactor;// Offset=0xa0 Size=0x8
    struct FxElemAtlas atlas;// Offset=0xa8 Size=0x8
    unsigned char elemType;// Offset=0xb0 Size=0x1
    unsigned char visualCount;// Offset=0xb1 Size=0x1
    unsigned char velIntervalCount;// Offset=0xb2 Size=0x1
    unsigned char visStateIntervalCount;// Offset=0xb3 Size=0x1
    struct FxElemVelStateSample * velSamples;// Offset=0xb4 Size=0x4
    struct FxElemVisStateSample * visSamples;// Offset=0xb8 Size=0x4
    union FxElemDefVisuals visuals;// Offset=0xbc Size=0x4
    struct Bounds collBounds;// Offset=0xc0 Size=0x18
    union FxEffectDefRef effectOnImpact;// Offset=0xd8 Size=0x4
    union FxEffectDefRef effectOnDeath;// Offset=0xdc Size=0x4
    union FxEffectDefRef effectEmitted;// Offset=0xe0 Size=0x4
    struct FxFloatRange emitDist;// Offset=0xe4 Size=0x8
    struct FxFloatRange emitDistVariance;// Offset=0xec Size=0x8
    union FxElemExtendedDefPtr extended;// Offset=0xf4 Size=0x4
    unsigned char sortOrder;// Offset=0xf8 Size=0x1
    unsigned char lightingFrac;// Offset=0xf9 Size=0x1
    unsigned char useItemClip;// Offset=0xfa Size=0x1
    unsigned char fadeInfo;// Offset=0xfb Size=0x1
};

struct DynEntityClient// Size=0xc (Id=5147)
{
    int physObjId;// Offset=0x0 Size=0x4
    unsigned short flags;// Offset=0x4 Size=0x2
    unsigned short lightingHandle;// Offset=0x6 Size=0x2
    int health;// Offset=0x8 Size=0x4
};

struct Float4Bounds// Size=0x20 (Id=5148)
{
    struct __vector4 midPoint;// Offset=0x0 Size=0x10
    struct __vector4 halfSize;// Offset=0x10 Size=0x10
};

struct FxGlassSystem// Size=0x70 (Id=5149)
{
    int time;// Offset=0x0 Size=0x4
    int prevTime;// Offset=0x4 Size=0x4
    unsigned int defCount;// Offset=0x8 Size=0x4
    unsigned int pieceLimit;// Offset=0xc Size=0x4
    unsigned int pieceWordCount;// Offset=0x10 Size=0x4
    unsigned int initPieceCount;// Offset=0x14 Size=0x4
    unsigned int cellCount;// Offset=0x18 Size=0x4
    unsigned int activePieceCount;// Offset=0x1c Size=0x4
    unsigned int firstFreePiece;// Offset=0x20 Size=0x4
    unsigned int geoDataLimit;// Offset=0x24 Size=0x4
    unsigned int geoDataCount;// Offset=0x28 Size=0x4
    unsigned int initGeoDataCount;// Offset=0x2c Size=0x4
    struct FxGlassDef * defs;// Offset=0x30 Size=0x4
    union FxGlassPiecePlace * piecePlaces;// Offset=0x34 Size=0x4
    struct FxGlassPieceState * pieceStates;// Offset=0x38 Size=0x4
    struct FxGlassPieceDynamics * pieceDynamics;// Offset=0x3c Size=0x4
    union FxGlassGeometryData * geoData;// Offset=0x40 Size=0x4
    unsigned int * isInUse;// Offset=0x44 Size=0x4
    unsigned int * cellBits;// Offset=0x48 Size=0x4
    unsigned char * visData;// Offset=0x4c Size=0x4
    float * linkOrg[3];// Offset=0x50 Size=0x4
    float * halfThickness;// Offset=0x54 Size=0x4
    unsigned short * lightingHandles;// Offset=0x58 Size=0x4
    struct FxGlassInitPieceState * initPieceStates;// Offset=0x5c Size=0x4
    union FxGlassGeometryData * initGeoData;// Offset=0x60 Size=0x4
    bool needToCompactData;// Offset=0x64 Size=0x1
    unsigned char initCount;// Offset=0x65 Size=0x1
    unsigned char __align0[2];// Offset=0x66 Size=0x2
    float effectChanceAccum;// Offset=0x68 Size=0x4
    int lastPieceDeletionTime;// Offset=0x6c Size=0x4
};

struct GeomStateGlass// Size=0x10 (Id=5150)
{
    struct FxGlassSystem * glassSys;// Offset=0x0 Size=0x4
    unsigned int pieceIndex;// Offset=0x4 Size=0x4
    float halfThickness;// Offset=0x8 Size=0x4
    unsigned int convexHullMask;// Offset=0xc Size=0x4
};

struct DynEntityColl// Size=0x14 (Id=5151)
{
    unsigned short sector;// Offset=0x0 Size=0x2
    unsigned short nextEntInSector;// Offset=0x2 Size=0x2
    float linkMins[2];// Offset=0x4 Size=0x8
    float linkMaxs[2];// Offset=0xc Size=0x8
};

struct cLeafBrushNodeChildren_t// Size=0xc (Id=5152)
{
    float dist;// Offset=0x0 Size=0x4
    float range;// Offset=0x4 Size=0x4
    unsigned short childOffset[2];// Offset=0x8 Size=0x4
};

union FxGlassPiecePlace// Size=0x20 (Id=5153)
{
    union // Size=0x20 (Id=0)
    {
        struct FxSpatialFrame frame;// Offset=0x0 Size=0x1c
        float radius;// Offset=0x1c Size=0x4
        unsigned int nextFree;// Offset=0x0 Size=0x4
    };
};

struct cmodel_t// Size=0x44 (Id=5154)
{
    struct Bounds bounds;// Offset=0x0 Size=0x18
    float radius;// Offset=0x18 Size=0x4
    struct cLeaf_t leaf;// Offset=0x1c Size=0x28
};

struct BrushWrapper// Size=0x44 (Id=5155)
{
    struct Bounds bounds;// Offset=0x0 Size=0x18
    struct cbrush_t brush;// Offset=0x18 Size=0x24
    int totalEdgeCount;// Offset=0x3c Size=0x4
    struct cplane_s * planes;// Offset=0x40 Size=0x4
};

union objInfo::<unnamed-type-u>// Size=0xc (Id=5156)
{
    union // Size=0xc (Id=0)
    {
        float sideExtents[3];// Offset=0x0 Size=0xc
        struct cmodel_t * brushModel;// Offset=0x0 Size=0x4
        struct BrushWrapper * brushWrapper;// Offset=0x0 Size=0x4
        struct GeomStateGlass * glass;// Offset=0x0 Size=0x4
    };
};

struct CollisionPartition// Size=0xc (Id=5157)
{
    unsigned char triCount;// Offset=0x0 Size=0x1
    unsigned char borderCount;// Offset=0x1 Size=0x1
    unsigned char firstVertSegment;// Offset=0x2 Size=0x1
    unsigned char __align0[1];// Offset=0x3 Size=0x1
    int firstTri;// Offset=0x4 Size=0x4
    struct CollisionBorder * borders;// Offset=0x8 Size=0x4
};

struct FxGlassDef// Size=0x2c (Id=5158)
{
    float halfThickness;// Offset=0x0 Size=0x4
    float texVecs[2][2];// Offset=0x4 Size=0x10
    union GfxColor color;// Offset=0x14 Size=0x4
    struct Material * material;// Offset=0x18 Size=0x4
    struct Material * materialShattered;// Offset=0x1c Size=0x4
    struct PhysPreset * physPreset;// Offset=0x20 Size=0x4
    float invHighMipRadius;// Offset=0x24 Size=0x4
    float shatteredInvHighMipRadius;// Offset=0x28 Size=0x4
};

struct TraceThreadInfo// Size=0x8 (Id=5159)
{
    struct TraceCheckCount checkcount;// Offset=0x0 Size=0x8
};

struct CollisionBorder// Size=0x1c (Id=5160)
{
    float distEq[3];// Offset=0x0 Size=0xc
    float zBase;// Offset=0xc Size=0x4
    float zSlope;// Offset=0x10 Size=0x4
    float start;// Offset=0x14 Size=0x4
    float length;// Offset=0x18 Size=0x4
};

struct FxGlassSystem// Size=0x70 (Id=5161)
{
    int time;// Offset=0x0 Size=0x4
    int prevTime;// Offset=0x4 Size=0x4
    unsigned int defCount;// Offset=0x8 Size=0x4
    unsigned int pieceLimit;// Offset=0xc Size=0x4
    unsigned int pieceWordCount;// Offset=0x10 Size=0x4
    unsigned int initPieceCount;// Offset=0x14 Size=0x4
    unsigned int cellCount;// Offset=0x18 Size=0x4
    unsigned int activePieceCount;// Offset=0x1c Size=0x4
    unsigned int firstFreePiece;// Offset=0x20 Size=0x4
    unsigned int geoDataLimit;// Offset=0x24 Size=0x4
    unsigned int geoDataCount;// Offset=0x28 Size=0x4
    unsigned int initGeoDataCount;// Offset=0x2c Size=0x4
    struct FxGlassDef * defs;// Offset=0x30 Size=0x4
    union FxGlassPiecePlace * piecePlaces;// Offset=0x34 Size=0x4
    struct FxGlassPieceState * pieceStates;// Offset=0x38 Size=0x4
    struct FxGlassPieceDynamics * pieceDynamics;// Offset=0x3c Size=0x4
    union FxGlassGeometryData * geoData;// Offset=0x40 Size=0x4
    unsigned int * isInUse;// Offset=0x44 Size=0x4
    unsigned int * cellBits;// Offset=0x48 Size=0x4
    unsigned char * visData;// Offset=0x4c Size=0x4
    float * linkOrg[3];// Offset=0x50 Size=0x4
    float * halfThickness;// Offset=0x54 Size=0x4
    unsigned short * lightingHandles;// Offset=0x58 Size=0x4
    struct FxGlassInitPieceState * initPieceStates;// Offset=0x5c Size=0x4
    union FxGlassGeometryData * initGeoData;// Offset=0x60 Size=0x4
    bool needToCompactData;// Offset=0x64 Size=0x1
    unsigned char initCount;// Offset=0x65 Size=0x1
    unsigned char __align0[2];// Offset=0x66 Size=0x2
    float effectChanceAccum;// Offset=0x68 Size=0x4
    int lastPieceDeletionTime;// Offset=0x6c Size=0x4
};

struct FastCriticalSection// Size=0x8 (Id=5162)
{
    long readCount;// Offset=0x0 Size=0x4
    long writeCount;// Offset=0x4 Size=0x4
};

struct cLeaf_t// Size=0x28 (Id=5163)
{
    unsigned short firstCollAabbIndex;// Offset=0x0 Size=0x2
    unsigned short collAabbCount;// Offset=0x2 Size=0x2
    int brushContents;// Offset=0x4 Size=0x4
    int terrainContents;// Offset=0x8 Size=0x4
    struct Bounds bounds;// Offset=0xc Size=0x18
    int leafBrushNode;// Offset=0x24 Size=0x4
};

union cLeafBrushNodeData_t// Size=0xc (Id=5164)
{
    struct cLeafBrushNodeLeaf_t leaf;// Offset=0x0 Size=0x4
    struct cLeafBrushNodeChildren_t children;// Offset=0x0 Size=0xc
};

struct BrushInfo// Size=0x10 (Id=5165)
{
    union // Size=0x4 (Id=0)
    {
        union <unnamed-type-u>// Size=0x4 (Id=56787)
        {
            unsigned short brushModel;// Offset=0x0 Size=0x2
            struct PhysCollmap * collmap;// Offset=0x0 Size=0x4
        };
        union BrushInfo::<unnamed-type-u> u;// Offset=0x0 Size=0x4
    };
    float centerOfMass[3];// Offset=0x4 Size=0xc
};

union BrushInfo::<unnamed-type-u>// Size=0x4 (Id=5166)
{
    unsigned short brushModel;// Offset=0x0 Size=0x2
    struct PhysCollmap * collmap;// Offset=0x0 Size=0x4
};

struct cmodel_t// Size=0x44 (Id=5167)
{
    struct Bounds bounds;// Offset=0x0 Size=0x18
    float radius;// Offset=0x18 Size=0x4
    struct cLeaf_t leaf;// Offset=0x1c Size=0x28
};

struct PhysVehicle// Size=0x28c (Id=5168)
{
    int body;// Offset=0x0 Size=0x4
    struct PhysVehicleWheel wheels[6];// Offset=0x4 Size=0x108
    struct JointOrientation orientationConstraint;// Offset=0x10c Size=0x64
    struct JointPath pathConstraint;// Offset=0x170 Size=0x64
    unsigned int wheelsOnGroundCount;// Offset=0x1d4 Size=0x4
    float invWheelsWithPower;// Offset=0x1d8 Size=0x4
    float desiredAccel;// Offset=0x1dc Size=0x4
    float desiredSpeed;// Offset=0x1e0 Size=0x4
    float brakingFactor;// Offset=0x1e4 Size=0x4
    float steeringAngle;// Offset=0x1e8 Size=0x4
    float pitchControl;// Offset=0x1ec Size=0x4
    float velocity[3];// Offset=0x1f0 Size=0xc
    float acceleration[3];// Offset=0x1fc Size=0xc
    float prevAcceleration[3];// Offset=0x208 Size=0xc
    float localVelocity[3];// Offset=0x214 Size=0xc
    float localAcceleration[3];// Offset=0x220 Size=0xc
    float jolt[3];// Offset=0x22c Size=0xc
    float frontWheelCenter[3];// Offset=0x238 Size=0xc
    float rearWheelCenter[3];// Offset=0x244 Size=0xc
    float steeringPoint[3];// Offset=0x250 Size=0xc
    float steeringPointDist;// Offset=0x25c Size=0x4
    float steeringHalfWidth;// Offset=0x260 Size=0x4
    unsigned int flags;// Offset=0x264 Size=0x4
    struct VehiclePhysDef * def;// Offset=0x268 Size=0x4
    struct GraphFloat * accelGraph;// Offset=0x26c Size=0x4
    float topSpeed;// Offset=0x270 Size=0x4
    int passEntityNum;// Offset=0x274 Size=0x4
    int modelIndex;// Offset=0x278 Size=0x4
    float tankMaxYawSpeed;// Offset=0x27c Size=0x4
    float tankYawAccel;// Offset=0x280 Size=0x4
    float conveyorVelocity[2];// Offset=0x284 Size=0x8
};

struct VehiclePhysDef// Size=0xb4 (Id=5169)
{
    int physicsEnabled;// Offset=0x0 Size=0x4
    char * physPresetName;// Offset=0x4 Size=0x4
    struct PhysPreset * physPreset;// Offset=0x8 Size=0x4
    char * accelGraphName;// Offset=0xc Size=0x4
    enum VehicleAxleType steeringAxle;// Offset=0x10 Size=0x4
    enum VehicleAxleType powerAxle;// Offset=0x14 Size=0x4
    enum VehicleAxleType brakingAxle;// Offset=0x18 Size=0x4
    float topSpeed;// Offset=0x1c Size=0x4
    float reverseSpeed;// Offset=0x20 Size=0x4
    float maxVelocity;// Offset=0x24 Size=0x4
    float maxPitch;// Offset=0x28 Size=0x4
    float maxRoll;// Offset=0x2c Size=0x4
    float suspensionTravelFront;// Offset=0x30 Size=0x4
    float suspensionTravelRear;// Offset=0x34 Size=0x4
    float suspensionStrengthFront;// Offset=0x38 Size=0x4
    float suspensionDampingFront;// Offset=0x3c Size=0x4
    float suspensionStrengthRear;// Offset=0x40 Size=0x4
    float suspensionDampingRear;// Offset=0x44 Size=0x4
    float frictionBraking;// Offset=0x48 Size=0x4
    float frictionCoasting;// Offset=0x4c Size=0x4
    float frictionTopSpeed;// Offset=0x50 Size=0x4
    float frictionSide;// Offset=0x54 Size=0x4
    float frictionSideRear;// Offset=0x58 Size=0x4
    float velocityDependentSlip;// Offset=0x5c Size=0x4
    float rollStability;// Offset=0x60 Size=0x4
    float rollResistance;// Offset=0x64 Size=0x4
    float pitchResistance;// Offset=0x68 Size=0x4
    float yawResistance;// Offset=0x6c Size=0x4
    float uprightStrengthPitch;// Offset=0x70 Size=0x4
    float uprightStrengthRoll;// Offset=0x74 Size=0x4
    float targetAirPitch;// Offset=0x78 Size=0x4
    float airYawTorque;// Offset=0x7c Size=0x4
    float airPitchTorque;// Offset=0x80 Size=0x4
    float minimumMomentumForCollision;// Offset=0x84 Size=0x4
    float collisionLaunchForceScale;// Offset=0x88 Size=0x4
    float wreckedMassScale;// Offset=0x8c Size=0x4
    float wreckedBodyFriction;// Offset=0x90 Size=0x4
    float minimumJoltForNotify;// Offset=0x94 Size=0x4
    float slipThresholdFront;// Offset=0x98 Size=0x4
    float slipThresholdRear;// Offset=0x9c Size=0x4
    float slipFricScaleFront;// Offset=0xa0 Size=0x4
    float slipFricScaleRear;// Offset=0xa4 Size=0x4
    float slipFricRateFront;// Offset=0xa8 Size=0x4
    float slipFricRateRear;// Offset=0xac Size=0x4
    float slipYawTorque;// Offset=0xb0 Size=0x4
};

struct PhysVehicleWheel// Size=0x2c (Id=5170)
{
    float originLocal[3];// Offset=0x0 Size=0xc
    unsigned int flags;// Offset=0xc Size=0x4
    float forward[3];// Offset=0x10 Size=0xc
    float speedRatio;// Offset=0x1c Size=0x4
    float accelRatio;// Offset=0x20 Size=0x4
    float sideFriction;// Offset=0x24 Size=0x4
    bool slipping;// Offset=0x28 Size=0x1
};

struct PhysVehicleControl// Size=0x18 (Id=5171)
{
    float steering;// Offset=0x0 Size=0x4
    float desiredSpeed;// Offset=0x4 Size=0x4
    float desiredSpeedReverse;// Offset=0x8 Size=0x4
    float accelOverride;// Offset=0xc Size=0x4
    float brake;// Offset=0x10 Size=0x4
    float pitch;// Offset=0x14 Size=0x4
};

struct PhysVehicleGlob// Size=0x1470 (Id=5172)
{
    struct PhysVehicle physVehicles[8];// Offset=0x0 Size=0x1460
    struct pooldata_t physVehiclePool;// Offset=0x1460 Size=0x10
};

struct PhysVehicleWheel// Size=0x2c (Id=5173)
{
    float originLocal[3];// Offset=0x0 Size=0xc
    unsigned int flags;// Offset=0xc Size=0x4
    float forward[3];// Offset=0x10 Size=0xc
    float speedRatio;// Offset=0x1c Size=0x4
    float accelRatio;// Offset=0x20 Size=0x4
    float sideFriction;// Offset=0x24 Size=0x4
    bool slipping;// Offset=0x28 Size=0x1
};

struct PhysVehicle// Size=0x28c (Id=5174)
{
    int body;// Offset=0x0 Size=0x4
    struct PhysVehicleWheel wheels[6];// Offset=0x4 Size=0x108
    struct JointOrientation orientationConstraint;// Offset=0x10c Size=0x64
    struct JointPath pathConstraint;// Offset=0x170 Size=0x64
    unsigned int wheelsOnGroundCount;// Offset=0x1d4 Size=0x4
    float invWheelsWithPower;// Offset=0x1d8 Size=0x4
    float desiredAccel;// Offset=0x1dc Size=0x4
    float desiredSpeed;// Offset=0x1e0 Size=0x4
    float brakingFactor;// Offset=0x1e4 Size=0x4
    float steeringAngle;// Offset=0x1e8 Size=0x4
    float pitchControl;// Offset=0x1ec Size=0x4
    float velocity[3];// Offset=0x1f0 Size=0xc
    float acceleration[3];// Offset=0x1fc Size=0xc
    float prevAcceleration[3];// Offset=0x208 Size=0xc
    float localVelocity[3];// Offset=0x214 Size=0xc
    float localAcceleration[3];// Offset=0x220 Size=0xc
    float jolt[3];// Offset=0x22c Size=0xc
    float frontWheelCenter[3];// Offset=0x238 Size=0xc
    float rearWheelCenter[3];// Offset=0x244 Size=0xc
    float steeringPoint[3];// Offset=0x250 Size=0xc
    float steeringPointDist;// Offset=0x25c Size=0x4
    float steeringHalfWidth;// Offset=0x260 Size=0x4
    unsigned int flags;// Offset=0x264 Size=0x4
    struct VehiclePhysDef * def;// Offset=0x268 Size=0x4
    struct GraphFloat * accelGraph;// Offset=0x26c Size=0x4
    float topSpeed;// Offset=0x270 Size=0x4
    int passEntityNum;// Offset=0x274 Size=0x4
    int modelIndex;// Offset=0x278 Size=0x4
    float tankMaxYawSpeed;// Offset=0x27c Size=0x4
    float tankYawAccel;// Offset=0x280 Size=0x4
    float conveyorVelocity[2];// Offset=0x284 Size=0x8
};

struct dxWorld : public dBase// Size=0x5c (Id=5175)
{
    struct dxBody * firstbody;// Offset=0x0 Size=0x4
    struct dxJoint * firstjoint;// Offset=0x4 Size=0x4
    int bodyCount;// Offset=0x8 Size=0x4
    int jointCount;// Offset=0xc Size=0x4
    struct dxWorldStepInfo stepInfo;// Offset=0x10 Size=0x28
    struct dxAutoDisable adis;// Offset=0x38 Size=0x10
    int adis_flag;// Offset=0x48 Size=0x4
    float seconds;// Offset=0x4c Size=0x4
    int useWorkerCmd;// Offset=0x50 Size=0x4
    enum PhysWorld worldIndex;// Offset=0x54 Size=0x4
    float angularVelocityMax;// Offset=0x58 Size=0x4
};

struct FxGlassInertiaTensor// Size=0x10 (Id=5176)
{
    float xx;// Offset=0x0 Size=0x4
    float yy;// Offset=0x4 Size=0x4
    float zz;// Offset=0x8 Size=0x4
    float xy;// Offset=0xc Size=0x4
};

struct GeomState// Size=0x48 (Id=5177)
{
    union // Size=0x2c (Id=0)
    {
        enum PhysicsGeomType type;// Offset=0x0 Size=0x4
        bool isOriented;// Offset=0x4 Size=0x1
        unsigned char __align0[3];// Offset=0x5 Size=0x3
        float orientation[3][3];// Offset=0x8 Size=0x24
        union <unnamed-type-u>// Size=0x1c (Id=56844)
        {
            struct GeomStateCylinder cylinderState;// Offset=0x0 Size=0xc
            struct GeomStateBox boxState;// Offset=0x0 Size=0xc
            struct GeomStateBrush brushState;// Offset=0x0 Size=0x1c
            struct GeomStateGlass glassState;// Offset=0x0 Size=0x10
        };
        unsigned char __align1[16];// Offset=0x1c Size=0x10
    };
    union GeomState::<unnamed-type-u> u;// Offset=0x2c Size=0x1c
};

struct GeomState// Size=0x48 (Id=5178)
{
    union // Size=0x2c (Id=0)
    {
        enum PhysicsGeomType type;// Offset=0x0 Size=0x4
        bool isOriented;// Offset=0x4 Size=0x1
        unsigned char __align0[3];// Offset=0x5 Size=0x3
        float orientation[3][3];// Offset=0x8 Size=0x24
        union <unnamed-type-u>// Size=0x1c (Id=56844)
        {
            struct GeomStateCylinder cylinderState;// Offset=0x0 Size=0xc
            struct GeomStateBox boxState;// Offset=0x0 Size=0xc
            struct GeomStateBrush brushState;// Offset=0x0 Size=0x1c
            struct GeomStateGlass glassState;// Offset=0x0 Size=0x10
        };
        unsigned char __align1[16];// Offset=0x1c Size=0x10
    };
    union GeomState::<unnamed-type-u> u;// Offset=0x2c Size=0x1c
};

struct BodyState// Size=0x78 (Id=5179)
{
    float position[3];// Offset=0x0 Size=0xc
    float odeQuaternion[4];// Offset=0xc Size=0x10
    float velocity[3];// Offset=0x1c Size=0xc
    float angVelocity[3];// Offset=0x28 Size=0xc
    float translation[3];// Offset=0x34 Size=0xc
    float lastTunnelTracePos[3];// Offset=0x40 Size=0xc
    float mass;// Offset=0x4c Size=0x4
    float friction;// Offset=0x50 Size=0x4
    float bounce;// Offset=0x54 Size=0x4
    enum physStuckState_t state;// Offset=0x58 Size=0x4
    int sndClass;// Offset=0x5c Size=0x4
    bool isAwake;// Offset=0x60 Size=0x1
    bool restoreAutodisable;// Offset=0x61 Size=0x1
    unsigned char __align0[2];// Offset=0x62 Size=0x2
    float adis_timeleft;// Offset=0x64 Size=0x4
    int adis_stepsleft;// Offset=0x68 Size=0x4
    float adis_linearThresholdSqrd;// Offset=0x6c Size=0x4
    float adis_angularThresholdSqrd;// Offset=0x70 Size=0x4
    float adis_idleTime;// Offset=0x74 Size=0x4
};

struct PhysMass// Size=0x24 (Id=5180)
{
    float centerOfMass[3];// Offset=0x0 Size=0xc
    float momentsOfInertia[3];// Offset=0xc Size=0xc
    float productsOfInertia[3];// Offset=0x18 Size=0xc
};

struct XModel// Size=0x10c (Id=5181)
{
    char * name;// Offset=0x0 Size=0x4
    unsigned char numBones;// Offset=0x4 Size=0x1
    unsigned char numRootBones;// Offset=0x5 Size=0x1
    unsigned char numsurfs;// Offset=0x6 Size=0x1
    unsigned char __align0[1];// Offset=0x7 Size=0x1
    float scale;// Offset=0x8 Size=0x4
    unsigned int noScalePartBits[5];// Offset=0xc Size=0x14
    unsigned short * boneNames;// Offset=0x20 Size=0x4
    unsigned char * parentList;// Offset=0x24 Size=0x4
    short * quats;// Offset=0x28 Size=0x4
    float * trans;// Offset=0x2c Size=0x4
    unsigned char * partClassification;// Offset=0x30 Size=0x4
    struct DObjAnimMat * baseMat;// Offset=0x34 Size=0x4
    struct Material ** materialHandles;// Offset=0x38 Size=0x4
    struct XModelLodInfo lodInfo[4];// Offset=0x3c Size=0x90
    char maxLoadedLod;// Offset=0xcc Size=0x1
    char numLods;// Offset=0xcd Size=0x1
    char collLod;// Offset=0xce Size=0x1
    unsigned char flags;// Offset=0xcf Size=0x1
    struct XModelCollSurf_s * collSurfs;// Offset=0xd0 Size=0x4
    int numCollSurfs;// Offset=0xd4 Size=0x4
    int contents;// Offset=0xd8 Size=0x4
    struct XBoneInfo * boneInfo;// Offset=0xdc Size=0x4
    float radius;// Offset=0xe0 Size=0x4
    struct Bounds bounds;// Offset=0xe4 Size=0x18
    unsigned short * invHighMipRadius;// Offset=0xfc Size=0x4
    int memUsage;// Offset=0x100 Size=0x4
    struct PhysPreset * physPreset;// Offset=0x104 Size=0x4
    struct PhysCollmap * physCollmap;// Offset=0x108 Size=0x4
};

struct ContactList// Size=0x1004 (Id=5182)
{
    struct dContactGeom contacts[128];// Offset=0x0 Size=0x1000
    int contactCount;// Offset=0x1000 Size=0x4
};

struct ScreenPlacement// Size=0x6c (Id=5183)
{
    float scaleVirtualToReal[2];// Offset=0x0 Size=0x8
    float scaleVirtualToFull[2];// Offset=0x8 Size=0x8
    float scaleRealToVirtual[2];// Offset=0x10 Size=0x8
    float realViewportPosition[2];// Offset=0x18 Size=0x8
    float realViewportSize[2];// Offset=0x20 Size=0x8
    float virtualViewableMin[2];// Offset=0x28 Size=0x8
    float virtualViewableMax[2];// Offset=0x30 Size=0x8
    float realViewableMin[2];// Offset=0x38 Size=0x8
    float realViewableMax[2];// Offset=0x40 Size=0x8
    float virtualAdjustableMin[2];// Offset=0x48 Size=0x8
    float virtualAdjustableMax[2];// Offset=0x50 Size=0x8
    float realAdjustableMin[2];// Offset=0x58 Size=0x8
    float realAdjustableMax[2];// Offset=0x60 Size=0x8
    float subScreenLeft;// Offset=0x68 Size=0x4
};

struct FrameInfo// Size=0x8 (Id=5184)
{
    int worldIndex;// Offset=0x0 Size=0x4
    float timestep;// Offset=0x4 Size=0x4
};

struct PhysicsCmd// Size=0x8 (Id=5185)
{
    enum PhysWorld worldIndex;// Offset=0x0 Size=0x4
    int timeNow;// Offset=0x4 Size=0x4
};

struct BodyState// Size=0x78 (Id=5186)
{
    float position[3];// Offset=0x0 Size=0xc
    float odeQuaternion[4];// Offset=0xc Size=0x10
    float velocity[3];// Offset=0x1c Size=0xc
    float angVelocity[3];// Offset=0x28 Size=0xc
    float translation[3];// Offset=0x34 Size=0xc
    float lastTunnelTracePos[3];// Offset=0x40 Size=0xc
    float mass;// Offset=0x4c Size=0x4
    float friction;// Offset=0x50 Size=0x4
    float bounce;// Offset=0x54 Size=0x4
    enum physStuckState_t state;// Offset=0x58 Size=0x4
    int sndClass;// Offset=0x5c Size=0x4
    bool isAwake;// Offset=0x60 Size=0x1
    bool restoreAutodisable;// Offset=0x61 Size=0x1
    unsigned char __align0[2];// Offset=0x62 Size=0x2
    float adis_timeleft;// Offset=0x64 Size=0x4
    int adis_stepsleft;// Offset=0x68 Size=0x4
    float adis_linearThresholdSqrd;// Offset=0x6c Size=0x4
    float adis_angularThresholdSqrd;// Offset=0x70 Size=0x4
    float adis_idleTime;// Offset=0x74 Size=0x4
};

enum _unnamed_5187
{
    PHYS_OBJ_NOTRACE=1
};

struct GeomStateBox// Size=0xc (Id=5188)
{
    float extent[3];// Offset=0x0 Size=0xc
};

struct GeomStateBrush// Size=0x1c (Id=5189)
{
    union // Size=0x4 (Id=0)
    {
        union <unnamed-type-u>// Size=0x4 (Id=56877)
        {
            unsigned short brushModel;// Offset=0x0 Size=0x2
            struct PhysCollmap * collmap;// Offset=0x0 Size=0x4
        };
        union GeomStateBrush::<unnamed-type-u> u;// Offset=0x0 Size=0x4
    };
    float momentsOfInertia[3];// Offset=0x4 Size=0xc
    float productsOfInertia[3];// Offset=0x10 Size=0xc
};

union GeomStateBrush::<unnamed-type-u>// Size=0x4 (Id=5190)
{
    unsigned short brushModel;// Offset=0x0 Size=0x2
    struct PhysCollmap * collmap;// Offset=0x0 Size=0x4
};

struct clipMap_t// Size=0x100 (Id=5191)
{
    char * name;// Offset=0x0 Size=0x4
    int isInUse;// Offset=0x4 Size=0x4
    int planeCount;// Offset=0x8 Size=0x4
    struct cplane_s * planes;// Offset=0xc Size=0x4
    unsigned int numStaticModels;// Offset=0x10 Size=0x4
    struct cStaticModel_s * staticModelList;// Offset=0x14 Size=0x4
    unsigned int numMaterials;// Offset=0x18 Size=0x4
    struct ClipMaterial * materials;// Offset=0x1c Size=0x4
    unsigned int numBrushSides;// Offset=0x20 Size=0x4
    struct cbrushside_t * brushsides;// Offset=0x24 Size=0x4
    unsigned int numBrushEdges;// Offset=0x28 Size=0x4
    unsigned char * brushEdges;// Offset=0x2c Size=0x4
    unsigned int numNodes;// Offset=0x30 Size=0x4
    struct cNode_t * nodes;// Offset=0x34 Size=0x4
    unsigned int numLeafs;// Offset=0x38 Size=0x4
    struct cLeaf_t * leafs;// Offset=0x3c Size=0x4
    unsigned int leafbrushNodesCount;// Offset=0x40 Size=0x4
    struct cLeafBrushNode_s * leafbrushNodes;// Offset=0x44 Size=0x4
    unsigned int numLeafBrushes;// Offset=0x48 Size=0x4
    unsigned short * leafbrushes;// Offset=0x4c Size=0x4
    unsigned int numLeafSurfaces;// Offset=0x50 Size=0x4
    unsigned int * leafsurfaces;// Offset=0x54 Size=0x4
    unsigned int vertCount;// Offset=0x58 Size=0x4
    float * verts[3];// Offset=0x5c Size=0x4
    int triCount;// Offset=0x60 Size=0x4
    unsigned short * triIndices;// Offset=0x64 Size=0x4
    unsigned char * triEdgeIsWalkable;// Offset=0x68 Size=0x4
    int borderCount;// Offset=0x6c Size=0x4
    struct CollisionBorder * borders;// Offset=0x70 Size=0x4
    int partitionCount;// Offset=0x74 Size=0x4
    struct CollisionPartition * partitions;// Offset=0x78 Size=0x4
    int aabbTreeCount;// Offset=0x7c Size=0x4
    struct CollisionAabbTree * aabbTrees;// Offset=0x80 Size=0x4
    unsigned int numSubModels;// Offset=0x84 Size=0x4
    struct cmodel_t * cmodels;// Offset=0x88 Size=0x4
    unsigned short numBrushes;// Offset=0x8c Size=0x2
    unsigned char __align0[2];// Offset=0x8e Size=0x2
    struct cbrush_t * brushes;// Offset=0x90 Size=0x4
    struct Bounds * brushBounds;// Offset=0x94 Size=0x4
    int * brushContents;// Offset=0x98 Size=0x4
    struct MapEnts * mapEnts;// Offset=0x9c Size=0x4
    unsigned short smodelNodeCount;// Offset=0xa0 Size=0x2
    unsigned char __align1[2];// Offset=0xa2 Size=0x2
    struct SModelAabbNode * smodelNodes;// Offset=0xa4 Size=0x4
    unsigned short dynEntCount[2];// Offset=0xa8 Size=0x4
    struct DynEntityDef * dynEntDefList[2];// Offset=0xac Size=0x8
    struct DynEntityPose * dynEntPoseList[2];// Offset=0xb4 Size=0x8
    struct DynEntityClient * dynEntClientList[2];// Offset=0xbc Size=0x8
    struct DynEntityColl * dynEntCollList[2];// Offset=0xc4 Size=0x8
    unsigned int checksum;// Offset=0xcc Size=0x4
};

union GeomState::<unnamed-type-u>// Size=0x1c (Id=5192)
{
    union // Size=0x1c (Id=0)
    {
        struct GeomStateCylinder cylinderState;// Offset=0x0 Size=0xc
        struct GeomStateBox boxState;// Offset=0x0 Size=0xc
        struct GeomStateBrush brushState;// Offset=0x0 Size=0x1c
        struct GeomStateGlass glassState;// Offset=0x0 Size=0x10
    };
};

struct ContactList// Size=0x1004 (Id=5193)
{
    struct dContactGeom contacts[128];// Offset=0x0 Size=0x1000
    int contactCount;// Offset=0x1000 Size=0x4
};

struct PhysContact// Size=0x24 (Id=5194)
{
    float pos[3];// Offset=0x0 Size=0xc
    float normal[3];// Offset=0xc Size=0xc
    float depth;// Offset=0x18 Size=0x4
    float friction;// Offset=0x1c Size=0x4
    float bounce;// Offset=0x20 Size=0x4
};

struct Poly// Size=0x8 (Id=5195)
{
    float * pts[3];// Offset=0x0 Size=0x4
    unsigned int ptCount;// Offset=0x4 Size=0x4
};

struct Poly// Size=0x8 (Id=5196)
{
    float * pts[3];// Offset=0x0 Size=0x4
    unsigned int ptCount;// Offset=0x4 Size=0x4
};

struct SeparatingAxisInfo// Size=0x14 (Id=5197)
{
    float bestDepth;// Offset=0x0 Size=0x4
    unsigned int bestAxis;// Offset=0x4 Size=0x4
    float bestContactNormal[3];// Offset=0x8 Size=0xc
};

struct LocalContactData// Size=0x24 (Id=5198)
{
    float pos[3];// Offset=0x0 Size=0xc
    float normal[3];// Offset=0xc Size=0xc
    float depth;// Offset=0x18 Size=0x4
    int surfFlags;// Offset=0x1c Size=0x4
    int inUse;// Offset=0x20 Size=0x4
};

struct Capsule// Size=0x40 (Id=5199)
{
    float p0[3];// Offset=0x0 Size=0xc
    float p1[3];// Offset=0xc Size=0xc
    float center[3];// Offset=0x18 Size=0xc
    float axis[3];// Offset=0x24 Size=0xc
    float radius;// Offset=0x30 Size=0x4
    float sqRadius;// Offset=0x34 Size=0x4
    float halfLength;// Offset=0x38 Size=0x4
    float halfHeight;// Offset=0x3c Size=0x4
};

struct AxisTestResults// Size=0x1c (Id=5200)
{
    float bestDepth;// Offset=0x0 Size=0x4
    float bestCenter;// Offset=0x4 Size=0x4
    int bestAxis;// Offset=0x8 Size=0x4
    float bestRt;// Offset=0xc Size=0x4
    float normal[3];// Offset=0x10 Size=0xc
};

struct AxisTestResults// Size=0x1c (Id=5201)
{
    float bestDepth;// Offset=0x0 Size=0x4
    float bestCenter;// Offset=0x4 Size=0x4
    int bestAxis;// Offset=0x8 Size=0x4
    float bestRt;// Offset=0xc Size=0x4
    float normal[3];// Offset=0x10 Size=0xc
};

struct Capsule// Size=0x40 (Id=5202)
{
    float p0[3];// Offset=0x0 Size=0xc
    float p1[3];// Offset=0xc Size=0xc
    float center[3];// Offset=0x18 Size=0xc
    float axis[3];// Offset=0x24 Size=0xc
    float radius;// Offset=0x30 Size=0x4
    float sqRadius;// Offset=0x34 Size=0x4
    float halfLength;// Offset=0x38 Size=0x4
    float halfHeight;// Offset=0x3c Size=0x4
};

struct LocalContactData// Size=0x24 (Id=5203)
{
    float pos[3];// Offset=0x0 Size=0xc
    float normal[3];// Offset=0xc Size=0xc
    float depth;// Offset=0x18 Size=0x4
    int surfFlags;// Offset=0x1c Size=0x4
    int inUse;// Offset=0x20 Size=0x4
};

enum PolyOrientation
{
    POLY_COUNTERCLOCKWISE=0,
    POLY_CLOCKWISE=1,
    POLY_ERROR=2
};

struct BrushBrushData// Size=0x10 (Id=5205)
{
    struct Bounds * fixedBounds;// Offset=0x0 Size=0x4
    struct cbrush_t * fixedBrush;// Offset=0x4 Size=0x4
    struct objInfo * input;// Offset=0x8 Size=0x4
    struct Results * results;// Offset=0xc Size=0x4
};

struct BrushTrimeshData// Size=0x18 (Id=5206)
{
    unsigned short * indices;// Offset=0x0 Size=0x4
    float * verts[3];// Offset=0x4 Size=0x4
    int triCount;// Offset=0x8 Size=0x4
    struct objInfo * input;// Offset=0xc Size=0x4
    int surfaceFlags;// Offset=0x10 Size=0x4
    struct Results * results;// Offset=0x14 Size=0x4
};

struct ZipInfo// Size=0x20c (Id=5207)
{
    int offsetCount;// Offset=0x0 Size=0x4
    int offsets[128];// Offset=0x4 Size=0x200
    int size;// Offset=0x204 Size=0x4
    unsigned char * buffer;// Offset=0x208 Size=0x4
};

struct z_stream_s// Size=0x30 (Id=5208)
{
    unsigned char * next_in;// Offset=0x0 Size=0x4
    unsigned int avail_in;// Offset=0x4 Size=0x4
    unsigned long total_in;// Offset=0x8 Size=0x4
    unsigned char * next_out;// Offset=0xc Size=0x4
    unsigned int avail_out;// Offset=0x10 Size=0x4
    unsigned long total_out;// Offset=0x14 Size=0x4
    char * msg;// Offset=0x18 Size=0x4
    struct internal_state * state;// Offset=0x1c Size=0x4
    unsigned char *  ( * zalloc)(unsigned char * ,unsigned int ,unsigned int );// Offset=0x20 Size=0x4
    void  ( * zfree)(unsigned char * ,unsigned char * );// Offset=0x24 Size=0x4
    unsigned char * opaque;// Offset=0x28 Size=0x4
    int data_type;// Offset=0x2c Size=0x4
};

struct ct_data_s// Size=0x4 (Id=5209)
{
    union _unnamed_5212 fc;// Offset=0x0 Size=0x2
    union _unnamed_5213 dl;// Offset=0x2 Size=0x2
};

struct static_tree_desc_s// Size=0x14 (Id=5210)
{
    struct ct_data_s * static_tree;// Offset=0x0 Size=0x4
    int * extra_bits;// Offset=0x4 Size=0x4
    int extra_base;// Offset=0x8 Size=0x4
    int elems;// Offset=0xc Size=0x4
    int max_length;// Offset=0x10 Size=0x4
};

struct tree_desc_s// Size=0xc (Id=5211)
{
    struct ct_data_s * dyn_tree;// Offset=0x0 Size=0x4
    int max_code;// Offset=0x4 Size=0x4
    struct static_tree_desc_s * stat_desc;// Offset=0x8 Size=0x4
};

union _unnamed_5212// Size=0x2 (Id=5212)
{
    unsigned short freq;// Offset=0x0 Size=0x2
    unsigned short code;// Offset=0x0 Size=0x2
};

union _unnamed_5213// Size=0x2 (Id=5213)
{
    unsigned short dad;// Offset=0x0 Size=0x2
    unsigned short len;// Offset=0x0 Size=0x2
};

struct ct_data_s// Size=0x4 (Id=5214)
{
    union _unnamed_5212 fc;// Offset=0x0 Size=0x2
    union _unnamed_5213 dl;// Offset=0x2 Size=0x2
};

struct internal_state// Size=0x16b8 (Id=5215)
{
    struct z_stream_s * strm;// Offset=0x0 Size=0x4
    int status;// Offset=0x4 Size=0x4
    unsigned char * pending_buf;// Offset=0x8 Size=0x4
    unsigned long pending_buf_size;// Offset=0xc Size=0x4
    unsigned char * pending_out;// Offset=0x10 Size=0x4
    int pending;// Offset=0x14 Size=0x4
    int noheader;// Offset=0x18 Size=0x4
    unsigned char data_type;// Offset=0x1c Size=0x1
    unsigned char method;// Offset=0x1d Size=0x1
    unsigned char __align0[2];// Offset=0x1e Size=0x2
    int last_flush;// Offset=0x20 Size=0x4
    unsigned int w_size;// Offset=0x24 Size=0x4
    unsigned int w_bits;// Offset=0x28 Size=0x4
    unsigned int w_mask;// Offset=0x2c Size=0x4
    unsigned char * window;// Offset=0x30 Size=0x4
    unsigned long window_size;// Offset=0x34 Size=0x4
    unsigned short * prev;// Offset=0x38 Size=0x4
    unsigned short * head;// Offset=0x3c Size=0x4
    unsigned int ins_h;// Offset=0x40 Size=0x4
    unsigned int hash_size;// Offset=0x44 Size=0x4
    unsigned int hash_bits;// Offset=0x48 Size=0x4
    unsigned int hash_mask;// Offset=0x4c Size=0x4
    unsigned int hash_shift;// Offset=0x50 Size=0x4
    long block_start;// Offset=0x54 Size=0x4
    unsigned int match_length;// Offset=0x58 Size=0x4
    unsigned int prev_match;// Offset=0x5c Size=0x4
    int match_available;// Offset=0x60 Size=0x4
    unsigned int strstart;// Offset=0x64 Size=0x4
    unsigned int match_start;// Offset=0x68 Size=0x4
    unsigned int lookahead;// Offset=0x6c Size=0x4
    unsigned int prev_length;// Offset=0x70 Size=0x4
    unsigned int max_chain_length;// Offset=0x74 Size=0x4
    unsigned int max_lazy_match;// Offset=0x78 Size=0x4
    int level;// Offset=0x7c Size=0x4
    int strategy;// Offset=0x80 Size=0x4
    unsigned int good_match;// Offset=0x84 Size=0x4
    int nice_match;// Offset=0x88 Size=0x4
    struct ct_data_s dyn_ltree[573];// Offset=0x8c Size=0x8f4
    struct ct_data_s dyn_dtree[61];// Offset=0x980 Size=0xf4
    struct ct_data_s bl_tree[39];// Offset=0xa74 Size=0x9c
    struct tree_desc_s l_desc;// Offset=0xb10 Size=0xc
    struct tree_desc_s d_desc;// Offset=0xb1c Size=0xc
    struct tree_desc_s bl_desc;// Offset=0xb28 Size=0xc
    unsigned short bl_count[16];// Offset=0xb34 Size=0x20
    int heap[573];// Offset=0xb54 Size=0x8f4
    int heap_len;// Offset=0x1448 Size=0x4
    int heap_max;// Offset=0x144c Size=0x4
    unsigned char depth[573];// Offset=0x1450 Size=0x23d
    unsigned char __align1[3];// Offset=0x168d Size=0x3
    unsigned char * l_buf;// Offset=0x1690 Size=0x4
    unsigned int lit_bufsize;// Offset=0x1694 Size=0x4
    unsigned int last_lit;// Offset=0x1698 Size=0x4
    unsigned short * d_buf;// Offset=0x169c Size=0x4
    unsigned long opt_len;// Offset=0x16a0 Size=0x4
    unsigned long static_len;// Offset=0x16a4 Size=0x4
    unsigned int matches;// Offset=0x16a8 Size=0x4
    int last_eob_len;// Offset=0x16ac Size=0x4
    unsigned short bi_buf;// Offset=0x16b0 Size=0x2
    unsigned char __align2[2];// Offset=0x16b2 Size=0x2
    int bi_valid;// Offset=0x16b4 Size=0x4
};

enum inflate_block_mode
{
    TYPE=0,
    LENS=1,
    STORED=2,
    TABLE=3,
    BTREE=4,
    DTREE=5,
    CODES=6,
    DRY=7,
    DONE=8,
    BAD=9
};

struct internal_state// Size=0x4 (Id=5217)
{
    int dummy;// Offset=0x0 Size=0x4
};

struct _unnamed_5218// Size=0x14 (Id=5218)
{
    unsigned int table;// Offset=0x0 Size=0x4
    unsigned int index;// Offset=0x4 Size=0x4
    unsigned int * blens;// Offset=0x8 Size=0x4
    unsigned int bb;// Offset=0xc Size=0x4
    struct inflate_huft_s * tb;// Offset=0x10 Size=0x4
};

struct _unnamed_5219// Size=0x4 (Id=5219)
{
    struct inflate_codes_state * codes;// Offset=0x0 Size=0x4
};

union _unnamed_5220// Size=0x14 (Id=5220)
{
    union // Size=0x14 (Id=0)
    {
        unsigned int left;// Offset=0x0 Size=0x4
        struct _unnamed_5218 trees;// Offset=0x0 Size=0x14
        struct _unnamed_5219 decode;// Offset=0x0 Size=0x4
    };
};

struct inflate_blocks_state// Size=0x38 (Id=5221)
{
    enum inflate_block_mode mode;// Offset=0x0 Size=0x4
    union _unnamed_5220 sub;// Offset=0x4 Size=0x14
    unsigned int last;// Offset=0x18 Size=0x4
    unsigned int bitk;// Offset=0x1c Size=0x4
    unsigned long bitb;// Offset=0x20 Size=0x4
    struct inflate_huft_s * hufts;// Offset=0x24 Size=0x4
    unsigned char * window;// Offset=0x28 Size=0x4
    unsigned char * end;// Offset=0x2c Size=0x4
    unsigned char * read;// Offset=0x30 Size=0x4
    unsigned char * write;// Offset=0x34 Size=0x4
};

struct inflate_codes_state// Size=0x4 (Id=5222)
{
    int dummy;// Offset=0x0 Size=0x4
};

struct _unnamed_5223// Size=0x2 (Id=5223)
{
    unsigned char Exop;// Offset=0x0 Size=0x1
    unsigned char Bits;// Offset=0x1 Size=0x1
};

union _unnamed_5224// Size=0x4 (Id=5224)
{
    struct _unnamed_5223 what;// Offset=0x0 Size=0x2
    unsigned int pad;// Offset=0x0 Size=0x4
};

struct inflate_huft_s// Size=0x8 (Id=5225)
{
    union _unnamed_5224 word;// Offset=0x0 Size=0x4
    unsigned int base;// Offset=0x4 Size=0x4
};

enum inflate_mode
{
    METHOD=0,
    FLAG=1,
    DICT4=2,
    DICT3=3,
    DICT2=4,
    DICT1=5,
    DICT0=6,
    BLOCKS=7,
    CHECK4=8,
    CHECK3=9,
    CHECK2=10,
    CHECK1=11,
    DONE=12,
    BAD=13
};

struct _unnamed_5227// Size=0x4 (Id=5227)
{
    unsigned long need;// Offset=0x0 Size=0x4
};

union _unnamed_5228// Size=0x4 (Id=5228)
{
    unsigned int method;// Offset=0x0 Size=0x4
    struct _unnamed_5227 check;// Offset=0x0 Size=0x4
    unsigned int marker;// Offset=0x0 Size=0x4
};

struct internal_state// Size=0x14 (Id=5229)
{
    enum inflate_mode mode;// Offset=0x0 Size=0x4
    union _unnamed_5228 sub;// Offset=0x4 Size=0x4
    int nowrap;// Offset=0x8 Size=0x4
    unsigned int wbits;// Offset=0xc Size=0x4
    struct inflate_blocks_state * blocks;// Offset=0x10 Size=0x4
};

struct inflate_blocks_state// Size=0x4 (Id=5230)
{
    int dummy;// Offset=0x0 Size=0x4
};

enum inflate_codes_mode
{
    START=0,
    LEN=1,
    LENEXT=2,
    DIST=3,
    DISTEXT=4,
    COPY=5,
    LIT=6,
    WASH=7,
    END=8,
    BADCODE=9
};

struct _unnamed_5232// Size=0x8 (Id=5232)
{
    struct inflate_huft_s * tree;// Offset=0x0 Size=0x4
    unsigned int need;// Offset=0x4 Size=0x4
};

struct _unnamed_5233// Size=0x8 (Id=5233)
{
    unsigned int get;// Offset=0x0 Size=0x4
    unsigned int dist;// Offset=0x4 Size=0x4
};

union _unnamed_5234// Size=0x8 (Id=5234)
{
    struct _unnamed_5232 code;// Offset=0x0 Size=0x8
    unsigned int lit;// Offset=0x0 Size=0x4
    struct _unnamed_5233 copy;// Offset=0x0 Size=0x8
};

struct inflate_codes_state// Size=0x1c (Id=5235)
{
    enum inflate_codes_mode mode;// Offset=0x0 Size=0x4
    unsigned int len;// Offset=0x4 Size=0x4
    union _unnamed_5234 sub;// Offset=0x8 Size=0x8
    unsigned char lbits;// Offset=0x10 Size=0x1
    unsigned char dbits;// Offset=0x11 Size=0x1
    unsigned char __align0[2];// Offset=0x12 Size=0x2
    struct inflate_huft_s * ltree;// Offset=0x14 Size=0x4
    struct inflate_huft_s * dtree;// Offset=0x18 Size=0x4
};

enum block_state
{
    need_more=0,
    block_done=1,
    finish_started=2,
    finish_done=3
};

struct config_s// Size=0xc (Id=5237)
{
    unsigned short good_length;// Offset=0x0 Size=0x2
    unsigned short max_lazy;// Offset=0x2 Size=0x2
    unsigned short nice_length;// Offset=0x4 Size=0x2
    unsigned short max_chain;// Offset=0x6 Size=0x2
    enum block_state  ( * func)(struct internal_state * ,int );// Offset=0x8 Size=0x4
};

struct static_tree_desc_s// Size=0x4 (Id=5238)
{
    int dummy;// Offset=0x0 Size=0x4
};

struct config_s// Size=0xc (Id=5239)
{
    unsigned short good_length;// Offset=0x0 Size=0x2
    unsigned short max_lazy;// Offset=0x2 Size=0x2
    unsigned short nice_length;// Offset=0x4 Size=0x2
    unsigned short max_chain;// Offset=0x6 Size=0x2
    enum block_state  ( * func)(struct internal_state * ,int );// Offset=0x8 Size=0x4
};

struct MemcardError// Size=0xc (Id=5240)
{
    bool isError;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    unsigned long extendedErrorCode;// Offset=0x4 Size=0x4
    char * errorString;// Offset=0x8 Size=0x4
};

struct StructuredDataBuffer// Size=0x8 (Id=5241)
{
    unsigned char * data;// Offset=0x0 Size=0x4
    unsigned int size;// Offset=0x4 Size=0x4
};

struct fileFetchData// Size=0x228 (Id=5242)
{
    unsigned char * buffer;// Offset=0x0 Size=0x4
    int bufferSize;// Offset=0x4 Size=0x4
    bool fetched;// Offset=0x8 Size=0x1
    unsigned char __align0[3];// Offset=0x9 Size=0x3
    struct RequiredTask * requiredTask;// Offset=0xc Size=0x4
    struct _XSTORAGE_DOWNLOAD_TO_MEMORY_RESULTS results;// Offset=0x10 Size=0x14
    wchar_t serverPath[256];// Offset=0x24 Size=0x200
    unsigned long serverPathLen;// Offset=0x224 Size=0x4
};

struct MatchDataGlob// Size=0x8004 (Id=5243)
{
    int size;// Offset=0x0 Size=0x4
    unsigned char matchData[32768];// Offset=0x4 Size=0x8000
};

enum ResetStatsReason
{
    RESET_STATS_REASON_CORRUPT_OFFLINE=0,
    RESET_STATS_REASON_CORRUPT_ONLINE=1,
    RESET_STATS_REASON_BAD_FILE_VERSION=2,
    RESET_STATS_REASON_BAD_PLAYERDATA_VERSION=3
};

enum MemcardOperation
{
    MEMCARD_READ=0,
    MEMCARD_WRITE=1,
    MEMCARD_READ_FREE_DOWNLOADED_CONTENT=2,
    MEMCARD_WRITE_FREE_DOWNLOADED_CONTENT=3
};

enum StructuredData_SetResult
{
    SETRESULT_SUCCESS_CHANGED=0,
    SETRESULT_SUCCESS_NOCHANGE=1,
    SETRESULT_WRONG_DATA_TYPE=2,
    SETRESULT_ERROR_INT_TOO_LARGE_FOR_BYTE=3,
    SETRESULT_ERROR_STRING_TOO_LONG=4,
    SETRESULT_ERROR_INVALID_ENUM_VALUE=5,
    SETRESULT_COUNT=6
};

struct PlayerStats// Size=0x2003 (Id=5247)
{
    unsigned char data[8192];// Offset=0x0 Size=0x2000
    bool statsFetched;// Offset=0x2000 Size=0x1
    bool statWriteNeeded;// Offset=0x2001 Size=0x1
    bool firstTimeRunning;// Offset=0x2002 Size=0x1
};

struct PlayerStatNetworkData// Size=0x622c (Id=5248)
{
    struct PlayerStats playerStats[2];// Offset=0x0 Size=0x4006
    bool writeStatsBufferInUse;// Offset=0x4006 Size=0x1
    unsigned char __align0[1];// Offset=0x4007 Size=0x1
    unsigned char writeStatsBuffer[8197];// Offset=0x4008 Size=0x2005
    unsigned char __align1[3];// Offset=0x600d Size=0x3
    unsigned long deviceId;// Offset=0x6010 Size=0x4
    struct _XSTORAGE_DOWNLOAD_TO_MEMORY_RESULTS statsResults;// Offset=0x6014 Size=0x14
    wchar_t statsServerPath[256];// Offset=0x6028 Size=0x200
    unsigned long statsServerPathLen;// Offset=0x6228 Size=0x4
};

struct RequiredTask// Size=0x10 (Id=5249)
{
    int failures;// Offset=0x0 Size=0x4
    int backoffs;// Offset=0x4 Size=0x4
    int interval;// Offset=0x8 Size=0x4
    int lastTime;// Offset=0xc Size=0x4
};

struct StructuredDataBuffer// Size=0x8 (Id=5250)
{
    unsigned char * data;// Offset=0x0 Size=0x4
    unsigned int size;// Offset=0x4 Size=0x4
};

enum sessionTaskEnum
{
    TASK_GETTINGMOTD=1,
    TASK_GETTINGPLAYLISTS=2,
    TASK_READINGSTATS=3,
    TASK_WRITINGSTATS=4,
    TASK_WRITINGMATCHDATA=5,
    NUM_SESSION_TASKS=6
};

struct GametypeRichPresenceInfo// Size=0x24 (Id=5252)
{
    char gametype[32];// Offset=0x0 Size=0x20
    int context;// Offset=0x20 Size=0x4
};

struct GamemodeRichPresenceInfo// Size=0x2c (Id=5253)
{
    char gametype[32];// Offset=0x0 Size=0x20
    char modifier;// Offset=0x20 Size=0x1
    unsigned char __align0[3];// Offset=0x21 Size=0x3
    int context;// Offset=0x24 Size=0x4
    int statsView;// Offset=0x28 Size=0x4
};

struct MapnameRichPresenceInfo// Size=0x28 (Id=5254)
{
    char mapname[32];// Offset=0x0 Size=0x20
    int context;// Offset=0x20 Size=0x4
    int mapPack;// Offset=0x24 Size=0x4
};

enum gameModeModifiers
{
    GAME_SOFTCORE=0,
    GAME_HARDCORE=1,
    NUM_GAME_MODIFIERS=2
};

struct MapnameRichPresenceInfo// Size=0x28 (Id=5256)
{
    char mapname[32];// Offset=0x0 Size=0x20
    int context;// Offset=0x20 Size=0x4
    int mapPack;// Offset=0x24 Size=0x4
};

struct GametypeRichPresenceInfo// Size=0x24 (Id=5257)
{
    char gametype[32];// Offset=0x0 Size=0x20
    int context;// Offset=0x20 Size=0x4
};

struct GamemodeRichPresenceInfo// Size=0x2c (Id=5258)
{
    char gametype[32];// Offset=0x0 Size=0x20
    char modifier;// Offset=0x20 Size=0x1
    unsigned char __align0[3];// Offset=0x21 Size=0x3
    int context;// Offset=0x24 Size=0x4
    int statsView;// Offset=0x28 Size=0x4
};

struct sockaddr// Size=0x10 (Id=5259)
{
    unsigned short sa_family;// Offset=0x0 Size=0x2
    char sa_data[14];// Offset=0x2 Size=0xe
};

enum Memcard_OpenFile_Result
{
    MEMCARD_SUCCESS=0,
    MEMCARD_FAILURE_CORRUPT=1,
    MEMCARD_FAILURE=2
};

struct MemcardError// Size=0xc (Id=5261)
{
    bool isError;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    unsigned long extendedErrorCode;// Offset=0x4 Size=0x4
    char * errorString;// Offset=0x8 Size=0x4
};

enum msgLocErrType_t
{
    LOCMSG_SAFE=0,
    LOCMSG_NOERR=1
};

enum InviteState
{
    INVITE_NONE=0,
    INVITE_PENDING=1,
    INVITE_MPACCEPTED=2,
    INVITE_SPACCEPTED=3
};

struct LaunchData// Size=0x3e8 (Id=5264)
{
    int version;// Offset=0x0 Size=0x4
    char startupText[900];// Offset=0x4 Size=0x384
    bool skipMovies;// Offset=0x388 Size=0x1
    unsigned char activeController;// Offset=0x389 Size=0x1
    unsigned char __align0[2];// Offset=0x38a Size=0x2
    enum InviteState inviteState;// Offset=0x38c Size=0x4
    unsigned long long invitedXUID;// Offset=0x390 Size=0x8
    unsigned char inviteHostInfo[60];// Offset=0x398 Size=0x3c
    bool fromGameInvite;// Offset=0x3d4 Size=0x1
    bool localEzPatch;// Offset=0x3d5 Size=0x1
    unsigned char __align1[2];// Offset=0x3d6 Size=0x2
    unsigned long selectedSaveDeviceIDs[4];// Offset=0x3d8 Size=0x10
};

enum fsMode_t
{
    FS_READ=0,
    FS_WRITE=1,
    FS_APPEND=2,
    FS_APPEND_SYNC=3
};

enum _unnamed_5266
{
    TASK_MEM_CARD_AVAILABLE=1
};

struct XenonMemoryCardGlob// Size=0x1710 (Id=5267)
{
    struct OverlappedTaskSet overlappedTasks;// Offset=0x0 Size=0x1008
    bool useDevDrive;// Offset=0x1008 Size=0x1
    unsigned char __align0[3];// Offset=0x1009 Size=0x3
    struct XenonMemoryCardFile files[32];// Offset=0x100c Size=0x700
};

enum _unnamed_5268
{
    FS_SEEK_CUR=0,
    FS_SEEK_END=1,
    FS_SEEK_SET=2
};

struct DeviceStateInfo// Size=0x4 (Id=5269)
{
    int controllerIndex;// Offset=0x0 Size=0x4
};

struct XenonMemoryCardFile// Size=0x38 (Id=5270)
{
    void * handle;// Offset=0x0 Size=0x4
    int controllerIndex;// Offset=0x4 Size=0x4
    unsigned long deviceId;// Offset=0x8 Size=0x4
    char name[42];// Offset=0xc Size=0x2a
};

enum sysEventType_t
{
    SE_NONE=0,
    SE_CHAR=1,
    SE_CONSOLE=2
};

struct sysEvent_t// Size=0x1c (Id=5272)
{
    int evPortIndex;// Offset=0x0 Size=0x4
    int evTime;// Offset=0x4 Size=0x4
    enum sysEventType_t evType;// Offset=0x8 Size=0x4
    int evValue;// Offset=0xc Size=0x4
    int evValue2;// Offset=0x10 Size=0x4
    int evPtrLength;// Offset=0x14 Size=0x4
    void * evPtr;// Offset=0x18 Size=0x4
};

struct SETJMP_VECTOR4// Size=0x10 (Id=5273)
{
    float floats[4];// Offset=0x0 Size=0x10
};

struct _XUSER_SIGNIN_INFO// Size=0x28 (Id=5274)
{
    unsigned long long xuid;// Offset=0x0 Size=0x8
    unsigned long dwInfoFlags;// Offset=0x8 Size=0x4
    enum _XUSER_SIGNIN_STATE UserSigninState;// Offset=0xc Size=0x4
    unsigned long dwGuestNumber;// Offset=0x10 Size=0x4
    unsigned long dwSponsorUserIndex;// Offset=0x14 Size=0x4
    char szUserName[16];// Offset=0x18 Size=0x10
};

enum voiceCommunicationSetting
{
    TALK_TO_EVERYONE=0,
    TALK_TO_FRIENDS_ONLY=1,
    TALK_TO_NOBODY_I_HATE_EVERYONE=2,
    NUM_VOICECOMMUNICATIONSETTINGS=3
};

enum errorParm_t
{
    ERR_FATAL=0,
    ERR_DROP=1,
    ERR_SERVERDISCONNECT=2,
    ERR_DISCONNECT=3,
    ERR_SCRIPT=4,
    ERR_SCRIPT_DROP=5,
    ERR_LOCALIZATION=6,
    ERR_MAPLOADERRORSUMMARY=7
};

struct XNKEY// Size=0x10 (Id=5277)
{
    unsigned char ab[16];// Offset=0x0 Size=0x10
};

enum liveStatusFlags
{
    READING_STATS=4,
    WRITING_STATS=32,
    FETCHING_PLAYLIST=8,
    FETCHING_FFOTD=16,
    IW_AUTHENTICATING=64
};

enum uiMenuCommand_t
{
    UIMENU_NONE=0,
    UIMENU_MAIN=1,
    UIMENU_INGAME=2,
    UIMENU_PREGAME=3,
    UIMENU_POSTGAME=4,
    UIMENU_WM_QUICKMESSAGE=5,
    UIMENU_SCRIPT_POPUP=6,
    UIMENU_SCOREBOARD=7,
    UIMENU_SPLITSCREENGAMESETUP=8,
    UIMENU_SYSTEMLINKJOINGAME=9,
    UIMENU_PARTY=10,
    UIMENU_GAMELOBBY=11,
    UIMENU_PRIVATELOBBY=12,
    UIMENU_CONTROLLERREMOVED=13,
    UIMENU_MIGRATION=14
};

struct TrueSkillData// Size=0xf30 (Id=5280)
{
    unsigned long long xuids[18];// Offset=0x0 Size=0x90
    unsigned long xuidCount;// Offset=0x90 Size=0x4
    struct _XUSER_STATS_SPEC spec;// Offset=0x94 Size=0x88
    unsigned char trueskillBuf[3600];// Offset=0x11c Size=0xe10
    unsigned long bufSize;// Offset=0xf2c Size=0x4
};

enum <unnamed-type-teamTaskEnum>
{
    TASK_QOSPROBE=1,
    TASK_WRITESTATS=2,
    TASK_WRITEACHIVEMENT=3,
    TASK_BANDWIDTHTEST=4,
    TASK_READSTATS=5,
    TASK_STARTTEAMMATCH=6,
    NUM_LIVE_TASKS=7
};

struct Achievements// Size=0x24 (Id=5282)
{
    char achievementName[32];// Offset=0x0 Size=0x20
    int achievementId;// Offset=0x20 Size=0x4
};

struct XenonUserData// Size=0x68 (Id=5283)
{
    int signinState;// Offset=0x0 Size=0x4
    char gamertag[32];// Offset=0x4 Size=0x20
    unsigned char __align0[4];// Offset=0x24 Size=0x4
    unsigned long long xuid;// Offset=0x28 Size=0x8
    char xuidString[17];// Offset=0x30 Size=0x11
    unsigned char __align1[7];// Offset=0x41 Size=0x7
    unsigned long long xuidOffline;// Offset=0x48 Size=0x8
    char xuidOfflineString[17];// Offset=0x50 Size=0x11
    unsigned char __align2[3];// Offset=0x61 Size=0x3
    enum voiceCommunicationSetting voiceCommunicationSetting;// Offset=0x64 Size=0x4
};

struct SessionWriteStatsData// Size=0x50 (Id=5284)
{
    bool active;// Offset=0x0 Size=0x1
    unsigned char __align0[7];// Offset=0x1 Size=0x7
    unsigned long long xuid;// Offset=0x8 Size=0x8
    struct _XSESSION_VIEW_PROPERTIES views[1];// Offset=0x10 Size=0xc
    unsigned char __align1[4];// Offset=0x1c Size=0x4
    struct _XUSER_PROPERTY skill[2];// Offset=0x20 Size=0x30
};

struct qosData// Size=0xd4 (Id=5285)
{
    int qosIndex;// Offset=0x0 Size=0x4
    int numXnAddrs;// Offset=0x4 Size=0x4
    int startTime;// Offset=0x8 Size=0x4
    struct XNKID * qosSessionIds[50];// Offset=0xc Size=0xc8
};

enum LbTaskEnum
{
    LB_TASK_READLB=0,
    LB_TASK_READLB_BYPLAYER=1,
    LB_TASK_READLB_BYRANK=2,
    LB_TASK_GETFRIENDS=3,
    LB_TASK_UPLOADSTATS=4,
    LB_TASK_COUNT=5
};

struct LbGetColData// Size=0x198 (Id=5287)
{
    unsigned long long xuid;// Offset=0x0 Size=0x8
    struct _XUSER_STATS_SPEC spec;// Offset=0x8 Size=0x88
    unsigned char buffer[256];// Offset=0x90 Size=0x100
    struct LbColumnDef * lbColDef;// Offset=0x190 Size=0x4
};

enum GamepadPhysicalAxis
{
    GPAD_PHYSAXIS_RSTICK_X=0,
    GPAD_PHYSAXIS_RSTICK_Y=1,
    GPAD_PHYSAXIS_LSTICK_X=2,
    GPAD_PHYSAXIS_LSTICK_Y=3,
    GPAD_PHYSAXIS_RTRIGGER=4,
    GPAD_PHYSAXIS_LTRIGGER=5,
    GPAD_PHYSAXIS_COUNT=6,
    GPAD_PHYSAXIS_NONE=-1
};

enum GamePadButton
{
    GPAD_NONE=0,
    GPAD_UP=268435457,
    GPAD_DOWN=268435458,
    GPAD_LEFT=268435460,
    GPAD_RIGHT=268435464,
    GPAD_START=268435472,
    GPAD_BACK=268435488,
    GPAD_L3=268435520,
    GPAD_R3=268435584,
    GPAD_A=268439552,
    GPAD_B=268443648,
    GPAD_X=268451840,
    GPAD_Y=268468224,
    GPAD_L_SHLDR=268435712,
    GPAD_R_SHLDR=268435968,
    GPAD_L_TRIG=536870912,
    GPAD_R_TRIG=536870913
};

struct ButtonToCodeMap_t// Size=0x8 (Id=5290)
{
    enum GamePadButton padButton;// Offset=0x0 Size=0x4
    int code;// Offset=0x4 Size=0x4
};

struct _XINPUT_GAMEPAD// Size=0xc (Id=5291)
{
    unsigned short wButtons;// Offset=0x0 Size=0x2
    unsigned char bLeftTrigger;// Offset=0x2 Size=0x1
    unsigned char bRightTrigger;// Offset=0x3 Size=0x1
    short sThumbLX;// Offset=0x4 Size=0x2
    short sThumbLY;// Offset=0x6 Size=0x2
    short sThumbRX;// Offset=0x8 Size=0x2
    short sThumbRY;// Offset=0xa Size=0x2
};

enum GamePadStickDir
{
    GPAD_STICK_POS=0,
    GPAD_STICK_NEG=1,
    GPAD_STICK_DIRCOUNT=2
};

struct GamerSettingState// Size=0x350 (Id=5293)
{
    bool isProfileLoggedIn;// Offset=0x0 Size=0x1
    bool errorOnRead;// Offset=0x1 Size=0x1
    unsigned char __align0[2];// Offset=0x2 Size=0x2
    struct GamerSettingCommonConfig commonConfig;// Offset=0x4 Size=0x30
    struct GamerSettingCommonConfigStrings commonStrings;// Offset=0x34 Size=0x200
    struct GamerSettingExeConfig exeConfig;// Offset=0x234 Size=0x14
    struct GamerSettingExeConfigStrings exeStrings;// Offset=0x248 Size=0x105
};

struct GamerSettingCommonConfigStrings// Size=0x200 (Id=5294)
{
    char gpadButtonsConfig[256];// Offset=0x0 Size=0x100
    char gpadSticksConfig[256];// Offset=0x100 Size=0x100
};

struct GamerSettingExeConfig// Size=0x14 (Id=5295)
{
    int playlist;// Offset=0x0 Size=0x4
    bool mapPrefs[16];// Offset=0x4 Size=0x10
};

struct GamerSettingExeConfigStrings// Size=0x105 (Id=5296)
{
    char motd[256];// Offset=0x0 Size=0x100
    char clanPrefix[5];// Offset=0x100 Size=0x5
};

struct GamePad// Size=0xac (Id=5297)
{
    union // Size=0x80 (Id=0)
    {
        bool enabled;// Offset=0x0 Size=0x1
        bool keyboardEnabled;// Offset=0x1 Size=0x1
        short digitals;// Offset=0x2 Size=0x2
        short lastDigitals;// Offset=0x4 Size=0x2
        unsigned char __align0[2];// Offset=0x6 Size=0x2
        float analogs[8];// Offset=0x8 Size=0x20
        float lastAnalogs[8];// Offset=0x28 Size=0x20
        float sticks[4];// Offset=0x48 Size=0x10
        float lastSticks[4];// Offset=0x58 Size=0x10
        bool stickDown[4][2];// Offset=0x68 Size=0x8
        bool stickDownLast[4][2];// Offset=0x70 Size=0x8
        float lowRumble;// Offset=0x78 Size=0x4
        float highRumble;// Offset=0x7c Size=0x4
        struct <unnamed-type-feedback>// Size=0x4 (Id=57418)
        {
            struct _XINPUT_VIBRATION Rumble;// Offset=0x0 Size=0x4
        };
        unsigned char __align1[124];// Offset=0x4 Size=0x7c
    };
    struct GamePad::<unnamed-type-feedback> feedback;// Offset=0x80 Size=0x4
    struct _XINPUT_CAPABILITIES caps;// Offset=0x84 Size=0x14
    struct _XINPUT_CAPABILITIES keyboardCaps;// Offset=0x98 Size=0x14
};

struct GamePad::<unnamed-type-feedback>// Size=0x4 (Id=5298)
{
    struct _XINPUT_VIBRATION Rumble;// Offset=0x0 Size=0x4
};

struct GamerSettingCommonConfig// Size=0x30 (Id=5299)
{
    bool gpadRumble;// Offset=0x0 Size=0x1
    bool invertPitch;// Offset=0x1 Size=0x1
    bool autoAim;// Offset=0x2 Size=0x1
    unsigned char __align0[1];// Offset=0x3 Size=0x1
    float viewSensitivity;// Offset=0x4 Size=0x4
    float gpadButtonLStickDeflect;// Offset=0x8 Size=0x4
    float gpadButtonRStickDeflect;// Offset=0xc Size=0x4
    float gamma;// Offset=0x10 Size=0x4
    float snd_volume;// Offset=0x14 Size=0x4
    float safearea_adjusted_horizontal;// Offset=0x18 Size=0x4
    float safearea_adjusted_vertical;// Offset=0x1c Size=0x4
    unsigned int playTimeSP;// Offset=0x20 Size=0x4
    unsigned int playTimeMP;// Offset=0x24 Size=0x4
    unsigned int playTimeSO;// Offset=0x28 Size=0x4
    unsigned char percentCompleteSP;// Offset=0x2c Size=0x1
    unsigned char percentCompleteMP;// Offset=0x2d Size=0x1
    unsigned char percentCompleteSO;// Offset=0x2e Size=0x1
};

enum _unnamed_5300
{
    TASK_ENUMERATE=0,
    TASK_COUNT=1
};

struct friendList_t// Size=0x4ca0 (Id=5301)
{
    struct _XONLINE_FRIEND friends[100];// Offset=0x0 Size=0x4c90
    void * hEnum;// Offset=0x4c90 Size=0x4
    int count;// Offset=0x4c94 Size=0x4
    bool dirty;// Offset=0x4c98 Size=0x1
    unsigned char __align0[3];// Offset=0x4c99 Size=0x3
    int lastUpdateTime;// Offset=0x4c9c Size=0x4
};

class EQ// Size=0x48 (Id=5302)
{
    union // Size=0x2b4 (Id=0)
    {
        void EQ();// Offset=0x0 Size=0x58
        void ComputeCoefficients();// Offset=0x0 Size=0x2b4
        float Process(float ,int );// Offset=0x0 Size=0x6c
        enum SND_EQTYPE type;// Offset=0x0 Size=0x4
        float dbGain;// Offset=0x4 Size=0x4
        float f0;// Offset=0x8 Size=0x4
        float Q;// Offset=0xc Size=0x4
        bool isEnabled;// Offset=0x10 Size=0x1
        unsigned char __align0[3];// Offset=0x11 Size=0x3
        float coeffs[5];// Offset=0x14 Size=0x14
        float xn1[2];// Offset=0x28 Size=0x8
        float xn2[2];// Offset=0x30 Size=0x8
        float yn1[2];// Offset=0x38 Size=0x8
        float yn2[2];// Offset=0x40 Size=0x8
    };
};

class ParametricEQ : public IXAudioEffect// Size=0x1c8 (Id=5303)
{
    public void * operator new(unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new(unsigned int );
    public void * operator new[](unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new[](unsigned int );
    public void operator delete(void * ,struct IXAudioBatchAllocator * );
    public void operator delete(void * );
    public void operator delete[](void * ,struct IXAudioBatchAllocator * );
    public void operator delete[](void * );
    public void ParametricEQ(class ParametricEQ & );
    union // Size=0x348 (Id=0)
    {
        void ParametricEQ();// Offset=0x0 Size=0x94
        unsigned long AddRef();// Offset=0x0 Size=0x14
        unsigned long Release();// Offset=0x0 Size=0x14
        HRESULT GetInfo(struct XAUDIOFXINFO * );// Offset=0x0 Size=0x18
        HRESULT GetParam(unsigned char ,unsigned char ,union XAUDIOFXPARAM * );// Offset=0x0 Size=0x10c
        HRESULT SetParam(unsigned char ,unsigned char ,union XAUDIOFXPARAM * );// Offset=0x0 Size=0x348
        HRESULT GetContext(void ** );// Offset=0x0 Size=0x10
        HRESULT Process(struct IXAudioFrameBuffer * ,struct IXAudioFrameBuffer * );// Offset=0x0 Size=0xbc
        int refCount;// Offset=0x4 Size=0x4
        int band;// Offset=0x8 Size=0x4
        int index;// Offset=0xc Size=0x4
        float lerp;// Offset=0x10 Size=0x4
        bool isAnyEqBandEnabled;// Offset=0x14 Size=0x1
        unsigned char __align0[3];// Offset=0x15 Size=0x3
        class EQ eq[2][3];// Offset=0x18 Size=0x1b0
        float Process_Internal(float ,int ,int ,float );// Offset=0x0 Size=0x14c
        class ParametricEQ & operator=(class ParametricEQ & );
    };
};

class ParametricEQ : public IXAudioEffect// Size=0x1c8 (Id=5304)
{
    public void * operator new(unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new(unsigned int );
    public void * operator new[](unsigned int ,struct IXAudioBatchAllocator * );
    public void * operator new[](unsigned int );
    public void operator delete(void * ,struct IXAudioBatchAllocator * );
    public void operator delete(void * );
    public void operator delete[](void * ,struct IXAudioBatchAllocator * );
    public void operator delete[](void * );
    public void ParametricEQ(class ParametricEQ & );
    union // Size=0x348 (Id=0)
    {
        void ParametricEQ();// Offset=0x0 Size=0x94
        unsigned long AddRef();// Offset=0x0 Size=0x14
        unsigned long Release();// Offset=0x0 Size=0x14
        HRESULT GetInfo(struct XAUDIOFXINFO * );// Offset=0x0 Size=0x18
        HRESULT GetParam(unsigned char ,unsigned char ,union XAUDIOFXPARAM * );// Offset=0x0 Size=0x10c
        HRESULT SetParam(unsigned char ,unsigned char ,union XAUDIOFXPARAM * );// Offset=0x0 Size=0x348
        HRESULT GetContext(void ** );// Offset=0x0 Size=0x10
        HRESULT Process(struct IXAudioFrameBuffer * ,struct IXAudioFrameBuffer * );// Offset=0x0 Size=0xbc
        int refCount;// Offset=0x4 Size=0x4
        int band;// Offset=0x8 Size=0x4
        int index;// Offset=0xc Size=0x4
        float lerp;// Offset=0x10 Size=0x4
        bool isAnyEqBandEnabled;// Offset=0x14 Size=0x1
        unsigned char __align0[3];// Offset=0x15 Size=0x3
        class EQ eq[2][3];// Offset=0x18 Size=0x1b0
        float Process_Internal(float ,int ,int ,float );// Offset=0x0 Size=0x14c
        class ParametricEQ & operator=(class ParametricEQ & );
    };
};

struct SndEqParams// Size=0x14 (Id=5305)
{
    enum SND_EQTYPE type;// Offset=0x0 Size=0x4
    float gain;// Offset=0x4 Size=0x4
    float freq;// Offset=0x8 Size=0x4
    float q;// Offset=0xc Size=0x4
    bool enabled;// Offset=0x10 Size=0x1
};

enum language_t
{
    LANGUAGE_ENGLISH=0,
    LANGUAGE_FRENCH=1,
    LANGUAGE_GERMAN=2,
    LANGUAGE_ITALIAN=3,
    LANGUAGE_SPANISH=4,
    LANGUAGE_BRITISH=5,
    LANGUAGE_RUSSIAN=6,
    LANGUAGE_POLISH=7,
    LANGUAGE_KOREAN=8,
    LANGUAGE_TAIWANESE=9,
    LANGUAGE_JAPANESE=10,
    LANGUAGE_CHINESE=11,
    LANGUAGE_THAI=12,
    LANGUAGE_LEET=13,
    LANGUAGE_CZECH=14,
    MAX_LANGUAGES=15
};

class CXMAHeaderBuffer// Size=0xb4 (Id=5307)
{
    union // Size=0x268 (Id=0)
    {
        char * m_pDebugFileName;// Offset=0x0 Size=0x4
        unsigned char * m_pBuffer;// Offset=0x4 Size=0x4
        unsigned int m_bufferSize;// Offset=0x8 Size=0x4
        class CRiffChunkBuffer m_RiffChunk;// Offset=0xc Size=0x1c
        class CRiffChunkBuffer m_FormatChunk;// Offset=0x28 Size=0x1c
        class CRiffChunkBuffer m_DataChunk;// Offset=0x44 Size=0x1c
        class CRiffChunkBuffer m_WaveChunk;// Offset=0x60 Size=0x1c
        class CRiffChunkBuffer m_SeekTableChunk;// Offset=0x7c Size=0x1c
        class CRiffChunkBuffer m_IwXmaDataInfoChunk;// Offset=0x98 Size=0x1c
        void CXMAHeaderBuffer();// Offset=0x0 Size=0xbc
        HRESULT Initialize(char * ,unsigned char * ,int );// Offset=0x0 Size=0x268
        HRESULT SetSourceFormat(struct XAUDIOSOURCEFORMAT * );// Offset=0x0 Size=0x118
        HRESULT ReadIwXmaDataInfo(struct XaIwXmaDataInfo ** );// Offset=0x0 Size=0xb4
        unsigned long GetDuration();
        unsigned long GetDataOffset();
        unsigned long GetSeekTableOffset();
    };
};

class CXMAHeaderBuffer// Size=0xb4 (Id=5308)
{
    union // Size=0x268 (Id=0)
    {
        char * m_pDebugFileName;// Offset=0x0 Size=0x4
        unsigned char * m_pBuffer;// Offset=0x4 Size=0x4
        unsigned int m_bufferSize;// Offset=0x8 Size=0x4
        class CRiffChunkBuffer m_RiffChunk;// Offset=0xc Size=0x1c
        class CRiffChunkBuffer m_FormatChunk;// Offset=0x28 Size=0x1c
        class CRiffChunkBuffer m_DataChunk;// Offset=0x44 Size=0x1c
        class CRiffChunkBuffer m_WaveChunk;// Offset=0x60 Size=0x1c
        class CRiffChunkBuffer m_SeekTableChunk;// Offset=0x7c Size=0x1c
        class CRiffChunkBuffer m_IwXmaDataInfoChunk;// Offset=0x98 Size=0x1c
        void CXMAHeaderBuffer();// Offset=0x0 Size=0xbc
        HRESULT Initialize(char * ,unsigned char * ,int );// Offset=0x0 Size=0x268
        HRESULT SetSourceFormat(struct XAUDIOSOURCEFORMAT * );// Offset=0x0 Size=0x118
        HRESULT ReadIwXmaDataInfo(struct XaIwXmaDataInfo ** );// Offset=0x0 Size=0xb4
        unsigned long GetDuration();
        unsigned long GetDataOffset();
        unsigned long GetSeekTableOffset();
    };
};

struct CacheFileName// Size=0x44 (Id=5309)
{
    unsigned int fileIndex;// Offset=0x0 Size=0x4
    union // Size=0x40 (Id=0)
    {
        struct CacheFileNameRaw raw;// Offset=0x4 Size=0x40
        struct StreamFileNamePacked packed;// Offset=0x4 Size=0x8
    };
};

enum XaSubmixStage
{
    XA_REVERBSUBMIX=0,
    XA_MASTERMIX=1
};

struct XaLocal// Size=0x4690 (Id=5311)
{
    unsigned char xaudioHandle[20];// Offset=0x0 Size=0x14
    struct IXAudioSourceVoice * voice[53];// Offset=0x14 Size=0xd4
    bool voiceEqDisabled[53];// Offset=0xe8 Size=0x35
    unsigned char __align0[3];// Offset=0x11d Size=0x3
    struct IXAudioSubmixVoice * submixReverb;// Offset=0x120 Size=0x4
    struct XAUDIOCHANNELMAP monoSourcePassthroughChannelMap;// Offset=0x124 Size=0x8
    struct XAUDIOCHANNELMAPENTRY monoSourcePassthroughChannelEntry[1];// Offset=0x12c Size=0x8
    struct XAUDIOCHANNELMAP stereoSourcePassthroughChannelMap;// Offset=0x134 Size=0x8
    struct XAUDIOCHANNELMAPENTRY stereoSourcePassthroughChannelEntry[2];// Offset=0x13c Size=0x10
    struct XaEqEffect eq[2][3];// Offset=0x14c Size=0x1e00
    float eqLerp;// Offset=0x1f4c Size=0x4
    struct XAUDIOFXTABLEENTRY effectInfo;// Offset=0x1f50 Size=0xc
    int baseVolEntryCount[53][2];// Offset=0x1f5c Size=0x1a8
    float baseVolEntries[53][2][12];// Offset=0x2104 Size=0x13e0
    struct XaReverbSettings * reverbSettings;// Offset=0x34e4 Size=0x4
    struct XAUDIOSOURCEFORMAT streamSourceFormat[13];// Offset=0x34e8 Size=0x2d8
    struct XaStreamReadInfo streamReadInfo[13];// Offset=0x37c0 Size=0x784
    struct SndStartAliasInfo startAliasInfo[13];// Offset=0x3f44 Size=0x30c
    float realVolume[13];// Offset=0x4250 Size=0x34
    int playbackRate[53];// Offset=0x4284 Size=0xd4
    struct X3DAUDIO_LISTENER listener;// Offset=0x4358 Size=0x34
    struct X3DAUDIO_EMITTER emitter;// Offset=0x438c Size=0x64
    unsigned int calc3DFlags;// Offset=0x43f0 Size=0x4
    struct X3DAUDIO_DSP_SETTINGS dspSettings;// Offset=0x43f4 Size=0x30
    union XaVolumeCoefficients volumeCoefficients;// Offset=0x4424 Size=0x30
    float delayTimes[6];// Offset=0x4454 Size=0x18
    struct X3DAUDIO_CONE cone;// Offset=0x446c Size=0x20
    struct XAUDIOVOICEOUTPUTVOLUME voiceVolume;// Offset=0x448c Size=0x8
    struct XAUDIOVOICEOUTPUTVOLUMEENTRY voiceEntry[2];// Offset=0x4494 Size=0x10
    struct XAUDIOCHANNELVOLUME channelVolume[2];// Offset=0x44a4 Size=0x10
    struct XAUDIOCHANNELVOLUMEENTRY channelVolumeEntries[2][12];// Offset=0x44b4 Size=0xc0
    struct X3DAUDIO_DISTANCE_CURVE linearVolumeFalloffCurve;// Offset=0x4574 Size=0x8
    struct X3DAUDIO_DISTANCE_CURVE_POINT linearVolumeFalloffCurvePoints[17];// Offset=0x457c Size=0x88
    float azimuths[2];// Offset=0x4604 Size=0x8
    unsigned char sourceVoiceOutputCount;// Offset=0x460c Size=0x1
    unsigned char __align1[3];// Offset=0x460d Size=0x3
    struct XAUDIOVOICEOUTPUT output;// Offset=0x4610 Size=0x8
    struct XAUDIOVOICEOUTPUTENTRY outputEntry[2];// Offset=0x4618 Size=0x10
    struct XAUDIOCHANNELMAP channel;// Offset=0x4628 Size=0x8
    struct XAUDIOCHANNELMAPENTRY channelEntry[12];// Offset=0x4630 Size=0x60
};

struct XaVolumeCoefficientsMonoInput// Size=0x18 (Id=5312)
{
    float leftFront;// Offset=0x0 Size=0x4
    float rightFront;// Offset=0x4 Size=0x4
    float center;// Offset=0x8 Size=0x4
    float lfe;// Offset=0xc Size=0x4
    float leftRear;// Offset=0x10 Size=0x4
    float rightRear;// Offset=0x14 Size=0x4
};

struct XaVolumeCoefficientsStereoInput// Size=0x30 (Id=5313)
{
    float leftInputLeftFront;// Offset=0x0 Size=0x4
    float rightInputLeftFront;// Offset=0x4 Size=0x4
    float leftInputRightFront;// Offset=0x8 Size=0x4
    float rightInputRightFront;// Offset=0xc Size=0x4
    float leftInputCenter;// Offset=0x10 Size=0x4
    float rightInputCenter;// Offset=0x14 Size=0x4
    float leftInputLfe;// Offset=0x18 Size=0x4
    float rightInputLfe;// Offset=0x1c Size=0x4
    float leftInputLeftRear;// Offset=0x20 Size=0x4
    float rightInputLeftRear;// Offset=0x24 Size=0x4
    float leftInputRightRear;// Offset=0x28 Size=0x4
    float rightInputRightRear;// Offset=0x2c Size=0x4
};

union XaVolumeCoefficients// Size=0x30 (Id=5314)
{
    union // Size=0x30 (Id=0)
    {
        struct XaVolumeCoefficientsMonoInput mono;// Offset=0x0 Size=0x18
        struct XaVolumeCoefficientsStereoInput stereo;// Offset=0x0 Size=0x30
        float anonymousArray[1];// Offset=0x0 Size=0x4
    };
};

enum XaVoiceOutputIndex
{
    XA_MASTERINGVOICEOUTPUTINDEX=0,
    XA_REVERBVOICEOUTPUTINDEX=1,
    XA_VOICEOUTPUTCOUNT=2
};

struct Sys_File// Size=0x8 (Id=5316)
{
    void * handle;// Offset=0x0 Size=0x4
    int startOffset;// Offset=0x4 Size=0x4
};

class CRiffChunkBuffer// Size=0x1c (Id=5317)
{
    union // Size=0x24 (Id=0)
    {
        unsigned long m_fccChunkId;// Offset=0x0 Size=0x4
        class CRiffChunkBuffer * m_pParentChunk;// Offset=0x4 Size=0x4
        unsigned char * m_pBuffer;// Offset=0x8 Size=0x4
        unsigned int m_bufferSize;// Offset=0xc Size=0x4
        unsigned long m_dwDataOffset;// Offset=0x10 Size=0x4
        unsigned long m_dwDataSize;// Offset=0x14 Size=0x4
        unsigned long m_dwFlags;// Offset=0x18 Size=0x4
        void CRiffChunkBuffer();// Offset=0x0 Size=0x24
        void Initialize(unsigned long ,class CRiffChunkBuffer * ,unsigned char * ,int );// Offset=0x0 Size=0x14
        HRESULT Open();// Offset=0x0 Size=0xa4
    };
    public int IsValid();
    public unsigned long GetChunkId();
    public unsigned long GetDataSize();
    public unsigned long GetDataOffset();
};

class CRiffChunkBuffer// Size=0x1c (Id=5318)
{
    union // Size=0x24 (Id=0)
    {
        unsigned long m_fccChunkId;// Offset=0x0 Size=0x4
        class CRiffChunkBuffer * m_pParentChunk;// Offset=0x4 Size=0x4
        unsigned char * m_pBuffer;// Offset=0x8 Size=0x4
        unsigned int m_bufferSize;// Offset=0xc Size=0x4
        unsigned long m_dwDataOffset;// Offset=0x10 Size=0x4
        unsigned long m_dwDataSize;// Offset=0x14 Size=0x4
        unsigned long m_dwFlags;// Offset=0x18 Size=0x4
        void CRiffChunkBuffer();// Offset=0x0 Size=0x24
        void Initialize(unsigned long ,class CRiffChunkBuffer * ,unsigned char * ,int );// Offset=0x0 Size=0x14
        HRESULT Open();// Offset=0x0 Size=0xa4
    };
    public int IsValid();
    public unsigned long GetChunkId();
    public unsigned long GetDataSize();
    public unsigned long GetDataOffset();
};

struct StreamFile// Size=0x10 (Id=5319)
{
    struct Sys_File handle;// Offset=0x0 Size=0x8
    int length;// Offset=0x8 Size=0x4
    int startOffset;// Offset=0xc Size=0x4
};

struct CacheFileNameRaw2// Size=0x4 (Id=5320)
{
    char * name;// Offset=0x0 Size=0x4
};

struct CacheFileName2// Size=0xc (Id=5321)
{
    unsigned int fileIndex;// Offset=0x0 Size=0x4
    union // Size=0x4 (Id=0)
    {
        struct CacheFileNameRaw2 raw;// Offset=0x4 Size=0x4
        struct StreamFileNamePacked packed;// Offset=0x4 Size=0x8
    };
};

struct XaEqEffect// Size=0x500 (Id=5322)
{
    struct SndEqParams params[64];// Offset=0x0 Size=0x500
};

enum CXMAFile::StreamingState
{
    STREAMED=0,
    UNSTREAMED=1
};

class CXMAFile// Size=0x94 (Id=5324)
{
    union // Size=0x1cc (Id=0)
    {
        void * m_hFile;// Offset=0x0 Size=0x4
        class CRiffChunk m_RiffChunk;// Offset=0x4 Size=0x18
        class CRiffChunk m_FormatChunk;// Offset=0x1c Size=0x18
        class CRiffChunk m_DataChunk;// Offset=0x34 Size=0x18
        class CRiffChunk m_WaveChunk;// Offset=0x4c Size=0x18
        class CRiffChunk m_SeekTableChunk;// Offset=0x64 Size=0x18
        class CRiffChunk m_IwXmaDataInfoChunk;// Offset=0x7c Size=0x18
        void CXMAFile();// Offset=0x0 Size=0x9c
        void ~CXMAFile();// Offset=0x0 Size=0x40
        enum StreamingState
        {
            STREAMED=0,
            UNSTREAMED=1
        };
        HRESULT Open(char * ,enum CXMAFile::StreamingState );// Offset=0x0 Size=0x1cc
        HRESULT GetFormat(struct XMAWAVEFORMAT * );// Offset=0x0 Size=0x114
        HRESULT ReadSample(unsigned long ,void * ,unsigned long ,unsigned long * );// Offset=0x0 Size=0x70
        HRESULT ReadSeekTable(unsigned long ,void * ,unsigned long ,unsigned long * );// Offset=0x0 Size=0x70
        HRESULT ReadIwXmaDataInfo(unsigned long ,void * ,unsigned long ,unsigned long * );// Offset=0x0 Size=0x70
        void GetDuration(unsigned long * );
        void GetSeekTableSize(unsigned long * );
        void GetIwXmaDataInfoSize(unsigned long * );
        unsigned long GetDataOffset();
        void Close();// Offset=0x0 Size=0x40
        void * __vecDelDtor(unsigned int );
    };
};

class CXMAFile// Size=0x94 (Id=5325)
{
    union // Size=0x1cc (Id=0)
    {
        void * m_hFile;// Offset=0x0 Size=0x4
        class CRiffChunk m_RiffChunk;// Offset=0x4 Size=0x18
        class CRiffChunk m_FormatChunk;// Offset=0x1c Size=0x18
        class CRiffChunk m_DataChunk;// Offset=0x34 Size=0x18
        class CRiffChunk m_WaveChunk;// Offset=0x4c Size=0x18
        class CRiffChunk m_SeekTableChunk;// Offset=0x64 Size=0x18
        class CRiffChunk m_IwXmaDataInfoChunk;// Offset=0x7c Size=0x18
        void CXMAFile();// Offset=0x0 Size=0x9c
        void ~CXMAFile();// Offset=0x0 Size=0x40
        enum StreamingState
        {
            STREAMED=0,
            UNSTREAMED=1
        };
        HRESULT Open(char * ,enum CXMAFile::StreamingState );// Offset=0x0 Size=0x1cc
        HRESULT GetFormat(struct XMAWAVEFORMAT * );// Offset=0x0 Size=0x114
        HRESULT ReadSample(unsigned long ,void * ,unsigned long ,unsigned long * );// Offset=0x0 Size=0x70
        HRESULT ReadSeekTable(unsigned long ,void * ,unsigned long ,unsigned long * );// Offset=0x0 Size=0x70
        HRESULT ReadIwXmaDataInfo(unsigned long ,void * ,unsigned long ,unsigned long * );// Offset=0x0 Size=0x70
        void GetDuration(unsigned long * );
        void GetSeekTableSize(unsigned long * );
        void GetIwXmaDataInfoSize(unsigned long * );
        unsigned long GetDataOffset();
        void Close();// Offset=0x0 Size=0x40
        void * __vecDelDtor(unsigned int );
    };
};

struct CacheFileNameRaw// Size=0x40 (Id=5326)
{
    char name[64];// Offset=0x0 Size=0x40
};

struct PktCacheEntry// Size=0x28 (Id=5327)
{
    struct CacheFileName2 filename;// Offset=0x0 Size=0xc
    struct PktCacheEntry * nextHash;// Offset=0xc Size=0x4
    unsigned int hashCode;// Offset=0x10 Size=0x4
    int offset;// Offset=0x14 Size=0x4
    struct PktCacheEntry * prev;// Offset=0x18 Size=0x4
    struct PktCacheEntry * next;// Offset=0x1c Size=0x4
    int refCount;// Offset=0x20 Size=0x4
    int dataOffset;// Offset=0x24 Size=0x4
};

class CRiffChunk// Size=0x18 (Id=5328)
{
    union // Size=0x108 (Id=0)
    {
        unsigned long m_fccChunkId;// Offset=0x0 Size=0x4
        class CRiffChunk * m_pParentChunk;// Offset=0x4 Size=0x4
        void * m_hFile;// Offset=0x8 Size=0x4
        unsigned long m_dwDataOffset;// Offset=0xc Size=0x4
        unsigned long m_dwDataSize;// Offset=0x10 Size=0x4
        unsigned long m_dwFlags;// Offset=0x14 Size=0x4
        void CRiffChunk();// Offset=0x0 Size=0x20
        void Initialize(unsigned long ,class CRiffChunk * ,void * );// Offset=0x0 Size=0x10
        HRESULT Open();// Offset=0x0 Size=0x108
        int IsValid();
        HRESULT ReadData(long ,void * ,unsigned long );// Offset=0x0 Size=0x74
        unsigned long GetChunkId();
        unsigned long GetDataSize();
        unsigned long GetDataOffset();
    };
};

class CRiffChunk// Size=0x18 (Id=5329)
{
    union // Size=0x108 (Id=0)
    {
        unsigned long m_fccChunkId;// Offset=0x0 Size=0x4
        class CRiffChunk * m_pParentChunk;// Offset=0x4 Size=0x4
        void * m_hFile;// Offset=0x8 Size=0x4
        unsigned long m_dwDataOffset;// Offset=0xc Size=0x4
        unsigned long m_dwDataSize;// Offset=0x10 Size=0x4
        unsigned long m_dwFlags;// Offset=0x14 Size=0x4
        void CRiffChunk();// Offset=0x0 Size=0x20
        void Initialize(unsigned long ,class CRiffChunk * ,void * );// Offset=0x0 Size=0x10
        HRESULT Open();// Offset=0x0 Size=0x108
        int IsValid();
        HRESULT ReadData(long ,void * ,unsigned long );// Offset=0x0 Size=0x74
        unsigned long GetChunkId();
        unsigned long GetDataSize();
        unsigned long GetDataOffset();
    };
};

struct XaStreamReadInfo// Size=0x94 (Id=5330)
{
    struct CacheFileName fileName;// Offset=0x0 Size=0x44
    unsigned int hashCode;// Offset=0x44 Size=0x4
    int packetCount;// Offset=0x48 Size=0x4
    int aliasFlags;// Offset=0x4c Size=0x4
    int totalMsec;// Offset=0x50 Size=0x4
    int totalWaveLength;// Offset=0x54 Size=0x4
    int dataOffset;// Offset=0x58 Size=0x4
    int submitOffset;// Offset=0x5c Size=0x4
    int playedOffset;// Offset=0x60 Size=0x4
    struct StreamFile file;// Offset=0x64 Size=0x10
    int closeFile;// Offset=0x74 Size=0x4
    int seekTableOffset;// Offset=0x78 Size=0x4
    bool soundFileLoaded;// Offset=0x7c Size=0x1
    unsigned char __align0[3];// Offset=0x7d Size=0x3
    int timeshift;// Offset=0x80 Size=0x4
    float fraction;// Offset=0x84 Size=0x4
    int startDelay;// Offset=0x88 Size=0x4
    int desiredSampleIndex;// Offset=0x8c Size=0x4
    int initialSampleIndexOfFirstPacket;// Offset=0x90 Size=0x4
};

struct RIFFHEADER// Size=0x8 (Id=5331)
{
    unsigned long fccChunkId;// Offset=0x0 Size=0x4
    unsigned long dwDataSize;// Offset=0x4 Size=0x4
};

enum FS_ErrorCodes
{
    FS_OPEN_FAILURE=-1,
    FS_OPEN_NOT_IN_IWD_OR_LOCALIZED_DIR=-2
};

struct XModelLodInfo// Size=0x24 (Id=5333)
{
    float dist;// Offset=0x0 Size=0x4
    unsigned short numsurfs;// Offset=0x4 Size=0x2
    unsigned short surfIndex;// Offset=0x6 Size=0x2
    struct XModelSurfs * modelSurfs;// Offset=0x8 Size=0x4
    int partBits[5];// Offset=0xc Size=0x14
    struct XSurface * surfs;// Offset=0x20 Size=0x4
};

enum _unnamed_5334
{
    XANIM_SIZE=16,
    DOBJ_CREATE_SIZE=136,
    XSURFACE_SIZE=120
};

struct XAnimEntry// Size=0x8 (Id=5335)
{
    unsigned short numAnims;// Offset=0x0 Size=0x2
    unsigned short parent;// Offset=0x2 Size=0x2
    union // Size=0x4 (Id=0)
    {
        struct XAnimParts * parts;// Offset=0x4 Size=0x4
        struct XAnimParent animParent;// Offset=0x4 Size=0x4
    };
};

struct XAnim_s// Size=0xc (Id=5336)
{
    unsigned int size;// Offset=0x0 Size=0x4
    struct XAnimEntry entries[1];// Offset=0x4 Size=0x8
};

struct DSkelPartBits// Size=0x50 (Id=5337)
{
    int anim[5];// Offset=0x0 Size=0x14
    int control[5];// Offset=0x14 Size=0x14
    int worldCtrl[5];// Offset=0x28 Size=0x14
    int skel[5];// Offset=0x3c Size=0x14
};

struct XAnimTree_s// Size=0x8 (Id=5338)
{
    struct XAnim_s * anims;// Offset=0x0 Size=0x4
    unsigned short children;// Offset=0x4 Size=0x2
};

struct XAnimParent// Size=0x4 (Id=5339)
{
    unsigned short flags;// Offset=0x0 Size=0x2
    unsigned short children;// Offset=0x2 Size=0x2
};

struct XAnimState// Size=0x20 (Id=5340)
{
    float currentAnimTime;// Offset=0x0 Size=0x4
    float oldTime;// Offset=0x4 Size=0x4
    short cycleCount;// Offset=0x8 Size=0x2
    short oldCycleCount;// Offset=0xa Size=0x2
    float goalTime;// Offset=0xc Size=0x4
    float goalWeight;// Offset=0x10 Size=0x4
    float weight;// Offset=0x14 Size=0x4
    float rate;// Offset=0x18 Size=0x4
    bool instantWeightChange;// Offset=0x1c Size=0x1
};

struct DSkel// Size=0x58 (Id=5341)
{
    struct DSkelPartBits partBits;// Offset=0x0 Size=0x50
    int timeStamp;// Offset=0x50 Size=0x4
    struct DObjAnimMat * mat;// Offset=0x54 Size=0x4
};

struct DObj// Size=0x88 (Id=5342)
{
    struct XAnimTree_s * tree;// Offset=0x0 Size=0x4
    unsigned short duplicateParts;// Offset=0x4 Size=0x2
    unsigned short entnum;// Offset=0x6 Size=0x2
    unsigned char duplicatePartsSize;// Offset=0x8 Size=0x1
    unsigned char numModels;// Offset=0x9 Size=0x1
    unsigned char numBones;// Offset=0xa Size=0x1
    unsigned char flags;// Offset=0xb Size=0x1
    unsigned int ignoreCollision;// Offset=0xc Size=0x4
    long locked;// Offset=0x10 Size=0x4
    struct DSkel skel;// Offset=0x14 Size=0x58
    float radius;// Offset=0x6c Size=0x4
    unsigned int hidePartBits[5];// Offset=0x70 Size=0x14
    struct XModel ** models;// Offset=0x84 Size=0x4
};

struct XAnimInfo// Size=0x38 (Id=5343)
{
    unsigned short notifyChild;// Offset=0x0 Size=0x2
    short notifyIndex;// Offset=0x2 Size=0x2
    unsigned short notifyName;// Offset=0x4 Size=0x2
    unsigned short notifyType;// Offset=0x6 Size=0x2
    unsigned short prev;// Offset=0x8 Size=0x2
    unsigned short next;// Offset=0xa Size=0x2
    unsigned short children;// Offset=0xc Size=0x2
    unsigned short parent;// Offset=0xe Size=0x2
    unsigned short animIndex;// Offset=0x10 Size=0x2
    unsigned short animToModel;// Offset=0x12 Size=0x2
    union // Size=0x4 (Id=0)
    {
        struct XAnimParts * parts;// Offset=0x14 Size=0x4
        struct XAnimParent animParent;// Offset=0x14 Size=0x4
    };
    struct XAnimState state;// Offset=0x18 Size=0x20
};

struct TraceExtents// Size=0x60 (Id=5344)
{
    float midPoint[3];// Offset=0x0 Size=0xc
    float midPointPad;// Offset=0xc Size=0x4
    float halfDelta[3];// Offset=0x10 Size=0xc
    float halfDeltaPad;// Offset=0x1c Size=0x4
    float halfDeltaAbs[3];// Offset=0x20 Size=0xc
    float halfDeltaAbsPad;// Offset=0x2c Size=0x4
    float invDeltaAbs[3];// Offset=0x30 Size=0xc
    float invDeltaAbsPad;// Offset=0x3c Size=0x4
    float start[3];// Offset=0x40 Size=0xc
    float startPad;// Offset=0x4c Size=0x4
    float end[3];// Offset=0x50 Size=0xc
    float endPad;// Offset=0x5c Size=0x4
};

struct xtrace_t// Size=0x10 (Id=5345)
{
    float normal[3];// Offset=0x0 Size=0xc
    float fraction;// Offset=0xc Size=0x4
};

struct XSurfaceCollisionTree// Size=0x28 (Id=5346)
{
    float trans[3];// Offset=0x0 Size=0xc
    float scale[3];// Offset=0xc Size=0xc
    unsigned int nodeCount;// Offset=0x18 Size=0x4
    struct XSurfaceCollisionNode * nodes;// Offset=0x1c Size=0x4
    unsigned int leafCount;// Offset=0x20 Size=0x4
    struct XSurfaceCollisionLeaf * leafs;// Offset=0x24 Size=0x4
};

struct GfxPackedVertex// Size=0x20 (Id=5347)
{
    float xyz[3];// Offset=0x0 Size=0xc
    float binormalSign;// Offset=0xc Size=0x4
    union GfxColor color;// Offset=0x10 Size=0x4
    union PackedTexCoords texCoord;// Offset=0x14 Size=0x4
    union PackedUnitVec normal;// Offset=0x18 Size=0x4
    union PackedUnitVec tangent;// Offset=0x1c Size=0x4
};

struct XSurfaceCollisionLeaf// Size=0x2 (Id=5348)
{
    unsigned short triangleBeginIndex;// Offset=0x0 Size=0x2
};

struct XSurfaceCollisionNode// Size=0x10 (Id=5349)
{
    struct XSurfaceCollisionAabb aabb;// Offset=0x0 Size=0xc
    unsigned short childBeginIndex;// Offset=0xc Size=0x2
    unsigned short childCount;// Offset=0xe Size=0x2
};

struct XSurface// Size=0x78 (Id=5350)
{
    unsigned char tileMode;// Offset=0x0 Size=0x1
    bool deformed;// Offset=0x1 Size=0x1
    unsigned short vertCount;// Offset=0x2 Size=0x2
    unsigned short triCount;// Offset=0x4 Size=0x2
    unsigned char __align0[2];// Offset=0x6 Size=0x2
    unsigned short * triIndices;// Offset=0x8 Size=0x4
    struct XSurfaceVertexInfo vertInfo;// Offset=0xc Size=0xc
    struct GfxPackedVertex * verts0;// Offset=0x18 Size=0x4
    struct D3DVertexBuffer vb0;// Offset=0x1c Size=0x20
    unsigned int vertListCount;// Offset=0x3c Size=0x4
    struct XRigidVertList * vertList;// Offset=0x40 Size=0x4
    struct D3DIndexBuffer indexBuffer;// Offset=0x44 Size=0x20
    int partBits[5];// Offset=0x64 Size=0x14
};

struct XSurfaceGetTriCandidatesLocals// Size=0x4a4 (Id=5351)
{
    int mins[3];// Offset=0x0 Size=0xc
    int maxs[3];// Offset=0xc Size=0xc
    struct XSurfaceCollisionTree * tree;// Offset=0x18 Size=0x4
    unsigned short * inIndices;// Offset=0x1c Size=0x4
    struct GfxPackedVertex * inVertices0;// Offset=0x20 Size=0x4
    bool  ( * visitorFunc)(void * ,struct GfxPackedVertex ** ,struct GfxPackedVertex ** );// Offset=0x24 Size=0x4
    void * visitorContext;// Offset=0x28 Size=0x4
    unsigned int nodeQueueBegin;// Offset=0x2c Size=0x4
    unsigned int nodeQueueEnd;// Offset=0x30 Size=0x4
    unsigned int leafQueueBegin;// Offset=0x34 Size=0x4
    unsigned int leafQueueEnd;// Offset=0x38 Size=0x4
    unsigned int triangleQueueBegin;// Offset=0x3c Size=0x4
    unsigned int triangleQueueEnd;// Offset=0x40 Size=0x4
    unsigned int vertexQueueBegin;// Offset=0x44 Size=0x4
    unsigned int vertexQueueEnd;// Offset=0x48 Size=0x4
    struct QueueElement nodeQueue[128];// Offset=0x4c Size=0x400
    struct QueueElement leafQueue[4];// Offset=0x44c Size=0x20
    struct QueueElement triangleQueue[4];// Offset=0x46c Size=0x20
    unsigned short vertexQueue[4][3];// Offset=0x48c Size=0x18
};

struct QueueElement// Size=0x8 (Id=5352)
{
    unsigned int beginIndex;// Offset=0x0 Size=0x4
    unsigned int count;// Offset=0x4 Size=0x4
};

struct clipMap_t// Size=0x100 (Id=5353)
{
    char * name;// Offset=0x0 Size=0x4
    int isInUse;// Offset=0x4 Size=0x4
    int planeCount;// Offset=0x8 Size=0x4
    struct cplane_s * planes;// Offset=0xc Size=0x4
    unsigned int numStaticModels;// Offset=0x10 Size=0x4
    struct cStaticModel_s * staticModelList;// Offset=0x14 Size=0x4
    unsigned int numMaterials;// Offset=0x18 Size=0x4
    struct ClipMaterial * materials;// Offset=0x1c Size=0x4
    unsigned int numBrushSides;// Offset=0x20 Size=0x4
    struct cbrushside_t * brushsides;// Offset=0x24 Size=0x4
    unsigned int numBrushEdges;// Offset=0x28 Size=0x4
    unsigned char * brushEdges;// Offset=0x2c Size=0x4
    unsigned int numNodes;// Offset=0x30 Size=0x4
    struct cNode_t * nodes;// Offset=0x34 Size=0x4
    unsigned int numLeafs;// Offset=0x38 Size=0x4
    struct cLeaf_t * leafs;// Offset=0x3c Size=0x4
    unsigned int leafbrushNodesCount;// Offset=0x40 Size=0x4
    struct cLeafBrushNode_s * leafbrushNodes;// Offset=0x44 Size=0x4
    unsigned int numLeafBrushes;// Offset=0x48 Size=0x4
    unsigned short * leafbrushes;// Offset=0x4c Size=0x4
    unsigned int numLeafSurfaces;// Offset=0x50 Size=0x4
    unsigned int * leafsurfaces;// Offset=0x54 Size=0x4
    unsigned int vertCount;// Offset=0x58 Size=0x4
    float * verts[3];// Offset=0x5c Size=0x4
    int triCount;// Offset=0x60 Size=0x4
    unsigned short * triIndices;// Offset=0x64 Size=0x4
    unsigned char * triEdgeIsWalkable;// Offset=0x68 Size=0x4
    int borderCount;// Offset=0x6c Size=0x4
    struct CollisionBorder * borders;// Offset=0x70 Size=0x4
    int partitionCount;// Offset=0x74 Size=0x4
    struct CollisionPartition * partitions;// Offset=0x78 Size=0x4
    int aabbTreeCount;// Offset=0x7c Size=0x4
    struct CollisionAabbTree * aabbTrees;// Offset=0x80 Size=0x4
    unsigned int numSubModels;// Offset=0x84 Size=0x4
    struct cmodel_t * cmodels;// Offset=0x88 Size=0x4
    unsigned short numBrushes;// Offset=0x8c Size=0x2
    unsigned char __align0[2];// Offset=0x8e Size=0x2
    struct cbrush_t * brushes;// Offset=0x90 Size=0x4
    struct Bounds * brushBounds;// Offset=0x94 Size=0x4
    int * brushContents;// Offset=0x98 Size=0x4
    struct MapEnts * mapEnts;// Offset=0x9c Size=0x4
    unsigned short smodelNodeCount;// Offset=0xa0 Size=0x2
    unsigned char __align1[2];// Offset=0xa2 Size=0x2
    struct SModelAabbNode * smodelNodes;// Offset=0xa4 Size=0x4
    unsigned short dynEntCount[2];// Offset=0xa8 Size=0x4
    struct DynEntityDef * dynEntDefList[2];// Offset=0xac Size=0x8
    struct DynEntityPose * dynEntPoseList[2];// Offset=0xb4 Size=0x8
    struct DynEntityClient * dynEntClientList[2];// Offset=0xbc Size=0x8
    struct DynEntityColl * dynEntCollList[2];// Offset=0xc4 Size=0x8
    unsigned int checksum;// Offset=0xcc Size=0x4
};

struct XAnimTree_s// Size=0x8 (Id=5354)
{
    struct XAnim_s * anims;// Offset=0x0 Size=0x4
    unsigned short children;// Offset=0x4 Size=0x2
};

enum _unnamed_5355
{
    PART_TYPE_NO_QUAT=0,
    PART_TYPE_SIMPLE_QUAT=1,
    PART_TYPE_NORMAL_QUAT=2,
    PART_TYPE_PRECISION_QUAT=3,
    PART_TYPE_SIMPLE_QUAT_NO_SIZE=4,
    PART_TYPE_NORMAL_QUAT_NO_SIZE=5,
    PART_TYPE_PRECISION_QUAT_NO_SIZE=6,
    PART_TYPE_SMALL_TRANS=7,
    PART_TYPE_TRANS=8,
    PART_TYPE_TRANS_NO_SIZE=9,
    PART_TYPE_NO_TRANS=10,
    PART_TYPE_ALL=11,
    PART_TYPE_COUNT=12
};

enum _unnamed_5356
{
    VARIABLELIST_PARENT_SIZE=36864,
    VARIABLELIST_PARENT_BEGIN=1,
    VARIABLELIST_PARENT_END=36865,
    VARIABLELIST_CHILD_SIZE=51200,
    VARIABLELIST_CHILD0_BEGIN=36866,
    VARIABLELIST_CHILD0_END=88066,
    VARIABLELIST_CHILD1_BEGIN=88067,
    VARIABLELIST_CHILD1_END=139267,
    VARIABLELIST_PARENT_DEV_SIZE=33664,
    VARIABLELIST_CHILD_DEV_SIZE=48000,
    VARIABLELIST_SIZE=139267
};

struct XAnimDeltaPartQuatDataFrames// Size=0x8 (Id=5357)
{
    short * frames[4];// Offset=0x0 Size=0x4
    union XAnimDynamicIndices indices;// Offset=0x4 Size=0x2
};

union XAnimDeltaPartQuatData// Size=0x8 (Id=5358)
{
    struct XAnimDeltaPartQuatDataFrames frames;// Offset=0x0 Size=0x8
    short frame0[4];// Offset=0x0 Size=0x8
};

union XAnimDeltaPartQuatData2// Size=0x8 (Id=5359)
{
    union // Size=0x8 (Id=0)
    {
        struct XAnimDeltaPartQuatDataFrames2 frames;// Offset=0x0 Size=0x8
        short frame0[2];// Offset=0x0 Size=0x4
    };
};

struct XAnimDeltaPartQuatDataFrames2// Size=0x8 (Id=5360)
{
    short * frames[2];// Offset=0x0 Size=0x4
    union XAnimDynamicIndices indices;// Offset=0x4 Size=0x2
};

union XAnimDynamicIndices// Size=0x2 (Id=5361)
{
    unsigned char _1[1];// Offset=0x0 Size=0x1
    unsigned short _2[1];// Offset=0x0 Size=0x2
};

union XAnimPartTransData// Size=0x20 (Id=5362)
{
    union // Size=0x20 (Id=0)
    {
        struct XAnimPartTransFrames frames;// Offset=0x0 Size=0x20
        float frame0[3];// Offset=0x0 Size=0xc
    };
};

union XAnimDynamicFrames// Size=0x4 (Id=5363)
{
    unsigned char * _1[3];// Offset=0x0 Size=0x4
    unsigned short * _2[3];// Offset=0x0 Size=0x4
};

struct XAnimPartTransFrames// Size=0x20 (Id=5364)
{
    float mins[3];// Offset=0x0 Size=0xc
    float size[3];// Offset=0xc Size=0xc
    union XAnimDynamicFrames frames;// Offset=0x18 Size=0x4
    union XAnimDynamicIndices indices;// Offset=0x1c Size=0x2
};

struct XAnimDeltaPartQuat// Size=0xc (Id=5365)
{
    unsigned short size;// Offset=0x0 Size=0x2
    unsigned char __align0[2];// Offset=0x2 Size=0x2
    union XAnimDeltaPartQuatData u;// Offset=0x4 Size=0x8
};

struct XAnimDeltaPartQuat2// Size=0xc (Id=5366)
{
    unsigned short size;// Offset=0x0 Size=0x2
    unsigned char __align0[2];// Offset=0x2 Size=0x2
    union XAnimDeltaPartQuatData2 u;// Offset=0x4 Size=0x8
};

struct XAnimPartTrans// Size=0x24 (Id=5367)
{
    unsigned short size;// Offset=0x0 Size=0x2
    unsigned char smallTrans;// Offset=0x2 Size=0x1
    unsigned char __align0[1];// Offset=0x3 Size=0x1
    union XAnimPartTransData u;// Offset=0x4 Size=0x20
};

union XAnimIndices// Size=0x4 (Id=5368)
{
    unsigned char * _1;// Offset=0x0 Size=0x4
    unsigned short * _2;// Offset=0x0 Size=0x4
    void * data;// Offset=0x0 Size=0x4
};

union VariableUnion// Size=0x4 (Id=5369)
{
    int intValue;// Offset=0x0 Size=0x4
    float floatValue;// Offset=0x0 Size=0x4
    unsigned int stringValue;// Offset=0x0 Size=0x4
    float * vectorValue;// Offset=0x0 Size=0x4
    char * codePosValue;// Offset=0x0 Size=0x4
    unsigned int pointerValue;// Offset=0x0 Size=0x4
    struct VariableStackBuffer * stackValue;// Offset=0x0 Size=0x4
    unsigned int entityOffset;// Offset=0x0 Size=0x4
};

struct VariableValue// Size=0x8 (Id=5370)
{
    union VariableUnion u;// Offset=0x0 Size=0x4
    int type;// Offset=0x4 Size=0x4
};

struct XAnimDeltaPart// Size=0xc (Id=5371)
{
    struct XAnimPartTrans * trans;// Offset=0x0 Size=0x4
    struct XAnimDeltaPartQuat2 * quat2;// Offset=0x4 Size=0x4
    struct XAnimDeltaPartQuat * quat;// Offset=0x8 Size=0x4
};

struct XAnimNotifyInfo// Size=0x8 (Id=5372)
{
    unsigned short name;// Offset=0x0 Size=0x2
    unsigned char __align0[2];// Offset=0x2 Size=0x2
    float time;// Offset=0x4 Size=0x4
};

struct VariableStackBuffer// Size=0xc (Id=5373)
{
    char * pos;// Offset=0x0 Size=0x4
    unsigned short size;// Offset=0x4 Size=0x2
    unsigned short bufLen;// Offset=0x6 Size=0x2
    unsigned short localId;// Offset=0x8 Size=0x2
    unsigned char time;// Offset=0xa Size=0x1
    char buf[1];// Offset=0xb Size=0x1
};

struct XAnimParts// Size=0x58 (Id=5374)
{
    char * name;// Offset=0x0 Size=0x4
    unsigned short dataByteCount;// Offset=0x4 Size=0x2
    unsigned short dataShortCount;// Offset=0x6 Size=0x2
    unsigned short dataIntCount;// Offset=0x8 Size=0x2
    unsigned short randomDataByteCount;// Offset=0xa Size=0x2
    unsigned short randomDataIntCount;// Offset=0xc Size=0x2
    unsigned short numframes;// Offset=0xe Size=0x2
    unsigned char flags;// Offset=0x10 Size=0x1
    unsigned char boneCount[12];// Offset=0x11 Size=0xc
    unsigned char notifyCount;// Offset=0x1d Size=0x1
    unsigned char assetType;// Offset=0x1e Size=0x1
    bool pad;// Offset=0x1f Size=0x1
    unsigned int randomDataShortCount;// Offset=0x20 Size=0x4
    unsigned int indexCount;// Offset=0x24 Size=0x4
    float framerate;// Offset=0x28 Size=0x4
    float frequency;// Offset=0x2c Size=0x4
    unsigned short * names;// Offset=0x30 Size=0x4
    unsigned char * dataByte;// Offset=0x34 Size=0x4
    short * dataShort;// Offset=0x38 Size=0x4
    int * dataInt;// Offset=0x3c Size=0x4
    short * randomDataShort;// Offset=0x40 Size=0x4
    unsigned char * randomDataByte;// Offset=0x44 Size=0x4
    int * randomDataInt;// Offset=0x48 Size=0x4
    union XAnimIndices indices;// Offset=0x4c Size=0x4
    struct XAnimNotifyInfo * notify;// Offset=0x50 Size=0x4
    struct XAnimDeltaPart * deltaPart;// Offset=0x54 Size=0x4
};

struct XAnimInfo// Size=0x38 (Id=5375)
{
    unsigned short notifyChild;// Offset=0x0 Size=0x2
    short notifyIndex;// Offset=0x2 Size=0x2
    unsigned short notifyName;// Offset=0x4 Size=0x2
    unsigned short notifyType;// Offset=0x6 Size=0x2
    unsigned short prev;// Offset=0x8 Size=0x2
    unsigned short next;// Offset=0xa Size=0x2
    unsigned short children;// Offset=0xc Size=0x2
    unsigned short parent;// Offset=0xe Size=0x2
    unsigned short animIndex;// Offset=0x10 Size=0x2
    unsigned short animToModel;// Offset=0x12 Size=0x2
    union // Size=0x4 (Id=0)
    {
        struct XAnimParts * parts;// Offset=0x14 Size=0x4
        struct XAnimParent animParent;// Offset=0x14 Size=0x4
    };
    struct XAnimState state;// Offset=0x18 Size=0x20
};

struct XAnimDeltaPart// Size=0xc (Id=5376)
{
    struct XAnimPartTrans * trans;// Offset=0x0 Size=0x4
    struct XAnimDeltaPartQuat2 * quat2;// Offset=0x4 Size=0x4
    struct XAnimDeltaPartQuat * quat;// Offset=0x8 Size=0x4
};

struct XAnimTime// Size=0xc (Id=5377)
{
    float time;// Offset=0x0 Size=0x4
    float frameFrac;// Offset=0x4 Size=0x4
    int frameIndex;// Offset=0x8 Size=0x4
};

struct XAnimTime// Size=0xc (Id=5378)
{
    float time;// Offset=0x0 Size=0x4
    float frameFrac;// Offset=0x4 Size=0x4
    int frameIndex;// Offset=0x8 Size=0x4
};

struct XAnimParts// Size=0x58 (Id=5379)
{
    char * name;// Offset=0x0 Size=0x4
    unsigned short dataByteCount;// Offset=0x4 Size=0x2
    unsigned short dataShortCount;// Offset=0x6 Size=0x2
    unsigned short dataIntCount;// Offset=0x8 Size=0x2
    unsigned short randomDataByteCount;// Offset=0xa Size=0x2
    unsigned short randomDataIntCount;// Offset=0xc Size=0x2
    unsigned short numframes;// Offset=0xe Size=0x2
    unsigned char flags;// Offset=0x10 Size=0x1
    unsigned char boneCount[12];// Offset=0x11 Size=0xc
    unsigned char notifyCount;// Offset=0x1d Size=0x1
    unsigned char assetType;// Offset=0x1e Size=0x1
    bool pad;// Offset=0x1f Size=0x1
    unsigned int randomDataShortCount;// Offset=0x20 Size=0x4
    unsigned int indexCount;// Offset=0x24 Size=0x4
    float framerate;// Offset=0x28 Size=0x4
    float frequency;// Offset=0x2c Size=0x4
    unsigned short * names;// Offset=0x30 Size=0x4
    unsigned char * dataByte;// Offset=0x34 Size=0x4
    short * dataShort;// Offset=0x38 Size=0x4
    int * dataInt;// Offset=0x3c Size=0x4
    short * randomDataShort;// Offset=0x40 Size=0x4
    unsigned char * randomDataByte;// Offset=0x44 Size=0x4
    int * randomDataInt;// Offset=0x48 Size=0x4
    union XAnimIndices indices;// Offset=0x4c Size=0x4
    struct XAnimNotifyInfo * notify;// Offset=0x50 Size=0x4
    struct XAnimDeltaPart * deltaPart;// Offset=0x54 Size=0x4
};

class bitarray<160>// Size=0x14 (Id=5380)
{
    public void copyFromArray(int * ,int );
    public void copyBitArray(class bitarray<160> & );
    public void orAllBits(class bitarray<160> & );
    public void andAllBits(class bitarray<160> & );
    public void xorAllBits(class bitarray<160> & );
    public void flipAllBits();
    public bool testBit(unsigned int );
    public void setBit(unsigned int );
    public void resetAllBits();
    public void resetBit(unsigned int );
    public bool noBitsOn();
    public bool allBitsOn();
    public bool anyBitsOn();
    public int size();
    enum _unnamed_58198
    {
        BITS_PER_WORD=32,
        WORD_COUNT=5
    };
    public int array[5];// Offset=0x0 Size=0x14
};

class bitarray<160>// Size=0x14 (Id=5381)
{
    public void copyFromArray(int * ,int );
    public void copyBitArray(class bitarray<160> & );
    public void orAllBits(class bitarray<160> & );
    public void andAllBits(class bitarray<160> & );
    public void xorAllBits(class bitarray<160> & );
    public void flipAllBits();
    public bool testBit(unsigned int );
    public void setBit(unsigned int );
    public void resetAllBits();
    public void resetBit(unsigned int );
    public bool noBitsOn();
    public bool allBitsOn();
    public bool anyBitsOn();
    public int size();
    enum _unnamed_58198
    {
        BITS_PER_WORD=32,
        WORD_COUNT=5
    };
    public int array[5];// Offset=0x0 Size=0x14
};

struct XAnimCalcAnimInfo// Size=0x7830 (Id=5382)
{
    struct DObjAnimMat rotTransArray[960];// Offset=0x0 Size=0x7800
    class bitarray<160> animPartBits;// Offset=0x7800 Size=0x14
    class bitarray<160> ignorePartBits;// Offset=0x7814 Size=0x14
};

enum _unnamed_5383
{
    XANIM_LOOP_SYNC_TIME=1,
    XANIM_NONLOOP_SYNC_TIME=2,
    XANIM_SYNC_ROOT=4,
    XANIM_COMPLETE=8,
    XANIM_ADDITIVE=16
};

enum bitarray<160>::_unnamed_5384
{
    BITS_PER_WORD=32,
    WORD_COUNT=5
};

class bitarray<160>// Size=0x14 (Id=5385)
{
    public void copyFromArray(int * ,int );
    public void copyBitArray(class bitarray<160> & );
    public void orAllBits(class bitarray<160> & );
    public void andAllBits(class bitarray<160> & );
    public void xorAllBits(class bitarray<160> & );
    public void flipAllBits();
    public bool testBit(unsigned int );
    public void setBit(unsigned int );
    public void resetAllBits();
    public void resetBit(unsigned int );
    public bool noBitsOn();
    public bool allBitsOn();
    public bool anyBitsOn();
    public int size();
    enum _unnamed_58226
    {
        BITS_PER_WORD=32,
        WORD_COUNT=5
    };
    public int array[5];// Offset=0x0 Size=0x14
};

struct XAnimCalcAnimInfo// Size=0x7830 (Id=5386)
{
    struct DObjAnimMat rotTransArray[960];// Offset=0x0 Size=0x7800
    class bitarray<160> animPartBits;// Offset=0x7800 Size=0x14
    class bitarray<160> ignorePartBits;// Offset=0x7814 Size=0x14
};

struct XAnimToXModel// Size=0xb8 (Id=5387)
{
    class bitarray<160> partBits;// Offset=0x0 Size=0x14
    unsigned char boneCount;// Offset=0x14 Size=0x1
    unsigned char boneIndex[160];// Offset=0x15 Size=0xa0
};

struct XAnimEntry// Size=0x8 (Id=5388)
{
    unsigned short numAnims;// Offset=0x0 Size=0x2
    unsigned short parent;// Offset=0x2 Size=0x2
    union // Size=0x4 (Id=0)
    {
        struct XAnimParts * parts;// Offset=0x4 Size=0x4
        struct XAnimParent animParent;// Offset=0x4 Size=0x4
    };
};

struct XAnimState// Size=0x20 (Id=5389)
{
    float currentAnimTime;// Offset=0x0 Size=0x4
    float oldTime;// Offset=0x4 Size=0x4
    short cycleCount;// Offset=0x8 Size=0x2
    short oldCycleCount;// Offset=0xa Size=0x2
    float goalTime;// Offset=0xc Size=0x4
    float goalWeight;// Offset=0x10 Size=0x4
    float weight;// Offset=0x14 Size=0x4
    float rate;// Offset=0x18 Size=0x4
    bool instantWeightChange;// Offset=0x1c Size=0x1
};

struct XAnimDeltaInfo// Size=0x4 (Id=5390)
{
    bool bClear;// Offset=0x0 Size=0x1
    bool bNormQuat;// Offset=0x1 Size=0x1
    bool bAbs;// Offset=0x2 Size=0x1
    bool bUseGoalWeight;// Offset=0x3 Size=0x1
};

struct XAnimDeltaInfo// Size=0x4 (Id=5391)
{
    bool bClear;// Offset=0x0 Size=0x1
    bool bNormQuat;// Offset=0x1 Size=0x1
    bool bAbs;// Offset=0x2 Size=0x1
    bool bUseGoalWeight;// Offset=0x3 Size=0x1
};

struct XAnimRotPos// Size=0x20 (Id=5392)
{
    float rot[4];// Offset=0x0 Size=0x10
    float posWeight;// Offset=0x10 Size=0x4
    float pos[3];// Offset=0x14 Size=0xc
};

struct XAnim_s// Size=0xc (Id=5393)
{
    unsigned int size;// Offset=0x0 Size=0x4
    struct XAnimEntry entries[1];// Offset=0x4 Size=0x8
};

struct XModelNameMap// Size=0x4 (Id=5394)
{
    unsigned short name;// Offset=0x0 Size=0x2
    unsigned short index;// Offset=0x2 Size=0x2
};

enum _unnamed_5395
{
    MT_TYPE_EMPTY=0,
    MT_TYPE_THREAD=1,
    MT_TYPE_VECTOR=2,
    MT_TYPE_ANIM_NOTETRACK=3,
    MT_TYPE_ANIM_TREE=4,
    MT_TYPE_SMALL_ANIM_TREE=5,
    MT_TYPE_SIMPLE_ANIM_TREE=6,
    MT_TYPE_EXTERNAL=7,
    MT_TYPE_TEMP=8,
    MT_TYPE_SURFACE=9,
    MT_TYPE_ANIM_PART=10,
    MT_TYPE_MODEL_PART=11,
    MT_TYPE_MODEL_PART_MAP=12,
    MT_TYPE_MODEL_DUPLICATE_PARTS=13,
    MT_TYPE_MODEL_LIST=14,
    MT_TYPE_SCRIPT_PARSE=15,
    MT_TYPE_SCRIPT_STRING=16,
    MT_TYPE_CLASS=17,
    MT_TYPE_TAG_INFO=18,
    MT_TYPE_ANIMSCRIPTED=19,
    MT_TYPE_CONFIG_STRING=20,
    MT_TYPE_DEBUGGER_STRING=21,
    MT_TYPE_GENERIC=22,
    MT_TYPE_COUNT=23
};

enum _unnamed_5396
{
    ANIM_LOOP=1,
    ANIM_DELTA=2,
    ANIM_DELTA_3D=4
};

enum _unnamed_5397
{
    XANIM_ERROR_NONE=0,
    XANIM_ERROR_BAD_ROOT_ANIM=1,
    XANIM_ERROR_BAD_NOTIFY=2
};

struct XAnimNotify_s// Size=0xc (Id=5398)
{
    char * name;// Offset=0x0 Size=0x4
    unsigned int type;// Offset=0x4 Size=0x4
    float timeFrac;// Offset=0x8 Size=0x4
};

struct XModelNameMap// Size=0x4 (Id=5399)
{
    unsigned short name;// Offset=0x0 Size=0x2
    unsigned short index;// Offset=0x2 Size=0x2
};

struct XAnimSimpleTree_s// Size=0x14 (Id=5400)
{
    struct XAnimTree_s tree;// Offset=0x0 Size=0x8
    struct XAnim_s anim;// Offset=0x8 Size=0xc
};

class bitarray<160>// Size=0x14 (Id=5401)
{
    public void copyFromArray(int * ,int );
    public void copyBitArray(class bitarray<160> & );
    public void orAllBits(class bitarray<160> & );
    public void andAllBits(class bitarray<160> & );
    public void xorAllBits(class bitarray<160> & );
    public void flipAllBits();
    public bool testBit(unsigned int );
    public void setBit(unsigned int );
    public void resetAllBits();
    public void resetBit(unsigned int );
    public bool noBitsOn();
    public bool allBitsOn();
    public bool anyBitsOn();
    public int size();
    enum _unnamed_58291
    {
        BITS_PER_WORD=32,
        WORD_COUNT=5
    };
    public int array[5];// Offset=0x0 Size=0x14
};

enum _unnamed_5402
{
    DSKEL_CREATE_INC=32
};

struct SavedDObj// Size=0x68 (Id=5403)
{
    struct SavedDObjModel dobjModels[32];// Offset=0x0 Size=0x40
    struct XModel ** models;// Offset=0x40 Size=0x4
    int locked;// Offset=0x44 Size=0x4
    unsigned int ignoreCollision;// Offset=0x48 Size=0x4
    unsigned short numModels;// Offset=0x4c Size=0x2
    unsigned short entnum;// Offset=0x4e Size=0x2
    struct XAnimTree_s * tree;// Offset=0x50 Size=0x4
    unsigned int hidePartBits[5];// Offset=0x54 Size=0x14
};

enum _unnamed_5404
{
    STREAM_ORIGIN_SCRIPT=0,
    STREAM_ORIGIN_CLIENT0=1,
    STREAM_ORIGIN_CLIENT1=2,
    STREAM_ORIGIN_COUNT=3
};

enum _unnamed_5405
{
    DB_IMAGE_BASE=0,
    DB_IMAGE_BASE_END=3583,
    DB_IMAGE_LOW=3584,
    DB_IMAGE_LOW_END=7167,
    DB_IMAGE_MIDDLE=7168,
    DB_IMAGE_MIDDLE_END=10751,
    DB_IMAGE_HIGH=10752,
    DB_IMAGE_HIGH_END=14335,
    DB_STREAM_COUNT=14336
};

struct StreamGlob// Size=0x78380 (Id=5406)
{
    float priority2[14336];// Offset=0x0 Size=0xe000
    struct MaterialStream material[4096];// Offset=0xe000 Size=0x1c000
    struct XModelStream model[1536];// Offset=0x2a000 Size=0x4800
    unsigned int modelInuse[48];// Offset=0x2e800 Size=0xc0
    unsigned char __align0[64];// Offset=0x2e8c0 Size=0x40
    float modelRadius[1536];// Offset=0x2e900 Size=0x1800
    float fxModelDist[1536];// Offset=0x30100 Size=0x1800
    float bmodelDist[2048];// Offset=0x31900 Size=0x2000
    float cachedBmodelDist[2048];// Offset=0x33900 Size=0x2000
    float modelDist[1536];// Offset=0x35900 Size=0x1800
    float cachedModelDist[1536];// Offset=0x37100 Size=0x1800
    float glassDist[256];// Offset=0x38900 Size=0x400
    float bufferedGlassDist[256];// Offset=0x38d00 Size=0x400
    unsigned int materialAlwaysLoaded[4][128];// Offset=0x39100 Size=0x800
    unsigned int materialInuse[128];// Offset=0x39900 Size=0x200
    float imageTexLength[3584];// Offset=0x39b00 Size=0x3800
    unsigned int materialTouch[128];// Offset=0x3d300 Size=0x200
    float baseMaterialPriority[4096];// Offset=0x3d500 Size=0x4000
    struct DefaultMaterialPriority defaultMaterialPriority[4096];// Offset=0x41500 Size=0xc000
    unsigned int modelTouch[48];// Offset=0x4d500 Size=0xc0
    unsigned char __align1[64];// Offset=0x4d5c0 Size=0x40
    unsigned int modelBaseTouch[48];// Offset=0x4d600 Size=0xc0
    unsigned char __align2[64];// Offset=0x4d6c0 Size=0x40
    unsigned int cachedModelBaseTouch[48];// Offset=0x4d700 Size=0xc0
    unsigned char __align3[64];// Offset=0x4d7c0 Size=0x40
    unsigned int alwaysLoaded[448];// Offset=0x4d800 Size=0x700
    struct GfxImageStream imageStream[3584];// Offset=0x4df00 Size=0x2a000
    unsigned short sortedImages[512];// Offset=0x77f00 Size=0x400
    unsigned int sortedImagesCount;// Offset=0x78300 Size=0x4
    struct DBFile * bestFile;// Offset=0x78304 Size=0x4
    unsigned int materialInuseCount;// Offset=0x78308 Size=0x4
    int abort2;// Offset=0x7830c Size=0x4
    int abortPriority;// Offset=0x78310 Size=0x4
    int checkPriority;// Offset=0x78314 Size=0x4
    int cumulativeTabulation;// Offset=0x78318 Size=0x4
    int glassDistUpdated;// Offset=0x7831c Size=0x4
};

struct GfxViewParms// Size=0x150 (Id=5407)
{
    struct GfxMatrix viewMatrix;// Offset=0x0 Size=0x40
    struct GfxMatrix projectionMatrix;// Offset=0x40 Size=0x40
    struct GfxMatrix viewProjectionMatrix;// Offset=0x80 Size=0x40
    struct GfxMatrix inverseViewProjectionMatrix;// Offset=0xc0 Size=0x40
    struct GfxCamera camera;// Offset=0x100 Size=0x50
};

struct r_globals_t// Size=0x3b0 (Id=5408)
{
    struct GfxViewParms identityViewParms;// Offset=0x0 Size=0x150
    bool forbidDelayLoadImages;// Offset=0x150 Size=0x1
    bool ignorePrecacheErrors;// Offset=0x151 Size=0x1
    unsigned char __align0[2];// Offset=0x152 Size=0x2
    float viewOrg[3];// Offset=0x154 Size=0xc
    float viewDir[3];// Offset=0x160 Size=0xc
    unsigned int frontEndFrameCount;// Offset=0x16c Size=0x4
    int totalImageMemory;// Offset=0x170 Size=0x4
    struct GfxFog fogSettings[5];// Offset=0x174 Size=0x118
    int fogIndex;// Offset=0x28c Size=0x4
    union GfxColor colorMyTeam;// Offset=0x290 Size=0x4
    union GfxColor colorEnemyTeam;// Offset=0x294 Size=0x4
    struct trStatistics_t * stats;// Offset=0x298 Size=0x4
    struct GfxLodParms lodParms;// Offset=0x29c Size=0x14
    struct GfxLodParms correctedLodParms;// Offset=0x2b0 Size=0x14
    bool hasAnyImageOverrides;// Offset=0x2c4 Size=0x1
    bool useSunDirFog;// Offset=0x2c5 Size=0x1
    bool useSunLightOverride;// Offset=0x2c6 Size=0x1
    bool useSunDirOverride;// Offset=0x2c7 Size=0x1
    bool useSunDirLerp;// Offset=0x2c8 Size=0x1
    unsigned char __align1[3];// Offset=0x2c9 Size=0x3
    float sunLightOverride[3];// Offset=0x2cc Size=0xc
    float sunDirOverride[3];// Offset=0x2d8 Size=0xc
    float sunDirOverrideTarget[3];// Offset=0x2e4 Size=0xc
    int sunDirLerpBeginTime;// Offset=0x2f0 Size=0x4
    int sunDirLerpEndTime;// Offset=0x2f4 Size=0x4
    int activeSunPrimaryLightIndex;// Offset=0x2f8 Size=0x4
    struct GfxViewParms * debugViewParms;// Offset=0x2fc Size=0x4
    int endTime;// Offset=0x300 Size=0x4
    bool distortion;// Offset=0x304 Size=0x1
    unsigned char __align2[3];// Offset=0x305 Size=0x3
    int renderCubeMap;// Offset=0x308 Size=0x4
    int colorMap;// Offset=0x30c Size=0x4
    char * codeImageNames[28];// Offset=0x310 Size=0x70
    unsigned int viewInfoCount;// Offset=0x380 Size=0x4
    int sunShadowFull;// Offset=0x384 Size=0x4
    float sunShadowmapScale;// Offset=0x388 Size=0x4
    unsigned int sunShadowSize;// Offset=0x38c Size=0x4
    int qualitySpotShadow;// Offset=0x390 Size=0x4
    float sunSampleSizeNear;// Offset=0x394 Size=0x4
    int skinnedCacheReachedThreshold;// Offset=0x398 Size=0x4
    float waterFloatTime;// Offset=0x39c Size=0x4
    bool thermalView;// Offset=0x3a0 Size=0x1
    unsigned char __align3[3];// Offset=0x3a1 Size=0x3
    struct Material * thermalBody;// Offset=0x3a4 Size=0x4
    float invViewScale;// Offset=0x3a8 Size=0x4
};

struct GfxMatrix// Size=0x40 (Id=5409)
{
    float m[4][4];// Offset=0x0 Size=0x40
};

struct GfxCamera// Size=0x50 (Id=5410)
{
    float origin[3];// Offset=0x0 Size=0xc
    float axis[3][3];// Offset=0xc Size=0x24
    float subWindowMins[2];// Offset=0x30 Size=0x8
    float subWindowMaxs[2];// Offset=0x38 Size=0x8
    float tanHalfFovX;// Offset=0x40 Size=0x4
    float tanHalfFovY;// Offset=0x44 Size=0x4
    float zNear;// Offset=0x48 Size=0x4
    float depthHackNearClip;// Offset=0x4c Size=0x4
};

struct trStatistics_t// Size=0x18 (Id=5411)
{
    int c_indexes;// Offset=0x0 Size=0x4
    int c_fxIndexes;// Offset=0x4 Size=0x4
    int c_viewIndexes;// Offset=0x8 Size=0x4
    int c_shadowIndexes;// Offset=0xc Size=0x4
    int c_batches;// Offset=0x10 Size=0x4
    float dc;// Offset=0x14 Size=0x4
};

struct GfxViewParms// Size=0x150 (Id=5412)
{
    struct GfxMatrix viewMatrix;// Offset=0x0 Size=0x40
    struct GfxMatrix projectionMatrix;// Offset=0x40 Size=0x40
    struct GfxMatrix viewProjectionMatrix;// Offset=0x80 Size=0x40
    struct GfxMatrix inverseViewProjectionMatrix;// Offset=0xc0 Size=0x40
    struct GfxCamera camera;// Offset=0x100 Size=0x50
};

struct GfxFog// Size=0x38 (Id=5413)
{
    int startTime;// Offset=0x0 Size=0x4
    int finishTime;// Offset=0x4 Size=0x4
    union GfxColor color;// Offset=0x8 Size=0x4
    float fogStart;// Offset=0xc Size=0x4
    float density;// Offset=0x10 Size=0x4
    float fogMaxOpacity;// Offset=0x14 Size=0x4
    bool sunFogEnabled;// Offset=0x18 Size=0x1
    unsigned char __align0[3];// Offset=0x19 Size=0x3
    union GfxColor sunColor;// Offset=0x1c Size=0x4
    float sunDir[3];// Offset=0x20 Size=0xc
    float sunBeginFadeAngle;// Offset=0x2c Size=0x4
    float sunEndFadeAngle;// Offset=0x30 Size=0x4
    float sunFogScale;// Offset=0x34 Size=0x4
};

struct XModelStreamMaterial// Size=0x4 (Id=5414)
{
    unsigned short index;// Offset=0x0 Size=0x2
    unsigned short invHighMipRadius;// Offset=0x2 Size=0x2
};

struct MaterialStream// Size=0x1c (Id=5415)
{
    unsigned short imageCount[4];// Offset=0x0 Size=0x8
    unsigned short totalImageCount;// Offset=0x8 Size=0x2
    unsigned short images[4];// Offset=0xa Size=0x8
    unsigned char __align0[2];// Offset=0x12 Size=0x2
    unsigned short * totalImages;// Offset=0x14 Size=0x4
    float invMinTexLength;// Offset=0x18 Size=0x4
};

struct XModelStream// Size=0xc (Id=5416)
{
    unsigned int materialCount;// Offset=0x0 Size=0x4
    struct XModelStreamMaterial * materials;// Offset=0x4 Size=0x4
    union // Size=0x4 (Id=0)
    {
        float invLodOutDist;// Offset=0x8 Size=0x4
        int invLodOutDistAsInt;// Offset=0x8 Size=0x4
    };
};

struct DefaultMaterialPriority// Size=0xc (Id=5417)
{
    float base;// Offset=0x0 Size=0x4
    float low;// Offset=0x4 Size=0x4
    float middle;// Offset=0x8 Size=0x4
};

struct SavedDObjModel// Size=0x2 (Id=5418)
{
    unsigned short boneName;// Offset=0x0 Size=0x2
};

struct GfxLodParms// Size=0x14 (Id=5419)
{
    float origin[3];// Offset=0x0 Size=0xc
    float invFovScale;// Offset=0xc Size=0x4
    float cappedLodScale;// Offset=0x10 Size=0x4
};

struct DObjTrace_s// Size=0x1c (Id=5420)
{
    float fraction;// Offset=0x0 Size=0x4
    int surfaceflags;// Offset=0x4 Size=0x4
    float normal[3];// Offset=0x8 Size=0xc
    unsigned short modelIndex;// Offset=0x14 Size=0x2
    unsigned short partName;// Offset=0x16 Size=0x2
    unsigned short partGroup;// Offset=0x18 Size=0x2
};

struct GfxSubImageStream// Size=0xc (Id=5421)
{
    unsigned int fileOffset;// Offset=0x0 Size=0x4
    unsigned int fileOffsetEnd;// Offset=0x4 Size=0x4
    struct DBFile * file;// Offset=0x8 Size=0x4
};

struct GfxImageStream// Size=0x30 (Id=5422)
{
    struct GfxSubImageStream part[4];// Offset=0x0 Size=0x30
};

struct SimplePlaneIntersection// Size=0x18 (Id=5423)
{
    float xyz[3];// Offset=0x0 Size=0xc
    int planeIndex[3];// Offset=0xc Size=0xc
};

struct adjacencyWinding_t// Size=0x34 (Id=5424)
{
    int numsides;// Offset=0x0 Size=0x4
    int sides[12];// Offset=0x4 Size=0x30
};

struct search_node_s// Size=0x10 (Id=5425)
{
    struct SimplePlaneIntersection * edge;// Offset=0x0 Size=0x4
    int plane;// Offset=0x4 Size=0x4
    int depth;// Offset=0x8 Size=0x4
    struct search_node_s * prevNode;// Offset=0xc Size=0x4
};

struct SimplePlaneIntersection// Size=0x18 (Id=5426)
{
    float xyz[3];// Offset=0x0 Size=0xc
    int planeIndex[3];// Offset=0xc Size=0xc
};

struct infoParm_t// Size=0x14 (Id=5427)
{
    char * name;// Offset=0x0 Size=0x4
    int clearSolid;// Offset=0x4 Size=0x4
    int surfaceFlags;// Offset=0x8 Size=0x4
    int contents;// Offset=0xc Size=0x4
    int toolFlags;// Offset=0x10 Size=0x4
};

struct CacheFileName2// Size=0xc (Id=5428)
{
    unsigned int fileIndex;// Offset=0x0 Size=0x4
    union // Size=0x4 (Id=0)
    {
        struct CacheFileNameRaw2 raw;// Offset=0x4 Size=0x4
        struct StreamFileNamePacked packed;// Offset=0x4 Size=0x8
    };
};

struct CacheFileName// Size=0x44 (Id=5429)
{
    unsigned int fileIndex;// Offset=0x0 Size=0x4
    union // Size=0x40 (Id=0)
    {
        struct CacheFileNameRaw raw;// Offset=0x4 Size=0x40
        struct StreamFileNamePacked packed;// Offset=0x4 Size=0x8
    };
};

struct StreamFileName// Size=0xc (Id=5430)
{
    unsigned int fileIndex;// Offset=0x0 Size=0x4
    union StreamFileInfo info;// Offset=0x4 Size=0x8
};

enum PackfileUser
{
    PACKFILE_USER_SOUND=0,
    PACKFILE_USER_IMAGE=1
};

struct DBFile// Size=0x48 (Id=5432)
{
    struct Sys_File handle;// Offset=0x0 Size=0x8
    char name[64];// Offset=0x8 Size=0x40
};

struct reliableMsg// Size=0x2c (Id=5433)
{
    bool active;// Offset=0x0 Size=0x1
    unsigned char sequenceNum;// Offset=0x1 Size=0x1
    unsigned char __align0[2];// Offset=0x2 Size=0x2
    struct msg_t msg;// Offset=0x4 Size=0x28
};

struct reliableClient// Size=0x79c (Id=5434)
{
    struct netadr_t addr;// Offset=0x0 Size=0xc
    struct XNADDR xnaddr;// Offset=0xc Size=0x24
    int lastSendTime;// Offset=0x30 Size=0x4
    int firstSendTime;// Offset=0x34 Size=0x4
    unsigned char nextSequence;// Offset=0x38 Size=0x1
    unsigned char __align0[3];// Offset=0x39 Size=0x3
    int bufferUsed;// Offset=0x3c Size=0x4
    int bytesAckd;// Offset=0x40 Size=0x4
    unsigned char reliableBuf[1000];// Offset=0x44 Size=0x3e8
    struct reliableMsg msgs[20];// Offset=0x42c Size=0x370
};

struct RedBlackTreeNode// Size=0x18 (Id=5435)
{
    unsigned long long key;// Offset=0x0 Size=0x8
    unsigned int color;// Offset=0x8 Size=0x4
    struct RedBlackTreeNode * parent;// Offset=0xc Size=0x4
    struct RedBlackTreeNode * child[2];// Offset=0x10 Size=0x8
};

struct RedBlackTree// Size=0x38 (Id=5436)
{
    struct RedBlackTreeNode null;// Offset=0x0 Size=0x18
    struct RedBlackTreeNode root;// Offset=0x18 Size=0x18
    struct RedBlackTreeNode *  ( * AllocNodeCallback)();// Offset=0x30 Size=0x4
};

enum _unnamed_5437
{
    LEFT=0,
    RIGHT=1
};

enum _unnamed_5438
{
    RED=0,
    BLACK=1
};

struct RedBlackTree// Size=0x38 (Id=5439)
{
    struct RedBlackTreeNode null;// Offset=0x0 Size=0x18
    struct RedBlackTreeNode root;// Offset=0x18 Size=0x18
    struct RedBlackTreeNode *  ( * AllocNodeCallback)();// Offset=0x30 Size=0x4
};

struct RedBlackTreeNode// Size=0x18 (Id=5440)
{
    unsigned long long key;// Offset=0x0 Size=0x8
    unsigned int color;// Offset=0x8 Size=0x4
    struct RedBlackTreeNode * parent;// Offset=0xc Size=0x4
    struct RedBlackTreeNode * child[2];// Offset=0x10 Size=0x8
};

struct RedBlackCacheNode// Size=0x20 (Id=5441)
{
    struct RedBlackTreeNode rbNode;// Offset=0x0 Size=0x18
    unsigned int timeStamp;// Offset=0x18 Size=0x4
};

struct RedBlackCache// Size=0x60 (Id=5442)
{
    struct RedBlackTree rbTree;// Offset=0x0 Size=0x38
    struct RedBlackCacheNode * firstNode;// Offset=0x38 Size=0x4
    unsigned int sizeofNode;// Offset=0x3c Size=0x4
    unsigned int nodeCount;// Offset=0x40 Size=0x4
    unsigned int minTimeToFree;// Offset=0x44 Size=0x4
    unsigned int allocCount;// Offset=0x48 Size=0x4
    unsigned int freeWalk;// Offset=0x4c Size=0x4
    unsigned int timeStamp;// Offset=0x50 Size=0x4
    bool isNewNode;// Offset=0x54 Size=0x1
    unsigned char __align0[3];// Offset=0x55 Size=0x3
    void  ( * FreeCallback)(struct RedBlackCacheNode * );// Offset=0x58 Size=0x4
};

union FloatReadSwap::__l2::<unnamed-type-dat1>// Size=0x4 (Id=5443)
{
    float f;// Offset=0x0 Size=0x4
    int n;// Offset=0x0 Size=0x4
    unsigned char b[4];// Offset=0x0 Size=0x4
};

union FloatWriteSwap::__l2::<unnamed-type-dat1>// Size=0x4 (Id=5444)
{
    float f;// Offset=0x0 Size=0x4
    int n;// Offset=0x0 Size=0x4
    unsigned char b[4];// Offset=0x0 Size=0x4
};

struct cspField_t// Size=0xc (Id=5445)
{
    char * szName;// Offset=0x0 Size=0x4
    int iOffset;// Offset=0x4 Size=0x4
    int iFieldType;// Offset=0x8 Size=0x4
};

struct orientation_t// Size=0x30 (Id=5446)
{
    float origin[3];// Offset=0x0 Size=0xc
    float axis[3][3];// Offset=0xc Size=0x24
};

enum csParseFieldType_t
{
    CSPFT_STRING=0,
    CSPFT_STRING_MAX_STRING_CHARS=1,
    CSPFT_STRING_MAX_QPATH=2,
    CSPFT_STRING_MAX_OSPATH=3,
    CSPFT_INT=4,
    CSPFT_QBOOLEAN=5,
    CSPFT_BOOL=6,
    CSPFT_FLOAT=7,
    CSPFT_MPH_TO_INCHES_PER_SEC=8,
    CSPFT_MILLISECONDS=9,
    CSPFT_FX=10,
    CSPFT_XMODEL=11,
    CSPFT_MATERIAL=12,
    CSPFT_SOUND=13,
    CSPFT_TRACER=14,
    CSPFT_NUM_BASE_FIELD_TYPES=15
};

struct cspField_t// Size=0xc (Id=5448)
{
    char * szName;// Offset=0x0 Size=0x4
    int iOffset;// Offset=0x4 Size=0x4
    int iFieldType;// Offset=0x8 Size=0x4
};

struct va_info_t// Size=0x804 (Id=5449)
{
    char va_string[2][1024];// Offset=0x0 Size=0x800
    int index;// Offset=0x800 Size=0x4
};

enum ParseThreadContext
{
    PARSE_THREAD_MAIN=0,
    PARSE_THREAD_BACKEND=1,
    PARSE_THREAD_SERVER=2,
    PARSE_THREAD_COUNT=3
};

struct parseInfo_t// Size=0x420 (Id=5451)
{
    char token[1024];// Offset=0x0 Size=0x400
    int lines;// Offset=0x400 Size=0x4
    bool ungetToken;// Offset=0x404 Size=0x1
    bool spaceDelimited;// Offset=0x405 Size=0x1
    bool keepStringQuotes;// Offset=0x406 Size=0x1
    bool csv;// Offset=0x407 Size=0x1
    bool negativeNumbers;// Offset=0x408 Size=0x1
    unsigned char __align0[3];// Offset=0x409 Size=0x3
    char * errorPrefix;// Offset=0x40c Size=0x4
    char * warningPrefix;// Offset=0x410 Size=0x4
    int backup_lines;// Offset=0x414 Size=0x4
    char * backup_text;// Offset=0x418 Size=0x4
    char * parseFile;// Offset=0x41c Size=0x4
};

struct ParseThreadInfo// Size=0x460c (Id=5452)
{
    struct parseInfo_t parseInfo[16];// Offset=0x0 Size=0x4200
    int parseInfoNum;// Offset=0x4200 Size=0x4
    char * tokenPos;// Offset=0x4204 Size=0x4
    char * prevTokenPos;// Offset=0x4208 Size=0x4
    char line[1024];// Offset=0x420c Size=0x400
};

struct pooldata_t// Size=0x10 (Id=5453)
{
    void * firstFree;// Offset=0x0 Size=0x4
    int activeCount;// Offset=0x4 Size=0x4
    void * bufferStart;// Offset=0x8 Size=0x4
    int bufferSize;// Offset=0xc Size=0x4
};

struct freenode// Size=0x4 (Id=5454)
{
    struct freenode * next;// Offset=0x0 Size=0x4
};

enum PMem_Source
{
    PMEM_SOURCE_EXTERNAL=0,
    PMEM_SOURCE_DATABASE=1,
    PMEM_SOURCE_MOVIE=2
};

enum _unnamed_5456
{
    PHYS_ALLOC_LOW=0,
    PHYS_ALLOC_HIGH=1,
    PHYS_ALLOC_COUNT=2
};

struct PhysicalMemory// Size=0x21c (Id=5457)
{
    unsigned char * buf;// Offset=0x0 Size=0x4
    struct PhysicalMemoryPrim prim[2];// Offset=0x4 Size=0x218
};

struct SoundMemory// Size=0x2100 (Id=5458)
{
    unsigned char data[8448];// Offset=0x0 Size=0x2100
};

struct PhysicalMemoryAllocation// Size=0x8 (Id=5459)
{
    char * name;// Offset=0x0 Size=0x4
    unsigned int pos;// Offset=0x4 Size=0x4
};

struct PhysicalMemoryPrim// Size=0x10c (Id=5460)
{
    char * allocName;// Offset=0x0 Size=0x4
    unsigned int allocListCount;// Offset=0x4 Size=0x4
    unsigned int pos;// Offset=0x8 Size=0x4
    struct PhysicalMemoryAllocation allocList[32];// Offset=0xc Size=0x100
};

enum MemFileThread
{
    MEM_FILE_THREAD_UNKNOWN=0,
    MEM_FILE_THREAD_MAIN=1,
    MEM_FILE_THREAD_DEBUG_SERVICE=2,
    MEM_FILE_THREAD_SERVER=3,
    MEM_FILE_THREAD_BACKEND=4,
    MEM_FILE_THREAD_DATABASE=5,
    MEM_FILE_THREAD_SNDSTREAMPACKETCALLBACK=6,
    MEM_FILE_THREADNUM=7
};

enum MemFileMode
{
    MEM_FILE_MODE_DEFAULT=0,
    MEM_FILE_MODE_INFLATE=1,
    MEM_FILE_MODE_DEFLATE=2,
    MEM_FILE_MODENUM=3
};

enum _unnamed_5463
{
    CODE_SHIFT_BITS=6,
    CODE_TYPE_MASK=192,
    CODE_LEN_MASK=63
};

enum _unnamed_5464
{
    SAVE_STRING_NULL=0,
    SAVE_STRING_EMPTY=1,
    SAVE_STRING_NEW=2,
    SAVE_STRING_NOT_FOUND=3,
    SAVE_STRING_COUNT=4
};

enum _unnamed_5465
{
    SL_USER_GAME=1,
    SL_USER_TEMP=2,
    SL_USER_XZONE=4,
    SL_USER_XZONE_TEMP=8,
    SL_USER_SAVEGAME=16
};

struct complex4_t// Size=0x20 (Id=5466)
{
    float real[4];// Offset=0x0 Size=0x10
    float imag[4];// Offset=0x10 Size=0x10
};

struct complex_s// Size=0x8 (Id=5467)
{
    float real;// Offset=0x0 Size=0x4
    float imag;// Offset=0x4 Size=0x4
};

enum EvalOperatorType
{
    EVAL_OP_LPAREN=0,
    EVAL_OP_RPAREN=1,
    EVAL_OP_COLON=2,
    EVAL_OP_QUESTION=3,
    EVAL_OP_PLUS=4,
    EVAL_OP_MINUS=5,
    EVAL_OP_UNARY_PLUS=6,
    EVAL_OP_UNARY_MINUS=7,
    EVAL_OP_MULTIPLY=8,
    EVAL_OP_DIVIDE=9,
    EVAL_OP_MODULUS=10,
    EVAL_OP_LSHIFT=11,
    EVAL_OP_RSHIFT=12,
    EVAL_OP_BITWISE_NOT=13,
    EVAL_OP_BITWISE_AND=14,
    EVAL_OP_BITWISE_OR=15,
    EVAL_OP_BITWISE_XOR=16,
    EVAL_OP_LOGICAL_NOT=17,
    EVAL_OP_LOGICAL_AND=18,
    EVAL_OP_LOGICAL_OR=19,
    EVAL_OP_EQUALS=20,
    EVAL_OP_NOT_EQUAL=21,
    EVAL_OP_LESS=22,
    EVAL_OP_LESS_EQUAL=23,
    EVAL_OP_GREATER=24,
    EVAL_OP_GREATER_EQUAL=25,
    EVAL_OP_COUNT=26
};

struct Eval// Size=0x5110 (Id=5469)
{
    enum EvalOperatorType opStack[1024];// Offset=0x0 Size=0x1000
    struct EvalValue valStack[1024];// Offset=0x1000 Size=0x4000
    int opStackPos;// Offset=0x5000 Size=0x4
    int valStackPos;// Offset=0x5004 Size=0x4
    int parenCount;// Offset=0x5008 Size=0x4
    bool pushedOp;// Offset=0x500c Size=0x1
    char error[256];// Offset=0x500d Size=0x100
};

enum EvalValueType
{
    EVAL_VALUE_DOUBLE=0,
    EVAL_VALUE_INT=1,
    EVAL_VALUE_STRING=2,
    EVAL_VALUE_ERROR=3
};

struct EvalValue// Size=0x10 (Id=5471)
{
    union // Size=0x4 (Id=0)
    {
        enum EvalValueType type;// Offset=0x0 Size=0x4
        union <unnamed-type-u>// Size=0x8 (Id=58674)
        {
            float d;// Offset=0x0 Size=0x8
            int i;// Offset=0x0 Size=0x4
            char * s;// Offset=0x0 Size=0x4
        };
    };
    union EvalValue::<unnamed-type-u> u;// Offset=0x8 Size=0x8
};

union EvalValue::<unnamed-type-u>// Size=0x8 (Id=5472)
{
    union // Size=0x8 (Id=0)
    {
        float d;// Offset=0x0 Size=0x8
        int i;// Offset=0x0 Size=0x4
        char * s;// Offset=0x0 Size=0x4
    };
};

union DvarLimits// Size=0x8 (Id=5473)
{
    struct <unnamed-type-enumeration>// Size=0x8 (Id=49509)
    {
        int stringCount;// Offset=0x0 Size=0x4
        char ** strings;// Offset=0x4 Size=0x4
    };
    struct DvarLimits::<unnamed-type-enumeration> enumeration;// Offset=0x0 Size=0x8
    struct <unnamed-type-integer>// Size=0x8 (Id=49513)
    {
        int min;// Offset=0x0 Size=0x4
        int max;// Offset=0x4 Size=0x4
    };
    struct DvarLimits::<unnamed-type-integer> integer;// Offset=0x0 Size=0x8
    struct <unnamed-type-value>// Size=0x8 (Id=49517)
    {
        float min;// Offset=0x0 Size=0x4
        float max;// Offset=0x4 Size=0x4
    };
    struct DvarLimits::<unnamed-type-value> value;// Offset=0x0 Size=0x8
    struct <unnamed-type-vector>// Size=0x8 (Id=49521)
    {
        float min;// Offset=0x0 Size=0x4
        float max;// Offset=0x4 Size=0x4
    };
    struct DvarLimits::<unnamed-type-vector> vector;// Offset=0x0 Size=0x8
};

union DvarValue// Size=0x10 (Id=5474)
{
    union // Size=0x10 (Id=0)
    {
        bool enabled;// Offset=0x0 Size=0x1
        int integer;// Offset=0x0 Size=0x4
        unsigned int unsignedInt;// Offset=0x0 Size=0x4
        float value;// Offset=0x0 Size=0x4
        float vector[4];// Offset=0x0 Size=0x10
        char * string;// Offset=0x0 Size=0x4
        unsigned char color[4];// Offset=0x0 Size=0x4
    };
};

enum DvarSetSource
{
    DVAR_SOURCE_INTERNAL=0,
    DVAR_SOURCE_EXTERNAL=1,
    DVAR_SOURCE_SCRIPT=2
};

enum _unnamed_5476
{
    DVAR_TYPE_BOOL=0,
    DVAR_TYPE_FLOAT=1,
    DVAR_TYPE_FLOAT_2=2,
    DVAR_TYPE_FLOAT_3=3,
    DVAR_TYPE_FLOAT_4=4,
    DVAR_TYPE_INT=5,
    DVAR_TYPE_ENUM=6,
    DVAR_TYPE_STRING=7,
    DVAR_TYPE_COLOR=8,
    DVAR_TYPE_FLOAT_3_COLOR=9,
    DVAR_TYPE_COUNT=10
};

struct std::pair<dvar_t const * *,dvar_t const * *>// Size=0x8 (Id=5477)
{
    void pair<dvar_t const * *,dvar_t const * *>(struct dvar_t &*** ,struct dvar_t &*** );
    void pair<dvar_t const * *,dvar_t const * *>();
    void swap(struct std::pair<dvar_t const * *,dvar_t const * *> & );
    struct dvar_t ** first;// Offset=0x0 Size=0x4
    struct dvar_t ** second;// Offset=0x4 Size=0x4
};

struct std::_Scalar_ptr_iterator_tag// Size=0x1 (Id=5478)
{
};

enum <unnamed-type-sessionTaskEnum>
{
    TASK_FINDINGCONTENT=1,
    TASK_MOUNTINGCONTENT=2,
    TASK_FINDINGSAVEDCONTENT=3,
    NUM_SESSION_TASKS=4
};

struct KnownContentPackData// Size=0x88 (Id=5480)
{
    char contentName[128];// Offset=0x0 Size=0x80
    int contentPack;// Offset=0x80 Size=0x4
    bool available;// Offset=0x84 Size=0x1
    bool enabled;// Offset=0x85 Size=0x1
};

struct ContentPackList// Size=0x44 (Id=5481)
{
    int contentPack;// Offset=0x0 Size=0x4
    char filename[43];// Offset=0x4 Size=0x2b
    char drivename[12];// Offset=0x2f Size=0xc
    unsigned char __align0[1];// Offset=0x3b Size=0x1
    unsigned long licenseMask;// Offset=0x3c Size=0x4
    bool mounted;// Offset=0x40 Size=0x1
};

struct XComboFileTotalHeader// Size=0xb14 (Id=5482)
{
    int fastfileVersion;// Offset=0x0 Size=0x4
    unsigned int fileTimeHigh;// Offset=0x4 Size=0x4
    unsigned int fileTimeLow;// Offset=0x8 Size=0x4
    int version;// Offset=0xc Size=0x4
    int count;// Offset=0x10 Size=0x4
    struct XComboFileHeader header[64];// Offset=0x14 Size=0xb00
};

enum _unnamed_5483
{
    FILE_DOWNLOAD_SUCCESS=0,
    FILE_DOWNLOAD_PENDING=1,
    FILE_DOWNLOAD_FAIL=2
};

struct XComboFileHeader// Size=0x2c (Id=5484)
{
    int offset;// Offset=0x0 Size=0x4
    char name[40];// Offset=0x4 Size=0x28
};

enum StructuredDataTypeCategory
{
    DATA_INT=0,
    DATA_BYTE=1,
    DATA_BOOL=2,
    DATA_STRING=3,
    DATA_ENUM=4,
    DATA_STRUCT=5,
    DATA_INDEXED_ARRAY=6,
    DATA_ENUM_ARRAY=7,
    DATA_FLOAT=8,
    DATA_SHORT=9,
    DATA_COUNT=10
};

struct StructuredDataType// Size=0x8 (Id=5486)
{
    enum StructuredDataTypeCategory type;// Offset=0x0 Size=0x4
    union StructuredDataTypeUnion u;// Offset=0x4 Size=0x4
};

union StructuredDataTypeUnion// Size=0x4 (Id=5487)
{
    unsigned int stringDataLength;// Offset=0x0 Size=0x4
    int enumIndex;// Offset=0x0 Size=0x4
    int structIndex;// Offset=0x0 Size=0x4
    int indexedArrayIndex;// Offset=0x0 Size=0x4
    int enumedArrayIndex;// Offset=0x0 Size=0x4
};

struct StructuredDataEnumedArray// Size=0x10 (Id=5488)
{
    int enumIndex;// Offset=0x0 Size=0x4
    struct StructuredDataType elementType;// Offset=0x4 Size=0x8
    unsigned int elementSize;// Offset=0xc Size=0x4
};

struct StructuredDataEnumEntry// Size=0x8 (Id=5489)
{
    char * string;// Offset=0x0 Size=0x4
    unsigned short index;// Offset=0x4 Size=0x2
};

struct StructuredDataDefSet// Size=0xc (Id=5490)
{
    char * name;// Offset=0x0 Size=0x4
    unsigned int defCount;// Offset=0x4 Size=0x4
    struct StructuredDataDef * defs;// Offset=0x8 Size=0x4
};

struct StructuredDataDef// Size=0x34 (Id=5491)
{
    int version;// Offset=0x0 Size=0x4
    unsigned int formatChecksum;// Offset=0x4 Size=0x4
    int enumCount;// Offset=0x8 Size=0x4
    struct StructuredDataEnum * enums;// Offset=0xc Size=0x4
    int structCount;// Offset=0x10 Size=0x4
    struct StructuredDataStruct * structs;// Offset=0x14 Size=0x4
    int indexedArrayCount;// Offset=0x18 Size=0x4
    struct StructuredDataIndexedArray * indexedArrays;// Offset=0x1c Size=0x4
    int enumedArrayCount;// Offset=0x20 Size=0x4
    struct StructuredDataEnumedArray * enumedArrays;// Offset=0x24 Size=0x4
    struct StructuredDataType rootType;// Offset=0x28 Size=0x8
    unsigned int size;// Offset=0x30 Size=0x4
};

struct StructuredDataStruct// Size=0x10 (Id=5492)
{
    int propertyCount;// Offset=0x0 Size=0x4
    struct StructuredDataStructProperty * properties;// Offset=0x4 Size=0x4
    int size;// Offset=0x8 Size=0x4
    unsigned int bitOffset;// Offset=0xc Size=0x4
};

struct StructuredDataStructProperty// Size=0x10 (Id=5493)
{
    char * name;// Offset=0x0 Size=0x4
    struct StructuredDataType type;// Offset=0x4 Size=0x8
    unsigned int offset;// Offset=0xc Size=0x4
};

struct ScriptStringList// Size=0x8 (Id=5494)
{
    int count;// Offset=0x0 Size=0x4
    char ** strings;// Offset=0x4 Size=0x4
};

struct StructuredDataIndexedArray// Size=0x10 (Id=5495)
{
    int arraySize;// Offset=0x0 Size=0x4
    struct StructuredDataType elementType;// Offset=0x4 Size=0x8
    unsigned int elementSize;// Offset=0xc Size=0x4
};

struct StructuredDataEnum// Size=0xc (Id=5496)
{
    int entryCount;// Offset=0x0 Size=0x4
    int reservedEntryCount;// Offset=0x4 Size=0x4
    struct StructuredDataEnumEntry * entries;// Offset=0x8 Size=0x4
};

struct MenuList// Size=0xc (Id=5497)
{
    char * name;// Offset=0x0 Size=0x4
    int menuCount;// Offset=0x4 Size=0x4
    struct menuDef_t ** menus;// Offset=0x8 Size=0x4
};

struct StructuredDataDef// Size=0x34 (Id=5498)
{
    int version;// Offset=0x0 Size=0x4
    unsigned int formatChecksum;// Offset=0x4 Size=0x4
    int enumCount;// Offset=0x8 Size=0x4
    struct StructuredDataEnum * enums;// Offset=0xc Size=0x4
    int structCount;// Offset=0x10 Size=0x4
    struct StructuredDataStruct * structs;// Offset=0x14 Size=0x4
    int indexedArrayCount;// Offset=0x18 Size=0x4
    struct StructuredDataIndexedArray * indexedArrays;// Offset=0x1c Size=0x4
    int enumedArrayCount;// Offset=0x20 Size=0x4
    struct StructuredDataEnumedArray * enumedArrays;// Offset=0x24 Size=0x4
    struct StructuredDataType rootType;// Offset=0x28 Size=0x8
    unsigned int size;// Offset=0x30 Size=0x4
};

enum LookupState
{
    LOOKUP_IN_PROGRESS=0,
    LOOKUP_FINISHED=1,
    LOOKUP_ERROR=2
};

struct StructuredDataLookup// Size=0x10 (Id=5500)
{
    struct StructuredDataDef * def;// Offset=0x0 Size=0x4
    struct StructuredDataType * type;// Offset=0x4 Size=0x4
    unsigned int offset;// Offset=0x8 Size=0x4
    enum LookupError error;// Offset=0xc Size=0x4
};

enum LookupError
{
    LOOKUP_ERROR_NONE=0,
    LOOKUP_ERROR_WRONG_DATA_TYPE=1,
    LOOKUP_ERROR_INDEX_OUTSIDE_BOUNDS=2,
    LOOKUP_ERROR_INVALID_STRUCT_PROPERTY=3,
    LOOKUP_ERROR_INVALID_ENUM_VALUE=4,
    LOOKUP_ERROR_COUNT=5
};

enum LookupExpectation
{
    LOOKUP_EXPECT_INT=0,
    LOOKUP_EXPECT_STRING=1
};

enum LookupResultDataType
{
    LOOKUP_RESULT_INT=0,
    LOOKUP_RESULT_BOOL=1,
    LOOKUP_RESULT_STRING=2,
    LOOKUP_RESULT_FLOAT=3,
    LOOKUP_RESULT_SHORT=4
};

enum StructuredDataDefIntermediateType
{
    STRUCTUREDDATA_TYPE_INDEXED_ARRAY=0,
    STRUCTUREDDATA_TYPE_ENUMED_ARRAY=1,
    STRUCTUREDDATA_TYPE_STRUCT=2
};

struct StructuredDataLookup// Size=0x10 (Id=5505)
{
    struct StructuredDataDef * def;// Offset=0x0 Size=0x4
    struct StructuredDataType * type;// Offset=0x4 Size=0x4
    unsigned int offset;// Offset=0x8 Size=0x4
    enum LookupError error;// Offset=0xc Size=0x4
};

struct SoundAliasGlobals// Size=0x8 (Id=5506)
{
    unsigned char initialized[3];// Offset=0x0 Size=0x3
    unsigned char __align0[1];// Offset=0x3 Size=0x1
    int randSeed;// Offset=0x4 Size=0x4
};

enum RleCompressResult
{
    RLE_COMPRESS_OK=0,
    RLE_COMPRESS_OUT_OF_OUTPUT_BUFFER=1
};

enum RleUncompressResult
{
    RLE_UNCOMPRESS_OK=0,
    RLE_UNCOMPRESS_INVALID_STREAM=1,
    RLE_UNCOMPRESS_OUT_OF_INPUT_DATA=2,
    RLE_UNCOMPRESS_OUT_OF_OUTPUT_BUFFER=3
};

struct PacketCacheGlobals// Size=0x36054 (Id=5509)
{
    struct PktCacheEntry cacheEntryData[2048];// Offset=0x0 Size=0x14000
    struct PktCacheEntry * cacheEntry[2048];// Offset=0x14000 Size=0x2000
    struct PktCacheEntry semiFreeCacheEntry;// Offset=0x16000 Size=0x28
    struct PktCacheEntry freeCacheEntry;// Offset=0x16028 Size=0x28
    unsigned char * packetCache;// Offset=0x16050 Size=0x4
    char cacheEntryNames[2048][64];// Offset=0x16054 Size=0x20000
};

struct hunkUsed_t// Size=0x8 (Id=5510)
{
    int permanent;// Offset=0x0 Size=0x4
    int temp;// Offset=0x4 Size=0x4
};

struct HunkUser// Size=0x24 (Id=5511)
{
    struct HunkUser * current;// Offset=0x0 Size=0x4
    struct HunkUser * next;// Offset=0x4 Size=0x4
    int maxSize;// Offset=0x8 Size=0x4
    int end;// Offset=0xc Size=0x4
    int pos;// Offset=0x10 Size=0x4
    char * name;// Offset=0x14 Size=0x4
    bool fixed;// Offset=0x18 Size=0x1
    unsigned char __align0[3];// Offset=0x19 Size=0x3
    int type;// Offset=0x1c Size=0x4
    unsigned char buf[1];// Offset=0x20 Size=0x1
};

struct hunkHeader_t// Size=0x10 (Id=5512)
{
    unsigned int magic;// Offset=0x0 Size=0x4
    int size;// Offset=0x4 Size=0x4
    int dummy[2];// Offset=0x8 Size=0x8
};

struct fileData_s// Size=0xc (Id=5513)
{
    void * data;// Offset=0x0 Size=0x4
    struct fileData_s * next;// Offset=0x4 Size=0x4
    unsigned char type;// Offset=0x8 Size=0x1
    char name[1];// Offset=0x9 Size=0x1
};

union FudgeFloat::__l2::<unnamed-type-u>// Size=0x4 (Id=5514)
{
    float f;// Offset=0x0 Size=0x4
    int i;// Offset=0x0 Size=0x4
};

struct itemDef_s// Size=0x1f4 (Id=5515)
{
    struct windowDef_t window;// Offset=0x0 Size=0xb0
    struct rectDef_s textRect[4];// Offset=0xb0 Size=0x50
    int type;// Offset=0x100 Size=0x4
    int dataType;// Offset=0x104 Size=0x4
    int alignment;// Offset=0x108 Size=0x4
    int fontEnum;// Offset=0x10c Size=0x4
    int textAlignMode;// Offset=0x110 Size=0x4
    float textalignx;// Offset=0x114 Size=0x4
    float textaligny;// Offset=0x118 Size=0x4
    float textscale;// Offset=0x11c Size=0x4
    int textStyle;// Offset=0x120 Size=0x4
    int gameMsgWindowIndex;// Offset=0x124 Size=0x4
    int gameMsgWindowMode;// Offset=0x128 Size=0x4
    char * text;// Offset=0x12c Size=0x4
    int itemFlags;// Offset=0x130 Size=0x4
    struct menuDef_t * parent;// Offset=0x134 Size=0x4
    struct MenuEventHandlerSet * mouseEnterText;// Offset=0x138 Size=0x4
    struct MenuEventHandlerSet * mouseExitText;// Offset=0x13c Size=0x4
    struct MenuEventHandlerSet * mouseEnter;// Offset=0x140 Size=0x4
    struct MenuEventHandlerSet * mouseExit;// Offset=0x144 Size=0x4
    struct MenuEventHandlerSet * action;// Offset=0x148 Size=0x4
    struct MenuEventHandlerSet * accept;// Offset=0x14c Size=0x4
    struct MenuEventHandlerSet * onFocus;// Offset=0x150 Size=0x4
    struct MenuEventHandlerSet * leaveFocus;// Offset=0x154 Size=0x4
    char * dvar;// Offset=0x158 Size=0x4
    char * dvarTest;// Offset=0x15c Size=0x4
    struct ItemKeyHandler * onKey;// Offset=0x160 Size=0x4
    char * enableDvar;// Offset=0x164 Size=0x4
    int dvarFlags;// Offset=0x168 Size=0x4
    struct snd_alias_list_t * focusSound;// Offset=0x16c Size=0x4
    float special;// Offset=0x170 Size=0x4
    int cursorPos[4];// Offset=0x174 Size=0x10
    union itemDefData_t typeData;// Offset=0x184 Size=0x4
    int imageTrack;// Offset=0x188 Size=0x4
    struct Statement_s * visibleExp;// Offset=0x18c Size=0x4
    struct Statement_s * textExp;// Offset=0x190 Size=0x4
    struct Statement_s * materialExp;// Offset=0x194 Size=0x4
    struct Statement_s * disabledExp;// Offset=0x198 Size=0x4
    struct Statement_s * rectXExp;// Offset=0x19c Size=0x4
    struct Statement_s * rectYExp;// Offset=0x1a0 Size=0x4
    struct Statement_s * rectWExp;// Offset=0x1a4 Size=0x4
    struct Statement_s * rectHExp;// Offset=0x1a8 Size=0x4
    struct Statement_s * forecolorRExp;// Offset=0x1ac Size=0x4
    struct Statement_s * forecolorGExp;// Offset=0x1b0 Size=0x4
    struct Statement_s * forecolorBExp;// Offset=0x1b4 Size=0x4
    struct Statement_s * forecolorAExp;// Offset=0x1b8 Size=0x4
    struct Statement_s * glowColorRExp;// Offset=0x1bc Size=0x4
    struct Statement_s * glowColorGExp;// Offset=0x1c0 Size=0x4
    struct Statement_s * glowColorBExp;// Offset=0x1c4 Size=0x4
    struct Statement_s * glowColorAExp;// Offset=0x1c8 Size=0x4
    float glowColor[4];// Offset=0x1cc Size=0x10
    bool decayActive;// Offset=0x1dc Size=0x1
    unsigned char __align0[3];// Offset=0x1dd Size=0x3
    int fxBirthTime;// Offset=0x1e0 Size=0x4
    int fxLetterTime;// Offset=0x1e4 Size=0x4
    int fxDecayStartTime;// Offset=0x1e8 Size=0x4
    int fxDecayDuration;// Offset=0x1ec Size=0x4
    int lastSoundPlayedTime;// Offset=0x1f0 Size=0x4
};

enum transitionType
{
    TRANS_INACTIVE=0,
    TRANS_LERP=1
};

enum triggerType
{
    TRIGGER_NONE=0,
    TRIGGER_CLOSEMENU=1
};

struct UiContext// Size=0x167c (Id=5518)
{
    union // Size=0x10 (Id=0)
    {
        int localClientNum;// Offset=0x0 Size=0x4
        float bias;// Offset=0x4 Size=0x4
        int realTime;// Offset=0x8 Size=0x4
        int frameTime;// Offset=0xc Size=0x4
        struct <unnamed-type-cursor>// Size=0x8 (Id=51119)
        {
            float x;// Offset=0x0 Size=0x4
            float y;// Offset=0x4 Size=0x4
        };
        unsigned char __align0[8];// Offset=0x8 Size=0x8
    };
    struct UiContext::<unnamed-type-cursor> cursor;// Offset=0x10 Size=0x8
    int isCursorVisible;// Offset=0x18 Size=0x4
    int paintFull;// Offset=0x1c Size=0x4
    int screenWidth;// Offset=0x20 Size=0x4
    int screenHeight;// Offset=0x24 Size=0x4
    float screenAspect;// Offset=0x28 Size=0x4
    float FPS;// Offset=0x2c Size=0x4
    float blurRadiusOut;// Offset=0x30 Size=0x4
    struct menuDef_t * Menus[640];// Offset=0x34 Size=0xa00
    int menuCount;// Offset=0xa34 Size=0x4
    struct menuDef_t * menuStack[16];// Offset=0xa38 Size=0x40
    int openMenuCount;// Offset=0xa78 Size=0x4
    struct UILocalVarContext localVars;// Offset=0xa7c Size=0xc00
};

struct UILocalVar// Size=0xc (Id=5519)
{
    union // Size=0x8 (Id=0)
    {
        enum UILocalVarType type;// Offset=0x0 Size=0x4
        char * name;// Offset=0x4 Size=0x4
        union <unnamed-type-u>// Size=0x4 (Id=51287)
        {
            int integer;// Offset=0x0 Size=0x4
            float value;// Offset=0x0 Size=0x4
            char * string;// Offset=0x0 Size=0x4
        };
        unsigned char __align0[4];// Offset=0x4 Size=0x4
    };
    union UILocalVar::<unnamed-type-u> u;// Offset=0x8 Size=0x4
};

struct windowDef_t// Size=0xb0 (Id=5520)
{
    char * name;// Offset=0x0 Size=0x4
    struct rectDef_s rect;// Offset=0x4 Size=0x14
    struct rectDef_s rectClient;// Offset=0x18 Size=0x14
    char * group;// Offset=0x2c Size=0x4
    int style;// Offset=0x30 Size=0x4
    int border;// Offset=0x34 Size=0x4
    int ownerDraw;// Offset=0x38 Size=0x4
    int ownerDrawFlags;// Offset=0x3c Size=0x4
    float borderSize;// Offset=0x40 Size=0x4
    int staticFlags;// Offset=0x44 Size=0x4
    int dynamicFlags[4];// Offset=0x48 Size=0x10
    int nextTime;// Offset=0x58 Size=0x4
    float foreColor[4];// Offset=0x5c Size=0x10
    float backColor[4];// Offset=0x6c Size=0x10
    float borderColor[4];// Offset=0x7c Size=0x10
    float outlineColor[4];// Offset=0x8c Size=0x10
    float disableColor[4];// Offset=0x9c Size=0x10
    struct Material * background;// Offset=0xac Size=0x4
};

enum uiErrorAction_t
{
    UI_ERROR_ACTION_NONE=0,
    UI_ERROR_ACTION_SHOWMARKETPLACE=1
};

enum ItemFocusReason
{
    FOCUS_OTHER=0,
    FOCUS_KEYBOARD=1
};

struct commandDef_t// Size=0x8 (Id=5523)
{
    char * name;// Offset=0x0 Size=0x4
    void  ( * handler)(struct UiContext * ,struct itemDef_s * ,char ** );// Offset=0x4 Size=0x4
};

enum EventType
{
    EVENT_UNCONDITIONAL=0,
    EVENT_IF=1,
    EVENT_ELSE=2,
    EVENT_SET_LOCAL_VAR_BOOL=3,
    EVENT_SET_LOCAL_VAR_INT=4,
    EVENT_SET_LOCAL_VAR_FLOAT=5,
    EVENT_SET_LOCAL_VAR_STRING=6,
    EVENT_COUNT=7
};

enum msgwnd_mode_t
{
    MWM_BOTTOMUP_ALIGN_TOP=0,
    MWM_BOTTOMUP_ALIGN_BOTTOM=1,
    MWM_TOPDOWN_ALIGN_TOP=2,
    MWM_TOPDOWN_ALIGN_BOTTOM=3
};

struct sharedUiInfo_t// Size=0x6b070 (Id=5526)
{
    struct CachedAssets_t assets;// Offset=0x0 Size=0x54
    int playerCount;// Offset=0x54 Size=0x4
    char playerNames[18][32];// Offset=0x58 Size=0x240
    char teamNames[18][32];// Offset=0x298 Size=0x240
    int playerClientNums[18];// Offset=0x4d8 Size=0x48
    int updateGameTypeList;// Offset=0x520 Size=0x4
    int numGameTypes;// Offset=0x524 Size=0x4
    struct gameTypeInfo gameTypes[32];// Offset=0x528 Size=0x580
    int numCustomGameTypes;// Offset=0xaa8 Size=0x4
    struct gameTypeInfo customGameTypes[32];// Offset=0xaac Size=0x580
    char customGameTypeCancelState[2048];// Offset=0x102c Size=0x800
    int numJoinGameTypes;// Offset=0x182c Size=0x4
    struct gameTypeInfo joinGameTypes[32];// Offset=0x1830 Size=0x580
    int updateArenas;// Offset=0x1db0 Size=0x4
    int mapCount;// Offset=0x1db4 Size=0x4
    struct mapInfo mapList[128];// Offset=0x1db8 Size=0x53a00
    int mapIndexSorted[128];// Offset=0x557b8 Size=0x200
    bool mapsAreSorted;// Offset=0x559b8 Size=0x1
    unsigned char __align0[7];// Offset=0x559b9 Size=0x7
    unsigned long long partyMemberXuid;// Offset=0x559c0 Size=0x8
    struct Material * talkingIcons[2];// Offset=0x559c8 Size=0x8
    struct serverStatus_s serverStatus;// Offset=0x559d0 Size=0x14118
    char serverStatusAddress[64];// Offset=0x69ae8 Size=0x40
    struct serverStatusInfo_t serverStatusInfo;// Offset=0x69b28 Size=0xc7c
    int nextServerStatusRefresh;// Offset=0x6a7a4 Size=0x4
    struct pendingServerStatus_t pendingServerStatus;// Offset=0x6a7a8 Size=0x8c4
};

struct pinglist_t// Size=0x44 (Id=5527)
{
    char adrstr[64];// Offset=0x0 Size=0x40
    int start;// Offset=0x40 Size=0x4
};

struct pendingServer_t// Size=0x8c (Id=5528)
{
    char adrstr[64];// Offset=0x0 Size=0x40
    char name[64];// Offset=0x40 Size=0x40
    int startTime;// Offset=0x80 Size=0x4
    int serverNum;// Offset=0x84 Size=0x4
    int valid;// Offset=0x88 Size=0x4
};

struct serverStatus_s// Size=0x14118 (Id=5529)
{
    struct pinglist_t pingList[16];// Offset=0x0 Size=0x440
    int numqueriedservers;// Offset=0x440 Size=0x4
    int currentping;// Offset=0x444 Size=0x4
    int nextpingtime;// Offset=0x448 Size=0x4
    int maxservers;// Offset=0x44c Size=0x4
    int refreshtime;// Offset=0x450 Size=0x4
    int numServers;// Offset=0x454 Size=0x4
    int sortKey;// Offset=0x458 Size=0x4
    int sortDir;// Offset=0x45c Size=0x4
    int lastCount;// Offset=0x460 Size=0x4
    int refreshActive;// Offset=0x464 Size=0x4
    int currentServer;// Offset=0x468 Size=0x4
    int displayServers[20000];// Offset=0x46c Size=0x13880
    int numDisplayServers;// Offset=0x13cec Size=0x4
    int serverCount;// Offset=0x13cf0 Size=0x4
    int numPlayersOnServers;// Offset=0x13cf4 Size=0x4
    int nextDisplayRefresh;// Offset=0x13cf8 Size=0x4
    int nextSortTime;// Offset=0x13cfc Size=0x4
    int motdLen;// Offset=0x13d00 Size=0x4
    int motdWidth;// Offset=0x13d04 Size=0x4
    int motdPaintX;// Offset=0x13d08 Size=0x4
    int motdPaintX2;// Offset=0x13d0c Size=0x4
    int motdOffset;// Offset=0x13d10 Size=0x4
    int motdTime;// Offset=0x13d14 Size=0x4
    char motd[1024];// Offset=0x13d18 Size=0x400
};

struct pendingServerStatus_t// Size=0x8c4 (Id=5530)
{
    int num;// Offset=0x0 Size=0x4
    struct pendingServer_t server[16];// Offset=0x4 Size=0x8c0
};

struct CachedAssets_t// Size=0x54 (Id=5531)
{
    struct Material * scrollBarArrowUp;// Offset=0x0 Size=0x4
    struct Material * scrollBarArrowDown;// Offset=0x4 Size=0x4
    struct Material * scrollBarArrowLeft;// Offset=0x8 Size=0x4
    struct Material * scrollBarArrowRight;// Offset=0xc Size=0x4
    struct Material * scrollBar;// Offset=0x10 Size=0x4
    struct Material * scrollBarThumb;// Offset=0x14 Size=0x4
    struct Material * sliderBar;// Offset=0x18 Size=0x4
    struct Material * sliderThumb;// Offset=0x1c Size=0x4
    struct Material * whiteMaterial;// Offset=0x20 Size=0x4
    struct Material * cursor;// Offset=0x24 Size=0x4
    struct Material * textDecodeCharacters;// Offset=0x28 Size=0x4
    struct Material * textDecodeCharactersGlow;// Offset=0x2c Size=0x4
    struct Font_s * bigFont;// Offset=0x30 Size=0x4
    struct Font_s * smallFont;// Offset=0x34 Size=0x4
    struct Font_s * consoleFont;// Offset=0x38 Size=0x4
    struct Font_s * boldFont;// Offset=0x3c Size=0x4
    struct Font_s * textFont;// Offset=0x40 Size=0x4
    struct Font_s * extraBigFont;// Offset=0x44 Size=0x4
    struct Font_s * objectiveFont;// Offset=0x48 Size=0x4
    struct Font_s * hudBigFont;// Offset=0x4c Size=0x4
    struct Font_s * hudSmallFont;// Offset=0x50 Size=0x4
};

struct serverStatusInfo_t// Size=0xc7c (Id=5532)
{
    char address[64];// Offset=0x0 Size=0x40
    char * lines[128][4];// Offset=0x40 Size=0x800
    char text[1024];// Offset=0x840 Size=0x400
    char pings[54];// Offset=0xc40 Size=0x36
    unsigned char __align0[2];// Offset=0xc76 Size=0x2
    int numLines;// Offset=0xc78 Size=0x4
};

struct gameTypeInfo// Size=0x2c (Id=5533)
{
    char gameType[12];// Offset=0x0 Size=0xc
    char gameTypeName[32];// Offset=0xc Size=0x20
};

struct mapInfo// Size=0xa74 (Id=5534)
{
    char mapName[32];// Offset=0x0 Size=0x20
    char mapLoadName[16];// Offset=0x20 Size=0x10
    char mapDescription[32];// Offset=0x30 Size=0x20
    char mapLoadImage[32];// Offset=0x50 Size=0x20
    char mapCustomKey[32][16];// Offset=0x70 Size=0x200
    char mapCustomValue[32][64];// Offset=0x270 Size=0x800
    int mapCustomCount;// Offset=0xa70 Size=0x4
};

class std::_Revranit<char *,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> > : public std::iterator<std::random_access_iterator_tag,char,int,char *,char &>// Size=0x4 (Id=5535)
{
    public void _Revranit<char *,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> >(char * );
    public void _Revranit<char *,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> >();
    public char * base();
    public char & operator*();
    public char * operator->();
    public class std::_Revranit<char *,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> > operator++(int );
    public class std::_Revranit<char *,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> > & operator++();
    public class std::_Revranit<char *,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> > operator--(int );
    public class std::_Revranit<char *,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> > & operator--();
    public class std::_Revranit<char *,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> > & operator+=(int );
    public class std::_Revranit<char *,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> > operator+(int );
    public class std::_Revranit<char *,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> > & operator-=(int );
    public class std::_Revranit<char *,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> > operator-(int );
    public char & operator[](int );
    protected char * current;// Offset=0x0 Size=0x4
};

class std::_Revranit<char *,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> > : public std::iterator<std::random_access_iterator_tag,char,int,char *,char &>// Size=0x4 (Id=5536)
{
    public void _Revranit<char *,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> >(char * );
    public void _Revranit<char *,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> >();
    public char * base();
    public char & operator*();
    public char * operator->();
    public class std::_Revranit<char *,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> > operator++(int );
    public class std::_Revranit<char *,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> > & operator++();
    public class std::_Revranit<char *,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> > operator--(int );
    public class std::_Revranit<char *,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> > & operator--();
    public class std::_Revranit<char *,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> > & operator+=(int );
    public class std::_Revranit<char *,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> > operator+(int );
    public class std::_Revranit<char *,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> > & operator-=(int );
    public class std::_Revranit<char *,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> > operator-(int );
    public char & operator[](int );
    protected char * current;// Offset=0x0 Size=0x4
};

struct std::iterator<std::random_access_iterator_tag,char,int,char *,char &> : public std::_Iterator_base_universal// Size=0x1 (Id=5537)
{
};

class std::reverse_iterator<char *> : public std::_Revranit<char *,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> >// Size=0x4 (Id=5538)
{
    public void reverse_iterator<char *>(class std::_Revranit<char *,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> > );
    public void reverse_iterator<char *>(char * );
    public void reverse_iterator<char *>();
    public class std::reverse_iterator<char *> _Checked_iterator_base();
    public void _Checked_iterator_assign_from_base(class std::reverse_iterator<char *> );
    public class std::reverse_iterator<char *> operator++(int );
    public class std::reverse_iterator<char *> & operator++();
    public class std::reverse_iterator<char *> operator--(int );
    public class std::reverse_iterator<char *> & operator--();
    public class std::reverse_iterator<char *> & operator+=(int );
    public class std::reverse_iterator<char *> operator+(int );
    public class std::reverse_iterator<char *> & operator-=(int );
    public class std::reverse_iterator<char *> operator-(int );
};

class std::reverse_iterator<char *> : public std::_Revranit<char *,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> >// Size=0x4 (Id=5539)
{
    public void reverse_iterator<char *>(class std::_Revranit<char *,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> > );
    public void reverse_iterator<char *>(char * );
    public void reverse_iterator<char *>();
    public class std::reverse_iterator<char *> _Checked_iterator_base();
    public void _Checked_iterator_assign_from_base(class std::reverse_iterator<char *> );
    public class std::reverse_iterator<char *> operator++(int );
    public class std::reverse_iterator<char *> & operator++();
    public class std::reverse_iterator<char *> operator--(int );
    public class std::reverse_iterator<char *> & operator--();
    public class std::reverse_iterator<char *> & operator+=(int );
    public class std::reverse_iterator<char *> operator+(int );
    public class std::reverse_iterator<char *> & operator-=(int );
    public class std::reverse_iterator<char *> operator-(int );
};

struct std::_Different_checked_iterator_base_type_tag// Size=0x1 (Id=5540)
{
};

struct commandDef_t// Size=0x8 (Id=5541)
{
    char * name;// Offset=0x0 Size=0x4
    void  ( * handler)(struct UiContext * ,struct itemDef_s * ,char ** );// Offset=0x4 Size=0x4
};

enum parseBlockTypes
{
    PARSE_UNKNOWN=0,
    PARSE_GAMETYPE=1,
    PARSE_PLAYLIST=2
};

enum PlaylistLockState
{
    PLS_UNLOCKED=0,
    PLS_FETCHING=1,
    PLS_XP=2,
    PLS_MAXPARTY=3,
    PLS_MINPARTY=4,
    PLS_DLC=5,
    PLS_COUNT=6
};

enum _unnamed_5544
{
    PLAYLIST_RANKED=1,
    PLAYLIST_NOJIP=2,
    PLAYLIST_PARTYTEAMS=4,
    PLAYLIST_NOLOOPING=8
};

struct playlistInfo// Size=0x2640 (Id=5545)
{
    char name[64];// Offset=0x0 Size=0x40
    char description[256];// Offset=0x40 Size=0x100
    char rules[1024];// Offset=0x140 Size=0x400
    char lootgroup[16];// Offset=0x540 Size=0x10
    struct playlistEntry entries[210];// Offset=0x550 Size=0x20d0
    int numEntries;// Offset=0x2620 Size=0x4
    int unlockXp;// Offset=0x2624 Size=0x4
    int maxPartySize;// Offset=0x2628 Size=0x4
    int minPartySize;// Offset=0x262c Size=0x4
    int numRounds;// Offset=0x2630 Size=0x4
    unsigned int requiredDLCMask;// Offset=0x2634 Size=0x4
    int flags;// Offset=0x2638 Size=0x4
    bool ranked;// Offset=0x263c Size=0x1
};

struct playlistGametype// Size=0x462 (Id=5546)
{
    char scriptName[16];// Offset=0x0 Size=0x10
    char internalName[16];// Offset=0x10 Size=0x10
    char localizedName[64];// Offset=0x20 Size=0x40
    char rules[1024];// Offset=0x60 Size=0x400
    bool teamBased;// Offset=0x460 Size=0x1
    bool hardcore;// Offset=0x461 Size=0x1
};

struct playlistEntry// Size=0x28 (Id=5547)
{
    char mapname[16];// Offset=0x0 Size=0x10
    char gametype[16];// Offset=0x10 Size=0x10
    int fullWeight;// Offset=0x20 Size=0x4
    int remainingWeight;// Offset=0x24 Size=0x4
};

struct uiClientState_s// Size=0x808 (Id=5548)
{
    enum connstate_t connState;// Offset=0x0 Size=0x4
    int connectPacketCount;// Offset=0x4 Size=0x4
    char servername[1024];// Offset=0x8 Size=0x400
    char messageString[1024];// Offset=0x408 Size=0x400
};

struct PartyData// Size=0x1fb0 (Id=5549)
{
    struct SessionData * session;// Offset=0x0 Size=0x4
    struct SessionData * presenceSession;// Offset=0x4 Size=0x4
    struct SessionData * searchSession;// Offset=0x8 Size=0x4
    struct MigrateData migrateData;// Offset=0xc Size=0x28
    struct QoSData qosData;// Offset=0x34 Size=0x4
    struct PartyInfo * partyList;// Offset=0x38 Size=0x4
    int partyListSize;// Offset=0x3c Size=0x4
    struct PartyMember partyMembers[18];// Offset=0x40 Size=0xd80
    struct SubpartyInfo subparties[18];// Offset=0xdc0 Size=0x630
    int subpartyCount;// Offset=0x13f0 Size=0x4
    struct PartyHostDetails currentHost;// Offset=0x13f4 Size=0x68
    struct PartyHostDetails potentialHost;// Offset=0x145c Size=0x68
    struct PartyHostData hostData;// Offset=0x14c4 Size=0x18
    int areWeHost;// Offset=0x14dc Size=0x4
    int joiningAnotherParty;// Offset=0x14e0 Size=0x4
    int searchingForGames;// Offset=0x14e4 Size=0x4
    int inParty;// Offset=0x14e8 Size=0x4
    int party_systemActive;// Offset=0x14ec Size=0x4
    bool veto;// Offset=0x14f0 Size=0x1
    unsigned char __align0[3];// Offset=0x14f1 Size=0x3
    int vetoTime;// Offset=0x14f4 Size=0x4
    int headsetPresent;// Offset=0x14f8 Size=0x4
    int headsetTime;// Offset=0x14fc Size=0x4
    int clanAbbrevTime;// Offset=0x1500 Size=0x4
    int rankTime;// Offset=0x1504 Size=0x4
    int playerCardTime;// Offset=0x1508 Size=0x4
    int uploadSentTime;// Offset=0x150c Size=0x4
    int voiceBitsTime;// Offset=0x1510 Size=0x4
    int idTime;// Offset=0x1514 Size=0x4
    int availableMapPackFlagsTime;// Offset=0x1518 Size=0x4
    int searchStartTime;// Offset=0x151c Size=0x4
    int searchEndTime;// Offset=0x1520 Size=0x4
    int joinAttemptForUI;// Offset=0x1524 Size=0x4
    int lastMergeTime;// Offset=0x1528 Size=0x4
    int mergeAttemptStartTime;// Offset=0x152c Size=0x4
    int originalPartiesInList;// Offset=0x1530 Size=0x4
    int partyId;// Offset=0x1534 Size=0x4
    int nextSessionSearchTime;// Offset=0x1538 Size=0x4
    int mapPackFlags;// Offset=0x153c Size=0x4
    int lastPartyStateTime;// Offset=0x1540 Size=0x4
    int gameStartTime;// Offset=0x1544 Size=0x4
    int interEndTime;// Offset=0x1548 Size=0x4
    int hostTimeouts;// Offset=0x154c Size=0x4
    unsigned char lobbyFlags;// Offset=0x1550 Size=0x1
    unsigned char __align1[3];// Offset=0x1551 Size=0x3
    struct PartyData * partyToNotify;// Offset=0x1554 Size=0x4
    bool registeredWithArbitration;// Offset=0x1558 Size=0x1
    bool rejoining;// Offset=0x1559 Size=0x1
    unsigned char __align2[2];// Offset=0x155a Size=0x2
    int partyStatePacketCount;// Offset=0x155c Size=0x4
    int partyStateLastMemberIndex;// Offset=0x1560 Size=0x4
    int unfinishedPartServerTimes[2];// Offset=0x1564 Size=0x8
    struct msg_t partyStatePartMsgs[2];// Offset=0x156c Size=0x50
    unsigned char partyStatePartMsgBufs[2][1264];// Offset=0x15bc Size=0x9e0
    unsigned char lastEntries[8];// Offset=0x1f9c Size=0x8
    int currentEntry;// Offset=0x1fa4 Size=0x4
    unsigned char axisWins;// Offset=0x1fa8 Size=0x1
    unsigned char alliesWins;// Offset=0x1fa9 Size=0x1
};

struct ConversionArguments// Size=0x28 (Id=5550)
{
    int argCount;// Offset=0x0 Size=0x4
    char * args[9];// Offset=0x4 Size=0x24
};

enum _unnamed_5551
{
    DB_ZONE_COMMON=1,
    DB_ZONE_UI=2,
    DB_ZONE_GAME=4,
    DB_ZONE_LOAD=8,
    DB_ZONE_DEV=16
};

enum profileWriteState_t
{
    PROFILE_NO_WRITE=0,
    PROFILE_WRITE_IF_CHANGED=1
};

struct uiInfo_s// Size=0x16f0 (Id=5553)
{
    struct UiContext uiDC;// Offset=0x0 Size=0x167c
    int myTeamCount;// Offset=0x167c Size=0x4
    int playerRefresh;// Offset=0x1680 Size=0x4
    int playerIndex;// Offset=0x1684 Size=0x4
    int timeIndex;// Offset=0x1688 Size=0x4
    int previousTimes[4];// Offset=0x168c Size=0x10
    enum uiMenuCommand_t currentMenuType;// Offset=0x169c Size=0x4
    bool allowScriptMenuResponse;// Offset=0x16a0 Size=0x1
    unsigned char __align0[3];// Offset=0x16a1 Size=0x3
    unsigned int mailUpdateTime;// Offset=0x16a4 Size=0x4
    unsigned char mailIndices[64];// Offset=0x16a8 Size=0x40
    int mailCount;// Offset=0x16e8 Size=0x4
    int selectedMail;// Offset=0x16ec Size=0x4
};

struct ValidOperation// Size=0x10 (Id=5554)
{
    enum operationEnum op;// Offset=0x0 Size=0x4
    enum expDataType leftSide;// Offset=0x4 Size=0x4
    enum expDataType rightSide;// Offset=0x8 Size=0x4
    void  ( * function)(struct Operand * ,struct Operand * ,struct Operand * );// Offset=0xc Size=0x4
};

struct Operand// Size=0x8 (Id=5555)
{
    enum expDataType dataType;// Offset=0x0 Size=0x4
    union operandInternalDataUnion internals;// Offset=0x4 Size=0x4
};

struct Statement_s// Size=0x18 (Id=5556)
{
    int numEntries;// Offset=0x0 Size=0x4
    struct expressionEntry * entries;// Offset=0x4 Size=0x4
    struct ExpressionSupportingData * supportingData;// Offset=0x8 Size=0x4
    int lastExecuteTime;// Offset=0xc Size=0x4
    struct Operand lastResult;// Offset=0x10 Size=0x8
};

enum operationEnum
{
    OP_NOOP=0,
    OP_RIGHTPAREN=1,
    OP_MULTIPLY=2,
    OP_DIVIDE=3,
    OP_MODULUS=4,
    OP_ADD=5,
    OP_SUBTRACT=6,
    OP_NOT=7,
    OP_LESSTHAN=8,
    OP_LESSTHANEQUALTO=9,
    OP_GREATERTHAN=10,
    OP_GREATERTHANEQUALTO=11,
    OP_EQUALS=12,
    OP_NOTEQUAL=13,
    OP_AND=14,
    OP_OR=15,
    OP_LEFTPAREN=16,
    OP_COMMA=17,
    OP_BITWISEAND=18,
    OP_BITWISEOR=19,
    OP_BITWISENOT=20,
    OP_BITSHIFTLEFT=21,
    OP_BITSHIFTRIGHT=22,
    OP_STATICDVARINT=23,
    OP_FIRSTFUNCTIONCALL=23,
    OP_STATICDVARBOOL=24,
    OP_STATICDVARFLOAT=25,
    OP_STATICDVARSTRING=26,
    OP_TOINT=27,
    OP_TOSTRING=28,
    OP_TOFLOAT=29,
    LAST_COMMONLY_CALLED_FUNCTION=29,
    OP_SIN=30,
    OP_COS=31,
    OP_MIN=32,
    OP_MAX=33,
    OP_MILLISECONDS=34,
    OP_DVARINT=35,
    OP_DVARBOOL=36,
    OP_DVARFLOAT=37,
    OP_DVARSTRING=38,
    OP_STAT=39,
    OP_UIACTIVE=40,
    OP_FLASHBANGED=41,
    OP_USINGVEHICLE=42,
    OP_MISSILECAM=43,
    OP_SCOPED=44,
    OP_SCOPEDTHERMAL=45,
    OP_SCOREBOARDVISIBLE=46,
    OP_INKILLCAM=47,
    OP_INKILLCAM_NPC=48,
    OP_PLAYERFIELD=49,
    OP_GET_PLAYER_PERK=50,
    OP_SELECTINGLOCATION=51,
    OP_SELECTINGDIRECTION=52,
    OP_TEAMFIELD=53,
    OP_OTHERTEAMFIELD=54,
    OP_MARINESFIELD=55,
    OP_OPFORFIELD=56,
    OP_MENUISOPEN=57,
    OP_WRITINGDATA=58,
    OP_INLOBBY=59,
    OP_INPRIVATEPARTY=60,
    OP_PRIVATEPARTYHOST=61,
    OP_PRIVATEPARTYHOSTINLOBBY=62,
    OP_ALONEINPARTY=63,
    OP_ADSJAVELIN=64,
    OP_WEAPLOCKBLINK=65,
    OP_WEAPATTACKTOP=66,
    OP_WEAPATTACKDIRECT=67,
    OP_WEAPLOCKING=68,
    OP_WEAPLOCKED=69,
    OP_WEAPLOCKTOOCLOSE=70,
    OP_WEAPLOCKSCREENPOSX=71,
    OP_WEAPLOCKSCREENPOSY=72,
    OP_SECONDSASTIME=73,
    OP_TABLELOOKUP=74,
    OP_TABLELOOKUPBYROW=75,
    OP_TABLEGETROWNUM=76,
    OP_LOCALIZESTRING=77,
    OP_LOCALVARINT=78,
    OP_LOCALVARBOOL=79,
    OP_LOCALVARFLOAT=80,
    OP_LOCALVARSTRING=81,
    OP_TIMELEFT=82,
    OP_SECONDSASCOUNTDOWN=83,
    OP_GAMEMSGWNDACTIVE=84,
    OP_GAMETYPENAME=85,
    OP_GAMETYPE=86,
    OP_GAMETYPEDESCRIPTION=87,
    OP_SCORE=88,
    OP_FRIENDSONLINE=89,
    OP_FOLLOWING=90,
    OP_SPECTATINGFREE=91,
    OP_STATRANGEBITSSET=92,
    OP_KEYBINDING=93,
    OP_ACTIONSLOTUSABLE=94,
    OP_HUDFADE=95,
    OP_MAXPLAYERS=96,
    OP_ACCEPTINGINVITE=97,
    OP_ISINTERMISSION=98,
    OP_GAMEHOST=99,
    OP_PARTYHASMISSINGMAPPACK=100,
    OP_PARTYMISSINGMAPPACKERROR=101,
    OP_ANYNEWMAPPACKS=102,
    OP_AMISELECTED=103,
    OP_PARTYSTATUSSTRING=104,
    OP_ATTACHED_CONTROLLER_COUNT=105,
    OP_IS_SPLIT_SCREEN_ONLINE_POSSIBLE=106,
    OP_SPLITSCREENPLAYERCOUNT=107,
    OP_GETPLAYERDATA=108,
    OP_GETPLAYERDATASPLITSCREEN=109,
    OP_EXPERIENCE_FOR_LEVEL=110,
    OP_LEVEL_FOR_EXPERIENCE=111,
    OP_IS_ITEM_UNLOCKED=112,
    OP_IS_ITEM_UNLOCKEDSPLITSCREEN=113,
    OP_DEBUG_PRINT=114,
    OP_GETPLAYERDATA_ANYBOOLTRUE=115,
    OP_WEAPON_CLASS_NEW=116,
    OP_WEAPONNAME=117,
    OP_ISRELOADING=118,
    OP_SAVE_GAME_AVAILABLE=119,
    OP_UNLOCKED_ITEM_COUNT=120,
    OP_UNLOCKED_ITEM_COUNT_SPLITSCREEN=121,
    OP_UNLOCKED_ITEM=122,
    OP_UNLOCKED_ITEM_SPLITSCREEN=123,
    OP_MAIL_SUBJECT=124,
    OP_MAIL_FROM=125,
    OP_MAIL_RECEIVED=126,
    OP_MAIL_BODY=127,
    OP_MAIL_LOOT_LOCALIZED=128,
    OP_MAIL_GIVES_LOOT=129,
    OP_ANY_NEW_MAIL=130,
    OP_MAIL_TIME_TO_FOLLOWUP=131,
    OP_MAIL_LOOT_TYPE=132,
    OP_MAIL_RAN_LOTTERY=133,
    OP_LOTTERY_LOOT_LOCALIZED=134,
    OP_RADAR_IS_JAMMED=135,
    OP_RADAR_JAM_INTENSITY=136,
    OP_RADAR_IS_ENABLED=137,
    OP_EMP_JAMMED=138,
    OP_PLAYERADS=139,
    OP_WEAPON_HEAT_ACTIVE=140,
    OP_WEAPON_HEAT_VALUE=141,
    OP_WEAPON_HEAT_OVERHEATED=142,
    OP_SPLASH_TEXT=143,
    OP_SPLASH_DESCRIPTION=144,
    OP_SPLASH_MATERIAL=145,
    OP_SPLASH_HAS_ICON=146,
    OP_SPLASH_ROWNUM=147,
    OP_GETFOCUSED_NAME=148,
    OP_GETFOCUSED_X=149,
    OP_GETFOCUSED_Y=150,
    OP_GETFOCUSED_W=151,
    OP_GETFOCUSED_H=152,
    OP_GETITEMDEF_X=153,
    OP_GETITEMDEF_Y=154,
    OP_GETITEMDEF_W=155,
    OP_GETITEMDEF_H=156,
    OP_PLAYLISTFIELD=157,
    OP_SCOREBOARD_EXTERNALMUTE_NOTICE=158,
    OP_CLIENT_MATCH_DATA=159,
    OP_CLIENT_MATCH_DATA_DEF=160,
    OP_GET_MAP_NAME=161,
    OP_GET_MAP_IMAGE=162,
    OP_GET_MAP_CUSTOM=163,
    OP_GET_MIGRATION_STATUS=164,
    OP_GET_PLAYERCARD_INFO=165,
    OP_IS_OFFLINE_PROFILE_SELECTED=166,
    OP_COOP_PLAYERFIELD=167,
    OP_IS_COOP=168,
    OP_GETPARTYSTATUS=169,
    OP_GETSEARCHPARAMS=170,
    OP_GETTIMEPLAYED=171,
    OP_IS_SELECTED_PLAYER_FRIEND=172,
    OP_GETCHARBYINDEX=173,
    OP_GETPLAYERPROFILEDATA=174,
    OP_IS_PROFILE_SIGNED_IN=175,
    OP_GET_WAIT_POPUP_STATUS=176,
    NUM_OPERATORS=177
};

struct OperandList// Size=0x54 (Id=5558)
{
    struct Operand operands[10];// Offset=0x0 Size=0x50
    int operandCount;// Offset=0x50 Size=0x4
};

struct OperandList// Size=0x54 (Id=5559)
{
    struct Operand operands[10];// Offset=0x0 Size=0x50
    int operandCount;// Offset=0x50 Size=0x4
};

struct OperatorStack// Size=0xf4 (Id=5560)
{
    enum operationEnum stack[60];// Offset=0x0 Size=0xf0
    int numOperators;// Offset=0xf0 Size=0x4
};

struct OperandStack// Size=0x13b4 (Id=5561)
{
    struct OperandList stack[60];// Offset=0x0 Size=0x13b0
    int numOperandLists;// Offset=0x13b0 Size=0x4
};

enum _unnamed_5562
{
    UNLOCKTABLE_COLUMN_ITEM=0,
    UNLOCKTABLE_COLUMN_TYPE=1,
    UNLOCKTABLE_COLUMN_LEVEL=2,
    UNLOCKTABLE_COLUMN_CHALLENGE=3,
    UNLOCKTABLE_COLUMN_TIER=5,
    UNLOCKTABLE_COLUMN_WEIGHT=6,
    UNLOCKTABLE_COLUMN_CASH_VALUE=7,
    UNLOCKTABLE_COLUMN_MIN_MAIL_TIME=8,
    UNLOCKTABLE_COLUMN_MAX_MAIL_TIME=9,
    UNLOCKTABLE_COLUMN_MAPS=11,
    UNLOCKTABLE_COLUMN_PLAYLISTS=12,
    UNLOCKTABLE_COLUMN_MIN_LEVEL=13,
    UNLOCKTABLE_COLUMN_NEEDED_ITEMS=14,
    UNLOCKTABLE_COLUMN_ADVANCE_MAIL_SUBJECT=15,
    UNLOCKTABLE_COLUMN_ADVANCE_MAIL_FROM=16,
    UNLOCKTABLE_COLUMN_ADVANCE_MAIL_BODY=17,
    UNLOCKTABLE_COLUMN_MAIL_SUBJECT=18,
    UNLOCKTABLE_COLUMN_MAIL_FROM=19,
    UNLOCKTABLE_COLUMN_MAIL_BODY=20
};

enum _unnamed_5563
{
    OPERATOR=0,
    OPERAND=1
};

enum GamerProfileDataType
{
    TYPE_INVALID=0,
    TYPE_INT=1,
    TYPE_BYTE=2,
    TYPE_FLOAT=3,
    TYPE_STRING=4
};

enum PlayerCardDataType
{
    PLAYERCARD_DATA_ISVALID=0,
    PLAYERCARD_DATA_TITLEINDEX=1,
    PLAYERCARD_DATA_ICONINDEX=2,
    PLAYERCARD_DATA_NAMEPLATEINDEX=3,
    PLAYERCARD_DATA_RANK=4,
    PLAYERCARD_DATA_PRESTIGE=5,
    PLAYERCARD_DATA_TEAM=6,
    PLAYERCARD_DATA_TIMESINCEUPDATE=7,
    PLAYERCARD_DATA_NAME=8,
    PLAYERCARD_DATA_NAMECLAN=9,
    PLAYERCARD_DATA_COUNT=10
};

struct GamerProfileData// Size=0x8 (Id=5566)
{
    enum GamerProfileDataType type;// Offset=0x0 Size=0x4
    union GamerProfileDataUnion u;// Offset=0x4 Size=0x4
};

union GamerProfileDataUnion// Size=0x4 (Id=5567)
{
    unsigned char byteVal;// Offset=0x0 Size=0x1
    int intVal;// Offset=0x0 Size=0x4
    float floatVal;// Offset=0x0 Size=0x4
    char * stringVal;// Offset=0x0 Size=0x4
};

struct std::_Ranit_base<char,int,char const *,char const &,std::_Iterator_base_secure> : public std::_Iterator_base_secure// Size=0x4 (Id=5568)
{
    void _Ranit_base<char,int,char const *,char const &,std::_Iterator_base_secure>();
};

enum std::_Uninitialized
{
    _Noinit=0
};

class std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >// Size=0x3c (Id=5570)
{
    protected void basic_streambuf<wchar_t,std::char_traits<wchar_t> >(enum std::_Uninitialized );
    protected void basic_streambuf<wchar_t,std::char_traits<wchar_t> >();
    private void basic_streambuf<wchar_t,std::char_traits<wchar_t> >(class std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > & );
    private class std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > & operator=(class std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > & );
    public void ~basic_streambuf<wchar_t,std::char_traits<wchar_t> >();
    public class std::fpos<int> pubseekoff(long ,unsigned int ,unsigned int );
    public class std::fpos<int> pubseekoff(long ,int ,int );
    public class std::fpos<int> pubseekpos(class std::fpos<int> ,unsigned int );
    public class std::fpos<int> pubseekpos(class std::fpos<int> ,int );
    public class std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > * pubsetbuf(wchar_t * ,int );
    public class std::locale pubimbue(class std::locale & );
    public class std::locale getloc();
    public int in_avail();
    public int pubsync();
    public unsigned short sbumpc();
    public unsigned short sgetc();
    public int _Sgetn_s(wchar_t * ,unsigned int ,int );
    public int sgetn(wchar_t * ,int );
    public unsigned short snextc();
    public unsigned short sputbackc(wchar_t );
    public void stossc();
    public unsigned short sungetc();
    public unsigned short sputc(wchar_t );
    public int sputn(wchar_t * ,int );
    public void _Lock();
    public void _Unlock();
    protected wchar_t * eback();
    protected wchar_t * gptr();
    protected wchar_t * pbase();
    protected wchar_t * pptr();
    protected wchar_t * egptr();
    protected void gbump(int );
    protected void setg(wchar_t * ,wchar_t * ,wchar_t * );
    protected wchar_t * epptr();
    protected wchar_t * _Gndec();
    protected wchar_t * _Gninc();
    protected wchar_t * _Gnpreinc();
    protected int _Gnavail();
    protected void pbump(int );
    protected void setp(wchar_t * ,wchar_t * ,wchar_t * );
    protected void setp(wchar_t * ,wchar_t * );
    protected wchar_t * _Pninc();
    protected int _Pnavail();
    protected void _Init(wchar_t ** ,wchar_t ** ,int * ,wchar_t ** ,wchar_t ** ,int * );
    protected void _Init();
    protected unsigned short overflow(unsigned short );
    protected unsigned short pbackfail(unsigned short );
    protected int showmanyc();
    protected unsigned short underflow();
    protected unsigned short uflow();
    protected int xsgetn(wchar_t * ,int );
    protected int _Xsgetn_s(wchar_t * ,unsigned int ,int );
    protected int xsputn(wchar_t * ,int );
    protected class std::fpos<int> seekoff(long ,int ,int );
    protected class std::fpos<int> seekpos(class std::fpos<int> ,int );
    protected class std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > * setbuf(wchar_t * ,int );
    protected int sync();
    protected void imbue(class std::locale & );
    private unsigned char __align0[4];// Offset=0x0 Size=0x4
    private class std::_Mutex _Mylock;// Offset=0x4 Size=0x4
    private wchar_t * _Gfirst;// Offset=0x8 Size=0x4
    private wchar_t * _Pfirst;// Offset=0xc Size=0x4
    private wchar_t ** _IGfirst;// Offset=0x10 Size=0x4
    private wchar_t ** _IPfirst;// Offset=0x14 Size=0x4
    private wchar_t * _Gnext;// Offset=0x18 Size=0x4
    private wchar_t * _Pnext;// Offset=0x1c Size=0x4
    private wchar_t ** _IGnext;// Offset=0x20 Size=0x4
    private wchar_t ** _IPnext;// Offset=0x24 Size=0x4
    private int _Gcount;// Offset=0x28 Size=0x4
    private int _Pcount;// Offset=0x2c Size=0x4
    private int * _IGcount;// Offset=0x30 Size=0x4
    private int * _IPcount;// Offset=0x34 Size=0x4
    private class std::locale * _Plocale;// Offset=0x38 Size=0x4
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class std::locale : public std::_Locbase<int>// Size=0x4 (Id=5571)
{
    union // Size=0x34 (Id=0)
    {
        class id// Size=0x4 (Id=59316)
        {
            private void id(class std::locale::id & );
            public void id(unsigned int );
            public unsigned int operator unsigned int();
            private class std::locale::id & operator=(class std::locale::id & );
            private unsigned int _Id;// Offset=0x0 Size=0x4
            private int & _Id_cnt_func();
            private int _Id_cnt;// Offset=0x0 Size=0x4
            public void __dflt_ctor_closure();
        };
        class _Locimp : public std::locale::facet// Size=0x34 (Id=59333)
        {
            protected void ~_Locimp();
            private void _Locimp_dtor(class std::locale::_Locimp * );
            private void _Locimp_ctor(class std::locale::_Locimp * ,class std::locale::_Locimp & );
            private void _Locimp_Addfac(class std::locale::_Locimp * ,class std::locale::facet * ,unsigned int );
            private void _Locimp(class std::locale::_Locimp & );
            private void _Locimp(bool );
            private void _Addfac(class std::locale::facet * ,unsigned int );
            private class std::locale::_Locimp * _Makeloc(class std::_Locinfo & ,int ,class std::locale::_Locimp * ,class std::locale * );
            private void _Makewloc(class std::_Locinfo & ,int ,class std::locale::_Locimp * ,class std::locale * );
            private void _Makeushloc(class std::_Locinfo & ,int ,class std::locale::_Locimp * ,class std::locale * );
            private void _Makexloc(class std::_Locinfo & ,int ,class std::locale::_Locimp * ,class std::locale * );
            private unsigned char __align0[8];// Offset=0x0 Size=0x8
            private class std::locale::facet ** _Facetvec;// Offset=0x8 Size=0x4
            private unsigned int _Facetcount;// Offset=0xc Size=0x4
            private int _Catmask;// Offset=0x10 Size=0x4
            private bool _Xparent;// Offset=0x14 Size=0x1
            private unsigned char __align1[3];// Offset=0x15 Size=0x3
            private class std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Name;// Offset=0x18 Size=0x1c
            private class std::locale::_Locimp &** _Clocptr_func();
            private class std::locale::_Locimp * _Clocptr;// Offset=0x0 Size=0x4
            private class std::locale::_Locimp & operator=(class std::locale::_Locimp & );
            public void __dflt_ctor_closure();
            public void __local_vftable_ctor_closure();
            protected void * __vecDelDtor(unsigned int );
        };
        class facet// Size=0x8 (Id=59377)
        {
            public unsigned int _Getcat(class std::locale::facet ** ,class std::locale * );
            public void _Incref();
            public class std::locale::facet * _Decref();
            public void _Register();
            public void ~facet();
            private void facet(class std::locale::facet & );
            protected void facet(unsigned int );
            private void facet_Register(class std::locale::facet * );
            private class std::locale::facet & operator=(class std::locale::facet & );
            private unsigned char __align0[4];// Offset=0x0 Size=0x4
            private unsigned int _Refs;// Offset=0x4 Size=0x4
            public void __dflt_ctor_closure();
            public void __local_vftable_ctor_closure();
            public void * __vecDelDtor(unsigned int );
        };
        class std::locale & _Addfac(class std::locale::facet * ,unsigned int ,unsigned int );
        void locale(class std::locale::_Locimp * );
        void locale(class std::locale & ,char * ,int );
        void locale(char * ,int );
        void locale(class std::locale & ,class std::locale & ,int );
        void locale(class std::locale & );
        void locale(enum std::_Uninitialized );
        void locale();
        void ~locale();
        class std::locale & operator=(class std::locale & );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > name();
        class std::locale::facet * _Getfacet(unsigned int );
        bool operator==(class std::locale & );
        bool operator!=(class std::locale & );
        class std::locale & classic();
        class std::locale global(class std::locale & );
        class std::locale empty();
        class std::locale::_Locimp * _Getgloballocale();
        class std::locale::_Locimp * _Init();
        void _Setgloballocale(void * );
        class std::locale::_Locimp * _Ptr;// Offset=0x0 Size=0x4
        void * __vecDelDtor(unsigned int );
    };
};

class std::locale : public std::_Locbase<int>// Size=0x4 (Id=5572)
{
    union // Size=0x34 (Id=0)
    {
        class id// Size=0x4 (Id=59316)
        {
            private void id(class std::locale::id & );
            public void id(unsigned int );
            public unsigned int operator unsigned int();
            private class std::locale::id & operator=(class std::locale::id & );
            private unsigned int _Id;// Offset=0x0 Size=0x4
            private int & _Id_cnt_func();
            private int _Id_cnt;// Offset=0x0 Size=0x4
            public void __dflt_ctor_closure();
        };
        class _Locimp : public std::locale::facet// Size=0x34 (Id=59333)
        {
            protected void ~_Locimp();
            private void _Locimp_dtor(class std::locale::_Locimp * );
            private void _Locimp_ctor(class std::locale::_Locimp * ,class std::locale::_Locimp & );
            private void _Locimp_Addfac(class std::locale::_Locimp * ,class std::locale::facet * ,unsigned int );
            private void _Locimp(class std::locale::_Locimp & );
            private void _Locimp(bool );
            private void _Addfac(class std::locale::facet * ,unsigned int );
            private class std::locale::_Locimp * _Makeloc(class std::_Locinfo & ,int ,class std::locale::_Locimp * ,class std::locale * );
            private void _Makewloc(class std::_Locinfo & ,int ,class std::locale::_Locimp * ,class std::locale * );
            private void _Makeushloc(class std::_Locinfo & ,int ,class std::locale::_Locimp * ,class std::locale * );
            private void _Makexloc(class std::_Locinfo & ,int ,class std::locale::_Locimp * ,class std::locale * );
            private unsigned char __align0[8];// Offset=0x0 Size=0x8
            private class std::locale::facet ** _Facetvec;// Offset=0x8 Size=0x4
            private unsigned int _Facetcount;// Offset=0xc Size=0x4
            private int _Catmask;// Offset=0x10 Size=0x4
            private bool _Xparent;// Offset=0x14 Size=0x1
            private unsigned char __align1[3];// Offset=0x15 Size=0x3
            private class std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Name;// Offset=0x18 Size=0x1c
            private class std::locale::_Locimp &** _Clocptr_func();
            private class std::locale::_Locimp * _Clocptr;// Offset=0x0 Size=0x4
            private class std::locale::_Locimp & operator=(class std::locale::_Locimp & );
            public void __dflt_ctor_closure();
            public void __local_vftable_ctor_closure();
            protected void * __vecDelDtor(unsigned int );
        };
        class facet// Size=0x8 (Id=59377)
        {
            public unsigned int _Getcat(class std::locale::facet ** ,class std::locale * );
            public void _Incref();
            public class std::locale::facet * _Decref();
            public void _Register();
            public void ~facet();
            private void facet(class std::locale::facet & );
            protected void facet(unsigned int );
            private void facet_Register(class std::locale::facet * );
            private class std::locale::facet & operator=(class std::locale::facet & );
            private unsigned char __align0[4];// Offset=0x0 Size=0x4
            private unsigned int _Refs;// Offset=0x4 Size=0x4
            public void __dflt_ctor_closure();
            public void __local_vftable_ctor_closure();
            public void * __vecDelDtor(unsigned int );
        };
        class std::locale & _Addfac(class std::locale::facet * ,unsigned int ,unsigned int );
        void locale(class std::locale::_Locimp * );
        void locale(class std::locale & ,char * ,int );
        void locale(char * ,int );
        void locale(class std::locale & ,class std::locale & ,int );
        void locale(class std::locale & );
        void locale(enum std::_Uninitialized );
        void locale();
        void ~locale();
        class std::locale & operator=(class std::locale & );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > name();
        class std::locale::facet * _Getfacet(unsigned int );
        bool operator==(class std::locale & );
        bool operator!=(class std::locale & );
        class std::locale & classic();
        class std::locale global(class std::locale & );
        class std::locale empty();
        class std::locale::_Locimp * _Getgloballocale();
        class std::locale::_Locimp * _Init();
        void _Setgloballocale(void * );
        class std::locale::_Locimp * _Ptr;// Offset=0x0 Size=0x4
        void * __vecDelDtor(unsigned int );
    };
};

class std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >// Size=0x3c (Id=5573)
{
    protected void basic_streambuf<wchar_t,std::char_traits<wchar_t> >(enum std::_Uninitialized );
    protected void basic_streambuf<wchar_t,std::char_traits<wchar_t> >();
    private void basic_streambuf<wchar_t,std::char_traits<wchar_t> >(class std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > & );
    private class std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > & operator=(class std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > & );
    public void ~basic_streambuf<wchar_t,std::char_traits<wchar_t> >();
    public class std::fpos<int> pubseekoff(long ,unsigned int ,unsigned int );
    public class std::fpos<int> pubseekoff(long ,int ,int );
    public class std::fpos<int> pubseekpos(class std::fpos<int> ,unsigned int );
    public class std::fpos<int> pubseekpos(class std::fpos<int> ,int );
    public class std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > * pubsetbuf(wchar_t * ,int );
    public class std::locale pubimbue(class std::locale & );
    public class std::locale getloc();
    public int in_avail();
    public int pubsync();
    public unsigned short sbumpc();
    public unsigned short sgetc();
    public int _Sgetn_s(wchar_t * ,unsigned int ,int );
    public int sgetn(wchar_t * ,int );
    public unsigned short snextc();
    public unsigned short sputbackc(wchar_t );
    public void stossc();
    public unsigned short sungetc();
    public unsigned short sputc(wchar_t );
    public int sputn(wchar_t * ,int );
    public void _Lock();
    public void _Unlock();
    protected wchar_t * eback();
    protected wchar_t * gptr();
    protected wchar_t * pbase();
    protected wchar_t * pptr();
    protected wchar_t * egptr();
    protected void gbump(int );
    protected void setg(wchar_t * ,wchar_t * ,wchar_t * );
    protected wchar_t * epptr();
    protected wchar_t * _Gndec();
    protected wchar_t * _Gninc();
    protected wchar_t * _Gnpreinc();
    protected int _Gnavail();
    protected void pbump(int );
    protected void setp(wchar_t * ,wchar_t * ,wchar_t * );
    protected void setp(wchar_t * ,wchar_t * );
    protected wchar_t * _Pninc();
    protected int _Pnavail();
    protected void _Init(wchar_t ** ,wchar_t ** ,int * ,wchar_t ** ,wchar_t ** ,int * );
    protected void _Init();
    protected unsigned short overflow(unsigned short );
    protected unsigned short pbackfail(unsigned short );
    protected int showmanyc();
    protected unsigned short underflow();
    protected unsigned short uflow();
    protected int xsgetn(wchar_t * ,int );
    protected int _Xsgetn_s(wchar_t * ,unsigned int ,int );
    protected int xsputn(wchar_t * ,int );
    protected class std::fpos<int> seekoff(long ,int ,int );
    protected class std::fpos<int> seekpos(class std::fpos<int> ,int );
    protected class std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > * setbuf(wchar_t * ,int );
    protected int sync();
    protected void imbue(class std::locale & );
    private unsigned char __align0[4];// Offset=0x0 Size=0x4
    private class std::_Mutex _Mylock;// Offset=0x4 Size=0x4
    private wchar_t * _Gfirst;// Offset=0x8 Size=0x4
    private wchar_t * _Pfirst;// Offset=0xc Size=0x4
    private wchar_t ** _IGfirst;// Offset=0x10 Size=0x4
    private wchar_t ** _IPfirst;// Offset=0x14 Size=0x4
    private wchar_t * _Gnext;// Offset=0x18 Size=0x4
    private wchar_t * _Pnext;// Offset=0x1c Size=0x4
    private wchar_t ** _IGnext;// Offset=0x20 Size=0x4
    private wchar_t ** _IPnext;// Offset=0x24 Size=0x4
    private int _Gcount;// Offset=0x28 Size=0x4
    private int _Pcount;// Offset=0x2c Size=0x4
    private int * _IGcount;// Offset=0x30 Size=0x4
    private int * _IPcount;// Offset=0x34 Size=0x4
    private class std::locale * _Plocale;// Offset=0x38 Size=0x4
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class std::length_error : public std::logic_error// Size=0x24 (Id=5574)
{
    public void length_error(class std::length_error & );
    public void length_error(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
    public void ~length_error();
    protected void _Doraise();
    public class std::length_error & operator=(class std::length_error & );
    public void * __vecDelDtor(unsigned int );
};

class std::basic_string<char,std::char_traits<char>,std::allocator<char> > : public std::_String_val<char,std::allocator<char> >// Size=0x1c (Id=5575)
{
    public void basic_string<char,std::char_traits<char>,std::allocator<char> >(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
    public void basic_string<char,std::char_traits<char>,std::allocator<char> >(class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > ,class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > );
    public void basic_string<char,std::char_traits<char>,std::allocator<char> >(char * ,char * );
    public void basic_string<char,std::char_traits<char>,std::allocator<char> >(unsigned int ,char ,class std::allocator<char> & );
    public void basic_string<char,std::char_traits<char>,std::allocator<char> >(unsigned int ,char );
    public void basic_string<char,std::char_traits<char>,std::allocator<char> >(char * ,class std::allocator<char> & );
    public void basic_string<char,std::char_traits<char>,std::allocator<char> >(char * );
    public void basic_string<char,std::char_traits<char>,std::allocator<char> >(char * ,unsigned int ,class std::allocator<char> & );
    public void basic_string<char,std::char_traits<char>,std::allocator<char> >(char * ,unsigned int );
    public void basic_string<char,std::char_traits<char>,std::allocator<char> >(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & ,unsigned int ,unsigned int ,class std::allocator<char> & );
    public void basic_string<char,std::char_traits<char>,std::allocator<char> >(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & ,unsigned int ,unsigned int );
    public void basic_string<char,std::char_traits<char>,std::allocator<char> >(class std::allocator<char> & );
    public void basic_string<char,std::char_traits<char>,std::allocator<char> >();
    public void ~basic_string<char,std::char_traits<char>,std::allocator<char> >();
    union // Size=0x4 (Id=0)
    {
        const unsigned int npos;// Offset=0x0 Size=0x4
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & operator=(char );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & operator=(char * );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & operator=(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & operator+=(char );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & operator+=(char * );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & operator+=(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & append(class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > ,class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & append(char * ,char * );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & append(unsigned int ,char );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & append(char * );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & append(char * ,unsigned int );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & append(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & ,unsigned int ,unsigned int );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & append(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & assign(class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > ,class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & assign(char * ,char * );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & assign(unsigned int ,char );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & assign(char * );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & assign(char * ,unsigned int );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & assign(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & ,unsigned int ,unsigned int );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & assign(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
        void insert(class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > ,class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > ,class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > );
        void insert(class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > ,char * ,char * );
        void insert(class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > ,unsigned int ,char );
        class std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > insert(class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > ,char );
        class std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > insert(class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & insert(unsigned int ,unsigned int ,char );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & insert(unsigned int ,char * );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & insert(unsigned int ,char * ,unsigned int );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & insert(unsigned int ,class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & ,unsigned int ,unsigned int );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & insert(unsigned int ,class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
        class std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > erase(class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > ,class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > );
        class std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > erase(class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & erase(unsigned int ,unsigned int );
        void clear();
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & replace(class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > ,class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > ,class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > ,class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & replace(class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > ,class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > ,char * ,char * );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & replace(class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > ,class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > ,unsigned int ,char );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & replace(class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > ,class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > ,char * );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & replace(class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > ,class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > ,char * ,unsigned int );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & replace(class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > ,class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > ,class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & replace(unsigned int ,unsigned int ,unsigned int ,char );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & replace(unsigned int ,unsigned int ,char * );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & replace(unsigned int ,unsigned int ,char * ,unsigned int );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & replace(unsigned int ,unsigned int ,class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & ,unsigned int ,unsigned int );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & replace(unsigned int ,unsigned int ,class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
        class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > begin();
        class std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > begin();
        class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > end();
        class std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > end();
        class std::reverse_iterator<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > rbegin();
        class std::reverse_iterator<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > > rbegin();
        class std::reverse_iterator<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > rend();
        class std::reverse_iterator<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > > rend();
        char & at(unsigned int );
        char & at(unsigned int );
        char & operator[](unsigned int );
        char & operator[](unsigned int );
        void push_back(char );
        char * c_str();
        char * data();
        unsigned int length();
        unsigned int size();
        unsigned int max_size();
        void resize(unsigned int ,char );
        void resize(unsigned int );
        unsigned int capacity();
        void reserve(unsigned int );
        bool empty();
        unsigned int copy(char * ,unsigned int ,unsigned int );
        unsigned int _Copy_s(char * ,unsigned int ,unsigned int ,unsigned int );
        void swap(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
        unsigned int find(char ,unsigned int );
        unsigned int find(char * ,unsigned int );
        unsigned int find(char * ,unsigned int ,unsigned int );
        unsigned int find(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & ,unsigned int );
        unsigned int rfind(char ,unsigned int );
        unsigned int rfind(char * ,unsigned int );
        unsigned int rfind(char * ,unsigned int ,unsigned int );
        unsigned int rfind(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & ,unsigned int );
        unsigned int find_first_of(char ,unsigned int );
        unsigned int find_first_of(char * ,unsigned int );
        unsigned int find_first_of(char * ,unsigned int ,unsigned int );
        unsigned int find_first_of(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & ,unsigned int );
        unsigned int find_last_of(char ,unsigned int );
        unsigned int find_last_of(char * ,unsigned int );
        unsigned int find_last_of(char * ,unsigned int ,unsigned int );
        unsigned int find_last_of(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & ,unsigned int );
        unsigned int find_first_not_of(char ,unsigned int );
        unsigned int find_first_not_of(char * ,unsigned int );
        unsigned int find_first_not_of(char * ,unsigned int ,unsigned int );
        unsigned int find_first_not_of(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & ,unsigned int );
        unsigned int find_last_not_of(char ,unsigned int );
        unsigned int find_last_not_of(char * ,unsigned int );
        unsigned int find_last_not_of(char * ,unsigned int ,unsigned int );
        unsigned int find_last_not_of(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & ,unsigned int );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > substr(unsigned int ,unsigned int );
        int compare(unsigned int ,unsigned int ,char * ,unsigned int );
        int compare(unsigned int ,unsigned int ,char * );
        int compare(char * );
        int compare(unsigned int ,unsigned int ,class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & ,unsigned int ,unsigned int );
        int compare(unsigned int ,unsigned int ,class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
        int compare(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
        class std::allocator<char> get_allocator();
        enum _unnamed_59675
        {
            _BUF_SIZE=16
        };
        enum _unnamed_59677
        {
            _ALLOC_MASK=15
        };
        void _Chassign(unsigned int ,unsigned int ,char );
        void _Copy(unsigned int ,unsigned int );
        void _Eos(unsigned int );
        bool _Grow(unsigned int ,bool );
        bool _Inside(char * );
        unsigned int _Pdif(class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > ,class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > );
        void _Tidy(bool ,unsigned int );
        union _Bxty// Size=0x10 (Id=59692)
        {
            char _Buf[16];// Offset=0x0 Size=0x10
            char * _Ptr;// Offset=0x0 Size=0x4
        };
    };
    protected union std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Bxty _Bx;// Offset=0x4 Size=0x10
    protected char * _Myptr();
    protected char * _Myptr();
    protected unsigned int _Mysize;// Offset=0x14 Size=0x4
    protected unsigned int _Myres;// Offset=0x18 Size=0x4
    public void * __vecDelDtor(unsigned int );
};

class std::basic_string<char,std::char_traits<char>,std::allocator<char> > : public std::_String_val<char,std::allocator<char> >// Size=0x1c (Id=5576)
{
    public void basic_string<char,std::char_traits<char>,std::allocator<char> >(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
    public void basic_string<char,std::char_traits<char>,std::allocator<char> >(class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > ,class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > );
    public void basic_string<char,std::char_traits<char>,std::allocator<char> >(char * ,char * );
    public void basic_string<char,std::char_traits<char>,std::allocator<char> >(unsigned int ,char ,class std::allocator<char> & );
    public void basic_string<char,std::char_traits<char>,std::allocator<char> >(unsigned int ,char );
    public void basic_string<char,std::char_traits<char>,std::allocator<char> >(char * ,class std::allocator<char> & );
    public void basic_string<char,std::char_traits<char>,std::allocator<char> >(char * );
    public void basic_string<char,std::char_traits<char>,std::allocator<char> >(char * ,unsigned int ,class std::allocator<char> & );
    public void basic_string<char,std::char_traits<char>,std::allocator<char> >(char * ,unsigned int );
    public void basic_string<char,std::char_traits<char>,std::allocator<char> >(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & ,unsigned int ,unsigned int ,class std::allocator<char> & );
    public void basic_string<char,std::char_traits<char>,std::allocator<char> >(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & ,unsigned int ,unsigned int );
    public void basic_string<char,std::char_traits<char>,std::allocator<char> >(class std::allocator<char> & );
    public void basic_string<char,std::char_traits<char>,std::allocator<char> >();
    public void ~basic_string<char,std::char_traits<char>,std::allocator<char> >();
    union // Size=0x4 (Id=0)
    {
        const unsigned int npos;// Offset=0x0 Size=0x4
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & operator=(char );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & operator=(char * );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & operator=(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & operator+=(char );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & operator+=(char * );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & operator+=(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & append(class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > ,class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & append(char * ,char * );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & append(unsigned int ,char );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & append(char * );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & append(char * ,unsigned int );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & append(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & ,unsigned int ,unsigned int );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & append(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & assign(class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > ,class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & assign(char * ,char * );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & assign(unsigned int ,char );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & assign(char * );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & assign(char * ,unsigned int );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & assign(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & ,unsigned int ,unsigned int );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & assign(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
        void insert(class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > ,class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > ,class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > );
        void insert(class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > ,char * ,char * );
        void insert(class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > ,unsigned int ,char );
        class std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > insert(class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > ,char );
        class std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > insert(class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & insert(unsigned int ,unsigned int ,char );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & insert(unsigned int ,char * );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & insert(unsigned int ,char * ,unsigned int );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & insert(unsigned int ,class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & ,unsigned int ,unsigned int );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & insert(unsigned int ,class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
        class std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > erase(class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > ,class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > );
        class std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > erase(class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & erase(unsigned int ,unsigned int );
        void clear();
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & replace(class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > ,class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > ,class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > ,class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & replace(class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > ,class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > ,char * ,char * );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & replace(class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > ,class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > ,unsigned int ,char );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & replace(class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > ,class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > ,char * );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & replace(class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > ,class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > ,char * ,unsigned int );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & replace(class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > ,class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > ,class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & replace(unsigned int ,unsigned int ,unsigned int ,char );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & replace(unsigned int ,unsigned int ,char * );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & replace(unsigned int ,unsigned int ,char * ,unsigned int );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & replace(unsigned int ,unsigned int ,class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & ,unsigned int ,unsigned int );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & replace(unsigned int ,unsigned int ,class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
        class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > begin();
        class std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > begin();
        class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > end();
        class std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > end();
        class std::reverse_iterator<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > rbegin();
        class std::reverse_iterator<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > > rbegin();
        class std::reverse_iterator<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > > rend();
        class std::reverse_iterator<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > > rend();
        char & at(unsigned int );
        char & at(unsigned int );
        char & operator[](unsigned int );
        char & operator[](unsigned int );
        void push_back(char );
        char * c_str();
        char * data();
        unsigned int length();
        unsigned int size();
        unsigned int max_size();
        void resize(unsigned int ,char );
        void resize(unsigned int );
        unsigned int capacity();
        void reserve(unsigned int );
        bool empty();
        unsigned int copy(char * ,unsigned int ,unsigned int );
        unsigned int _Copy_s(char * ,unsigned int ,unsigned int ,unsigned int );
        void swap(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
        unsigned int find(char ,unsigned int );
        unsigned int find(char * ,unsigned int );
        unsigned int find(char * ,unsigned int ,unsigned int );
        unsigned int find(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & ,unsigned int );
        unsigned int rfind(char ,unsigned int );
        unsigned int rfind(char * ,unsigned int );
        unsigned int rfind(char * ,unsigned int ,unsigned int );
        unsigned int rfind(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & ,unsigned int );
        unsigned int find_first_of(char ,unsigned int );
        unsigned int find_first_of(char * ,unsigned int );
        unsigned int find_first_of(char * ,unsigned int ,unsigned int );
        unsigned int find_first_of(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & ,unsigned int );
        unsigned int find_last_of(char ,unsigned int );
        unsigned int find_last_of(char * ,unsigned int );
        unsigned int find_last_of(char * ,unsigned int ,unsigned int );
        unsigned int find_last_of(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & ,unsigned int );
        unsigned int find_first_not_of(char ,unsigned int );
        unsigned int find_first_not_of(char * ,unsigned int );
        unsigned int find_first_not_of(char * ,unsigned int ,unsigned int );
        unsigned int find_first_not_of(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & ,unsigned int );
        unsigned int find_last_not_of(char ,unsigned int );
        unsigned int find_last_not_of(char * ,unsigned int );
        unsigned int find_last_not_of(char * ,unsigned int ,unsigned int );
        unsigned int find_last_not_of(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & ,unsigned int );
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > substr(unsigned int ,unsigned int );
        int compare(unsigned int ,unsigned int ,char * ,unsigned int );
        int compare(unsigned int ,unsigned int ,char * );
        int compare(char * );
        int compare(unsigned int ,unsigned int ,class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & ,unsigned int ,unsigned int );
        int compare(unsigned int ,unsigned int ,class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
        int compare(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
        class std::allocator<char> get_allocator();
        enum _unnamed_59675
        {
            _BUF_SIZE=16
        };
        enum _unnamed_59677
        {
            _ALLOC_MASK=15
        };
        void _Chassign(unsigned int ,unsigned int ,char );
        void _Copy(unsigned int ,unsigned int );
        void _Eos(unsigned int );
        bool _Grow(unsigned int ,bool );
        bool _Inside(char * );
        unsigned int _Pdif(class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > ,class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > );
        void _Tidy(bool ,unsigned int );
        union _Bxty// Size=0x10 (Id=59692)
        {
            char _Buf[16];// Offset=0x0 Size=0x10
            char * _Ptr;// Offset=0x0 Size=0x4
        };
    };
    protected union std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Bxty _Bx;// Offset=0x4 Size=0x10
    protected char * _Myptr();
    protected char * _Myptr();
    protected unsigned int _Mysize;// Offset=0x14 Size=0x4
    protected unsigned int _Myres;// Offset=0x18 Size=0x4
    public void * __vecDelDtor(unsigned int );
};

class std::length_error : public std::logic_error// Size=0x24 (Id=5577)
{
    public void length_error(class std::length_error & );
    public void length_error(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
    public void ~length_error();
    protected void _Doraise();
    public class std::length_error & operator=(class std::length_error & );
    public void * __vecDelDtor(unsigned int );
};

class std::runtime_error : public stdext::exception// Size=0x24 (Id=5578)
{
    public void runtime_error(class std::runtime_error & );
    public void runtime_error(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
    public void ~runtime_error();
    public char * what();
    protected void _Doraise();
    private unsigned char __align0[8];// Offset=0x0 Size=0x8
    private class std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Str;// Offset=0x8 Size=0x1c
    public class std::runtime_error & operator=(class std::runtime_error & );
    public void * __vecDelDtor(unsigned int );
};

class std::runtime_error : public stdext::exception// Size=0x24 (Id=5579)
{
    public void runtime_error(class std::runtime_error & );
    public void runtime_error(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
    public void ~runtime_error();
    public char * what();
    protected void _Doraise();
    private unsigned char __align0[8];// Offset=0x0 Size=0x8
    private class std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Str;// Offset=0x8 Size=0x1c
    public class std::runtime_error & operator=(class std::runtime_error & );
    public void * __vecDelDtor(unsigned int );
};

class std::ctype<char> : public std::ctype_base// Size=0x18 (Id=5580)
{
    public char * is(char * ,char * ,short * );
    public bool is(short ,char );
    public char * scan_is(short ,char * ,char * );
    public char * scan_not(short ,char * ,char * );
    public char * tolower(char * ,char * );
    public char tolower(char );
    public char * toupper(char * ,char * );
    public char toupper(char );
    public char * widen(char * ,char * ,char * );
    public char widen(char );
    public char * _Widen_s(char * ,char * ,char * ,unsigned int );
    public char * narrow(char * ,char * ,char ,char * );
    public char narrow(char ,char );
    public char * _Narrow_s(char * ,char * ,char ,char * ,unsigned int );
    public class std::locale::id & _Id_func();
    union // Size=0x4 (Id=0)
    {
        class std::locale::id id;// Offset=0x0 Size=0x4
        void ctype<char>(class std::ctype<char> & );
        void ctype<char>(class std::_Locinfo & ,unsigned int );
        void ctype<char>(short * ,bool ,unsigned int );
        unsigned int _Getcat(class std::locale::facet ** ,class std::locale * );
        const unsigned int table_size;// Offset=0x0 Size=0x4
    };
    protected void ~ctype<char>();
    protected void _Init(class std::_Locinfo & );
    protected void _Tidy();
    protected char * do_tolower(char * ,char * );
    protected char do_tolower(char );
    protected char * do_toupper(char * ,char * );
    protected char do_toupper(char );
    protected char * do_widen(char * ,char * ,char * );
    protected char do_widen(char );
    protected char * _Do_widen_s(char * ,char * ,char * ,unsigned int );
    protected char * do_narrow(char * ,char * ,char ,char * );
    protected char do_narrow(char ,char );
    protected char * _Do_narrow_s(char * ,char * ,char ,char * ,unsigned int );
    protected short * table();
    protected short * classic_table();
    private unsigned char __align0[4];// Offset=0x4 Size=0x4
    private struct _Ctypevec _Ctype;// Offset=0x8 Size=0x10
    public class std::ctype<char> & operator=(class std::ctype<char> & );
    public void __dflt_ctor_closure();
    public void __local_vftable_ctor_closure();
    protected void * __vecDelDtor(unsigned int );
};

class std::_Locinfo// Size=0x74 (Id=5581)
{
    public void _Locinfo_ctor(class std::_Locinfo * ,int ,char * );
    public void _Locinfo_ctor(class std::_Locinfo * ,class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
    public void _Locinfo_ctor(class std::_Locinfo * ,char * );
    public void _Locinfo_dtor(class std::_Locinfo * );
    public class std::_Locinfo & _Locinfo_Addcats(class std::_Locinfo * ,int ,char * );
    public void _Locinfo(class std::_Locinfo & );
    public void _Locinfo(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
    public void _Locinfo(int ,char * );
    public void _Locinfo(char * );
    public void ~_Locinfo();
    public class std::_Locinfo & _Addcats(int ,char * );
    public class std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Getname();
    public struct _Collvec _Getcoll();
    public struct _Ctypevec _Getctype();
    public struct _Cvtvec _Getcvt();
    public struct lconv * _Getlconv();
    public class std::_Timevec _Gettnames();
    public char * _Getdays();
    public char * _Getmonths();
    public char * _Getfalse();
    public char * _Gettrue();
    public int _Getdateorder();
    private class std::_Lockit _Lock;// Offset=0x0 Size=0x4
    private class std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Days;// Offset=0x4 Size=0x1c
    private class std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Months;// Offset=0x20 Size=0x1c
    private class std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Oldlocname;// Offset=0x3c Size=0x1c
    private class std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Newlocname;// Offset=0x58 Size=0x1c
    public class std::_Locinfo & operator=(class std::_Locinfo & );
    public void __dflt_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class std::locale::facet// Size=0x8 (Id=5582)
{
    public unsigned int _Getcat(class std::locale::facet ** ,class std::locale * );
    public void _Incref();
    public class std::locale::facet * _Decref();
    public void _Register();
    public void ~facet();
    private void facet(class std::locale::facet & );
    protected void facet(unsigned int );
    private void facet_Register(class std::locale::facet * );
    private class std::locale::facet & operator=(class std::locale::facet & );
    private unsigned char __align0[4];// Offset=0x0 Size=0x4
    private unsigned int _Refs;// Offset=0x4 Size=0x4
    public void __dflt_ctor_closure();
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class std::ctype<char> : public std::ctype_base// Size=0x18 (Id=5583)
{
    public char * is(char * ,char * ,short * );
    public bool is(short ,char );
    public char * scan_is(short ,char * ,char * );
    public char * scan_not(short ,char * ,char * );
    public char * tolower(char * ,char * );
    public char tolower(char );
    public char * toupper(char * ,char * );
    public char toupper(char );
    public char * widen(char * ,char * ,char * );
    public char widen(char );
    public char * _Widen_s(char * ,char * ,char * ,unsigned int );
    public char * narrow(char * ,char * ,char ,char * );
    public char narrow(char ,char );
    public char * _Narrow_s(char * ,char * ,char ,char * ,unsigned int );
    public class std::locale::id & _Id_func();
    union // Size=0x4 (Id=0)
    {
        class std::locale::id id;// Offset=0x0 Size=0x4
        void ctype<char>(class std::ctype<char> & );
        void ctype<char>(class std::_Locinfo & ,unsigned int );
        void ctype<char>(short * ,bool ,unsigned int );
        unsigned int _Getcat(class std::locale::facet ** ,class std::locale * );
        const unsigned int table_size;// Offset=0x0 Size=0x4
    };
    protected void ~ctype<char>();
    protected void _Init(class std::_Locinfo & );
    protected void _Tidy();
    protected char * do_tolower(char * ,char * );
    protected char do_tolower(char );
    protected char * do_toupper(char * ,char * );
    protected char do_toupper(char );
    protected char * do_widen(char * ,char * ,char * );
    protected char do_widen(char );
    protected char * _Do_widen_s(char * ,char * ,char * ,unsigned int );
    protected char * do_narrow(char * ,char * ,char ,char * );
    protected char do_narrow(char ,char );
    protected char * _Do_narrow_s(char * ,char * ,char ,char * ,unsigned int );
    protected short * table();
    protected short * classic_table();
    private unsigned char __align0[4];// Offset=0x4 Size=0x4
    private struct _Ctypevec _Ctype;// Offset=0x8 Size=0x10
    public class std::ctype<char> & operator=(class std::ctype<char> & );
    public void __dflt_ctor_closure();
    public void __local_vftable_ctor_closure();
    protected void * __vecDelDtor(unsigned int );
};

class std::ctype_byname<char> : public std::ctype<char>// Size=0x18 (Id=5584)
{
    public void ctype_byname<char>(class std::ctype_byname<char> & );
    public void ctype_byname<char>(char * ,unsigned int );
    protected void ~ctype_byname<char>();
    public class std::ctype_byname<char> & operator=(class std::ctype_byname<char> & );
    protected void * __vecDelDtor(unsigned int );
};

class std::ctype_byname<char> : public std::ctype<char>// Size=0x18 (Id=5585)
{
    public void ctype_byname<char>(class std::ctype_byname<char> & );
    public void ctype_byname<char>(char * ,unsigned int );
    protected void ~ctype_byname<char>();
    public class std::ctype_byname<char> & operator=(class std::ctype_byname<char> & );
    protected void * __vecDelDtor(unsigned int );
};

class std::allocator<char> : public std::_Allocator_base<char>// Size=0x1 (Id=5586)
{
    public char * address(char & );
    public char * address(char & );
    public void allocator<char>(class std::allocator<char> & );
    public void allocator<char>();
    public void deallocate(char * ,unsigned int );
    public char * allocate(unsigned int ,void * );
    public char * allocate(unsigned int );
    public void construct(char * ,char & );
    public void destroy(char * );
    public unsigned int max_size();
    struct ?$rebind@D// Size=0x1 (Id=59889)
    {
    };// Offset=0x0 Size=0x1
};

class std::allocator<char> : public std::_Allocator_base<char>// Size=0x1 (Id=5587)
{
    public char * address(char & );
    public char * address(char & );
    public void allocator<char>(class std::allocator<char> & );
    public void allocator<char>();
    public void deallocate(char * ,unsigned int );
    public char * allocate(unsigned int ,void * );
    public char * allocate(unsigned int );
    public void construct(char * ,char & );
    public void destroy(char * );
    public unsigned int max_size();
    struct ?$rebind@D// Size=0x1 (Id=59889)
    {
    };// Offset=0x0 Size=0x1
};

struct std::allocator<char>::rebind<char>// Size=0x1 (Id=5588)
{
};

class std::ostreambuf_iterator<char,std::char_traits<char> >// Size=0x0 (Id=5589)
{
};

class std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >// Size=0x0 (Id=5590)
{
};

class std::basic_ostream<char,std::char_traits<char> > : public std::basic_ios<char,std::char_traits<char> >// Size=0x38 (Id=5591)
{
    public void basic_ostream<char,std::char_traits<char> >(class std::basic_ostream<char,std::char_traits<char> > & );
    public void basic_ostream<char,std::char_traits<char> >(enum std::_Uninitialized ,bool );
    public void basic_ostream<char,std::char_traits<char> >(class std::basic_streambuf<char,std::char_traits<char> > * ,bool );
    public void ~basic_ostream<char,std::char_traits<char> >();
    union // Size=0x4 (Id=0)
    {
        class _Sentry_base// Size=0x4 (Id=59910)
        {
            public void _Sentry_base(class std::basic_ostream<char,std::char_traits<char> > & );
            public void ~_Sentry_base();
            public class std::basic_ostream<char,std::char_traits<char> > & _Myostr;// Offset=0x0 Size=0x4
            public void * __vecDelDtor(unsigned int );
        };
        class sentry : public std::basic_ostream<char,std::char_traits<char> >::_Sentry_base// Size=0x8 (Id=59919)
        {
            private void sentry(class std::basic_ostream<char,std::char_traits<char> >::sentry & );
            public void sentry(class std::basic_ostream<char,std::char_traits<char> > & );
            public void ~sentry();
            public bool operator bool();
            private class std::basic_ostream<char,std::char_traits<char> >::sentry & operator=(class std::basic_ostream<char,std::char_traits<char> >::sentry & );
            private unsigned char __align0[4];// Offset=0x0 Size=0x4
            private bool _Ok;// Offset=0x4 Size=0x1
            public void * __vecDelDtor(unsigned int );
        };
    };
    public bool opfx();
    public void osfx();
    public void _Osfx();
    public class std::basic_ostream<char,std::char_traits<char> > & operator<<(class std::basic_streambuf<char,std::char_traits<char> > * );
    public class std::basic_ostream<char,std::char_traits<char> > & operator<<(void * );
    public class std::basic_ostream<char,std::char_traits<char> > & operator<<(float );
    public class std::basic_ostream<char,std::char_traits<char> > & operator<<(float );
    public class std::basic_ostream<char,std::char_traits<char> > & operator<<(float );
    public class std::basic_ostream<char,std::char_traits<char> > & operator<<(unsigned long long );
    public class std::basic_ostream<char,std::char_traits<char> > & operator<<(long long );
    public class std::basic_ostream<char,std::char_traits<char> > & operator<<(unsigned long );
    public class std::basic_ostream<char,std::char_traits<char> > & operator<<(long );
    public class std::basic_ostream<char,std::char_traits<char> > & operator<<(unsigned int );
    public class std::basic_ostream<char,std::char_traits<char> > & operator<<(int );
    public class std::basic_ostream<char,std::char_traits<char> > & operator<<(unsigned short );
    public class std::basic_ostream<char,std::char_traits<char> > & operator<<(short );
    public class std::basic_ostream<char,std::char_traits<char> > & operator<<(bool );
    public class std::basic_ostream<char,std::char_traits<char> > & operator<<(class std::ios_base &  ( * )(class std::ios_base & ));
    public class std::basic_ostream<char,std::char_traits<char> > & operator<<(class std::basic_ios<char,std::char_traits<char> > &  ( * )(class std::basic_ios<char,std::char_traits<char> > & ));
    public class std::basic_ostream<char,std::char_traits<char> > & operator<<(class std::basic_ostream<char,std::char_traits<char> > &  ( * )(class std::basic_ostream<char,std::char_traits<char> > & ));
    public class std::basic_ostream<char,std::char_traits<char> > & put(char );
    public class std::basic_ostream<char,std::char_traits<char> > & write(char * ,int );
    public class std::basic_ostream<char,std::char_traits<char> > & flush();
    public class std::basic_ostream<char,std::char_traits<char> > & seekp(long ,int );
    public class std::basic_ostream<char,std::char_traits<char> > & seekp(class std::fpos<int> );
    public class std::fpos<int> tellp();
    public class std::basic_ostream<char,std::char_traits<char> > & operator=(class std::basic_ostream<char,std::char_traits<char> > & );
    public void * __vecDelDtor(unsigned int );
};

class std::basic_ostream<char,std::char_traits<char> > : public std::basic_ios<char,std::char_traits<char> >// Size=0x38 (Id=5592)
{
    public void basic_ostream<char,std::char_traits<char> >(class std::basic_ostream<char,std::char_traits<char> > & );
    public void basic_ostream<char,std::char_traits<char> >(enum std::_Uninitialized ,bool );
    public void basic_ostream<char,std::char_traits<char> >(class std::basic_streambuf<char,std::char_traits<char> > * ,bool );
    public void ~basic_ostream<char,std::char_traits<char> >();
    union // Size=0x4 (Id=0)
    {
        class _Sentry_base// Size=0x4 (Id=59910)
        {
            public void _Sentry_base(class std::basic_ostream<char,std::char_traits<char> > & );
            public void ~_Sentry_base();
            public class std::basic_ostream<char,std::char_traits<char> > & _Myostr;// Offset=0x0 Size=0x4
            public void * __vecDelDtor(unsigned int );
        };
        class sentry : public std::basic_ostream<char,std::char_traits<char> >::_Sentry_base// Size=0x8 (Id=59919)
        {
            private void sentry(class std::basic_ostream<char,std::char_traits<char> >::sentry & );
            public void sentry(class std::basic_ostream<char,std::char_traits<char> > & );
            public void ~sentry();
            public bool operator bool();
            private class std::basic_ostream<char,std::char_traits<char> >::sentry & operator=(class std::basic_ostream<char,std::char_traits<char> >::sentry & );
            private unsigned char __align0[4];// Offset=0x0 Size=0x4
            private bool _Ok;// Offset=0x4 Size=0x1
            public void * __vecDelDtor(unsigned int );
        };
    };
    public bool opfx();
    public void osfx();
    public void _Osfx();
    public class std::basic_ostream<char,std::char_traits<char> > & operator<<(class std::basic_streambuf<char,std::char_traits<char> > * );
    public class std::basic_ostream<char,std::char_traits<char> > & operator<<(void * );
    public class std::basic_ostream<char,std::char_traits<char> > & operator<<(float );
    public class std::basic_ostream<char,std::char_traits<char> > & operator<<(float );
    public class std::basic_ostream<char,std::char_traits<char> > & operator<<(float );
    public class std::basic_ostream<char,std::char_traits<char> > & operator<<(unsigned long long );
    public class std::basic_ostream<char,std::char_traits<char> > & operator<<(long long );
    public class std::basic_ostream<char,std::char_traits<char> > & operator<<(unsigned long );
    public class std::basic_ostream<char,std::char_traits<char> > & operator<<(long );
    public class std::basic_ostream<char,std::char_traits<char> > & operator<<(unsigned int );
    public class std::basic_ostream<char,std::char_traits<char> > & operator<<(int );
    public class std::basic_ostream<char,std::char_traits<char> > & operator<<(unsigned short );
    public class std::basic_ostream<char,std::char_traits<char> > & operator<<(short );
    public class std::basic_ostream<char,std::char_traits<char> > & operator<<(bool );
    public class std::basic_ostream<char,std::char_traits<char> > & operator<<(class std::ios_base &  ( * )(class std::ios_base & ));
    public class std::basic_ostream<char,std::char_traits<char> > & operator<<(class std::basic_ios<char,std::char_traits<char> > &  ( * )(class std::basic_ios<char,std::char_traits<char> > & ));
    public class std::basic_ostream<char,std::char_traits<char> > & operator<<(class std::basic_ostream<char,std::char_traits<char> > &  ( * )(class std::basic_ostream<char,std::char_traits<char> > & ));
    public class std::basic_ostream<char,std::char_traits<char> > & put(char );
    public class std::basic_ostream<char,std::char_traits<char> > & write(char * ,int );
    public class std::basic_ostream<char,std::char_traits<char> > & flush();
    public class std::basic_ostream<char,std::char_traits<char> > & seekp(long ,int );
    public class std::basic_ostream<char,std::char_traits<char> > & seekp(class std::fpos<int> );
    public class std::fpos<int> tellp();
    public class std::basic_ostream<char,std::char_traits<char> > & operator=(class std::basic_ostream<char,std::char_traits<char> > & );
    public void * __vecDelDtor(unsigned int );
};

class std::basic_ostream<char,std::char_traits<char> >::sentry : public std::basic_ostream<char,std::char_traits<char> >::_Sentry_base// Size=0x8 (Id=5593)
{
    private void sentry(class std::basic_ostream<char,std::char_traits<char> >::sentry & );
    public void sentry(class std::basic_ostream<char,std::char_traits<char> > & );
    public void ~sentry();
    public bool operator bool();
    private class std::basic_ostream<char,std::char_traits<char> >::sentry & operator=(class std::basic_ostream<char,std::char_traits<char> >::sentry & );
    private unsigned char __align0[4];// Offset=0x0 Size=0x4
    private bool _Ok;// Offset=0x4 Size=0x1
    public void * __vecDelDtor(unsigned int );
};

class std::basic_ostream<char,std::char_traits<char> >::sentry : public std::basic_ostream<char,std::char_traits<char> >::_Sentry_base// Size=0x8 (Id=5594)
{
    private void sentry(class std::basic_ostream<char,std::char_traits<char> >::sentry & );
    public void sentry(class std::basic_ostream<char,std::char_traits<char> > & );
    public void ~sentry();
    public bool operator bool();
    private class std::basic_ostream<char,std::char_traits<char> >::sentry & operator=(class std::basic_ostream<char,std::char_traits<char> >::sentry & );
    private unsigned char __align0[4];// Offset=0x0 Size=0x4
    private bool _Ok;// Offset=0x4 Size=0x1
    public void * __vecDelDtor(unsigned int );
};

class std::basic_ostream<char,std::char_traits<char> >::_Sentry_base// Size=0x4 (Id=5595)
{
    public void _Sentry_base(class std::basic_ostream<char,std::char_traits<char> > & );
    public void ~_Sentry_base();
    public class std::basic_ostream<char,std::char_traits<char> > & _Myostr;// Offset=0x0 Size=0x4
    public void * __vecDelDtor(unsigned int );
};

class std::invalid_argument : public std::logic_error// Size=0x24 (Id=5596)
{
    public void invalid_argument(class std::invalid_argument & );
    public void invalid_argument(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
    public void ~invalid_argument();
    protected void _Doraise();
    public class std::invalid_argument & operator=(class std::invalid_argument & );
    public void * __vecDelDtor(unsigned int );
};

class std::invalid_argument : public std::logic_error// Size=0x24 (Id=5597)
{
    public void invalid_argument(class std::invalid_argument & );
    public void invalid_argument(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
    public void ~invalid_argument();
    protected void _Doraise();
    public class std::invalid_argument & operator=(class std::invalid_argument & );
    public void * __vecDelDtor(unsigned int );
};

enum std::codecvt_base::_unnamed_5598
{
    ok=0,
    partial=1,
    error=2,
    noconv=3
};

class std::codecvt_base : public std::locale::facet// Size=0x8 (Id=5599)
{
    enum _unnamed_60018
    {
        ok=0,
        partial=1,
        error=2,
        noconv=3
    };
    public void codecvt_base(class std::codecvt_base & );
    public void codecvt_base(unsigned int );
    public bool always_noconv();
    public int max_length();
    public int encoding();
    public void ~codecvt_base();
    protected bool do_always_noconv();
    protected int do_max_length();
    protected int do_encoding();
    public class std::codecvt_base & operator=(class std::codecvt_base & );
    public void __dflt_ctor_closure();
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class std::codecvt_base : public std::locale::facet// Size=0x8 (Id=5600)
{
    enum _unnamed_60018
    {
        ok=0,
        partial=1,
        error=2,
        noconv=3
    };
    public void codecvt_base(class std::codecvt_base & );
    public void codecvt_base(unsigned int );
    public bool always_noconv();
    public int max_length();
    public int encoding();
    public void ~codecvt_base();
    protected bool do_always_noconv();
    protected int do_max_length();
    protected int do_encoding();
    public class std::codecvt_base & operator=(class std::codecvt_base & );
    public void __dflt_ctor_closure();
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class std::basic_ios<char,std::char_traits<char> > : public std::ios_base// Size=0x34 (Id=5601)
{
    private void basic_ios<char,std::char_traits<char> >(class std::basic_ios<char,std::char_traits<char> > & );
    protected void basic_ios<char,std::char_traits<char> >();
    public void basic_ios<char,std::char_traits<char> >(class std::basic_streambuf<char,std::char_traits<char> > * );
    public void ~basic_ios<char,std::char_traits<char> >();
    public void clear(unsigned int );
    public void clear(int ,bool );
    public void setstate(unsigned int );
    public void setstate(int ,bool );
    public class std::basic_ios<char,std::char_traits<char> > & copyfmt(class std::basic_ios<char,std::char_traits<char> > & );
    public class std::basic_ostream<char,std::char_traits<char> > * tie(class std::basic_ostream<char,std::char_traits<char> > * );
    public class std::basic_ostream<char,std::char_traits<char> > * tie();
    public class std::basic_streambuf<char,std::char_traits<char> > * rdbuf(class std::basic_streambuf<char,std::char_traits<char> > * );
    public class std::basic_streambuf<char,std::char_traits<char> > * rdbuf();
    public class std::locale imbue(class std::locale & );
    public char fill(char );
    public char fill();
    public char narrow(char ,char );
    public char widen(char );
    protected void init(class std::basic_streambuf<char,std::char_traits<char> > * ,bool );
    private class std::basic_ios<char,std::char_traits<char> > & operator=(class std::basic_ios<char,std::char_traits<char> > & );
    private unsigned char __align0[40];// Offset=0x0 Size=0x28
    private class std::basic_streambuf<char,std::char_traits<char> > * _Mystrbuf;// Offset=0x28 Size=0x4
    private class std::basic_ostream<char,std::char_traits<char> > * _Tiestr;// Offset=0x2c Size=0x4
    private char _Fillch;// Offset=0x30 Size=0x1
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class std::basic_ios<char,std::char_traits<char> > : public std::ios_base// Size=0x34 (Id=5602)
{
    private void basic_ios<char,std::char_traits<char> >(class std::basic_ios<char,std::char_traits<char> > & );
    protected void basic_ios<char,std::char_traits<char> >();
    public void basic_ios<char,std::char_traits<char> >(class std::basic_streambuf<char,std::char_traits<char> > * );
    public void ~basic_ios<char,std::char_traits<char> >();
    public void clear(unsigned int );
    public void clear(int ,bool );
    public void setstate(unsigned int );
    public void setstate(int ,bool );
    public class std::basic_ios<char,std::char_traits<char> > & copyfmt(class std::basic_ios<char,std::char_traits<char> > & );
    public class std::basic_ostream<char,std::char_traits<char> > * tie(class std::basic_ostream<char,std::char_traits<char> > * );
    public class std::basic_ostream<char,std::char_traits<char> > * tie();
    public class std::basic_streambuf<char,std::char_traits<char> > * rdbuf(class std::basic_streambuf<char,std::char_traits<char> > * );
    public class std::basic_streambuf<char,std::char_traits<char> > * rdbuf();
    public class std::locale imbue(class std::locale & );
    public char fill(char );
    public char fill();
    public char narrow(char ,char );
    public char widen(char );
    protected void init(class std::basic_streambuf<char,std::char_traits<char> > * ,bool );
    private class std::basic_ios<char,std::char_traits<char> > & operator=(class std::basic_ios<char,std::char_traits<char> > & );
    private unsigned char __align0[40];// Offset=0x0 Size=0x28
    private class std::basic_streambuf<char,std::char_traits<char> > * _Mystrbuf;// Offset=0x28 Size=0x4
    private class std::basic_ostream<char,std::char_traits<char> > * _Tiestr;// Offset=0x2c Size=0x4
    private char _Fillch;// Offset=0x30 Size=0x1
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class std::underflow_error : public std::runtime_error// Size=0x24 (Id=5603)
{
    public void underflow_error(class std::underflow_error & );
    public void underflow_error(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
    public void ~underflow_error();
    protected void _Doraise();
    public class std::underflow_error & operator=(class std::underflow_error & );
    public void * __vecDelDtor(unsigned int );
};

class std::underflow_error : public std::runtime_error// Size=0x24 (Id=5604)
{
    public void underflow_error(class std::underflow_error & );
    public void underflow_error(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
    public void ~underflow_error();
    protected void _Doraise();
    public class std::underflow_error & operator=(class std::underflow_error & );
    public void * __vecDelDtor(unsigned int );
};

class std::logic_error : public stdext::exception// Size=0x24 (Id=5605)
{
    public void logic_error(class std::logic_error & );
    public void logic_error(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
    public void ~logic_error();
    public char * what();
    protected void _Doraise();
    private unsigned char __align0[8];// Offset=0x0 Size=0x8
    private class std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Str;// Offset=0x8 Size=0x1c
    public class std::logic_error & operator=(class std::logic_error & );
    public void * __vecDelDtor(unsigned int );
};

class std::logic_error : public stdext::exception// Size=0x24 (Id=5606)
{
    public void logic_error(class std::logic_error & );
    public void logic_error(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
    public void ~logic_error();
    public char * what();
    protected void _Doraise();
    private unsigned char __align0[8];// Offset=0x0 Size=0x8
    private class std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Str;// Offset=0x8 Size=0x1c
    public class std::logic_error & operator=(class std::logic_error & );
    public void * __vecDelDtor(unsigned int );
};

class std::istreambuf_iterator<char,std::char_traits<char> >// Size=0x0 (Id=5607)
{
};

class std::num_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >// Size=0x0 (Id=5608)
{
};

class std::basic_istream<char,std::char_traits<char> > : public std::basic_ios<char,std::char_traits<char> >// Size=0x3c (Id=5609)
{
    public void basic_istream<char,std::char_traits<char> >(class std::basic_istream<char,std::char_traits<char> > & );
    public void basic_istream<char,std::char_traits<char> >(enum std::_Uninitialized );
    public void basic_istream<char,std::char_traits<char> >(class std::basic_streambuf<char,std::char_traits<char> > * ,bool );
    public void ~basic_istream<char,std::char_traits<char> >();
    union // Size=0x4 (Id=0)
    {
        class _Sentry_base// Size=0x4 (Id=60149)
        {
            public void _Sentry_base(class std::basic_istream<char,std::char_traits<char> > & );
            public void ~_Sentry_base();
            public class std::basic_istream<char,std::char_traits<char> > & _Myistr;// Offset=0x0 Size=0x4
            public void * __vecDelDtor(unsigned int );
        };
        class sentry : public std::basic_istream<char,std::char_traits<char> >::_Sentry_base// Size=0x8 (Id=60158)
        {
            private void sentry(class std::basic_istream<char,std::char_traits<char> >::sentry & );
            public void sentry(class std::basic_istream<char,std::char_traits<char> > & ,bool );
            public bool operator bool();
            private class std::basic_istream<char,std::char_traits<char> >::sentry & operator=(class std::basic_istream<char,std::char_traits<char> >::sentry & );
            private unsigned char __align0[4];// Offset=0x0 Size=0x4
            private bool _Ok;// Offset=0x4 Size=0x1
            public void ~sentry();
            public void * __vecDelDtor(unsigned int );
        };
    };
    public bool _Ipfx(bool );
    public bool ipfx(bool );
    public void isfx();
    public class std::basic_istream<char,std::char_traits<char> > & operator>>(class std::basic_streambuf<char,std::char_traits<char> > * );
    public class std::basic_istream<char,std::char_traits<char> > & operator>>(void &** );
    public class std::basic_istream<char,std::char_traits<char> > & operator>>(float & );
    public class std::basic_istream<char,std::char_traits<char> > & operator>>(float & );
    public class std::basic_istream<char,std::char_traits<char> > & operator>>(float & );
    public class std::basic_istream<char,std::char_traits<char> > & operator>>(unsigned long long & );
    public class std::basic_istream<char,std::char_traits<char> > & operator>>(long long & );
    public class std::basic_istream<char,std::char_traits<char> > & operator>>(unsigned long & );
    public class std::basic_istream<char,std::char_traits<char> > & operator>>(long & );
    public class std::basic_istream<char,std::char_traits<char> > & operator>>(unsigned int & );
    public class std::basic_istream<char,std::char_traits<char> > & operator>>(int & );
    public class std::basic_istream<char,std::char_traits<char> > & operator>>(unsigned short & );
    public class std::basic_istream<char,std::char_traits<char> > & operator>>(short & );
    public class std::basic_istream<char,std::char_traits<char> > & operator>>(bool & );
    public class std::basic_istream<char,std::char_traits<char> > & operator>>(class std::ios_base &  ( * )(class std::ios_base & ));
    public class std::basic_istream<char,std::char_traits<char> > & operator>>(class std::basic_ios<char,std::char_traits<char> > &  ( * )(class std::basic_ios<char,std::char_traits<char> > & ));
    public class std::basic_istream<char,std::char_traits<char> > & operator>>(class std::basic_istream<char,std::char_traits<char> > &  ( * )(class std::basic_istream<char,std::char_traits<char> > & ));
    public class std::basic_istream<char,std::char_traits<char> > & get(class std::basic_streambuf<char,std::char_traits<char> > & ,char );
    public class std::basic_istream<char,std::char_traits<char> > & get(class std::basic_streambuf<char,std::char_traits<char> > & );
    public class std::basic_istream<char,std::char_traits<char> > & get(char & );
    public class std::basic_istream<char,std::char_traits<char> > & get(char * ,int ,char );
    public class std::basic_istream<char,std::char_traits<char> > & get(char * ,int );
    public int get();
    public class std::basic_istream<char,std::char_traits<char> > & getline(char * ,int ,char );
    public class std::basic_istream<char,std::char_traits<char> > & getline(char * ,int );
    public class std::basic_istream<char,std::char_traits<char> > & ignore(int ,int );
    public class std::basic_istream<char,std::char_traits<char> > & _Read_s(char * ,unsigned int ,int );
    public class std::basic_istream<char,std::char_traits<char> > & read(char * ,int );
    public int _Readsome_s(char * ,unsigned int ,int );
    public int readsome(char * ,int );
    public int peek();
    public class std::basic_istream<char,std::char_traits<char> > & putback(char );
    public class std::basic_istream<char,std::char_traits<char> > & unget();
    public int gcount();
    public int sync();
    public class std::basic_istream<char,std::char_traits<char> > & seekg(long ,int );
    public class std::basic_istream<char,std::char_traits<char> > & seekg(class std::fpos<int> );
    public class std::fpos<int> tellg();
    private int _Chcount;// Offset=0x4 Size=0x4
    public class std::basic_istream<char,std::char_traits<char> > & operator=(class std::basic_istream<char,std::char_traits<char> > & );
    public void * __vecDelDtor(unsigned int );
};

class std::basic_istream<char,std::char_traits<char> > : public std::basic_ios<char,std::char_traits<char> >// Size=0x3c (Id=5610)
{
    public void basic_istream<char,std::char_traits<char> >(class std::basic_istream<char,std::char_traits<char> > & );
    public void basic_istream<char,std::char_traits<char> >(enum std::_Uninitialized );
    public void basic_istream<char,std::char_traits<char> >(class std::basic_streambuf<char,std::char_traits<char> > * ,bool );
    public void ~basic_istream<char,std::char_traits<char> >();
    union // Size=0x4 (Id=0)
    {
        class _Sentry_base// Size=0x4 (Id=60149)
        {
            public void _Sentry_base(class std::basic_istream<char,std::char_traits<char> > & );
            public void ~_Sentry_base();
            public class std::basic_istream<char,std::char_traits<char> > & _Myistr;// Offset=0x0 Size=0x4
            public void * __vecDelDtor(unsigned int );
        };
        class sentry : public std::basic_istream<char,std::char_traits<char> >::_Sentry_base// Size=0x8 (Id=60158)
        {
            private void sentry(class std::basic_istream<char,std::char_traits<char> >::sentry & );
            public void sentry(class std::basic_istream<char,std::char_traits<char> > & ,bool );
            public bool operator bool();
            private class std::basic_istream<char,std::char_traits<char> >::sentry & operator=(class std::basic_istream<char,std::char_traits<char> >::sentry & );
            private unsigned char __align0[4];// Offset=0x0 Size=0x4
            private bool _Ok;// Offset=0x4 Size=0x1
            public void ~sentry();
            public void * __vecDelDtor(unsigned int );
        };
    };
    public bool _Ipfx(bool );
    public bool ipfx(bool );
    public void isfx();
    public class std::basic_istream<char,std::char_traits<char> > & operator>>(class std::basic_streambuf<char,std::char_traits<char> > * );
    public class std::basic_istream<char,std::char_traits<char> > & operator>>(void &** );
    public class std::basic_istream<char,std::char_traits<char> > & operator>>(float & );
    public class std::basic_istream<char,std::char_traits<char> > & operator>>(float & );
    public class std::basic_istream<char,std::char_traits<char> > & operator>>(float & );
    public class std::basic_istream<char,std::char_traits<char> > & operator>>(unsigned long long & );
    public class std::basic_istream<char,std::char_traits<char> > & operator>>(long long & );
    public class std::basic_istream<char,std::char_traits<char> > & operator>>(unsigned long & );
    public class std::basic_istream<char,std::char_traits<char> > & operator>>(long & );
    public class std::basic_istream<char,std::char_traits<char> > & operator>>(unsigned int & );
    public class std::basic_istream<char,std::char_traits<char> > & operator>>(int & );
    public class std::basic_istream<char,std::char_traits<char> > & operator>>(unsigned short & );
    public class std::basic_istream<char,std::char_traits<char> > & operator>>(short & );
    public class std::basic_istream<char,std::char_traits<char> > & operator>>(bool & );
    public class std::basic_istream<char,std::char_traits<char> > & operator>>(class std::ios_base &  ( * )(class std::ios_base & ));
    public class std::basic_istream<char,std::char_traits<char> > & operator>>(class std::basic_ios<char,std::char_traits<char> > &  ( * )(class std::basic_ios<char,std::char_traits<char> > & ));
    public class std::basic_istream<char,std::char_traits<char> > & operator>>(class std::basic_istream<char,std::char_traits<char> > &  ( * )(class std::basic_istream<char,std::char_traits<char> > & ));
    public class std::basic_istream<char,std::char_traits<char> > & get(class std::basic_streambuf<char,std::char_traits<char> > & ,char );
    public class std::basic_istream<char,std::char_traits<char> > & get(class std::basic_streambuf<char,std::char_traits<char> > & );
    public class std::basic_istream<char,std::char_traits<char> > & get(char & );
    public class std::basic_istream<char,std::char_traits<char> > & get(char * ,int ,char );
    public class std::basic_istream<char,std::char_traits<char> > & get(char * ,int );
    public int get();
    public class std::basic_istream<char,std::char_traits<char> > & getline(char * ,int ,char );
    public class std::basic_istream<char,std::char_traits<char> > & getline(char * ,int );
    public class std::basic_istream<char,std::char_traits<char> > & ignore(int ,int );
    public class std::basic_istream<char,std::char_traits<char> > & _Read_s(char * ,unsigned int ,int );
    public class std::basic_istream<char,std::char_traits<char> > & read(char * ,int );
    public int _Readsome_s(char * ,unsigned int ,int );
    public int readsome(char * ,int );
    public int peek();
    public class std::basic_istream<char,std::char_traits<char> > & putback(char );
    public class std::basic_istream<char,std::char_traits<char> > & unget();
    public int gcount();
    public int sync();
    public class std::basic_istream<char,std::char_traits<char> > & seekg(long ,int );
    public class std::basic_istream<char,std::char_traits<char> > & seekg(class std::fpos<int> );
    public class std::fpos<int> tellg();
    private int _Chcount;// Offset=0x4 Size=0x4
    public class std::basic_istream<char,std::char_traits<char> > & operator=(class std::basic_istream<char,std::char_traits<char> > & );
    public void * __vecDelDtor(unsigned int );
};

class std::basic_istream<char,std::char_traits<char> >::sentry : public std::basic_istream<char,std::char_traits<char> >::_Sentry_base// Size=0x8 (Id=5611)
{
    private void sentry(class std::basic_istream<char,std::char_traits<char> >::sentry & );
    public void sentry(class std::basic_istream<char,std::char_traits<char> > & ,bool );
    public bool operator bool();
    private class std::basic_istream<char,std::char_traits<char> >::sentry & operator=(class std::basic_istream<char,std::char_traits<char> >::sentry & );
    private unsigned char __align0[4];// Offset=0x0 Size=0x4
    private bool _Ok;// Offset=0x4 Size=0x1
    public void ~sentry();
    public void * __vecDelDtor(unsigned int );
};

class std::basic_istream<char,std::char_traits<char> >::sentry : public std::basic_istream<char,std::char_traits<char> >::_Sentry_base// Size=0x8 (Id=5612)
{
    private void sentry(class std::basic_istream<char,std::char_traits<char> >::sentry & );
    public void sentry(class std::basic_istream<char,std::char_traits<char> > & ,bool );
    public bool operator bool();
    private class std::basic_istream<char,std::char_traits<char> >::sentry & operator=(class std::basic_istream<char,std::char_traits<char> >::sentry & );
    private unsigned char __align0[4];// Offset=0x0 Size=0x4
    private bool _Ok;// Offset=0x4 Size=0x1
    public void ~sentry();
    public void * __vecDelDtor(unsigned int );
};

class std::basic_istream<char,std::char_traits<char> >::_Sentry_base// Size=0x4 (Id=5613)
{
    public void _Sentry_base(class std::basic_istream<char,std::char_traits<char> > & );
    public void ~_Sentry_base();
    public class std::basic_istream<char,std::char_traits<char> > & _Myistr;// Offset=0x0 Size=0x4
    public void * __vecDelDtor(unsigned int );
};

class std::_String_val<char,std::allocator<char> > : public std::_String_base// Size=0x1 (Id=5614)
{
    public void _String_val<char,std::allocator<char> >(class std::_String_val<char,std::allocator<char> > & );
    protected void _String_val<char,std::allocator<char> >(class std::allocator<char> );
    protected class std::allocator<char> _Alval;// Offset=0x0 Size=0x1
    public void __dflt_ctor_closure();
};

class std::_String_val<char,std::allocator<char> > : public std::_String_base// Size=0x1 (Id=5615)
{
    public void _String_val<char,std::allocator<char> >(class std::_String_val<char,std::allocator<char> > & );
    protected void _String_val<char,std::allocator<char> >(class std::allocator<char> );
    protected class std::allocator<char> _Alval;// Offset=0x0 Size=0x1
    public void __dflt_ctor_closure();
};

enum std::_Iosb<int>::_Dummy_enum
{
    _Dummy_enum_val=1
};

enum std::_Iosb<int>::_Fmtflags
{
    _Fmtmask=65535,
    _Fmtzero=0
};

enum std::_Iosb<int>::_Fmtflags
{
    _Fmtmask=65535,
    _Fmtzero=0
};

enum std::_Iosb<int>::_Iostate
{
    _Statmask=23
};

enum std::_Iosb<int>::_Iostate
{
    _Statmask=23
};

enum std::_Iosb<int>::_Openmode
{
    _Openmask=255
};

enum std::_Iosb<int>::_Openmode
{
    _Openmask=255
};

enum std::_Iosb<int>::_Seekdir
{
    _Seekmask=3
};

enum std::_Iosb<int>::_Seekdir
{
    _Seekmask=3
};

enum std::_Iosb<int>::_unnamed_5625
{
    _Openprot=64
};

class std::_Iosb<int>// Size=0x1 (Id=5626)
{
    enum _Dummy_enum
    {
        _Dummy_enum_val=1
    };
    enum _Fmtflags
    {
        _Fmtmask=65535,
        _Fmtzero=0
    };
    union // Size=0x4 (Id=0)
    {
        const enum std::_Iosb<int>::_Fmtflags skipws;// Offset=0x0 Size=0x4
        const enum std::_Iosb<int>::_Fmtflags unitbuf;// Offset=0x0 Size=0x4
        const enum std::_Iosb<int>::_Fmtflags uppercase;// Offset=0x0 Size=0x4
        const enum std::_Iosb<int>::_Fmtflags showbase;// Offset=0x0 Size=0x4
        const enum std::_Iosb<int>::_Fmtflags showpoint;// Offset=0x0 Size=0x4
        const enum std::_Iosb<int>::_Fmtflags showpos;// Offset=0x0 Size=0x4
        const enum std::_Iosb<int>::_Fmtflags left;// Offset=0x0 Size=0x4
        const enum std::_Iosb<int>::_Fmtflags right;// Offset=0x0 Size=0x4
        const enum std::_Iosb<int>::_Fmtflags internal;// Offset=0x0 Size=0x4
        const enum std::_Iosb<int>::_Fmtflags dec;// Offset=0x0 Size=0x4
        const enum std::_Iosb<int>::_Fmtflags oct;// Offset=0x0 Size=0x4
        const enum std::_Iosb<int>::_Fmtflags hex;// Offset=0x0 Size=0x4
        const enum std::_Iosb<int>::_Fmtflags scientific;// Offset=0x0 Size=0x4
        const enum std::_Iosb<int>::_Fmtflags fixed;// Offset=0x0 Size=0x4
        const enum std::_Iosb<int>::_Fmtflags hexfloat;// Offset=0x0 Size=0x4
        const enum std::_Iosb<int>::_Fmtflags boolalpha;// Offset=0x0 Size=0x4
        const enum std::_Iosb<int>::_Fmtflags _Stdio;// Offset=0x0 Size=0x4
        const enum std::_Iosb<int>::_Fmtflags adjustfield;// Offset=0x0 Size=0x4
        const enum std::_Iosb<int>::_Fmtflags basefield;// Offset=0x0 Size=0x4
        const enum std::_Iosb<int>::_Fmtflags floatfield;// Offset=0x0 Size=0x4
        enum _Iostate
        {
            _Statmask=23
        };
        const enum std::_Iosb<int>::_Iostate goodbit;// Offset=0x0 Size=0x4
        const enum std::_Iosb<int>::_Iostate eofbit;// Offset=0x0 Size=0x4
        const enum std::_Iosb<int>::_Iostate failbit;// Offset=0x0 Size=0x4
        const enum std::_Iosb<int>::_Iostate badbit;// Offset=0x0 Size=0x4
        const enum std::_Iosb<int>::_Iostate _Hardfail;// Offset=0x0 Size=0x4
        enum _Openmode
        {
            _Openmask=255
        };
        const enum std::_Iosb<int>::_Openmode in;// Offset=0x0 Size=0x4
        const enum std::_Iosb<int>::_Openmode out;// Offset=0x0 Size=0x4
        const enum std::_Iosb<int>::_Openmode ate;// Offset=0x0 Size=0x4
        const enum std::_Iosb<int>::_Openmode app;// Offset=0x0 Size=0x4
        const enum std::_Iosb<int>::_Openmode trunc;// Offset=0x0 Size=0x4
        const enum std::_Iosb<int>::_Openmode _Nocreate;// Offset=0x0 Size=0x4
        const enum std::_Iosb<int>::_Openmode _Noreplace;// Offset=0x0 Size=0x4
        const enum std::_Iosb<int>::_Openmode binary;// Offset=0x0 Size=0x4
        enum _Seekdir
        {
            _Seekmask=3
        };
        const enum std::_Iosb<int>::_Seekdir beg;// Offset=0x0 Size=0x4
        const enum std::_Iosb<int>::_Seekdir cur;// Offset=0x0 Size=0x4
        const enum std::_Iosb<int>::_Seekdir end;// Offset=0x0 Size=0x4
    };
    enum _unnamed_60321
    {
        _Openprot=64
    };
};

class std::codecvt<unsigned short,char,int> : public std::codecvt_base// Size=0x10 (Id=5627)
{
    public int in(int & ,char * ,char * ,char &** ,unsigned short * ,unsigned short * ,unsigned short &** );
    public int out(int & ,unsigned short * ,unsigned short * ,unsigned short &** ,char * ,char * ,char &** );
    public int unshift(int & ,char * ,char * ,char &** );
    public int length(int & ,char * ,char * ,unsigned int );
    public class std::locale::id & _Id_func();
    public class std::locale::id id;// Offset=0x0 Size=0x4
    public void codecvt<unsigned short,char,int>(class std::codecvt<unsigned short,char,int> & );
    protected void codecvt<unsigned short,char,int>(char * ,unsigned int );
    public void codecvt<unsigned short,char,int>(class std::_Locinfo & ,unsigned int );
    public void codecvt<unsigned short,char,int>(unsigned int );
    public unsigned int _Getcat(class std::locale::facet ** ,class std::locale * );
    protected void ~codecvt<unsigned short,char,int>();
    protected void _Init(class std::_Locinfo & );
    protected int do_in(int & ,char * ,char * ,char &** ,unsigned short * ,unsigned short * ,unsigned short &** );
    protected int do_out(int & ,unsigned short * ,unsigned short * ,unsigned short &** ,char * ,char * ,char &** );
    protected int do_unshift(int & ,char * ,char * ,char &** );
    protected int do_length(int & ,char * ,char * ,unsigned int );
    protected bool do_always_noconv();
    protected int do_max_length();
    private unsigned char __align0[4];// Offset=0x4 Size=0x4
    private struct _Cvtvec _Cvt;// Offset=0x8 Size=0x8
    public class std::codecvt<unsigned short,char,int> & operator=(class std::codecvt<unsigned short,char,int> & );
    public void __dflt_ctor_closure();
    public void __local_vftable_ctor_closure();
    protected void * __vecDelDtor(unsigned int );
};

class std::codecvt<unsigned short,char,int> : public std::codecvt_base// Size=0x10 (Id=5628)
{
    public int in(int & ,char * ,char * ,char &** ,unsigned short * ,unsigned short * ,unsigned short &** );
    public int out(int & ,unsigned short * ,unsigned short * ,unsigned short &** ,char * ,char * ,char &** );
    public int unshift(int & ,char * ,char * ,char &** );
    public int length(int & ,char * ,char * ,unsigned int );
    public class std::locale::id & _Id_func();
    public class std::locale::id id;// Offset=0x0 Size=0x4
    public void codecvt<unsigned short,char,int>(class std::codecvt<unsigned short,char,int> & );
    protected void codecvt<unsigned short,char,int>(char * ,unsigned int );
    public void codecvt<unsigned short,char,int>(class std::_Locinfo & ,unsigned int );
    public void codecvt<unsigned short,char,int>(unsigned int );
    public unsigned int _Getcat(class std::locale::facet ** ,class std::locale * );
    protected void ~codecvt<unsigned short,char,int>();
    protected void _Init(class std::_Locinfo & );
    protected int do_in(int & ,char * ,char * ,char &** ,unsigned short * ,unsigned short * ,unsigned short &** );
    protected int do_out(int & ,unsigned short * ,unsigned short * ,unsigned short &** ,char * ,char * ,char &** );
    protected int do_unshift(int & ,char * ,char * ,char &** );
    protected int do_length(int & ,char * ,char * ,unsigned int );
    protected bool do_always_noconv();
    protected int do_max_length();
    private unsigned char __align0[4];// Offset=0x4 Size=0x4
    private struct _Cvtvec _Cvt;// Offset=0x8 Size=0x8
    public class std::codecvt<unsigned short,char,int> & operator=(class std::codecvt<unsigned short,char,int> & );
    public void __dflt_ctor_closure();
    public void __local_vftable_ctor_closure();
    protected void * __vecDelDtor(unsigned int );
};

class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > : public std::_Ranit_base<char,int,char const *,char const &,std::_Iterator_base_secure>// Size=0x8 (Id=5629)
{
    public char * _Checked_iterator_base();
    public void _Checked_iterator_assign_from_base(char * );
    public void _String_const_iterator<char,std::char_traits<char>,std::allocator<char> >(char * ,class std::_Container_base_secure * );
    public void _String_const_iterator<char,std::char_traits<char>,std::allocator<char> >();
    public char & operator*();
    public char * operator->();
    public class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > operator++(int );
    public class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > & operator++();
    public class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > operator--(int );
    public class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > & operator--();
    public class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > & operator+=(int );
    public class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > operator+(int );
    public class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > & operator-=(int );
    public int operator-(class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > & );
    public class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > operator-(int );
    public char & operator[](int );
    public bool operator==(class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > & );
    public bool operator!=(class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > & );
    public bool operator<(class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > & );
    public bool operator>(class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > & );
    public bool operator<=(class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > & );
    public bool operator>=(class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > & );
    public void _Xlen();
    public void _Xran();
    public void _Xinvarg();
    private unsigned char __align0[4];// Offset=0x0 Size=0x4
    public char * _Myptr;// Offset=0x4 Size=0x4
};

class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > : public std::_Ranit_base<char,int,char const *,char const &,std::_Iterator_base_secure>// Size=0x8 (Id=5630)
{
    public char * _Checked_iterator_base();
    public void _Checked_iterator_assign_from_base(char * );
    public void _String_const_iterator<char,std::char_traits<char>,std::allocator<char> >(char * ,class std::_Container_base_secure * );
    public void _String_const_iterator<char,std::char_traits<char>,std::allocator<char> >();
    public char & operator*();
    public char * operator->();
    public class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > operator++(int );
    public class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > & operator++();
    public class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > operator--(int );
    public class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > & operator--();
    public class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > & operator+=(int );
    public class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > operator+(int );
    public class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > & operator-=(int );
    public int operator-(class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > & );
    public class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > operator-(int );
    public char & operator[](int );
    public bool operator==(class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > & );
    public bool operator!=(class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > & );
    public bool operator<(class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > & );
    public bool operator>(class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > & );
    public bool operator<=(class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > & );
    public bool operator>=(class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > & );
    public void _Xlen();
    public void _Xran();
    public void _Xinvarg();
    private unsigned char __align0[4];// Offset=0x0 Size=0x4
    public char * _Myptr;// Offset=0x4 Size=0x4
};

class std::ctype<wchar_t> : public std::ctype_base// Size=0x20 (Id=5631)
{
    public wchar_t * is(wchar_t * ,wchar_t * ,short * );
    public bool is(short ,wchar_t );
    public wchar_t * scan_is(short ,wchar_t * ,wchar_t * );
    public wchar_t * scan_not(short ,wchar_t * ,wchar_t * );
    public wchar_t * tolower(wchar_t * ,wchar_t * );
    public wchar_t tolower(wchar_t );
    public wchar_t * toupper(wchar_t * ,wchar_t * );
    public wchar_t toupper(wchar_t );
    public char * widen(char * ,char * ,wchar_t * );
    public wchar_t widen(char );
    public char * _Widen_s(char * ,char * ,wchar_t * ,unsigned int );
    public wchar_t * narrow(wchar_t * ,wchar_t * ,char ,char * );
    public char narrow(wchar_t ,char );
    public wchar_t * _Narrow_s(wchar_t * ,wchar_t * ,char ,char * ,unsigned int );
    public class std::locale::id & _Id_func();
    public class std::locale::id id;// Offset=0x0 Size=0x4
    public void ctype<wchar_t>(class std::ctype<wchar_t> & );
    public void ctype<wchar_t>(class std::_Locinfo & ,unsigned int );
    public void ctype<wchar_t>(unsigned int );
    public unsigned int _Getcat(class std::locale::facet ** ,class std::locale * );
    protected void ~ctype<wchar_t>();
    protected void _Init(class std::_Locinfo & );
    protected wchar_t * do_is(wchar_t * ,wchar_t * ,short * );
    protected bool do_is(short ,wchar_t );
    protected wchar_t * do_scan_is(short ,wchar_t * ,wchar_t * );
    protected wchar_t * do_scan_not(short ,wchar_t * ,wchar_t * );
    protected wchar_t * do_tolower(wchar_t * ,wchar_t * );
    protected wchar_t do_tolower(wchar_t );
    protected wchar_t * do_toupper(wchar_t * ,wchar_t * );
    protected wchar_t do_toupper(wchar_t );
    protected wchar_t _Dowiden(char );
    protected char * do_widen(char * ,char * ,wchar_t * );
    protected wchar_t do_widen(char );
    protected char * _Do_widen_s(char * ,char * ,wchar_t * ,unsigned int );
    protected char _Donarrow(wchar_t ,char );
    protected wchar_t * do_narrow(wchar_t * ,wchar_t * ,char ,char * );
    protected char do_narrow(wchar_t ,char );
    protected wchar_t * _Do_narrow_s(wchar_t * ,wchar_t * ,char ,char * ,unsigned int );
    private unsigned char __align0[4];// Offset=0x4 Size=0x4
    private struct _Ctypevec _Ctype;// Offset=0x8 Size=0x10
    private struct _Cvtvec _Cvt;// Offset=0x18 Size=0x8
    public class std::ctype<wchar_t> & operator=(class std::ctype<wchar_t> & );
    public void __dflt_ctor_closure();
    public void __local_vftable_ctor_closure();
    protected void * __vecDelDtor(unsigned int );
};

class std::ctype<wchar_t> : public std::ctype_base// Size=0x20 (Id=5632)
{
    public wchar_t * is(wchar_t * ,wchar_t * ,short * );
    public bool is(short ,wchar_t );
    public wchar_t * scan_is(short ,wchar_t * ,wchar_t * );
    public wchar_t * scan_not(short ,wchar_t * ,wchar_t * );
    public wchar_t * tolower(wchar_t * ,wchar_t * );
    public wchar_t tolower(wchar_t );
    public wchar_t * toupper(wchar_t * ,wchar_t * );
    public wchar_t toupper(wchar_t );
    public char * widen(char * ,char * ,wchar_t * );
    public wchar_t widen(char );
    public char * _Widen_s(char * ,char * ,wchar_t * ,unsigned int );
    public wchar_t * narrow(wchar_t * ,wchar_t * ,char ,char * );
    public char narrow(wchar_t ,char );
    public wchar_t * _Narrow_s(wchar_t * ,wchar_t * ,char ,char * ,unsigned int );
    public class std::locale::id & _Id_func();
    public class std::locale::id id;// Offset=0x0 Size=0x4
    public void ctype<wchar_t>(class std::ctype<wchar_t> & );
    public void ctype<wchar_t>(class std::_Locinfo & ,unsigned int );
    public void ctype<wchar_t>(unsigned int );
    public unsigned int _Getcat(class std::locale::facet ** ,class std::locale * );
    protected void ~ctype<wchar_t>();
    protected void _Init(class std::_Locinfo & );
    protected wchar_t * do_is(wchar_t * ,wchar_t * ,short * );
    protected bool do_is(short ,wchar_t );
    protected wchar_t * do_scan_is(short ,wchar_t * ,wchar_t * );
    protected wchar_t * do_scan_not(short ,wchar_t * ,wchar_t * );
    protected wchar_t * do_tolower(wchar_t * ,wchar_t * );
    protected wchar_t do_tolower(wchar_t );
    protected wchar_t * do_toupper(wchar_t * ,wchar_t * );
    protected wchar_t do_toupper(wchar_t );
    protected wchar_t _Dowiden(char );
    protected char * do_widen(char * ,char * ,wchar_t * );
    protected wchar_t do_widen(char );
    protected char * _Do_widen_s(char * ,char * ,wchar_t * ,unsigned int );
    protected char _Donarrow(wchar_t ,char );
    protected wchar_t * do_narrow(wchar_t * ,wchar_t * ,char ,char * );
    protected char do_narrow(wchar_t ,char );
    protected wchar_t * _Do_narrow_s(wchar_t * ,wchar_t * ,char ,char * ,unsigned int );
    private unsigned char __align0[4];// Offset=0x4 Size=0x4
    private struct _Ctypevec _Ctype;// Offset=0x8 Size=0x10
    private struct _Cvtvec _Cvt;// Offset=0x18 Size=0x8
    public class std::ctype<wchar_t> & operator=(class std::ctype<wchar_t> & );
    public void __dflt_ctor_closure();
    public void __local_vftable_ctor_closure();
    protected void * __vecDelDtor(unsigned int );
};

class std::domain_error : public std::logic_error// Size=0x24 (Id=5633)
{
    public void domain_error(class std::domain_error & );
    public void domain_error(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
    public void ~domain_error();
    protected void _Doraise();
    public class std::domain_error & operator=(class std::domain_error & );
    public void * __vecDelDtor(unsigned int );
};

class std::domain_error : public std::logic_error// Size=0x24 (Id=5634)
{
    public void domain_error(class std::domain_error & );
    public void domain_error(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
    public void ~domain_error();
    protected void _Doraise();
    public class std::domain_error & operator=(class std::domain_error & );
    public void * __vecDelDtor(unsigned int );
};

struct std::_Allocator_base<char>// Size=0x1 (Id=5635)
{
};

class std::overflow_error : public std::runtime_error// Size=0x24 (Id=5636)
{
    public void overflow_error(class std::overflow_error & );
    public void overflow_error(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
    public void ~overflow_error();
    protected void _Doraise();
    public class std::overflow_error & operator=(class std::overflow_error & );
    public void * __vecDelDtor(unsigned int );
};

class std::overflow_error : public std::runtime_error// Size=0x24 (Id=5637)
{
    public void overflow_error(class std::overflow_error & );
    public void overflow_error(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
    public void ~overflow_error();
    protected void _Doraise();
    public class std::overflow_error & operator=(class std::overflow_error & );
    public void * __vecDelDtor(unsigned int );
};

class std::ctype<unsigned short> : public std::ctype_base// Size=0x20 (Id=5638)
{
    public unsigned short * is(unsigned short * ,unsigned short * ,short * );
    public bool is(short ,unsigned short );
    public unsigned short * scan_is(short ,unsigned short * ,unsigned short * );
    public unsigned short * scan_not(short ,unsigned short * ,unsigned short * );
    public unsigned short * tolower(unsigned short * ,unsigned short * );
    public unsigned short tolower(unsigned short );
    public unsigned short * toupper(unsigned short * ,unsigned short * );
    public unsigned short toupper(unsigned short );
    public char * widen(char * ,char * ,unsigned short * );
    public unsigned short widen(char );
    public char * _Widen_s(char * ,char * ,unsigned short * ,unsigned int );
    public unsigned short * narrow(unsigned short * ,unsigned short * ,char ,char * );
    public char narrow(unsigned short ,char );
    public unsigned short * _Narrow_s(unsigned short * ,unsigned short * ,char ,char * ,unsigned int );
    public class std::locale::id & _Id_func();
    public class std::locale::id id;// Offset=0x0 Size=0x4
    public void ctype<unsigned short>(class std::ctype<unsigned short> & );
    protected void ctype<unsigned short>(char * ,unsigned int );
    public void ctype<unsigned short>(class std::_Locinfo & ,unsigned int );
    public void ctype<unsigned short>(unsigned int );
    public unsigned int _Getcat(class std::locale::facet ** ,class std::locale * );
    protected void ~ctype<unsigned short>();
    protected void _Init(class std::_Locinfo & );
    protected unsigned short * do_is(unsigned short * ,unsigned short * ,short * );
    protected bool do_is(short ,unsigned short );
    protected unsigned short * do_scan_is(short ,unsigned short * ,unsigned short * );
    protected unsigned short * do_scan_not(short ,unsigned short * ,unsigned short * );
    protected unsigned short * do_tolower(unsigned short * ,unsigned short * );
    protected unsigned short do_tolower(unsigned short );
    protected unsigned short * do_toupper(unsigned short * ,unsigned short * );
    protected unsigned short do_toupper(unsigned short );
    protected unsigned short _Dowiden(char );
    protected char * do_widen(char * ,char * ,unsigned short * );
    protected unsigned short do_widen(char );
    protected char * _Do_widen_s(char * ,char * ,unsigned short * ,unsigned int );
    protected char _Donarrow(unsigned short ,char );
    protected unsigned short * do_narrow(unsigned short * ,unsigned short * ,char ,char * );
    protected char do_narrow(unsigned short ,char );
    protected unsigned short * _Do_narrow_s(unsigned short * ,unsigned short * ,char ,char * ,unsigned int );
    private unsigned char __align0[4];// Offset=0x4 Size=0x4
    private struct _Ctypevec _Ctype;// Offset=0x8 Size=0x10
    private struct _Cvtvec _Cvt;// Offset=0x18 Size=0x8
    public class std::ctype<unsigned short> & operator=(class std::ctype<unsigned short> & );
    public void __dflt_ctor_closure();
    public void __local_vftable_ctor_closure();
    protected void * __vecDelDtor(unsigned int );
};

class std::ctype<unsigned short> : public std::ctype_base// Size=0x20 (Id=5639)
{
    public unsigned short * is(unsigned short * ,unsigned short * ,short * );
    public bool is(short ,unsigned short );
    public unsigned short * scan_is(short ,unsigned short * ,unsigned short * );
    public unsigned short * scan_not(short ,unsigned short * ,unsigned short * );
    public unsigned short * tolower(unsigned short * ,unsigned short * );
    public unsigned short tolower(unsigned short );
    public unsigned short * toupper(unsigned short * ,unsigned short * );
    public unsigned short toupper(unsigned short );
    public char * widen(char * ,char * ,unsigned short * );
    public unsigned short widen(char );
    public char * _Widen_s(char * ,char * ,unsigned short * ,unsigned int );
    public unsigned short * narrow(unsigned short * ,unsigned short * ,char ,char * );
    public char narrow(unsigned short ,char );
    public unsigned short * _Narrow_s(unsigned short * ,unsigned short * ,char ,char * ,unsigned int );
    public class std::locale::id & _Id_func();
    public class std::locale::id id;// Offset=0x0 Size=0x4
    public void ctype<unsigned short>(class std::ctype<unsigned short> & );
    protected void ctype<unsigned short>(char * ,unsigned int );
    public void ctype<unsigned short>(class std::_Locinfo & ,unsigned int );
    public void ctype<unsigned short>(unsigned int );
    public unsigned int _Getcat(class std::locale::facet ** ,class std::locale * );
    protected void ~ctype<unsigned short>();
    protected void _Init(class std::_Locinfo & );
    protected unsigned short * do_is(unsigned short * ,unsigned short * ,short * );
    protected bool do_is(short ,unsigned short );
    protected unsigned short * do_scan_is(short ,unsigned short * ,unsigned short * );
    protected unsigned short * do_scan_not(short ,unsigned short * ,unsigned short * );
    protected unsigned short * do_tolower(unsigned short * ,unsigned short * );
    protected unsigned short do_tolower(unsigned short );
    protected unsigned short * do_toupper(unsigned short * ,unsigned short * );
    protected unsigned short do_toupper(unsigned short );
    protected unsigned short _Dowiden(char );
    protected char * do_widen(char * ,char * ,unsigned short * );
    protected unsigned short do_widen(char );
    protected char * _Do_widen_s(char * ,char * ,unsigned short * ,unsigned int );
    protected char _Donarrow(unsigned short ,char );
    protected unsigned short * do_narrow(unsigned short * ,unsigned short * ,char ,char * );
    protected char do_narrow(unsigned short ,char );
    protected unsigned short * _Do_narrow_s(unsigned short * ,unsigned short * ,char ,char * ,unsigned int );
    private unsigned char __align0[4];// Offset=0x4 Size=0x4
    private struct _Ctypevec _Ctype;// Offset=0x8 Size=0x10
    private struct _Cvtvec _Cvt;// Offset=0x18 Size=0x8
    public class std::ctype<unsigned short> & operator=(class std::ctype<unsigned short> & );
    public void __dflt_ctor_closure();
    public void __local_vftable_ctor_closure();
    protected void * __vecDelDtor(unsigned int );
};

class std::range_error : public std::runtime_error// Size=0x24 (Id=5640)
{
    public void range_error(class std::range_error & );
    public void range_error(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
    public void ~range_error();
    protected void _Doraise();
    public class std::range_error & operator=(class std::range_error & );
    public void * __vecDelDtor(unsigned int );
};

class std::range_error : public std::runtime_error// Size=0x24 (Id=5641)
{
    public void range_error(class std::range_error & );
    public void range_error(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
    public void ~range_error();
    protected void _Doraise();
    public class std::range_error & operator=(class std::range_error & );
    public void * __vecDelDtor(unsigned int );
};

class std::basic_ios<wchar_t,std::char_traits<wchar_t> > : public std::ios_base// Size=0x34 (Id=5642)
{
    private void basic_ios<wchar_t,std::char_traits<wchar_t> >(class std::basic_ios<wchar_t,std::char_traits<wchar_t> > & );
    protected void basic_ios<wchar_t,std::char_traits<wchar_t> >();
    public void basic_ios<wchar_t,std::char_traits<wchar_t> >(class std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > * );
    public void ~basic_ios<wchar_t,std::char_traits<wchar_t> >();
    public void clear(unsigned int );
    public void clear(int ,bool );
    public void setstate(unsigned int );
    public void setstate(int ,bool );
    public class std::basic_ios<wchar_t,std::char_traits<wchar_t> > & copyfmt(class std::basic_ios<wchar_t,std::char_traits<wchar_t> > & );
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > * tie(class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > * );
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > * tie();
    public class std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > * rdbuf(class std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > * );
    public class std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > * rdbuf();
    public class std::locale imbue(class std::locale & );
    public wchar_t fill(wchar_t );
    public wchar_t fill();
    public char narrow(wchar_t ,char );
    public wchar_t widen(char );
    protected void init(class std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > * ,bool );
    private class std::basic_ios<wchar_t,std::char_traits<wchar_t> > & operator=(class std::basic_ios<wchar_t,std::char_traits<wchar_t> > & );
    private unsigned char __align0[40];// Offset=0x0 Size=0x28
    private class std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > * _Mystrbuf;// Offset=0x28 Size=0x4
    private class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > * _Tiestr;// Offset=0x2c Size=0x4
    private wchar_t _Fillch;// Offset=0x30 Size=0x2
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class std::basic_ios<wchar_t,std::char_traits<wchar_t> > : public std::ios_base// Size=0x34 (Id=5643)
{
    private void basic_ios<wchar_t,std::char_traits<wchar_t> >(class std::basic_ios<wchar_t,std::char_traits<wchar_t> > & );
    protected void basic_ios<wchar_t,std::char_traits<wchar_t> >();
    public void basic_ios<wchar_t,std::char_traits<wchar_t> >(class std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > * );
    public void ~basic_ios<wchar_t,std::char_traits<wchar_t> >();
    public void clear(unsigned int );
    public void clear(int ,bool );
    public void setstate(unsigned int );
    public void setstate(int ,bool );
    public class std::basic_ios<wchar_t,std::char_traits<wchar_t> > & copyfmt(class std::basic_ios<wchar_t,std::char_traits<wchar_t> > & );
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > * tie(class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > * );
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > * tie();
    public class std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > * rdbuf(class std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > * );
    public class std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > * rdbuf();
    public class std::locale imbue(class std::locale & );
    public wchar_t fill(wchar_t );
    public wchar_t fill();
    public char narrow(wchar_t ,char );
    public wchar_t widen(char );
    protected void init(class std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > * ,bool );
    private class std::basic_ios<wchar_t,std::char_traits<wchar_t> > & operator=(class std::basic_ios<wchar_t,std::char_traits<wchar_t> > & );
    private unsigned char __align0[40];// Offset=0x0 Size=0x28
    private class std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > * _Mystrbuf;// Offset=0x28 Size=0x4
    private class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > * _Tiestr;// Offset=0x2c Size=0x4
    private wchar_t _Fillch;// Offset=0x30 Size=0x2
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

struct lconv// Size=0x30 (Id=5644)
{
    char * decimal_point;// Offset=0x0 Size=0x4
    char * thousands_sep;// Offset=0x4 Size=0x4
    char * grouping;// Offset=0x8 Size=0x4
    char * int_curr_symbol;// Offset=0xc Size=0x4
    char * currency_symbol;// Offset=0x10 Size=0x4
    char * mon_decimal_point;// Offset=0x14 Size=0x4
    char * mon_thousands_sep;// Offset=0x18 Size=0x4
    char * mon_grouping;// Offset=0x1c Size=0x4
    char * positive_sign;// Offset=0x20 Size=0x4
    char * negative_sign;// Offset=0x24 Size=0x4
    char int_frac_digits;// Offset=0x28 Size=0x1
    char frac_digits;// Offset=0x29 Size=0x1
    char p_cs_precedes;// Offset=0x2a Size=0x1
    char p_sep_by_space;// Offset=0x2b Size=0x1
    char n_cs_precedes;// Offset=0x2c Size=0x1
    char n_sep_by_space;// Offset=0x2d Size=0x1
    char p_sign_posn;// Offset=0x2e Size=0x1
    char n_sign_posn;// Offset=0x2f Size=0x1
};

class std::_Locinfo// Size=0x74 (Id=5645)
{
    public void _Locinfo_ctor(class std::_Locinfo * ,int ,char * );
    public void _Locinfo_ctor(class std::_Locinfo * ,class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
    public void _Locinfo_ctor(class std::_Locinfo * ,char * );
    public void _Locinfo_dtor(class std::_Locinfo * );
    public class std::_Locinfo & _Locinfo_Addcats(class std::_Locinfo * ,int ,char * );
    public void _Locinfo(class std::_Locinfo & );
    public void _Locinfo(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
    public void _Locinfo(int ,char * );
    public void _Locinfo(char * );
    public void ~_Locinfo();
    public class std::_Locinfo & _Addcats(int ,char * );
    public class std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Getname();
    public struct _Collvec _Getcoll();
    public struct _Ctypevec _Getctype();
    public struct _Cvtvec _Getcvt();
    public struct lconv * _Getlconv();
    public class std::_Timevec _Gettnames();
    public char * _Getdays();
    public char * _Getmonths();
    public char * _Getfalse();
    public char * _Gettrue();
    public int _Getdateorder();
    private class std::_Lockit _Lock;// Offset=0x0 Size=0x4
    private class std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Days;// Offset=0x4 Size=0x1c
    private class std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Months;// Offset=0x20 Size=0x1c
    private class std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Oldlocname;// Offset=0x3c Size=0x1c
    private class std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Newlocname;// Offset=0x58 Size=0x1c
    public class std::_Locinfo & operator=(class std::_Locinfo & );
    public void __dflt_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class std::out_of_range : public std::logic_error// Size=0x24 (Id=5646)
{
    public void out_of_range(class std::out_of_range & );
    public void out_of_range(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
    public void ~out_of_range();
    protected void _Doraise();
    public class std::out_of_range & operator=(class std::out_of_range & );
    public void * __vecDelDtor(unsigned int );
};

class std::out_of_range : public std::logic_error// Size=0x24 (Id=5647)
{
    public void out_of_range(class std::out_of_range & );
    public void out_of_range(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
    public void ~out_of_range();
    protected void _Doraise();
    public class std::out_of_range & operator=(class std::out_of_range & );
    public void * __vecDelDtor(unsigned int );
};

class std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> >// Size=0x0 (Id=5648)
{
};

class std::num_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >// Size=0x0 (Id=5649)
{
};

class std::basic_istream<wchar_t,std::char_traits<wchar_t> > : public std::basic_ios<wchar_t,std::char_traits<wchar_t> >// Size=0x3c (Id=5650)
{
    public void basic_istream<wchar_t,std::char_traits<wchar_t> >(class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & );
    public void basic_istream<wchar_t,std::char_traits<wchar_t> >(enum std::_Uninitialized );
    public void basic_istream<wchar_t,std::char_traits<wchar_t> >(class std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > * ,bool );
    public void ~basic_istream<wchar_t,std::char_traits<wchar_t> >();
    union // Size=0x4 (Id=0)
    {
        class _Sentry_base// Size=0x4 (Id=60705)
        {
            public void _Sentry_base(class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & );
            public void ~_Sentry_base();
            public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & _Myistr;// Offset=0x0 Size=0x4
            public void * __vecDelDtor(unsigned int );
        };
        class sentry : public std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base// Size=0x8 (Id=60714)
        {
            private void sentry(class std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry & );
            public void sentry(class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & ,bool );
            public bool operator bool();
            private class std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry & operator=(class std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry & );
            private unsigned char __align0[4];// Offset=0x0 Size=0x4
            private bool _Ok;// Offset=0x4 Size=0x1
            public void ~sentry();
            public void * __vecDelDtor(unsigned int );
        };
    };
    public bool _Ipfx(bool );
    public bool ipfx(bool );
    public void isfx();
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & operator>>(class std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > * );
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & operator>>(void &** );
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & operator>>(float & );
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & operator>>(float & );
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & operator>>(float & );
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & operator>>(unsigned long long & );
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & operator>>(long long & );
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & operator>>(unsigned long & );
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & operator>>(long & );
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & operator>>(unsigned int & );
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & operator>>(int & );
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & operator>>(unsigned short & );
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & operator>>(short & );
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & operator>>(bool & );
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & operator>>(class std::ios_base &  ( * )(class std::ios_base & ));
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & operator>>(class std::basic_ios<wchar_t,std::char_traits<wchar_t> > &  ( * )(class std::basic_ios<wchar_t,std::char_traits<wchar_t> > & ));
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & operator>>(class std::basic_istream<wchar_t,std::char_traits<wchar_t> > &  ( * )(class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & ));
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & get(class std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > & ,wchar_t );
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & get(class std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > & );
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & get(wchar_t & );
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & get(wchar_t * ,int ,wchar_t );
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & get(wchar_t * ,int );
    public unsigned short get();
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & getline(wchar_t * ,int ,wchar_t );
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & getline(wchar_t * ,int );
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & ignore(int ,unsigned short );
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & _Read_s(wchar_t * ,unsigned int ,int );
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & read(wchar_t * ,int );
    public int _Readsome_s(wchar_t * ,unsigned int ,int );
    public int readsome(wchar_t * ,int );
    public unsigned short peek();
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & putback(wchar_t );
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & unget();
    public int gcount();
    public int sync();
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & seekg(long ,int );
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & seekg(class std::fpos<int> );
    public class std::fpos<int> tellg();
    private int _Chcount;// Offset=0x4 Size=0x4
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & operator=(class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & );
    public void * __vecDelDtor(unsigned int );
};

class std::basic_istream<wchar_t,std::char_traits<wchar_t> > : public std::basic_ios<wchar_t,std::char_traits<wchar_t> >// Size=0x3c (Id=5651)
{
    public void basic_istream<wchar_t,std::char_traits<wchar_t> >(class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & );
    public void basic_istream<wchar_t,std::char_traits<wchar_t> >(enum std::_Uninitialized );
    public void basic_istream<wchar_t,std::char_traits<wchar_t> >(class std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > * ,bool );
    public void ~basic_istream<wchar_t,std::char_traits<wchar_t> >();
    union // Size=0x4 (Id=0)
    {
        class _Sentry_base// Size=0x4 (Id=60705)
        {
            public void _Sentry_base(class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & );
            public void ~_Sentry_base();
            public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & _Myistr;// Offset=0x0 Size=0x4
            public void * __vecDelDtor(unsigned int );
        };
        class sentry : public std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base// Size=0x8 (Id=60714)
        {
            private void sentry(class std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry & );
            public void sentry(class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & ,bool );
            public bool operator bool();
            private class std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry & operator=(class std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry & );
            private unsigned char __align0[4];// Offset=0x0 Size=0x4
            private bool _Ok;// Offset=0x4 Size=0x1
            public void ~sentry();
            public void * __vecDelDtor(unsigned int );
        };
    };
    public bool _Ipfx(bool );
    public bool ipfx(bool );
    public void isfx();
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & operator>>(class std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > * );
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & operator>>(void &** );
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & operator>>(float & );
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & operator>>(float & );
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & operator>>(float & );
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & operator>>(unsigned long long & );
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & operator>>(long long & );
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & operator>>(unsigned long & );
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & operator>>(long & );
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & operator>>(unsigned int & );
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & operator>>(int & );
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & operator>>(unsigned short & );
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & operator>>(short & );
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & operator>>(bool & );
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & operator>>(class std::ios_base &  ( * )(class std::ios_base & ));
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & operator>>(class std::basic_ios<wchar_t,std::char_traits<wchar_t> > &  ( * )(class std::basic_ios<wchar_t,std::char_traits<wchar_t> > & ));
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & operator>>(class std::basic_istream<wchar_t,std::char_traits<wchar_t> > &  ( * )(class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & ));
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & get(class std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > & ,wchar_t );
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & get(class std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > & );
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & get(wchar_t & );
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & get(wchar_t * ,int ,wchar_t );
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & get(wchar_t * ,int );
    public unsigned short get();
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & getline(wchar_t * ,int ,wchar_t );
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & getline(wchar_t * ,int );
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & ignore(int ,unsigned short );
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & _Read_s(wchar_t * ,unsigned int ,int );
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & read(wchar_t * ,int );
    public int _Readsome_s(wchar_t * ,unsigned int ,int );
    public int readsome(wchar_t * ,int );
    public unsigned short peek();
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & putback(wchar_t );
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & unget();
    public int gcount();
    public int sync();
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & seekg(long ,int );
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & seekg(class std::fpos<int> );
    public class std::fpos<int> tellg();
    private int _Chcount;// Offset=0x4 Size=0x4
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & operator=(class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & );
    public void * __vecDelDtor(unsigned int );
};

class std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry : public std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base// Size=0x8 (Id=5652)
{
    private void sentry(class std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry & );
    public void sentry(class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & ,bool );
    public bool operator bool();
    private class std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry & operator=(class std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry & );
    private unsigned char __align0[4];// Offset=0x0 Size=0x4
    private bool _Ok;// Offset=0x4 Size=0x1
    public void ~sentry();
    public void * __vecDelDtor(unsigned int );
};

class std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry : public std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base// Size=0x8 (Id=5653)
{
    private void sentry(class std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry & );
    public void sentry(class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & ,bool );
    public bool operator bool();
    private class std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry & operator=(class std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry & );
    private unsigned char __align0[4];// Offset=0x0 Size=0x4
    private bool _Ok;// Offset=0x4 Size=0x1
    public void ~sentry();
    public void * __vecDelDtor(unsigned int );
};

class std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base// Size=0x4 (Id=5654)
{
    public void _Sentry_base(class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & );
    public void ~_Sentry_base();
    public class std::basic_istream<wchar_t,std::char_traits<wchar_t> > & _Myistr;// Offset=0x0 Size=0x4
    public void * __vecDelDtor(unsigned int );
};

class std::basic_streambuf<char,std::char_traits<char> >// Size=0x3c (Id=5655)
{
    protected void basic_streambuf<char,std::char_traits<char> >(enum std::_Uninitialized );
    protected void basic_streambuf<char,std::char_traits<char> >();
    private void basic_streambuf<char,std::char_traits<char> >(class std::basic_streambuf<char,std::char_traits<char> > & );
    private class std::basic_streambuf<char,std::char_traits<char> > & operator=(class std::basic_streambuf<char,std::char_traits<char> > & );
    public void ~basic_streambuf<char,std::char_traits<char> >();
    public class std::fpos<int> pubseekoff(long ,unsigned int ,unsigned int );
    public class std::fpos<int> pubseekoff(long ,int ,int );
    public class std::fpos<int> pubseekpos(class std::fpos<int> ,unsigned int );
    public class std::fpos<int> pubseekpos(class std::fpos<int> ,int );
    public class std::basic_streambuf<char,std::char_traits<char> > * pubsetbuf(char * ,int );
    public class std::locale pubimbue(class std::locale & );
    public class std::locale getloc();
    public int in_avail();
    public int pubsync();
    public int sbumpc();
    public int sgetc();
    public int _Sgetn_s(char * ,unsigned int ,int );
    public int sgetn(char * ,int );
    public int snextc();
    public int sputbackc(char );
    public void stossc();
    public int sungetc();
    public int sputc(char );
    public int sputn(char * ,int );
    public void _Lock();
    public void _Unlock();
    protected char * eback();
    protected char * gptr();
    protected char * pbase();
    protected char * pptr();
    protected char * egptr();
    protected void gbump(int );
    protected void setg(char * ,char * ,char * );
    protected char * epptr();
    protected char * _Gndec();
    protected char * _Gninc();
    protected char * _Gnpreinc();
    protected int _Gnavail();
    protected void pbump(int );
    protected void setp(char * ,char * ,char * );
    protected void setp(char * ,char * );
    protected char * _Pninc();
    protected int _Pnavail();
    protected void _Init(char ** ,char ** ,int * ,char ** ,char ** ,int * );
    protected void _Init();
    protected int overflow(int );
    protected int pbackfail(int );
    protected int showmanyc();
    protected int underflow();
    protected int uflow();
    protected int xsgetn(char * ,int );
    protected int _Xsgetn_s(char * ,unsigned int ,int );
    protected int xsputn(char * ,int );
    protected class std::fpos<int> seekoff(long ,int ,int );
    protected class std::fpos<int> seekpos(class std::fpos<int> ,int );
    protected class std::basic_streambuf<char,std::char_traits<char> > * setbuf(char * ,int );
    protected int sync();
    protected void imbue(class std::locale & );
    private unsigned char __align0[4];// Offset=0x0 Size=0x4
    private class std::_Mutex _Mylock;// Offset=0x4 Size=0x4
    private char * _Gfirst;// Offset=0x8 Size=0x4
    private char * _Pfirst;// Offset=0xc Size=0x4
    private char ** _IGfirst;// Offset=0x10 Size=0x4
    private char ** _IPfirst;// Offset=0x14 Size=0x4
    private char * _Gnext;// Offset=0x18 Size=0x4
    private char * _Pnext;// Offset=0x1c Size=0x4
    private char ** _IGnext;// Offset=0x20 Size=0x4
    private char ** _IPnext;// Offset=0x24 Size=0x4
    private int _Gcount;// Offset=0x28 Size=0x4
    private int _Pcount;// Offset=0x2c Size=0x4
    private int * _IGcount;// Offset=0x30 Size=0x4
    private int * _IPcount;// Offset=0x34 Size=0x4
    private class std::locale * _Plocale;// Offset=0x38 Size=0x4
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class std::basic_streambuf<char,std::char_traits<char> >// Size=0x3c (Id=5656)
{
    protected void basic_streambuf<char,std::char_traits<char> >(enum std::_Uninitialized );
    protected void basic_streambuf<char,std::char_traits<char> >();
    private void basic_streambuf<char,std::char_traits<char> >(class std::basic_streambuf<char,std::char_traits<char> > & );
    private class std::basic_streambuf<char,std::char_traits<char> > & operator=(class std::basic_streambuf<char,std::char_traits<char> > & );
    public void ~basic_streambuf<char,std::char_traits<char> >();
    public class std::fpos<int> pubseekoff(long ,unsigned int ,unsigned int );
    public class std::fpos<int> pubseekoff(long ,int ,int );
    public class std::fpos<int> pubseekpos(class std::fpos<int> ,unsigned int );
    public class std::fpos<int> pubseekpos(class std::fpos<int> ,int );
    public class std::basic_streambuf<char,std::char_traits<char> > * pubsetbuf(char * ,int );
    public class std::locale pubimbue(class std::locale & );
    public class std::locale getloc();
    public int in_avail();
    public int pubsync();
    public int sbumpc();
    public int sgetc();
    public int _Sgetn_s(char * ,unsigned int ,int );
    public int sgetn(char * ,int );
    public int snextc();
    public int sputbackc(char );
    public void stossc();
    public int sungetc();
    public int sputc(char );
    public int sputn(char * ,int );
    public void _Lock();
    public void _Unlock();
    protected char * eback();
    protected char * gptr();
    protected char * pbase();
    protected char * pptr();
    protected char * egptr();
    protected void gbump(int );
    protected void setg(char * ,char * ,char * );
    protected char * epptr();
    protected char * _Gndec();
    protected char * _Gninc();
    protected char * _Gnpreinc();
    protected int _Gnavail();
    protected void pbump(int );
    protected void setp(char * ,char * ,char * );
    protected void setp(char * ,char * );
    protected char * _Pninc();
    protected int _Pnavail();
    protected void _Init(char ** ,char ** ,int * ,char ** ,char ** ,int * );
    protected void _Init();
    protected int overflow(int );
    protected int pbackfail(int );
    protected int showmanyc();
    protected int underflow();
    protected int uflow();
    protected int xsgetn(char * ,int );
    protected int _Xsgetn_s(char * ,unsigned int ,int );
    protected int xsputn(char * ,int );
    protected class std::fpos<int> seekoff(long ,int ,int );
    protected class std::fpos<int> seekpos(class std::fpos<int> ,int );
    protected class std::basic_streambuf<char,std::char_traits<char> > * setbuf(char * ,int );
    protected int sync();
    protected void imbue(class std::locale & );
    private unsigned char __align0[4];// Offset=0x0 Size=0x4
    private class std::_Mutex _Mylock;// Offset=0x4 Size=0x4
    private char * _Gfirst;// Offset=0x8 Size=0x4
    private char * _Pfirst;// Offset=0xc Size=0x4
    private char ** _IGfirst;// Offset=0x10 Size=0x4
    private char ** _IPfirst;// Offset=0x14 Size=0x4
    private char * _Gnext;// Offset=0x18 Size=0x4
    private char * _Pnext;// Offset=0x1c Size=0x4
    private char ** _IGnext;// Offset=0x20 Size=0x4
    private char ** _IPnext;// Offset=0x24 Size=0x4
    private int _Gcount;// Offset=0x28 Size=0x4
    private int _Pcount;// Offset=0x2c Size=0x4
    private int * _IGcount;// Offset=0x30 Size=0x4
    private int * _IPcount;// Offset=0x34 Size=0x4
    private class std::locale * _Plocale;// Offset=0x38 Size=0x4
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class std::fpos<int>// Size=0x18 (Id=5657)
{
    public void fpos<int>(int ,long long );
    public void fpos<int>(long );
    public void state(int );
    public int state();
    public long long seekpos();
    public long operator long();
    public class std::fpos<int> operator-(long );
    public long operator-(class std::fpos<int> & );
    public class std::fpos<int> & operator+=(long );
    public class std::fpos<int> & operator-=(long );
    public class std::fpos<int> operator+(long );
    public bool operator==(class std::fpos<int> & );
    public bool operator!=(class std::fpos<int> & );
    union // Size=0x4 (Id=0)
    {
        const int _Stz;// Offset=0x0 Size=0x4
        long _Myoff;// Offset=0x0 Size=0x4
    };
    private unsigned char __align0[4];// Offset=0x4 Size=0x4
    private long long _Fpos;// Offset=0x8 Size=0x8
    private int _Mystate;// Offset=0x10 Size=0x4
    public void __dflt_ctor_closure();
};

class std::fpos<int>// Size=0x18 (Id=5658)
{
    public void fpos<int>(int ,long long );
    public void fpos<int>(long );
    public void state(int );
    public int state();
    public long long seekpos();
    public long operator long();
    public class std::fpos<int> operator-(long );
    public long operator-(class std::fpos<int> & );
    public class std::fpos<int> & operator+=(long );
    public class std::fpos<int> & operator-=(long );
    public class std::fpos<int> operator+(long );
    public bool operator==(class std::fpos<int> & );
    public bool operator!=(class std::fpos<int> & );
    union // Size=0x4 (Id=0)
    {
        const int _Stz;// Offset=0x0 Size=0x4
        long _Myoff;// Offset=0x0 Size=0x4
    };
    private unsigned char __align0[4];// Offset=0x4 Size=0x4
    private long long _Fpos;// Offset=0x8 Size=0x8
    private int _Mystate;// Offset=0x10 Size=0x4
    public void __dflt_ctor_closure();
};

class std::_Lockit// Size=0x4 (Id=5659)
{
    private void _Lockit(class std::_Lockit & );
    public void _Lockit(int );
    public void _Lockit();
    public void ~_Lockit();
    private void _Lockit_ctor(class std::_Lockit * ,int );
    private void _Lockit_ctor(class std::_Lockit * );
    public void _Lockit_ctor(int );
    private void _Lockit_dtor(class std::_Lockit * );
    public void _Lockit_dtor(int );
    private class std::_Lockit & operator=(class std::_Lockit & );
    private int _Locktype;// Offset=0x0 Size=0x4
    public void * __vecDelDtor(unsigned int );
};

class std::_Lockit// Size=0x4 (Id=5660)
{
    private void _Lockit(class std::_Lockit & );
    public void _Lockit(int );
    public void _Lockit();
    public void ~_Lockit();
    private void _Lockit_ctor(class std::_Lockit * ,int );
    private void _Lockit_ctor(class std::_Lockit * );
    public void _Lockit_ctor(int );
    private void _Lockit_dtor(class std::_Lockit * );
    public void _Lockit_dtor(int );
    private class std::_Lockit & operator=(class std::_Lockit & );
    private int _Locktype;// Offset=0x0 Size=0x4
    public void * __vecDelDtor(unsigned int );
};

class std::codecvt<wchar_t,char,int> : public std::codecvt_base// Size=0x10 (Id=5661)
{
    public int in(int & ,char * ,char * ,char &** ,wchar_t * ,wchar_t * ,wchar_t &** );
    public int out(int & ,wchar_t * ,wchar_t * ,wchar_t &** ,char * ,char * ,char &** );
    public int unshift(int & ,char * ,char * ,char &** );
    public int length(int & ,char * ,char * ,unsigned int );
    public class std::locale::id & _Id_func();
    public class std::locale::id id;// Offset=0x0 Size=0x4
    public void codecvt<wchar_t,char,int>(class std::codecvt<wchar_t,char,int> & );
    public void codecvt<wchar_t,char,int>(class std::_Locinfo & ,unsigned int );
    public void codecvt<wchar_t,char,int>(unsigned int );
    public unsigned int _Getcat(class std::locale::facet ** ,class std::locale * );
    protected void ~codecvt<wchar_t,char,int>();
    protected void _Init(class std::_Locinfo & );
    protected int do_in(int & ,char * ,char * ,char &** ,wchar_t * ,wchar_t * ,wchar_t &** );
    protected int do_out(int & ,wchar_t * ,wchar_t * ,wchar_t &** ,char * ,char * ,char &** );
    protected int do_unshift(int & ,char * ,char * ,char &** );
    protected int do_length(int & ,char * ,char * ,unsigned int );
    protected bool do_always_noconv();
    protected int do_max_length();
    private unsigned char __align0[4];// Offset=0x4 Size=0x4
    private struct _Cvtvec _Cvt;// Offset=0x8 Size=0x8
    public class std::codecvt<wchar_t,char,int> & operator=(class std::codecvt<wchar_t,char,int> & );
    public void __dflt_ctor_closure();
    public void __local_vftable_ctor_closure();
    protected void * __vecDelDtor(unsigned int );
};

class std::codecvt<wchar_t,char,int> : public std::codecvt_base// Size=0x10 (Id=5662)
{
    public int in(int & ,char * ,char * ,char &** ,wchar_t * ,wchar_t * ,wchar_t &** );
    public int out(int & ,wchar_t * ,wchar_t * ,wchar_t &** ,char * ,char * ,char &** );
    public int unshift(int & ,char * ,char * ,char &** );
    public int length(int & ,char * ,char * ,unsigned int );
    public class std::locale::id & _Id_func();
    public class std::locale::id id;// Offset=0x0 Size=0x4
    public void codecvt<wchar_t,char,int>(class std::codecvt<wchar_t,char,int> & );
    public void codecvt<wchar_t,char,int>(class std::_Locinfo & ,unsigned int );
    public void codecvt<wchar_t,char,int>(unsigned int );
    public unsigned int _Getcat(class std::locale::facet ** ,class std::locale * );
    protected void ~codecvt<wchar_t,char,int>();
    protected void _Init(class std::_Locinfo & );
    protected int do_in(int & ,char * ,char * ,char &** ,wchar_t * ,wchar_t * ,wchar_t &** );
    protected int do_out(int & ,wchar_t * ,wchar_t * ,wchar_t &** ,char * ,char * ,char &** );
    protected int do_unshift(int & ,char * ,char * ,char &** );
    protected int do_length(int & ,char * ,char * ,unsigned int );
    protected bool do_always_noconv();
    protected int do_max_length();
    private unsigned char __align0[4];// Offset=0x4 Size=0x4
    private struct _Cvtvec _Cvt;// Offset=0x8 Size=0x8
    public class std::codecvt<wchar_t,char,int> & operator=(class std::codecvt<wchar_t,char,int> & );
    public void __dflt_ctor_closure();
    public void __local_vftable_ctor_closure();
    protected void * __vecDelDtor(unsigned int );
};

class std::_String_base : public std::_Container_base_secure// Size=0x1 (Id=5663)
{
    public void _Xlen();
    public void _Xran();
    public void _Xinvarg();
};

class std::_Mutex// Size=0x4 (Id=5664)
{
    private void _Mutex(class std::_Mutex & );
    public void _Mutex();
    public void ~_Mutex();
    public void _Lock();
    public void _Unlock();
    private void _Mutex_ctor(class std::_Mutex * );
    private void _Mutex_dtor(class std::_Mutex * );
    private void _Mutex_Lock(class std::_Mutex * );
    private void _Mutex_Unlock(class std::_Mutex * );
    private class std::_Mutex & operator=(class std::_Mutex & );
    private void * _Mtx;// Offset=0x0 Size=0x4
    public void * __vecDelDtor(unsigned int );
};

class std::_Mutex// Size=0x4 (Id=5665)
{
    private void _Mutex(class std::_Mutex & );
    public void _Mutex();
    public void ~_Mutex();
    public void _Lock();
    public void _Unlock();
    private void _Mutex_ctor(class std::_Mutex * );
    private void _Mutex_dtor(class std::_Mutex * );
    private void _Mutex_Lock(class std::_Mutex * );
    private void _Mutex_Unlock(class std::_Mutex * );
    private class std::_Mutex & operator=(class std::_Mutex & );
    private void * _Mtx;// Offset=0x0 Size=0x4
    public void * __vecDelDtor(unsigned int );
};

class std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> >// Size=0x0 (Id=5666)
{
};

class std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >// Size=0x0 (Id=5667)
{
};

class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > : public std::basic_ios<wchar_t,std::char_traits<wchar_t> >// Size=0x38 (Id=5668)
{
    public void basic_ostream<wchar_t,std::char_traits<wchar_t> >(class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & );
    public void basic_ostream<wchar_t,std::char_traits<wchar_t> >(enum std::_Uninitialized ,bool );
    public void basic_ostream<wchar_t,std::char_traits<wchar_t> >(class std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > * ,bool );
    public void ~basic_ostream<wchar_t,std::char_traits<wchar_t> >();
    union // Size=0x4 (Id=0)
    {
        class _Sentry_base// Size=0x4 (Id=61074)
        {
            public void _Sentry_base(class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & );
            public void ~_Sentry_base();
            public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & _Myostr;// Offset=0x0 Size=0x4
            public void * __vecDelDtor(unsigned int );
        };
        class sentry : public std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base// Size=0x8 (Id=61083)
        {
            private void sentry(class std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry & );
            public void sentry(class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & );
            public void ~sentry();
            public bool operator bool();
            private class std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry & operator=(class std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry & );
            private unsigned char __align0[4];// Offset=0x0 Size=0x4
            private bool _Ok;// Offset=0x4 Size=0x1
            public void * __vecDelDtor(unsigned int );
        };
    };
    public bool opfx();
    public void osfx();
    public void _Osfx();
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & operator<<(class std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > * );
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & operator<<(void * );
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & operator<<(float );
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & operator<<(float );
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & operator<<(float );
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & operator<<(unsigned long long );
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & operator<<(long long );
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & operator<<(unsigned long );
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & operator<<(long );
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & operator<<(unsigned int );
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & operator<<(int );
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & operator<<(unsigned short );
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & operator<<(short );
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & operator<<(bool );
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & operator<<(class std::ios_base &  ( * )(class std::ios_base & ));
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & operator<<(class std::basic_ios<wchar_t,std::char_traits<wchar_t> > &  ( * )(class std::basic_ios<wchar_t,std::char_traits<wchar_t> > & ));
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & operator<<(class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > &  ( * )(class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & ));
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & put(wchar_t );
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & write(wchar_t * ,int );
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & flush();
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & seekp(long ,int );
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & seekp(class std::fpos<int> );
    public class std::fpos<int> tellp();
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & operator=(class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & );
    public void * __vecDelDtor(unsigned int );
};

class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > : public std::basic_ios<wchar_t,std::char_traits<wchar_t> >// Size=0x38 (Id=5669)
{
    public void basic_ostream<wchar_t,std::char_traits<wchar_t> >(class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & );
    public void basic_ostream<wchar_t,std::char_traits<wchar_t> >(enum std::_Uninitialized ,bool );
    public void basic_ostream<wchar_t,std::char_traits<wchar_t> >(class std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > * ,bool );
    public void ~basic_ostream<wchar_t,std::char_traits<wchar_t> >();
    union // Size=0x4 (Id=0)
    {
        class _Sentry_base// Size=0x4 (Id=61074)
        {
            public void _Sentry_base(class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & );
            public void ~_Sentry_base();
            public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & _Myostr;// Offset=0x0 Size=0x4
            public void * __vecDelDtor(unsigned int );
        };
        class sentry : public std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base// Size=0x8 (Id=61083)
        {
            private void sentry(class std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry & );
            public void sentry(class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & );
            public void ~sentry();
            public bool operator bool();
            private class std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry & operator=(class std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry & );
            private unsigned char __align0[4];// Offset=0x0 Size=0x4
            private bool _Ok;// Offset=0x4 Size=0x1
            public void * __vecDelDtor(unsigned int );
        };
    };
    public bool opfx();
    public void osfx();
    public void _Osfx();
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & operator<<(class std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > * );
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & operator<<(void * );
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & operator<<(float );
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & operator<<(float );
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & operator<<(float );
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & operator<<(unsigned long long );
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & operator<<(long long );
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & operator<<(unsigned long );
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & operator<<(long );
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & operator<<(unsigned int );
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & operator<<(int );
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & operator<<(unsigned short );
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & operator<<(short );
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & operator<<(bool );
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & operator<<(class std::ios_base &  ( * )(class std::ios_base & ));
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & operator<<(class std::basic_ios<wchar_t,std::char_traits<wchar_t> > &  ( * )(class std::basic_ios<wchar_t,std::char_traits<wchar_t> > & ));
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & operator<<(class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > &  ( * )(class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & ));
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & put(wchar_t );
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & write(wchar_t * ,int );
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & flush();
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & seekp(long ,int );
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & seekp(class std::fpos<int> );
    public class std::fpos<int> tellp();
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & operator=(class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & );
    public void * __vecDelDtor(unsigned int );
};

class std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry : public std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base// Size=0x8 (Id=5670)
{
    private void sentry(class std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry & );
    public void sentry(class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & );
    public void ~sentry();
    public bool operator bool();
    private class std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry & operator=(class std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry & );
    private unsigned char __align0[4];// Offset=0x0 Size=0x4
    private bool _Ok;// Offset=0x4 Size=0x1
    public void * __vecDelDtor(unsigned int );
};

class std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry : public std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base// Size=0x8 (Id=5671)
{
    private void sentry(class std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry & );
    public void sentry(class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & );
    public void ~sentry();
    public bool operator bool();
    private class std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry & operator=(class std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry & );
    private unsigned char __align0[4];// Offset=0x0 Size=0x4
    private bool _Ok;// Offset=0x4 Size=0x1
    public void * __vecDelDtor(unsigned int );
};

class std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base// Size=0x4 (Id=5672)
{
    public void _Sentry_base(class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & );
    public void ~_Sentry_base();
    public class std::basic_ostream<wchar_t,std::char_traits<wchar_t> > & _Myostr;// Offset=0x0 Size=0x4
    public void * __vecDelDtor(unsigned int );
};

class std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >// Size=0x0 (Id=5673)
{
};

class std::reverse_iterator<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >// Size=0x0 (Id=5674)
{
};

class std::reverse_iterator<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >// Size=0x0 (Id=5675)
{
};

enum std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_unnamed_5676
{
    _BUF_SIZE=16
};

enum std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_unnamed_5677
{
    _ALLOC_MASK=15
};

class std::locale::facet// Size=0x8 (Id=5678)
{
    public unsigned int _Getcat(class std::locale::facet ** ,class std::locale * );
    public void _Incref();
    public class std::locale::facet * _Decref();
    public void _Register();
    public void ~facet();
    private void facet(class std::locale::facet & );
    protected void facet(unsigned int );
    private void facet_Register(class std::locale::facet * );
    private class std::locale::facet & operator=(class std::locale::facet & );
    private unsigned char __align0[4];// Offset=0x0 Size=0x4
    private unsigned int _Refs;// Offset=0x4 Size=0x4
    public void __dflt_ctor_closure();
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class std::locale::_Locimp : public std::locale::facet// Size=0x34 (Id=5679)
{
    protected void ~_Locimp();
    private void _Locimp_dtor(class std::locale::_Locimp * );
    private void _Locimp_ctor(class std::locale::_Locimp * ,class std::locale::_Locimp & );
    private void _Locimp_Addfac(class std::locale::_Locimp * ,class std::locale::facet * ,unsigned int );
    private void _Locimp(class std::locale::_Locimp & );
    private void _Locimp(bool );
    private void _Addfac(class std::locale::facet * ,unsigned int );
    private class std::locale::_Locimp * _Makeloc(class std::_Locinfo & ,int ,class std::locale::_Locimp * ,class std::locale * );
    private void _Makewloc(class std::_Locinfo & ,int ,class std::locale::_Locimp * ,class std::locale * );
    private void _Makeushloc(class std::_Locinfo & ,int ,class std::locale::_Locimp * ,class std::locale * );
    private void _Makexloc(class std::_Locinfo & ,int ,class std::locale::_Locimp * ,class std::locale * );
    union // Size=0x34 (Id=0)
    {
        unsigned char __align0[8];// Offset=0x0 Size=0x8
        class std::locale::facet ** _Facetvec;// Offset=0x8 Size=0x4
        unsigned int _Facetcount;// Offset=0xc Size=0x4
        int _Catmask;// Offset=0x10 Size=0x4
        bool _Xparent;// Offset=0x14 Size=0x1
        unsigned char __align1[3];// Offset=0x15 Size=0x3
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Name;// Offset=0x18 Size=0x1c
        class std::locale::_Locimp &** _Clocptr_func();
        class std::locale::_Locimp * _Clocptr;// Offset=0x0 Size=0x4
        class std::locale::_Locimp & operator=(class std::locale::_Locimp & );
        void __dflt_ctor_closure();
        void __local_vftable_ctor_closure();
        void * __vecDelDtor(unsigned int );
    };
};

class std::locale::_Locimp : public std::locale::facet// Size=0x34 (Id=5680)
{
    protected void ~_Locimp();
    private void _Locimp_dtor(class std::locale::_Locimp * );
    private void _Locimp_ctor(class std::locale::_Locimp * ,class std::locale::_Locimp & );
    private void _Locimp_Addfac(class std::locale::_Locimp * ,class std::locale::facet * ,unsigned int );
    private void _Locimp(class std::locale::_Locimp & );
    private void _Locimp(bool );
    private void _Addfac(class std::locale::facet * ,unsigned int );
    private class std::locale::_Locimp * _Makeloc(class std::_Locinfo & ,int ,class std::locale::_Locimp * ,class std::locale * );
    private void _Makewloc(class std::_Locinfo & ,int ,class std::locale::_Locimp * ,class std::locale * );
    private void _Makeushloc(class std::_Locinfo & ,int ,class std::locale::_Locimp * ,class std::locale * );
    private void _Makexloc(class std::_Locinfo & ,int ,class std::locale::_Locimp * ,class std::locale * );
    union // Size=0x34 (Id=0)
    {
        unsigned char __align0[8];// Offset=0x0 Size=0x8
        class std::locale::facet ** _Facetvec;// Offset=0x8 Size=0x4
        unsigned int _Facetcount;// Offset=0xc Size=0x4
        int _Catmask;// Offset=0x10 Size=0x4
        bool _Xparent;// Offset=0x14 Size=0x1
        unsigned char __align1[3];// Offset=0x15 Size=0x3
        class std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Name;// Offset=0x18 Size=0x1c
        class std::locale::_Locimp &** _Clocptr_func();
        class std::locale::_Locimp * _Clocptr;// Offset=0x0 Size=0x4
        class std::locale::_Locimp & operator=(class std::locale::_Locimp & );
        void __dflt_ctor_closure();
        void __local_vftable_ctor_closure();
        void * __vecDelDtor(unsigned int );
    };
};

class std::locale::id// Size=0x4 (Id=5681)
{
    private void id(class std::locale::id & );
    public void id(unsigned int );
    public unsigned int operator unsigned int();
    private class std::locale::id & operator=(class std::locale::id & );
    union // Size=0x4 (Id=0)
    {
        unsigned int _Id;// Offset=0x0 Size=0x4
        int & _Id_cnt_func();
        int _Id_cnt;// Offset=0x0 Size=0x4
    };
    public void __dflt_ctor_closure();
};

class std::locale::id// Size=0x4 (Id=5682)
{
    private void id(class std::locale::id & );
    public void id(unsigned int );
    public unsigned int operator unsigned int();
    private class std::locale::id & operator=(class std::locale::id & );
    union // Size=0x4 (Id=0)
    {
        unsigned int _Id;// Offset=0x0 Size=0x4
        int & _Id_cnt_func();
        int _Id_cnt;// Offset=0x0 Size=0x4
    };
    public void __dflt_ctor_closure();
};

class std::_Timevec// Size=0x4 (Id=5683)
{
    public void _Timevec(class std::_Timevec & );
    public void _Timevec(void * );
    public void ~_Timevec();
    public class std::_Timevec & operator=(class std::_Timevec & );
    public void * _Getptr();
    private void * _Timeptr;// Offset=0x0 Size=0x4
    public void __dflt_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class std::_Timevec// Size=0x4 (Id=5684)
{
    public void _Timevec(class std::_Timevec & );
    public void _Timevec(void * );
    public void ~_Timevec();
    public class std::_Timevec & operator=(class std::_Timevec & );
    public void * _Getptr();
    private void * _Timeptr;// Offset=0x0 Size=0x4
    public void __dflt_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

enum std::ctype_base::_unnamed_5685
{
    alnum=263,
    alpha=259,
    cntrl=32,
    digit=4,
    graph=279,
    lower=2,
    print=471,
    punct=16,
    space=72,
    upper=1,
    xdigit=128
};

struct std::ctype_base : public std::locale::facet// Size=0x8 (Id=5686)
{
    enum _unnamed_61184
    {
        alnum=263,
        alpha=259,
        cntrl=32,
        digit=4,
        graph=279,
        lower=2,
        print=471,
        punct=16,
        space=72,
        upper=1,
        xdigit=128
    };
    void ctype_base(struct std::ctype_base & );
    void ctype_base(unsigned int );
    void ~ctype_base();
    void _Xran();
    struct std::ctype_base & operator=(struct std::ctype_base & );
    void __dflt_ctor_closure();
    void __local_vftable_ctor_closure();
    void * __vecDelDtor(unsigned int );
};

struct std::ctype_base : public std::locale::facet// Size=0x8 (Id=5687)
{
    enum _unnamed_61184
    {
        alnum=263,
        alpha=259,
        cntrl=32,
        digit=4,
        graph=279,
        lower=2,
        print=471,
        punct=16,
        space=72,
        upper=1,
        xdigit=128
    };
    void ctype_base(struct std::ctype_base & );
    void ctype_base(unsigned int );
    void ~ctype_base();
    void _Xran();
    struct std::ctype_base & operator=(struct std::ctype_base & );
    void __dflt_ctor_closure();
    void __local_vftable_ctor_closure();
    void * __vecDelDtor(unsigned int );
};

enum std::ios_base::event
{
    erase_event=0,
    imbue_event=1,
    copyfmt_event=2
};

class std::ios_base : public std::_Iosb<int>// Size=0x28 (Id=5689)
{
    enum event
    {
        erase_event=0,
        imbue_event=1,
        copyfmt_event=2
    };
    union // Size=0x28 (Id=0)
    {
        class failure : public std::runtime_error// Size=0x24 (Id=61219)
        {
            public void failure(class std::ios_base::failure & );
            public void failure(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
            public void ~failure();
            protected void _Doraise();
            public class std::ios_base::failure & operator=(class std::ios_base::failure & );
            public void * __vecDelDtor(unsigned int );
        };
        class Init// Size=0x1 (Id=61235)
        {
            public void Init();
            public void ~Init();
            private void _Init_ctor(class std::ios_base::Init * );
            private void _Init_dtor(class std::ios_base::Init * );
            private int & _Init_cnt_func();
            private int _Init_cnt;// Offset=0x0 Size=0x4
            public void * __vecDelDtor(unsigned int );
        };
        class std::ios_base & operator=(class std::ios_base & );
        void * operator void *();
        bool operator!();
        void clear(unsigned int );
        void clear(int );
        void clear(int ,bool );
        int rdstate();
        void setstate(unsigned int );
        void setstate(int );
        void setstate(int ,bool );
        bool good();
        bool eof();
        bool fail();
        bool bad();
        void exceptions(unsigned int );
        void exceptions(int );
        int exceptions();
        int flags(int );
        int flags();
        int setf(int ,int );
        int setf(int );
        void unsetf(int );
        int precision(int );
        int precision();
        int width(int );
        int width();
        class std::locale getloc();
        class std::locale imbue(class std::locale & );
        int xalloc();
        long & iword(int );
        void &** pword(int );
        void register_callback(void  ( * )(enum std::ios_base::event ,class std::ios_base & ,int ),int );
        class std::ios_base & copyfmt(class std::ios_base & );
        void ~ios_base();
        bool sync_with_stdio(bool );
        void _Addstd(class std::ios_base * );
        unsigned char __align0[3];// Offset=0x1 Size=0x3
        unsigned int _Stdstr;// Offset=0x4 Size=0x4
        void ios_base(class std::ios_base & );
        void ios_base();
        void _Init();
        struct _Iosarray// Size=0x10 (Id=61312)
        {
            void _Iosarray(int ,struct std::ios_base::_Iosarray * );
            struct std::ios_base::_Iosarray * _Next;// Offset=0x0 Size=0x4
            int _Index;// Offset=0x4 Size=0x4
            long _Lo;// Offset=0x8 Size=0x4
            void * _Vp;// Offset=0xc Size=0x4
        };
        struct _Fnarray// Size=0xc (Id=61320)
        {
            void _Fnarray(int ,void  ( * )(enum std::ios_base::event ,class std::ios_base & ,int ),struct std::ios_base::_Fnarray * );
            struct std::ios_base::_Fnarray * _Next;// Offset=0x0 Size=0x4
            int _Index;// Offset=0x4 Size=0x4
            void  ( * _Pfn)(enum std::ios_base::event ,class std::ios_base & ,int );// Offset=0x8 Size=0x4
        };
        void _Callfns(enum std::ios_base::event );
        struct std::ios_base::_Iosarray & _Findarr(int );
        void _Tidy();
        void _Ios_base_dtor(class std::ios_base * );
        int _Mystate;// Offset=0x8 Size=0x4
        int _Except;// Offset=0xc Size=0x4
        int _Fmtfl;// Offset=0x10 Size=0x4
        int _Prec;// Offset=0x14 Size=0x4
        int _Wide;// Offset=0x18 Size=0x4
        struct std::ios_base::_Iosarray * _Arr;// Offset=0x1c Size=0x4
        struct std::ios_base::_Fnarray * _Calls;// Offset=0x20 Size=0x4
        class std::locale * _Ploc;// Offset=0x24 Size=0x4
        int _Index;// Offset=0x0 Size=0x4
        bool _Sync;// Offset=0x0 Size=0x1
        int & _Index_func();
        bool & _Sync_func();
        void __local_vftable_ctor_closure();
        void * __vecDelDtor(unsigned int );
    };
};

class std::ios_base : public std::_Iosb<int>// Size=0x28 (Id=5690)
{
    enum event
    {
        erase_event=0,
        imbue_event=1,
        copyfmt_event=2
    };
    union // Size=0x28 (Id=0)
    {
        class failure : public std::runtime_error// Size=0x24 (Id=61219)
        {
            public void failure(class std::ios_base::failure & );
            public void failure(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
            public void ~failure();
            protected void _Doraise();
            public class std::ios_base::failure & operator=(class std::ios_base::failure & );
            public void * __vecDelDtor(unsigned int );
        };
        class Init// Size=0x1 (Id=61235)
        {
            public void Init();
            public void ~Init();
            private void _Init_ctor(class std::ios_base::Init * );
            private void _Init_dtor(class std::ios_base::Init * );
            private int & _Init_cnt_func();
            private int _Init_cnt;// Offset=0x0 Size=0x4
            public void * __vecDelDtor(unsigned int );
        };
        class std::ios_base & operator=(class std::ios_base & );
        void * operator void *();
        bool operator!();
        void clear(unsigned int );
        void clear(int );
        void clear(int ,bool );
        int rdstate();
        void setstate(unsigned int );
        void setstate(int );
        void setstate(int ,bool );
        bool good();
        bool eof();
        bool fail();
        bool bad();
        void exceptions(unsigned int );
        void exceptions(int );
        int exceptions();
        int flags(int );
        int flags();
        int setf(int ,int );
        int setf(int );
        void unsetf(int );
        int precision(int );
        int precision();
        int width(int );
        int width();
        class std::locale getloc();
        class std::locale imbue(class std::locale & );
        int xalloc();
        long & iword(int );
        void &** pword(int );
        void register_callback(void  ( * )(enum std::ios_base::event ,class std::ios_base & ,int ),int );
        class std::ios_base & copyfmt(class std::ios_base & );
        void ~ios_base();
        bool sync_with_stdio(bool );
        void _Addstd(class std::ios_base * );
        unsigned char __align0[3];// Offset=0x1 Size=0x3
        unsigned int _Stdstr;// Offset=0x4 Size=0x4
        void ios_base(class std::ios_base & );
        void ios_base();
        void _Init();
        struct _Iosarray// Size=0x10 (Id=61312)
        {
            void _Iosarray(int ,struct std::ios_base::_Iosarray * );
            struct std::ios_base::_Iosarray * _Next;// Offset=0x0 Size=0x4
            int _Index;// Offset=0x4 Size=0x4
            long _Lo;// Offset=0x8 Size=0x4
            void * _Vp;// Offset=0xc Size=0x4
        };
        struct _Fnarray// Size=0xc (Id=61320)
        {
            void _Fnarray(int ,void  ( * )(enum std::ios_base::event ,class std::ios_base & ,int ),struct std::ios_base::_Fnarray * );
            struct std::ios_base::_Fnarray * _Next;// Offset=0x0 Size=0x4
            int _Index;// Offset=0x4 Size=0x4
            void  ( * _Pfn)(enum std::ios_base::event ,class std::ios_base & ,int );// Offset=0x8 Size=0x4
        };
        void _Callfns(enum std::ios_base::event );
        struct std::ios_base::_Iosarray & _Findarr(int );
        void _Tidy();
        void _Ios_base_dtor(class std::ios_base * );
        int _Mystate;// Offset=0x8 Size=0x4
        int _Except;// Offset=0xc Size=0x4
        int _Fmtfl;// Offset=0x10 Size=0x4
        int _Prec;// Offset=0x14 Size=0x4
        int _Wide;// Offset=0x18 Size=0x4
        struct std::ios_base::_Iosarray * _Arr;// Offset=0x1c Size=0x4
        struct std::ios_base::_Fnarray * _Calls;// Offset=0x20 Size=0x4
        class std::locale * _Ploc;// Offset=0x24 Size=0x4
        int _Index;// Offset=0x0 Size=0x4
        bool _Sync;// Offset=0x0 Size=0x1
        int & _Index_func();
        bool & _Sync_func();
        void __local_vftable_ctor_closure();
        void * __vecDelDtor(unsigned int );
    };
};

struct std::ios_base::_Fnarray// Size=0xc (Id=5691)
{
    void _Fnarray(int ,void  ( * )(enum std::ios_base::event ,class std::ios_base & ,int ),struct std::ios_base::_Fnarray * );
    struct std::ios_base::_Fnarray * _Next;// Offset=0x0 Size=0x4
    int _Index;// Offset=0x4 Size=0x4
    void  ( * _Pfn)(enum std::ios_base::event ,class std::ios_base & ,int );// Offset=0x8 Size=0x4
};

struct std::ios_base::_Iosarray// Size=0x10 (Id=5692)
{
    void _Iosarray(int ,struct std::ios_base::_Iosarray * );
    struct std::ios_base::_Iosarray * _Next;// Offset=0x0 Size=0x4
    int _Index;// Offset=0x4 Size=0x4
    long _Lo;// Offset=0x8 Size=0x4
    void * _Vp;// Offset=0xc Size=0x4
};

class std::ios_base::Init// Size=0x1 (Id=5693)
{
    public void Init();
    public void ~Init();
    private void _Init_ctor(class std::ios_base::Init * );
    private void _Init_dtor(class std::ios_base::Init * );
    private int & _Init_cnt_func();
    private int _Init_cnt;// Offset=0x0 Size=0x4
    public void * __vecDelDtor(unsigned int );
};

class std::ios_base::failure : public std::runtime_error// Size=0x24 (Id=5694)
{
    public void failure(class std::ios_base::failure & );
    public void failure(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
    public void ~failure();
    protected void _Doraise();
    public class std::ios_base::failure & operator=(class std::ios_base::failure & );
    public void * __vecDelDtor(unsigned int );
};

class std::ios_base::failure : public std::runtime_error// Size=0x24 (Id=5695)
{
    public void failure(class std::ios_base::failure & );
    public void failure(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
    public void ~failure();
    protected void _Doraise();
    public class std::ios_base::failure & operator=(class std::ios_base::failure & );
    public void * __vecDelDtor(unsigned int );
};

union std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Bxty// Size=0x10 (Id=5696)
{
    union // Size=0x10 (Id=0)
    {
        char _Buf[16];// Offset=0x0 Size=0x10
        char * _Ptr;// Offset=0x0 Size=0x4
    };
};

class std::_Locbase<int>// Size=0x1 (Id=5697)
{
    union // Size=0x4 (Id=0)
    {
        const int collate;// Offset=0x0 Size=0x4
        const int ctype;// Offset=0x0 Size=0x4
        const int monetary;// Offset=0x0 Size=0x4
        const int numeric;// Offset=0x0 Size=0x4
        const int time;// Offset=0x0 Size=0x4
        const int messages;// Offset=0x0 Size=0x4
        const int all;// Offset=0x0 Size=0x4
        const int none;// Offset=0x0 Size=0x4
    };
};

struct std::_Secure_char_traits_tag// Size=0x1 (Id=5698)
{
};

struct _Ctypevec// Size=0x10 (Id=5699)
{
    unsigned long _Hand;// Offset=0x0 Size=0x4
    unsigned int _Page;// Offset=0x4 Size=0x4
    short * _Table;// Offset=0x8 Size=0x4
    int _Delfl;// Offset=0xc Size=0x4
};

struct _Collvec// Size=0x8 (Id=5700)
{
    unsigned long _Hand;// Offset=0x0 Size=0x4
    unsigned int _Page;// Offset=0x4 Size=0x4
};

struct _Cvtvec// Size=0x8 (Id=5701)
{
    unsigned long _Hand;// Offset=0x0 Size=0x4
    unsigned int _Page;// Offset=0x4 Size=0x4
};

struct std::_Allocator_base<wchar_t>// Size=0x1 (Id=5702)
{
};

class std::_String_val<wchar_t,std::allocator<wchar_t> > : public std::_String_base// Size=0x1 (Id=5703)
{
    public void _String_val<wchar_t,std::allocator<wchar_t> >(class std::_String_val<wchar_t,std::allocator<wchar_t> > & );
    protected void _String_val<wchar_t,std::allocator<wchar_t> >(class std::allocator<wchar_t> );
    protected class std::allocator<wchar_t> _Alval;// Offset=0x0 Size=0x1
    public void __dflt_ctor_closure();
};

class std::_String_val<wchar_t,std::allocator<wchar_t> > : public std::_String_base// Size=0x1 (Id=5704)
{
    public void _String_val<wchar_t,std::allocator<wchar_t> >(class std::_String_val<wchar_t,std::allocator<wchar_t> > & );
    protected void _String_val<wchar_t,std::allocator<wchar_t> >(class std::allocator<wchar_t> );
    protected class std::allocator<wchar_t> _Alval;// Offset=0x0 Size=0x1
    public void __dflt_ctor_closure();
};

class std::_String_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >// Size=0x0 (Id=5705)
{
};

class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >// Size=0x0 (Id=5706)
{
};

class std::reverse_iterator<std::_String_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >// Size=0x0 (Id=5707)
{
};

class std::reverse_iterator<std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >// Size=0x0 (Id=5708)
{
};

class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > : public std::_String_val<wchar_t,std::allocator<wchar_t> >// Size=0x1c (Id=5709)
{
    public void basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >(class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & );
    public void basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >(class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ,class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > );
    public void basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >(wchar_t * ,wchar_t * );
    public void basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >(unsigned int ,wchar_t ,class std::allocator<wchar_t> & );
    public void basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >(unsigned int ,wchar_t );
    public void basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >(wchar_t * ,class std::allocator<wchar_t> & );
    public void basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >(wchar_t * );
    public void basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >(wchar_t * ,unsigned int ,class std::allocator<wchar_t> & );
    public void basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >(wchar_t * ,unsigned int );
    public void basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >(class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & ,unsigned int ,unsigned int ,class std::allocator<wchar_t> & );
    public void basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >(class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & ,unsigned int ,unsigned int );
    public void basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >(class std::allocator<wchar_t> & );
    public void basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >();
    public void ~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >();
    union // Size=0x4 (Id=0)
    {
        const unsigned int npos;// Offset=0x0 Size=0x4
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & operator=(wchar_t );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & operator=(wchar_t * );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & operator=(class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & operator+=(wchar_t );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & operator+=(wchar_t * );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & operator+=(class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & append(class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ,class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & append(wchar_t * ,wchar_t * );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & append(unsigned int ,wchar_t );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & append(wchar_t * );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & append(wchar_t * ,unsigned int );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & append(class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & ,unsigned int ,unsigned int );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & append(class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & assign(class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ,class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & assign(wchar_t * ,wchar_t * );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & assign(unsigned int ,wchar_t );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & assign(wchar_t * );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & assign(wchar_t * ,unsigned int );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & assign(class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & ,unsigned int ,unsigned int );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & assign(class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & );
        void insert(class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ,class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ,class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > );
        void insert(class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ,wchar_t * ,wchar_t * );
        void insert(class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ,unsigned int ,wchar_t );
        class std::_String_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > insert(class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ,wchar_t );
        class std::_String_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > insert(class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & insert(unsigned int ,unsigned int ,wchar_t );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & insert(unsigned int ,wchar_t * );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & insert(unsigned int ,wchar_t * ,unsigned int );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & insert(unsigned int ,class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & ,unsigned int ,unsigned int );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & insert(unsigned int ,class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & );
        class std::_String_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > erase(class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ,class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > );
        class std::_String_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > erase(class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & erase(unsigned int ,unsigned int );
        void clear();
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & replace(class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ,class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ,class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ,class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & replace(class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ,class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ,wchar_t * ,wchar_t * );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & replace(class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ,class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ,unsigned int ,wchar_t );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & replace(class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ,class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ,wchar_t * );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & replace(class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ,class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ,wchar_t * ,unsigned int );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & replace(class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ,class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ,class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & replace(unsigned int ,unsigned int ,unsigned int ,wchar_t );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & replace(unsigned int ,unsigned int ,wchar_t * );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & replace(unsigned int ,unsigned int ,wchar_t * ,unsigned int );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & replace(unsigned int ,unsigned int ,class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & ,unsigned int ,unsigned int );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & replace(unsigned int ,unsigned int ,class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & );
        class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > begin();
        class std::_String_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > begin();
        class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > end();
        class std::_String_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > end();
        class std::reverse_iterator<std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > rbegin();
        class std::reverse_iterator<std::_String_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > rbegin();
        class std::reverse_iterator<std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > rend();
        class std::reverse_iterator<std::_String_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > rend();
        wchar_t & at(unsigned int );
        wchar_t & at(unsigned int );
        wchar_t & operator[](unsigned int );
        wchar_t & operator[](unsigned int );
        void push_back(wchar_t );
        wchar_t * c_str();
        wchar_t * data();
        unsigned int length();
        unsigned int size();
        unsigned int max_size();
        void resize(unsigned int ,wchar_t );
        void resize(unsigned int );
        unsigned int capacity();
        void reserve(unsigned int );
        bool empty();
        unsigned int copy(wchar_t * ,unsigned int ,unsigned int );
        unsigned int _Copy_s(wchar_t * ,unsigned int ,unsigned int ,unsigned int );
        void swap(class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & );
        unsigned int find(wchar_t ,unsigned int );
        unsigned int find(wchar_t * ,unsigned int );
        unsigned int find(wchar_t * ,unsigned int ,unsigned int );
        unsigned int find(class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & ,unsigned int );
        unsigned int rfind(wchar_t ,unsigned int );
        unsigned int rfind(wchar_t * ,unsigned int );
        unsigned int rfind(wchar_t * ,unsigned int ,unsigned int );
        unsigned int rfind(class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & ,unsigned int );
        unsigned int find_first_of(wchar_t ,unsigned int );
        unsigned int find_first_of(wchar_t * ,unsigned int );
        unsigned int find_first_of(wchar_t * ,unsigned int ,unsigned int );
        unsigned int find_first_of(class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & ,unsigned int );
        unsigned int find_last_of(wchar_t ,unsigned int );
        unsigned int find_last_of(wchar_t * ,unsigned int );
        unsigned int find_last_of(wchar_t * ,unsigned int ,unsigned int );
        unsigned int find_last_of(class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & ,unsigned int );
        unsigned int find_first_not_of(wchar_t ,unsigned int );
        unsigned int find_first_not_of(wchar_t * ,unsigned int );
        unsigned int find_first_not_of(wchar_t * ,unsigned int ,unsigned int );
        unsigned int find_first_not_of(class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & ,unsigned int );
        unsigned int find_last_not_of(wchar_t ,unsigned int );
        unsigned int find_last_not_of(wchar_t * ,unsigned int );
        unsigned int find_last_not_of(wchar_t * ,unsigned int ,unsigned int );
        unsigned int find_last_not_of(class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & ,unsigned int );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > substr(unsigned int ,unsigned int );
        int compare(unsigned int ,unsigned int ,wchar_t * ,unsigned int );
        int compare(unsigned int ,unsigned int ,wchar_t * );
        int compare(wchar_t * );
        int compare(unsigned int ,unsigned int ,class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & ,unsigned int ,unsigned int );
        int compare(unsigned int ,unsigned int ,class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & );
        int compare(class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & );
        class std::allocator<wchar_t> get_allocator();
        enum _unnamed_61592
        {
            _BUF_SIZE=8
        };
        enum _unnamed_61594
        {
            _ALLOC_MASK=7
        };
        void _Chassign(unsigned int ,unsigned int ,wchar_t );
        void _Copy(unsigned int ,unsigned int );
        void _Eos(unsigned int );
        bool _Grow(unsigned int ,bool );
        bool _Inside(wchar_t * );
        unsigned int _Pdif(class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ,class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > );
        void _Tidy(bool ,unsigned int );
        union _Bxty// Size=0x10 (Id=61609)
        {
            wchar_t _Buf[8];// Offset=0x0 Size=0x10
            wchar_t * _Ptr;// Offset=0x0 Size=0x4
        };
    };
    protected union std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Bxty _Bx;// Offset=0x4 Size=0x10
    protected wchar_t * _Myptr();
    protected wchar_t * _Myptr();
    protected unsigned int _Mysize;// Offset=0x14 Size=0x4
    protected unsigned int _Myres;// Offset=0x18 Size=0x4
    public void * __vecDelDtor(unsigned int );
};

class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > : public std::_String_val<wchar_t,std::allocator<wchar_t> >// Size=0x1c (Id=5710)
{
    public void basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >(class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & );
    public void basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >(class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ,class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > );
    public void basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >(wchar_t * ,wchar_t * );
    public void basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >(unsigned int ,wchar_t ,class std::allocator<wchar_t> & );
    public void basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >(unsigned int ,wchar_t );
    public void basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >(wchar_t * ,class std::allocator<wchar_t> & );
    public void basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >(wchar_t * );
    public void basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >(wchar_t * ,unsigned int ,class std::allocator<wchar_t> & );
    public void basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >(wchar_t * ,unsigned int );
    public void basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >(class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & ,unsigned int ,unsigned int ,class std::allocator<wchar_t> & );
    public void basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >(class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & ,unsigned int ,unsigned int );
    public void basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >(class std::allocator<wchar_t> & );
    public void basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >();
    public void ~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >();
    union // Size=0x4 (Id=0)
    {
        const unsigned int npos;// Offset=0x0 Size=0x4
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & operator=(wchar_t );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & operator=(wchar_t * );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & operator=(class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & operator+=(wchar_t );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & operator+=(wchar_t * );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & operator+=(class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & append(class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ,class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & append(wchar_t * ,wchar_t * );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & append(unsigned int ,wchar_t );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & append(wchar_t * );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & append(wchar_t * ,unsigned int );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & append(class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & ,unsigned int ,unsigned int );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & append(class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & assign(class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ,class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & assign(wchar_t * ,wchar_t * );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & assign(unsigned int ,wchar_t );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & assign(wchar_t * );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & assign(wchar_t * ,unsigned int );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & assign(class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & ,unsigned int ,unsigned int );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & assign(class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & );
        void insert(class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ,class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ,class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > );
        void insert(class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ,wchar_t * ,wchar_t * );
        void insert(class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ,unsigned int ,wchar_t );
        class std::_String_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > insert(class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ,wchar_t );
        class std::_String_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > insert(class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & insert(unsigned int ,unsigned int ,wchar_t );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & insert(unsigned int ,wchar_t * );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & insert(unsigned int ,wchar_t * ,unsigned int );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & insert(unsigned int ,class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & ,unsigned int ,unsigned int );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & insert(unsigned int ,class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & );
        class std::_String_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > erase(class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ,class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > );
        class std::_String_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > erase(class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & erase(unsigned int ,unsigned int );
        void clear();
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & replace(class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ,class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ,class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ,class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & replace(class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ,class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ,wchar_t * ,wchar_t * );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & replace(class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ,class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ,unsigned int ,wchar_t );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & replace(class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ,class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ,wchar_t * );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & replace(class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ,class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ,wchar_t * ,unsigned int );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & replace(class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ,class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ,class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & replace(unsigned int ,unsigned int ,unsigned int ,wchar_t );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & replace(unsigned int ,unsigned int ,wchar_t * );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & replace(unsigned int ,unsigned int ,wchar_t * ,unsigned int );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & replace(unsigned int ,unsigned int ,class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & ,unsigned int ,unsigned int );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & replace(unsigned int ,unsigned int ,class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & );
        class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > begin();
        class std::_String_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > begin();
        class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > end();
        class std::_String_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > end();
        class std::reverse_iterator<std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > rbegin();
        class std::reverse_iterator<std::_String_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > rbegin();
        class std::reverse_iterator<std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > rend();
        class std::reverse_iterator<std::_String_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > rend();
        wchar_t & at(unsigned int );
        wchar_t & at(unsigned int );
        wchar_t & operator[](unsigned int );
        wchar_t & operator[](unsigned int );
        void push_back(wchar_t );
        wchar_t * c_str();
        wchar_t * data();
        unsigned int length();
        unsigned int size();
        unsigned int max_size();
        void resize(unsigned int ,wchar_t );
        void resize(unsigned int );
        unsigned int capacity();
        void reserve(unsigned int );
        bool empty();
        unsigned int copy(wchar_t * ,unsigned int ,unsigned int );
        unsigned int _Copy_s(wchar_t * ,unsigned int ,unsigned int ,unsigned int );
        void swap(class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & );
        unsigned int find(wchar_t ,unsigned int );
        unsigned int find(wchar_t * ,unsigned int );
        unsigned int find(wchar_t * ,unsigned int ,unsigned int );
        unsigned int find(class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & ,unsigned int );
        unsigned int rfind(wchar_t ,unsigned int );
        unsigned int rfind(wchar_t * ,unsigned int );
        unsigned int rfind(wchar_t * ,unsigned int ,unsigned int );
        unsigned int rfind(class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & ,unsigned int );
        unsigned int find_first_of(wchar_t ,unsigned int );
        unsigned int find_first_of(wchar_t * ,unsigned int );
        unsigned int find_first_of(wchar_t * ,unsigned int ,unsigned int );
        unsigned int find_first_of(class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & ,unsigned int );
        unsigned int find_last_of(wchar_t ,unsigned int );
        unsigned int find_last_of(wchar_t * ,unsigned int );
        unsigned int find_last_of(wchar_t * ,unsigned int ,unsigned int );
        unsigned int find_last_of(class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & ,unsigned int );
        unsigned int find_first_not_of(wchar_t ,unsigned int );
        unsigned int find_first_not_of(wchar_t * ,unsigned int );
        unsigned int find_first_not_of(wchar_t * ,unsigned int ,unsigned int );
        unsigned int find_first_not_of(class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & ,unsigned int );
        unsigned int find_last_not_of(wchar_t ,unsigned int );
        unsigned int find_last_not_of(wchar_t * ,unsigned int );
        unsigned int find_last_not_of(wchar_t * ,unsigned int ,unsigned int );
        unsigned int find_last_not_of(class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & ,unsigned int );
        class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > substr(unsigned int ,unsigned int );
        int compare(unsigned int ,unsigned int ,wchar_t * ,unsigned int );
        int compare(unsigned int ,unsigned int ,wchar_t * );
        int compare(wchar_t * );
        int compare(unsigned int ,unsigned int ,class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & ,unsigned int ,unsigned int );
        int compare(unsigned int ,unsigned int ,class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & );
        int compare(class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & );
        class std::allocator<wchar_t> get_allocator();
        enum _unnamed_61592
        {
            _BUF_SIZE=8
        };
        enum _unnamed_61594
        {
            _ALLOC_MASK=7
        };
        void _Chassign(unsigned int ,unsigned int ,wchar_t );
        void _Copy(unsigned int ,unsigned int );
        void _Eos(unsigned int );
        bool _Grow(unsigned int ,bool );
        bool _Inside(wchar_t * );
        unsigned int _Pdif(class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ,class std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > );
        void _Tidy(bool ,unsigned int );
        union _Bxty// Size=0x10 (Id=61609)
        {
            wchar_t _Buf[8];// Offset=0x0 Size=0x10
            wchar_t * _Ptr;// Offset=0x0 Size=0x4
        };
    };
    protected union std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Bxty _Bx;// Offset=0x4 Size=0x10
    protected wchar_t * _Myptr();
    protected wchar_t * _Myptr();
    protected unsigned int _Mysize;// Offset=0x14 Size=0x4
    protected unsigned int _Myres;// Offset=0x18 Size=0x4
    public void * __vecDelDtor(unsigned int );
};

class std::allocator<wchar_t> : public std::_Allocator_base<wchar_t>// Size=0x1 (Id=5711)
{
    public wchar_t * address(wchar_t & );
    public wchar_t * address(wchar_t & );
    public void allocator<wchar_t>(class std::allocator<wchar_t> & );
    public void allocator<wchar_t>();
    public void deallocate(wchar_t * ,unsigned int );
    public wchar_t * allocate(unsigned int ,void * );
    public wchar_t * allocate(unsigned int );
    public void construct(wchar_t * ,wchar_t & );
    public void destroy(wchar_t * );
    public unsigned int max_size();
    struct ?$rebind@_W// Size=0x1 (Id=61650)
    {
    };// Offset=0x0 Size=0x1
};

class std::allocator<wchar_t> : public std::_Allocator_base<wchar_t>// Size=0x1 (Id=5712)
{
    public wchar_t * address(wchar_t & );
    public wchar_t * address(wchar_t & );
    public void allocator<wchar_t>(class std::allocator<wchar_t> & );
    public void allocator<wchar_t>();
    public void deallocate(wchar_t * ,unsigned int );
    public wchar_t * allocate(unsigned int ,void * );
    public wchar_t * allocate(unsigned int );
    public void construct(wchar_t * ,wchar_t & );
    public void destroy(wchar_t * );
    public unsigned int max_size();
    struct ?$rebind@_W// Size=0x1 (Id=61650)
    {
    };// Offset=0x0 Size=0x1
};

enum std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_unnamed_5713
{
    _BUF_SIZE=8
};

enum std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_unnamed_5714
{
    _ALLOC_MASK=7
};

union std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Bxty// Size=0x10 (Id=5715)
{
    union // Size=0x10 (Id=0)
    {
        wchar_t _Buf[8];// Offset=0x0 Size=0x10
        wchar_t * _Ptr;// Offset=0x0 Size=0x4
    };
};

struct std::unary_function<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,unsigned int>// Size=0x1 (Id=5716)
{
};

struct std::allocator<wchar_t>::rebind<wchar_t>// Size=0x1 (Id=5717)
{
};

class std::tr1::_Ph<9>// Size=0x1 (Id=5718)
{
};

class std::tr1::_Ph<7>// Size=0x1 (Id=5719)
{
};

class std::tr1::_Ph<8>// Size=0x1 (Id=5720)
{
};

class std::tr1::_Ph<10>// Size=0x1 (Id=5721)
{
};

class std::tr1::_Ph<1>// Size=0x1 (Id=5722)
{
};

class std::tr1::_Ph<6>// Size=0x1 (Id=5723)
{
};

class std::tr1::_Ph<5>// Size=0x1 (Id=5724)
{
};

class std::tr1::_Ph<4>// Size=0x1 (Id=5725)
{
};

class std::tr1::_Ph<2>// Size=0x1 (Id=5726)
{
};

class std::tr1::_Ph<3>// Size=0x1 (Id=5727)
{
};

struct std::tr1::_Nil// Size=0x1 (Id=5728)
{
};

class std::tr1::bad_function_call : public stdext::exception// Size=0x8 (Id=5729)
{
    public void bad_function_call(class std::tr1::bad_function_call & );
    public void bad_function_call(char * );
    public char * what();
    public void ~bad_function_call();
    public class std::tr1::bad_function_call & operator=(class std::tr1::bad_function_call & );
    public void __dflt_ctor_closure();
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class std::tr1::bad_function_call : public stdext::exception// Size=0x8 (Id=5730)
{
    public void bad_function_call(class std::tr1::bad_function_call & );
    public void bad_function_call(char * );
    public char * what();
    public void ~bad_function_call();
    public class std::tr1::bad_function_call & operator=(class std::tr1::bad_function_call & );
    public void __dflt_ctor_closure();
    public void __local_vftable_ctor_closure();
    public void * __vecDelDtor(unsigned int );
};

class std::tr1::hash<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > : public std::unary_function<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int>// Size=0x1 (Id=5731)
{
    public unsigned int operator()(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
};

class std::tr1::hash<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > : public std::unary_function<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int>// Size=0x1 (Id=5732)
{
    public unsigned int operator()(class std::basic_string<char,std::char_traits<char>,std::allocator<char> > & );
};

class std::tr1::hash<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > : public std::unary_function<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,unsigned int>// Size=0x1 (Id=5733)
{
    public unsigned int operator()(class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & );
};

class std::tr1::hash<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > : public std::unary_function<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,unsigned int>// Size=0x1 (Id=5734)
{
    public unsigned int operator()(class std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > & );
};

struct std::unary_function<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int>// Size=0x1 (Id=5735)
{
};

struct languageInfo_t// Size=0x8 (Id=5736)
{
    char * pszName;// Offset=0x0 Size=0x4
    int bPresent;// Offset=0x4 Size=0x4
};

struct LocalizeEntry// Size=0x8 (Id=5737)
{
    char * value;// Offset=0x0 Size=0x4
    char * name;// Offset=0x4 Size=0x4
};

struct moveclip_t// Size=0xa0 (Id=5738)
{
    struct Bounds bounds;// Offset=0x0 Size=0x18
    float outerSize[3];// Offset=0x18 Size=0xc
    unsigned char __align0[12];// Offset=0x24 Size=0xc
    struct TraceExtents extents;// Offset=0x30 Size=0x60
    int passEntityNum;// Offset=0x90 Size=0x4
    int passOwnerNum;// Offset=0x94 Size=0x4
    int contentmask;// Offset=0x98 Size=0x4
};

struct pointtrace_t// Size=0x70 (Id=5739)
{
    struct TraceExtents extents;// Offset=0x0 Size=0x60
    struct IgnoreEntParams * ignoreEntParams;// Offset=0x60 Size=0x4
    int contentmask;// Offset=0x64 Size=0x4
    int bLocational;// Offset=0x68 Size=0x4
    unsigned char * priorityMap;// Offset=0x6c Size=0x4
};

struct sightpointtrace_t// Size=0x2c (Id=5740)
{
    float start[3];// Offset=0x0 Size=0xc
    float end[3];// Offset=0xc Size=0xc
    int passEntityNum[2];// Offset=0x18 Size=0x8
    int contentmask;// Offset=0x20 Size=0x4
    int locational;// Offset=0x24 Size=0x4
    unsigned char * priorityMap;// Offset=0x28 Size=0x4
};

struct sightclip_t// Size=0x48 (Id=5741)
{
    struct Bounds bounds;// Offset=0x0 Size=0x18
    float outerSize[3];// Offset=0x18 Size=0xc
    float start[3];// Offset=0x24 Size=0xc
    float end[3];// Offset=0x30 Size=0xc
    int passEntityNum[2];// Offset=0x3c Size=0x8
    int contentmask;// Offset=0x44 Size=0x4
};

struct CM_WorldTraceCallbacks// Size=0x4 (Id=5742)
{
    bool  ( * isGlassSolid)(unsigned int );// Offset=0x0 Size=0x4
};

struct IgnoreEntParams// Size=0xc (Id=5743)
{
    int baseEntity;// Offset=0x0 Size=0x4
    int parentEntity;// Offset=0x4 Size=0x4
    bool ignoreSelf;// Offset=0x8 Size=0x1
    bool ignoreParent;// Offset=0x9 Size=0x1
    bool ignoreSiblings;// Offset=0xa Size=0x1
    bool ignoreChildren;// Offset=0xb Size=0x1
};

struct pointtrace_t// Size=0x70 (Id=5744)
{
    struct TraceExtents extents;// Offset=0x0 Size=0x60
    struct IgnoreEntParams * ignoreEntParams;// Offset=0x60 Size=0x4
    int contentmask;// Offset=0x64 Size=0x4
    int bLocational;// Offset=0x68 Size=0x4
    unsigned char * priorityMap;// Offset=0x6c Size=0x4
};

struct moveclip_t// Size=0xa0 (Id=5745)
{
    struct Bounds bounds;// Offset=0x0 Size=0x18
    float outerSize[3];// Offset=0x18 Size=0xc
    unsigned char __align0[12];// Offset=0x24 Size=0xc
    struct TraceExtents extents;// Offset=0x30 Size=0x60
    int passEntityNum;// Offset=0x90 Size=0x4
    int passOwnerNum;// Offset=0x94 Size=0x4
    int contentmask;// Offset=0x98 Size=0x4
};

struct sightpointtrace_t// Size=0x2c (Id=5746)
{
    float start[3];// Offset=0x0 Size=0xc
    float end[3];// Offset=0xc Size=0xc
    int passEntityNum[2];// Offset=0x18 Size=0x8
    int contentmask;// Offset=0x20 Size=0x4
    int locational;// Offset=0x24 Size=0x4
    unsigned char * priorityMap;// Offset=0x28 Size=0x4
};

struct sightclip_t// Size=0x48 (Id=5747)
{
    struct Bounds bounds;// Offset=0x0 Size=0x18
    float outerSize[3];// Offset=0x18 Size=0xc
    float start[3];// Offset=0x24 Size=0xc
    float end[3];// Offset=0x30 Size=0xc
    int passEntityNum[2];// Offset=0x3c Size=0x8
    int contentmask;// Offset=0x44 Size=0x4
};

struct IgnoreEntParams// Size=0xc (Id=5748)
{
    int baseEntity;// Offset=0x0 Size=0x4
    int parentEntity;// Offset=0x4 Size=0x4
    bool ignoreSelf;// Offset=0x8 Size=0x1
    bool ignoreParent;// Offset=0x9 Size=0x1
    bool ignoreSiblings;// Offset=0xa Size=0x1
    bool ignoreChildren;// Offset=0xb Size=0x1
};

struct ClientSnapshotData// Size=0x44 (Id=5749)
{
    int snapshotSize[8];// Offset=0x0 Size=0x20
    int compressedSize[8];// Offset=0x20 Size=0x20
    int index;// Offset=0x40 Size=0x4
};

struct clientHeader_t// Size=0x644 (Id=5750)
{
    int state;// Offset=0x0 Size=0x4
    int sendAsActive;// Offset=0x4 Size=0x4
    int deltaMessage;// Offset=0x8 Size=0x4
    int rateDelayed;// Offset=0xc Size=0x4
    struct netchan_t netchan;// Offset=0x10 Size=0x620
    float predictedOrigin[3];// Offset=0x630 Size=0xc
    int predictedOriginServerTime;// Offset=0x63c Size=0x4
    int migrationState;// Offset=0x640 Size=0x4
};

struct SnapshotInfo_s// Size=0x20 (Id=5751)
{
    int clientNum;// Offset=0x0 Size=0x4
    float mapCenter[3];// Offset=0x4 Size=0xc
    struct clientHeader_t * client;// Offset=0x10 Size=0x4
    int snapshotDeltaTime;// Offset=0x14 Size=0x4
    bool fromBaseline;// Offset=0x18 Size=0x1
    bool archived;// Offset=0x19 Size=0x1
    bool packetIsDelta;// Offset=0x1a Size=0x1
    bool entJustUnlinked;// Offset=0x1b Size=0x1
    bool entNeverChanges;// Offset=0x1c Size=0x1
};

enum svc_ops_e
{
    svc_nop=0,
    svc_gamestate=1,
    svc_configstring=2,
    svc_serverCommand=3,
    svc_matchdata=4,
    svc_snapshot=5,
    svc_EOF=6
};

enum _unnamed_5753
{
    CS_FREE=0,
    CS_ZOMBIE=1,
    CS_RECONNECTING=2,
    CS_CONNECTED=3,
    CS_CLIENTLOADING=4,
    CS_ACTIVE=5
};

struct serverStaticHeader_t// Size=0x80 (Id=5754)
{
    struct client_t * clients;// Offset=0x0 Size=0x4
    int time;// Offset=0x4 Size=0x4
    int snapFlagServerBit;// Offset=0x8 Size=0x4
    int numSnapshotEntities;// Offset=0xc Size=0x4
    int numSnapshotClients;// Offset=0x10 Size=0x4
    int nextSnapshotEntities;// Offset=0x14 Size=0x4
    int nextSnapshotClients;// Offset=0x18 Size=0x4
    struct entityState_s * snapshotEntities;// Offset=0x1c Size=0x4
    struct clientState_s * snapshotClients;// Offset=0x20 Size=0x4
    struct svEntity_s * svEntities;// Offset=0x24 Size=0x4
    float mapCenter[3];// Offset=0x28 Size=0xc
    struct archivedEntity_s * cachedSnapshotEntities;// Offset=0x34 Size=0x4
    struct cachedClient_s * cachedSnapshotClients;// Offset=0x38 Size=0x4
    unsigned char * archivedSnapshotBuffer;// Offset=0x3c Size=0x4
    struct cachedSnapshot_t * cachedSnapshotFrames;// Offset=0x40 Size=0x4
    int nextCachedSnapshotFrames;// Offset=0x44 Size=0x4
    int nextArchivedSnapshotFrames;// Offset=0x48 Size=0x4
    int nextCachedSnapshotEntities;// Offset=0x4c Size=0x4
    int nextCachedSnapshotClients;// Offset=0x50 Size=0x4
    int num_entities;// Offset=0x54 Size=0x4
    int maxclients;// Offset=0x58 Size=0x4
    int clientArchive;// Offset=0x5c Size=0x4
    struct gentity_s * gentities;// Offset=0x60 Size=0x4
    struct clientState_s * firstClientState;// Offset=0x64 Size=0x4
    struct playerState_s * firstPlayerState;// Offset=0x68 Size=0x4
    int clientSize;// Offset=0x6c Size=0x4
    int archivedEntityCount;// Offset=0x70 Size=0x4
    int packetBackupCount;// Offset=0x74 Size=0x4
    int packetBackupMask;// Offset=0x78 Size=0x4
    unsigned int pad[1];// Offset=0x7c Size=0x4
};

struct serverStatic_t// Size=0x15100 (Id=5755)
{
    struct cachedSnapshot_t cachedSnapshotFrames[512];// Offset=0x0 Size=0x3800
    struct archivedEntity_s * cachedSnapshotEntities;// Offset=0x3800 Size=0x4
    struct entityState_s * snapshotEntities;// Offset=0x3804 Size=0x4
    int initialized;// Offset=0x3808 Size=0x4
    int time;// Offset=0x380c Size=0x4
    int snapFlagServerBit;// Offset=0x3810 Size=0x4
    int clientCount;// Offset=0x3814 Size=0x4
    struct client_t * clients;// Offset=0x3818 Size=0x4
    int numSnapshotEntities;// Offset=0x381c Size=0x4
    int numSnapshotClients;// Offset=0x3820 Size=0x4
    int nextSnapshotEntities;// Offset=0x3824 Size=0x4
    int nextSnapshotClients;// Offset=0x3828 Size=0x4
    int nextArchivedSnapshotFrames;// Offset=0x382c Size=0x4
    struct archivedSnapshot_s archivedSnapshotFrames[1200];// Offset=0x3830 Size=0x2580
    struct clientState_s * snapshotClients;// Offset=0x5db0 Size=0x4
    unsigned char * archivedSnapshotBuffer;// Offset=0x5db4 Size=0x4
    int nextArchivedSnapshotBuffer;// Offset=0x5db8 Size=0x4
    int nextCachedSnapshotEntities;// Offset=0x5dbc Size=0x4
    int nextCachedSnapshotClients;// Offset=0x5dc0 Size=0x4
    int nextCachedSnapshotFrames;// Offset=0x5dc4 Size=0x4
    struct cachedClient_s * cachedSnapshotClients;// Offset=0x5dc8 Size=0x4
    int nextHeartbeatTime;// Offset=0x5dcc Size=0x4
    int nextStatusResponseTime;// Offset=0x5dd0 Size=0x4
    struct challenge_t challenges[1024];// Offset=0x5dd4 Size=0xe000
    struct netProfileInfo_t OOBProf;// Offset=0x13dd4 Size=0x5e0
    struct tempBanSlot_t tempBans[16];// Offset=0x143b4 Size=0x180
    float mapCenter[3];// Offset=0x14534 Size=0xc
    float mapCenterBoundsMin[3];// Offset=0x14540 Size=0xc
    float mapCenterBoundsMax[3];// Offset=0x1454c Size=0xc
    unsigned short botport;// Offset=0x14558 Size=0x2
    unsigned char __align0[2];// Offset=0x1455a Size=0x2
    struct serverSnapshot_t snapshots[32];// Offset=0x1455c Size=0xb00
    int serverSnapshotTimes[32];// Offset=0x1505c Size=0x80
    int nextServerSnapshotIndex;// Offset=0x150dc Size=0x4
    int dataSentLastSec;// Offset=0x150e0 Size=0x4
    int activeEntities;// Offset=0x150e4 Size=0x4
    int archivedEntityCount;// Offset=0x150e8 Size=0x4
    int oldestArchiveTime;// Offset=0x150ec Size=0x4
    int packetBackupCount;// Offset=0x150f0 Size=0x4
    int packetBackupMask;// Offset=0x150f4 Size=0x4
};

struct archivedEntityShared_t// Size=0x1c (Id=5756)
{
    int svFlags;// Offset=0x0 Size=0x4
    struct Bounds absBox;// Offset=0x4 Size=0x18
};

struct archivedEntity_s// Size=0x11c (Id=5757)
{
    struct entityState_s s;// Offset=0x0 Size=0x100
    struct archivedEntityShared_t r;// Offset=0x100 Size=0x1c
};

struct cachedClient_s// Size=0x3280 (Id=5758)
{
    struct playerState_s ps;// Offset=0x0 Size=0x3180
    int playerStateExists;// Offset=0x3180 Size=0x4
    struct clientState_s cs;// Offset=0x3184 Size=0x94
    unsigned char pad[104];// Offset=0x3218 Size=0x68
};

struct tempBanSlot_t// Size=0x18 (Id=5759)
{
    char playerGuid[17];// Offset=0x0 Size=0x11
    unsigned char __align0[3];// Offset=0x11 Size=0x3
    int banTime;// Offset=0x14 Size=0x4
};

struct archivedSnapshot_s// Size=0x8 (Id=5760)
{
    int start;// Offset=0x0 Size=0x4
    int size;// Offset=0x4 Size=0x4
};

struct client_t// Size=0x97f80 (Id=5761)
{
    struct clientHeader_t header;// Offset=0x0 Size=0x644
    char * dropReason;// Offset=0x644 Size=0x4
    char userinfo[1024];// Offset=0x648 Size=0x400
    struct svscmd_info_t reliableCommandInfo[128];// Offset=0xa48 Size=0x20400
    int reliableSequence;// Offset=0x20e48 Size=0x4
    int reliableAcknowledge;// Offset=0x20e4c Size=0x4
    int reliableSent;// Offset=0x20e50 Size=0x4
    int messageAcknowledge;// Offset=0x20e54 Size=0x4
    int gamestateMessageNum;// Offset=0x20e58 Size=0x4
    int challenge;// Offset=0x20e5c Size=0x4
    struct usercmd_s lastUsercmd;// Offset=0x20e60 Size=0x28
    int lastClientCommand;// Offset=0x20e88 Size=0x4
    char lastClientCommandString[1024];// Offset=0x20e8c Size=0x400
    struct gentity_s * gentity;// Offset=0x2128c Size=0x4
    char name[32];// Offset=0x21290 Size=0x20
    char clanAbbrev[5];// Offset=0x212b0 Size=0x5
    unsigned char __align0[3];// Offset=0x212b5 Size=0x3
    int nextReliableTime;// Offset=0x212b8 Size=0x4
    int lastPacketTime;// Offset=0x212bc Size=0x4
    int lastConnectTime;// Offset=0x212c0 Size=0x4
    int nextSnapshotTime;// Offset=0x212c4 Size=0x4
    int timeoutCount;// Offset=0x212c8 Size=0x4
    int ping;// Offset=0x212cc Size=0x4
    int rate;// Offset=0x212d0 Size=0x4
    int snapshotMsec;// Offset=0x212d4 Size=0x4
    int snapshotBackoffCount;// Offset=0x212d8 Size=0x4
    int pureAuthentic;// Offset=0x212dc Size=0x4
    char netchanOutgoingBuffer[65536];// Offset=0x212e0 Size=0x10000
    char netchanIncomingBuffer[2048];// Offset=0x312e0 Size=0x800
    char playerGuid[17];// Offset=0x31ae0 Size=0x11
    unsigned char __align1[1];// Offset=0x31af1 Size=0x1
    unsigned short scriptId;// Offset=0x31af2 Size=0x2
    int bIsTestClient;// Offset=0x31af4 Size=0x4
    int serverId;// Offset=0x31af8 Size=0x4
    bool usingOnlineStatsOffline;// Offset=0x31afc Size=0x1
    unsigned char stats[8192];// Offset=0x31afd Size=0x2000
    unsigned char statsModifiedFlags[1024];// Offset=0x33afd Size=0x400
    bool statsModified;// Offset=0x33efd Size=0x1
    unsigned char statPacketsReceived;// Offset=0x33efe Size=0x1
    bool sendMatchData;// Offset=0x33eff Size=0x1
    int matchDataSendTime;// Offset=0x33f00 Size=0x4
    unsigned char padding[99];// Offset=0x33f04 Size=0x63
    unsigned char __align2[25];// Offset=0x33f67 Size=0x19
    struct clientSnapshot_t frames[32];// Offset=0x33f80 Size=0x64000
};

struct serverSnapshot_t// Size=0x58 (Id=5762)
{
    struct playerState_s * ps[18];// Offset=0x0 Size=0x48
    int entityCount;// Offset=0x48 Size=0x4
    int clientCount;// Offset=0x4c Size=0x4
    int firstEntityIndex;// Offset=0x50 Size=0x4
    int firstClientIndex;// Offset=0x54 Size=0x4
};

struct clientHeader_t// Size=0x644 (Id=5763)
{
    int state;// Offset=0x0 Size=0x4
    int sendAsActive;// Offset=0x4 Size=0x4
    int deltaMessage;// Offset=0x8 Size=0x4
    int rateDelayed;// Offset=0xc Size=0x4
    struct netchan_t netchan;// Offset=0x10 Size=0x620
    float predictedOrigin[3];// Offset=0x630 Size=0xc
    int predictedOriginServerTime;// Offset=0x63c Size=0x4
    int migrationState;// Offset=0x640 Size=0x4
};

struct cachedSnapshot_t// Size=0x1c (Id=5764)
{
    int archivedFrame;// Offset=0x0 Size=0x4
    int time;// Offset=0x4 Size=0x4
    int num_entities;// Offset=0x8 Size=0x4
    int first_entity;// Offset=0xc Size=0x4
    int num_clients;// Offset=0x10 Size=0x4
    int first_client;// Offset=0x14 Size=0x4
    int usesDelta;// Offset=0x18 Size=0x4
};

struct svscmd_info_t// Size=0x408 (Id=5765)
{
    char cmd[1024];// Offset=0x0 Size=0x400
    int time;// Offset=0x400 Size=0x4
    int type;// Offset=0x404 Size=0x4
};

struct clientSnapshot_t// Size=0x3200 (Id=5766)
{
    struct playerState_s ps;// Offset=0x0 Size=0x3180
    int num_entities;// Offset=0x3180 Size=0x4
    int num_clients;// Offset=0x3184 Size=0x4
    int first_entity;// Offset=0x3188 Size=0x4
    int first_client;// Offset=0x318c Size=0x4
    int messageSent;// Offset=0x3190 Size=0x4
    int messageAcked;// Offset=0x3194 Size=0x4
    int messageSize;// Offset=0x3198 Size=0x4
    int serverTime;// Offset=0x319c Size=0x4
    int timeDelta;// Offset=0x31a0 Size=0x4
    unsigned char padding[92];// Offset=0x31a4 Size=0x5c
};

struct challenge_t// Size=0x38 (Id=5767)
{
    struct netadr_t adr;// Offset=0x0 Size=0xc
    int challenge;// Offset=0xc Size=0x4
    int time;// Offset=0x10 Size=0x4
    int pingTime;// Offset=0x14 Size=0x4
    int firstTime;// Offset=0x18 Size=0x4
    int firstPing;// Offset=0x1c Size=0x4
    int connected;// Offset=0x20 Size=0x4
    char playerGuid[17];// Offset=0x24 Size=0x11
};

struct cachedSnapshot_t// Size=0x1c (Id=5768)
{
    int archivedFrame;// Offset=0x0 Size=0x4
    int time;// Offset=0x4 Size=0x4
    int num_entities;// Offset=0x8 Size=0x4
    int first_entity;// Offset=0xc Size=0x4
    int num_clients;// Offset=0x10 Size=0x4
    int first_client;// Offset=0x14 Size=0x4
    int usesDelta;// Offset=0x18 Size=0x4
};

enum MigrationState
{
    MSTATE_INACTIVE=0,
    MSTATE_STARTING=1,
    MSTATE_HEADER=2,
    MSTATE_SENDING=3
};

enum MigrationClientState
{
    CSTATE_INACTIVE=0,
    CSTATE_WAITFORRATING=1,
    CSTATE_MIGRATING=2
};

struct MigrationGlobals// Size=0x508 (Id=5771)
{
    enum MigrationState state;// Offset=0x0 Size=0x4
    struct MigrationClient clients[18];// Offset=0x4 Size=0x120
    struct Block window[32];// Offset=0x124 Size=0x180
    int newHost;// Offset=0x2a4 Size=0x4
    int totalSize;// Offset=0x2a8 Size=0x4
    int block;// Offset=0x2ac Size=0x4
    unsigned int windowIndex;// Offset=0x2b0 Size=0x4
    bool active;// Offset=0x2b4 Size=0x1
    unsigned char __align0[3];// Offset=0x2b5 Size=0x3
    int blocksPerFrame;// Offset=0x2b8 Size=0x4
    int migrationCount;// Offset=0x2bc Size=0x4
    int migrationTime;// Offset=0x2c0 Size=0x4
    char reason[64];// Offset=0x2c4 Size=0x40
    int broadcastTime;// Offset=0x304 Size=0x4
    char verboseState[512];// Offset=0x308 Size=0x200
};

struct MigrationMessage// Size=0x8 (Id=5772)
{
    char * string;// Offset=0x0 Size=0x4
    void  ( * func)(const int ,struct netadr_t ,struct msg_t * );// Offset=0x4 Size=0x4
};

enum SaveHandleType
{
    SAVE_MIGRATION_HANDLE=0
};

struct MigrationMessage// Size=0x8 (Id=5774)
{
    char * string;// Offset=0x0 Size=0x4
    void  ( * func)(const int ,struct msg_t * );// Offset=0x4 Size=0x4
};

struct MigrationClient// Size=0x10 (Id=5775)
{
    enum MigrationClientState state;// Offset=0x0 Size=0x4
    int attempts;// Offset=0x4 Size=0x4
    int msgTimeout;// Offset=0x8 Size=0x4
    int rating;// Offset=0xc Size=0x4
};

struct Block// Size=0xc (Id=5776)
{
    int num;// Offset=0x0 Size=0x4
    int size;// Offset=0x4 Size=0x4
    int timeout;// Offset=0x8 Size=0x4
};

enum svscmd_type
{
    SV_CMD_CAN_IGNORE=0,
    SV_CMD_RELIABLE=1
};

enum server_hardware_types
{
    SERVERHARDWARE_UNKNOWN=0,
    SERVERHARDWARE_LINUXDEDICATED=1,
    SERVERHARDWARE_WINDEDICATED=2,
    SERVERHARDWARE_MACDEDICATED=3,
    SERVERHARDWARE_XENONDEDICATED=4,
    SERVERHARDWARE_PS3DEDICATED=5,
    SERVERHARDWARE_WINLISTEN=6,
    SERVERHARDWARE_MACLISTEN=7,
    SERVERHARDWARE_XENONLISTEN=8,
    SERVERHARDWARE_PS3LISTEN=9,
    MAX_SERVERHARDWARE=10
};

enum _unnamed_5779
{
    DB_LOAD_ASYNC=0,
    DB_LOAD_SYNC=1
};

enum _unnamed_5780
{
    TRACK_DEBUG=0,
    TRACK_FREE=1,
    TRACK_BINARIES=2,
    TRACK_MISC_SWAP=3,
    TRACK_DELIMITER1=4,
    TRACK_AI=5,
    TRACK_AI_NODES=6,
    TRACK_SCRIPT=7,
    TRACK_FX=8,
    TRACK_NETWORK_ENTITY=9,
    TRACK_MISC=10,
    TRACK_ANIMATION=11,
    TRACK_WORLD_GLOBALS=12,
    TRACK_SOUND_GLOBALS=13,
    TRACK_XENON_SOUND_GLOBALS=14,
    TRACK_SOUND=15,
    TRACK_XENON_SOUND=16,
    TRACK_DELIMITER2=17,
    TRACK_RENDERER_GLOBALS=18,
    TRACK_RENDERER_IMAGES=19,
    TRACK_RENDERER_WORLD=20,
    TRACK_RENDERER_MODELS=21,
    TRACK_RENDERER_MISC=22,
    TRACK_RENDERER_TOTAL=23,
    TRACK_DELIMITER3=24,
    TRACK_COLLISION_MISC=25,
    TRACK_COLLISION_BRUSH=26,
    TRACK_COLLISION_MODEL_TRI=27,
    TRACK_COLLISION_TERRAIN=28,
    TRACK_COLLISION_TOTAL=29,
    TRACK_MAP_ENTS=30,
    TRACK_VEHICLE=31,
    TRACK_TEMP=32,
    TRACK_DELIMITER4=33,
    TRACK_LOCALIZATION=34,
    TRACK_UI=35,
    TRACK_CONSOLE_IMAGES=36,
    TRACK_DELIMITER5=37,
    TRACK_COUNT=38
};

struct XZoneInfo// Size=0xc (Id=5781)
{
    char * name;// Offset=0x0 Size=0x4
    int allocFlags;// Offset=0x4 Size=0x4
    int freeFlags;// Offset=0x8 Size=0x4
};

enum _unnamed_5782
{
    GAMEMODE_NONE=0,
    GAMEMODE_SP=1,
    GAMEMODE_SO=2,
    GAMEMODE_MP=3,
    NUM_GAMEMODES=4
};

enum _unnamed_5783
{
    PA_UNVALIDATED=0,
    PA_VALID=1,
    PA_INVALID=2
};

struct ucmd_t// Size=0xc (Id=5784)
{
    char * name;// Offset=0x0 Size=0x4
    void  ( * func)(struct client_t * );// Offset=0x4 Size=0x4
    int allowFromOldServer;// Offset=0x8 Size=0x4
};

enum SaveErrorType
{
    SAVE_ERROR_MISSING_DEVICE=0,
    SAVE_ERROR_CORRUPT_SAVE=1
};

struct clientState_s// Size=0x94 (Id=5786)
{
    int clientIndex;// Offset=0x0 Size=0x4
    enum team_t team;// Offset=0x4 Size=0x4
    int modelindex;// Offset=0x8 Size=0x4
    int dualWielding;// Offset=0xc Size=0x4
    int riotShieldNext;// Offset=0x10 Size=0x4
    int attachModelIndex[6];// Offset=0x14 Size=0x18
    int attachTagIndex[6];// Offset=0x2c Size=0x18
    char name[32];// Offset=0x44 Size=0x20
    float maxSprintTimeMultiplier;// Offset=0x64 Size=0x4
    int rank;// Offset=0x68 Size=0x4
    int prestige;// Offset=0x6c Size=0x4
    unsigned int perks[2];// Offset=0x70 Size=0x8
    int diveState;// Offset=0x78 Size=0x4
    int voiceConnectivityBits;// Offset=0x7c Size=0x4
    char clanAbbrev[8];// Offset=0x80 Size=0x8
    unsigned int playerCardIcon;// Offset=0x88 Size=0x4
    unsigned int playerCardTitle;// Offset=0x8c Size=0x4
    unsigned int playerCardNameplate;// Offset=0x90 Size=0x4
};

union sval_u// Size=0x4 (Id=5787)
{
    int type;// Offset=0x0 Size=0x4
    unsigned int stringValue;// Offset=0x0 Size=0x4
    unsigned int idValue;// Offset=0x0 Size=0x4
    float floatValue;// Offset=0x0 Size=0x4
    int intValue;// Offset=0x0 Size=0x4
    union sval_u * node;// Offset=0x0 Size=0x4
    unsigned int sourcePosValue;// Offset=0x0 Size=0x4
    char * codePosValue;// Offset=0x0 Size=0x4
    char * debugString;// Offset=0x0 Size=0x4
    struct scr_block_t * block;// Offset=0x0 Size=0x4
};

struct stype_t// Size=0x8 (Id=5788)
{
    union sval_u val;// Offset=0x0 Size=0x4
    unsigned int pos;// Offset=0x4 Size=0x4
};

struct yy_buffer_state// Size=0x28 (Id=5789)
{
    struct _iobuf * yy_input_file;// Offset=0x0 Size=0x4
    char * yy_ch_buf;// Offset=0x4 Size=0x4
    char * yy_buf_pos;// Offset=0x8 Size=0x4
    unsigned int yy_buf_size;// Offset=0xc Size=0x4
    int yy_n_chars;// Offset=0x10 Size=0x4
    int yy_is_our_buffer;// Offset=0x14 Size=0x4
    int yy_is_interactive;// Offset=0x18 Size=0x4
    int yy_at_bol;// Offset=0x1c Size=0x4
    int yy_fill_buffer;// Offset=0x20 Size=0x4
    int yy_buffer_status;// Offset=0x24 Size=0x4
};

enum _unnamed_5790
{
    ENUM_NOP=0,
    ENUM_program=1,
    ENUM_assignment=2,
    ENUM_unknown_variable=3,
    ENUM_local_variable=4,
    ENUM_local_variable_frozen=5,
    ENUM_primitive_expression=6,
    ENUM_duplicate_expression=7,
    ENUM_integer=8,
    ENUM_float=9,
    ENUM_minus_integer=10,
    ENUM_minus_float=11,
    ENUM_string=12,
    ENUM_istring=13,
    ENUM_array_variable=14,
    ENUM_unknown_field=15,
    ENUM_field_variable=16,
    ENUM_duplicate_variable=17,
    ENUM_field_variable_frozen=18,
    ENUM_variable=19,
    ENUM_function=20,
    ENUM_call_expression=21,
    ENUM_local_function=22,
    ENUM_far_function=23,
    ENUM_function_pointer=24,
    ENUM_call=25,
    ENUM_method=26,
    ENUM_call_expression_statement=27,
    ENUM_script_call=28,
    ENUM_return=29,
    ENUM_return2=30,
    ENUM_wait=31,
    ENUM_script_thread_call=32,
    ENUM_script_child_thread_call=33,
    ENUM_script_builtin_call_pointer=34,
    ENUM_undefined=35,
    ENUM_self=36,
    ENUM_self_frozen=37,
    ENUM_thisthread=38,
    ENUM_level=39,
    ENUM_game=40,
    ENUM_anim=41,
    ENUM_if=42,
    ENUM_if_else=43,
    ENUM_while=44,
    ENUM_for=45,
    ENUM_inc=46,
    ENUM_dec=47,
    ENUM_binary_equals=48,
    ENUM_statement_list=49,
    ENUM_developer_statement_list=50,
    ENUM_expression_list=51,
    ENUM_bool_or=52,
    ENUM_bool_and=53,
    ENUM_binary=54,
    ENUM_bool_not=55,
    ENUM_bool_complement=56,
    ENUM_size_field=57,
    ENUM_self_field=58,
    ENUM_precachetree=59,
    ENUM_waittill=60,
    ENUM_waittillmatch=61,
    ENUM_waittillFrameEnd=62,
    ENUM_notify=63,
    ENUM_endon=64,
    ENUM_switch=65,
    ENUM_case=66,
    ENUM_default=67,
    ENUM_break=68,
    ENUM_continue=69,
    ENUM_expression=70,
    ENUM_empty_array=71,
    ENUM_animation=72,
    ENUM_thread=73,
    ENUM_begin_developer_thread=74,
    ENUM_end_developer_thread=75,
    ENUM_usingtree=76,
    ENUM_false=77,
    ENUM_true=78,
    ENUM_animtree=79,
    ENUM_breakon=80,
    ENUM_breakpoint=81,
    ENUM_prof_begin=82,
    ENUM_prof_end=83,
    ENUM_vector=84,
    ENUM_object=85,
    ENUM_thread_object=86,
    ENUM_local=87,
    ENUM_statement=88,
    ENUM_bad_expression=89,
    ENUM_bad_statement=90,
    ENUM_include=91,
    ENUM_argument=92,
    ENUM_define_statement=93
};

struct scrCompilePub_t// Size=0x21040 (Id=5791)
{
    int value_count;// Offset=0x0 Size=0x4
    int far_function_count;// Offset=0x4 Size=0x4
    unsigned int loadedscripts;// Offset=0x8 Size=0x4
    unsigned int scriptsPos;// Offset=0xc Size=0x4
    unsigned int scriptsCount;// Offset=0x10 Size=0x4
    unsigned int scriptsDefine;// Offset=0x14 Size=0x4
    unsigned int builtinFunc;// Offset=0x18 Size=0x4
    unsigned int builtinMeth;// Offset=0x1c Size=0x4
    unsigned short canonicalStrings[65536];// Offset=0x20 Size=0x20000
    char * in_ptr;// Offset=0x20020 Size=0x4
    bool in_ptr_valid;// Offset=0x20024 Size=0x1
    unsigned char __align0[3];// Offset=0x20025 Size=0x3
    char * parseBuf;// Offset=0x20028 Size=0x4
    bool script_loading;// Offset=0x2002c Size=0x1
    bool allowedBreakpoint;// Offset=0x2002d Size=0x1
    unsigned char __align1[2];// Offset=0x2002e Size=0x2
    int developer_statement;// Offset=0x20030 Size=0x4
    unsigned char * opcodePos;// Offset=0x20034 Size=0x4
    unsigned int programLen;// Offset=0x20038 Size=0x4
    int func_table_size;// Offset=0x2003c Size=0x4
    int func_table[1024];// Offset=0x20040 Size=0x1000
};

enum _unnamed_5792
{
    OP_End=0,
    OP_Return=1,
    OP_GetUndefined=2,
    OP_GetZero=3,
    OP_GetByte=4,
    OP_GetNegByte=5,
    OP_GetUnsignedShort=6,
    OP_GetNegUnsignedShort=7,
    OP_GetInteger=8,
    OP_GetBuiltinFunction=9,
    OP_GetBuiltinMethod=10,
    OP_GetFloat=11,
    OP_GetString=12,
    OP_GetIString=13,
    OP_GetVector=14,
    OP_GetLevelObject=15,
    OP_GetAnimObject=16,
    OP_GetSelf=17,
    OP_GetThisthread=18,
    OP_GetLevel=19,
    OP_GetGame=20,
    OP_GetAnim=21,
    OP_GetAnimation=22,
    OP_GetGameRef=23,
    OP_GetFunction=24,
    OP_CreateLocalVariable=25,
    OP_RemoveLocalVariables=26,
    OP_EvalLocalVariableCached0=27,
    OP_EvalLocalVariableCached1=28,
    OP_EvalLocalVariableCached2=29,
    OP_EvalLocalVariableCached3=30,
    OP_EvalLocalVariableCached4=31,
    OP_EvalLocalVariableCached5=32,
    OP_EvalLocalVariableCached=33,
    OP_EvalLocalArrayCached=34,
    OP_EvalArray=35,
    OP_EvalLocalArrayRefCached0=36,
    OP_EvalNewLocalArrayRefCached0=37,
    OP_EvalLocalArrayRefCached=38,
    OP_EvalArrayRef=39,
    OP_ClearArray=40,
    OP_EmptyArray=41,
    OP_GetSelfObject=42,
    OP_EvalLevelFieldVariable=43,
    OP_EvalAnimFieldVariable=44,
    OP_EvalSelfFieldVariable=45,
    OP_EvalFieldVariable=46,
    OP_EvalLevelFieldVariableRef=47,
    OP_EvalAnimFieldVariableRef=48,
    OP_EvalSelfFieldVariableRef=49,
    OP_EvalFieldVariableRef=50,
    OP_ClearFieldVariable=51,
    OP_SafeCreateVariableFieldCached=52,
    OP_SafeSetVariableFieldCached0=53,
    OP_SafeSetVariableFieldCached=54,
    OP_SafeSetWaittillVariableFieldCached=55,
    OP_clearparams=56,
    OP_checkclearparams=57,
    OP_EvalLocalVariableRefCached0=58,
    OP_EvalNewLocalVariableRefCached0=59,
    OP_EvalLocalVariableRefCached=60,
    OP_SetLevelFieldVariableField=61,
    OP_SetVariableField=62,
    OP_SetAnimFieldVariableField=63,
    OP_SetSelfFieldVariableField=64,
    OP_SetLocalVariableFieldCached0=65,
    OP_SetNewLocalVariableFieldCached0=66,
    OP_SetLocalVariableFieldCached=67,
    OP_CallBuiltin0=68,
    OP_CallBuiltin1=69,
    OP_CallBuiltin2=70,
    OP_CallBuiltin3=71,
    OP_CallBuiltin4=72,
    OP_CallBuiltin5=73,
    OP_CallBuiltin=74,
    OP_CallBuiltinMethod0=75,
    OP_CallBuiltinMethod1=76,
    OP_CallBuiltinMethod2=77,
    OP_CallBuiltinMethod3=78,
    OP_CallBuiltinMethod4=79,
    OP_CallBuiltinMethod5=80,
    OP_CallBuiltinMethod=81,
    OP_wait=82,
    OP_waittillFrameEnd=83,
    OP_PreScriptCall=84,
    OP_ScriptFunctionCall2=85,
    OP_ScriptFunctionCall=86,
    OP_ScriptFunctionCallPointer=87,
    OP_ScriptMethodCall=88,
    OP_ScriptMethodCallPointer=89,
    OP_ScriptThreadCall=90,
    OP_ScriptChildThreadCall=91,
    OP_ScriptThreadCallPointer=92,
    OP_ScriptChildThreadCallPointer=93,
    OP_ScriptMethodThreadCall=94,
    OP_ScriptMethodChildThreadCall=95,
    OP_ScriptMethodThreadCallPointer=96,
    OP_ScriptMethodChildThreadCallPointer=97,
    OP_CallBuiltinPointer=98,
    OP_CallBuiltinMethodPointer=99,
    OP_DecTop=100,
    OP_CastFieldObject=101,
    OP_EvalLocalVariableObjectCached=102,
    OP_CastBool=103,
    OP_BoolNot=104,
    OP_BoolComplement=105,
    OP_JumpOnFalse=106,
    OP_JumpOnTrue=107,
    OP_JumpOnFalseExpr=108,
    OP_JumpOnTrueExpr=109,
    OP_jump=110,
    OP_jumpback=111,
    OP_inc=112,
    OP_dec=113,
    OP_bit_or=114,
    OP_bit_ex_or=115,
    OP_bit_and=116,
    OP_equality=117,
    OP_inequality=118,
    OP_less=119,
    OP_greater=120,
    OP_less_equal=121,
    OP_greater_equal=122,
    OP_shift_left=123,
    OP_shift_right=124,
    OP_plus=125,
    OP_minus=126,
    OP_multiply=127,
    OP_divide=128,
    OP_mod=129,
    OP_size=130,
    OP_waittillmatch=131,
    OP_waittillmatch2=132,
    OP_waittill=133,
    OP_notify=134,
    OP_endon=135,
    OP_voidCodepos=136,
    OP_switch=137,
    OP_endswitch=138,
    OP_vector=139,
    OP_count=140
};

struct VariableStackBuffer// Size=0xc (Id=5793)
{
    char * pos;// Offset=0x0 Size=0x4
    unsigned short size;// Offset=0x4 Size=0x2
    unsigned short bufLen;// Offset=0x6 Size=0x2
    unsigned short localId;// Offset=0x8 Size=0x2
    unsigned char time;// Offset=0xa Size=0x1
    char buf[1];// Offset=0xb Size=0x1
};

struct function_stack_t// Size=0x14 (Id=5794)
{
    char * pos;// Offset=0x0 Size=0x4
    unsigned int localId;// Offset=0x4 Size=0x4
    unsigned int localVarCount;// Offset=0x8 Size=0x4
    struct VariableValue * top;// Offset=0xc Size=0x4
    struct VariableValue * startTop;// Offset=0x10 Size=0x4
};

enum _unnamed_5795
{
    VAR_NAME_BITS=8,
    VAR_NAME_LOW_MASK=16777215,
    VAR_NAME_HIGH_MASK=-256,
    VAR_MIN_INT=-8388608,
    VAR_MAX_INT=8388607
};

struct scrVarPub_t// Size=0x24060 (Id=5796)
{
    char * fieldBuffer;// Offset=0x0 Size=0x4
    unsigned short canonicalStrCount;// Offset=0x4 Size=0x2
    bool developer_script;// Offset=0x6 Size=0x1
    bool evaluate;// Offset=0x7 Size=0x1
    char * error_message;// Offset=0x8 Size=0x4
    int error_index;// Offset=0xc Size=0x4
    unsigned int time;// Offset=0x10 Size=0x4
    unsigned int timeArrayId;// Offset=0x14 Size=0x4
    unsigned int pauseArrayId;// Offset=0x18 Size=0x4
    unsigned int notifyArrayId;// Offset=0x1c Size=0x4
    unsigned int objectStackId;// Offset=0x20 Size=0x4
    unsigned int levelId;// Offset=0x24 Size=0x4
    unsigned int gameId;// Offset=0x28 Size=0x4
    unsigned int animId;// Offset=0x2c Size=0x4
    unsigned int freeEntList;// Offset=0x30 Size=0x4
    unsigned int tempVariable;// Offset=0x34 Size=0x4
    unsigned int numScriptValues[2];// Offset=0x38 Size=0x8
    bool bInited;// Offset=0x40 Size=0x1
    unsigned char __align0[1];// Offset=0x41 Size=0x1
    unsigned short savecount;// Offset=0x42 Size=0x2
    unsigned short savecountMark;// Offset=0x44 Size=0x2
    unsigned char __align1[2];// Offset=0x46 Size=0x2
    unsigned int checksum;// Offset=0x48 Size=0x4
    unsigned int entId;// Offset=0x4c Size=0x4
    unsigned int entFieldName;// Offset=0x50 Size=0x4
    struct HunkUser * programHunkUser;// Offset=0x54 Size=0x4
    char * programBuffer;// Offset=0x58 Size=0x4
    char * endScriptBuffer;// Offset=0x5c Size=0x4
    unsigned short saveIdMap[36864];// Offset=0x60 Size=0x12000
    unsigned short saveIdMapRev[36864];// Offset=0x12060 Size=0x12000
};

struct scrVmGlob_t// Size=0x201c (Id=5797)
{
    struct VariableValue eval_stack[2];// Offset=0x0 Size=0x10
    char * dialog_error_message;// Offset=0x10 Size=0x4
    int loading;// Offset=0x14 Size=0x4
    int starttime;// Offset=0x18 Size=0x4
    unsigned int localVarsStack[2048];// Offset=0x1c Size=0x2000
};

enum _unnamed_5798
{
    STEP_CONTINUE=0,
    STEP_OVER=1,
    STEP_INTO=2,
    STEP_OUT=3,
    STEP_AUTO=4
};

enum _unnamed_5799
{
    MAX_VM_STACK_DEPTH=32,
    MAX_VM_OPERAND_STACK=2048
};

enum _unnamed_5800
{
    LOCAL_VAR_STACK_SIZE=64
};

struct scrVmPub_t// Size=0x4320 (Id=5801)
{
    unsigned int * localVars;// Offset=0x0 Size=0x4
    struct VariableValue * maxstack;// Offset=0x4 Size=0x4
    int function_count;// Offset=0x8 Size=0x4
    struct function_frame_t * function_frame;// Offset=0xc Size=0x4
    struct VariableValue * top;// Offset=0x10 Size=0x4
    bool debugCode;// Offset=0x14 Size=0x1
    bool abort_on_error;// Offset=0x15 Size=0x1
    bool terminal_error;// Offset=0x16 Size=0x1
    unsigned char __align0[1];// Offset=0x17 Size=0x1
    unsigned int inparamcount;// Offset=0x18 Size=0x4
    unsigned int outparamcount;// Offset=0x1c Size=0x4
    struct function_frame_t function_frame_start[32];// Offset=0x20 Size=0x300
    struct VariableValue stack[2048];// Offset=0x320 Size=0x4000
};

enum _unnamed_5802
{
    SCR_XANIM_CLIENT=0,
    SCR_XANIM_SERVER=1,
    SCR_XANIM_COUNT=2
};

struct scrVmDebugPub_t// Size=0x4 (Id=5803)
{
    int dummy;// Offset=0x0 Size=0x4
};

struct scrAnimPub_t// Size=0x41c (Id=5804)
{
    unsigned int animtrees;// Offset=0x0 Size=0x4
    unsigned int animtree_node;// Offset=0x4 Size=0x4
    unsigned int animTreeNames;// Offset=0x8 Size=0x4
    struct scr_animtree_t xanim_lookup[2][128];// Offset=0xc Size=0x400
    unsigned int xanim_num[2];// Offset=0x40c Size=0x8
    unsigned int animTreeIndex;// Offset=0x414 Size=0x4
    bool animtree_loading;// Offset=0x418 Size=0x1
};

struct function_frame_t// Size=0x18 (Id=5805)
{
    struct function_stack_t fs;// Offset=0x0 Size=0x14
    int topType;// Offset=0x14 Size=0x4
};

struct ThreadDebugInfo// Size=0x8c (Id=5806)
{
    char * pos[32];// Offset=0x0 Size=0x80
    int posSize;// Offset=0x80 Size=0x4
    float varUsage;// Offset=0x84 Size=0x4
    float endonUsage;// Offset=0x88 Size=0x4
};

enum _unnamed_5807
{
    VAR_MASK=31
};

enum _unnamed_5808
{
    VAR_STAT_FREE=0,
    VAR_STAT_MOVABLE=32,
    VAR_STAT_HEAD=64,
    VAR_STAT_EXTERNAL=96,
    VAR_STAT_MASK=96
};

struct scrVarGlob_t// Size=0x220080 (Id=5809)
{
    struct VariableValueInternal variableList[139267];// Offset=0x0 Size=0x220030
};

struct scr_classStruct_t// Size=0xc (Id=5810)
{
    unsigned short id;// Offset=0x0 Size=0x2
    unsigned short entArrayId;// Offset=0x2 Size=0x2
    char charId;// Offset=0x4 Size=0x1
    unsigned char __align0[3];// Offset=0x5 Size=0x3
    char * name;// Offset=0x8 Size=0x4
};

struct scrVarDebugPub_t// Size=0x1 (Id=5811)
{
    bool dummy;// Offset=0x0 Size=0x1
};

struct ObjectInfo// Size=0x4 (Id=5812)
{
    union // Size=0x2 (Id=0)
    {
        unsigned short refCount;// Offset=0x0 Size=0x2
        union <unnamed-type-u>// Size=0x2 (Id=62419)
        {
            unsigned short size;// Offset=0x0 Size=0x2
            unsigned short entnum;// Offset=0x0 Size=0x2
            unsigned short nextEntId;// Offset=0x0 Size=0x2
            unsigned short self;// Offset=0x0 Size=0x2
        };
    };
    union ObjectInfo::<unnamed-type-u> u;// Offset=0x2 Size=0x2
};

union ObjectInfo::<unnamed-type-u>// Size=0x2 (Id=5813)
{
    unsigned short size;// Offset=0x0 Size=0x2
    unsigned short entnum;// Offset=0x0 Size=0x2
    unsigned short nextEntId;// Offset=0x0 Size=0x2
    unsigned short self;// Offset=0x0 Size=0x2
};

struct Variable// Size=0x4 (Id=5814)
{
    union // Size=0x2 (Id=0)
    {
        unsigned short id;// Offset=0x0 Size=0x2
        union <unnamed-type-u>// Size=0x2 (Id=62426)
        {
            unsigned short prev;// Offset=0x0 Size=0x2
            unsigned short prevSibling;// Offset=0x0 Size=0x2
        };
    };
    union Variable::<unnamed-type-u> u;// Offset=0x2 Size=0x2
};

union Variable::<unnamed-type-u>// Size=0x2 (Id=5815)
{
    unsigned short prev;// Offset=0x0 Size=0x2
    unsigned short prevSibling;// Offset=0x0 Size=0x2
};

struct VariableValueInternal// Size=0x10 (Id=5816)
{
    union // Size=0xc (Id=0)
    {
        struct Variable hash;// Offset=0x0 Size=0x4
        union <unnamed-type-u>// Size=0x4 (Id=62431)
        {
            unsigned short next;// Offset=0x0 Size=0x2
            union VariableUnion u;// Offset=0x0 Size=0x4
            struct ObjectInfo o;// Offset=0x0 Size=0x4
        };
        union VariableValueInternal::<unnamed-type-u> u;// Offset=0x4 Size=0x4
        union <unnamed-type-w>// Size=0x4 (Id=62436)
        {
            unsigned int status;// Offset=0x0 Size=0x4
            unsigned int type;// Offset=0x0 Size=0x4
            unsigned int name;// Offset=0x0 Size=0x4
            unsigned int classnum;// Offset=0x0 Size=0x4
            unsigned int notifyName;// Offset=0x0 Size=0x4
            unsigned int waitTime;// Offset=0x0 Size=0x4
            unsigned int parentLocalId;// Offset=0x0 Size=0x4
        };
        unsigned char __align0[4];// Offset=0x4 Size=0x4
        union VariableValueInternal::<unnamed-type-w> w;// Offset=0x8 Size=0x4
        union <unnamed-type-v>// Size=0x2 (Id=62445)
        {
            unsigned short next;// Offset=0x0 Size=0x2
            unsigned short index;// Offset=0x0 Size=0x2
        };
        unsigned char __align1[10];// Offset=0x2 Size=0xa
    };
    union VariableValueInternal::<unnamed-type-v> v;// Offset=0xc Size=0x2
    unsigned short nextSibling;// Offset=0xe Size=0x2
};

union VariableValueInternal::<unnamed-type-v>// Size=0x2 (Id=5817)
{
    unsigned short next;// Offset=0x0 Size=0x2
    unsigned short index;// Offset=0x0 Size=0x2
};

union VariableValueInternal::<unnamed-type-w>// Size=0x4 (Id=5818)
{
    unsigned int status;// Offset=0x0 Size=0x4
    unsigned int type;// Offset=0x0 Size=0x4
    unsigned int name;// Offset=0x0 Size=0x4
    unsigned int classnum;// Offset=0x0 Size=0x4
    unsigned int notifyName;// Offset=0x0 Size=0x4
    unsigned int waitTime;// Offset=0x0 Size=0x4
    unsigned int parentLocalId;// Offset=0x0 Size=0x4
};

union VariableValueInternal::<unnamed-type-u>// Size=0x4 (Id=5819)
{
    unsigned short next;// Offset=0x0 Size=0x2
    union VariableUnion u;// Offset=0x0 Size=0x4
    struct ObjectInfo o;// Offset=0x0 Size=0x4
};

struct scrMemTreePub_t// Size=0x4 (Id=5820)
{
    char * mt_buffer;// Offset=0x0 Size=0x4
};

struct scrStringGlob_t// Size=0x38080 (Id=5821)
{
    struct HashEntry hashTable[28672];// Offset=0x0 Size=0x38000
    bool inited;// Offset=0x38000 Size=0x1
    unsigned char __align0[3];// Offset=0x38001 Size=0x3
    struct HashEntry * nextFreeEntry;// Offset=0x38004 Size=0x4
};

enum _unnamed_5822
{
    HASH_STAT_FREE=0,
    HASH_STAT_MOVABLE=65536,
    HASH_STAT_HEAD=131072,
    HASH_STAT_MASK=196608
};

enum _unnamed_5823
{
    HASH_NEXT_MASK=65535
};

struct RefString// Size=0x8 (Id=5824)
{
    union // Size=0x4 (Id=0)
    {
        struct // Size=0x4 (Id=0)
        {
            unsigned int byteLen:8;// Offset=0x0 Size=0x4 BitOffset=0x18 BitSize=0x8
            unsigned int user:8;// Offset=0x0 Size=0x4 BitOffset=0x10 BitSize=0x8
            unsigned int refCount:16;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x10
        };
        long data;// Offset=0x0 Size=0x4
    };
    char str[1];// Offset=0x4 Size=0x1
};

struct HashEntry// Size=0x8 (Id=5825)
{
    union // Size=0x4 (Id=0)
    {
        unsigned int status_next;// Offset=0x0 Size=0x4
        union <unnamed-type-u>// Size=0x4 (Id=62467)
        {
            unsigned int prev;// Offset=0x0 Size=0x4
            unsigned int str;// Offset=0x0 Size=0x4
        };
    };
    union HashEntry::<unnamed-type-u> u;// Offset=0x4 Size=0x4
};

union HashEntry::<unnamed-type-u>// Size=0x4 (Id=5826)
{
    unsigned int prev;// Offset=0x0 Size=0x4
    unsigned int str;// Offset=0x0 Size=0x4
};

enum _unnamed_5827
{
    SAVE_OBJECT_DEFAULT=0,
    SAVE_OBJECT_THREAD=1,
    SAVE_OBJECT_NOTIFY_THREAD=2,
    SAVE_OBJECT_TIME_THREAD=3,
    SAVE_OBJECT_CHILD_THREAD=4,
    SAVE_OBJECT_DEAD_ENTITY=5
};

struct SaveImmediate// Size=0xc (Id=5828)
{
    void * f;// Offset=0x0 Size=0x4
    unsigned char * buf;// Offset=0x4 Size=0x4
    int bufOffset;// Offset=0x8 Size=0x4
};

struct scrMemTreeGlob_t// Size=0xc2100 (Id=5829)
{
    struct MemoryNode nodes[65536];// Offset=0x0 Size=0xc0000
    unsigned int nodeBits[2048];// Offset=0xc0000 Size=0x2000
    unsigned int sizeBits[5];// Offset=0xc2000 Size=0x14
    unsigned int head[17];// Offset=0xc2014 Size=0x44
    unsigned int backtrackAmount[17];// Offset=0xc2058 Size=0x44
};

struct MemoryNode// Size=0xc (Id=5830)
{
    unsigned int padding[3];// Offset=0x0 Size=0xc
};

enum _unnamed_5831
{
    SCR_DEV_NO=0,
    SCR_DEV_YES=1,
    SCR_DEV_IGNORE=2
};

struct PrecacheEntry// Size=0x8 (Id=5832)
{
    unsigned short filename;// Offset=0x0 Size=0x2
    bool include;// Offset=0x2 Size=0x1
    unsigned char __align0[1];// Offset=0x3 Size=0x1
    unsigned int sourcePos;// Offset=0x4 Size=0x4
};

struct VariableCompileValue// Size=0xc (Id=5833)
{
    struct VariableValue value;// Offset=0x0 Size=0x8
    union sval_u sourcePos;// Offset=0x8 Size=0x4
};

enum _unnamed_5834
{
    THREAD_COUNT=0,
    THREAD_INDICES=1
};

enum _unnamed_5835
{
    SOURCE_TYPE_BREAKPOINT=1,
    SOURCE_TYPE_CALL=2,
    SOURCE_TYPE_CALL_POINTER=4,
    SOURCE_TYPE_THREAD_START=8,
    SOURCE_TYPE_BUILTIN_CALL=16,
    SOURCE_TYPE_NOTIFY=32,
    SOURCE_TYPE_GETFUNCTION=64,
    SOURCE_TYPE_WAIT=128
};

enum _unnamed_5836
{
    FUNC_SCOPE_LOCAL=0,
    FUNC_SCOPE_FAR=1
};

enum _unnamed_5837
{
    BUILTIN_ANY=0,
    BUILTIN_DEVELOPER_ONLY=1
};

enum _unnamed_5838
{
    SCR_ABORT_NONE=0,
    SCR_ABORT_CONTINUE=1,
    SCR_ABORT_BREAK=2,
    SCR_ABORT_RETURN=3,
    SCR_ABORT_MAX=3
};

struct scrCompileGlob_t// Size=0x1dc (Id=5839)
{
    unsigned char * codePos;// Offset=0x0 Size=0x4
    unsigned char * prevOpcodePos;// Offset=0x4 Size=0x4
    unsigned int filePosId;// Offset=0x8 Size=0x4
    unsigned int fileCountId;// Offset=0xc Size=0x4
    int cumulOffset;// Offset=0x10 Size=0x4
    int prevCumulOffset;// Offset=0x14 Size=0x4
    int maxOffset;// Offset=0x18 Size=0x4
    int maxCallOffset;// Offset=0x1c Size=0x4
    bool bConstRefCount;// Offset=0x20 Size=0x1
    bool in_developer_thread;// Offset=0x21 Size=0x1
    unsigned char __align0[2];// Offset=0x22 Size=0x2
    unsigned int developer_thread_sourcePos;// Offset=0x24 Size=0x4
    bool firstThread[2];// Offset=0x28 Size=0x2
    unsigned char __align1[2];// Offset=0x2a Size=0x2
    struct CaseStatementInfo * currentCaseStatement;// Offset=0x2c Size=0x4
    bool bCanBreak;// Offset=0x30 Size=0x1
    unsigned char __align2[3];// Offset=0x31 Size=0x3
    struct BreakStatementInfo * currentBreakStatement;// Offset=0x34 Size=0x4
    bool bCanContinue;// Offset=0x38 Size=0x1
    unsigned char __align3[3];// Offset=0x39 Size=0x3
    struct ContinueStatementInfo * currentContinueStatement;// Offset=0x3c Size=0x4
    struct scr_block_t ** breakChildBlocks;// Offset=0x40 Size=0x4
    int * breakChildCount;// Offset=0x44 Size=0x4
    struct scr_block_t * breakBlock;// Offset=0x48 Size=0x4
    struct scr_block_t ** continueChildBlocks;// Offset=0x4c Size=0x4
    int * continueChildCount;// Offset=0x50 Size=0x4
    bool forceNotCreate;// Offset=0x54 Size=0x1
    unsigned char __align4[3];// Offset=0x55 Size=0x3
    struct PrecacheEntry * precachescriptList;// Offset=0x58 Size=0x4
    struct VariableCompileValue value_start[32];// Offset=0x5c Size=0x180
};

enum _unnamed_5840
{
    CALL_NONE=0,
    CALL_BUILTIN=1,
    CALL_THREAD=2,
    CALL_FUNCTION=3
};

struct scr_localVar_t// Size=0x4 (Id=5841)
{
    unsigned int name;// Offset=0x0 Size=0x4
};

struct CaseStatementInfo// Size=0x10 (Id=5842)
{
    unsigned int name;// Offset=0x0 Size=0x4
    char * codePos;// Offset=0x4 Size=0x4
    unsigned int sourcePos;// Offset=0x8 Size=0x4
    struct CaseStatementInfo * next;// Offset=0xc Size=0x4
};

struct ContinueStatementInfo// Size=0xc (Id=5843)
{
    char * codePos;// Offset=0x0 Size=0x4
    char * nextCodePos;// Offset=0x4 Size=0x4
    struct ContinueStatementInfo * next;// Offset=0x8 Size=0x4
};

struct BreakStatementInfo// Size=0xc (Id=5844)
{
    char * codePos;// Offset=0x0 Size=0x4
    char * nextCodePos;// Offset=0x4 Size=0x4
    struct BreakStatementInfo * next;// Offset=0x8 Size=0x4
};

struct scr_block_t// Size=0x118 (Id=5845)
{
    int abortLevel;// Offset=0x0 Size=0x4
    int localVarsCreateCount;// Offset=0x4 Size=0x4
    int localVarsPublicCount;// Offset=0x8 Size=0x4
    int localVarsCount;// Offset=0xc Size=0x4
    unsigned char localVarsInitBits[8];// Offset=0x10 Size=0x8
    struct scr_localVar_t localVars[64];// Offset=0x18 Size=0x100
};

enum _unnamed_5846
{
    ANIMTREE_NAMES=0,
    ANIMTREE_XANIM=1
};

enum _unnamed_5847
{
    ANIMTREE_PROPERTIES=0
};

struct scrAnimGlob_t// Size=0x20c (Id=5848)
{
    char * start;// Offset=0x0 Size=0x4
    char * pos;// Offset=0x4 Size=0x4
    unsigned short using_xanim_lookup[2][128];// Offset=0x8 Size=0x200
    int bAnimCheck;// Offset=0x208 Size=0x4
};

enum _unnamed_5849
{
    ANIMPROP_LOOPSYNC=0,
    ANIMPROP_NONLOOPSYNC=1,
    ANIMPROP_COMPLETE=2,
    ANIMPROP_ADDITIVE=3,
    ANIMPROP_COUNT=4
};

struct tagTHREADNAME_INFO// Size=0x10 (Id=5850)
{
    unsigned long type;// Offset=0x0 Size=0x4
    char * name;// Offset=0x4 Size=0x4
    unsigned long threadId;// Offset=0x8 Size=0x4
    unsigned long flags;// Offset=0xc Size=0x4
};

enum _unnamed_5851
{
    BACKEND_EVENT_WORKER_CMD=0,
    BACKEND_EVENT_GENERIC=1,
    BACKEND_EVENT_COUNT=2
};

struct NetFieldList// Size=0x8 (Id=5852)
{
    struct NetField * array;// Offset=0x0 Size=0x4
    unsigned int count;// Offset=0x4 Size=0x4
};

struct SnapshotInfo_s// Size=0x20 (Id=5853)
{
    int clientNum;// Offset=0x0 Size=0x4
    float mapCenter[3];// Offset=0x4 Size=0xc
    struct clientHeader_t * client;// Offset=0x10 Size=0x4
    int snapshotDeltaTime;// Offset=0x14 Size=0x4
    bool fromBaseline;// Offset=0x18 Size=0x1
    bool archived;// Offset=0x19 Size=0x1
    bool packetIsDelta;// Offset=0x1a Size=0x1
    bool entJustUnlinked;// Offset=0x1b Size=0x1
    bool entNeverChanges;// Offset=0x1c Size=0x1
};

struct NetField// Size=0x10 (Id=5854)
{
    char * name;// Offset=0x0 Size=0x4
    int offset;// Offset=0x4 Size=0x4
    int bits;// Offset=0x8 Size=0x4
    unsigned char changeHints;// Offset=0xc Size=0x1
};

struct archivedEntity_s// Size=0x11c (Id=5855)
{
    struct entityState_s s;// Offset=0x0 Size=0x100
    struct archivedEntityShared_t r;// Offset=0x100 Size=0x1c
};

struct hudelem_s// Size=0xa8 (Id=5856)
{
    enum he_type_t type;// Offset=0x0 Size=0x4
    float x;// Offset=0x4 Size=0x4
    float y;// Offset=0x8 Size=0x4
    float z;// Offset=0xc Size=0x4
    int targetEntNum;// Offset=0x10 Size=0x4
    float fontScale;// Offset=0x14 Size=0x4
    float fromFontScale;// Offset=0x18 Size=0x4
    int fontScaleStartTime;// Offset=0x1c Size=0x4
    int fontScaleTime;// Offset=0x20 Size=0x4
    int font;// Offset=0x24 Size=0x4
    int alignOrg;// Offset=0x28 Size=0x4
    int alignScreen;// Offset=0x2c Size=0x4
    union hudelem_color_t color;// Offset=0x30 Size=0x4
    union hudelem_color_t fromColor;// Offset=0x34 Size=0x4
    int fadeStartTime;// Offset=0x38 Size=0x4
    int fadeTime;// Offset=0x3c Size=0x4
    int label;// Offset=0x40 Size=0x4
    int width;// Offset=0x44 Size=0x4
    int height;// Offset=0x48 Size=0x4
    int materialIndex;// Offset=0x4c Size=0x4
    int fromWidth;// Offset=0x50 Size=0x4
    int fromHeight;// Offset=0x54 Size=0x4
    int scaleStartTime;// Offset=0x58 Size=0x4
    int scaleTime;// Offset=0x5c Size=0x4
    float fromX;// Offset=0x60 Size=0x4
    float fromY;// Offset=0x64 Size=0x4
    int fromAlignOrg;// Offset=0x68 Size=0x4
    int fromAlignScreen;// Offset=0x6c Size=0x4
    int moveStartTime;// Offset=0x70 Size=0x4
    int moveTime;// Offset=0x74 Size=0x4
    int time;// Offset=0x78 Size=0x4
    int duration;// Offset=0x7c Size=0x4
    float value;// Offset=0x80 Size=0x4
    int text;// Offset=0x84 Size=0x4
    float sort;// Offset=0x88 Size=0x4
    union hudelem_color_t glowColor;// Offset=0x8c Size=0x4
    int fxBirthTime;// Offset=0x90 Size=0x4
    int fxLetterTime;// Offset=0x94 Size=0x4
    int fxDecayStartTime;// Offset=0x98 Size=0x4
    int fxDecayDuration;// Offset=0x9c Size=0x4
    int soundID;// Offset=0xa0 Size=0x4
    int flags;// Offset=0xa4 Size=0x4
};

enum _unnamed_5857
{
    HUDELEMFLAG_FOREGROUND=1,
    HUDELEMFLAG_HIDEWHENDEAD=2,
    HUDELEMFLAG_HIDEWHENINMENU=4,
    HUDELEMFLAG_WAYPOINT_PINTOEDGE=8,
    HUDELEMFLAG_WAYPOINT_FADEATEDGE=16,
    HUDELEMFLAG_WAYPOINT_ROTATEATEDGE=32,
    HUDELEMFLAG_WAYPOINT_OFFSCREENONLY=64,
    HUDELEMFLAG_SPLATTER=128,
    HUDELEMFLAG_LOWRES_BACKGROUND=256,
    HUDELEMFLAGBITS=9
};

enum _unnamed_5858
{
    WPLF_LOCK_STARTED=1,
    WPLF_LOCK_SET=2,
    WPLF_LOCK_ATTACK_TOP=4,
    WPLF_LOCK_ATTACK_DIRECT=8,
    WPLF_LOCK_TARGET_TOO_CLOSE=16,
    WPLF_LOCK_NOT_ENOUGH_CLEARANCE=32,
    WPLF_LOCK_TO_POSITION=64,
    WEAPONLOCKFLAG_BITS=7
};

struct NetFieldList// Size=0x8 (Id=5859)
{
    struct NetField * array;// Offset=0x0 Size=0x4
    unsigned int count;// Offset=0x4 Size=0x4
};

struct statmonitor_s// Size=0x8 (Id=5860)
{
    int endtime;// Offset=0x0 Size=0x4
    struct Material * material;// Offset=0x4 Size=0x4
};

struct statmonitor_s// Size=0x8 (Id=5861)
{
    int endtime;// Offset=0x0 Size=0x4
    struct Material * material;// Offset=0x4 Size=0x4
};

struct sv_loopback_t// Size=0x13e08 (Id=5862)
{
    struct loopmsg_t msgs[64];// Offset=0x0 Size=0x13e00
    long get;// Offset=0x13e00 Size=0x4
    long send;// Offset=0x13e04 Size=0x4
};

struct DeferredQueue// Size=0x5008 (Id=5863)
{
    struct DeferredMsg msgs[16];// Offset=0x0 Size=0x5000
    long get;// Offset=0x5000 Size=0x4
    long send;// Offset=0x5004 Size=0x4
};

struct DeferredMsg// Size=0x500 (Id=5864)
{
    struct netadr_t addr;// Offset=0x0 Size=0xc
    unsigned char data[1264];// Offset=0xc Size=0x4f0
    int datalen;// Offset=0x4fc Size=0x4
};

struct loopmsg_t// Size=0x4f8 (Id=5865)
{
    unsigned char data[1264];// Offset=0x0 Size=0x4f0
    int datalen;// Offset=0x4f0 Size=0x4
    int port;// Offset=0x4f4 Size=0x4
};

struct cl_loopback_t// Size=0x3ba8 (Id=5866)
{
    struct loopmsg_t msgs[12];// Offset=0x0 Size=0x3ba0
    long get;// Offset=0x3ba0 Size=0x4
    long send;// Offset=0x3ba4 Size=0x4
};

struct usercmd_s// Size=0x28 (Id=5867)
{
    int serverTime;// Offset=0x0 Size=0x4
    int buttons;// Offset=0x4 Size=0x4
    int angles[3];// Offset=0x8 Size=0xc
    unsigned short weapon;// Offset=0x14 Size=0x2
    unsigned short primaryWeaponForAltMode;// Offset=0x16 Size=0x2
    unsigned short offHandIndex;// Offset=0x18 Size=0x2
    char forwardmove;// Offset=0x1a Size=0x1
    char rightmove;// Offset=0x1b Size=0x1
    float meleeChargeYaw;// Offset=0x1c Size=0x4
    unsigned char meleeChargeDist;// Offset=0x20 Size=0x1
    char selectedLoc[2];// Offset=0x21 Size=0x2
    unsigned char selectedLocAngle;// Offset=0x23 Size=0x1
    char remoteControlAngles[2];// Offset=0x24 Size=0x2
};

struct huffman_t// Size=0x4c14 (Id=5868)
{
    struct huff_t compressDecompress;// Offset=0x0 Size=0x4c14
};

struct nodetype// Size=0x14 (Id=5869)
{
    struct nodetype * left;// Offset=0x0 Size=0x4
    struct nodetype * right;// Offset=0x4 Size=0x4
    struct nodetype * parent;// Offset=0x8 Size=0x4
    int weight;// Offset=0xc Size=0x4
    int symbol;// Offset=0x10 Size=0x4
};

struct huff_t// Size=0x4c14 (Id=5870)
{
    int blocNode;// Offset=0x0 Size=0x4
    int blocPtrs;// Offset=0x4 Size=0x4
    struct nodetype * tree;// Offset=0x8 Size=0x4
    struct nodetype * loc[257];// Offset=0xc Size=0x404
    struct nodetype ** freelist;// Offset=0x410 Size=0x4
    struct nodetype nodeList[768];// Offset=0x414 Size=0x3c00
    struct nodetype * nodePtrs[768];// Offset=0x4014 Size=0xc00
};

struct msg_t// Size=0x28 (Id=5871)
{
    int overflowed;// Offset=0x0 Size=0x4
    int readOnly;// Offset=0x4 Size=0x4
    unsigned char * data;// Offset=0x8 Size=0x4
    unsigned char * splitData;// Offset=0xc Size=0x4
    int maxsize;// Offset=0x10 Size=0x4
    int cursize;// Offset=0x14 Size=0x4
    int splitSize;// Offset=0x18 Size=0x4
    int readcount;// Offset=0x1c Size=0x4
    int bit;// Offset=0x20 Size=0x4
    int lastEntityRef;// Offset=0x24 Size=0x4
};

union MSG_WriteFloat::__l2::<unnamed-type-dat>// Size=0x4 (Id=5872)
{
    float f;// Offset=0x0 Size=0x4
    int l;// Offset=0x0 Size=0x4
};

union MSG_ReadFloat::__l2::<unnamed-type-dat>// Size=0x4 (Id=5873)
{
    float f;// Offset=0x0 Size=0x4
    int l;// Offset=0x0 Size=0x4
};

struct MigrationGlob// Size=0x8 (Id=5874)
{
    unsigned char * buffer;// Offset=0x0 Size=0x4
    int size;// Offset=0x4 Size=0x4
};

struct Loot// Size=0x48 (Id=5875)
{
    int unlockTableRow;// Offset=0x0 Size=0x4
    enum LootType type;// Offset=0x4 Size=0x4
    union // Size=0x48 (Id=0)
    {
        int money;// Offset=0x8 Size=0x4
        enum LotteryType lotteryType;// Offset=0x8 Size=0x4
        char weaponName[32];// Offset=0x8 Size=0x20
        char partName[32];// Offset=0x28 Size=0x20
        char itemName[64];// Offset=0x8 Size=0x40
    };
};

enum _unnamed_5876
{
    CHALLENGETABLE_COLUMN_TIER=0,
    CHALLENGETABLE_COLUMN_FILE=4
};

enum _unnamed_5877
{
    CHALLENGETIERTABLE_COLUMN_CHALLENGE=0
};

enum LootType
{
    LOOT_MONEY=0,
    LOOT_LOTTERY=1,
    LOOT_FEATURE=2,
    LOOT_CHALLENGE=3,
    LOOT_WEAPON=4,
    LOOT_CAMO=5,
    LOOT_ATTACHMENT=6,
    LOOT_PERK=7,
    LOOT_KILLSTREAK=8,
    LOOT_TYPE_COUNT=9
};

enum LotteryType
{
    LOTTERY_TYPE_NORMAL=0,
    LOTTERY_TYPE_SUPER=1,
    LOTTERY_TYPE_MEGA=2,
    LOTTERY_TYPE_COUNT=3
};

struct std::pair<unsigned char *,unsigned char *>// Size=0x8 (Id=5880)
{
    void pair<unsigned char *,unsigned char *>(unsigned char &** ,unsigned char &** );
    void pair<unsigned char *,unsigned char *>();
    void swap(struct std::pair<unsigned char *,unsigned char *> & );
    unsigned char * first;// Offset=0x0 Size=0x4
    unsigned char * second;// Offset=0x4 Size=0x4
};

struct Loot// Size=0x48 (Id=5881)
{
    int unlockTableRow;// Offset=0x0 Size=0x4
    enum LootType type;// Offset=0x4 Size=0x4
    union // Size=0x48 (Id=0)
    {
        int money;// Offset=0x8 Size=0x4
        enum LotteryType lotteryType;// Offset=0x8 Size=0x4
        char weaponName[32];// Offset=0x8 Size=0x20
        char partName[32];// Offset=0x28 Size=0x20
        char itemName[64];// Offset=0x8 Size=0x40
    };
};

struct DvarDumpInfo// Size=0xc (Id=5882)
{
    int count;// Offset=0x0 Size=0x4
    int channel;// Offset=0x4 Size=0x4
    char * match;// Offset=0x8 Size=0x4
};

struct DvarSetConfigInfo// Size=0xc (Id=5883)
{
    int start;// Offset=0x0 Size=0x4
    int max;// Offset=0x4 Size=0x4
    int bit;// Offset=0x8 Size=0x4
};

enum _unnamed_5884
{
    SLOW_MOTION_LINEAR=0
};

struct SlowMotionCommon// Size=0x34 (Id=5885)
{
    bool enable;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    int type;// Offset=0x4 Size=0x4
    float startTimescale;// Offset=0x8 Size=0x4
    float endTimescale;// Offset=0xc Size=0x4
    int startMsec;// Offset=0x10 Size=0x4
    int endMsec;// Offset=0x14 Size=0x4
    float viewTimescale;// Offset=0x18 Size=0x4
    bool viewEnable;// Offset=0x1c Size=0x1
    unsigned char __align1[3];// Offset=0x1d Size=0x3
    int viewType;// Offset=0x20 Size=0x4
    float viewStartTimescale;// Offset=0x24 Size=0x4
    float viewEndTimescale;// Offset=0x28 Size=0x4
    int viewStartMsec;// Offset=0x2c Size=0x4
    int viewEndMsec;// Offset=0x30 Size=0x4
};

struct GfxBackEndData// Size=0x86c00 (Id=5886)
{
    unsigned char sceneLightTechType[13][256];// Offset=0x0 Size=0xd00
    union GfxSparkSurf sparkSurfs[64];// Offset=0xd00 Size=0x100
    struct GfxViewParms viewParms[4];// Offset=0xe00 Size=0x540
    struct GfxMeshData mesh[5];// Offset=0x1340 Size=0x1cc
    int localClientNum;// Offset=0x150c Size=0x4
    struct GfxBackEndPrimitiveData prim;// Offset=0x1510 Size=0x4
    long bspSurfDataUsed;// Offset=0x1514 Size=0x4
    long smodelSurfDataUsed;// Offset=0x1518 Size=0x4
    long smodelSurfVisDataUsed;// Offset=0x151c Size=0x4
    unsigned int sceneLightHasShadowMap[8];// Offset=0x1520 Size=0x20
    int drawSurfCount;// Offset=0x1540 Size=0x4
    long surfPos;// Offset=0x1544 Size=0x4
    long gfxEntCount;// Offset=0x1548 Size=0x4
    unsigned int codeSurfCount[2];// Offset=0x154c Size=0x8
    unsigned int codeSurfArgsCount[2];// Offset=0x1554 Size=0x8
    long cloudDataCount;// Offset=0x155c Size=0x4
    unsigned int glassSurfCount;// Offset=0x1560 Size=0x4
    unsigned int markSurfCount;// Offset=0x1564 Size=0x4
    long sparkSurfCount;// Offset=0x1568 Size=0x4
    struct GfxVertexBufferState * skinnedCacheVb;// Offset=0x156c Size=0x4
    unsigned long endFence;// Offset=0x1570 Size=0x4
    unsigned long endFrameFence;// Offset=0x1574 Size=0x4
    int viewParmCount;// Offset=0x1578 Size=0x4
    struct GfxFog fogSettings;// Offset=0x157c Size=0x38
    struct GfxCmdArray * commands;// Offset=0x15b4 Size=0x4
    unsigned int viewInfoIndex;// Offset=0x15b8 Size=0x4
    unsigned int viewInfoCount;// Offset=0x15bc Size=0x4
    struct GfxViewInfo * viewInfo;// Offset=0x15c0 Size=0x4
    void * cmds;// Offset=0x15c4 Size=0x4
    float sunShadowLightDir[3];// Offset=0x15c8 Size=0xc
    int hasApproxSunDirChanged;// Offset=0x15d4 Size=0x4
    int cmdBufValid[18];// Offset=0x15d8 Size=0x48
    struct GfxDrawCallOutput drawOutput[18];// Offset=0x1620 Size=0x120
    unsigned int drawType;// Offset=0x1740 Size=0x4
    struct GfxDrawList dynLightDrawList[4];// Offset=0x1744 Size=0x710
    unsigned int dynLightCount;// Offset=0x1e54 Size=0x4
    struct GfxDrawList * emissiveSpotShadowDrawList[1];// Offset=0x1e58 Size=0x4
    unsigned int emissiveSpotLightCount;// Offset=0x1e5c Size=0x4
    struct GfxSunShadow sunShadow;// Offset=0x1e60 Size=0x320
    unsigned int spotShadowCount;// Offset=0x2180 Size=0x4
    unsigned char __align0[12];// Offset=0x2184 Size=0xc
    struct GfxSpotShadow spotShadows[4];// Offset=0x2190 Size=0x740
    struct GfxSurfsIterGroup prepassIterGroup[5];// Offset=0x28d0 Size=0x6a4
    struct GfxSpliceSurfs litTransSpliceSurfs;// Offset=0x2f74 Size=0x700
    unsigned char __align1[12];// Offset=0x3674 Size=0xc
    unsigned char surfsBuffer[131072];// Offset=0x3680 Size=0x20000
    float codeSurfArgs[288][4];// Offset=0x23680 Size=0x1200
    struct GfxCodeSurf codeEmissiveSurfs[2048];// Offset=0x24880 Size=0x8000
    struct GfxCodeSurf codeTransSurfs[640];// Offset=0x2c880 Size=0x2800
    struct GfxMarkSurf markSurfs[1536];// Offset=0x2f080 Size=0x6000
    struct GfxGlassSurf glassSurfs[768];// Offset=0x35080 Size=0x3000
    unsigned short bspSurfData[35328];// Offset=0x38080 Size=0x11400
    unsigned char smodelSurfData[35840];// Offset=0x49480 Size=0x8c00
    unsigned char smodelSurfVisData[45056];// Offset=0x52080 Size=0xb000
    union GfxCloudSurf cloudSurfs[256];// Offset=0x5d080 Size=0x400
    struct GfxEntity gfxEnts[128];// Offset=0x5d480 Size=0x400
    struct FxSparkMeshData sparkData[64];// Offset=0x5d880 Size=0x1400
    struct GfxParticleCloud cloudData[256];// Offset=0x5ec80 Size=0x4000
    union GfxDrawSurf drawSurfs[16384];// Offset=0x62c80 Size=0x20000
    struct GfxLight sceneLights[253];// Offset=0x82c80 Size=0x3f40
};

struct GfxGlobals// Size=0x20 (Id=5887)
{
    bool mainThreadHasOwnership;// Offset=0x0 Size=0x1
    bool startedRenderThread;// Offset=0x1 Size=0x1
    unsigned char __align0[2];// Offset=0x2 Size=0x2
    int stopUpdatingSamplers;// Offset=0x4 Size=0x4
    int mainThreadStopUpdatingSamplers;// Offset=0x8 Size=0x4
    bool isRenderingRemoteUpdate;// Offset=0xc Size=0x1
    unsigned char __align1[3];// Offset=0xd Size=0x3
    int screenUpdateNotify;// Offset=0x10 Size=0x4
    int remoteScreenUpdateNesting;// Offset=0x14 Size=0x4
    int backEndFrameCount;// Offset=0x18 Size=0x4
    struct GfxBackEndData * freezeDrawData;// Offset=0x1c Size=0x4
};

struct GfxScaledPlacement// Size=0x20 (Id=5888)
{
    struct GfxPlacement base;// Offset=0x0 Size=0x1c
    float scale;// Offset=0x1c Size=0x4
};

struct FxVisState// Size=0x1010 (Id=5889)
{
    struct FxVisBlocker blocker[256];// Offset=0x0 Size=0x1000
    long blockerCount;// Offset=0x1000 Size=0x4
    unsigned int pad[3];// Offset=0x1004 Size=0xc
};

struct FxSystem// Size=0xad0 (Id=5890)
{
    struct FxCamera camera;// Offset=0x0 Size=0xb0
    struct FxCamera cameraPrev;// Offset=0xb0 Size=0xb0
    struct FxSpriteInfo sprite;// Offset=0x160 Size=0x10
    struct FxEffect * effects;// Offset=0x170 Size=0x4
    struct FxPool<FxElem> * elems;// Offset=0x174 Size=0x4
    struct FxPool<FxTrail> * trails;// Offset=0x178 Size=0x4
    struct FxPool<FxTrailElem> * trailElems;// Offset=0x17c Size=0x4
    struct FxPool<FxBolt> * bolts;// Offset=0x180 Size=0x4
    struct FxPool<FxSparkCloud> * sparkClouds;// Offset=0x184 Size=0x4
    struct FxPool<FxSparkFountain> * sparkFountains;// Offset=0x188 Size=0x4
    struct FxPool<FxSparkFountainCluster> * sparkFountainClusters;// Offset=0x18c Size=0x4
    unsigned short * deferredElems;// Offset=0x190 Size=0x4
    long firstFreeElem;// Offset=0x194 Size=0x4
    long firstFreeTrailElem;// Offset=0x198 Size=0x4
    long firstFreeTrail;// Offset=0x19c Size=0x4
    long firstFreeBolt;// Offset=0x1a0 Size=0x4
    long firstFreeSparkCloud;// Offset=0x1a4 Size=0x4
    long firstFreeSparkFountain;// Offset=0x1a8 Size=0x4
    long firstFreeSparkFountainCluster;// Offset=0x1ac Size=0x4
    long deferredElemCount;// Offset=0x1b0 Size=0x4
    long activeElemCount;// Offset=0x1b4 Size=0x4
    long activeTrailElemCount;// Offset=0x1b8 Size=0x4
    long activeTrailCount;// Offset=0x1bc Size=0x4
    long activeBoltCount;// Offset=0x1c0 Size=0x4
    long activeSparkCloudCount;// Offset=0x1c4 Size=0x4
    long activeSparkFountainCount;// Offset=0x1c8 Size=0x4
    long activeSparkFountainClusterCount;// Offset=0x1cc Size=0x4
    long gfxCloudCount;// Offset=0x1d0 Size=0x4
    struct FxVisState * visState;// Offset=0x1d4 Size=0x4
    struct FxVisState * visStateBufferRead;// Offset=0x1d8 Size=0x4
    struct FxVisState * visStateBufferWrite;// Offset=0x1dc Size=0x4
    long firstActiveEffect;// Offset=0x1e0 Size=0x4
    long firstNewEffect;// Offset=0x1e4 Size=0x4
    long firstFreeEffect;// Offset=0x1e8 Size=0x4
    unsigned short allEffectHandles[1024];// Offset=0x1ec Size=0x800
    long activeSpotLightEffectCount;// Offset=0x9ec Size=0x4
    long activeSpotLightElemCount;// Offset=0x9f0 Size=0x4
    unsigned short activeSpotLightEffectHandle;// Offset=0x9f4 Size=0x2
    unsigned short activeSpotLightElemHandle;// Offset=0x9f6 Size=0x2
    short activeSpotLightBoltDobj;// Offset=0x9f8 Size=0x2
    unsigned char __align0[2];// Offset=0x9fa Size=0x2
    long iteratorCount;// Offset=0x9fc Size=0x4
    int msecNow;// Offset=0xa00 Size=0x4
    long msecDraw;// Offset=0xa04 Size=0x4
    int frameCount;// Offset=0xa08 Size=0x4
    bool isInitialized;// Offset=0xa0c Size=0x1
    bool needsGarbageCollection;// Offset=0xa0d Size=0x1
    bool isArchiving;// Offset=0xa0e Size=0x1
    unsigned char localClientNum;// Offset=0xa0f Size=0x1
    unsigned int restartList[32];// Offset=0xa10 Size=0x80
    struct FxEffect ** restartEffectsList;// Offset=0xa90 Size=0x4
    unsigned int restartCount;// Offset=0xa94 Size=0x4
    unsigned int pad1[14];// Offset=0xa98 Size=0x38
};

struct FxPool<FxElem>// Size=0x28 (Id=5891)
{
    union // Size=0x4 (Id=0)
    {
        const int itemSize;// Offset=0x0 Size=0x4
        const int POOL_SIZE;// Offset=0x0 Size=0x4
        int nextFree;// Offset=0x0 Size=0x4
        struct FxElem item;// Offset=0x0 Size=0x28
    };
};

struct FxElem// Size=0x28 (Id=5892)
{
    union // Size=0x24 (Id=0)
    {
        const int HANDLE_SCALE;// Offset=0x0 Size=0x4
        const int POOL_SIZE;// Offset=0x0 Size=0x4
        unsigned char defIndex;// Offset=0x0 Size=0x1
        unsigned char sequence;// Offset=0x1 Size=0x1
        unsigned char atRestFraction;// Offset=0x2 Size=0x1
        unsigned char emitResidual;// Offset=0x3 Size=0x1
        unsigned short nextElemHandleInEffect;// Offset=0x4 Size=0x2
        unsigned short prevElemHandleInEffect;// Offset=0x6 Size=0x2
        int msecBegin;// Offset=0x8 Size=0x4
        float baseVel[3];// Offset=0xc Size=0xc
        int physObjId;// Offset=0x18 Size=0x4
        float origin[3];// Offset=0x18 Size=0xc
        union <unnamed-type-u>// Size=0x2 (Id=62897)
        {
            unsigned short lightingHandle;// Offset=0x0 Size=0x2
            unsigned short sparkCloudHandle;// Offset=0x0 Size=0x2
            unsigned short sparkFountainHandle;// Offset=0x0 Size=0x2
        };
        unsigned char __align0[34];// Offset=0x2 Size=0x22
    };
    union FxElem::<unnamed-type-u> u;// Offset=0x24 Size=0x2
};

union FxElem::<unnamed-type-u>// Size=0x2 (Id=5893)
{
    unsigned short lightingHandle;// Offset=0x0 Size=0x2
    unsigned short sparkCloudHandle;// Offset=0x0 Size=0x2
    unsigned short sparkFountainHandle;// Offset=0x0 Size=0x2
};

struct FxSparkFountainHeader// Size=0x8 (Id=5894)
{
    short defIndex;// Offset=0x0 Size=0x2
    unsigned short nextFountainInEffect;// Offset=0x2 Size=0x2
    unsigned char isValid;// Offset=0x4 Size=0x1
    unsigned char clusterCount;// Offset=0x5 Size=0x1
    unsigned char computedClusterCount;// Offset=0x6 Size=0x1
    unsigned char computedClusterPortion;// Offset=0x7 Size=0x1
};

struct FxPool<FxTrail>// Size=0x10 (Id=5895)
{
    union // Size=0x4 (Id=0)
    {
        const int itemSize;// Offset=0x0 Size=0x4
        const int POOL_SIZE;// Offset=0x0 Size=0x4
        int nextFree;// Offset=0x0 Size=0x4
        struct FxTrail item;// Offset=0x0 Size=0x10
    };
};

struct FxVisBlocker// Size=0x10 (Id=5896)
{
    float origin[3];// Offset=0x0 Size=0xc
    unsigned short radius;// Offset=0xc Size=0x2
    unsigned short visibility;// Offset=0xe Size=0x2
};

struct FxPool<FxSparkFountain>// Size=0x40 (Id=5897)
{
    union // Size=0x4 (Id=0)
    {
        const int itemSize;// Offset=0x0 Size=0x4
        const int POOL_SIZE;// Offset=0x0 Size=0x4
        int nextFree;// Offset=0x0 Size=0x4
        struct FxSparkFountain item;// Offset=0x0 Size=0x40
    };
};

struct GamePadCheat// Size=0x48 (Id=5898)
{
    enum GamePadButton codeButtons[10];// Offset=0x0 Size=0x28
    enum GamePadButton holdButtons[2];// Offset=0x28 Size=0x8
    void  ( * unlockFunc)();// Offset=0x30 Size=0x4
    char * unlockCmd;// Offset=0x34 Size=0x4
    char * menu;// Offset=0x38 Size=0x4
    char * sound;// Offset=0x3c Size=0x4
    int buttonTimer;// Offset=0x40 Size=0x4
    int codeIndex;// Offset=0x44 Size=0x4
};

struct FxBolt// Size=0x20 (Id=5899)
{
    union // Size=0x4 (Id=0)
    {
        const int HANDLE_SCALE;// Offset=0x0 Size=0x4
        const int POOL_SIZE;// Offset=0x0 Size=0x4
        struct // Size=0x4 (Id=0)
        {
            unsigned int dobjHandle:12;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0xc
            unsigned int temporalBits:1;// Offset=0x0 Size=0x4 BitOffset=0x13 BitSize=0x1
            unsigned int boneIndex:11;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0xb
            unsigned int unused:8;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x8
        };
    };
    struct FxSpatialFrame offset;// Offset=0x4 Size=0x1c
};

struct FxTrailElem// Size=0x20 (Id=5900)
{
    union // Size=0x4 (Id=0)
    {
        const int HANDLE_SCALE;// Offset=0x0 Size=0x4
        const int POOL_SIZE;// Offset=0x0 Size=0x4
        float origin[3];// Offset=0x0 Size=0xc
    };
    float spawnDist;// Offset=0xc Size=0x4
    int msecBegin;// Offset=0x10 Size=0x4
    unsigned short nextTrailElemHandle;// Offset=0x14 Size=0x2
    short baseVelZ;// Offset=0x16 Size=0x2
    char basis[2][3];// Offset=0x18 Size=0x6
    unsigned char sequence;// Offset=0x1e Size=0x1
    unsigned char unused;// Offset=0x1f Size=0x1
};

struct FxTrail// Size=0x10 (Id=5901)
{
    union // Size=0x4 (Id=0)
    {
        const int HANDLE_SCALE;// Offset=0x0 Size=0x4
        const int POOL_SIZE;// Offset=0x0 Size=0x4
        unsigned short nextTrailHandle;// Offset=0x0 Size=0x2
        unsigned short firstTrailElemHandle;// Offset=0x2 Size=0x2
    };
    unsigned short lastTrailElemHandle;// Offset=0x4 Size=0x2
    char defIndex;// Offset=0x6 Size=0x1
    char sequence;// Offset=0x7 Size=0x1
    float distanceAccumulator;// Offset=0x8 Size=0x4
    char pad[4];// Offset=0xc Size=0x4
};

struct FxCamera// Size=0xb0 (Id=5902)
{
    float origin[3];// Offset=0x0 Size=0xc
    long isValid;// Offset=0xc Size=0x4
    float frustum[6][4];// Offset=0x10 Size=0x60
    float axis[3][3];// Offset=0x70 Size=0x24
    unsigned int frustumPlaneCount;// Offset=0x94 Size=0x4
    float viewOffset[3];// Offset=0x98 Size=0xc
    bool thermal;// Offset=0xa4 Size=0x1
    unsigned char __align0[3];// Offset=0xa5 Size=0x3
    unsigned int pad[2];// Offset=0xa8 Size=0x8
};

struct FxVisState// Size=0x1010 (Id=5903)
{
    struct FxVisBlocker blocker[256];// Offset=0x0 Size=0x1000
    long blockerCount;// Offset=0x1000 Size=0x4
    unsigned int pad[3];// Offset=0x1004 Size=0xc
};

struct FxSpark// Size=0x70 (Id=5904)
{
    union // Size=0x4 (Id=0)
    {
        const int MAX_BOUNCES;// Offset=0x0 Size=0x4
        float time[4];// Offset=0x0 Size=0x10
    };
    float pos[4][3];// Offset=0x10 Size=0x30
    float vel[4][3];// Offset=0x40 Size=0x30
};

struct FxSparkCloud// Size=0x810 (Id=5905)
{
    union // Size=0x4 (Id=0)
    {
        const int HANDLE_SCALE;// Offset=0x0 Size=0x4
        const int POOL_SIZE;// Offset=0x0 Size=0x4
        unsigned int frameBegin;// Offset=0x0 Size=0x4
    };
    unsigned int frameEnd;// Offset=0x4 Size=0x4
    float lastTime;// Offset=0x8 Size=0x4
    unsigned int pad[1];// Offset=0xc Size=0x4
    struct GfxParticleCloud frames[32];// Offset=0x10 Size=0x800
};

struct FxSparkFountain// Size=0x40 (Id=5906)
{
    union // Size=0x4 (Id=0)
    {
        const int HANDLE_SCALE;// Offset=0x0 Size=0x4
        const int POOL_SIZE;// Offset=0x0 Size=0x4
        const int MAX_CLUSTER_COUNT;// Offset=0x0 Size=0x4
        struct FxSparkFountainHeader header;// Offset=0x0 Size=0x8
    };
    unsigned short clusters[16];// Offset=0x8 Size=0x20
    unsigned char padding[24];// Offset=0x28 Size=0x18
};

struct GfxParticleCloud// Size=0x40 (Id=5907)
{
    struct GfxScaledPlacement placement;// Offset=0x0 Size=0x20
    float endpos[3];// Offset=0x20 Size=0xc
    union GfxColor color;// Offset=0x2c Size=0x4
    float radius[2];// Offset=0x30 Size=0x8
    unsigned int flags;// Offset=0x38 Size=0x4
    float timeOffset;// Offset=0x3c Size=0x4
};

struct r_double_index_t// Size=0x4 (Id=5908)
{
    unsigned short value[2];// Offset=0x0 Size=0x4
};

struct FxPool<FxBolt>// Size=0x20 (Id=5909)
{
    union // Size=0x4 (Id=0)
    {
        const int itemSize;// Offset=0x0 Size=0x4
        const int POOL_SIZE;// Offset=0x0 Size=0x4
        int nextFree;// Offset=0x0 Size=0x4
        struct FxBolt item;// Offset=0x0 Size=0x20
    };
};

struct field_t// Size=0x118 (Id=5910)
{
    int cursor;// Offset=0x0 Size=0x4
    int scroll;// Offset=0x4 Size=0x4
    int drawWidth;// Offset=0x8 Size=0x4
    int widthInPixels;// Offset=0xc Size=0x4
    float charHeight;// Offset=0x10 Size=0x4
    int fixedSize;// Offset=0x14 Size=0x4
    char buffer[256];// Offset=0x18 Size=0x100
};

struct FxSparkFountainCluster// Size=0x1c00 (Id=5911)
{
    union // Size=0x4 (Id=0)
    {
        const int HANDLE_SCALE;// Offset=0x0 Size=0x4
        const int POOL_SIZE;// Offset=0x0 Size=0x4
        const int SPARKS_PER_CLUSTER;// Offset=0x0 Size=0x4
        struct FxSpark sparks[64];// Offset=0x0 Size=0x1c00
    };
};

struct FxPool<FxSparkFountainCluster>// Size=0x1c00 (Id=5912)
{
    union // Size=0x4 (Id=0)
    {
        const int itemSize;// Offset=0x0 Size=0x4
        const int POOL_SIZE;// Offset=0x0 Size=0x4
        int nextFree;// Offset=0x0 Size=0x4
        struct FxSparkFountainCluster item;// Offset=0x0 Size=0x1c00
    };
};

struct FxSpriteInfo// Size=0x10 (Id=5913)
{
    struct r_double_index_t * indices;// Offset=0x0 Size=0x4
    unsigned int indexCount;// Offset=0x4 Size=0x4
    struct Material * material;// Offset=0x8 Size=0x4
    char * name;// Offset=0xc Size=0x4
};

struct FxPool<FxSparkCloud>// Size=0x810 (Id=5914)
{
    union // Size=0x4 (Id=0)
    {
        const int itemSize;// Offset=0x0 Size=0x4
        const int POOL_SIZE;// Offset=0x0 Size=0x4
        int nextFree;// Offset=0x0 Size=0x4
        struct FxSparkCloud item;// Offset=0x0 Size=0x810
    };
};

struct FxPool<FxTrailElem>// Size=0x20 (Id=5915)
{
    union // Size=0x4 (Id=0)
    {
        const int itemSize;// Offset=0x0 Size=0x4
        const int POOL_SIZE;// Offset=0x0 Size=0x4
        int nextFree;// Offset=0x0 Size=0x4
        struct FxTrailElem item;// Offset=0x0 Size=0x20
    };
};

struct _XOVERLAPPED// Size=0x1c (Id=5916)
{
    unsigned long InternalLow;// Offset=0x0 Size=0x4
    unsigned long InternalHigh;// Offset=0x4 Size=0x4
    unsigned long InternalContext;// Offset=0x8 Size=0x4
    void * hEvent;// Offset=0xc Size=0x4
    void  ( * pCompletionRoutine)(unsigned long ,unsigned long ,struct _XOVERLAPPED * );// Offset=0x10 Size=0x4
    unsigned long dwCompletionContext;// Offset=0x14 Size=0x4
    unsigned long dwExtendedError;// Offset=0x18 Size=0x4
};

struct TaskManagerGlob// Size=0x104 (Id=5917)
{
    unsigned int constructedTaskSetCount;// Offset=0x0 Size=0x4
    struct OverlappedTaskSet * constructedTaskSets[32];// Offset=0x4 Size=0x80
    char * constructedTaskSetNames[32];// Offset=0x84 Size=0x80
};

struct PlayerStatNetworkData// Size=0x622c (Id=5918)
{
    struct PlayerStats playerStats[2];// Offset=0x0 Size=0x4006
    bool writeStatsBufferInUse;// Offset=0x4006 Size=0x1
    unsigned char __align0[1];// Offset=0x4007 Size=0x1
    unsigned char writeStatsBuffer[8197];// Offset=0x4008 Size=0x2005
    unsigned char __align1[3];// Offset=0x600d Size=0x3
    unsigned long deviceId;// Offset=0x6010 Size=0x4
    struct _XSTORAGE_DOWNLOAD_TO_MEMORY_RESULTS statsResults;// Offset=0x6014 Size=0x14
    wchar_t statsServerPath[256];// Offset=0x6028 Size=0x200
    unsigned long statsServerPathLen;// Offset=0x6228 Size=0x4
};

struct PlayerStatNetworkData// Size=0x622c (Id=5919)
{
    struct PlayerStats playerStats[2];// Offset=0x0 Size=0x4006
    bool writeStatsBufferInUse;// Offset=0x4006 Size=0x1
    unsigned char __align0[1];// Offset=0x4007 Size=0x1
    unsigned char writeStatsBuffer[8197];// Offset=0x4008 Size=0x2005
    unsigned char __align1[3];// Offset=0x600d Size=0x3
    unsigned long deviceId;// Offset=0x6010 Size=0x4
    struct _XSTORAGE_DOWNLOAD_TO_MEMORY_RESULTS statsResults;// Offset=0x6014 Size=0x14
    wchar_t statsServerPath[256];// Offset=0x6028 Size=0x200
    unsigned long statsServerPathLen;// Offset=0x6228 Size=0x4
};

struct CaCItem// Size=0xc (Id=5920)
{
    int itemIndex;// Offset=0x0 Size=0x4
    int minLevel;// Offset=0x4 Size=0x4
    enum StatType type;// Offset=0x8 Size=0x4
};

struct StatStringPair// Size=0x8 (Id=5921)
{
    int stat;// Offset=0x0 Size=0x4
    char * string;// Offset=0x4 Size=0x4
};

enum StatType
{
    STAT_TYPE_PRIMARY=1,
    STAT_TYPE_SECONDARY=2,
    STAT_TYPE_EQUIPMENT=4,
    STAT_TYPE_WEAPON=8,
    STAT_TYPE_ABILITY=16,
    STAT_TYPE_GRENADE=32
};

struct playerStorageData// Size=0x14 (Id=5923)
{
    bool useGameStatsSource;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    enum StatsSource gameStatsSource;// Offset=0x4 Size=0x4
    bool resettingStats;// Offset=0x8 Size=0x1
    unsigned char __align1[3];// Offset=0x9 Size=0x3
    enum StatsSource resetStatsSource;// Offset=0xc Size=0x4
    bool dontDownloadAtMainMenu;// Offset=0x10 Size=0x1
};

struct CaCItem// Size=0xc (Id=5924)
{
    int itemIndex;// Offset=0x0 Size=0x4
    int minLevel;// Offset=0x4 Size=0x4
    enum StatType type;// Offset=0x8 Size=0x4
};

struct StatStringPair// Size=0x8 (Id=5925)
{
    int stat;// Offset=0x0 Size=0x4
    char * string;// Offset=0x4 Size=0x4
};

struct ComPrimaryLight// Size=0x44 (Id=5926)
{
    unsigned char type;// Offset=0x0 Size=0x1
    unsigned char canUseShadowMap;// Offset=0x1 Size=0x1
    unsigned char exponent;// Offset=0x2 Size=0x1
    unsigned char unused;// Offset=0x3 Size=0x1
    float color[3];// Offset=0x4 Size=0xc
    float dir[3];// Offset=0x10 Size=0xc
    float origin[3];// Offset=0x1c Size=0xc
    float radius;// Offset=0x28 Size=0x4
    float cosHalfFovOuter;// Offset=0x2c Size=0x4
    float cosHalfFovInner;// Offset=0x30 Size=0x4
    float cosHalfFovExpanded;// Offset=0x34 Size=0x4
    float rotationLimit;// Offset=0x38 Size=0x4
    float translationLimit;// Offset=0x3c Size=0x4
    char * defName;// Offset=0x40 Size=0x4
};

struct CmdArgsPrivate// Size=0x2828 (Id=5927)
{
    char textPool[8192];// Offset=0x0 Size=0x2000
    char * argvPool[512];// Offset=0x2000 Size=0x800
    int usedTextPool[8];// Offset=0x2800 Size=0x20
    int totalUsedArgvPool;// Offset=0x2820 Size=0x4
    int totalUsedTextPool;// Offset=0x2824 Size=0x4
};

struct CmdText// Size=0xc (Id=5928)
{
    unsigned char * data;// Offset=0x0 Size=0x4
    int maxsize;// Offset=0x4 Size=0x4
    int cmdsize;// Offset=0x8 Size=0x4
};

struct CmdScriptNotify// Size=0x8 (Id=5929)
{
    int clientNum;// Offset=0x0 Size=0x4
    unsigned short command;// Offset=0x4 Size=0x2
    unsigned short notify;// Offset=0x6 Size=0x2
};

struct worldSector_s// Size=0x18 (Id=5930)
{
    struct worldContents_s contents;// Offset=0x0 Size=0xc
    struct worldTree_s tree;// Offset=0xc Size=0xc
};

struct areaParms_t// Size=0x14 (Id=5931)
{
    struct Bounds * bounds;// Offset=0x0 Size=0x4
    int * list;// Offset=0x4 Size=0x4
    int count;// Offset=0x8 Size=0x4
    int maxcount;// Offset=0xc Size=0x4
    int contentmask;// Offset=0x10 Size=0x4
};

struct locTraceWork_t// Size=0x70 (Id=5932)
{
    int contents;// Offset=0x0 Size=0x4
    unsigned char __align0[12];// Offset=0x4 Size=0xc
    struct TraceExtents extents;// Offset=0x10 Size=0x60
};

struct staticmodeltrace_t// Size=0x70 (Id=5933)
{
    struct TraceExtents extents;// Offset=0x0 Size=0x60
    int contents;// Offset=0x60 Size=0x4
};

struct staticmodeltrace_t// Size=0x70 (Id=5934)
{
    struct TraceExtents extents;// Offset=0x0 Size=0x60
    int contents;// Offset=0x60 Size=0x4
};

struct cm_world_t// Size=0x601c (Id=5935)
{
    struct Bounds bounds;// Offset=0x0 Size=0x18
    unsigned short freeHead;// Offset=0x18 Size=0x2
    unsigned char __align0[2];// Offset=0x1a Size=0x2
    struct worldSector_s sectors[1024];// Offset=0x1c Size=0x6000
};

struct worldTree_s// Size=0xc (Id=5936)
{
    union // Size=0x6 (Id=0)
    {
        float dist;// Offset=0x0 Size=0x4
        unsigned short axis;// Offset=0x4 Size=0x2
        union <unnamed-type-u>// Size=0x2 (Id=63096)
        {
            unsigned short parent;// Offset=0x0 Size=0x2
            unsigned short nextFree;// Offset=0x0 Size=0x2
        };
        unsigned char __align0[4];// Offset=0x2 Size=0x4
    };
    union worldTree_s::<unnamed-type-u> u;// Offset=0x6 Size=0x2
    unsigned short child[2];// Offset=0x8 Size=0x4
};

struct worldSector_s// Size=0x18 (Id=5937)
{
    struct worldContents_s contents;// Offset=0x0 Size=0xc
    struct worldTree_s tree;// Offset=0xc Size=0xc
};

struct worldContents_s// Size=0xc (Id=5938)
{
    int contentsEntities;// Offset=0x0 Size=0x4
    int linkcontentsEntities;// Offset=0x4 Size=0x4
    unsigned short entities;// Offset=0x8 Size=0x2
};

union worldTree_s::<unnamed-type-u>// Size=0x2 (Id=5939)
{
    unsigned short parent;// Offset=0x0 Size=0x2
    unsigned short nextFree;// Offset=0x0 Size=0x2
};

struct TriggerCapsuleTest// Size=0x20 (Id=5940)
{
    struct Bounds bounds;// Offset=0x0 Size=0x18
    float radius;// Offset=0x18 Size=0x4
    float halfHeight;// Offset=0x1c Size=0x4
};

struct MapTriggers// Size=0x18 (Id=5941)
{
    unsigned int count;// Offset=0x0 Size=0x4
    struct TriggerModel * models;// Offset=0x4 Size=0x4
    unsigned int hullCount;// Offset=0x8 Size=0x4
    struct TriggerHull * hulls;// Offset=0xc Size=0x4
    unsigned int slabCount;// Offset=0x10 Size=0x4
    struct TriggerSlab * slabs;// Offset=0x14 Size=0x4
};

struct TriggerHull// Size=0x20 (Id=5942)
{
    struct Bounds bounds;// Offset=0x0 Size=0x18
    int contents;// Offset=0x18 Size=0x4
    unsigned short slabCount;// Offset=0x1c Size=0x2
    unsigned short firstSlab;// Offset=0x1e Size=0x2
};

struct TriggerModel// Size=0x8 (Id=5943)
{
    int contents;// Offset=0x0 Size=0x4
    unsigned short hullCount;// Offset=0x4 Size=0x2
    unsigned short firstHull;// Offset=0x6 Size=0x2
};

struct TriggerCapsuleTest// Size=0x20 (Id=5944)
{
    struct Bounds bounds;// Offset=0x0 Size=0x18
    float radius;// Offset=0x18 Size=0x4
    float halfHeight;// Offset=0x1c Size=0x4
};

struct TriggerCapsuleTrace// Size=0x2c (Id=5945)
{
    struct Bounds bounds;// Offset=0x0 Size=0x18
    float radius;// Offset=0x18 Size=0x4
    float halfHeight;// Offset=0x1c Size=0x4
    float halfDelta[3];// Offset=0x20 Size=0xc
};

struct TriggerCapsuleTraceResults// Size=0x10 (Id=5946)
{
    float enterNumer;// Offset=0x0 Size=0x4
    float enterDenom;// Offset=0x4 Size=0x4
    float leaveNumer;// Offset=0x8 Size=0x4
    float leaveDenom;// Offset=0xc Size=0x4
};

struct TriggerCapsuleTraceResults// Size=0x10 (Id=5947)
{
    float enterNumer;// Offset=0x0 Size=0x4
    float enterDenom;// Offset=0x4 Size=0x4
    float leaveNumer;// Offset=0x8 Size=0x4
    float leaveDenom;// Offset=0xc Size=0x4
};

struct TriggerCapsuleTrace// Size=0x2c (Id=5948)
{
    struct Bounds bounds;// Offset=0x0 Size=0x18
    float radius;// Offset=0x18 Size=0x4
    float halfHeight;// Offset=0x1c Size=0x4
    float halfDelta[3];// Offset=0x20 Size=0xc
};

struct clipMap_t// Size=0x100 (Id=5949)
{
    char * name;// Offset=0x0 Size=0x4
    int isInUse;// Offset=0x4 Size=0x4
    int planeCount;// Offset=0x8 Size=0x4
    struct cplane_s * planes;// Offset=0xc Size=0x4
    unsigned int numStaticModels;// Offset=0x10 Size=0x4
    struct cStaticModel_s * staticModelList;// Offset=0x14 Size=0x4
    unsigned int numMaterials;// Offset=0x18 Size=0x4
    struct ClipMaterial * materials;// Offset=0x1c Size=0x4
    unsigned int numBrushSides;// Offset=0x20 Size=0x4
    struct cbrushside_t * brushsides;// Offset=0x24 Size=0x4
    unsigned int numBrushEdges;// Offset=0x28 Size=0x4
    unsigned char * brushEdges;// Offset=0x2c Size=0x4
    unsigned int numNodes;// Offset=0x30 Size=0x4
    struct cNode_t * nodes;// Offset=0x34 Size=0x4
    unsigned int numLeafs;// Offset=0x38 Size=0x4
    struct cLeaf_t * leafs;// Offset=0x3c Size=0x4
    unsigned int leafbrushNodesCount;// Offset=0x40 Size=0x4
    struct cLeafBrushNode_s * leafbrushNodes;// Offset=0x44 Size=0x4
    unsigned int numLeafBrushes;// Offset=0x48 Size=0x4
    unsigned short * leafbrushes;// Offset=0x4c Size=0x4
    unsigned int numLeafSurfaces;// Offset=0x50 Size=0x4
    unsigned int * leafsurfaces;// Offset=0x54 Size=0x4
    unsigned int vertCount;// Offset=0x58 Size=0x4
    float * verts[3];// Offset=0x5c Size=0x4
    int triCount;// Offset=0x60 Size=0x4
    unsigned short * triIndices;// Offset=0x64 Size=0x4
    unsigned char * triEdgeIsWalkable;// Offset=0x68 Size=0x4
    int borderCount;// Offset=0x6c Size=0x4
    struct CollisionBorder * borders;// Offset=0x70 Size=0x4
    int partitionCount;// Offset=0x74 Size=0x4
    struct CollisionPartition * partitions;// Offset=0x78 Size=0x4
    int aabbTreeCount;// Offset=0x7c Size=0x4
    struct CollisionAabbTree * aabbTrees;// Offset=0x80 Size=0x4
    unsigned int numSubModels;// Offset=0x84 Size=0x4
    struct cmodel_t * cmodels;// Offset=0x88 Size=0x4
    unsigned short numBrushes;// Offset=0x8c Size=0x2
    unsigned char __align0[2];// Offset=0x8e Size=0x2
    struct cbrush_t * brushes;// Offset=0x90 Size=0x4
    struct Bounds * brushBounds;// Offset=0x94 Size=0x4
    int * brushContents;// Offset=0x98 Size=0x4
    struct MapEnts * mapEnts;// Offset=0x9c Size=0x4
    unsigned short smodelNodeCount;// Offset=0xa0 Size=0x2
    unsigned char __align1[2];// Offset=0xa2 Size=0x2
    struct SModelAabbNode * smodelNodes;// Offset=0xa4 Size=0x4
    unsigned short dynEntCount[2];// Offset=0xa8 Size=0x4
    struct DynEntityDef * dynEntDefList[2];// Offset=0xac Size=0x8
    struct DynEntityPose * dynEntPoseList[2];// Offset=0xb4 Size=0x8
    struct DynEntityClient * dynEntClientList[2];// Offset=0xbc Size=0x8
    struct DynEntityColl * dynEntCollList[2];// Offset=0xc4 Size=0x8
    unsigned int checksum;// Offset=0xcc Size=0x4
};

struct TraceExtents// Size=0x60 (Id=5950)
{
    float midPoint[3];// Offset=0x0 Size=0xc
    float midPointPad;// Offset=0xc Size=0x4
    float halfDelta[3];// Offset=0x10 Size=0xc
    float halfDeltaPad;// Offset=0x1c Size=0x4
    float halfDeltaAbs[3];// Offset=0x20 Size=0xc
    float halfDeltaAbsPad;// Offset=0x2c Size=0x4
    float invDeltaAbs[3];// Offset=0x30 Size=0xc
    float invDeltaAbsPad;// Offset=0x3c Size=0x4
    float start[3];// Offset=0x40 Size=0xc
    float startPad;// Offset=0x4c Size=0x4
    float end[3];// Offset=0x50 Size=0xc
    float endPad;// Offset=0x5c Size=0x4
};

struct trace_t// Size=0x2c (Id=5951)
{
    float fraction;// Offset=0x0 Size=0x4
    float normal[3];// Offset=0x4 Size=0xc
    int surfaceFlags;// Offset=0x10 Size=0x4
    int contents;// Offset=0x14 Size=0x4
    char * material;// Offset=0x18 Size=0x4
    enum TraceHitType hitType;// Offset=0x1c Size=0x4
    unsigned short hitId;// Offset=0x20 Size=0x2
    unsigned short modelIndex;// Offset=0x22 Size=0x2
    unsigned short partName;// Offset=0x24 Size=0x2
    unsigned short partGroup;// Offset=0x26 Size=0x2
    bool allsolid;// Offset=0x28 Size=0x1
    bool startsolid;// Offset=0x29 Size=0x1
    bool walkable;// Offset=0x2a Size=0x1
};

struct traceWork_t// Size=0xe0 (Id=5952)
{
    struct TraceExtents extents;// Offset=0x0 Size=0x60
    float size[3];// Offset=0x60 Size=0xc
    float sizePad;// Offset=0x6c Size=0x4
    float delta[3];// Offset=0x70 Size=0xc
    float deltaLen;// Offset=0x7c Size=0x4
    float deltaLenSq;// Offset=0x80 Size=0x4
    float delta2DLen;// Offset=0x84 Size=0x4
    float delta2DLenSq;// Offset=0x88 Size=0x4
    struct Bounds bounds;// Offset=0x8c Size=0x18
    int contents;// Offset=0xa4 Size=0x4
    bool isPoint;// Offset=0xa8 Size=0x1
    bool axialCullOnly;// Offset=0xa9 Size=0x1
    unsigned char __align0[2];// Offset=0xaa Size=0x2
    float radius;// Offset=0xac Size=0x4
    float offset[3];// Offset=0xb0 Size=0xc
    float radiusOffset[3];// Offset=0xbc Size=0xc
    float boundingRadius;// Offset=0xc8 Size=0x4
    struct TraceThreadInfo threadInfo;// Offset=0xcc Size=0x8
    struct CM_WorldTraceCallbacks * callbacks;// Offset=0xd4 Size=0x4
};

struct TraceCapsuleWork// Size=0x48 (Id=5953)
{
    float start[3];// Offset=0x0 Size=0xc
    float end[3];// Offset=0xc Size=0xc
    float delta[3];// Offset=0x18 Size=0xc
    float deltaLenSq;// Offset=0x24 Size=0x4
    struct Bounds bounds;// Offset=0x28 Size=0x18
    float radius;// Offset=0x40 Size=0x4
    float offsetZ;// Offset=0x44 Size=0x4
};

struct traceWork_t// Size=0xe0 (Id=5954)
{
    struct TraceExtents extents;// Offset=0x0 Size=0x60
    float size[3];// Offset=0x60 Size=0xc
    float sizePad;// Offset=0x6c Size=0x4
    float delta[3];// Offset=0x70 Size=0xc
    float deltaLen;// Offset=0x7c Size=0x4
    float deltaLenSq;// Offset=0x80 Size=0x4
    float delta2DLen;// Offset=0x84 Size=0x4
    float delta2DLenSq;// Offset=0x88 Size=0x4
    struct Bounds bounds;// Offset=0x8c Size=0x18
    int contents;// Offset=0xa4 Size=0x4
    bool isPoint;// Offset=0xa8 Size=0x1
    bool axialCullOnly;// Offset=0xa9 Size=0x1
    unsigned char __align0[2];// Offset=0xaa Size=0x2
    float radius;// Offset=0xac Size=0x4
    float offset[3];// Offset=0xb0 Size=0xc
    float radiusOffset[3];// Offset=0xbc Size=0xc
    float boundingRadius;// Offset=0xc8 Size=0x4
    struct TraceThreadInfo threadInfo;// Offset=0xcc Size=0x8
    struct CM_WorldTraceCallbacks * callbacks;// Offset=0xd4 Size=0x4
};

struct TraceCapsuleWork// Size=0x48 (Id=5955)
{
    float start[3];// Offset=0x0 Size=0xc
    float end[3];// Offset=0xc Size=0xc
    float delta[3];// Offset=0x18 Size=0xc
    float deltaLenSq;// Offset=0x24 Size=0x4
    struct Bounds bounds;// Offset=0x28 Size=0x18
    float radius;// Offset=0x40 Size=0x4
    float offsetZ;// Offset=0x44 Size=0x4
};

struct cStaticModel_s// Size=0x4c (Id=5956)
{
    struct XModel * xmodel;// Offset=0x0 Size=0x4
    float origin[3];// Offset=0x4 Size=0xc
    float invScaledAxis[3][3];// Offset=0x10 Size=0x24
    struct Bounds absBounds;// Offset=0x34 Size=0x18
};

enum SphereEdgeTraceResult
{
    SPHERE_HITS_EDGE=0,
    SPHERE_MISSES_EDGE=1,
    SPHERE_MAY_HIT_V0=2,
    SPHERE_MAY_HIT_V1=3
};

struct CollisionBorder// Size=0x1c (Id=5958)
{
    float distEq[3];// Offset=0x0 Size=0xc
    float zBase;// Offset=0xc Size=0x4
    float zSlope;// Offset=0x10 Size=0x4
    float start;// Offset=0x14 Size=0x4
    float length;// Offset=0x18 Size=0x4
};

struct CollisionAabbTree// Size=0x20 (Id=5959)
{
    float midPoint[3];// Offset=0x0 Size=0xc
    unsigned short materialIndex;// Offset=0xc Size=0x2
    unsigned short childCount;// Offset=0xe Size=0x2
    float halfSize[3];// Offset=0x10 Size=0xc
    union CollisionAabbTreeIndex u;// Offset=0x1c Size=0x4
};

struct Turret// Size=0xc4 (Id=5960)
{
    bool inuse;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    int flags;// Offset=0x4 Size=0x4
    int fireTime;// Offset=0x8 Size=0x4
    float arcmin[2];// Offset=0xc Size=0x8
    float arcmax[2];// Offset=0x14 Size=0x8
    float dropPitch;// Offset=0x1c Size=0x4
    int stance;// Offset=0x20 Size=0x4
    int prevStance;// Offset=0x24 Size=0x4
    int fireSndDelay;// Offset=0x28 Size=0x4
    float userOrigin[3];// Offset=0x2c Size=0xc
    float playerSpread;// Offset=0x38 Size=0x4
    int state;// Offset=0x3c Size=0x4
    class EntHandle target;// Offset=0x40 Size=0x4
    float targetOffset[3];// Offset=0x44 Size=0xc
    class EntHandle manualTarget;// Offset=0x50 Size=0x4
    float manualTargetOffset[3];// Offset=0x54 Size=0xc
    int targetTime;// Offset=0x60 Size=0x4
    int stateChangeTime;// Offset=0x64 Size=0x4
    int modeChangeTime;// Offset=0x68 Size=0x4
    float maxRangeSquared;// Offset=0x6c Size=0x4
    int prevTargetIndex;// Offset=0x70 Size=0x4
    enum team_t eTeam;// Offset=0x74 Size=0x4
    int convergenceTime[2];// Offset=0x78 Size=0x8
    float targetPos[3];// Offset=0x80 Size=0xc
    float missOffsetNormalized[3];// Offset=0x8c Size=0xc
    float scanSpeed;// Offset=0x98 Size=0x4
    float scanDecelYaw;// Offset=0x9c Size=0x4
    int scanPauseTime;// Offset=0xa0 Size=0x4
    bool triggerDown;// Offset=0xa4 Size=0x1
    unsigned char __align1[3];// Offset=0xa5 Size=0x3
    float heatLevel;// Offset=0xa8 Size=0x4
    int heatPenaltyEndTime;// Offset=0xac Size=0x4
    float barrelRollRate;// Offset=0xb0 Size=0x4
    int autoRotationStopDelay;// Offset=0xb4 Size=0x4
    int lastAutoRotationRequestTime;// Offset=0xb8 Size=0x4
    unsigned char fireSnd;// Offset=0xbc Size=0x1
    unsigned char fireSndPlayer;// Offset=0xbd Size=0x1
    unsigned char stopSnd;// Offset=0xbe Size=0x1
    unsigned char stopSndPlayer;// Offset=0xbf Size=0x1
    unsigned char scanSnd;// Offset=0xc0 Size=0x1
};

enum _unnamed_5961
{
    TURRET_INIT_VIEW=1,
    TURRET_FIRING_DISABLED=2,
    TURRET_AUTO=4,
    TURRET_SENTRY=8,
    TURRET_FIRING=16,
    TURRET_HAS_TARGET=32,
    TURRET_HAS_MISS_TARGET=64,
    TURRET_SCANNING=128,
    TURRET_SCAN_TOGGLE=256,
    TURRET_INOPERABLE=512,
    TURRET_OFFLINE=1024,
    TURRET_BARREL_SPINNING=524288,
    TURRET_MODE_CHANGE_WAIT=1048576
};

enum _unnamed_5962
{
    TURRET_STATE_IDLE=0,
    TURRET_STATE_FIRING_HEAD=1,
    TURRET_STATE_FIRING_FEET=2
};

struct SaveHeader// Size=0x480 (Id=5963)
{
    int saveVersion;// Offset=0x0 Size=0x4
    int gameCheckSum;// Offset=0x4 Size=0x4
    int saveCheckSum;// Offset=0x8 Size=0x4
    int saveId;// Offset=0xc Size=0x4
    bool demoPlayback;// Offset=0x10 Size=0x1
    bool splitscreen;// Offset=0x11 Size=0x1
    unsigned char __align0[2];// Offset=0x12 Size=0x2
    int scrCheckSum[3];// Offset=0x14 Size=0xc
    char mapName[256];// Offset=0x20 Size=0x100
    char buildNumber[128];// Offset=0x120 Size=0x80
    char gametype[256];// Offset=0x1a0 Size=0x100
    char buildVersionSuffix[16];// Offset=0x2a0 Size=0x10
    unsigned int networkProtocol;// Offset=0x2b0 Size=0x4
    char screenShotName[64];// Offset=0x2b4 Size=0x40
    char description[256];// Offset=0x2f4 Size=0x100
    char filename[64];// Offset=0x3f4 Size=0x40
    enum SaveType saveType;// Offset=0x434 Size=0x4
    struct qtime_s time;// Offset=0x438 Size=0x24
    int bodySize;// Offset=0x45c Size=0x4
    unsigned int pad[8];// Offset=0x460 Size=0x20
};

struct SaveMemoryGlob// Size=0x500 (Id=5964)
{
    struct SaveGame migration;// Offset=0x0 Size=0x500
};

enum _unnamed_5965
{
    PHYS_OBJ_ID_NULL=0,
    PHYS_OBJ_ID_DEAD=-1
};

struct SaveDeviceWriteGlobal// Size=0x8 (Id=5966)
{
    void * fileHandle;// Offset=0x0 Size=0x4
    bool isWriting;// Offset=0x4 Size=0x1
    bool isSuccessful;// Offset=0x5 Size=0x1
};

struct gclient_s// Size=0x3700 (Id=5967)
{
    struct playerState_s ps;// Offset=0x0 Size=0x3180
    struct clientSession_t sess;// Offset=0x3180 Size=0x2a0
    int flags;// Offset=0x3420 Size=0x4
    int spectatorClient;// Offset=0x3424 Size=0x4
    int lastCmdTime;// Offset=0x3428 Size=0x4
    int buttons;// Offset=0x342c Size=0x4
    int oldbuttons;// Offset=0x3430 Size=0x4
    int latched_buttons;// Offset=0x3434 Size=0x4
    int buttonsSinceLastFrame;// Offset=0x3438 Size=0x4
    float oldOrigin[3];// Offset=0x343c Size=0xc
    float fGunPitch;// Offset=0x3448 Size=0x4
    float fGunYaw;// Offset=0x344c Size=0x4
    int damage_blood;// Offset=0x3450 Size=0x4
    int damage_stun;// Offset=0x3454 Size=0x4
    float damage_from[3];// Offset=0x3458 Size=0xc
    int damage_fromWorld;// Offset=0x3464 Size=0x4
    int accurateCount;// Offset=0x3468 Size=0x4
    int accuracy_shots;// Offset=0x346c Size=0x4
    int accuracy_hits;// Offset=0x3470 Size=0x4
    int inactivityTime;// Offset=0x3474 Size=0x4
    int inactivityWarning;// Offset=0x3478 Size=0x4
    int lastVoiceTime;// Offset=0x347c Size=0x4
    int switchTeamTime;// Offset=0x3480 Size=0x4
    float currentAimSpreadScale;// Offset=0x3484 Size=0x4
    float prevLinkedInvQuat[4];// Offset=0x3488 Size=0x10
    bool prevLinkAnglesSet;// Offset=0x3498 Size=0x1
    bool link_rotationMovesEyePos;// Offset=0x3499 Size=0x1
    bool link_doCollision;// Offset=0x349a Size=0x1
    bool link_useTagAnglesForViewAngles;// Offset=0x349b Size=0x1
    float linkAnglesFrac;// Offset=0x349c Size=0x4
    struct viewClampState link_viewClamp;// Offset=0x34a0 Size=0x40
    struct gentity_s * persistantPowerup;// Offset=0x34e0 Size=0x4
    int portalID;// Offset=0x34e4 Size=0x4
    int dropWeaponTime;// Offset=0x34e8 Size=0x4
    int sniperRifleFiredTime;// Offset=0x34ec Size=0x4
    float sniperRifleMuzzleYaw;// Offset=0x34f0 Size=0x4
    int PCSpecialPickedUpCount;// Offset=0x34f4 Size=0x4
    class EntHandle useHoldEntity;// Offset=0x34f8 Size=0x4
    int useHoldTime;// Offset=0x34fc Size=0x4
    int useButtonDone;// Offset=0x3500 Size=0x4
    int iLastCompassPlayerInfoEnt;// Offset=0x3504 Size=0x4
    int compassPingTime;// Offset=0x3508 Size=0x4
    int damageTime;// Offset=0x350c Size=0x4
    float v_dmg_roll;// Offset=0x3510 Size=0x4
    float v_dmg_pitch;// Offset=0x3514 Size=0x4
    float baseAngles[3];// Offset=0x3518 Size=0xc
    float baseOrigin[3];// Offset=0x3524 Size=0xc
    float swayViewAngles[3];// Offset=0x3530 Size=0xc
    float swayOffset[3];// Offset=0x353c Size=0xc
    float swayAngles[3];// Offset=0x3548 Size=0xc
    float recoilAngles[3];// Offset=0x3554 Size=0xc
    float recoilSpeed[3];// Offset=0x3560 Size=0xc
    float fLastIdleFactor;// Offset=0x356c Size=0x4
    int weapIdleTime;// Offset=0x3570 Size=0x4
    int lastServerTime;// Offset=0x3574 Size=0x4
    unsigned int lastWeapon;// Offset=0x3578 Size=0x4
    bool previouslyFiring;// Offset=0x357c Size=0x1
    bool previouslyFiringLeftHand;// Offset=0x357d Size=0x1
    bool previouslyUsingNightVision;// Offset=0x357e Size=0x1
    bool previouslySprinting;// Offset=0x357f Size=0x1
    int visionDuration[5];// Offset=0x3580 Size=0x14
    char visionName[5][64];// Offset=0x3594 Size=0x140
    int lastStand;// Offset=0x36d4 Size=0x4
    int lastStandTime;// Offset=0x36d8 Size=0x4
    int hudElemLastAssignedSoundID;// Offset=0x36dc Size=0x4
    float lockedTargetOffset[3];// Offset=0x36e0 Size=0xc
    int attachShieldTagName;// Offset=0x36ec Size=0x4
    enum hintType_t hintForcedType;// Offset=0x36f0 Size=0x4
    int hintForcedString;// Offset=0x36f4 Size=0x4
};

enum weaponstate_t
{
    WEAPON_READY=0,
    WEAPON_RAISING=1,
    WEAPON_RAISING_ALTSWITCH=2,
    WEAPON_DROPPING=3,
    WEAPON_DROPPING_QUICK=4,
    WEAPON_DROPPING_ALT=5,
    WEAPON_FIRING=6,
    WEAPON_RECHAMBERING=7,
    WEAPON_RELOADING=8,
    WEAPON_RELOADING_INTERUPT=9,
    WEAPON_RELOAD_START=10,
    WEAPON_RELOAD_START_INTERUPT=11,
    WEAPON_RELOAD_END=12,
    WEAPON_MELEE_INIT=13,
    WEAPON_MELEE_FIRE=14,
    WEAPON_MELEE_END=15,
    WEAPON_OFFHAND_INIT=16,
    WEAPON_OFFHAND_PREPARE=17,
    WEAPON_OFFHAND_HOLD=18,
    WEAPON_OFFHAND_FIRE=19,
    WEAPON_OFFHAND_DETONATE=20,
    WEAPON_OFFHAND_END=21,
    WEAPON_DETONATING=22,
    WEAPON_SPRINT_RAISE=23,
    WEAPON_SPRINT_LOOP=24,
    WEAPON_SPRINT_DROP=25,
    WEAPON_STUNNED_START=26,
    WEAPON_STUNNED_LOOP=27,
    WEAPON_STUNNED_END=28,
    WEAPON_NIGHTVISION_WEAR=29,
    WEAPON_NIGHTVISION_REMOVE=30,
    WEAPONSTATES_NUM=31
};

struct useList_t// Size=0x8 (Id=5969)
{
    struct gentity_s * ent;// Offset=0x0 Size=0x4
    float score;// Offset=0x4 Size=0x4
};

enum _unnamed_5970
{
    FIXED_LINK_ANGLES=0,
    FIXED_LINK_ANGLES_YAW_ONLY=1,
    FIXED_LINK_ANGLES_NONE=2
};

struct AntilagClientStore// Size=0x1c4 (Id=5971)
{
    float realClientPositions[18][3];// Offset=0x0 Size=0xd8
    float realClientAngles[18][3];// Offset=0xd8 Size=0xd8
    bool clientMoved[18];// Offset=0x1b0 Size=0x12
};

struct ipFilter_s// Size=0x8 (Id=5972)
{
    unsigned int mask;// Offset=0x0 Size=0x4
    unsigned int compare;// Offset=0x4 Size=0x4
};

struct SpawnFuncEntry// Size=0x8 (Id=5973)
{
    char * classname;// Offset=0x0 Size=0x4
    void  ( * callback)(struct gentity_s * );// Offset=0x4 Size=0x4
};

struct ent_field_t// Size=0x14 (Id=5974)
{
    char * name;// Offset=0x0 Size=0x4
    int ofs;// Offset=0x4 Size=0x4
    enum fieldtype_t type;// Offset=0x8 Size=0x4
    void  ( * setter)(struct gentity_s * ,int );// Offset=0xc Size=0x4
    void  ( * getter)(struct gentity_s * ,int );// Offset=0x10 Size=0x4
};

struct SpawnFuncEntry// Size=0x8 (Id=5975)
{
    char * classname;// Offset=0x0 Size=0x4
    void  ( * callback)(struct gentity_s * );// Offset=0x4 Size=0x4
};

struct ent_field_t// Size=0x14 (Id=5976)
{
    char * name;// Offset=0x0 Size=0x4
    int ofs;// Offset=0x4 Size=0x4
    enum fieldtype_t type;// Offset=0x8 Size=0x4
    void  ( * setter)(struct gentity_s * ,int );// Offset=0xc Size=0x4
    void  ( * getter)(struct gentity_s * ,int );// Offset=0x10 Size=0x4
};

struct game_hudelem_s// Size=0xb4 (Id=5977)
{
    struct hudelem_s elem;// Offset=0x0 Size=0xa8
    int clientNum;// Offset=0xa8 Size=0x4
    int team;// Offset=0xac Size=0x4
    int archived;// Offset=0xb0 Size=0x4
};

struct BuiltinFunctionDef// Size=0xc (Id=5978)
{
    char * actionString;// Offset=0x0 Size=0x4
    void  ( * actionFunc)();// Offset=0x4 Size=0x4
    int type;// Offset=0x8 Size=0x4
};

struct mover_positions_t// Size=0x30 (Id=5979)
{
    float decelTime;// Offset=0x0 Size=0x4
    float speed;// Offset=0x4 Size=0x4
    float midTime;// Offset=0x8 Size=0x4
    float pos1[3];// Offset=0xc Size=0xc
    float pos2[3];// Offset=0x18 Size=0xc
    float pos3[3];// Offset=0x24 Size=0xc
};

enum AntiBurnHudMenus
{
    HUD_MENU_HEALTH=0,
    HUD_MENU_AMMO=1,
    HUD_MENU_COMPASS=2,
    HUD_MENU_STANCE=3,
    HUD_MENU_OFFHAND=4,
    HUD_MENU_OBJECTIVES=5,
    HUD_MENU_SPRINT=6
};

enum _unnamed_5981
{
    LF_NONE=0,
    LF_MAP_RESTART=1,
    LF_MAP_CHANGE=2,
    LF_EXITLEVEL=3
};

enum PlayerLinkToType
{
    PLAYERLINKTO_NORMAL=0,
    PLAYERLINKTO_DELTA=1,
    PLAYERLINKTO_DELTA_WEAPONVIEWONLY=2,
    PLAYERLINKTOCNT=3
};

struct EntityOrigin// Size=0x10 (Id=5983)
{
    float origin[3];// Offset=0x0 Size=0xc
    unsigned int obj;// Offset=0xc Size=0x4
};

enum GlassPieceState
{
    GLASS_UNDAMAGED=0,
    GLASS_DAMAGED=1,
    GLASS_DESTROYED=2,
    GLASS_DELETED=3,
    GLASS_STATE_COUNT=4
};

enum _unnamed_5985
{
    MISSILEFLAG_DESTABILIZED=1,
    MISSILEFLAG_LOCKED=2,
    MISSILEFLAG_LOCK_TO_ENTITY=4,
    MISSILEFLAG_LOCK_DUMBFIRE=8,
    MISSILEFLAG_GAVE_UP_TRACKING=16,
    MISSILEFLAG_BOOST_ENABLED=32,
    MISSILEFLAG_CLIENT_CONTROLLED=64
};

struct std::_Nonscalar_ptr_iterator_tag// Size=0x1 (Id=5986)
{
};

struct std::pair<EntityOrigin *,EntityOrigin *>// Size=0x8 (Id=5987)
{
    void pair<EntityOrigin *,EntityOrigin *>(struct EntityOrigin &** ,struct EntityOrigin &** );
    void pair<EntityOrigin *,EntityOrigin *>();
    void swap(struct std::pair<EntityOrigin *,EntityOrigin *> & );
    struct EntityOrigin * first;// Offset=0x0 Size=0x4
    struct EntityOrigin * second;// Offset=0x4 Size=0x4
};

struct EntityOrigin// Size=0x10 (Id=5988)
{
    float origin[3];// Offset=0x0 Size=0xc
    unsigned int obj;// Offset=0xc Size=0x4
};

struct pushed_t// Size=0x2c (Id=5989)
{
    struct gentity_s * ent;// Offset=0x0 Size=0x4
    float origin[3];// Offset=0x4 Size=0xc
    float angles[3];// Offset=0x10 Size=0xc
    float surfaceNormal[3];// Offset=0x1c Size=0xc
    float deltayaw;// Offset=0x28 Size=0x4
};

enum BounceMissileResult
{
    BOUNCE_RESULT_IGNORE=0,
    BOUNCE_RESULT_BOUNCE=1,
    BOUNCE_RESULT_REST=2,
    BOUNCE_RESULT_STICK=3
};

struct <unnamed-type-attrGlob>// Size=0x400 (Id=5991)
{
    struct AttractorRepulsor_t attractors[32];// Offset=0x0 Size=0x400
};

struct AttractorRepulsor_t// Size=0x20 (Id=5992)
{
    bool inUse;// Offset=0x0 Size=0x1
    bool isAttractor;// Offset=0x1 Size=0x1
    unsigned char __align0[2];// Offset=0x2 Size=0x2
    int entnum;// Offset=0x4 Size=0x4
    unsigned int attacker;// Offset=0x8 Size=0x4
    float origin[3];// Offset=0xc Size=0xc
    float strength;// Offset=0x18 Size=0x4
    float maxDist;// Offset=0x1c Size=0x4
};

struct loadAnim_t// Size=0x48 (Id=5993)
{
    struct scr_anim_s anim;// Offset=0x0 Size=0x4
    int iNameHash;// Offset=0x4 Size=0x4
    char szAnimName[64];// Offset=0x8 Size=0x40
};

struct SpawnVar// Size=0xa0c (Id=5994)
{
    bool spawnVarsValid;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    int numSpawnVars;// Offset=0x4 Size=0x4
    char * spawnVars[64][2];// Offset=0x8 Size=0x200
    int numSpawnVarChars;// Offset=0x208 Size=0x4
    char spawnVarChars[2048];// Offset=0x20c Size=0x800
};

enum _unnamed_5995
{
    WEAP_ALT_MODEL0=0,
    WEAP_ALT_MODEL1=1,
    WEAP_ALT_MODEL2=2,
    WEAP_ALT_MODEL3=3,
    WEAP_ALT_MODEL4=4,
    WEAP_ALT_MODEL5=5,
    WEAP_ALT_MODEL6=6,
    WEAP_ALT_MODEL7=7,
    WEAP_ALT_MODEL8=8,
    WEAP_ALT_MODEL9=9,
    WEAP_ALT_MODEL10=10,
    WEAP_ALT_MODEL11=11,
    WEAP_ALT_MODEL12=12,
    WEAP_ALT_MODEL13=13,
    WEAP_ALT_MODEL14=14,
    WEAP_ALT_MODEL15=15,
    NUM_WEAP_ALTMODELS=16
};

enum _unnamed_5996
{
    MAX_WEAP_NOTETRACK_TO_RUMBLE_MAPPINGS=16
};

struct game_hudelem_field_t// Size=0x1c (Id=5997)
{
    char * name;// Offset=0x0 Size=0x4
    int ofs;// Offset=0x4 Size=0x4
    enum fieldtype_t type;// Offset=0x8 Size=0x4
    int mask;// Offset=0xc Size=0x4
    int shift;// Offset=0x10 Size=0x4
    void  ( * setter)(struct game_hudelem_s * ,int );// Offset=0x14 Size=0x4
    void  ( * getter)(struct game_hudelem_s * ,int );// Offset=0x18 Size=0x4
};

enum _unnamed_5998
{
    HE_FONT_DEFAULT=0,
    HE_FONT_BIGFIXED=1,
    HE_FONT_SMALLFIXED=2,
    HE_FONT_OBJECTIVE=3,
    HE_FONT_BIG=4,
    HE_FONT_SMALL=5,
    HE_FONT_HUDBIG=6,
    HE_FONT_HUDSMALL=7,
    HE_FONT_COUNT=8
};

struct game_hudelem_field_t// Size=0x1c (Id=5999)
{
    char * name;// Offset=0x0 Size=0x4
    int ofs;// Offset=0x4 Size=0x4
    enum fieldtype_t type;// Offset=0x8 Size=0x4
    int mask;// Offset=0xc Size=0x4
    int shift;// Offset=0x10 Size=0x4
    void  ( * setter)(struct game_hudelem_s * ,int );// Offset=0x14 Size=0x4
    void  ( * getter)(struct game_hudelem_s * ,int );// Offset=0x18 Size=0x4
};

struct GameWorldMp// Size=0x8 (Id=6000)
{
    char * name;// Offset=0x0 Size=0x4
    struct G_GlassData * g_glassData;// Offset=0x4 Size=0x4
};

struct G_GlassName// Size=0xc (Id=6001)
{
    char * nameStr;// Offset=0x0 Size=0x4
    unsigned short name;// Offset=0x4 Size=0x2
    unsigned short pieceCount;// Offset=0x6 Size=0x2
    unsigned short * pieceIndices;// Offset=0x8 Size=0x4
};

struct G_GlassData// Size=0x80 (Id=6002)
{
    struct G_GlassPiece * glassPieces;// Offset=0x0 Size=0x4
    unsigned int pieceCount;// Offset=0x4 Size=0x4
    unsigned short damageToWeaken;// Offset=0x8 Size=0x2
    unsigned short damageToDestroy;// Offset=0xa Size=0x2
    unsigned int glassNameCount;// Offset=0xc Size=0x4
    struct G_GlassName * glassNames;// Offset=0x10 Size=0x4
    unsigned char pad[108];// Offset=0x14 Size=0x6c
};

struct G_GlassPiece// Size=0xc (Id=6003)
{
    unsigned short damageTaken;// Offset=0x0 Size=0x2
    unsigned short collapseTime;// Offset=0x2 Size=0x2
    int lastStateChangeTime;// Offset=0x4 Size=0x4
    unsigned char impactDir;// Offset=0x8 Size=0x1
    unsigned char impactPos[2];// Offset=0x9 Size=0x2
};

struct clipMap_t// Size=0x100 (Id=6004)
{
    char * name;// Offset=0x0 Size=0x4
    int isInUse;// Offset=0x4 Size=0x4
    int planeCount;// Offset=0x8 Size=0x4
    struct cplane_s * planes;// Offset=0xc Size=0x4
    unsigned int numStaticModels;// Offset=0x10 Size=0x4
    struct cStaticModel_s * staticModelList;// Offset=0x14 Size=0x4
    unsigned int numMaterials;// Offset=0x18 Size=0x4
    struct ClipMaterial * materials;// Offset=0x1c Size=0x4
    unsigned int numBrushSides;// Offset=0x20 Size=0x4
    struct cbrushside_t * brushsides;// Offset=0x24 Size=0x4
    unsigned int numBrushEdges;// Offset=0x28 Size=0x4
    unsigned char * brushEdges;// Offset=0x2c Size=0x4
    unsigned int numNodes;// Offset=0x30 Size=0x4
    struct cNode_t * nodes;// Offset=0x34 Size=0x4
    unsigned int numLeafs;// Offset=0x38 Size=0x4
    struct cLeaf_t * leafs;// Offset=0x3c Size=0x4
    unsigned int leafbrushNodesCount;// Offset=0x40 Size=0x4
    struct cLeafBrushNode_s * leafbrushNodes;// Offset=0x44 Size=0x4
    unsigned int numLeafBrushes;// Offset=0x48 Size=0x4
    unsigned short * leafbrushes;// Offset=0x4c Size=0x4
    unsigned int numLeafSurfaces;// Offset=0x50 Size=0x4
    unsigned int * leafsurfaces;// Offset=0x54 Size=0x4
    unsigned int vertCount;// Offset=0x58 Size=0x4
    float * verts[3];// Offset=0x5c Size=0x4
    int triCount;// Offset=0x60 Size=0x4
    unsigned short * triIndices;// Offset=0x64 Size=0x4
    unsigned char * triEdgeIsWalkable;// Offset=0x68 Size=0x4
    int borderCount;// Offset=0x6c Size=0x4
    struct CollisionBorder * borders;// Offset=0x70 Size=0x4
    int partitionCount;// Offset=0x74 Size=0x4
    struct CollisionPartition * partitions;// Offset=0x78 Size=0x4
    int aabbTreeCount;// Offset=0x7c Size=0x4
    struct CollisionAabbTree * aabbTrees;// Offset=0x80 Size=0x4
    unsigned int numSubModels;// Offset=0x84 Size=0x4
    struct cmodel_t * cmodels;// Offset=0x88 Size=0x4
    unsigned short numBrushes;// Offset=0x8c Size=0x2
    unsigned char __align0[2];// Offset=0x8e Size=0x2
    struct cbrush_t * brushes;// Offset=0x90 Size=0x4
    struct Bounds * brushBounds;// Offset=0x94 Size=0x4
    int * brushContents;// Offset=0x98 Size=0x4
    struct MapEnts * mapEnts;// Offset=0x9c Size=0x4
    unsigned short smodelNodeCount;// Offset=0xa0 Size=0x2
    unsigned char __align1[2];// Offset=0xa2 Size=0x2
    struct SModelAabbNode * smodelNodes;// Offset=0xa4 Size=0x4
    unsigned short dynEntCount[2];// Offset=0xa8 Size=0x4
    struct DynEntityDef * dynEntDefList[2];// Offset=0xac Size=0x8
    struct DynEntityPose * dynEntPoseList[2];// Offset=0xb4 Size=0x8
    struct DynEntityClient * dynEntClientList[2];// Offset=0xbc Size=0x8
    struct DynEntityColl * dynEntCollList[2];// Offset=0xc4 Size=0x8
    unsigned int checksum;// Offset=0xcc Size=0x4
};

enum scriptAnimPerkStates_t
{
    ANIM_PERK_UNUSED=0,
    ANIM_PERK_GRENADEDEATH=1,
    NUM_ANIM_PERKSTATES=2
};

enum scriptAnimDamageType_t
{
    ANIM_DAMAGETYPE_BULLET=0,
    ANIM_DAMAGETYPE_EXPLOSION_LIGHT=1,
    ANIM_DAMAGETYPE_EXPLOSION=2,
    NUM_ANIM_DAMAGETYPES=3
};

enum scriptAnimHitLocation_t
{
    ANIM_HITLOC_TORSO=0,
    ANIM_HITLOC_HEAD=1,
    ANIM_HITLOC_NECK=2,
    ANIM_HITLOC_LEGS=3,
    NUM_ANIM_HITLOCATIONS=4
};

enum scriptAnimHitDirection_t
{
    ANIM_HITDIR_FRONT=0,
    ANIM_HITDIR_LEFT=1,
    ANIM_HITDIR_RIGHT=2,
    ANIM_HITDIR_BACK=3,
    NUM_ANIM_HITDIRECTIONS=4
};

struct MantleResults// Size=0x38 (Id=6009)
{
    float dir[3];// Offset=0x0 Size=0xc
    float startPos[3];// Offset=0xc Size=0xc
    float ledgePos[3];// Offset=0x18 Size=0xc
    float endPos[3];// Offset=0x24 Size=0xc
    int flags;// Offset=0x30 Size=0x4
    int duration;// Offset=0x34 Size=0x4
};

enum BlurTime
{
    BLUR_TIME_RELATIVE=0,
    BLUR_TIME_ABSOLUTE=1
};

enum PlayerSpreadOverrideState
{
    PSOS_DISABLED=0,
    PSOS_RESETTING=1,
    PSOS_ENABLED=2
};

enum BlurPriority
{
    BLUR_PRIORITY_NONE=0,
    BLUR_PRIORITY_SCRIPT=1,
    BLUR_PRIORITY_CODE=2
};

struct client_fields_s// Size=0x14 (Id=6013)
{
    char * name;// Offset=0x0 Size=0x4
    int ofs;// Offset=0x4 Size=0x4
    enum fieldtype_t type;// Offset=0x8 Size=0x4
    void  ( * setter)(struct gclient_s * ,struct client_fields_s * );// Offset=0xc Size=0x4
    void  ( * getter)(struct gclient_s * ,struct client_fields_s * );// Offset=0x10 Size=0x4
};

struct client_fields_s// Size=0x14 (Id=6014)
{
    char * name;// Offset=0x0 Size=0x4
    int ofs;// Offset=0x4 Size=0x4
    enum fieldtype_t type;// Offset=0x8 Size=0x4
    void  ( * setter)(struct gclient_s * ,struct client_fields_s * );// Offset=0xc Size=0x4
    void  ( * getter)(struct gclient_s * ,struct client_fields_s * );// Offset=0x10 Size=0x4
};

struct viewState_t// Size=0x24 (Id=6015)
{
    struct playerState_s * ps;// Offset=0x0 Size=0x4
    int damageTime;// Offset=0x4 Size=0x4
    int time;// Offset=0x8 Size=0x4
    float v_dmg_pitch;// Offset=0xc Size=0x4
    float v_dmg_roll;// Offset=0x10 Size=0x4
    float xyspeed;// Offset=0x14 Size=0x4
    float frametime;// Offset=0x18 Size=0x4
    float fLastIdleFactor;// Offset=0x1c Size=0x4
    int * weapIdleTime;// Offset=0x20 Size=0x4
};

struct weaponState_t// Size=0x90 (Id=6016)
{
    struct playerState_s * ps;// Offset=0x0 Size=0x4
    float xyspeed;// Offset=0x4 Size=0x4
    float frametime;// Offset=0x8 Size=0x4
    float fLastIdleFactor;// Offset=0xc Size=0x4
    int time;// Offset=0x10 Size=0x4
    int damageTime;// Offset=0x14 Size=0x4
    float v_dmg_pitch;// Offset=0x18 Size=0x4
    float v_dmg_roll;// Offset=0x1c Size=0x4
    int * weapIdleTime;// Offset=0x20 Size=0x4
    float baseAngles[3];// Offset=0x24 Size=0xc
    float baseOrigin[3];// Offset=0x30 Size=0xc
    float recoilAngles[3];// Offset=0x3c Size=0xc
    float recoilSpeed[3];// Offset=0x48 Size=0xc
    float swayAngles[3];// Offset=0x54 Size=0xc
    float swayOrigin[3];// Offset=0x60 Size=0xc
    float swayViewAngles[3];// Offset=0x6c Size=0xc
    float bobAngles[3];// Offset=0x78 Size=0xc
    int shellShockStart;// Offset=0x84 Size=0x4
    int shellShockDuration;// Offset=0x88 Size=0x4
    int shellShockFadeTime;// Offset=0x8c Size=0x4
};

struct pmove_t// Size=0x128 (Id=6017)
{
    struct playerState_s * ps;// Offset=0x0 Size=0x4
    struct usercmd_s cmd;// Offset=0x4 Size=0x28
    struct usercmd_s oldcmd;// Offset=0x2c Size=0x28
    int tracemask;// Offset=0x54 Size=0x4
    int numtouch;// Offset=0x58 Size=0x4
    int touchents[32];// Offset=0x5c Size=0x80
    struct Bounds bounds;// Offset=0xdc Size=0x18
    float xyspeed;// Offset=0xf4 Size=0x4
    int proneChange;// Offset=0xf8 Size=0x4
    float maxSprintTimeMultiplier;// Offset=0xfc Size=0x4
    bool mantleStarted;// Offset=0x100 Size=0x1
    unsigned char __align0[3];// Offset=0x101 Size=0x3
    float mantleEndPos[3];// Offset=0x104 Size=0xc
    int mantleDuration;// Offset=0x110 Size=0x4
    int viewChangeTime;// Offset=0x114 Size=0x4
    float viewChange;// Offset=0x118 Size=0x4
    float fTorsoPitch;// Offset=0x11c Size=0x4
    float fWaistPitch;// Offset=0x120 Size=0x4
    unsigned char handler;// Offset=0x124 Size=0x1
};

struct weaponState_t// Size=0x90 (Id=6018)
{
    struct playerState_s * ps;// Offset=0x0 Size=0x4
    float xyspeed;// Offset=0x4 Size=0x4
    float frametime;// Offset=0x8 Size=0x4
    float fLastIdleFactor;// Offset=0xc Size=0x4
    int time;// Offset=0x10 Size=0x4
    int damageTime;// Offset=0x14 Size=0x4
    float v_dmg_pitch;// Offset=0x18 Size=0x4
    float v_dmg_roll;// Offset=0x1c Size=0x4
    int * weapIdleTime;// Offset=0x20 Size=0x4
    float baseAngles[3];// Offset=0x24 Size=0xc
    float baseOrigin[3];// Offset=0x30 Size=0xc
    float recoilAngles[3];// Offset=0x3c Size=0xc
    float recoilSpeed[3];// Offset=0x48 Size=0xc
    float swayAngles[3];// Offset=0x54 Size=0xc
    float swayOrigin[3];// Offset=0x60 Size=0xc
    float swayViewAngles[3];// Offset=0x6c Size=0xc
    float bobAngles[3];// Offset=0x78 Size=0xc
    int shellShockStart;// Offset=0x84 Size=0x4
    int shellShockDuration;// Offset=0x88 Size=0x4
    int shellShockFadeTime;// Offset=0x8c Size=0x4
};

struct viewState_t// Size=0x24 (Id=6019)
{
    struct playerState_s * ps;// Offset=0x0 Size=0x4
    int damageTime;// Offset=0x4 Size=0x4
    int time;// Offset=0x8 Size=0x4
    float v_dmg_pitch;// Offset=0xc Size=0x4
    float v_dmg_roll;// Offset=0x10 Size=0x4
    float xyspeed;// Offset=0x14 Size=0x4
    float frametime;// Offset=0x18 Size=0x4
    float fLastIdleFactor;// Offset=0x1c Size=0x4
    int * weapIdleTime;// Offset=0x20 Size=0x4
};

struct EntHandleList// Size=0x2 (Id=6020)
{
    unsigned short infoIndex;// Offset=0x0 Size=0x2
};

struct EntHandleInfo// Size=0x8 (Id=6021)
{
    void * handle;// Offset=0x0 Size=0x4
    unsigned short next;// Offset=0x4 Size=0x2
    unsigned short prev;// Offset=0x6 Size=0x2
};

struct weaponParms// Size=0x48 (Id=6022)
{
    float forward[3];// Offset=0x0 Size=0xc
    float right[3];// Offset=0xc Size=0xc
    float up[3];// Offset=0x18 Size=0xc
    float muzzleTrace[3];// Offset=0x24 Size=0xc
    float gunForward[3];// Offset=0x30 Size=0xc
    unsigned int weaponIndex;// Offset=0x3c Size=0x4
    struct WeaponDef * weapDef;// Offset=0x40 Size=0x4
    struct WeaponCompleteDef * weapCompleteDef;// Offset=0x44 Size=0x4
};

struct BulletFireParams// Size=0x40 (Id=6023)
{
    int weaponEntIndex;// Offset=0x0 Size=0x4
    int ignoreEntIndex;// Offset=0x4 Size=0x4
    float damageMultiplier;// Offset=0x8 Size=0x4
    enum meansOfDeath_t methodOfDeath;// Offset=0xc Size=0x4
    float origStart[3];// Offset=0x10 Size=0xc
    float start[3];// Offset=0x1c Size=0xc
    float end[3];// Offset=0x28 Size=0xc
    float dir[3];// Offset=0x34 Size=0xc
};

struct BulletTraceResults// Size=0x48 (Id=6024)
{
    struct trace_t trace;// Offset=0x0 Size=0x2c
    struct gentity_s * hitEnt;// Offset=0x2c Size=0x4
    float hitPos[3];// Offset=0x30 Size=0xc
    bool ignoreHitEnt;// Offset=0x3c Size=0x1
    unsigned char __align0[3];// Offset=0x3d Size=0x3
    int depthSurfaceType;// Offset=0x40 Size=0x4
    int hitClientNum;// Offset=0x44 Size=0x4
};

struct BulletTraceResults// Size=0x48 (Id=6025)
{
    struct trace_t trace;// Offset=0x0 Size=0x2c
    struct gentity_s * hitEnt;// Offset=0x2c Size=0x4
    float hitPos[3];// Offset=0x30 Size=0xc
    bool ignoreHitEnt;// Offset=0x3c Size=0x1
    unsigned char __align0[3];// Offset=0x3d Size=0x3
    int depthSurfaceType;// Offset=0x40 Size=0x4
    int hitClientNum;// Offset=0x44 Size=0x4
};

struct BulletFireParams// Size=0x40 (Id=6026)
{
    int weaponEntIndex;// Offset=0x0 Size=0x4
    int ignoreEntIndex;// Offset=0x4 Size=0x4
    float damageMultiplier;// Offset=0x8 Size=0x4
    enum meansOfDeath_t methodOfDeath;// Offset=0xc Size=0x4
    float origStart[3];// Offset=0x10 Size=0xc
    float start[3];// Offset=0x1c Size=0xc
    float end[3];// Offset=0x28 Size=0xc
    float dir[3];// Offset=0x34 Size=0xc
};

struct FxCurve// Size=0xc (Id=6027)
{
    int dimensionCount;// Offset=0x0 Size=0x4
    int keyCount;// Offset=0x4 Size=0x4
    float keys[1];// Offset=0x8 Size=0x4
};

struct FxCurve// Size=0xc (Id=6028)
{
    int dimensionCount;// Offset=0x0 Size=0x4
    int keyCount;// Offset=0x4 Size=0x4
    float keys[1];// Offset=0x8 Size=0x4
};

struct FxCurveIterator// Size=0x8 (Id=6029)
{
    struct FxCurve * master;// Offset=0x0 Size=0x4
    int currentKeyIndex;// Offset=0x4 Size=0x4
};

struct FxWorld// Size=0x74 (Id=6030)
{
    char * name;// Offset=0x0 Size=0x4
    struct FxGlassSystem glassSys;// Offset=0x4 Size=0x70
};

struct FxSpatialFrame// Size=0x1c (Id=6031)
{
    float quat[4];// Offset=0x0 Size=0x10
    float origin[3];// Offset=0x10 Size=0xc
};

struct FxElemVelStateInFrame// Size=0x30 (Id=6032)
{
    struct FxElemVec3Range velocity;// Offset=0x0 Size=0x18
    struct FxElemVec3Range totalDelta;// Offset=0x18 Size=0x18
};

struct FxSystem// Size=0xc40 (Id=6033)
{
    struct FxCamera camera;// Offset=0x0 Size=0xb0
    struct FxCamera cameraPrev;// Offset=0xb0 Size=0xb0
    int localClientCount;// Offset=0x160 Size=0x4
    struct FxCamera cameraPrevArray[2];// Offset=0x164 Size=0x160
    int cgameClientNum;// Offset=0x2c4 Size=0x4
    int pad[2];// Offset=0x2c8 Size=0x8
    struct FxSpriteInfo sprite;// Offset=0x2d0 Size=0x10
    struct FxEffect * effects;// Offset=0x2e0 Size=0x4
    struct FxPool<FxElem> * elems;// Offset=0x2e4 Size=0x4
    struct FxPool<FxTrail> * trails;// Offset=0x2e8 Size=0x4
    struct FxPool<FxTrailElem> * trailElems;// Offset=0x2ec Size=0x4
    struct FxPool<FxBolt> * bolts;// Offset=0x2f0 Size=0x4
    struct FxPool<FxSparkCloud> * sparkClouds;// Offset=0x2f4 Size=0x4
    struct FxPool<FxSparkFountain> * sparkFountains;// Offset=0x2f8 Size=0x4
    struct FxPool<FxSparkFountainCluster> * sparkFountainClusters;// Offset=0x2fc Size=0x4
    unsigned short * deferredElems;// Offset=0x300 Size=0x4
    long firstFreeElem;// Offset=0x304 Size=0x4
    long firstFreeTrailElem;// Offset=0x308 Size=0x4
    long firstFreeTrail;// Offset=0x30c Size=0x4
    long firstFreeBolt;// Offset=0x310 Size=0x4
    long firstFreeSparkCloud;// Offset=0x314 Size=0x4
    long firstFreeSparkFountain;// Offset=0x318 Size=0x4
    long firstFreeSparkFountainCluster;// Offset=0x31c Size=0x4
    long deferredElemCount;// Offset=0x320 Size=0x4
    long activeElemCount;// Offset=0x324 Size=0x4
    long activeTrailElemCount;// Offset=0x328 Size=0x4
    long activeTrailCount;// Offset=0x32c Size=0x4
    long activeBoltCount;// Offset=0x330 Size=0x4
    long activeSparkCloudCount;// Offset=0x334 Size=0x4
    long activeSparkFountainCount;// Offset=0x338 Size=0x4
    long activeSparkFountainClusterCount;// Offset=0x33c Size=0x4
    long gfxCloudCount;// Offset=0x340 Size=0x4
    struct FxVisState * visState;// Offset=0x344 Size=0x4
    struct FxVisState * visStateBufferRead;// Offset=0x348 Size=0x4
    struct FxVisState * visStateBufferWrite;// Offset=0x34c Size=0x4
    long firstActiveEffect;// Offset=0x350 Size=0x4
    long firstNewEffect;// Offset=0x354 Size=0x4
    long firstFreeEffect;// Offset=0x358 Size=0x4
    unsigned short allEffectHandles[1024];// Offset=0x35c Size=0x800
    long activeSpotLightEffectCount;// Offset=0xb5c Size=0x4
    long activeSpotLightElemCount;// Offset=0xb60 Size=0x4
    unsigned short activeSpotLightEffectHandle;// Offset=0xb64 Size=0x2
    unsigned short activeSpotLightElemHandle;// Offset=0xb66 Size=0x2
    short activeSpotLightBoltDobj;// Offset=0xb68 Size=0x2
    unsigned char __align0[2];// Offset=0xb6a Size=0x2
    long iteratorCount;// Offset=0xb6c Size=0x4
    int msecNow;// Offset=0xb70 Size=0x4
    long msecDraw;// Offset=0xb74 Size=0x4
    int frameCount;// Offset=0xb78 Size=0x4
    bool isInitialized;// Offset=0xb7c Size=0x1
    bool needsGarbageCollection;// Offset=0xb7d Size=0x1
    bool isArchiving;// Offset=0xb7e Size=0x1
    unsigned char localClientNum;// Offset=0xb7f Size=0x1
    unsigned int restartList[32];// Offset=0xb80 Size=0x80
    struct FxEffect ** restartEffectsList;// Offset=0xc00 Size=0x4
    unsigned int restartCount;// Offset=0xc04 Size=0x4
    unsigned int pad1[14];// Offset=0xc08 Size=0x38
};

struct FxCamera// Size=0xb0 (Id=6034)
{
    float origin[3];// Offset=0x0 Size=0xc
    long isValid;// Offset=0xc Size=0x4
    float frustum[6][4];// Offset=0x10 Size=0x60
    float axis[3][3];// Offset=0x70 Size=0x24
    unsigned int frustumPlaneCount;// Offset=0x94 Size=0x4
    float viewOffset[3];// Offset=0x98 Size=0xc
    bool thermal;// Offset=0xa4 Size=0x1
    unsigned char __align0[3];// Offset=0xa5 Size=0x3
    unsigned int pad[2];// Offset=0xa8 Size=0x8
};

struct FxTrail// Size=0x10 (Id=6035)
{
    union // Size=0x4 (Id=0)
    {
        const int HANDLE_SCALE;// Offset=0x0 Size=0x4
        const int POOL_SIZE;// Offset=0x0 Size=0x4
        unsigned short nextTrailHandle;// Offset=0x0 Size=0x2
        unsigned short firstTrailElemHandle;// Offset=0x2 Size=0x2
    };
    unsigned short lastTrailElemHandle;// Offset=0x4 Size=0x2
    char defIndex;// Offset=0x6 Size=0x1
    char sequence;// Offset=0x7 Size=0x1
    float distanceAccumulator;// Offset=0x8 Size=0x4
    char pad[4];// Offset=0xc Size=0x4
};

enum FxRandKey
{
    FXRAND_VELOCITY_X=0,
    FXRAND_VELOCITY_Y=1,
    FXRAND_VELOCITY_Z=2,
    FXRAND_ANGULAR_VELOCITY_PITCH=3,
    FXRAND_ANGULAR_VELOCITY_YAW=4,
    FXRAND_ANGULAR_VELOCITY_ROLL=5,
    FXRAND_ORIGIN_X=6,
    FXRAND_ORIGIN_Y=7,
    FXRAND_ORIGIN_Z=8,
    FXRAND_OFFSET_YAW=9,
    FXRAND_OFFSET_HEIGHT=10,
    FXRAND_OFFSET_RADIUS=11,
    FXRAND_ANGLES_PITCH=12,
    FXRAND_ANGLES_YAW=13,
    FXRAND_ANGLES_ROLL=14,
    FXRAND_GRAVITY=15,
    FXRAND_REFLECTION_FACTOR=16,
    FXRAND_LIFE_SPAN=17,
    FXRAND_SPAWN_DELAY=18,
    FXRAND_SPAWN_COUNT=19,
    FXRAND_EMIT_DIST=20,
    FXRAND_VISUAL=21,
    FXRAND_TILE_START=22,
    FXRAND_COLOR=23,
    FXRAND_ROTATION=24,
    FXRAND_ROTATION_DELTA=25,
    FXRAND_SIZE_0=26,
    FXRAND_SIZE_1=27,
    FXRAND_SCALE=28,
    FXRAND_COUNT=29,
    FXRAND_GLASS=0
};

struct FxSystem// Size=0xad0 (Id=6037)
{
    struct FxCamera camera;// Offset=0x0 Size=0xb0
    struct FxCamera cameraPrev;// Offset=0xb0 Size=0xb0
    struct FxSpriteInfo sprite;// Offset=0x160 Size=0x10
    struct FxEffect * effects;// Offset=0x170 Size=0x4
    struct FxPool<FxElem> * elems;// Offset=0x174 Size=0x4
    struct FxPool<FxTrail> * trails;// Offset=0x178 Size=0x4
    struct FxPool<FxTrailElem> * trailElems;// Offset=0x17c Size=0x4
    struct FxPool<FxBolt> * bolts;// Offset=0x180 Size=0x4
    struct FxPool<FxSparkCloud> * sparkClouds;// Offset=0x184 Size=0x4
    struct FxPool<FxSparkFountain> * sparkFountains;// Offset=0x188 Size=0x4
    struct FxPool<FxSparkFountainCluster> * sparkFountainClusters;// Offset=0x18c Size=0x4
    unsigned short * deferredElems;// Offset=0x190 Size=0x4
    long firstFreeElem;// Offset=0x194 Size=0x4
    long firstFreeTrailElem;// Offset=0x198 Size=0x4
    long firstFreeTrail;// Offset=0x19c Size=0x4
    long firstFreeBolt;// Offset=0x1a0 Size=0x4
    long firstFreeSparkCloud;// Offset=0x1a4 Size=0x4
    long firstFreeSparkFountain;// Offset=0x1a8 Size=0x4
    long firstFreeSparkFountainCluster;// Offset=0x1ac Size=0x4
    long deferredElemCount;// Offset=0x1b0 Size=0x4
    long activeElemCount;// Offset=0x1b4 Size=0x4
    long activeTrailElemCount;// Offset=0x1b8 Size=0x4
    long activeTrailCount;// Offset=0x1bc Size=0x4
    long activeBoltCount;// Offset=0x1c0 Size=0x4
    long activeSparkCloudCount;// Offset=0x1c4 Size=0x4
    long activeSparkFountainCount;// Offset=0x1c8 Size=0x4
    long activeSparkFountainClusterCount;// Offset=0x1cc Size=0x4
    long gfxCloudCount;// Offset=0x1d0 Size=0x4
    struct FxVisState * visState;// Offset=0x1d4 Size=0x4
    struct FxVisState * visStateBufferRead;// Offset=0x1d8 Size=0x4
    struct FxVisState * visStateBufferWrite;// Offset=0x1dc Size=0x4
    long firstActiveEffect;// Offset=0x1e0 Size=0x4
    long firstNewEffect;// Offset=0x1e4 Size=0x4
    long firstFreeEffect;// Offset=0x1e8 Size=0x4
    unsigned short allEffectHandles[1024];// Offset=0x1ec Size=0x800
    long activeSpotLightEffectCount;// Offset=0x9ec Size=0x4
    long activeSpotLightElemCount;// Offset=0x9f0 Size=0x4
    unsigned short activeSpotLightEffectHandle;// Offset=0x9f4 Size=0x2
    unsigned short activeSpotLightElemHandle;// Offset=0x9f6 Size=0x2
    short activeSpotLightBoltDobj;// Offset=0x9f8 Size=0x2
    unsigned char __align0[2];// Offset=0x9fa Size=0x2
    long iteratorCount;// Offset=0x9fc Size=0x4
    int msecNow;// Offset=0xa00 Size=0x4
    long msecDraw;// Offset=0xa04 Size=0x4
    int frameCount;// Offset=0xa08 Size=0x4
    bool isInitialized;// Offset=0xa0c Size=0x1
    bool needsGarbageCollection;// Offset=0xa0d Size=0x1
    bool isArchiving;// Offset=0xa0e Size=0x1
    unsigned char localClientNum;// Offset=0xa0f Size=0x1
    unsigned int restartList[32];// Offset=0xa10 Size=0x80
    struct FxEffect ** restartEffectsList;// Offset=0xa90 Size=0x4
    unsigned int restartCount;// Offset=0xa94 Size=0x4
    unsigned int pad1[14];// Offset=0xa98 Size=0x38
};

struct FxUpdateElem// Size=0x78 (Id=6038)
{
    struct FxEffect * effect;// Offset=0x0 Size=0x4
    int elemIndex;// Offset=0x4 Size=0x4
    int atRestFraction;// Offset=0x8 Size=0x4
    struct orientation_t orient;// Offset=0xc Size=0x30
    int randomSeed;// Offset=0x3c Size=0x4
    int sequence;// Offset=0x40 Size=0x4
    float msecLifeSpan;// Offset=0x44 Size=0x4
    int msecElemBegin;// Offset=0x48 Size=0x4
    int msecElemEnd;// Offset=0x4c Size=0x4
    int msecUpdateBegin;// Offset=0x50 Size=0x4
    int msecUpdateEnd;// Offset=0x54 Size=0x4
    float msecElapsed;// Offset=0x58 Size=0x4
    float invMsecLifeSpan;// Offset=0x5c Size=0x4
    float * elemOrigin;// Offset=0x60 Size=0x4
    float * elemBaseVel;// Offset=0x64 Size=0x4
    float posWorld[3];// Offset=0x68 Size=0xc
    bool onGround;// Offset=0x74 Size=0x1
    bool hasEmitter;// Offset=0x75 Size=0x1
};

struct SpawnEffectInfo// Size=0x5c (Id=6039)
{
    struct FxEffectDef * remoteDef;// Offset=0x0 Size=0x4
    struct FxSpatialFrame frame;// Offset=0x4 Size=0x1c
    struct FxSpatialFrame boltOffset;// Offset=0x20 Size=0x1c
    int msecBegin;// Offset=0x3c Size=0x4
    int dobjHandle;// Offset=0x40 Size=0x4
    int boneIndex;// Offset=0x44 Size=0x4
    int runnerSortOrder;// Offset=0x48 Size=0x4
    unsigned short owner;// Offset=0x4c Size=0x2
    unsigned char __align0[2];// Offset=0x4e Size=0x2
    unsigned int markEntnum;// Offset=0x50 Size=0x4
    bool markGivenModelsOnly;// Offset=0x54 Size=0x1
    bool markViewmodel;// Offset=0x55 Size=0x1
    unsigned char __align1[2];// Offset=0x56 Size=0x2
    int markViewmodelClientIndex;// Offset=0x58 Size=0x4
};

enum FxUpdateResult
{
    FX_UPDATE_REMOVE=0,
    FX_UPDATE_KEEP=1
};

struct FxEffect// Size=0x90 (Id=6041)
{
    union // Size=0x4 (Id=0)
    {
        const int HANDLE_SCALE;// Offset=0x0 Size=0x4
        struct FxEffectDef * def;// Offset=0x0 Size=0x4
    };
    long status;// Offset=0x4 Size=0x4
    unsigned short firstElemHandle[3];// Offset=0x8 Size=0x6
    unsigned short firstSortedElemHandle;// Offset=0xe Size=0x2
    unsigned short firstTrailHandle;// Offset=0x10 Size=0x2
    unsigned short firstSparkFountainHandle;// Offset=0x12 Size=0x2
    unsigned short pad16[1];// Offset=0x14 Size=0x2
    unsigned short randomSeed;// Offset=0x16 Size=0x2
    unsigned short owner;// Offset=0x18 Size=0x2
    unsigned char lighting[3];// Offset=0x1a Size=0x3
    unsigned char pad8[2];// Offset=0x1d Size=0x2
    unsigned char markViewmodelClientIndex;// Offset=0x1f Size=0x1
    unsigned short markEntnum;// Offset=0x20 Size=0x2
    unsigned short flags;// Offset=0x22 Size=0x2
    unsigned char bolt;// Offset=0x24 Size=0x1
    unsigned char runnerSortOrder;// Offset=0x25 Size=0x1
    unsigned char __align0[2];// Offset=0x26 Size=0x2
    long frameCount;// Offset=0x28 Size=0x4
    int msecBegin;// Offset=0x2c Size=0x4
    int msecLastUpdate;// Offset=0x30 Size=0x4
    struct FxSpatialFrame frameAtSpawn;// Offset=0x34 Size=0x1c
    struct FxSpatialFrame frameNow;// Offset=0x50 Size=0x1c
    struct FxSpatialFrame framePrev;// Offset=0x6c Size=0x1c
    float distanceTravelled;// Offset=0x88 Size=0x4
    char pad2[4];// Offset=0x8c Size=0x4
};

struct FxUpdateElem// Size=0x78 (Id=6042)
{
    struct FxEffect * effect;// Offset=0x0 Size=0x4
    int elemIndex;// Offset=0x4 Size=0x4
    int atRestFraction;// Offset=0x8 Size=0x4
    struct orientation_t orient;// Offset=0xc Size=0x30
    int randomSeed;// Offset=0x3c Size=0x4
    int sequence;// Offset=0x40 Size=0x4
    float msecLifeSpan;// Offset=0x44 Size=0x4
    int msecElemBegin;// Offset=0x48 Size=0x4
    int msecElemEnd;// Offset=0x4c Size=0x4
    int msecUpdateBegin;// Offset=0x50 Size=0x4
    int msecUpdateEnd;// Offset=0x54 Size=0x4
    float msecElapsed;// Offset=0x58 Size=0x4
    float invMsecLifeSpan;// Offset=0x5c Size=0x4
    float * elemOrigin;// Offset=0x60 Size=0x4
    float * elemBaseVel;// Offset=0x64 Size=0x4
    float posWorld[3];// Offset=0x68 Size=0xc
    bool onGround;// Offset=0x74 Size=0x1
    bool hasEmitter;// Offset=0x75 Size=0x1
};

struct refdef_t// Size=0x3f60 (Id=6043)
{
    unsigned int x;// Offset=0x0 Size=0x4
    unsigned int y;// Offset=0x4 Size=0x4
    unsigned int width;// Offset=0x8 Size=0x4
    unsigned int height;// Offset=0xc Size=0x4
    struct RefdefView view;// Offset=0x10 Size=0x3c
    float viewOffset[3];// Offset=0x4c Size=0xc
    int time;// Offset=0x58 Size=0x4
    float blurRadius;// Offset=0x5c Size=0x4
    struct GfxDepthOfField dof;// Offset=0x60 Size=0x20
    struct GfxFilm film;// Offset=0x80 Size=0x3c
    struct GfxGlow glow;// Offset=0xbc Size=0x14
    struct GfxLightScale charPrimaryLightScale;// Offset=0xd0 Size=0x8
    struct GfxCompositeFx waterSheetingFx;// Offset=0xd8 Size=0x6c
    struct GfxLight primaryLights[248];// Offset=0x144 Size=0x3e00
    struct GfxViewport scissorViewport;// Offset=0x3f44 Size=0x10
    bool useScissorViewport;// Offset=0x3f54 Size=0x1
    bool viewModelHasDistortion;// Offset=0x3f55 Size=0x1
    unsigned char forceSunShadowsGenerate;// Offset=0x3f56 Size=0x1
    bool halfResParticles;// Offset=0x3f57 Size=0x1
    bool playerTeleported;// Offset=0x3f58 Size=0x1
    unsigned char __align0[3];// Offset=0x3f59 Size=0x3
    int localClientNum;// Offset=0x3f5c Size=0x4
};

struct RefdefView// Size=0x3c (Id=6044)
{
    float tanHalfFovX;// Offset=0x0 Size=0x4
    float tanHalfFovY;// Offset=0x4 Size=0x4
    float org[3];// Offset=0x8 Size=0xc
    float axis[3][3];// Offset=0x14 Size=0x24
    float zNear;// Offset=0x38 Size=0x4
};

struct FxSystem// Size=0xad0 (Id=6045)
{
    struct FxCamera camera;// Offset=0x0 Size=0xb0
    struct FxCamera cameraPrev;// Offset=0xb0 Size=0xb0
    struct FxSpriteInfo sprite;// Offset=0x160 Size=0x10
    struct FxEffect * effects;// Offset=0x170 Size=0x4
    struct FxPool<FxElem> * elems;// Offset=0x174 Size=0x4
    struct FxPool<FxTrail> * trails;// Offset=0x178 Size=0x4
    struct FxPool<FxTrailElem> * trailElems;// Offset=0x17c Size=0x4
    struct FxPool<FxBolt> * bolts;// Offset=0x180 Size=0x4
    struct FxPool<FxSparkCloud> * sparkClouds;// Offset=0x184 Size=0x4
    struct FxPool<FxSparkFountain> * sparkFountains;// Offset=0x188 Size=0x4
    struct FxPool<FxSparkFountainCluster> * sparkFountainClusters;// Offset=0x18c Size=0x4
    unsigned short * deferredElems;// Offset=0x190 Size=0x4
    long firstFreeElem;// Offset=0x194 Size=0x4
    long firstFreeTrailElem;// Offset=0x198 Size=0x4
    long firstFreeTrail;// Offset=0x19c Size=0x4
    long firstFreeBolt;// Offset=0x1a0 Size=0x4
    long firstFreeSparkCloud;// Offset=0x1a4 Size=0x4
    long firstFreeSparkFountain;// Offset=0x1a8 Size=0x4
    long firstFreeSparkFountainCluster;// Offset=0x1ac Size=0x4
    long deferredElemCount;// Offset=0x1b0 Size=0x4
    long activeElemCount;// Offset=0x1b4 Size=0x4
    long activeTrailElemCount;// Offset=0x1b8 Size=0x4
    long activeTrailCount;// Offset=0x1bc Size=0x4
    long activeBoltCount;// Offset=0x1c0 Size=0x4
    long activeSparkCloudCount;// Offset=0x1c4 Size=0x4
    long activeSparkFountainCount;// Offset=0x1c8 Size=0x4
    long activeSparkFountainClusterCount;// Offset=0x1cc Size=0x4
    long gfxCloudCount;// Offset=0x1d0 Size=0x4
    struct FxVisState * visState;// Offset=0x1d4 Size=0x4
    struct FxVisState * visStateBufferRead;// Offset=0x1d8 Size=0x4
    struct FxVisState * visStateBufferWrite;// Offset=0x1dc Size=0x4
    long firstActiveEffect;// Offset=0x1e0 Size=0x4
    long firstNewEffect;// Offset=0x1e4 Size=0x4
    long firstFreeEffect;// Offset=0x1e8 Size=0x4
    unsigned short allEffectHandles[1024];// Offset=0x1ec Size=0x800
    long activeSpotLightEffectCount;// Offset=0x9ec Size=0x4
    long activeSpotLightElemCount;// Offset=0x9f0 Size=0x4
    unsigned short activeSpotLightEffectHandle;// Offset=0x9f4 Size=0x2
    unsigned short activeSpotLightElemHandle;// Offset=0x9f6 Size=0x2
    short activeSpotLightBoltDobj;// Offset=0x9f8 Size=0x2
    unsigned char __align0[2];// Offset=0x9fa Size=0x2
    long iteratorCount;// Offset=0x9fc Size=0x4
    int msecNow;// Offset=0xa00 Size=0x4
    long msecDraw;// Offset=0xa04 Size=0x4
    int frameCount;// Offset=0xa08 Size=0x4
    bool isInitialized;// Offset=0xa0c Size=0x1
    bool needsGarbageCollection;// Offset=0xa0d Size=0x1
    bool isArchiving;// Offset=0xa0e Size=0x1
    unsigned char localClientNum;// Offset=0xa0f Size=0x1
    unsigned int restartList[32];// Offset=0xa10 Size=0x80
    struct FxEffect ** restartEffectsList;// Offset=0xa90 Size=0x4
    unsigned int restartCount;// Offset=0xa94 Size=0x4
    unsigned int pad1[14];// Offset=0xa98 Size=0x38
};

struct FxPointGroup// Size=0x44 (Id=6046)
{
    struct FxMarkPoint points[2];// Offset=0x0 Size=0x40
    unsigned short next;// Offset=0x40 Size=0x2
};

union FxPointGroupPool// Size=0x44 (Id=6047)
{
    union // Size=0x44 (Id=0)
    {
        struct FxPointGroup pointGroup;// Offset=0x0 Size=0x44
        union FxPointGroupPool * nextFreePointGroup;// Offset=0x0 Size=0x4
    };
};

struct FxMarkPoint// Size=0x20 (Id=6048)
{
    float xyz[3];// Offset=0x0 Size=0xc
    float lmapCoord[2];// Offset=0xc Size=0x8
    float normal[3];// Offset=0x14 Size=0xc
};

struct FxMarksSystem// Size=0x1038 (Id=6049)
{
    int time;// Offset=0x0 Size=0x4
    unsigned short firstFreeMarkHandle;// Offset=0x4 Size=0x2
    unsigned short firstActiveWorldMarkHandle;// Offset=0x6 Size=0x2
    unsigned short firstGlassMarkHandle;// Offset=0x8 Size=0x2
    unsigned short entFirstMarkHandles[2048];// Offset=0xa Size=0x1000
    unsigned short firstViewmodelMarkHandle[4];// Offset=0x100a Size=0x8
    unsigned char __align0[2];// Offset=0x1012 Size=0x2
    union FxTriGroupPool * firstFreeTriGroup;// Offset=0x1014 Size=0x4
    union FxPointGroupPool * firstFreePointGroup;// Offset=0x1018 Size=0x4
    struct FxMark * marks;// Offset=0x101c Size=0x4
    union FxTriGroupPool * triGroups;// Offset=0x1020 Size=0x4
    union FxPointGroupPool * pointGroups;// Offset=0x1024 Size=0x4
    unsigned int allocedMarkCount;// Offset=0x1028 Size=0x4
    unsigned int freedMarkCount;// Offset=0x102c Size=0x4
    unsigned char viewmodelMarksCount[4];// Offset=0x1030 Size=0x4
    unsigned short carryIndex;// Offset=0x1034 Size=0x2
    bool noMarks;// Offset=0x1036 Size=0x1
    bool hasCarryIndex;// Offset=0x1037 Size=0x1
};

struct FxMark// Size=0x40 (Id=6050)
{
    unsigned short prevMark;// Offset=0x0 Size=0x2
    unsigned short nextMark;// Offset=0x2 Size=0x2
    int timeDrawn;// Offset=0x4 Size=0x4
    int timeAlloced;// Offset=0x8 Size=0x4
    float origin[3];// Offset=0xc Size=0xc
    float radius;// Offset=0x18 Size=0x4
    float texCoordAxis[3];// Offset=0x1c Size=0xc
    unsigned char nativeColor[4];// Offset=0x28 Size=0x4
    struct Material * material;// Offset=0x2c Size=0x4
    struct GfxMarkContext context;// Offset=0x30 Size=0x7
    unsigned char fadeInfo;// Offset=0x37 Size=0x1
    unsigned char triCount;// Offset=0x38 Size=0x1
    unsigned char __align0[1];// Offset=0x39 Size=0x1
    unsigned short pointCount;// Offset=0x3a Size=0x2
    unsigned short tris;// Offset=0x3c Size=0x2
    unsigned short points;// Offset=0x3e Size=0x2
};

struct FxTriGroup// Size=0x16 (Id=6051)
{
    unsigned short indices[2][3];// Offset=0x0 Size=0xc
    struct GfxMarkContext context;// Offset=0xc Size=0x7
    unsigned char triCount;// Offset=0x13 Size=0x1
    unsigned short next;// Offset=0x14 Size=0x2
};

union FxTriGroupPool// Size=0x18 (Id=6052)
{
    union // Size=0x16 (Id=0)
    {
        struct FxTriGroup triGroup;// Offset=0x0 Size=0x16
        union FxTriGroupPool * nextFreeTriGroup;// Offset=0x0 Size=0x4
    };
};

struct FxCmd// Size=0xc (Id=6053)
{
    struct FxSystem * system;// Offset=0x0 Size=0x4
    int localClientNum;// Offset=0x4 Size=0x4
    long * spawnLock;// Offset=0x8 Size=0x4
};

struct SpawnEffectInfo// Size=0x5c (Id=6054)
{
    struct FxEffectDef * remoteDef;// Offset=0x0 Size=0x4
    struct FxSpatialFrame frame;// Offset=0x4 Size=0x1c
    struct FxSpatialFrame boltOffset;// Offset=0x20 Size=0x1c
    int msecBegin;// Offset=0x3c Size=0x4
    int dobjHandle;// Offset=0x40 Size=0x4
    int boneIndex;// Offset=0x44 Size=0x4
    int runnerSortOrder;// Offset=0x48 Size=0x4
    unsigned short owner;// Offset=0x4c Size=0x2
    unsigned char __align0[2];// Offset=0x4e Size=0x2
    unsigned int markEntnum;// Offset=0x50 Size=0x4
    bool markGivenModelsOnly;// Offset=0x54 Size=0x1
    bool markViewmodel;// Offset=0x55 Size=0x1
    unsigned char __align1[2];// Offset=0x56 Size=0x2
    int markViewmodelClientIndex;// Offset=0x58 Size=0x4
};

enum _unnamed_6055
{
    FXEFFECTFLAG_MARK_VIEWMODEL=1,
    FXEFFECTFLAG_MARK_GIVENMODELSONLY=2
};

struct FxGlassVisInfo// Size=0x4810 (Id=6056)
{
    struct FxGlassPieceVisRef visList[2048];// Offset=0x0 Size=0x4000
    struct GfxLightingInfo lightingInfo[1024];// Offset=0x4000 Size=0x800
    union // Size=0x4808 (Id=0)
    {
        unsigned int visCount;// Offset=0x4800 Size=0x4
        int sorted;// Offset=0x4804 Size=0x4
        unsigned long long packedSortedCount;// Offset=0x4800 Size=0x8
    };
    unsigned int pad[2];// Offset=0x4808 Size=0x8
};

enum _unnamed_6057
{
    FX_EFFECT_NEEDS_LIGHTING=1
};

struct FxSystem// Size=0xad0 (Id=6058)
{
    struct FxCamera camera;// Offset=0x0 Size=0xb0
    struct FxCamera cameraPrev;// Offset=0xb0 Size=0xb0
    struct FxSpriteInfo sprite;// Offset=0x160 Size=0x10
    struct FxEffect * effects;// Offset=0x170 Size=0x4
    struct FxPool<FxElem> * elems;// Offset=0x174 Size=0x4
    struct FxPool<FxTrail> * trails;// Offset=0x178 Size=0x4
    struct FxPool<FxTrailElem> * trailElems;// Offset=0x17c Size=0x4
    struct FxPool<FxBolt> * bolts;// Offset=0x180 Size=0x4
    struct FxPool<FxSparkCloud> * sparkClouds;// Offset=0x184 Size=0x4
    struct FxPool<FxSparkFountain> * sparkFountains;// Offset=0x188 Size=0x4
    struct FxPool<FxSparkFountainCluster> * sparkFountainClusters;// Offset=0x18c Size=0x4
    unsigned short * deferredElems;// Offset=0x190 Size=0x4
    long firstFreeElem;// Offset=0x194 Size=0x4
    long firstFreeTrailElem;// Offset=0x198 Size=0x4
    long firstFreeTrail;// Offset=0x19c Size=0x4
    long firstFreeBolt;// Offset=0x1a0 Size=0x4
    long firstFreeSparkCloud;// Offset=0x1a4 Size=0x4
    long firstFreeSparkFountain;// Offset=0x1a8 Size=0x4
    long firstFreeSparkFountainCluster;// Offset=0x1ac Size=0x4
    long deferredElemCount;// Offset=0x1b0 Size=0x4
    long activeElemCount;// Offset=0x1b4 Size=0x4
    long activeTrailElemCount;// Offset=0x1b8 Size=0x4
    long activeTrailCount;// Offset=0x1bc Size=0x4
    long activeBoltCount;// Offset=0x1c0 Size=0x4
    long activeSparkCloudCount;// Offset=0x1c4 Size=0x4
    long activeSparkFountainCount;// Offset=0x1c8 Size=0x4
    long activeSparkFountainClusterCount;// Offset=0x1cc Size=0x4
    long gfxCloudCount;// Offset=0x1d0 Size=0x4
    struct FxVisState * visState;// Offset=0x1d4 Size=0x4
    struct FxVisState * visStateBufferRead;// Offset=0x1d8 Size=0x4
    struct FxVisState * visStateBufferWrite;// Offset=0x1dc Size=0x4
    long firstActiveEffect;// Offset=0x1e0 Size=0x4
    long firstNewEffect;// Offset=0x1e4 Size=0x4
    long firstFreeEffect;// Offset=0x1e8 Size=0x4
    unsigned short allEffectHandles[1024];// Offset=0x1ec Size=0x800
    long activeSpotLightEffectCount;// Offset=0x9ec Size=0x4
    long activeSpotLightElemCount;// Offset=0x9f0 Size=0x4
    unsigned short activeSpotLightEffectHandle;// Offset=0x9f4 Size=0x2
    unsigned short activeSpotLightElemHandle;// Offset=0x9f6 Size=0x2
    short activeSpotLightBoltDobj;// Offset=0x9f8 Size=0x2
    unsigned char __align0[2];// Offset=0x9fa Size=0x2
    long iteratorCount;// Offset=0x9fc Size=0x4
    int msecNow;// Offset=0xa00 Size=0x4
    long msecDraw;// Offset=0xa04 Size=0x4
    int frameCount;// Offset=0xa08 Size=0x4
    bool isInitialized;// Offset=0xa0c Size=0x1
    bool needsGarbageCollection;// Offset=0xa0d Size=0x1
    bool isArchiving;// Offset=0xa0e Size=0x1
    unsigned char localClientNum;// Offset=0xa0f Size=0x1
    unsigned int restartList[32];// Offset=0xa10 Size=0x80
    struct FxEffect ** restartEffectsList;// Offset=0xa90 Size=0x4
    unsigned int restartCount;// Offset=0xa94 Size=0x4
    unsigned int pad1[14];// Offset=0xa98 Size=0x38
};

struct FxSystemBuffers// Size=0x107a80 (Id=6059)
{
    struct FxEffect effects[1024];// Offset=0x0 Size=0x24000
    struct FxPool<FxElem> elems[2048];// Offset=0x24000 Size=0x14000
    struct FxPool<FxTrail> trails[128];// Offset=0x38000 Size=0x800
    struct FxPool<FxTrailElem> trailElems[2048];// Offset=0x38800 Size=0x10000
    struct FxPool<FxBolt> bolts[255];// Offset=0x48800 Size=0x1fe0
    unsigned char padding1[32];// Offset=0x4a7e0 Size=0x20
    struct FxPool<FxSparkCloud> sparkClouds[32];// Offset=0x4a800 Size=0x10200
    struct FxPool<FxSparkFountain> sparkFountains[64];// Offset=0x5aa00 Size=0x1000
    struct FxPool<FxSparkFountainCluster> sparkFountainClusters[96];// Offset=0x5ba00 Size=0xa8000
    struct FxVisState visState[2];// Offset=0x103a00 Size=0x2020
    unsigned char padding3[96];// Offset=0x105a20 Size=0x60
    unsigned short deferredElems[2048];// Offset=0x105a80 Size=0x1000
    struct FxEffect * restartEffectsList[1024];// Offset=0x106a80 Size=0x1000
};

struct FxGlassPieceVisRef// Size=0x8 (Id=6060)
{
    unsigned short pieceIndex;// Offset=0x0 Size=0x2
    unsigned char drawFlags;// Offset=0x2 Size=0x1
    unsigned char pad;// Offset=0x3 Size=0x1
    float distSq;// Offset=0x4 Size=0x4
};

struct GfxLightingInfo// Size=0x2 (Id=6061)
{
    unsigned char primaryLightIndex;// Offset=0x0 Size=0x1
    unsigned char reflectionProbeIndex;// Offset=0x1 Size=0x1
};

struct FxSpriteInfo// Size=0x650 (Id=6062)
{
    int spriteCount;// Offset=0x0 Size=0x4
    int pad[3];// Offset=0x4 Size=0xc
    struct FxSprite sprites[50];// Offset=0x10 Size=0x640
};

struct GfxDrawGroupSetupFields// Size=0x4 (Id=6063)
{
    struct // Size=0x2 (Id=0)
    {
        unsigned short materialSortedIndex:15;// Offset=0x0 Size=0x2 BitOffset=0x1 BitSize=0xf
        unsigned short useHeroLighting:1;// Offset=0x0 Size=0x2 BitOffset=0x0 BitSize=0x1
    };
    unsigned char sceneLightIndex;// Offset=0x2 Size=0x1
    unsigned char surfType;// Offset=0x3 Size=0x1
};

union GfxDrawGroupSetup// Size=0x4 (Id=6064)
{
    struct GfxDrawGroupSetupFields fields;// Offset=0x0 Size=0x4
    unsigned int packed;// Offset=0x0 Size=0x4
};

struct FxSprite// Size=0x20 (Id=6065)
{
    struct Material * material;// Offset=0x0 Size=0x4
    float pos[3];// Offset=0x4 Size=0xc
    unsigned char rgbaColor[4];// Offset=0x10 Size=0x4
    float radius;// Offset=0x14 Size=0x4
    float minScreenRadius;// Offset=0x18 Size=0x4
    int flags;// Offset=0x1c Size=0x4
};

struct GfxCodeSurfList// Size=0x8 (Id=6066)
{
    struct GfxCodeSurf * surfs;// Offset=0x0 Size=0x4
    unsigned int count;// Offset=0x4 Size=0x4
};

struct GfxCodeSurf// Size=0x10 (Id=6067)
{
    union GfxDrawGroupSetup drawGroup;// Offset=0x0 Size=0x4
    unsigned int triCount;// Offset=0x4 Size=0x4
    unsigned short * indices;// Offset=0x8 Size=0x4
    unsigned short argOffset;// Offset=0xc Size=0x2
    unsigned short argCount;// Offset=0xe Size=0x2
};

struct FxGenerateVertsCmd// Size=0x48 (Id=6068)
{
    struct FxSystem * system;// Offset=0x0 Size=0x4
    struct FxBeamInfo * beamInfo;// Offset=0x4 Size=0x4
    struct FxPostLightInfo * postLightInfo;// Offset=0x8 Size=0x4
    struct FxSpriteInfo * spriteInfo;// Offset=0xc Size=0x4
    struct FxMarksSystem * marksSystem;// Offset=0x10 Size=0x4
    int localClientNum;// Offset=0x14 Size=0x4
    float vieworg[3];// Offset=0x18 Size=0xc
    float viewaxis[3][3];// Offset=0x24 Size=0x24
};

struct FxSparkFountainDef// Size=0x34 (Id=6069)
{
    float gravity;// Offset=0x0 Size=0x4
    float bounceFrac;// Offset=0x4 Size=0x4
    float bounceRand;// Offset=0x8 Size=0x4
    float sparkSpacing;// Offset=0xc Size=0x4
    float sparkLength;// Offset=0x10 Size=0x4
    int sparkCount;// Offset=0x14 Size=0x4
    float loopTime;// Offset=0x18 Size=0x4
    float velMin;// Offset=0x1c Size=0x4
    float velMax;// Offset=0x20 Size=0x4
    float velConeFrac;// Offset=0x24 Size=0x4
    float restSpeed;// Offset=0x28 Size=0x4
    float boostTime;// Offset=0x2c Size=0x4
    float boostFactor;// Offset=0x30 Size=0x4
};

enum FindSlotResult
{
    FINDSLOT_FOUND_ALLOCED=0,
    FINDSLOT_FOUND_CACHED=1,
    FINDSLOT_FOUND_NONE_AVAILABLE=2
};

struct GfxSparkSurfFields// Size=0x4 (Id=6071)
{
    unsigned short materialSortedIndex;// Offset=0x0 Size=0x2
    unsigned short sparkDataIndex;// Offset=0x2 Size=0x2
};

struct FxSystem// Size=0xad0 (Id=6072)
{
    struct FxCamera camera;// Offset=0x0 Size=0xb0
    struct FxCamera cameraPrev;// Offset=0xb0 Size=0xb0
    struct FxSpriteInfo sprite;// Offset=0x160 Size=0x10
    struct FxEffect * effects;// Offset=0x170 Size=0x4
    struct FxPool<FxElem> * elems;// Offset=0x174 Size=0x4
    struct FxPool<FxTrail> * trails;// Offset=0x178 Size=0x4
    struct FxPool<FxTrailElem> * trailElems;// Offset=0x17c Size=0x4
    struct FxPool<FxBolt> * bolts;// Offset=0x180 Size=0x4
    struct FxPool<FxSparkCloud> * sparkClouds;// Offset=0x184 Size=0x4
    struct FxPool<FxSparkFountain> * sparkFountains;// Offset=0x188 Size=0x4
    struct FxPool<FxSparkFountainCluster> * sparkFountainClusters;// Offset=0x18c Size=0x4
    unsigned short * deferredElems;// Offset=0x190 Size=0x4
    long firstFreeElem;// Offset=0x194 Size=0x4
    long firstFreeTrailElem;// Offset=0x198 Size=0x4
    long firstFreeTrail;// Offset=0x19c Size=0x4
    long firstFreeBolt;// Offset=0x1a0 Size=0x4
    long firstFreeSparkCloud;// Offset=0x1a4 Size=0x4
    long firstFreeSparkFountain;// Offset=0x1a8 Size=0x4
    long firstFreeSparkFountainCluster;// Offset=0x1ac Size=0x4
    long deferredElemCount;// Offset=0x1b0 Size=0x4
    long activeElemCount;// Offset=0x1b4 Size=0x4
    long activeTrailElemCount;// Offset=0x1b8 Size=0x4
    long activeTrailCount;// Offset=0x1bc Size=0x4
    long activeBoltCount;// Offset=0x1c0 Size=0x4
    long activeSparkCloudCount;// Offset=0x1c4 Size=0x4
    long activeSparkFountainCount;// Offset=0x1c8 Size=0x4
    long activeSparkFountainClusterCount;// Offset=0x1cc Size=0x4
    long gfxCloudCount;// Offset=0x1d0 Size=0x4
    struct FxVisState * visState;// Offset=0x1d4 Size=0x4
    struct FxVisState * visStateBufferRead;// Offset=0x1d8 Size=0x4
    struct FxVisState * visStateBufferWrite;// Offset=0x1dc Size=0x4
    long firstActiveEffect;// Offset=0x1e0 Size=0x4
    long firstNewEffect;// Offset=0x1e4 Size=0x4
    long firstFreeEffect;// Offset=0x1e8 Size=0x4
    unsigned short allEffectHandles[1024];// Offset=0x1ec Size=0x800
    long activeSpotLightEffectCount;// Offset=0x9ec Size=0x4
    long activeSpotLightElemCount;// Offset=0x9f0 Size=0x4
    unsigned short activeSpotLightEffectHandle;// Offset=0x9f4 Size=0x2
    unsigned short activeSpotLightElemHandle;// Offset=0x9f6 Size=0x2
    short activeSpotLightBoltDobj;// Offset=0x9f8 Size=0x2
    unsigned char __align0[2];// Offset=0x9fa Size=0x2
    long iteratorCount;// Offset=0x9fc Size=0x4
    int msecNow;// Offset=0xa00 Size=0x4
    long msecDraw;// Offset=0xa04 Size=0x4
    int frameCount;// Offset=0xa08 Size=0x4
    bool isInitialized;// Offset=0xa0c Size=0x1
    bool needsGarbageCollection;// Offset=0xa0d Size=0x1
    bool isArchiving;// Offset=0xa0e Size=0x1
    unsigned char localClientNum;// Offset=0xa0f Size=0x1
    unsigned int restartList[32];// Offset=0xa10 Size=0x80
    struct FxEffect ** restartEffectsList;// Offset=0xa90 Size=0x4
    unsigned int restartCount;// Offset=0xa94 Size=0x4
    unsigned int pad1[14];// Offset=0xa98 Size=0x38
};

struct GfxSparkSurfList// Size=0x8 (Id=6073)
{
    union GfxSparkSurf * surfs;// Offset=0x0 Size=0x4
    unsigned int count;// Offset=0x4 Size=0x4
};

struct FxElemPreVisualState// Size=0x1c (Id=6074)
{
    float sampleLerp;// Offset=0x0 Size=0x4
    float sampleLerpInv;// Offset=0x4 Size=0x4
    struct FxElemDef * elemDef;// Offset=0x8 Size=0x4
    struct FxEffect * effect;// Offset=0xc Size=0x4
    struct FxElemVisStateSample * refState;// Offset=0x10 Size=0x4
    int randomSeed;// Offset=0x14 Size=0x4
    unsigned int distanceFade;// Offset=0x18 Size=0x4
};

union GfxSparkSurf// Size=0x4 (Id=6075)
{
    struct GfxSparkSurfFields fields;// Offset=0x0 Size=0x4
    unsigned int packed;// Offset=0x0 Size=0x4
};

struct FxElem// Size=0x28 (Id=6076)
{
    union // Size=0x24 (Id=0)
    {
        const int HANDLE_SCALE;// Offset=0x0 Size=0x4
        const int POOL_SIZE;// Offset=0x0 Size=0x4
        unsigned char defIndex;// Offset=0x0 Size=0x1
        unsigned char sequence;// Offset=0x1 Size=0x1
        unsigned char atRestFraction;// Offset=0x2 Size=0x1
        unsigned char emitResidual;// Offset=0x3 Size=0x1
        unsigned short nextElemHandleInEffect;// Offset=0x4 Size=0x2
        unsigned short prevElemHandleInEffect;// Offset=0x6 Size=0x2
        int msecBegin;// Offset=0x8 Size=0x4
        float baseVel[3];// Offset=0xc Size=0xc
        int physObjId;// Offset=0x18 Size=0x4
        float origin[3];// Offset=0x18 Size=0xc
        union <unnamed-type-u>// Size=0x2 (Id=62897)
        {
            unsigned short lightingHandle;// Offset=0x0 Size=0x2
            unsigned short sparkCloudHandle;// Offset=0x0 Size=0x2
            unsigned short sparkFountainHandle;// Offset=0x0 Size=0x2
        };
        unsigned char __align0[34];// Offset=0x2 Size=0x22
    };
    union FxElem::<unnamed-type-u> u;// Offset=0x24 Size=0x2
};

struct FxDrawState// Size=0xac (Id=6077)
{
    struct FxSystem * system;// Offset=0x0 Size=0x4
    struct FxEffect * effect;// Offset=0x4 Size=0x4
    struct FxElem * elem;// Offset=0x8 Size=0x4
    struct FxElemDef * elemDef;// Offset=0xc Size=0x4
    struct GfxCodeSurfGlob * codeSurfGlob;// Offset=0x10 Size=0x4
    struct orientation_t orient;// Offset=0x14 Size=0x30
    struct FxCamera * camera;// Offset=0x44 Size=0x4
    int randomSeed;// Offset=0x48 Size=0x4
    float msecLifeSpan;// Offset=0x4c Size=0x4
    float msecElapsed;// Offset=0x50 Size=0x4
    float normTimeUpdateEnd;// Offset=0x54 Size=0x4
    float posWorld[3];// Offset=0x58 Size=0xc
    float velDirWorld[3];// Offset=0x64 Size=0xc
    struct FxElemVisualState visState;// Offset=0x70 Size=0x18
    struct FxElemPreVisualState preVisState;// Offset=0x88 Size=0x1c
    float physicsLerpFrac;// Offset=0xa4 Size=0x4
    int msecDraw;// Offset=0xa8 Size=0x4
};

struct GfxPosTexVertex// Size=0x14 (Id=6078)
{
    float xyz[3];// Offset=0x0 Size=0xc
    float texCoord[2];// Offset=0xc Size=0x8
};

struct FxInsertSortElem// Size=0x14 (Id=6079)
{
    int defSortOrder;// Offset=0x0 Size=0x4
    float distToCamSq;// Offset=0x4 Size=0x4
    int msecBegin;// Offset=0x8 Size=0x4
    int defIndex;// Offset=0xc Size=0x4
    unsigned char elemType;// Offset=0x10 Size=0x1
};

struct FxInsertSortElem// Size=0x14 (Id=6080)
{
    int defSortOrder;// Offset=0x0 Size=0x4
    float distToCamSq;// Offset=0x4 Size=0x4
    int msecBegin;// Offset=0x8 Size=0x4
    int defIndex;// Offset=0xc Size=0x4
    unsigned char elemType;// Offset=0x10 Size=0x1
};

struct FxSystem// Size=0xad0 (Id=6081)
{
    struct FxCamera camera;// Offset=0x0 Size=0xb0
    struct FxCamera cameraPrev;// Offset=0xb0 Size=0xb0
    struct FxSpriteInfo sprite;// Offset=0x160 Size=0x10
    struct FxEffect * effects;// Offset=0x170 Size=0x4
    struct FxPool<FxElem> * elems;// Offset=0x174 Size=0x4
    struct FxPool<FxTrail> * trails;// Offset=0x178 Size=0x4
    struct FxPool<FxTrailElem> * trailElems;// Offset=0x17c Size=0x4
    struct FxPool<FxBolt> * bolts;// Offset=0x180 Size=0x4
    struct FxPool<FxSparkCloud> * sparkClouds;// Offset=0x184 Size=0x4
    struct FxPool<FxSparkFountain> * sparkFountains;// Offset=0x188 Size=0x4
    struct FxPool<FxSparkFountainCluster> * sparkFountainClusters;// Offset=0x18c Size=0x4
    unsigned short * deferredElems;// Offset=0x190 Size=0x4
    long firstFreeElem;// Offset=0x194 Size=0x4
    long firstFreeTrailElem;// Offset=0x198 Size=0x4
    long firstFreeTrail;// Offset=0x19c Size=0x4
    long firstFreeBolt;// Offset=0x1a0 Size=0x4
    long firstFreeSparkCloud;// Offset=0x1a4 Size=0x4
    long firstFreeSparkFountain;// Offset=0x1a8 Size=0x4
    long firstFreeSparkFountainCluster;// Offset=0x1ac Size=0x4
    long deferredElemCount;// Offset=0x1b0 Size=0x4
    long activeElemCount;// Offset=0x1b4 Size=0x4
    long activeTrailElemCount;// Offset=0x1b8 Size=0x4
    long activeTrailCount;// Offset=0x1bc Size=0x4
    long activeBoltCount;// Offset=0x1c0 Size=0x4
    long activeSparkCloudCount;// Offset=0x1c4 Size=0x4
    long activeSparkFountainCount;// Offset=0x1c8 Size=0x4
    long activeSparkFountainClusterCount;// Offset=0x1cc Size=0x4
    long gfxCloudCount;// Offset=0x1d0 Size=0x4
    struct FxVisState * visState;// Offset=0x1d4 Size=0x4
    struct FxVisState * visStateBufferRead;// Offset=0x1d8 Size=0x4
    struct FxVisState * visStateBufferWrite;// Offset=0x1dc Size=0x4
    long firstActiveEffect;// Offset=0x1e0 Size=0x4
    long firstNewEffect;// Offset=0x1e4 Size=0x4
    long firstFreeEffect;// Offset=0x1e8 Size=0x4
    unsigned short allEffectHandles[1024];// Offset=0x1ec Size=0x800
    long activeSpotLightEffectCount;// Offset=0x9ec Size=0x4
    long activeSpotLightElemCount;// Offset=0x9f0 Size=0x4
    unsigned short activeSpotLightEffectHandle;// Offset=0x9f4 Size=0x2
    unsigned short activeSpotLightElemHandle;// Offset=0x9f6 Size=0x2
    short activeSpotLightBoltDobj;// Offset=0x9f8 Size=0x2
    unsigned char __align0[2];// Offset=0x9fa Size=0x2
    long iteratorCount;// Offset=0x9fc Size=0x4
    int msecNow;// Offset=0xa00 Size=0x4
    long msecDraw;// Offset=0xa04 Size=0x4
    int frameCount;// Offset=0xa08 Size=0x4
    bool isInitialized;// Offset=0xa0c Size=0x1
    bool needsGarbageCollection;// Offset=0xa0d Size=0x1
    bool isArchiving;// Offset=0xa0e Size=0x1
    unsigned char localClientNum;// Offset=0xa0f Size=0x1
    unsigned int restartList[32];// Offset=0xa10 Size=0x80
    struct FxEffect ** restartEffectsList;// Offset=0xa90 Size=0x4
    unsigned int restartCount;// Offset=0xa94 Size=0x4
    unsigned int pad1[14];// Offset=0xa98 Size=0x38
};

struct FxProfileEntry// Size=0x20 (Id=6082)
{
    struct FxEffectDef * effectDef;// Offset=0x0 Size=0x4
    int latestMsecBegin;// Offset=0x4 Size=0x4
    int effectCount;// Offset=0x8 Size=0x4
    int activeElemCount;// Offset=0xc Size=0x4
    int pendingElemCount;// Offset=0x10 Size=0x4
    unsigned short boltCount;// Offset=0x14 Size=0x2
    unsigned short trailCount;// Offset=0x16 Size=0x2
    unsigned short activeTrailElemCount;// Offset=0x18 Size=0x2
    unsigned short pendingTrailElemCount;// Offset=0x1a Size=0x2
    unsigned short sparkFountainCount;// Offset=0x1c Size=0x2
    unsigned short sparkFountainClusterCount;// Offset=0x1e Size=0x2
};

struct FxSystem// Size=0xad0 (Id=6083)
{
    struct FxCamera camera;// Offset=0x0 Size=0xb0
    struct FxCamera cameraPrev;// Offset=0xb0 Size=0xb0
    struct FxSpriteInfo sprite;// Offset=0x160 Size=0x10
    struct FxEffect * effects;// Offset=0x170 Size=0x4
    struct FxPool<FxElem> * elems;// Offset=0x174 Size=0x4
    struct FxPool<FxTrail> * trails;// Offset=0x178 Size=0x4
    struct FxPool<FxTrailElem> * trailElems;// Offset=0x17c Size=0x4
    struct FxPool<FxBolt> * bolts;// Offset=0x180 Size=0x4
    struct FxPool<FxSparkCloud> * sparkClouds;// Offset=0x184 Size=0x4
    struct FxPool<FxSparkFountain> * sparkFountains;// Offset=0x188 Size=0x4
    struct FxPool<FxSparkFountainCluster> * sparkFountainClusters;// Offset=0x18c Size=0x4
    unsigned short * deferredElems;// Offset=0x190 Size=0x4
    long firstFreeElem;// Offset=0x194 Size=0x4
    long firstFreeTrailElem;// Offset=0x198 Size=0x4
    long firstFreeTrail;// Offset=0x19c Size=0x4
    long firstFreeBolt;// Offset=0x1a0 Size=0x4
    long firstFreeSparkCloud;// Offset=0x1a4 Size=0x4
    long firstFreeSparkFountain;// Offset=0x1a8 Size=0x4
    long firstFreeSparkFountainCluster;// Offset=0x1ac Size=0x4
    long deferredElemCount;// Offset=0x1b0 Size=0x4
    long activeElemCount;// Offset=0x1b4 Size=0x4
    long activeTrailElemCount;// Offset=0x1b8 Size=0x4
    long activeTrailCount;// Offset=0x1bc Size=0x4
    long activeBoltCount;// Offset=0x1c0 Size=0x4
    long activeSparkCloudCount;// Offset=0x1c4 Size=0x4
    long activeSparkFountainCount;// Offset=0x1c8 Size=0x4
    long activeSparkFountainClusterCount;// Offset=0x1cc Size=0x4
    long gfxCloudCount;// Offset=0x1d0 Size=0x4
    struct FxVisState * visState;// Offset=0x1d4 Size=0x4
    struct FxVisState * visStateBufferRead;// Offset=0x1d8 Size=0x4
    struct FxVisState * visStateBufferWrite;// Offset=0x1dc Size=0x4
    long firstActiveEffect;// Offset=0x1e0 Size=0x4
    long firstNewEffect;// Offset=0x1e4 Size=0x4
    long firstFreeEffect;// Offset=0x1e8 Size=0x4
    unsigned short allEffectHandles[1024];// Offset=0x1ec Size=0x800
    long activeSpotLightEffectCount;// Offset=0x9ec Size=0x4
    long activeSpotLightElemCount;// Offset=0x9f0 Size=0x4
    unsigned short activeSpotLightEffectHandle;// Offset=0x9f4 Size=0x2
    unsigned short activeSpotLightElemHandle;// Offset=0x9f6 Size=0x2
    short activeSpotLightBoltDobj;// Offset=0x9f8 Size=0x2
    unsigned char __align0[2];// Offset=0x9fa Size=0x2
    long iteratorCount;// Offset=0x9fc Size=0x4
    int msecNow;// Offset=0xa00 Size=0x4
    long msecDraw;// Offset=0xa04 Size=0x4
    int frameCount;// Offset=0xa08 Size=0x4
    bool isInitialized;// Offset=0xa0c Size=0x1
    bool needsGarbageCollection;// Offset=0xa0d Size=0x1
    bool isArchiving;// Offset=0xa0e Size=0x1
    unsigned char localClientNum;// Offset=0xa0f Size=0x1
    unsigned int restartList[32];// Offset=0xa10 Size=0x80
    struct FxEffect ** restartEffectsList;// Offset=0xa90 Size=0x4
    unsigned int restartCount;// Offset=0xa94 Size=0x4
    unsigned int pad1[14];// Offset=0xa98 Size=0x38
};

struct FxProfileEntry// Size=0x20 (Id=6084)
{
    struct FxEffectDef * effectDef;// Offset=0x0 Size=0x4
    int latestMsecBegin;// Offset=0x4 Size=0x4
    int effectCount;// Offset=0x8 Size=0x4
    int activeElemCount;// Offset=0xc Size=0x4
    int pendingElemCount;// Offset=0x10 Size=0x4
    unsigned short boltCount;// Offset=0x14 Size=0x2
    unsigned short trailCount;// Offset=0x16 Size=0x2
    unsigned short activeTrailElemCount;// Offset=0x18 Size=0x2
    unsigned short pendingTrailElemCount;// Offset=0x1a Size=0x2
    unsigned short sparkFountainCount;// Offset=0x1c Size=0x2
    unsigned short sparkFountainClusterCount;// Offset=0x1e Size=0x2
};

struct FxPostLightInfo// Size=0xd84 (Id=6085)
{
    struct FxPostLight postLights[96];// Offset=0x0 Size=0xd80
    int postLightCount;// Offset=0xd80 Size=0x4
};

struct FxSystem// Size=0xad0 (Id=6086)
{
    struct FxCamera camera;// Offset=0x0 Size=0xb0
    struct FxCamera cameraPrev;// Offset=0xb0 Size=0xb0
    struct FxSpriteInfo sprite;// Offset=0x160 Size=0x10
    struct FxEffect * effects;// Offset=0x170 Size=0x4
    struct FxPool<FxElem> * elems;// Offset=0x174 Size=0x4
    struct FxPool<FxTrail> * trails;// Offset=0x178 Size=0x4
    struct FxPool<FxTrailElem> * trailElems;// Offset=0x17c Size=0x4
    struct FxPool<FxBolt> * bolts;// Offset=0x180 Size=0x4
    struct FxPool<FxSparkCloud> * sparkClouds;// Offset=0x184 Size=0x4
    struct FxPool<FxSparkFountain> * sparkFountains;// Offset=0x188 Size=0x4
    struct FxPool<FxSparkFountainCluster> * sparkFountainClusters;// Offset=0x18c Size=0x4
    unsigned short * deferredElems;// Offset=0x190 Size=0x4
    long firstFreeElem;// Offset=0x194 Size=0x4
    long firstFreeTrailElem;// Offset=0x198 Size=0x4
    long firstFreeTrail;// Offset=0x19c Size=0x4
    long firstFreeBolt;// Offset=0x1a0 Size=0x4
    long firstFreeSparkCloud;// Offset=0x1a4 Size=0x4
    long firstFreeSparkFountain;// Offset=0x1a8 Size=0x4
    long firstFreeSparkFountainCluster;// Offset=0x1ac Size=0x4
    long deferredElemCount;// Offset=0x1b0 Size=0x4
    long activeElemCount;// Offset=0x1b4 Size=0x4
    long activeTrailElemCount;// Offset=0x1b8 Size=0x4
    long activeTrailCount;// Offset=0x1bc Size=0x4
    long activeBoltCount;// Offset=0x1c0 Size=0x4
    long activeSparkCloudCount;// Offset=0x1c4 Size=0x4
    long activeSparkFountainCount;// Offset=0x1c8 Size=0x4
    long activeSparkFountainClusterCount;// Offset=0x1cc Size=0x4
    long gfxCloudCount;// Offset=0x1d0 Size=0x4
    struct FxVisState * visState;// Offset=0x1d4 Size=0x4
    struct FxVisState * visStateBufferRead;// Offset=0x1d8 Size=0x4
    struct FxVisState * visStateBufferWrite;// Offset=0x1dc Size=0x4
    long firstActiveEffect;// Offset=0x1e0 Size=0x4
    long firstNewEffect;// Offset=0x1e4 Size=0x4
    long firstFreeEffect;// Offset=0x1e8 Size=0x4
    unsigned short allEffectHandles[1024];// Offset=0x1ec Size=0x800
    long activeSpotLightEffectCount;// Offset=0x9ec Size=0x4
    long activeSpotLightElemCount;// Offset=0x9f0 Size=0x4
    unsigned short activeSpotLightEffectHandle;// Offset=0x9f4 Size=0x2
    unsigned short activeSpotLightElemHandle;// Offset=0x9f6 Size=0x2
    short activeSpotLightBoltDobj;// Offset=0x9f8 Size=0x2
    unsigned char __align0[2];// Offset=0x9fa Size=0x2
    long iteratorCount;// Offset=0x9fc Size=0x4
    int msecNow;// Offset=0xa00 Size=0x4
    long msecDraw;// Offset=0xa04 Size=0x4
    int frameCount;// Offset=0xa08 Size=0x4
    bool isInitialized;// Offset=0xa0c Size=0x1
    bool needsGarbageCollection;// Offset=0xa0d Size=0x1
    bool isArchiving;// Offset=0xa0e Size=0x1
    unsigned char localClientNum;// Offset=0xa0f Size=0x1
    unsigned int restartList[32];// Offset=0xa10 Size=0x80
    struct FxEffect ** restartEffectsList;// Offset=0xa90 Size=0x4
    unsigned int restartCount;// Offset=0xa94 Size=0x4
    unsigned int pad1[14];// Offset=0xa98 Size=0x38
};

struct FxPostLight// Size=0x24 (Id=6087)
{
    float begin[3];// Offset=0x0 Size=0xc
    float end[3];// Offset=0xc Size=0xc
    float radius;// Offset=0x18 Size=0x4
    union GfxColor color;// Offset=0x1c Size=0x4
    struct Material * material;// Offset=0x20 Size=0x4
};

struct FxMarkTri// Size=0xe (Id=6088)
{
    unsigned short indices[3];// Offset=0x0 Size=0x6
    struct GfxMarkContext context;// Offset=0x6 Size=0x7
};

struct FxMarkPoint// Size=0x20 (Id=6089)
{
    float xyz[3];// Offset=0x0 Size=0xc
    float lmapCoord[2];// Offset=0xc Size=0x8
    float normal[3];// Offset=0x14 Size=0xc
};

struct GfxMarkContext// Size=0x7 (Id=6090)
{
    union // Size=0x2 (Id=0)
    {
        unsigned char modelType;// Offset=0x0 Size=0x1
        unsigned char lmapIndex;// Offset=0x1 Size=0x1
        unsigned char boneIndex;// Offset=0x1 Size=0x1
        union <unnamed-type-typeSpecificIndex>// Size=0x2 (Id=50251)
        {
            unsigned char modelIndex[2];// Offset=0x0 Size=0x2
            unsigned char entnum[2];// Offset=0x0 Size=0x2
            unsigned char glassPieceIndex[2];// Offset=0x0 Size=0x2
            unsigned char lightHandle[2];// Offset=0x0 Size=0x2
        };
    };
    union GfxMarkContext::<unnamed-type-typeSpecificIndex> typeSpecificIndex;// Offset=0x2 Size=0x2
    union // Size=0x1 (Id=0)
    {
        unsigned char surfIndex;// Offset=0x4 Size=0x1
        unsigned char entModelBits;// Offset=0x4 Size=0x1
    };
    unsigned char primaryLightIndex;// Offset=0x5 Size=0x1
    unsigned char reflectionProbeIndex;// Offset=0x6 Size=0x1
};

struct FxMarksSystem// Size=0x1038 (Id=6091)
{
    int time;// Offset=0x0 Size=0x4
    unsigned short firstFreeMarkHandle;// Offset=0x4 Size=0x2
    unsigned short firstActiveWorldMarkHandle;// Offset=0x6 Size=0x2
    unsigned short firstGlassMarkHandle;// Offset=0x8 Size=0x2
    unsigned short entFirstMarkHandles[2048];// Offset=0xa Size=0x1000
    unsigned short firstViewmodelMarkHandle[4];// Offset=0x100a Size=0x8
    unsigned char __align0[2];// Offset=0x1012 Size=0x2
    union FxTriGroupPool * firstFreeTriGroup;// Offset=0x1014 Size=0x4
    union FxPointGroupPool * firstFreePointGroup;// Offset=0x1018 Size=0x4
    struct FxMark * marks;// Offset=0x101c Size=0x4
    union FxTriGroupPool * triGroups;// Offset=0x1020 Size=0x4
    union FxPointGroupPool * pointGroups;// Offset=0x1024 Size=0x4
    unsigned int allocedMarkCount;// Offset=0x1028 Size=0x4
    unsigned int freedMarkCount;// Offset=0x102c Size=0x4
    unsigned char viewmodelMarksCount[4];// Offset=0x1030 Size=0x4
    unsigned short carryIndex;// Offset=0x1034 Size=0x2
    bool noMarks;// Offset=0x1036 Size=0x1
    bool hasCarryIndex;// Offset=0x1037 Size=0x1
};

struct FxMark// Size=0x40 (Id=6092)
{
    unsigned short prevMark;// Offset=0x0 Size=0x2
    unsigned short nextMark;// Offset=0x2 Size=0x2
    int timeDrawn;// Offset=0x4 Size=0x4
    int timeAlloced;// Offset=0x8 Size=0x4
    float origin[3];// Offset=0xc Size=0xc
    float radius;// Offset=0x18 Size=0x4
    float texCoordAxis[3];// Offset=0x1c Size=0xc
    unsigned char nativeColor[4];// Offset=0x28 Size=0x4
    struct Material * material;// Offset=0x2c Size=0x4
    struct GfxMarkContext context;// Offset=0x30 Size=0x7
    unsigned char fadeInfo;// Offset=0x37 Size=0x1
    unsigned char triCount;// Offset=0x38 Size=0x1
    unsigned char __align0[1];// Offset=0x39 Size=0x1
    unsigned short pointCount;// Offset=0x3a Size=0x2
    unsigned short tris;// Offset=0x3c Size=0x2
    unsigned short points;// Offset=0x3e Size=0x2
};

struct FxActiveMarkSurf// Size=0x14 (Id=6093)
{
    struct Material * material;// Offset=0x0 Size=0x4
    struct GfxMarkContext context;// Offset=0x4 Size=0x7
    unsigned char __align0[1];// Offset=0xb Size=0x1
    int indexCount;// Offset=0xc Size=0x4
    unsigned short * indices;// Offset=0x10 Size=0x4
};

struct GfxPlacement// Size=0x1c (Id=6094)
{
    float quat[4];// Offset=0x0 Size=0x10
    float origin[3];// Offset=0x10 Size=0xc
};

struct GfxScaledPlacement// Size=0x20 (Id=6095)
{
    struct GfxPlacement base;// Offset=0x0 Size=0x1c
    float scale;// Offset=0x1c Size=0x4
};

struct FxActiveMarkSurf// Size=0x14 (Id=6096)
{
    struct Material * material;// Offset=0x0 Size=0x4
    struct GfxMarkContext context;// Offset=0x4 Size=0x7
    unsigned char __align0[1];// Offset=0xb Size=0x1
    int indexCount;// Offset=0xc Size=0x4
    unsigned short * indices;// Offset=0x10 Size=0x4
};

enum MarkFragmentsAgainstEnum
{
    MARK_FRAGMENTS_AGAINST_BRUSHES=0,
    MARK_FRAGMENTS_AGAINST_MODELS=1
};

struct MarkGenContext// Size=0x18 (Id=6098)
{
    int localClientNum;// Offset=0x0 Size=0x4
    struct Material * material;// Offset=0x4 Size=0x4
    float radius;// Offset=0x8 Size=0x4
    unsigned char * nativeColor;// Offset=0xc Size=0x4
    unsigned char fadeInfo;// Offset=0x10 Size=0x1
    unsigned char __align0[3];// Offset=0x11 Size=0x3
    int viewmodelClientIndex;// Offset=0x14 Size=0x4
};

struct R_CollInfo// Size=0x9c (Id=6099)
{
    unsigned int * bspSetBits;// Offset=0x0 Size=0x4
    unsigned int * smodelSetBits;// Offset=0x4 Size=0x4
    struct Sphere sphere;// Offset=0x8 Size=0x14
    unsigned int cellBits[32];// Offset=0x1c Size=0x80
};

struct MarkInfo// Size=0x450 (Id=6100)
{
    struct Sphere bounds;// Offset=0x0 Size=0x14
    unsigned int * bspSetBits;// Offset=0x14 Size=0x4
    unsigned int * smodelSetBits;// Offset=0x18 Size=0x4
    float localOrigin[3];// Offset=0x1c Size=0xc
    float localTexCoordAxis[3];// Offset=0x28 Size=0xc
    float axis[3][3];// Offset=0x34 Size=0x24
    struct Material * material;// Offset=0x58 Size=0x4
    int maxTris;// Offset=0x5c Size=0x4
    struct FxMarkTri * tris;// Offset=0x60 Size=0x4
    int maxPoints;// Offset=0x64 Size=0x4
    struct FxMarkPoint * points;// Offset=0x68 Size=0x4
    float planes[6][4];// Offset=0x6c Size=0x60
    float viewOffset[3];// Offset=0xcc Size=0xc
    bool markHasLightmap;// Offset=0xd8 Size=0x1
    bool markHasReflection;// Offset=0xd9 Size=0x1
    unsigned char __align0[2];// Offset=0xda Size=0x2
    enum MarkFragmentsAgainstEnum markAgainst;// Offset=0xdc Size=0x4
    unsigned short smodelsCollided[32];// Offset=0xe0 Size=0x40
    int smodelCollidedCount;// Offset=0x120 Size=0x4
    struct MarkInfoCollidedDObj sceneDObjsCollided[32];// Offset=0x124 Size=0x180
    int sceneDObjCollidedCount;// Offset=0x2a4 Size=0x4
    struct MarkInfoCollidedBModel sceneBModelsCollided[32];// Offset=0x2a8 Size=0x180
    int sceneBModelCollidedCount;// Offset=0x428 Size=0x4
    struct MarkInfoCollidedDObj viewmodelDObjsCollided[1];// Offset=0x42c Size=0xc
    int viewmodelDObjsCollidedCount;// Offset=0x438 Size=0x4
    int viewmodelClientIndex;// Offset=0x43c Size=0x4
    int usedTriCount;// Offset=0x440 Size=0x4
    int usedPointCount;// Offset=0x444 Size=0x4
    void  ( * callback)(void * ,int ,struct FxMarkTri * ,int ,struct FxMarkPoint * ,float * ,float * );// Offset=0x448 Size=0x4
    void * callbackContext;// Offset=0x44c Size=0x4
};

struct GfxMarkSurfLightingFields// Size=0x4 (Id=6101)
{
    unsigned char lmapIndex;// Offset=0x0 Size=0x1
    unsigned char reflectionProbeIndex;// Offset=0x1 Size=0x1
    unsigned short modelIndex;// Offset=0x2 Size=0x2
};

union GfxMarkSurfLighting// Size=0x4 (Id=6102)
{
    struct GfxMarkSurfLightingFields fields;// Offset=0x0 Size=0x4
    unsigned int packed;// Offset=0x0 Size=0x4
};

struct FxSystem// Size=0xad0 (Id=6103)
{
    struct FxCamera camera;// Offset=0x0 Size=0xb0
    struct FxCamera cameraPrev;// Offset=0xb0 Size=0xb0
    struct FxSpriteInfo sprite;// Offset=0x160 Size=0x10
    struct FxEffect * effects;// Offset=0x170 Size=0x4
    struct FxPool<FxElem> * elems;// Offset=0x174 Size=0x4
    struct FxPool<FxTrail> * trails;// Offset=0x178 Size=0x4
    struct FxPool<FxTrailElem> * trailElems;// Offset=0x17c Size=0x4
    struct FxPool<FxBolt> * bolts;// Offset=0x180 Size=0x4
    struct FxPool<FxSparkCloud> * sparkClouds;// Offset=0x184 Size=0x4
    struct FxPool<FxSparkFountain> * sparkFountains;// Offset=0x188 Size=0x4
    struct FxPool<FxSparkFountainCluster> * sparkFountainClusters;// Offset=0x18c Size=0x4
    unsigned short * deferredElems;// Offset=0x190 Size=0x4
    long firstFreeElem;// Offset=0x194 Size=0x4
    long firstFreeTrailElem;// Offset=0x198 Size=0x4
    long firstFreeTrail;// Offset=0x19c Size=0x4
    long firstFreeBolt;// Offset=0x1a0 Size=0x4
    long firstFreeSparkCloud;// Offset=0x1a4 Size=0x4
    long firstFreeSparkFountain;// Offset=0x1a8 Size=0x4
    long firstFreeSparkFountainCluster;// Offset=0x1ac Size=0x4
    long deferredElemCount;// Offset=0x1b0 Size=0x4
    long activeElemCount;// Offset=0x1b4 Size=0x4
    long activeTrailElemCount;// Offset=0x1b8 Size=0x4
    long activeTrailCount;// Offset=0x1bc Size=0x4
    long activeBoltCount;// Offset=0x1c0 Size=0x4
    long activeSparkCloudCount;// Offset=0x1c4 Size=0x4
    long activeSparkFountainCount;// Offset=0x1c8 Size=0x4
    long activeSparkFountainClusterCount;// Offset=0x1cc Size=0x4
    long gfxCloudCount;// Offset=0x1d0 Size=0x4
    struct FxVisState * visState;// Offset=0x1d4 Size=0x4
    struct FxVisState * visStateBufferRead;// Offset=0x1d8 Size=0x4
    struct FxVisState * visStateBufferWrite;// Offset=0x1dc Size=0x4
    long firstActiveEffect;// Offset=0x1e0 Size=0x4
    long firstNewEffect;// Offset=0x1e4 Size=0x4
    long firstFreeEffect;// Offset=0x1e8 Size=0x4
    unsigned short allEffectHandles[1024];// Offset=0x1ec Size=0x800
    long activeSpotLightEffectCount;// Offset=0x9ec Size=0x4
    long activeSpotLightElemCount;// Offset=0x9f0 Size=0x4
    unsigned short activeSpotLightEffectHandle;// Offset=0x9f4 Size=0x2
    unsigned short activeSpotLightElemHandle;// Offset=0x9f6 Size=0x2
    short activeSpotLightBoltDobj;// Offset=0x9f8 Size=0x2
    unsigned char __align0[2];// Offset=0x9fa Size=0x2
    long iteratorCount;// Offset=0x9fc Size=0x4
    int msecNow;// Offset=0xa00 Size=0x4
    long msecDraw;// Offset=0xa04 Size=0x4
    int frameCount;// Offset=0xa08 Size=0x4
    bool isInitialized;// Offset=0xa0c Size=0x1
    bool needsGarbageCollection;// Offset=0xa0d Size=0x1
    bool isArchiving;// Offset=0xa0e Size=0x1
    unsigned char localClientNum;// Offset=0xa0f Size=0x1
    unsigned int restartList[32];// Offset=0xa10 Size=0x80
    struct FxEffect ** restartEffectsList;// Offset=0xa90 Size=0x4
    unsigned int restartCount;// Offset=0xa94 Size=0x4
    unsigned int pad1[14];// Offset=0xa98 Size=0x38
};

struct FxGenerateModelMarksCmd// Size=0x3c (Id=6104)
{
    struct GfxSceneMarkDrawData sceneDrawData;// Offset=0x0 Size=0x2c
    struct FxSystem * system;// Offset=0x2c Size=0x4
    struct FxMarksSystem * marksSystem;// Offset=0x30 Size=0x4
    int localClientNum;// Offset=0x34 Size=0x4
    bool marksEnabled;// Offset=0x38 Size=0x1
    bool marksSmodels;// Offset=0x39 Size=0x1
    bool marksEnts;// Offset=0x3a Size=0x1
};

struct GfxMarkSurf// Size=0x10 (Id=6105)
{
    union GfxDrawGroupSetup drawGroup;// Offset=0x0 Size=0x4
    unsigned short * indices;// Offset=0x4 Size=0x4
    unsigned short triCount;// Offset=0x8 Size=0x2
    unsigned char modelType;// Offset=0xa Size=0x1
    unsigned char pad;// Offset=0xb Size=0x1
    union GfxMarkSurfLighting lighting;// Offset=0xc Size=0x4
};

struct std::pair<FxMarkTri *,FxMarkTri *>// Size=0x8 (Id=6106)
{
    void pair<FxMarkTri *,FxMarkTri *>(struct FxMarkTri &** ,struct FxMarkTri &** );
    void pair<FxMarkTri *,FxMarkTri *>();
    void swap(struct std::pair<FxMarkTri *,FxMarkTri *> & );
    struct FxMarkTri * first;// Offset=0x0 Size=0x4
    struct FxMarkTri * second;// Offset=0x4 Size=0x4
};

struct MarkInfoCollidedBModel// Size=0xc (Id=6107)
{
    struct GfxBrushModel * brushModel;// Offset=0x0 Size=0x4
    struct cpose_t * pose;// Offset=0x4 Size=0x4
    unsigned short entnum;// Offset=0x8 Size=0x2
};

struct SpuLocalStructPtr<FxSystem,31>// Size=0x4 (Id=6108)
{
    struct FxSystem * localPtr;// Offset=0x0 Size=0x4
    struct FxSystem * operator->();
    struct FxSystem * operator struct FxSystem *();
};

struct MarkInfoCollidedDObj// Size=0xc (Id=6109)
{
    struct DObj * dObj;// Offset=0x0 Size=0x4
    struct cpose_t * pose;// Offset=0x4 Size=0x4
    unsigned short entnum;// Offset=0x8 Size=0x2
};

struct FxMarksSystemBuffers// Size=0x47000 (Id=6110)
{
    struct FxMark marksBuf[512];// Offset=0x0 Size=0x8000
    union FxTriGroupPool triGroupsBuf[2048];// Offset=0x8000 Size=0xc000
    union FxPointGroupPool pointGroupsBuf[3072];// Offset=0x14000 Size=0x33000
};

struct GfxSceneMarkDrawData// Size=0x2c (Id=6111)
{
    unsigned char * smodelVisLods;// Offset=0x0 Size=0x4
    unsigned char * dObjVisData;// Offset=0x4 Size=0x4
    unsigned char * modelVisData;// Offset=0x8 Size=0x4
    unsigned char * brushVisData;// Offset=0xc Size=0x4
    int dpvsLocalClientNum;// Offset=0x10 Size=0x4
    int dObjViewmodelIndex;// Offset=0x14 Size=0x4
    int smodelCount;// Offset=0x18 Size=0x4
    int dObjCount;// Offset=0x1c Size=0x4
    int brushCount;// Offset=0x20 Size=0x4
    int modelCount;// Offset=0x24 Size=0x4
    unsigned short entnumOrdinaryEnd;// Offset=0x28 Size=0x2
};

struct FxMarkTri// Size=0xe (Id=6112)
{
    unsigned short indices[3];// Offset=0x0 Size=0x6
    struct GfxMarkContext context;// Offset=0x6 Size=0x7
};

struct GfxMarkSurfList// Size=0x8 (Id=6113)
{
    struct GfxMarkSurf * surfs;// Offset=0x0 Size=0x4
    unsigned int count;// Offset=0x4 Size=0x4
};

struct SpuLocalStructPtr<FxMarksSystem,31>// Size=0x4 (Id=6114)
{
    struct FxMarksSystem * localPtr;// Offset=0x0 Size=0x4
    struct FxMarksSystem * operator->();
    struct FxMarksSystem * operator struct FxMarksSystem *();
};

struct FxMarkDObjUpdateContext// Size=0x108 (Id=6115)
{
    struct XModel * models[32];// Offset=0x0 Size=0x80
    char * modelParentBones[32];// Offset=0x80 Size=0x80
    int modelCount;// Offset=0x100 Size=0x4
    bool isBrush;// Offset=0x104 Size=0x1
    unsigned char __align0[1];// Offset=0x105 Size=0x1
    unsigned short brushIndex;// Offset=0x106 Size=0x2
};

union GfxSceneGlass// Size=0x4 (Id=6116)
{
    bool rendered;// Offset=0x0 Size=0x1
    unsigned char reflectionProbeIndex;// Offset=0x1 Size=0x1
    unsigned short lightingHandle;// Offset=0x2 Size=0x2
    unsigned int packed;// Offset=0x0 Size=0x4
};

struct <unnamed-type-fx_load>// Size=0x4 (Id=6117)
{
    struct FxEffectDef * defaultEffect;// Offset=0x0 Size=0x4
};

struct FxGraph1D// Size=0x8 (Id=6118)
{
    union // Size=0x4 (Id=0)
    {
        int intervalCount;// Offset=0x0 Size=0x4
        union <unnamed-type-u>// Size=0x4 (Id=64447)
        {
            float constantValue;// Offset=0x0 Size=0x4
            float * sampleValue;// Offset=0x0 Size=0x4
        };
    };
    union FxGraph1D::<unnamed-type-u> u;// Offset=0x4 Size=0x4
};

struct FxGraph1D// Size=0x8 (Id=6119)
{
    union // Size=0x4 (Id=0)
    {
        int intervalCount;// Offset=0x0 Size=0x4
        union <unnamed-type-u>// Size=0x4 (Id=64447)
        {
            float constantValue;// Offset=0x0 Size=0x4
            float * sampleValue;// Offset=0x0 Size=0x4
        };
    };
    union FxGraph1D::<unnamed-type-u> u;// Offset=0x4 Size=0x4
};

struct FxGraph3D// Size=0x10 (Id=6120)
{
    union // Size=0x4 (Id=0)
    {
        int intervalCount;// Offset=0x0 Size=0x4
        union <unnamed-type-u>// Size=0xc (Id=64452)
        {
            float constantValue[3];// Offset=0x0 Size=0xc
            float * sampleValue[3];// Offset=0x0 Size=0x4
        };
    };
    union FxGraph3D::<unnamed-type-u> u;// Offset=0x4 Size=0xc
};

struct FxGraph3D// Size=0x10 (Id=6121)
{
    union // Size=0x4 (Id=0)
    {
        int intervalCount;// Offset=0x0 Size=0x4
        union <unnamed-type-u>// Size=0xc (Id=64452)
        {
            float constantValue[3];// Offset=0x0 Size=0xc
            float * sampleValue[3];// Offset=0x0 Size=0x4
        };
    };
    union FxGraph3D::<unnamed-type-u> u;// Offset=0x4 Size=0xc
};

union FxGraph3D::<unnamed-type-u>// Size=0xc (Id=6122)
{
    union // Size=0xc (Id=0)
    {
        float constantValue[3];// Offset=0x0 Size=0xc
        float * sampleValue[3];// Offset=0x0 Size=0x4
    };
};

union FxGraph1D::<unnamed-type-u>// Size=0x4 (Id=6123)
{
    float constantValue;// Offset=0x0 Size=0x4
    float * sampleValue;// Offset=0x0 Size=0x4
};

enum FxGlassFlags
{
    GF_DAMAGED=1,
    GF_SIMPLE=2,
    GF_NO_PHYSICS=4,
    GF_FALLING_PHYSICS=8,
    GF_GUARANTEE_FX=16,
    GF_FELL_ASLEEP=32
};

struct FxSystem// Size=0xad0 (Id=6125)
{
    struct FxCamera camera;// Offset=0x0 Size=0xb0
    struct FxCamera cameraPrev;// Offset=0xb0 Size=0xb0
    struct FxSpriteInfo sprite;// Offset=0x160 Size=0x10
    struct FxEffect * effects;// Offset=0x170 Size=0x4
    struct FxPool<FxElem> * elems;// Offset=0x174 Size=0x4
    struct FxPool<FxTrail> * trails;// Offset=0x178 Size=0x4
    struct FxPool<FxTrailElem> * trailElems;// Offset=0x17c Size=0x4
    struct FxPool<FxBolt> * bolts;// Offset=0x180 Size=0x4
    struct FxPool<FxSparkCloud> * sparkClouds;// Offset=0x184 Size=0x4
    struct FxPool<FxSparkFountain> * sparkFountains;// Offset=0x188 Size=0x4
    struct FxPool<FxSparkFountainCluster> * sparkFountainClusters;// Offset=0x18c Size=0x4
    unsigned short * deferredElems;// Offset=0x190 Size=0x4
    long firstFreeElem;// Offset=0x194 Size=0x4
    long firstFreeTrailElem;// Offset=0x198 Size=0x4
    long firstFreeTrail;// Offset=0x19c Size=0x4
    long firstFreeBolt;// Offset=0x1a0 Size=0x4
    long firstFreeSparkCloud;// Offset=0x1a4 Size=0x4
    long firstFreeSparkFountain;// Offset=0x1a8 Size=0x4
    long firstFreeSparkFountainCluster;// Offset=0x1ac Size=0x4
    long deferredElemCount;// Offset=0x1b0 Size=0x4
    long activeElemCount;// Offset=0x1b4 Size=0x4
    long activeTrailElemCount;// Offset=0x1b8 Size=0x4
    long activeTrailCount;// Offset=0x1bc Size=0x4
    long activeBoltCount;// Offset=0x1c0 Size=0x4
    long activeSparkCloudCount;// Offset=0x1c4 Size=0x4
    long activeSparkFountainCount;// Offset=0x1c8 Size=0x4
    long activeSparkFountainClusterCount;// Offset=0x1cc Size=0x4
    long gfxCloudCount;// Offset=0x1d0 Size=0x4
    struct FxVisState * visState;// Offset=0x1d4 Size=0x4
    struct FxVisState * visStateBufferRead;// Offset=0x1d8 Size=0x4
    struct FxVisState * visStateBufferWrite;// Offset=0x1dc Size=0x4
    long firstActiveEffect;// Offset=0x1e0 Size=0x4
    long firstNewEffect;// Offset=0x1e4 Size=0x4
    long firstFreeEffect;// Offset=0x1e8 Size=0x4
    unsigned short allEffectHandles[1024];// Offset=0x1ec Size=0x800
    long activeSpotLightEffectCount;// Offset=0x9ec Size=0x4
    long activeSpotLightElemCount;// Offset=0x9f0 Size=0x4
    unsigned short activeSpotLightEffectHandle;// Offset=0x9f4 Size=0x2
    unsigned short activeSpotLightElemHandle;// Offset=0x9f6 Size=0x2
    short activeSpotLightBoltDobj;// Offset=0x9f8 Size=0x2
    unsigned char __align0[2];// Offset=0x9fa Size=0x2
    long iteratorCount;// Offset=0x9fc Size=0x4
    int msecNow;// Offset=0xa00 Size=0x4
    long msecDraw;// Offset=0xa04 Size=0x4
    int frameCount;// Offset=0xa08 Size=0x4
    bool isInitialized;// Offset=0xa0c Size=0x1
    bool needsGarbageCollection;// Offset=0xa0d Size=0x1
    bool isArchiving;// Offset=0xa0e Size=0x1
    unsigned char localClientNum;// Offset=0xa0f Size=0x1
    unsigned int restartList[32];// Offset=0xa10 Size=0x80
    struct FxEffect ** restartEffectsList;// Offset=0xa90 Size=0x4
    unsigned int restartCount;// Offset=0xa94 Size=0x4
    unsigned int pad1[14];// Offset=0xa98 Size=0x38
};

struct FxGlassVertex// Size=0x4 (Id=6126)
{
    short x;// Offset=0x0 Size=0x2
    short y;// Offset=0x2 Size=0x2
};

struct FxGlassPieceState// Size=0x20 (Id=6127)
{
    float texCoordOrigin[2];// Offset=0x0 Size=0x8
    unsigned int supportMask;// Offset=0x8 Size=0x4
    unsigned short initIndex;// Offset=0xc Size=0x2
    unsigned short geoDataStart;// Offset=0xe Size=0x2
    unsigned char defIndex;// Offset=0x10 Size=0x1
    unsigned char pad[5];// Offset=0x11 Size=0x5
    unsigned char vertCount;// Offset=0x16 Size=0x1
    unsigned char holeDataCount;// Offset=0x17 Size=0x1
    unsigned char crackDataCount;// Offset=0x18 Size=0x1
    unsigned char fanDataCount;// Offset=0x19 Size=0x1
    unsigned short flags;// Offset=0x1a Size=0x2
    float areaX2;// Offset=0x1c Size=0x4
};

union FxGlassGeometryData// Size=0x4 (Id=6128)
{
    struct FxGlassVertex vert;// Offset=0x0 Size=0x4
    struct FxGlassHoleHeader hole;// Offset=0x0 Size=0x4
    struct FxGlassCrackHeader crack;// Offset=0x0 Size=0x4
    unsigned char asBytes[4];// Offset=0x0 Size=0x4
    short anonymous[2];// Offset=0x0 Size=0x4
};

struct FxGlassTraceHit// Size=0x30 (Id=6129)
{
    struct FxGlassVertex breakOrg;// Offset=0x0 Size=0x4
    unsigned int pieceIndex;// Offset=0x4 Size=0x4
    float dist;// Offset=0x8 Size=0x4
    float axis[3][3];// Offset=0xc Size=0x24
};

struct FxGlassTrace// Size=0x110 (Id=6130)
{
    float start[3];// Offset=0x0 Size=0xc
    float dir[3];// Offset=0xc Size=0xc
    float len;// Offset=0x18 Size=0x4
    unsigned int hitCount;// Offset=0x1c Size=0x4
    struct FxGlassTraceHit hits[5];// Offset=0x20 Size=0xf0
};

struct std::pair<FxGlassTraceHit *,FxGlassTraceHit *>// Size=0x8 (Id=6131)
{
    void pair<FxGlassTraceHit *,FxGlassTraceHit *>(struct FxGlassTraceHit &** ,struct FxGlassTraceHit &** );
    void pair<FxGlassTraceHit *,FxGlassTraceHit *>();
    void swap(struct std::pair<FxGlassTraceHit *,FxGlassTraceHit *> & );
    struct FxGlassTraceHit * first;// Offset=0x0 Size=0x4
    struct FxGlassTraceHit * second;// Offset=0x4 Size=0x4
};

struct FxGlassTraceHit// Size=0x30 (Id=6132)
{
    struct FxGlassVertex breakOrg;// Offset=0x0 Size=0x4
    unsigned int pieceIndex;// Offset=0x4 Size=0x4
    float dist;// Offset=0x8 Size=0x4
    float axis[3][3];// Offset=0xc Size=0x24
};

struct FxGlassFaceDef// Size=0x1c (Id=6133)
{
    float offset[3];// Offset=0x0 Size=0xc
    float binormalSign;// Offset=0xc Size=0x4
    union GfxColor color;// Offset=0x10 Size=0x4
    union PackedUnitVec normal;// Offset=0x14 Size=0x4
    union PackedUnitVec tangent;// Offset=0x18 Size=0x4
};

union FxGlassTwoTris// Size=0xc (Id=6134)
{
    struct r_double_index_t read[3];// Offset=0x0 Size=0xc
    unsigned short write[2][3];// Offset=0x0 Size=0xc
};

struct FxGlassDrawState// Size=0x870 (Id=6135)
{
    float localVerts[128][3];// Offset=0x0 Size=0x600
    union PackedTexCoords texCoords[128];// Offset=0x600 Size=0x200
    float origin[3];// Offset=0x800 Size=0xc
    float axis[3][3];// Offset=0x80c Size=0x24
    float texCoordOrigin[2];// Offset=0x830 Size=0x8
    struct FxGlassDef * def;// Offset=0x838 Size=0x4
    float * texVecs[2];// Offset=0x83c Size=0x4
    unsigned int vertCount;// Offset=0x840 Size=0x4
    float thicknessOffset[3];// Offset=0x844 Size=0xc
    union PackedUnitVec packedTangent;// Offset=0x850 Size=0x4
    struct r_double_index_t * dstIndices;// Offset=0x854 Size=0x4
    unsigned short baseVertex;// Offset=0x858 Size=0x2
    unsigned char __align0[2];// Offset=0x85a Size=0x2
    unsigned int totalVertCount;// Offset=0x85c Size=0x4
    unsigned int totalIndexCount;// Offset=0x860 Size=0x4
    float shatteredScale;// Offset=0x864 Size=0x4
};

struct FxGlassFaceDef// Size=0x1c (Id=6136)
{
    float offset[3];// Offset=0x0 Size=0xc
    float binormalSign;// Offset=0xc Size=0x4
    union GfxColor color;// Offset=0x10 Size=0x4
    union PackedUnitVec normal;// Offset=0x14 Size=0x4
    union PackedUnitVec tangent;// Offset=0x18 Size=0x4
};

struct FxGlassDef// Size=0x2c (Id=6137)
{
    float halfThickness;// Offset=0x0 Size=0x4
    float texVecs[2][2];// Offset=0x4 Size=0x10
    union GfxColor color;// Offset=0x14 Size=0x4
    struct Material * material;// Offset=0x18 Size=0x4
    struct Material * materialShattered;// Offset=0x1c Size=0x4
    struct PhysPreset * physPreset;// Offset=0x20 Size=0x4
    float invHighMipRadius;// Offset=0x24 Size=0x4
    float shatteredInvHighMipRadius;// Offset=0x28 Size=0x4
};

union FxGlassPiecePlace// Size=0x20 (Id=6138)
{
    union // Size=0x20 (Id=0)
    {
        struct FxSpatialFrame frame;// Offset=0x0 Size=0x1c
        float radius;// Offset=0x1c Size=0x4
        unsigned int nextFree;// Offset=0x0 Size=0x4
    };
};

struct FxGlassInitPieceState// Size=0x34 (Id=6139)
{
    struct FxSpatialFrame frame;// Offset=0x0 Size=0x1c
    float radius;// Offset=0x1c Size=0x4
    float texCoordOrigin[2];// Offset=0x20 Size=0x8
    unsigned int supportMask;// Offset=0x28 Size=0x4
    float areaX2;// Offset=0x2c Size=0x4
    unsigned char defIndex;// Offset=0x30 Size=0x1
    unsigned char vertCount;// Offset=0x31 Size=0x1
    unsigned char fanDataCount;// Offset=0x32 Size=0x1
    unsigned char pad[1];// Offset=0x33 Size=0x1
};

struct GfxLightingInfo// Size=0x2 (Id=6140)
{
    unsigned char primaryLightIndex;// Offset=0x0 Size=0x1
    unsigned char reflectionProbeIndex;// Offset=0x1 Size=0x1
};

struct FxGlassDrawState// Size=0x870 (Id=6141)
{
    float localVerts[128][3];// Offset=0x0 Size=0x600
    union PackedTexCoords texCoords[128];// Offset=0x600 Size=0x200
    float origin[3];// Offset=0x800 Size=0xc
    float axis[3][3];// Offset=0x80c Size=0x24
    float texCoordOrigin[2];// Offset=0x830 Size=0x8
    struct FxGlassDef * def;// Offset=0x838 Size=0x4
    float * texVecs[2];// Offset=0x83c Size=0x4
    unsigned int vertCount;// Offset=0x840 Size=0x4
    float thicknessOffset[3];// Offset=0x844 Size=0xc
    union PackedUnitVec packedTangent;// Offset=0x850 Size=0x4
    struct r_double_index_t * dstIndices;// Offset=0x854 Size=0x4
    unsigned short baseVertex;// Offset=0x858 Size=0x2
    unsigned char __align0[2];// Offset=0x85a Size=0x2
    unsigned int totalVertCount;// Offset=0x85c Size=0x4
    unsigned int totalIndexCount;// Offset=0x860 Size=0x4
    float shatteredScale;// Offset=0x864 Size=0x4
};

struct Material// Size=0x58 (Id=6142)
{
    struct MaterialInfo info;// Offset=0x0 Size=0x18
    unsigned char stateBitsEntry[33];// Offset=0x18 Size=0x21
    unsigned char textureCount;// Offset=0x39 Size=0x1
    unsigned char constantCount;// Offset=0x3a Size=0x1
    unsigned char stateBitsCount;// Offset=0x3b Size=0x1
    unsigned char stateFlags;// Offset=0x3c Size=0x1
    unsigned char cameraRegion;// Offset=0x3d Size=0x1
    unsigned char layerCount;// Offset=0x3e Size=0x1
    unsigned char __align0[1];// Offset=0x3f Size=0x1
    struct MaterialTechniqueSet * techniqueSet;// Offset=0x40 Size=0x4
    struct MaterialTextureDef * textureTable;// Offset=0x44 Size=0x4
    struct MaterialConstantDef * constantTable;// Offset=0x48 Size=0x4
    struct GfxStateBits * stateBitsTable;// Offset=0x4c Size=0x4
    char ** subMaterials;// Offset=0x50 Size=0x4
};

struct SpuLocalStructPtr<FxGlassVisInfo,31>// Size=0x4 (Id=6143)
{
    struct FxGlassVisInfo * localPtr;// Offset=0x0 Size=0x4
    struct FxGlassVisInfo * operator->();
    struct FxGlassVisInfo * operator struct FxGlassVisInfo *();
};

struct FxSystem// Size=0xad0 (Id=6144)
{
    struct FxCamera camera;// Offset=0x0 Size=0xb0
    struct FxCamera cameraPrev;// Offset=0xb0 Size=0xb0
    struct FxSpriteInfo sprite;// Offset=0x160 Size=0x10
    struct FxEffect * effects;// Offset=0x170 Size=0x4
    struct FxPool<FxElem> * elems;// Offset=0x174 Size=0x4
    struct FxPool<FxTrail> * trails;// Offset=0x178 Size=0x4
    struct FxPool<FxTrailElem> * trailElems;// Offset=0x17c Size=0x4
    struct FxPool<FxBolt> * bolts;// Offset=0x180 Size=0x4
    struct FxPool<FxSparkCloud> * sparkClouds;// Offset=0x184 Size=0x4
    struct FxPool<FxSparkFountain> * sparkFountains;// Offset=0x188 Size=0x4
    struct FxPool<FxSparkFountainCluster> * sparkFountainClusters;// Offset=0x18c Size=0x4
    unsigned short * deferredElems;// Offset=0x190 Size=0x4
    long firstFreeElem;// Offset=0x194 Size=0x4
    long firstFreeTrailElem;// Offset=0x198 Size=0x4
    long firstFreeTrail;// Offset=0x19c Size=0x4
    long firstFreeBolt;// Offset=0x1a0 Size=0x4
    long firstFreeSparkCloud;// Offset=0x1a4 Size=0x4
    long firstFreeSparkFountain;// Offset=0x1a8 Size=0x4
    long firstFreeSparkFountainCluster;// Offset=0x1ac Size=0x4
    long deferredElemCount;// Offset=0x1b0 Size=0x4
    long activeElemCount;// Offset=0x1b4 Size=0x4
    long activeTrailElemCount;// Offset=0x1b8 Size=0x4
    long activeTrailCount;// Offset=0x1bc Size=0x4
    long activeBoltCount;// Offset=0x1c0 Size=0x4
    long activeSparkCloudCount;// Offset=0x1c4 Size=0x4
    long activeSparkFountainCount;// Offset=0x1c8 Size=0x4
    long activeSparkFountainClusterCount;// Offset=0x1cc Size=0x4
    long gfxCloudCount;// Offset=0x1d0 Size=0x4
    struct FxVisState * visState;// Offset=0x1d4 Size=0x4
    struct FxVisState * visStateBufferRead;// Offset=0x1d8 Size=0x4
    struct FxVisState * visStateBufferWrite;// Offset=0x1dc Size=0x4
    long firstActiveEffect;// Offset=0x1e0 Size=0x4
    long firstNewEffect;// Offset=0x1e4 Size=0x4
    long firstFreeEffect;// Offset=0x1e8 Size=0x4
    unsigned short allEffectHandles[1024];// Offset=0x1ec Size=0x800
    long activeSpotLightEffectCount;// Offset=0x9ec Size=0x4
    long activeSpotLightElemCount;// Offset=0x9f0 Size=0x4
    unsigned short activeSpotLightEffectHandle;// Offset=0x9f4 Size=0x2
    unsigned short activeSpotLightElemHandle;// Offset=0x9f6 Size=0x2
    short activeSpotLightBoltDobj;// Offset=0x9f8 Size=0x2
    unsigned char __align0[2];// Offset=0x9fa Size=0x2
    long iteratorCount;// Offset=0x9fc Size=0x4
    int msecNow;// Offset=0xa00 Size=0x4
    long msecDraw;// Offset=0xa04 Size=0x4
    int frameCount;// Offset=0xa08 Size=0x4
    bool isInitialized;// Offset=0xa0c Size=0x1
    bool needsGarbageCollection;// Offset=0xa0d Size=0x1
    bool isArchiving;// Offset=0xa0e Size=0x1
    unsigned char localClientNum;// Offset=0xa0f Size=0x1
    unsigned int restartList[32];// Offset=0xa10 Size=0x80
    struct FxEffect ** restartEffectsList;// Offset=0xa90 Size=0x4
    unsigned int restartCount;// Offset=0xa94 Size=0x4
    unsigned int pad1[14];// Offset=0xa98 Size=0x38
};

struct std::pair<FxGlassPieceVisRef *,FxGlassPieceVisRef *>// Size=0x8 (Id=6145)
{
    void pair<FxGlassPieceVisRef *,FxGlassPieceVisRef *>(struct FxGlassPieceVisRef &** ,struct FxGlassPieceVisRef &** );
    void pair<FxGlassPieceVisRef *,FxGlassPieceVisRef *>();
    void swap(struct std::pair<FxGlassPieceVisRef *,FxGlassPieceVisRef *> & );
    struct FxGlassPieceVisRef * first;// Offset=0x0 Size=0x4
    struct FxGlassPieceVisRef * second;// Offset=0x4 Size=0x4
};

enum FxGlassDrawLevel
{
    GLASS_DRAW_NONE=0,
    GLASS_DRAW_FACES=1,
    GLASS_DRAW_SIDES=2,
    GLASS_DRAW_ALL=3
};

struct GfxGlassSurf// Size=0x10 (Id=6147)
{
    union GfxDrawGroupSetup drawGroup;// Offset=0x0 Size=0x4
    unsigned char pad;// Offset=0x4 Size=0x1
    unsigned char reflectionProbeIndex;// Offset=0x5 Size=0x1
    unsigned short triCount;// Offset=0x6 Size=0x2
    unsigned short * indices;// Offset=0x8 Size=0x4
    unsigned short lightingHandle;// Offset=0xc Size=0x2
};

struct GfxGlassSurfList// Size=0x8 (Id=6148)
{
    struct GfxGlassSurf * surfs;// Offset=0x0 Size=0x4
    unsigned int count;// Offset=0x4 Size=0x4
};

struct FxGlassPieceLightingCmd// Size=0x10 (Id=6149)
{
    float viewOrg[3];// Offset=0x0 Size=0xc
    struct FxGlassVisInfo * visInfo;// Offset=0xc Size=0x4
};

struct GlassTri// Size=0x6 (Id=6150)
{
    unsigned short indices[3];// Offset=0x0 Size=0x6
};

struct SpuLocalStructPtr<FxGlassSystem,31>// Size=0x4 (Id=6151)
{
    struct FxGlassSystem * localPtr;// Offset=0x0 Size=0x4
    struct FxGlassSystem * operator->();
    struct FxGlassSystem * operator struct FxGlassSystem *();
};

struct FxGenerateGlassVertsCmd// Size=0x3c (Id=6152)
{
    float viewOrg[3];// Offset=0x0 Size=0xc
    bool thermalView;// Offset=0xc Size=0x1
    unsigned char __align0[3];// Offset=0xd Size=0x3
    struct GfxLodParms lodParms;// Offset=0x10 Size=0x14
    struct FxGlassSystem * glassSystem;// Offset=0x24 Size=0x4
    float * glassDist;// Offset=0x28 Size=0x4
    int * glassDistUpdatedPtr;// Offset=0x2c Size=0x4
    float shatteredScale;// Offset=0x30 Size=0x4
    void * modelLightEA;// Offset=0x34 Size=0x4
    struct FxGlassVisInfo * visInfo;// Offset=0x38 Size=0x4
};

struct DpvsPlane// Size=0x10 (Id=6153)
{
    float coeffs[4];// Offset=0x0 Size=0x10
};

enum _unnamed_6154
{
    SPU_ARRAY_ITER_READ=0,
    SPU_ARRAY_ITER_COUNT=1
};

struct SpuBitArrayIterator// Size=0x14 (Id=6155)
{
    union // Size=0x14 (Id=0)
    {
        unsigned int index;// Offset=0x0 Size=0x4
        unsigned int wordCount;// Offset=0x4 Size=0x4
        unsigned int wordIndex;// Offset=0x8 Size=0x4
        unsigned int * bitArray;// Offset=0xc Size=0x4
        unsigned int bits;// Offset=0x10 Size=0x4
        void Init(struct SpuBitArrayIterator * ,unsigned int * ,unsigned int );
        int Advance(struct SpuBitArrayIterator * );// Offset=0x0 Size=0x84
    };
};

struct FxSystem// Size=0xad0 (Id=6156)
{
    struct FxCamera camera;// Offset=0x0 Size=0xb0
    struct FxCamera cameraPrev;// Offset=0xb0 Size=0xb0
    struct FxSpriteInfo sprite;// Offset=0x160 Size=0x10
    struct FxEffect * effects;// Offset=0x170 Size=0x4
    struct FxPool<FxElem> * elems;// Offset=0x174 Size=0x4
    struct FxPool<FxTrail> * trails;// Offset=0x178 Size=0x4
    struct FxPool<FxTrailElem> * trailElems;// Offset=0x17c Size=0x4
    struct FxPool<FxBolt> * bolts;// Offset=0x180 Size=0x4
    struct FxPool<FxSparkCloud> * sparkClouds;// Offset=0x184 Size=0x4
    struct FxPool<FxSparkFountain> * sparkFountains;// Offset=0x188 Size=0x4
    struct FxPool<FxSparkFountainCluster> * sparkFountainClusters;// Offset=0x18c Size=0x4
    unsigned short * deferredElems;// Offset=0x190 Size=0x4
    long firstFreeElem;// Offset=0x194 Size=0x4
    long firstFreeTrailElem;// Offset=0x198 Size=0x4
    long firstFreeTrail;// Offset=0x19c Size=0x4
    long firstFreeBolt;// Offset=0x1a0 Size=0x4
    long firstFreeSparkCloud;// Offset=0x1a4 Size=0x4
    long firstFreeSparkFountain;// Offset=0x1a8 Size=0x4
    long firstFreeSparkFountainCluster;// Offset=0x1ac Size=0x4
    long deferredElemCount;// Offset=0x1b0 Size=0x4
    long activeElemCount;// Offset=0x1b4 Size=0x4
    long activeTrailElemCount;// Offset=0x1b8 Size=0x4
    long activeTrailCount;// Offset=0x1bc Size=0x4
    long activeBoltCount;// Offset=0x1c0 Size=0x4
    long activeSparkCloudCount;// Offset=0x1c4 Size=0x4
    long activeSparkFountainCount;// Offset=0x1c8 Size=0x4
    long activeSparkFountainClusterCount;// Offset=0x1cc Size=0x4
    long gfxCloudCount;// Offset=0x1d0 Size=0x4
    struct FxVisState * visState;// Offset=0x1d4 Size=0x4
    struct FxVisState * visStateBufferRead;// Offset=0x1d8 Size=0x4
    struct FxVisState * visStateBufferWrite;// Offset=0x1dc Size=0x4
    long firstActiveEffect;// Offset=0x1e0 Size=0x4
    long firstNewEffect;// Offset=0x1e4 Size=0x4
    long firstFreeEffect;// Offset=0x1e8 Size=0x4
    unsigned short allEffectHandles[1024];// Offset=0x1ec Size=0x800
    long activeSpotLightEffectCount;// Offset=0x9ec Size=0x4
    long activeSpotLightElemCount;// Offset=0x9f0 Size=0x4
    unsigned short activeSpotLightEffectHandle;// Offset=0x9f4 Size=0x2
    unsigned short activeSpotLightElemHandle;// Offset=0x9f6 Size=0x2
    short activeSpotLightBoltDobj;// Offset=0x9f8 Size=0x2
    unsigned char __align0[2];// Offset=0x9fa Size=0x2
    long iteratorCount;// Offset=0x9fc Size=0x4
    int msecNow;// Offset=0xa00 Size=0x4
    long msecDraw;// Offset=0xa04 Size=0x4
    int frameCount;// Offset=0xa08 Size=0x4
    bool isInitialized;// Offset=0xa0c Size=0x1
    bool needsGarbageCollection;// Offset=0xa0d Size=0x1
    bool isArchiving;// Offset=0xa0e Size=0x1
    unsigned char localClientNum;// Offset=0xa0f Size=0x1
    unsigned int restartList[32];// Offset=0xa10 Size=0x80
    struct FxEffect ** restartEffectsList;// Offset=0xa90 Size=0x4
    unsigned int restartCount;// Offset=0xa94 Size=0x4
    unsigned int pad1[14];// Offset=0xa98 Size=0x38
};

struct SpuIndexedIterator// Size=0xc (Id=6157)
{
    unsigned int indexCount;// Offset=0x0 Size=0x4
    unsigned int index;// Offset=0x4 Size=0x4
    unsigned short * indices;// Offset=0x8 Size=0x4
    void Init(struct SpuIndexedIterator * ,unsigned short * ,unsigned int );
    int Advance(struct SpuIndexedIterator * );
};

struct DpvsGlassCellCmd// Size=0x18 (Id=6158)
{
    struct DpvsPlane * planes;// Offset=0x0 Size=0x4
    unsigned short planeCount;// Offset=0x4 Size=0x2
    unsigned short cellIndex;// Offset=0x6 Size=0x2
    float viewOrg[3];// Offset=0x8 Size=0xc
    struct FxGlassVisInfo * visInfo;// Offset=0x14 Size=0x4
};

struct SpuArrayIteratorLookup<FxGlassPiecePlace>// Size=0x8 (Id=6159)
{
    union FxGlassPiecePlace * entry;// Offset=0x0 Size=0x4
    unsigned int index;// Offset=0x4 Size=0x4
};

struct FxGlassCrackWork// Size=0x43f0 (Id=6160)
{
    struct FxGlassVertex packedPts[255];// Offset=0x0 Size=0x3fc
    struct FxGlassCrackPoint pts[255];// Offset=0x3fc Size=0x7f8
    unsigned int ptCount;// Offset=0xbf4 Size=0x4
    struct FxGlassCrackEdge edges[512];// Offset=0xbf8 Size=0x3000
    unsigned int edgeCount;// Offset=0x3bf8 Size=0x4
    struct FxGlassCrackEdge * firstFreeEdge;// Offset=0x3bfc Size=0x4
    unsigned int loopCount;// Offset=0x3c00 Size=0x4
    struct FxGlassCrackLoop loops[32];// Offset=0x3c04 Size=0x280
    unsigned int pieceIndex;// Offset=0x3e84 Size=0x4
    union FxGlassPiecePlace * piecePlace;// Offset=0x3e88 Size=0x4
    struct FxGlassPieceState * pieceState;// Offset=0x3e8c Size=0x4
    struct FxGlassDef * def;// Offset=0x3e90 Size=0x4
    struct FxGlassSystem * glassSys;// Offset=0x3e94 Size=0x4
    struct FxGlassCrackEdge * breakOrgLoop;// Offset=0x3e98 Size=0x4
    unsigned int breakOrgIndex;// Offset=0x3e9c Size=0x4
    float crackLengthMin;// Offset=0x3ea0 Size=0x4
    float crackLengthMax;// Offset=0x3ea4 Size=0x4
    float originalRadius;// Offset=0x3ea8 Size=0x4
    float impactPos[3];// Offset=0x3eac Size=0xc
    float impactDir[3];// Offset=0x3eb8 Size=0xc
    float * axis[3];// Offset=0x3ec4 Size=0x4
    float angleSign;// Offset=0x3ec8 Size=0x4
    float playerOrigin[3];// Offset=0x3ecc Size=0xc
    struct FxGlassCrackBranch branchStack[32];// Offset=0x3ed8 Size=0x480
    unsigned int branchStackLevel;// Offset=0x4358 Size=0x4
    float maxPieceArea;// Offset=0x435c Size=0x4
    float maxEdgePieceArea;// Offset=0x4360 Size=0x4
    unsigned short pieceStack[32];// Offset=0x4364 Size=0x40
    unsigned int pieceStackLevel;// Offset=0x43a4 Size=0x4
    unsigned short fringePieces[32];// Offset=0x43a8 Size=0x40
    unsigned int fringePieceCount;// Offset=0x43e8 Size=0x4
    float fringeAreaX2;// Offset=0x43ec Size=0x4
};

struct FxGlassCrackEdge// Size=0x18 (Id=6161)
{
    union // Size=0x18 (Id=0)
    {
        unsigned char i0;// Offset=0x0 Size=0x1
        unsigned char i1;// Offset=0x1 Size=0x1
        unsigned char loopIndex;// Offset=0x2 Size=0x1
        unsigned char type;// Offset=0x3 Size=0x1
        float len;// Offset=0x4 Size=0x4
        float dir[2];// Offset=0x8 Size=0x8
        struct FxGlassCrackEdge * twin;// Offset=0x10 Size=0x4
        struct FxGlassCrackEdge * next;// Offset=0x14 Size=0x4
        struct FxGlassCrackEdge * nextFree;// Offset=0x0 Size=0x4
    };
};

struct FxGlassShardTriangulate// Size=0x110c (Id=6162)
{
    struct FxGlassShardPointMetric metric[255];// Offset=0x0 Size=0xbf4
    unsigned char evalTime[255];// Offset=0xbf4 Size=0xff
    unsigned char __align0[1];// Offset=0xcf3 Size=0x1
    float awayFromPoint[2];// Offset=0xcf4 Size=0x8
    unsigned int edgeCount;// Offset=0xcfc Size=0x4
    union FxGlassShardEdge edges[512];// Offset=0xd00 Size=0x400
    unsigned int fanDataUsed;// Offset=0x1100 Size=0x4
    unsigned int fanDataLimit;// Offset=0x1104 Size=0x4
    unsigned char * fanData;// Offset=0x1108 Size=0x4
};

union FxGlassShardEdge// Size=0x2 (Id=6163)
{
    struct <unnamed-type-fields>// Size=0x2 (Id=64818)
    {
        unsigned char i0;// Offset=0x0 Size=0x1
        unsigned char i1;// Offset=0x1 Size=0x1
    };
    struct FxGlassShardEdge::<unnamed-type-fields> fields;// Offset=0x0 Size=0x2
    unsigned short packed;// Offset=0x0 Size=0x2
};

struct FxGlassShardSeenEdge// Size=0x10 (Id=6164)
{
    unsigned short i0;// Offset=0x0 Size=0x2
    unsigned short i1;// Offset=0x2 Size=0x2
    int lineEq[3];// Offset=0x4 Size=0xc
};

struct FxGlassCrackAngleEval// Size=0x10 (Id=6165)
{
    int org[2];// Offset=0x0 Size=0x8
    int delta[2];// Offset=0x8 Size=0x8
};

struct FxGlassShardPointMetric// Size=0xc (Id=6166)
{
    int quadrant;// Offset=0x0 Size=0x4
    int tanNumer;// Offset=0x4 Size=0x4
    int tanDenom;// Offset=0x8 Size=0x4
};

struct FxGlassShard// Size=0x64c (Id=6167)
{
    float areaX2;// Offset=0x0 Size=0x4
    float radius;// Offset=0x4 Size=0x4
    float centroid[2];// Offset=0x8 Size=0x8
    struct FxGlassVertex packedCentroid;// Offset=0x10 Size=0x4
    unsigned int loopCount;// Offset=0x14 Size=0x4
    struct FxGlassShardEdgeLoop loops[16];// Offset=0x18 Size=0x80
    unsigned int crackCount;// Offset=0x98 Size=0x4
    struct FxGlassCrackEdge * cracks[64];// Offset=0x9c Size=0x100
    unsigned char ptCount;// Offset=0x19c Size=0x1
    unsigned char ptIndexMap[255];// Offset=0x19d Size=0xff
    unsigned int supportMask;// Offset=0x29c Size=0x4
    unsigned int holeDataCount;// Offset=0x2a0 Size=0x4
    unsigned int crackDataCount;// Offset=0x2a4 Size=0x4
    unsigned int fanDataCount;// Offset=0x2a8 Size=0x4
    unsigned int geoDataUsed;// Offset=0x2ac Size=0x4
    union FxGlassGeometryData geoData[231];// Offset=0x2b0 Size=0x39c
};

struct FxGlassShardTriangulate// Size=0x110c (Id=6168)
{
    struct FxGlassShardPointMetric metric[255];// Offset=0x0 Size=0xbf4
    unsigned char evalTime[255];// Offset=0xbf4 Size=0xff
    unsigned char __align0[1];// Offset=0xcf3 Size=0x1
    float awayFromPoint[2];// Offset=0xcf4 Size=0x8
    unsigned int edgeCount;// Offset=0xcfc Size=0x4
    union FxGlassShardEdge edges[512];// Offset=0xd00 Size=0x400
    unsigned int fanDataUsed;// Offset=0x1100 Size=0x4
    unsigned int fanDataLimit;// Offset=0x1104 Size=0x4
    unsigned char * fanData;// Offset=0x1108 Size=0x4
};

struct FxGlassShard// Size=0x64c (Id=6169)
{
    float areaX2;// Offset=0x0 Size=0x4
    float radius;// Offset=0x4 Size=0x4
    float centroid[2];// Offset=0x8 Size=0x8
    struct FxGlassVertex packedCentroid;// Offset=0x10 Size=0x4
    unsigned int loopCount;// Offset=0x14 Size=0x4
    struct FxGlassShardEdgeLoop loops[16];// Offset=0x18 Size=0x80
    unsigned int crackCount;// Offset=0x98 Size=0x4
    struct FxGlassCrackEdge * cracks[64];// Offset=0x9c Size=0x100
    unsigned char ptCount;// Offset=0x19c Size=0x1
    unsigned char ptIndexMap[255];// Offset=0x19d Size=0xff
    unsigned int supportMask;// Offset=0x29c Size=0x4
    unsigned int holeDataCount;// Offset=0x2a0 Size=0x4
    unsigned int crackDataCount;// Offset=0x2a4 Size=0x4
    unsigned int fanDataCount;// Offset=0x2a8 Size=0x4
    unsigned int geoDataUsed;// Offset=0x2ac Size=0x4
    union FxGlassGeometryData geoData[231];// Offset=0x2b0 Size=0x39c
};

enum _unnamed_6170
{
    FX_GLASS_EDGE_SUPPORTING=0,
    FX_GLASS_EDGE_EXPOSED=1
};

struct std::pair<unsigned int *,unsigned int *>// Size=0x8 (Id=6171)
{
    void pair<unsigned int *,unsigned int *>(unsigned int &** ,unsigned int &** );
    void pair<unsigned int *,unsigned int *>();
    void swap(struct std::pair<unsigned int *,unsigned int *> & );
    unsigned int * first;// Offset=0x0 Size=0x4
    unsigned int * second;// Offset=0x4 Size=0x4
};

struct FxGlassCrackWork// Size=0x43f0 (Id=6172)
{
    struct FxGlassVertex packedPts[255];// Offset=0x0 Size=0x3fc
    struct FxGlassCrackPoint pts[255];// Offset=0x3fc Size=0x7f8
    unsigned int ptCount;// Offset=0xbf4 Size=0x4
    struct FxGlassCrackEdge edges[512];// Offset=0xbf8 Size=0x3000
    unsigned int edgeCount;// Offset=0x3bf8 Size=0x4
    struct FxGlassCrackEdge * firstFreeEdge;// Offset=0x3bfc Size=0x4
    unsigned int loopCount;// Offset=0x3c00 Size=0x4
    struct FxGlassCrackLoop loops[32];// Offset=0x3c04 Size=0x280
    unsigned int pieceIndex;// Offset=0x3e84 Size=0x4
    union FxGlassPiecePlace * piecePlace;// Offset=0x3e88 Size=0x4
    struct FxGlassPieceState * pieceState;// Offset=0x3e8c Size=0x4
    struct FxGlassDef * def;// Offset=0x3e90 Size=0x4
    struct FxGlassSystem * glassSys;// Offset=0x3e94 Size=0x4
    struct FxGlassCrackEdge * breakOrgLoop;// Offset=0x3e98 Size=0x4
    unsigned int breakOrgIndex;// Offset=0x3e9c Size=0x4
    float crackLengthMin;// Offset=0x3ea0 Size=0x4
    float crackLengthMax;// Offset=0x3ea4 Size=0x4
    float originalRadius;// Offset=0x3ea8 Size=0x4
    float impactPos[3];// Offset=0x3eac Size=0xc
    float impactDir[3];// Offset=0x3eb8 Size=0xc
    float * axis[3];// Offset=0x3ec4 Size=0x4
    float angleSign;// Offset=0x3ec8 Size=0x4
    float playerOrigin[3];// Offset=0x3ecc Size=0xc
    struct FxGlassCrackBranch branchStack[32];// Offset=0x3ed8 Size=0x480
    unsigned int branchStackLevel;// Offset=0x4358 Size=0x4
    float maxPieceArea;// Offset=0x435c Size=0x4
    float maxEdgePieceArea;// Offset=0x4360 Size=0x4
    unsigned short pieceStack[32];// Offset=0x4364 Size=0x40
    unsigned int pieceStackLevel;// Offset=0x43a4 Size=0x4
    unsigned short fringePieces[32];// Offset=0x43a8 Size=0x40
    unsigned int fringePieceCount;// Offset=0x43e8 Size=0x4
    float fringeAreaX2;// Offset=0x43ec Size=0x4
};

struct FxGlassShardPointMetric// Size=0xc (Id=6173)
{
    int quadrant;// Offset=0x0 Size=0x4
    int tanNumer;// Offset=0x4 Size=0x4
    int tanDenom;// Offset=0x8 Size=0x4
};

struct FxGlassCrackLoop// Size=0x14 (Id=6174)
{
    struct FxGlassCrackEdge * firstEdge;// Offset=0x0 Size=0x4
    float mins[2];// Offset=0x4 Size=0x8
    float maxs[2];// Offset=0xc Size=0x8
};

struct FxGlassCrackPoint// Size=0x8 (Id=6175)
{
    float xy[2];// Offset=0x0 Size=0x8
};

struct FxGlassCrackAngleEval// Size=0x10 (Id=6176)
{
    int org[2];// Offset=0x0 Size=0x8
    int delta[2];// Offset=0x8 Size=0x8
};

struct FxGlassCrackEdge// Size=0x18 (Id=6177)
{
    union // Size=0x18 (Id=0)
    {
        unsigned char i0;// Offset=0x0 Size=0x1
        unsigned char i1;// Offset=0x1 Size=0x1
        unsigned char loopIndex;// Offset=0x2 Size=0x1
        unsigned char type;// Offset=0x3 Size=0x1
        float len;// Offset=0x4 Size=0x4
        float dir[2];// Offset=0x8 Size=0x8
        struct FxGlassCrackEdge * twin;// Offset=0x10 Size=0x4
        struct FxGlassCrackEdge * next;// Offset=0x14 Size=0x4
        struct FxGlassCrackEdge * nextFree;// Offset=0x0 Size=0x4
    };
};

struct FxGlassShardSeenEdge// Size=0x10 (Id=6178)
{
    unsigned short i0;// Offset=0x0 Size=0x2
    unsigned short i1;// Offset=0x2 Size=0x2
    int lineEq[3];// Offset=0x4 Size=0xc
};

struct FxGlassShardEdge::<unnamed-type-fields>// Size=0x2 (Id=6179)
{
    unsigned char i0;// Offset=0x0 Size=0x1
    unsigned char i1;// Offset=0x1 Size=0x1
};

struct FxGlassCrackBranch// Size=0x24 (Id=6180)
{
    struct FxGlassCrackEdge * afterEdge;// Offset=0x0 Size=0x4
    unsigned int startIndex;// Offset=0x4 Size=0x4
    float dir[2];// Offset=0x8 Size=0x8
    float len;// Offset=0x10 Size=0x4
    float baseDir[2];// Offset=0x14 Size=0x8
    float deflectLimit;// Offset=0x1c Size=0x4
    float priorCrackLength;// Offset=0x20 Size=0x4
};

struct FxGlassShardEdgeLoop// Size=0x8 (Id=6181)
{
    struct FxGlassCrackEdge * firstEdge;// Offset=0x0 Size=0x4
    unsigned short vertCount;// Offset=0x4 Size=0x2
    unsigned short parentLoopIndex;// Offset=0x6 Size=0x2
};

struct FxGlassCrackBranch// Size=0x24 (Id=6182)
{
    struct FxGlassCrackEdge * afterEdge;// Offset=0x0 Size=0x4
    unsigned int startIndex;// Offset=0x4 Size=0x4
    float dir[2];// Offset=0x8 Size=0x8
    float len;// Offset=0x10 Size=0x4
    float baseDir[2];// Offset=0x14 Size=0x8
    float deflectLimit;// Offset=0x1c Size=0x4
    float priorCrackLength;// Offset=0x20 Size=0x4
};

struct FxGlassClipSegment// Size=0x3c (Id=6183)
{
    unsigned int startIndex;// Offset=0x0 Size=0x4
    float len;// Offset=0x4 Size=0x4
    float dir[2];// Offset=0x8 Size=0x8
    float deflectLimit;// Offset=0x10 Size=0x4
    float baseDir[2];// Offset=0x14 Size=0x8
    float deflectDir[2];// Offset=0x1c Size=0x8
    float deflectLen;// Offset=0x24 Size=0x4
    int isBad;// Offset=0x28 Size=0x4
    int wasDeflected;// Offset=0x2c Size=0x4
    int hitAtVertex;// Offset=0x30 Size=0x4
    struct FxGlassCrackEdge * hitEdge;// Offset=0x34 Size=0x4
    struct FxGlassCrackEdge * hitEdgePrev;// Offset=0x38 Size=0x4
};

struct FxGlassCrackLoop// Size=0x14 (Id=6184)
{
    struct FxGlassCrackEdge * firstEdge;// Offset=0x0 Size=0x4
    float mins[2];// Offset=0x4 Size=0x8
    float maxs[2];// Offset=0xc Size=0x8
};

struct FxGlassCrackWalk// Size=0x5c (Id=6185)
{
    float cutoffCrackLength;// Offset=0x0 Size=0x4
    unsigned int loopIndex;// Offset=0x4 Size=0x4
    float totalCrackLength;// Offset=0x8 Size=0x4
    struct FxGlassClipSegment clip;// Offset=0xc Size=0x3c
    struct FxGlassCrackEdge * frontHead;// Offset=0x48 Size=0x4
    struct FxGlassCrackEdge * backHead;// Offset=0x4c Size=0x4
    struct FxGlassCrackEdge * frontTail;// Offset=0x50 Size=0x4
    struct FxGlassCrackEdge * backTail;// Offset=0x54 Size=0x4
    struct FxGlassCrackEdge * clippedEdge;// Offset=0x58 Size=0x4
};

struct FxGlassSeedDirResults// Size=0x10 (Id=6186)
{
    float minDistSq;// Offset=0x0 Size=0x4
    float * seedDir;// Offset=0x4 Size=0x4
    struct FxGlassCrackEdge * hitEdgePrev;// Offset=0x8 Size=0x4
    float hitEdgeLen;// Offset=0xc Size=0x4
};

struct std::pair<unsigned short *,unsigned short *>// Size=0x8 (Id=6187)
{
    void pair<unsigned short *,unsigned short *>(unsigned short &** ,unsigned short &** );
    void pair<unsigned short *,unsigned short *>();
    void swap(struct std::pair<unsigned short *,unsigned short *> & );
    unsigned short * first;// Offset=0x0 Size=0x4
    unsigned short * second;// Offset=0x4 Size=0x4
};

struct Glass_BreakData// Size=0xc (Id=6188)
{
    int brokenPieceCount;// Offset=0x0 Size=0x4
    float totalAreaX2;// Offset=0x4 Size=0x4
    float * playerOrigin;// Offset=0x8 Size=0x4
};

struct FxGlassClipSegment// Size=0x3c (Id=6189)
{
    unsigned int startIndex;// Offset=0x0 Size=0x4
    float len;// Offset=0x4 Size=0x4
    float dir[2];// Offset=0x8 Size=0x8
    float deflectLimit;// Offset=0x10 Size=0x4
    float baseDir[2];// Offset=0x14 Size=0x8
    float deflectDir[2];// Offset=0x1c Size=0x8
    float deflectLen;// Offset=0x24 Size=0x4
    int isBad;// Offset=0x28 Size=0x4
    int wasDeflected;// Offset=0x2c Size=0x4
    int hitAtVertex;// Offset=0x30 Size=0x4
    struct FxGlassCrackEdge * hitEdge;// Offset=0x34 Size=0x4
    struct FxGlassCrackEdge * hitEdgePrev;// Offset=0x38 Size=0x4
};

struct FindInitialPieceData// Size=0xc (Id=6190)
{
    unsigned int initialPieceIndex;// Offset=0x0 Size=0x4
    int resultPieceIndex;// Offset=0x4 Size=0x4
    bool foundOne;// Offset=0x8 Size=0x1
};

struct FxGlassActiveList// Size=0x2004 (Id=6191)
{
    struct FxGlassPieceState * states[2048];// Offset=0x0 Size=0x2000
    unsigned int count;// Offset=0x2000 Size=0x4
};

struct RemovePiecesData// Size=0x2010 (Id=6192)
{
    struct PiecePriority priorities[2048];// Offset=0x0 Size=0x2000
    unsigned int priorityCount;// Offset=0x2000 Size=0x4
    float * playerOrigin;// Offset=0x2004 Size=0x4
    int piecesNeeded;// Offset=0x2008 Size=0x4
    int geoDataNeeded;// Offset=0x200c Size=0x4
};

struct std::pair<FxGlassPieceState * *,FxGlassPieceState * *>// Size=0x8 (Id=6193)
{
    void pair<FxGlassPieceState * *,FxGlassPieceState * *>(struct FxGlassPieceState &*** ,struct FxGlassPieceState &*** );
    void pair<FxGlassPieceState * *,FxGlassPieceState * *>();
    void swap(struct std::pair<FxGlassPieceState * *,FxGlassPieceState * *> & );
    struct FxGlassPieceState ** first;// Offset=0x0 Size=0x4
    struct FxGlassPieceState ** second;// Offset=0x4 Size=0x4
};

struct PartitionPriorityPred// Size=0x2 (Id=6194)
{
    unsigned short value;// Offset=0x0 Size=0x2
    bool operator()(struct PiecePriority & );
};

struct PiecePriority// Size=0x4 (Id=6195)
{
    unsigned short index;// Offset=0x0 Size=0x2
    unsigned short priority;// Offset=0x2 Size=0x2
};

struct PartitionPriorityPred// Size=0x2 (Id=6196)
{
    unsigned short value;// Offset=0x0 Size=0x2
    bool operator()(struct PiecePriority & );
};

struct PiecePriority// Size=0x4 (Id=6197)
{
    unsigned short index;// Offset=0x0 Size=0x2
    unsigned short priority;// Offset=0x2 Size=0x2
};

struct FxElemPreVisualState// Size=0x1c (Id=6198)
{
    float sampleLerp;// Offset=0x0 Size=0x4
    float sampleLerpInv;// Offset=0x4 Size=0x4
    struct FxElemDef * elemDef;// Offset=0x8 Size=0x4
    struct FxEffect * effect;// Offset=0xc Size=0x4
    struct FxElemVisStateSample * refState;// Offset=0x10 Size=0x4
    int randomSeed;// Offset=0x14 Size=0x4
    unsigned int distanceFade;// Offset=0x18 Size=0x4
};

struct FxDrawState// Size=0xac (Id=6199)
{
    struct FxSystem * system;// Offset=0x0 Size=0x4
    struct FxEffect * effect;// Offset=0x4 Size=0x4
    struct FxElem * elem;// Offset=0x8 Size=0x4
    struct FxElemDef * elemDef;// Offset=0xc Size=0x4
    struct GfxCodeSurfGlob * codeSurfGlob;// Offset=0x10 Size=0x4
    struct orientation_t orient;// Offset=0x14 Size=0x30
    struct FxCamera * camera;// Offset=0x44 Size=0x4
    int randomSeed;// Offset=0x48 Size=0x4
    float msecLifeSpan;// Offset=0x4c Size=0x4
    float msecElapsed;// Offset=0x50 Size=0x4
    float normTimeUpdateEnd;// Offset=0x54 Size=0x4
    float posWorld[3];// Offset=0x58 Size=0xc
    float velDirWorld[3];// Offset=0x64 Size=0xc
    struct FxElemVisualState visState;// Offset=0x70 Size=0x18
    struct FxElemPreVisualState preVisState;// Offset=0x88 Size=0x1c
    float physicsLerpFrac;// Offset=0xa4 Size=0x4
    int msecDraw;// Offset=0xa8 Size=0x4
};

struct FxTrailSegmentDrawState// Size=0x3c (Id=6200)
{
    struct FxTrailDef * trailDef;// Offset=0x0 Size=0x4
    float posWorld[3];// Offset=0x4 Size=0xc
    float basis[2][3];// Offset=0x10 Size=0x18
    float rotation;// Offset=0x28 Size=0x4
    float size[2];// Offset=0x2c Size=0x8
    float uCoord;// Offset=0x34 Size=0x4
    unsigned char color[4];// Offset=0x38 Size=0x4
};

struct FxFloatRange// Size=0x8 (Id=6201)
{
    float base;// Offset=0x0 Size=0x4
    float amplitude;// Offset=0x4 Size=0x4
};

struct FxCmd// Size=0xc (Id=6202)
{
    struct FxSystem * system;// Offset=0x0 Size=0x4
    int localClientNum;// Offset=0x4 Size=0x4
    long * spawnLock;// Offset=0x8 Size=0x4
};

struct FxTrailSegmentDrawState// Size=0x3c (Id=6203)
{
    struct FxTrailDef * trailDef;// Offset=0x0 Size=0x4
    float posWorld[3];// Offset=0x4 Size=0xc
    float basis[2][3];// Offset=0x10 Size=0x18
    float rotation;// Offset=0x28 Size=0x4
    float size[2];// Offset=0x2c Size=0x8
    float uCoord;// Offset=0x34 Size=0x4
    unsigned char color[4];// Offset=0x38 Size=0x4
};

enum GfxCodeSurfListType
{
    GFX_CODE_SURFLIST_INVALID=-1,
    GFX_CODE_SURFLIST_TRANS=0,
    GFX_CODE_SURFLIST_EMISSIVE=1,
    GFX_CODE_SURFLIST_TYPE_COUNT=2
};

enum GfxCodeSurfUser
{
    GFX_CODE_SURF_USER_NONE=0,
    GFX_CODE_SURF_USER_FX=1,
    GFX_CODE_SURF_USER_COMPASS=2,
    GFX_CODE_SURF_USER_FX_MARKS=3
};

struct FxSystem// Size=0xad0 (Id=6206)
{
    struct FxCamera camera;// Offset=0x0 Size=0xb0
    struct FxCamera cameraPrev;// Offset=0xb0 Size=0xb0
    struct FxSpriteInfo sprite;// Offset=0x160 Size=0x10
    struct FxEffect * effects;// Offset=0x170 Size=0x4
    struct FxPool<FxElem> * elems;// Offset=0x174 Size=0x4
    struct FxPool<FxTrail> * trails;// Offset=0x178 Size=0x4
    struct FxPool<FxTrailElem> * trailElems;// Offset=0x17c Size=0x4
    struct FxPool<FxBolt> * bolts;// Offset=0x180 Size=0x4
    struct FxPool<FxSparkCloud> * sparkClouds;// Offset=0x184 Size=0x4
    struct FxPool<FxSparkFountain> * sparkFountains;// Offset=0x188 Size=0x4
    struct FxPool<FxSparkFountainCluster> * sparkFountainClusters;// Offset=0x18c Size=0x4
    unsigned short * deferredElems;// Offset=0x190 Size=0x4
    long firstFreeElem;// Offset=0x194 Size=0x4
    long firstFreeTrailElem;// Offset=0x198 Size=0x4
    long firstFreeTrail;// Offset=0x19c Size=0x4
    long firstFreeBolt;// Offset=0x1a0 Size=0x4
    long firstFreeSparkCloud;// Offset=0x1a4 Size=0x4
    long firstFreeSparkFountain;// Offset=0x1a8 Size=0x4
    long firstFreeSparkFountainCluster;// Offset=0x1ac Size=0x4
    long deferredElemCount;// Offset=0x1b0 Size=0x4
    long activeElemCount;// Offset=0x1b4 Size=0x4
    long activeTrailElemCount;// Offset=0x1b8 Size=0x4
    long activeTrailCount;// Offset=0x1bc Size=0x4
    long activeBoltCount;// Offset=0x1c0 Size=0x4
    long activeSparkCloudCount;// Offset=0x1c4 Size=0x4
    long activeSparkFountainCount;// Offset=0x1c8 Size=0x4
    long activeSparkFountainClusterCount;// Offset=0x1cc Size=0x4
    long gfxCloudCount;// Offset=0x1d0 Size=0x4
    struct FxVisState * visState;// Offset=0x1d4 Size=0x4
    struct FxVisState * visStateBufferRead;// Offset=0x1d8 Size=0x4
    struct FxVisState * visStateBufferWrite;// Offset=0x1dc Size=0x4
    long firstActiveEffect;// Offset=0x1e0 Size=0x4
    long firstNewEffect;// Offset=0x1e4 Size=0x4
    long firstFreeEffect;// Offset=0x1e8 Size=0x4
    unsigned short allEffectHandles[1024];// Offset=0x1ec Size=0x800
    long activeSpotLightEffectCount;// Offset=0x9ec Size=0x4
    long activeSpotLightElemCount;// Offset=0x9f0 Size=0x4
    unsigned short activeSpotLightEffectHandle;// Offset=0x9f4 Size=0x2
    unsigned short activeSpotLightElemHandle;// Offset=0x9f6 Size=0x2
    short activeSpotLightBoltDobj;// Offset=0x9f8 Size=0x2
    unsigned char __align0[2];// Offset=0x9fa Size=0x2
    long iteratorCount;// Offset=0x9fc Size=0x4
    int msecNow;// Offset=0xa00 Size=0x4
    long msecDraw;// Offset=0xa04 Size=0x4
    int frameCount;// Offset=0xa08 Size=0x4
    bool isInitialized;// Offset=0xa0c Size=0x1
    bool needsGarbageCollection;// Offset=0xa0d Size=0x1
    bool isArchiving;// Offset=0xa0e Size=0x1
    unsigned char localClientNum;// Offset=0xa0f Size=0x1
    unsigned int restartList[32];// Offset=0xa10 Size=0x80
    struct FxEffect ** restartEffectsList;// Offset=0xa90 Size=0x4
    unsigned int restartCount;// Offset=0xa94 Size=0x4
    unsigned int pad1[14];// Offset=0xa98 Size=0x38
};

struct FxSystem// Size=0xad0 (Id=6207)
{
    struct FxCamera camera;// Offset=0x0 Size=0xb0
    struct FxCamera cameraPrev;// Offset=0xb0 Size=0xb0
    struct FxSpriteInfo sprite;// Offset=0x160 Size=0x10
    struct FxEffect * effects;// Offset=0x170 Size=0x4
    struct FxPool<FxElem> * elems;// Offset=0x174 Size=0x4
    struct FxPool<FxTrail> * trails;// Offset=0x178 Size=0x4
    struct FxPool<FxTrailElem> * trailElems;// Offset=0x17c Size=0x4
    struct FxPool<FxBolt> * bolts;// Offset=0x180 Size=0x4
    struct FxPool<FxSparkCloud> * sparkClouds;// Offset=0x184 Size=0x4
    struct FxPool<FxSparkFountain> * sparkFountains;// Offset=0x188 Size=0x4
    struct FxPool<FxSparkFountainCluster> * sparkFountainClusters;// Offset=0x18c Size=0x4
    unsigned short * deferredElems;// Offset=0x190 Size=0x4
    long firstFreeElem;// Offset=0x194 Size=0x4
    long firstFreeTrailElem;// Offset=0x198 Size=0x4
    long firstFreeTrail;// Offset=0x19c Size=0x4
    long firstFreeBolt;// Offset=0x1a0 Size=0x4
    long firstFreeSparkCloud;// Offset=0x1a4 Size=0x4
    long firstFreeSparkFountain;// Offset=0x1a8 Size=0x4
    long firstFreeSparkFountainCluster;// Offset=0x1ac Size=0x4
    long deferredElemCount;// Offset=0x1b0 Size=0x4
    long activeElemCount;// Offset=0x1b4 Size=0x4
    long activeTrailElemCount;// Offset=0x1b8 Size=0x4
    long activeTrailCount;// Offset=0x1bc Size=0x4
    long activeBoltCount;// Offset=0x1c0 Size=0x4
    long activeSparkCloudCount;// Offset=0x1c4 Size=0x4
    long activeSparkFountainCount;// Offset=0x1c8 Size=0x4
    long activeSparkFountainClusterCount;// Offset=0x1cc Size=0x4
    long gfxCloudCount;// Offset=0x1d0 Size=0x4
    struct FxVisState * visState;// Offset=0x1d4 Size=0x4
    struct FxVisState * visStateBufferRead;// Offset=0x1d8 Size=0x4
    struct FxVisState * visStateBufferWrite;// Offset=0x1dc Size=0x4
    long firstActiveEffect;// Offset=0x1e0 Size=0x4
    long firstNewEffect;// Offset=0x1e4 Size=0x4
    long firstFreeEffect;// Offset=0x1e8 Size=0x4
    unsigned short allEffectHandles[1024];// Offset=0x1ec Size=0x800
    long activeSpotLightEffectCount;// Offset=0x9ec Size=0x4
    long activeSpotLightElemCount;// Offset=0x9f0 Size=0x4
    unsigned short activeSpotLightEffectHandle;// Offset=0x9f4 Size=0x2
    unsigned short activeSpotLightElemHandle;// Offset=0x9f6 Size=0x2
    short activeSpotLightBoltDobj;// Offset=0x9f8 Size=0x2
    unsigned char __align0[2];// Offset=0x9fa Size=0x2
    long iteratorCount;// Offset=0x9fc Size=0x4
    int msecNow;// Offset=0xa00 Size=0x4
    long msecDraw;// Offset=0xa04 Size=0x4
    int frameCount;// Offset=0xa08 Size=0x4
    bool isInitialized;// Offset=0xa0c Size=0x1
    bool needsGarbageCollection;// Offset=0xa0d Size=0x1
    bool isArchiving;// Offset=0xa0e Size=0x1
    unsigned char localClientNum;// Offset=0xa0f Size=0x1
    unsigned int restartList[32];// Offset=0xa10 Size=0x80
    struct FxEffect ** restartEffectsList;// Offset=0xa90 Size=0x4
    unsigned int restartCount;// Offset=0xa94 Size=0x4
    unsigned int pad1[14];// Offset=0xa98 Size=0x38
};

struct GfxParticleCloud// Size=0x40 (Id=6208)
{
    struct GfxScaledPlacement placement;// Offset=0x0 Size=0x20
    float endpos[3];// Offset=0x20 Size=0xc
    union GfxColor color;// Offset=0x2c Size=0x4
    float radius[2];// Offset=0x30 Size=0x8
    unsigned int flags;// Offset=0x38 Size=0x4
    float timeOffset;// Offset=0x3c Size=0x4
};

struct FxSparkCloud// Size=0x810 (Id=6209)
{
    union // Size=0x4 (Id=0)
    {
        const int HANDLE_SCALE;// Offset=0x0 Size=0x4
        const int POOL_SIZE;// Offset=0x0 Size=0x4
        unsigned int frameBegin;// Offset=0x0 Size=0x4
    };
    unsigned int frameEnd;// Offset=0x4 Size=0x4
    float lastTime;// Offset=0x8 Size=0x4
    unsigned int pad[1];// Offset=0xc Size=0x4
    struct GfxParticleCloud frames[32];// Offset=0x10 Size=0x800
};

struct FxSystem// Size=0xad0 (Id=6210)
{
    struct FxCamera camera;// Offset=0x0 Size=0xb0
    struct FxCamera cameraPrev;// Offset=0xb0 Size=0xb0
    struct FxSpriteInfo sprite;// Offset=0x160 Size=0x10
    struct FxEffect * effects;// Offset=0x170 Size=0x4
    struct FxPool<FxElem> * elems;// Offset=0x174 Size=0x4
    struct FxPool<FxTrail> * trails;// Offset=0x178 Size=0x4
    struct FxPool<FxTrailElem> * trailElems;// Offset=0x17c Size=0x4
    struct FxPool<FxBolt> * bolts;// Offset=0x180 Size=0x4
    struct FxPool<FxSparkCloud> * sparkClouds;// Offset=0x184 Size=0x4
    struct FxPool<FxSparkFountain> * sparkFountains;// Offset=0x188 Size=0x4
    struct FxPool<FxSparkFountainCluster> * sparkFountainClusters;// Offset=0x18c Size=0x4
    unsigned short * deferredElems;// Offset=0x190 Size=0x4
    long firstFreeElem;// Offset=0x194 Size=0x4
    long firstFreeTrailElem;// Offset=0x198 Size=0x4
    long firstFreeTrail;// Offset=0x19c Size=0x4
    long firstFreeBolt;// Offset=0x1a0 Size=0x4
    long firstFreeSparkCloud;// Offset=0x1a4 Size=0x4
    long firstFreeSparkFountain;// Offset=0x1a8 Size=0x4
    long firstFreeSparkFountainCluster;// Offset=0x1ac Size=0x4
    long deferredElemCount;// Offset=0x1b0 Size=0x4
    long activeElemCount;// Offset=0x1b4 Size=0x4
    long activeTrailElemCount;// Offset=0x1b8 Size=0x4
    long activeTrailCount;// Offset=0x1bc Size=0x4
    long activeBoltCount;// Offset=0x1c0 Size=0x4
    long activeSparkCloudCount;// Offset=0x1c4 Size=0x4
    long activeSparkFountainCount;// Offset=0x1c8 Size=0x4
    long activeSparkFountainClusterCount;// Offset=0x1cc Size=0x4
    long gfxCloudCount;// Offset=0x1d0 Size=0x4
    struct FxVisState * visState;// Offset=0x1d4 Size=0x4
    struct FxVisState * visStateBufferRead;// Offset=0x1d8 Size=0x4
    struct FxVisState * visStateBufferWrite;// Offset=0x1dc Size=0x4
    long firstActiveEffect;// Offset=0x1e0 Size=0x4
    long firstNewEffect;// Offset=0x1e4 Size=0x4
    long firstFreeEffect;// Offset=0x1e8 Size=0x4
    unsigned short allEffectHandles[1024];// Offset=0x1ec Size=0x800
    long activeSpotLightEffectCount;// Offset=0x9ec Size=0x4
    long activeSpotLightElemCount;// Offset=0x9f0 Size=0x4
    unsigned short activeSpotLightEffectHandle;// Offset=0x9f4 Size=0x2
    unsigned short activeSpotLightElemHandle;// Offset=0x9f6 Size=0x2
    short activeSpotLightBoltDobj;// Offset=0x9f8 Size=0x2
    unsigned char __align0[2];// Offset=0x9fa Size=0x2
    long iteratorCount;// Offset=0x9fc Size=0x4
    int msecNow;// Offset=0xa00 Size=0x4
    long msecDraw;// Offset=0xa04 Size=0x4
    int frameCount;// Offset=0xa08 Size=0x4
    bool isInitialized;// Offset=0xa0c Size=0x1
    bool needsGarbageCollection;// Offset=0xa0d Size=0x1
    bool isArchiving;// Offset=0xa0e Size=0x1
    unsigned char localClientNum;// Offset=0xa0f Size=0x1
    unsigned int restartList[32];// Offset=0xa10 Size=0x80
    struct FxEffect ** restartEffectsList;// Offset=0xa90 Size=0x4
    unsigned int restartCount;// Offset=0xa94 Size=0x4
    unsigned int pad1[14];// Offset=0xa98 Size=0x38
};

struct vector4 : public vector3// Size=0x40 (Id=6211)
{
    unsigned char __align0[48];// Offset=0x0 Size=0x30
    struct __vector4 w;// Offset=0x30 Size=0x10
};

struct FxBeamInfo// Size=0xc04 (Id=6212)
{
    struct FxBeam beams[48];// Offset=0x0 Size=0xc00
    int beamCount;// Offset=0xc00 Size=0x4
};

struct FxEffectDefTable// Size=0x2004 (Id=6213)
{
    int count;// Offset=0x0 Size=0x4
    struct FxEffectDefTableEntry entries[1024];// Offset=0x4 Size=0x2000
};

struct FxEffectDefTable// Size=0x2004 (Id=6214)
{
    int count;// Offset=0x0 Size=0x4
    struct FxEffectDefTableEntry entries[1024];// Offset=0x4 Size=0x2000
};

struct FxSystem// Size=0xad0 (Id=6215)
{
    struct FxCamera camera;// Offset=0x0 Size=0xb0
    struct FxCamera cameraPrev;// Offset=0xb0 Size=0xb0
    struct FxSpriteInfo sprite;// Offset=0x160 Size=0x10
    struct FxEffect * effects;// Offset=0x170 Size=0x4
    struct FxPool<FxElem> * elems;// Offset=0x174 Size=0x4
    struct FxPool<FxTrail> * trails;// Offset=0x178 Size=0x4
    struct FxPool<FxTrailElem> * trailElems;// Offset=0x17c Size=0x4
    struct FxPool<FxBolt> * bolts;// Offset=0x180 Size=0x4
    struct FxPool<FxSparkCloud> * sparkClouds;// Offset=0x184 Size=0x4
    struct FxPool<FxSparkFountain> * sparkFountains;// Offset=0x188 Size=0x4
    struct FxPool<FxSparkFountainCluster> * sparkFountainClusters;// Offset=0x18c Size=0x4
    unsigned short * deferredElems;// Offset=0x190 Size=0x4
    long firstFreeElem;// Offset=0x194 Size=0x4
    long firstFreeTrailElem;// Offset=0x198 Size=0x4
    long firstFreeTrail;// Offset=0x19c Size=0x4
    long firstFreeBolt;// Offset=0x1a0 Size=0x4
    long firstFreeSparkCloud;// Offset=0x1a4 Size=0x4
    long firstFreeSparkFountain;// Offset=0x1a8 Size=0x4
    long firstFreeSparkFountainCluster;// Offset=0x1ac Size=0x4
    long deferredElemCount;// Offset=0x1b0 Size=0x4
    long activeElemCount;// Offset=0x1b4 Size=0x4
    long activeTrailElemCount;// Offset=0x1b8 Size=0x4
    long activeTrailCount;// Offset=0x1bc Size=0x4
    long activeBoltCount;// Offset=0x1c0 Size=0x4
    long activeSparkCloudCount;// Offset=0x1c4 Size=0x4
    long activeSparkFountainCount;// Offset=0x1c8 Size=0x4
    long activeSparkFountainClusterCount;// Offset=0x1cc Size=0x4
    long gfxCloudCount;// Offset=0x1d0 Size=0x4
    struct FxVisState * visState;// Offset=0x1d4 Size=0x4
    struct FxVisState * visStateBufferRead;// Offset=0x1d8 Size=0x4
    struct FxVisState * visStateBufferWrite;// Offset=0x1dc Size=0x4
    long firstActiveEffect;// Offset=0x1e0 Size=0x4
    long firstNewEffect;// Offset=0x1e4 Size=0x4
    long firstFreeEffect;// Offset=0x1e8 Size=0x4
    unsigned short allEffectHandles[1024];// Offset=0x1ec Size=0x800
    long activeSpotLightEffectCount;// Offset=0x9ec Size=0x4
    long activeSpotLightElemCount;// Offset=0x9f0 Size=0x4
    unsigned short activeSpotLightEffectHandle;// Offset=0x9f4 Size=0x2
    unsigned short activeSpotLightElemHandle;// Offset=0x9f6 Size=0x2
    short activeSpotLightBoltDobj;// Offset=0x9f8 Size=0x2
    unsigned char __align0[2];// Offset=0x9fa Size=0x2
    long iteratorCount;// Offset=0x9fc Size=0x4
    int msecNow;// Offset=0xa00 Size=0x4
    long msecDraw;// Offset=0xa04 Size=0x4
    int frameCount;// Offset=0xa08 Size=0x4
    bool isInitialized;// Offset=0xa0c Size=0x1
    bool needsGarbageCollection;// Offset=0xa0d Size=0x1
    bool isArchiving;// Offset=0xa0e Size=0x1
    unsigned char localClientNum;// Offset=0xa0f Size=0x1
    unsigned int restartList[32];// Offset=0xa10 Size=0x80
    struct FxEffect ** restartEffectsList;// Offset=0xa90 Size=0x4
    unsigned int restartCount;// Offset=0xa94 Size=0x4
    unsigned int pad1[14];// Offset=0xa98 Size=0x38
};

struct FxSystemBuffers// Size=0x107a80 (Id=6216)
{
    struct FxEffect effects[1024];// Offset=0x0 Size=0x24000
    struct FxPool<FxElem> elems[2048];// Offset=0x24000 Size=0x14000
    struct FxPool<FxTrail> trails[128];// Offset=0x38000 Size=0x800
    struct FxPool<FxTrailElem> trailElems[2048];// Offset=0x38800 Size=0x10000
    struct FxPool<FxBolt> bolts[255];// Offset=0x48800 Size=0x1fe0
    unsigned char padding1[32];// Offset=0x4a7e0 Size=0x20
    struct FxPool<FxSparkCloud> sparkClouds[32];// Offset=0x4a800 Size=0x10200
    struct FxPool<FxSparkFountain> sparkFountains[64];// Offset=0x5aa00 Size=0x1000
    struct FxPool<FxSparkFountainCluster> sparkFountainClusters[96];// Offset=0x5ba00 Size=0xa8000
    struct FxVisState visState[2];// Offset=0x103a00 Size=0x2020
    unsigned char padding3[96];// Offset=0x105a20 Size=0x60
    unsigned short deferredElems[2048];// Offset=0x105a80 Size=0x1000
    struct FxEffect * restartEffectsList[1024];// Offset=0x106a80 Size=0x1000
};

struct FxEffectDefTableEntry// Size=0x8 (Id=6217)
{
    unsigned int key;// Offset=0x0 Size=0x4
    struct FxEffectDef * effectDef;// Offset=0x4 Size=0x4
};

enum Direction
{
    DIRECTION_SAVE=0,
    DIRECTION_RESTORE=1
};

struct clipMap_t// Size=0x100 (Id=6219)
{
    char * name;// Offset=0x0 Size=0x4
    int isInUse;// Offset=0x4 Size=0x4
    int planeCount;// Offset=0x8 Size=0x4
    struct cplane_s * planes;// Offset=0xc Size=0x4
    unsigned int numStaticModels;// Offset=0x10 Size=0x4
    struct cStaticModel_s * staticModelList;// Offset=0x14 Size=0x4
    unsigned int numMaterials;// Offset=0x18 Size=0x4
    struct ClipMaterial * materials;// Offset=0x1c Size=0x4
    unsigned int numBrushSides;// Offset=0x20 Size=0x4
    struct cbrushside_t * brushsides;// Offset=0x24 Size=0x4
    unsigned int numBrushEdges;// Offset=0x28 Size=0x4
    unsigned char * brushEdges;// Offset=0x2c Size=0x4
    unsigned int numNodes;// Offset=0x30 Size=0x4
    struct cNode_t * nodes;// Offset=0x34 Size=0x4
    unsigned int numLeafs;// Offset=0x38 Size=0x4
    struct cLeaf_t * leafs;// Offset=0x3c Size=0x4
    unsigned int leafbrushNodesCount;// Offset=0x40 Size=0x4
    struct cLeafBrushNode_s * leafbrushNodes;// Offset=0x44 Size=0x4
    unsigned int numLeafBrushes;// Offset=0x48 Size=0x4
    unsigned short * leafbrushes;// Offset=0x4c Size=0x4
    unsigned int numLeafSurfaces;// Offset=0x50 Size=0x4
    unsigned int * leafsurfaces;// Offset=0x54 Size=0x4
    unsigned int vertCount;// Offset=0x58 Size=0x4
    float * verts[3];// Offset=0x5c Size=0x4
    int triCount;// Offset=0x60 Size=0x4
    unsigned short * triIndices;// Offset=0x64 Size=0x4
    unsigned char * triEdgeIsWalkable;// Offset=0x68 Size=0x4
    int borderCount;// Offset=0x6c Size=0x4
    struct CollisionBorder * borders;// Offset=0x70 Size=0x4
    int partitionCount;// Offset=0x74 Size=0x4
    struct CollisionPartition * partitions;// Offset=0x78 Size=0x4
    int aabbTreeCount;// Offset=0x7c Size=0x4
    struct CollisionAabbTree * aabbTrees;// Offset=0x80 Size=0x4
    unsigned int numSubModels;// Offset=0x84 Size=0x4
    struct cmodel_t * cmodels;// Offset=0x88 Size=0x4
    unsigned short numBrushes;// Offset=0x8c Size=0x2
    unsigned char __align0[2];// Offset=0x8e Size=0x2
    struct cbrush_t * brushes;// Offset=0x90 Size=0x4
    struct Bounds * brushBounds;// Offset=0x94 Size=0x4
    int * brushContents;// Offset=0x98 Size=0x4
    struct MapEnts * mapEnts;// Offset=0x9c Size=0x4
    unsigned short smodelNodeCount;// Offset=0xa0 Size=0x2
    unsigned char __align1[2];// Offset=0xa2 Size=0x2
    struct SModelAabbNode * smodelNodes;// Offset=0xa4 Size=0x4
    unsigned short dynEntCount[2];// Offset=0xa8 Size=0x4
    struct DynEntityDef * dynEntDefList[2];// Offset=0xac Size=0x8
    struct DynEntityPose * dynEntPoseList[2];// Offset=0xb4 Size=0x8
    struct DynEntityClient * dynEntClientList[2];// Offset=0xbc Size=0x8
    struct DynEntityColl * dynEntCollList[2];// Offset=0xc4 Size=0x8
    unsigned int checksum;// Offset=0xcc Size=0x4
};

struct DynEntityProps// Size=0x8 (Id=6220)
{
    char * name;// Offset=0x0 Size=0x4
    bool clientOnly;// Offset=0x4 Size=0x1
    bool clipMove;// Offset=0x5 Size=0x1
    bool usePhysics;// Offset=0x6 Size=0x1
    bool destroyable;// Offset=0x7 Size=0x1
};

struct DynEntityProps// Size=0x8 (Id=6221)
{
    char * name;// Offset=0x0 Size=0x4
    bool clientOnly;// Offset=0x4 Size=0x1
    bool clipMove;// Offset=0x5 Size=0x1
    bool usePhysics;// Offset=0x6 Size=0x1
    bool destroyable;// Offset=0x7 Size=0x1
};

struct DynEntityDef// Size=0x5c (Id=6222)
{
    enum DynEntityType type;// Offset=0x0 Size=0x4
    struct GfxPlacement pose;// Offset=0x4 Size=0x1c
    struct XModel * xModel;// Offset=0x20 Size=0x4
    unsigned short brushModel;// Offset=0x24 Size=0x2
    unsigned short physicsBrushModel;// Offset=0x26 Size=0x2
    struct FxEffectDef * destroyFx;// Offset=0x28 Size=0x4
    struct PhysPreset * physPreset;// Offset=0x2c Size=0x4
    int health;// Offset=0x30 Size=0x4
    struct PhysMass mass;// Offset=0x34 Size=0x24
    int contents;// Offset=0x58 Size=0x4
};

struct DynEntityPose// Size=0x20 (Id=6223)
{
    struct GfxPlacement pose;// Offset=0x0 Size=0x1c
    float radius;// Offset=0x1c Size=0x4
};

struct DynEntityAreaParms// Size=0x24 (Id=6224)
{
    float origin[3];// Offset=0x0 Size=0xc
    float radiusSq;// Offset=0xc Size=0x4
    float radius;// Offset=0x10 Size=0x4
    int contentMask;// Offset=0x14 Size=0x4
    unsigned short * list;// Offset=0x18 Size=0x4
    unsigned int maxCount;// Offset=0x1c Size=0x4
    unsigned int count;// Offset=0x20 Size=0x4
};

struct DynEntityCollWorld// Size=0x501c (Id=6225)
{
    struct Bounds bounds;// Offset=0x0 Size=0x18
    unsigned short freeHead;// Offset=0x18 Size=0x2
    unsigned char __align0[2];// Offset=0x1a Size=0x2
    struct DynEntityCollSector sectors[1024];// Offset=0x1c Size=0x5000
};

struct DynEntityCollSector// Size=0x14 (Id=6226)
{
    struct DynEntityCollTree tree;// Offset=0x0 Size=0xc
    int contents;// Offset=0xc Size=0x4
    unsigned short entListHead;// Offset=0x10 Size=0x2
};

struct DynEntityAreaParms// Size=0x24 (Id=6227)
{
    float origin[3];// Offset=0x0 Size=0xc
    float radiusSq;// Offset=0xc Size=0x4
    float radius;// Offset=0x10 Size=0x4
    int contentMask;// Offset=0x14 Size=0x4
    unsigned short * list;// Offset=0x18 Size=0x4
    unsigned int maxCount;// Offset=0x1c Size=0x4
    unsigned int count;// Offset=0x20 Size=0x4
};

struct DynEntityCollTree// Size=0xc (Id=6228)
{
    union // Size=0x6 (Id=0)
    {
        float dist;// Offset=0x0 Size=0x4
        unsigned short axis;// Offset=0x4 Size=0x2
        union <unnamed-type-u>// Size=0x2 (Id=65284)
        {
            unsigned short parent;// Offset=0x0 Size=0x2
            unsigned short nextFree;// Offset=0x0 Size=0x2
        };
        unsigned char __align0[4];// Offset=0x2 Size=0x4
    };
    union DynEntityCollTree::<unnamed-type-u> u;// Offset=0x6 Size=0x2
    unsigned short child[2];// Offset=0x8 Size=0x4
};

union DynEntityCollTree::<unnamed-type-u>// Size=0x2 (Id=6229)
{
    unsigned short parent;// Offset=0x0 Size=0x2
    unsigned short nextFree;// Offset=0x0 Size=0x2
};

struct DynEntSortStruct// Size=0x8 (Id=6230)
{
    float distSq;// Offset=0x0 Size=0x4
    unsigned short id;// Offset=0x4 Size=0x2
};

enum _unnamed_6231
{
    FX_TYPE_BULLET_HIT_SMALL_NORMAL=0,
    FX_TYPE_BULLET_HIT_SMALL_EXIT=1,
    FX_TYPE_BULLET_HIT_LARGE_NORMAL=2,
    FX_TYPE_BULLET_HIT_LARGE_EXIT=3,
    FX_TYPE_BULLET_EXPLODE=4,
    FX_TYPE_SHOTGUN_HIT_NORMAL=5,
    FX_TYPE_SHOTGUN_HIT_EXIT=6,
    FX_TYPE_BULLET_HIT_AP_NORMAL=7,
    FX_TYPE_BULLET_HIT_AP_EXIT=8,
    FX_TYPE_GRENADE_BOUNCE=9,
    FX_TYPE_KNIFE_STICK=10,
    FX_TYPE_GRENADE_EXPLODE=11,
    FX_TYPE_ROCKET_EXPLODE=12,
    FX_TYPE_PROJECTILE_DUD=13,
    FX_TYPE_COUNT=14
};

struct clipMap_t// Size=0x100 (Id=6232)
{
    char * name;// Offset=0x0 Size=0x4
    int isInUse;// Offset=0x4 Size=0x4
    int planeCount;// Offset=0x8 Size=0x4
    struct cplane_s * planes;// Offset=0xc Size=0x4
    unsigned int numStaticModels;// Offset=0x10 Size=0x4
    struct cStaticModel_s * staticModelList;// Offset=0x14 Size=0x4
    unsigned int numMaterials;// Offset=0x18 Size=0x4
    struct ClipMaterial * materials;// Offset=0x1c Size=0x4
    unsigned int numBrushSides;// Offset=0x20 Size=0x4
    struct cbrushside_t * brushsides;// Offset=0x24 Size=0x4
    unsigned int numBrushEdges;// Offset=0x28 Size=0x4
    unsigned char * brushEdges;// Offset=0x2c Size=0x4
    unsigned int numNodes;// Offset=0x30 Size=0x4
    struct cNode_t * nodes;// Offset=0x34 Size=0x4
    unsigned int numLeafs;// Offset=0x38 Size=0x4
    struct cLeaf_t * leafs;// Offset=0x3c Size=0x4
    unsigned int leafbrushNodesCount;// Offset=0x40 Size=0x4
    struct cLeafBrushNode_s * leafbrushNodes;// Offset=0x44 Size=0x4
    unsigned int numLeafBrushes;// Offset=0x48 Size=0x4
    unsigned short * leafbrushes;// Offset=0x4c Size=0x4
    unsigned int numLeafSurfaces;// Offset=0x50 Size=0x4
    unsigned int * leafsurfaces;// Offset=0x54 Size=0x4
    unsigned int vertCount;// Offset=0x58 Size=0x4
    float * verts[3];// Offset=0x5c Size=0x4
    int triCount;// Offset=0x60 Size=0x4
    unsigned short * triIndices;// Offset=0x64 Size=0x4
    unsigned char * triEdgeIsWalkable;// Offset=0x68 Size=0x4
    int borderCount;// Offset=0x6c Size=0x4
    struct CollisionBorder * borders;// Offset=0x70 Size=0x4
    int partitionCount;// Offset=0x74 Size=0x4
    struct CollisionPartition * partitions;// Offset=0x78 Size=0x4
    int aabbTreeCount;// Offset=0x7c Size=0x4
    struct CollisionAabbTree * aabbTrees;// Offset=0x80 Size=0x4
    unsigned int numSubModels;// Offset=0x84 Size=0x4
    struct cmodel_t * cmodels;// Offset=0x88 Size=0x4
    unsigned short numBrushes;// Offset=0x8c Size=0x2
    unsigned char __align0[2];// Offset=0x8e Size=0x2
    struct cbrush_t * brushes;// Offset=0x90 Size=0x4
    struct Bounds * brushBounds;// Offset=0x94 Size=0x4
    int * brushContents;// Offset=0x98 Size=0x4
    struct MapEnts * mapEnts;// Offset=0x9c Size=0x4
    unsigned short smodelNodeCount;// Offset=0xa0 Size=0x2
    unsigned char __align1[2];// Offset=0xa2 Size=0x2
    struct SModelAabbNode * smodelNodes;// Offset=0xa4 Size=0x4
    unsigned short dynEntCount[2];// Offset=0xa8 Size=0x4
    struct DynEntityDef * dynEntDefList[2];// Offset=0xac Size=0x8
    struct DynEntityPose * dynEntPoseList[2];// Offset=0xb4 Size=0x8
    struct DynEntityClient * dynEntClientList[2];// Offset=0xbc Size=0x8
    struct DynEntityColl * dynEntCollList[2];// Offset=0xc4 Size=0x8
    unsigned int checksum;// Offset=0xcc Size=0x4
};

struct std::pair<DynEntSortStruct *,DynEntSortStruct *>// Size=0x8 (Id=6233)
{
    void pair<DynEntSortStruct *,DynEntSortStruct *>(struct DynEntSortStruct &** ,struct DynEntSortStruct &** );
    void pair<DynEntSortStruct *,DynEntSortStruct *>();
    void swap(struct std::pair<DynEntSortStruct *,DynEntSortStruct *> & );
    struct DynEntSortStruct * first;// Offset=0x0 Size=0x4
    struct DynEntSortStruct * second;// Offset=0x4 Size=0x4
};

struct DynEntSortStruct// Size=0x8 (Id=6234)
{
    float distSq;// Offset=0x0 Size=0x4
    unsigned short id;// Offset=0x4 Size=0x2
};

struct XAsset// Size=0x8 (Id=6235)
{
    enum XAssetType type;// Offset=0x0 Size=0x4
    union XAssetHeader header;// Offset=0x4 Size=0x4
};

struct XAssetList// Size=0x10 (Id=6236)
{
    struct ScriptStringList stringList;// Offset=0x0 Size=0x8
    int assetCount;// Offset=0x8 Size=0x4
    struct XAsset * assets;// Offset=0xc Size=0x4
};

enum DB_CloneType
{
    DB_CLONE_DEFAULT=0,
    DB_CLONE_NORMAL=1,
    DB_CLONE_SWAP=2,
    DB_CLONE_NORMAL_FROM_DEFAULT=3
};

union DB_StreamAddViewPos::__l2::<unnamed-type-$S1>// Size=0x2000 (Id=6238)
{
    unsigned int smodelSetBits[2048];// Offset=0x0 Size=0x2000
    unsigned int remappedSurfaceBits[2048];// Offset=0x0 Size=0x2000
};

struct DB_StreamAddViewPosInfo// Size=0x1c (Id=6239)
{
    float * staticModelStreamDist;// Offset=0x0 Size=0x4
    float * worldPriority;// Offset=0x4 Size=0x4
    float * modelRadius;// Offset=0x8 Size=0x4
    unsigned char * smodelVisData;// Offset=0xc Size=0x4
    unsigned char * surfaceVisData;// Offset=0x10 Size=0x4
    struct MaterialStreamLayerInfo * materialStreamInfoLayer;// Offset=0x14 Size=0x4
    float invViewScale;// Offset=0x18 Size=0x4
};

struct StreamGlob2// Size=0x15780 (Id=6240)
{
    unsigned int inuse[448];// Offset=0x0 Size=0x700
    int priority[14336];// Offset=0x700 Size=0xe000
    unsigned short sort[14336];// Offset=0xe700 Size=0x7000
    unsigned int sortCount;// Offset=0x15700 Size=0x4
};

struct MaterialStreamInfo// Size=0x10000 (Id=6241)
{
    float worldPriority[4096];// Offset=0x0 Size=0x4000
    struct MaterialStreamLayerInfo layer[4096];// Offset=0x4000 Size=0xc000
};

struct ClientStream// Size=0x2c0 (Id=6242)
{
    bool manualOriginValid[3][18];// Offset=0x0 Size=0x36
    unsigned char __align0[2];// Offset=0x36 Size=0x2
    float manualOrigin[3][18][3];// Offset=0x38 Size=0x288
};

struct MaterialStreamLayerInfo// Size=0xc (Id=6243)
{
    unsigned short material[6];// Offset=0x0 Size=0xc
};

struct StreamTabulationCmd// Size=0x54 (Id=6244)
{
    int msec;// Offset=0x0 Size=0x4
    int * lock;// Offset=0x4 Size=0x4
    struct StreamGlob * stream;// Offset=0x8 Size=0x4
    struct StreamGlob2 * stream2;// Offset=0xc Size=0x4
    struct GfxWorld * world;// Offset=0x10 Size=0x4
    struct FxWorld * fxWorld;// Offset=0x14 Size=0x4
    struct MaterialStreamInfo * materialStreamInfo;// Offset=0x18 Size=0x4
    float * staticModelStreamDist;// Offset=0x1c Size=0x4
    float invViewScale;// Offset=0x20 Size=0x4
    unsigned int materialInuseCount;// Offset=0x24 Size=0x4
    struct ClientStream * clientStream;// Offset=0x28 Size=0x4
    struct WeaponDef ** weaponDefs;// Offset=0x2c Size=0x4
    struct GfxBrushModel * bmodels;// Offset=0x30 Size=0x4
    int bmodelCount;// Offset=0x34 Size=0x4
    int surfaceCount;// Offset=0x38 Size=0x4
    struct GfxCellTree * aabbTrees;// Offset=0x3c Size=0x4
    unsigned char glassSysInitCount;// Offset=0x40 Size=0x1
    unsigned char __align0[3];// Offset=0x41 Size=0x3
    unsigned int glassSysDefCount;// Offset=0x44 Size=0x4
    struct FxGlassDef * glassSysDefs;// Offset=0x48 Size=0x4
    float glassShatteredScale;// Offset=0x4c Size=0x4
    int cumulativeTabulation;// Offset=0x50 Size=0x4
};

struct GfxPackedPlacement// Size=0x1c (Id=6245)
{
    float origin[3];// Offset=0x0 Size=0xc
    union PackedUnitVec axis[3];// Offset=0xc Size=0xc
    float scale;// Offset=0x18 Size=0x4
};

struct GfxStaticModelInst// Size=0x24 (Id=6246)
{
    struct Bounds bounds;// Offset=0x0 Size=0x18
    float lightingOrigin[3];// Offset=0x18 Size=0xc
};

struct GfxStaticModelDrawInst// Size=0x2c (Id=6247)
{
    struct GfxPackedPlacement placement;// Offset=0x0 Size=0x1c
    struct XModel * model;// Offset=0x1c Size=0x4
    unsigned short cullDist;// Offset=0x20 Size=0x2
    unsigned short lightingHandle;// Offset=0x22 Size=0x2
    unsigned char reflectionProbeIndex;// Offset=0x24 Size=0x1
    unsigned char primaryLightIndex;// Offset=0x25 Size=0x1
    unsigned char flags;// Offset=0x26 Size=0x1
    unsigned char firstMtlSkinIndex;// Offset=0x27 Size=0x1
    union GfxColor groundLighting;// Offset=0x28 Size=0x4
};

struct GfxStaticModelDrawInst// Size=0x2c (Id=6248)
{
    struct GfxPackedPlacement placement;// Offset=0x0 Size=0x1c
    struct XModel * model;// Offset=0x1c Size=0x4
    unsigned short cullDist;// Offset=0x20 Size=0x2
    unsigned short lightingHandle;// Offset=0x22 Size=0x2
    unsigned char reflectionProbeIndex;// Offset=0x24 Size=0x1
    unsigned char primaryLightIndex;// Offset=0x25 Size=0x1
    unsigned char flags;// Offset=0x26 Size=0x1
    unsigned char firstMtlSkinIndex;// Offset=0x27 Size=0x1
    union GfxColor groundLighting;// Offset=0x28 Size=0x4
};

struct SpuArrayIteratorLookup<GfxStaticModelDrawInst>// Size=0x8 (Id=6249)
{
    struct GfxStaticModelDrawInst * entry;// Offset=0x0 Size=0x4
    unsigned int index;// Offset=0x4 Size=0x4
};

struct XModelStream// Size=0xc (Id=6250)
{
    unsigned int materialCount;// Offset=0x0 Size=0x4
    struct XModelStreamMaterial * materials;// Offset=0x4 Size=0x4
    union // Size=0x4 (Id=0)
    {
        float invLodOutDist;// Offset=0x8 Size=0x4
        int invLodOutDistAsInt;// Offset=0x8 Size=0x4
    };
};

struct SpuArrayIteratorLookup<XModelStream>// Size=0x8 (Id=6251)
{
    struct XModelStream * entry;// Offset=0x0 Size=0x4
    unsigned int index;// Offset=0x4 Size=0x4
};

struct GfxSurfaceBounds// Size=0x20 (Id=6252)
{
    struct Bounds bounds;// Offset=0x0 Size=0x18
    unsigned short mipRadius;// Offset=0x18 Size=0x2
    unsigned char invHighMipRadius[5];// Offset=0x1a Size=0x5
};

struct SpuArrayIteratorLookup<GfxSurfaceBounds>// Size=0x8 (Id=6253)
{
    struct GfxSurfaceBounds * entry;// Offset=0x0 Size=0x4
    unsigned int index;// Offset=0x4 Size=0x4
};

struct MaterialStream// Size=0x1c (Id=6254)
{
    unsigned short imageCount[4];// Offset=0x0 Size=0x8
    unsigned short totalImageCount;// Offset=0x8 Size=0x2
    unsigned short images[4];// Offset=0xa Size=0x8
    unsigned char __align0[2];// Offset=0x12 Size=0x2
    unsigned short * totalImages;// Offset=0x14 Size=0x4
    float invMinTexLength;// Offset=0x18 Size=0x4
};

struct SpuArrayIteratorLookup<MaterialStream>// Size=0x8 (Id=6255)
{
    struct MaterialStream * entry;// Offset=0x0 Size=0x4
    unsigned int index;// Offset=0x4 Size=0x4
};

struct SpuArrayIteratorLookup<unsigned short>// Size=0x8 (Id=6256)
{
    unsigned short * entry;// Offset=0x0 Size=0x4
    unsigned int index;// Offset=0x4 Size=0x4
};

struct GfxSubImageStream// Size=0xc (Id=6257)
{
    unsigned int fileOffset;// Offset=0x0 Size=0x4
    unsigned int fileOffsetEnd;// Offset=0x4 Size=0x4
    struct DBFile * file;// Offset=0x8 Size=0x4
};

struct StreamChooseCmd// Size=0x14 (Id=6258)
{
    struct StreamGlob * stream;// Offset=0x0 Size=0x4
    struct StreamGlob2 * stream2;// Offset=0x4 Size=0x4
    int cumulativeTabulation;// Offset=0x8 Size=0x4
    struct DBFile * recentReadFile;// Offset=0xc Size=0x4
    unsigned int recentReadOffset;// Offset=0x10 Size=0x4
};

struct GfxImage// Size=0x70 (Id=6259)
{
    union GfxTexture texture;// Offset=0x0 Size=0x34
    int format;// Offset=0x34 Size=0x4
    unsigned char mapType;// Offset=0x38 Size=0x1
    unsigned char semantic;// Offset=0x39 Size=0x1
    unsigned char category;// Offset=0x3a Size=0x1
    unsigned char __align0[1];// Offset=0x3b Size=0x1
    struct CardMemory cardMemory;// Offset=0x3c Size=0x4
    unsigned short width;// Offset=0x40 Size=0x2
    unsigned short height;// Offset=0x42 Size=0x2
    unsigned short depth;// Offset=0x44 Size=0x2
    unsigned char levelCount;// Offset=0x46 Size=0x1
    unsigned char cached;// Offset=0x47 Size=0x1
    unsigned char * pixels;// Offset=0x48 Size=0x4
    struct GfxImageStreamData streams[4];// Offset=0x4c Size=0x20
    char * name;// Offset=0x6c Size=0x4
};

union FxElemVisuals// Size=0x4 (Id=6260)
{
    void * anonymous;// Offset=0x0 Size=0x4
    struct Material * material;// Offset=0x0 Size=0x4
    struct XModel * model;// Offset=0x0 Size=0x4
    union FxEffectDefRef effectDef;// Offset=0x0 Size=0x4
    char * soundName;// Offset=0x0 Size=0x4
};

struct clipMap_t// Size=0x100 (Id=6261)
{
    char * name;// Offset=0x0 Size=0x4
    int isInUse;// Offset=0x4 Size=0x4
    int planeCount;// Offset=0x8 Size=0x4
    struct cplane_s * planes;// Offset=0xc Size=0x4
    unsigned int numStaticModels;// Offset=0x10 Size=0x4
    struct cStaticModel_s * staticModelList;// Offset=0x14 Size=0x4
    unsigned int numMaterials;// Offset=0x18 Size=0x4
    struct ClipMaterial * materials;// Offset=0x1c Size=0x4
    unsigned int numBrushSides;// Offset=0x20 Size=0x4
    struct cbrushside_t * brushsides;// Offset=0x24 Size=0x4
    unsigned int numBrushEdges;// Offset=0x28 Size=0x4
    unsigned char * brushEdges;// Offset=0x2c Size=0x4
    unsigned int numNodes;// Offset=0x30 Size=0x4
    struct cNode_t * nodes;// Offset=0x34 Size=0x4
    unsigned int numLeafs;// Offset=0x38 Size=0x4
    struct cLeaf_t * leafs;// Offset=0x3c Size=0x4
    unsigned int leafbrushNodesCount;// Offset=0x40 Size=0x4
    struct cLeafBrushNode_s * leafbrushNodes;// Offset=0x44 Size=0x4
    unsigned int numLeafBrushes;// Offset=0x48 Size=0x4
    unsigned short * leafbrushes;// Offset=0x4c Size=0x4
    unsigned int numLeafSurfaces;// Offset=0x50 Size=0x4
    unsigned int * leafsurfaces;// Offset=0x54 Size=0x4
    unsigned int vertCount;// Offset=0x58 Size=0x4
    float * verts[3];// Offset=0x5c Size=0x4
    int triCount;// Offset=0x60 Size=0x4
    unsigned short * triIndices;// Offset=0x64 Size=0x4
    unsigned char * triEdgeIsWalkable;// Offset=0x68 Size=0x4
    int borderCount;// Offset=0x6c Size=0x4
    struct CollisionBorder * borders;// Offset=0x70 Size=0x4
    int partitionCount;// Offset=0x74 Size=0x4
    struct CollisionPartition * partitions;// Offset=0x78 Size=0x4
    int aabbTreeCount;// Offset=0x7c Size=0x4
    struct CollisionAabbTree * aabbTrees;// Offset=0x80 Size=0x4
    unsigned int numSubModels;// Offset=0x84 Size=0x4
    struct cmodel_t * cmodels;// Offset=0x88 Size=0x4
    unsigned short numBrushes;// Offset=0x8c Size=0x2
    unsigned char __align0[2];// Offset=0x8e Size=0x2
    struct cbrush_t * brushes;// Offset=0x90 Size=0x4
    struct Bounds * brushBounds;// Offset=0x94 Size=0x4
    int * brushContents;// Offset=0x98 Size=0x4
    struct MapEnts * mapEnts;// Offset=0x9c Size=0x4
    unsigned short smodelNodeCount;// Offset=0xa0 Size=0x2
    unsigned char __align1[2];// Offset=0xa2 Size=0x2
    struct SModelAabbNode * smodelNodes;// Offset=0xa4 Size=0x4
    unsigned short dynEntCount[2];// Offset=0xa8 Size=0x4
    struct DynEntityDef * dynEntDefList[2];// Offset=0xac Size=0x8
    struct DynEntityPose * dynEntPoseList[2];// Offset=0xb4 Size=0x8
    struct DynEntityClient * dynEntClientList[2];// Offset=0xbc Size=0x8
    struct DynEntityColl * dynEntCollList[2];// Offset=0xc4 Size=0x8
    unsigned int checksum;// Offset=0xcc Size=0x4
};

enum GfxRenderCommand
{
    RC_END_OF_LIST=0,
    RC_SET_MATERIAL_COLOR=1,
    RC_SAVE_SCREEN=2,
    RC_SAVE_SCREEN_SECTION=3,
    RC_CLEAR_SCREEN=4,
    RC_SET_VIEWPORT=5,
    RC_SET_SCISSOR=6,
    RC_CLEAR_SCISSOR=7,
    RC_FIRST_NONCRITICAL=8,
    RC_STRETCH_PIC=8,
    RC_STRETCH_PIC_FLIP_ST=9,
    RC_STRETCH_PIC_ROTATE_XY=10,
    RC_STRETCH_PIC_ROTATE_ST=11,
    RC_STRETCH_RAW=12,
    RC_DRAW_QUAD_PIC=13,
    RC_DRAW_FULL_SCREEN_COLORED_QUAD=14,
    RC_DRAW_TEXT_2D=15,
    RC_DRAW_TEXT_3D=16,
    RC_BLEND_SAVED_SCREEN_BLURRED=17,
    RC_BLEND_SAVED_SCREEN_FLASHED=18,
    RC_DRAW_POINTS=19,
    RC_DRAW_LINES=20,
    RC_DRAW_TRIANGLES=21,
    RC_PROJECTION_SET=22,
    RC_COUNT=23
};

enum _unnamed_6263
{
    R_SUNSHADOW_NEAR=0,
    R_SUNSHADOW_FAR=1,
    R_SUNSHADOW_PARTITION_COUNT=2
};

enum _unnamed_6264
{
    STATE_FLAG_CULL_BACK=1,
    STATE_FLAG_CULL_FRONT=2,
    STATE_FLAG_DECAL=4,
    STATE_FLAG_WRITES_DEPTH=8,
    STATE_FLAG_USES_DEPTH_BUFFER=16,
    STATE_FLAG_USES_STENCIL_BUFFER=32,
    STATE_FLAG_CULL_BACK_SHADOW=64,
    STATE_FLAG_CULL_FRONT_SHADOW=128
};

enum GfxDepthRangeType
{
    GFX_DEPTH_RANGE_SCENE=0,
    GFX_DEPTH_RANGE_VIEWMODEL=2,
    GFX_DEPTH_RANGE_FULL=-1
};

enum _unnamed_6266
{
    DRAWLIST_LIT_OPAQUE=0,
    DRAWLIST_LIGHTMAP_OPAQUE=1,
    DRAWLIST_LIGHTMAP_OPAQUE1=2,
    DRAWLIST_LIGHTMAP_OPAQUE2=3,
    DRAWLIST_LIT_TRANS=4,
    DRAWLIST_LIT_PREPASS_COUNT=5,
    DRAWLIST_DEPTH_HACK=5,
    DRAWLIST_LIT_COUNT=6,
    DRAWLIST_SHADOWMAP0=6,
    DRAWLIST_SHADOWMAP1=7,
    DRAWLIST_EMISSIVE=8,
    DRAWLIST_SPOTSHADOW0=9,
    DRAWLIST_SPOTSHADOW1=10,
    DRAWLIST_SPOTSHADOW2=11,
    DRAWLIST_SPOTSHADOW3=12,
    DRAWLIST_COUNT=13,
    DRAWLIST_PREPASS_LIT_OPAQUE=13,
    DRAWLIST_PREPASS_LIGHTMAP_OPAQUE=14,
    DRAWLIST_PREPASS_LIGHTMAP_OPAQUE1=15,
    DRAWLIST_PREPASS_LIGHTMAP_OPAQUE2=16,
    DRAWLIST_PREPASS_LIT_TRANS=17,
    DRAWLIST_OUTPUT_COUNT=18
};

enum _unnamed_6267
{
    GFXMESH_CODE_BEGIN=0,
    GFXMESH_CODE_TRANS=0,
    GFXMESH_CODE_EMISSIVE=1,
    GFXMESH_CODE_END=2,
    GFXMESH_GLASS=2,
    GFXMESH_MARK=3,
    GFXMESH_SPARK=4,
    GFXMESH_COUNT=5
};

enum _unnamed_6268
{
    R_SMODEL_SURFTYPE_RIGID=0,
    R_SMODEL_SURFTYPE_COUNT=1
};

struct GfxSunShadowPartition// Size=0x160 (Id=6269)
{
    struct GfxViewportParms viewportParms;// Offset=0x0 Size=0x160
};

struct GfxDrawListInfo// Size=0x174 (Id=6270)
{
    enum MaterialTechniqueType baseTechType;// Offset=0x0 Size=0x4
    struct GfxViewInfo * viewInfo;// Offset=0x4 Size=0x4
    float eyeOffset[3];// Offset=0x8 Size=0xc
    unsigned int sceneLightIndex;// Offset=0x14 Size=0x4
    int cameraView;// Offset=0x18 Size=0x4
    enum GfxCodeSurfListType codeSurfListType;// Offset=0x1c Size=0x4
    struct GfxSurfsIterGroup iterGroup;// Offset=0x20 Size=0x154
};

struct GfxDrawListArgs// Size=0xc (Id=6271)
{
    struct GfxCmdBufContext context;// Offset=0x0 Size=0x8
    struct GfxDrawListInfo * listInfo;// Offset=0x8 Size=0x4
};

struct GfxModelSurfaceInfo// Size=0x10 (Id=6272)
{
    struct DObjAnimMat * modelBasePoseMat;// Offset=0x0 Size=0x4
    unsigned char modelBoneIndex;// Offset=0x4 Size=0x1
    unsigned char modelBoneCount;// Offset=0x5 Size=0x1
    unsigned short gfxEntIndex;// Offset=0x6 Size=0x2
    unsigned short lightingHandle;// Offset=0x8 Size=0x2
    unsigned char __align0[2];// Offset=0xa Size=0x2
    union GfxColor ambientColor;// Offset=0xc Size=0x4
};

struct GfxSunShadowProjection// Size=0x20 (Id=6273)
{
    float switchPartition[4];// Offset=0x0 Size=0x10
    float shadowmapScale[4];// Offset=0x10 Size=0x10
};

struct GfxMetrics// Size=0x18 (Id=6274)
{
    unsigned short cubemapShotRes;// Offset=0x0 Size=0x2
    unsigned short cubemapShotPixelBorder;// Offset=0x2 Size=0x2
    unsigned short feedbackWidth;// Offset=0x4 Size=0x2
    unsigned short feedbackHeight;// Offset=0x6 Size=0x2
    bool hasAnisotropicMinFilter;// Offset=0x8 Size=0x1
    bool hasAnisotropicMagFilter;// Offset=0x9 Size=0x1
    unsigned char __align0[2];// Offset=0xa Size=0x2
    int maxAnisotropy;// Offset=0xc Size=0x4
    int maxClipPlanes;// Offset=0x10 Size=0x4
    unsigned char shadowmapSamplerState;// Offset=0x14 Size=0x1
    bool slopeScaleDepthBias;// Offset=0x15 Size=0x1
    bool canMipCubemaps;// Offset=0x16 Size=0x1
};

struct GfxQuadMeshData// Size=0x6c (Id=6275)
{
    float x;// Offset=0x0 Size=0x4
    float y;// Offset=0x4 Size=0x4
    float width;// Offset=0x8 Size=0x4
    float height;// Offset=0xc Size=0x4
    struct GfxMeshData meshData;// Offset=0x10 Size=0x5c
};

struct GfxMarkSurf// Size=0x10 (Id=6276)
{
    union GfxDrawGroupSetup drawGroup;// Offset=0x0 Size=0x4
    unsigned short * indices;// Offset=0x4 Size=0x4
    unsigned short triCount;// Offset=0x8 Size=0x2
    unsigned char modelType;// Offset=0xa Size=0x1
    unsigned char pad;// Offset=0xb Size=0x1
    union GfxMarkSurfLighting lighting;// Offset=0xc Size=0x4
};

struct GfxMarkSurfList// Size=0x8 (Id=6277)
{
    struct GfxMarkSurf * surfs;// Offset=0x0 Size=0x4
    unsigned int count;// Offset=0x4 Size=0x4
};

struct GfxDrawList// Size=0x1c4 (Id=6278)
{
    struct GfxBspSurfList bspSurfList;// Offset=0x0 Size=0x8
    struct GfxBspSurfList bspLightMapSurfList;// Offset=0x8 Size=0x8
    struct GfxSModelSurfList smodelSurfList[1];// Offset=0x10 Size=0xc
    struct GfxDrawSurfList drawSurfList;// Offset=0x1c Size=0x8
    struct GfxCodeSurfList codeSurfList;// Offset=0x24 Size=0x8
    struct GfxMarkSurfList markSurfList;// Offset=0x2c Size=0x8
    struct GfxGlassSurfList glassSurfList;// Offset=0x34 Size=0x8
    struct GfxCloudSurfList cloudSurfList;// Offset=0x3c Size=0xc
    struct GfxSparkSurfList sparkSurfList;// Offset=0x48 Size=0x8
    struct GfxDrawListInfo info;// Offset=0x50 Size=0x174
};

struct GfxMarkSurfIter// Size=0xc (Id=6279)
{
    union // Size=0xc (Id=0)
    {
        struct GfxMarkSurf * current;// Offset=0x0 Size=0x4
        struct GfxMarkSurf * end;// Offset=0x4 Size=0x4
        struct GfxMarkSurf * mark;// Offset=0x8 Size=0x4
        void InitFromSurfList(struct GfxMarkSurfIter * ,struct GfxMarkSurfList * );
        void InitFromDrawList(struct GfxMarkSurfIter * ,struct GfxDrawList * );
        void Shutdown(struct GfxMarkSurfIter * );
        struct GfxMarkSurfIter * GetSurfIter(struct GfxDrawListIter * );
        bool IsDone(struct GfxMarkSurfIter * );
        struct GfxMarkSurf * Current(struct GfxMarkSurfIter * );
        bool Advance(struct GfxMarkSurfIter * );
        void SkipToNextDrawGroup(struct GfxMarkSurfIter * );// Offset=0x0 Size=0x48
    };
    void SaveMark(struct GfxMarkSurfIter * );
    void GoToMark(struct GfxMarkSurfIter * );
    union GfxDrawGroupSetup GetDrawGroupSetup(struct GfxMarkSurfIter * );
    unsigned int GetPrimarySortKey(struct GfxMarkSurfIter * );
};

struct GfxMarkSurfIter// Size=0xc (Id=6280)
{
    union // Size=0xc (Id=0)
    {
        struct GfxMarkSurf * current;// Offset=0x0 Size=0x4
        struct GfxMarkSurf * end;// Offset=0x4 Size=0x4
        struct GfxMarkSurf * mark;// Offset=0x8 Size=0x4
        void InitFromSurfList(struct GfxMarkSurfIter * ,struct GfxMarkSurfList * );
        void InitFromDrawList(struct GfxMarkSurfIter * ,struct GfxDrawList * );
        void Shutdown(struct GfxMarkSurfIter * );
        struct GfxMarkSurfIter * GetSurfIter(struct GfxDrawListIter * );
        bool IsDone(struct GfxMarkSurfIter * );
        struct GfxMarkSurf * Current(struct GfxMarkSurfIter * );
        bool Advance(struct GfxMarkSurfIter * );
        void SkipToNextDrawGroup(struct GfxMarkSurfIter * );// Offset=0x0 Size=0x48
    };
    void SaveMark(struct GfxMarkSurfIter * );
    void GoToMark(struct GfxMarkSurfIter * );
    union GfxDrawGroupSetup GetDrawGroupSetup(struct GfxMarkSurfIter * );
    unsigned int GetPrimarySortKey(struct GfxMarkSurfIter * );
};

struct GfxSunShadow// Size=0x320 (Id=6281)
{
    struct GfxMatrix lookupMatrix;// Offset=0x0 Size=0x40
    struct GfxSunShadowProjection sunProj;// Offset=0x40 Size=0x20
    struct GfxSunShadowPartition partition[2];// Offset=0x60 Size=0x2c0
};

union GfxDrawSurf// Size=0x8 (Id=6282)
{
    struct GfxDrawSurfFields fields;// Offset=0x0 Size=0x8
    unsigned long long packed;// Offset=0x0 Size=0x8
};

struct GfxDrawSurfList// Size=0x8 (Id=6283)
{
    union GfxDrawSurf * array;// Offset=0x0 Size=0x4
    unsigned int count;// Offset=0x4 Size=0x4
};

struct GfxDrawSurfIter// Size=0xc (Id=6284)
{
    union // Size=0x58 (Id=0)
    {
        union GfxDrawSurf * current;// Offset=0x0 Size=0x4
        union GfxDrawSurf * end;// Offset=0x4 Size=0x4
        union GfxDrawSurf * mark;// Offset=0x8 Size=0x4
        void InitFromSurfList(struct GfxDrawSurfIter * ,struct GfxDrawSurfList * );
        void InitFromDrawList(struct GfxDrawSurfIter * ,struct GfxDrawList * );
        void Shutdown(struct GfxDrawSurfIter * );
        struct GfxDrawSurfIter * GetSurfIter(struct GfxDrawListIter * );
        int IsDone(struct GfxDrawSurfIter * );
        union GfxDrawSurf Current(struct GfxDrawSurfIter * );
        union GfxDrawSurf Next(struct GfxDrawSurfIter * );
        int Advance(struct GfxDrawSurfIter * );
        void SkipToNextDrawGroup(struct GfxDrawSurfIter * );// Offset=0x0 Size=0x58
        float GetDrawGroupDistSqEst(struct GfxDrawSurfIter * ,float * );// Offset=0x0 Size=0x12c
    };
    void SaveMark(struct GfxDrawSurfIter * );
    void GoToMark(struct GfxDrawSurfIter * );
    union GfxDrawGroupSetup GetDrawGroupSetup(struct GfxDrawSurfIter * );
    char * GetMaterialName(struct GfxDrawSurfIter * );
    unsigned int GetPrimarySortKey(struct GfxDrawSurfIter * );
};

struct GfxDrawSurfIter// Size=0xc (Id=6285)
{
    union // Size=0x58 (Id=0)
    {
        union GfxDrawSurf * current;// Offset=0x0 Size=0x4
        union GfxDrawSurf * end;// Offset=0x4 Size=0x4
        union GfxDrawSurf * mark;// Offset=0x8 Size=0x4
        void InitFromSurfList(struct GfxDrawSurfIter * ,struct GfxDrawSurfList * );
        void InitFromDrawList(struct GfxDrawSurfIter * ,struct GfxDrawList * );
        void Shutdown(struct GfxDrawSurfIter * );
        struct GfxDrawSurfIter * GetSurfIter(struct GfxDrawListIter * );
        int IsDone(struct GfxDrawSurfIter * );
        union GfxDrawSurf Current(struct GfxDrawSurfIter * );
        union GfxDrawSurf Next(struct GfxDrawSurfIter * );
        int Advance(struct GfxDrawSurfIter * );
        void SkipToNextDrawGroup(struct GfxDrawSurfIter * );// Offset=0x0 Size=0x58
        float GetDrawGroupDistSqEst(struct GfxDrawSurfIter * ,float * );// Offset=0x0 Size=0x12c
    };
    void SaveMark(struct GfxDrawSurfIter * );
    void GoToMark(struct GfxDrawSurfIter * );
    union GfxDrawGroupSetup GetDrawGroupSetup(struct GfxDrawSurfIter * );
    char * GetMaterialName(struct GfxDrawSurfIter * );
    unsigned int GetPrimarySortKey(struct GfxDrawSurfIter * );
};

struct GfxCloudSurfFields// Size=0x4 (Id=6286)
{
    unsigned short materialSortedIndex;// Offset=0x0 Size=0x2
    unsigned char cloudDataIndex;// Offset=0x2 Size=0x1
    unsigned char surfType;// Offset=0x3 Size=0x1
};

struct GfxStageInfo// Size=0x18 (Id=6287)
{
    struct Stage activeStage;// Offset=0x0 Size=0x14
    bool activeStageValid;// Offset=0x14 Size=0x1
};

struct GfxRenderTarget// Size=0x14 (Id=6288)
{
    struct GfxImage * image;// Offset=0x0 Size=0x4
    struct GfxRenderTargetSurface surface;// Offset=0x4 Size=0x8
    unsigned int width;// Offset=0xc Size=0x4
    unsigned int height;// Offset=0x10 Size=0x4
};

struct GfxCodeSurf// Size=0x10 (Id=6289)
{
    union GfxDrawGroupSetup drawGroup;// Offset=0x0 Size=0x4
    unsigned int triCount;// Offset=0x4 Size=0x4
    unsigned short * indices;// Offset=0x8 Size=0x4
    unsigned short argOffset;// Offset=0xc Size=0x2
    unsigned short argCount;// Offset=0xe Size=0x2
};

struct GfxCodeSurfList// Size=0x8 (Id=6290)
{
    struct GfxCodeSurf * surfs;// Offset=0x0 Size=0x4
    unsigned int count;// Offset=0x4 Size=0x4
};

struct GfxCodeSurfIter// Size=0x8 (Id=6291)
{
    union // Size=0x8 (Id=0)
    {
        struct GfxCodeSurf * current;// Offset=0x0 Size=0x4
        struct GfxCodeSurf * end;// Offset=0x4 Size=0x4
        void InitFromSurfList(struct GfxCodeSurfIter * ,struct GfxCodeSurfList * );
        void InitFromDrawList(struct GfxCodeSurfIter * ,struct GfxDrawList * );
        void Shutdown(struct GfxCodeSurfIter * );
        struct GfxCodeSurfIter * GetSurfIter(struct GfxDrawListIter * );
        bool IsDone(struct GfxCodeSurfIter * );
        struct GfxCodeSurf * Current(struct GfxCodeSurfIter * );
        struct GfxCodeSurf * Next(struct GfxCodeSurfIter * );
        bool Advance(struct GfxCodeSurfIter * );
        void SkipToNextDrawGroup(struct GfxCodeSurfIter * );// Offset=0x0 Size=0x48
    };
    void SaveMark(struct GfxCodeSurfIter * );
    void GoToMark(struct GfxCodeSurfIter * );
    union GfxDrawGroupSetup GetDrawGroupSetup(struct GfxCodeSurfIter * );
    char * GetMaterialName(struct GfxCodeSurfIter * );
    unsigned int GetPrimarySortKey(struct GfxCodeSurfIter * );
};

struct GfxCodeSurfIter// Size=0x8 (Id=6292)
{
    union // Size=0x8 (Id=0)
    {
        struct GfxCodeSurf * current;// Offset=0x0 Size=0x4
        struct GfxCodeSurf * end;// Offset=0x4 Size=0x4
        void InitFromSurfList(struct GfxCodeSurfIter * ,struct GfxCodeSurfList * );
        void InitFromDrawList(struct GfxCodeSurfIter * ,struct GfxDrawList * );
        void Shutdown(struct GfxCodeSurfIter * );
        struct GfxCodeSurfIter * GetSurfIter(struct GfxDrawListIter * );
        bool IsDone(struct GfxCodeSurfIter * );
        struct GfxCodeSurf * Current(struct GfxCodeSurfIter * );
        struct GfxCodeSurf * Next(struct GfxCodeSurfIter * );
        bool Advance(struct GfxCodeSurfIter * );
        void SkipToNextDrawGroup(struct GfxCodeSurfIter * );// Offset=0x0 Size=0x48
    };
    void SaveMark(struct GfxCodeSurfIter * );
    void GoToMark(struct GfxCodeSurfIter * );
    union GfxDrawGroupSetup GetDrawGroupSetup(struct GfxCodeSurfIter * );
    char * GetMaterialName(struct GfxCodeSurfIter * );
    unsigned int GetPrimarySortKey(struct GfxCodeSurfIter * );
};

struct GfxSpotShadowSceneLight// Size=0x50 (Id=6293)
{
    struct GfxMatrix lookupMatrix;// Offset=0x0 Size=0x40
    float fade;// Offset=0x40 Size=0x4
    struct GfxImage * image;// Offset=0x44 Size=0x4
};

struct GfxSurfsIterator// Size=0x1c (Id=6294)
{
    unsigned int sortKey;// Offset=0x0 Size=0x4
    unsigned int spliceIndex;// Offset=0x4 Size=0x4
    unsigned int  ( * GetSortKeyCallback)(struct GfxDrawListIter * );// Offset=0x8 Size=0x4
    bool  ( * RenderDrawGroupCallback)(struct GfxDrawListArgs * ,struct GfxDrawListIter * );// Offset=0xc Size=0x4
    bool  ( * RenderDrawGroupNoRenderCallback)(struct GfxDrawListIter * );// Offset=0x10 Size=0x4
    void  ( * SaveMarkCallback)(struct GfxDrawListIter * );// Offset=0x14 Size=0x4
    bool  ( * TerminateCallback)(struct GfxDrawListIter * );// Offset=0x18 Size=0x4
};

struct GfxRenderTargetSurface// Size=0x8 (Id=6295)
{
    struct D3DSurface * color;// Offset=0x0 Size=0x4
    struct D3DSurface * depthStencil;// Offset=0x4 Size=0x4
};

struct DB_StreamPrefetch// Size=0x8 (Id=6296)
{
    unsigned int index;// Offset=0x0 Size=0x4
    unsigned char * pixels;// Offset=0x4 Size=0x4
};

struct XAssetStreamFile// Size=0xc (Id=6297)
{
    unsigned int fileIndex;// Offset=0x0 Size=0x4
    unsigned int offset;// Offset=0x4 Size=0x4
    unsigned int offsetEnd;// Offset=0x8 Size=0x4
};

struct GfxSceneDef// Size=0x28 (Id=6298)
{
    int time;// Offset=0x0 Size=0x4
    float floatTime;// Offset=0x4 Size=0x4
    float viewOffset[3];// Offset=0x8 Size=0xc
    struct GfxImage * sunShadowImage;// Offset=0x14 Size=0x4
    float sunShadowPixelAdjust[4];// Offset=0x18 Size=0x10
};

struct GfxSModelSurfList// Size=0xc (Id=6299)
{
    unsigned int surfDataBytes;// Offset=0x0 Size=0x4
    unsigned char * surfData;// Offset=0x4 Size=0x4
    unsigned char * visData;// Offset=0x8 Size=0x4
};

struct GfxSModelSurfIter// Size=0x10 (Id=6300)
{
    union // Size=0xac (Id=0)
    {
        unsigned char * visData;// Offset=0x0 Size=0x4
        unsigned char * current;// Offset=0x4 Size=0x4
        unsigned char * end;// Offset=0x8 Size=0x4
        unsigned char * mark;// Offset=0xc Size=0x4
        void InitFromSurfList(struct GfxSModelSurfIter * ,struct GfxSModelSurfList * );
        void Shutdown(struct GfxSModelSurfIter * );
        bool IsDone(struct GfxSModelSurfIter * );
        unsigned short Next(struct GfxSModelSurfIter * );
        bool Advance(struct GfxSModelSurfIter * );
        void SkipToNextDrawGroup(struct GfxSModelSurfIter * );// Offset=0x0 Size=0xac
        float GetDrawGroupDistSqEst(struct GfxSModelSurfIter * ,float * );// Offset=0x0 Size=0x11c
    };
    void SaveMark(struct GfxSModelSurfIter * );
    void GoToMark(struct GfxSModelSurfIter * );
    unsigned int GetPrimarySortKey(struct GfxSModelSurfIter * );
};

struct GfxSModelSurfIter// Size=0x10 (Id=6301)
{
    union // Size=0xac (Id=0)
    {
        unsigned char * visData;// Offset=0x0 Size=0x4
        unsigned char * current;// Offset=0x4 Size=0x4
        unsigned char * end;// Offset=0x8 Size=0x4
        unsigned char * mark;// Offset=0xc Size=0x4
        void InitFromSurfList(struct GfxSModelSurfIter * ,struct GfxSModelSurfList * );
        void Shutdown(struct GfxSModelSurfIter * );
        bool IsDone(struct GfxSModelSurfIter * );
        unsigned short Next(struct GfxSModelSurfIter * );
        bool Advance(struct GfxSModelSurfIter * );
        void SkipToNextDrawGroup(struct GfxSModelSurfIter * );// Offset=0x0 Size=0xac
        float GetDrawGroupDistSqEst(struct GfxSModelSurfIter * ,float * );// Offset=0x0 Size=0x11c
    };
    void SaveMark(struct GfxSModelSurfIter * );
    void GoToMark(struct GfxSModelSurfIter * );
    unsigned int GetPrimarySortKey(struct GfxSModelSurfIter * );
};

struct GfxCmdHeader// Size=0x4 (Id=6302)
{
    unsigned short id;// Offset=0x0 Size=0x2
    unsigned short byteCount;// Offset=0x2 Size=0x2
};

struct GfxDrawSurfList// Size=0x8 (Id=6303)
{
    union GfxDrawSurf * array;// Offset=0x0 Size=0x4
    unsigned int count;// Offset=0x4 Size=0x4
};

union GfxSparkSurf// Size=0x4 (Id=6304)
{
    struct GfxSparkSurfFields fields;// Offset=0x0 Size=0x4
    unsigned int packed;// Offset=0x0 Size=0x4
};

struct GfxSparkSurfList// Size=0x8 (Id=6305)
{
    union GfxSparkSurf * surfs;// Offset=0x0 Size=0x4
    unsigned int count;// Offset=0x4 Size=0x4
};

struct GfxSparkSurfIter// Size=0x8 (Id=6306)
{
    union // Size=0x8 (Id=0)
    {
        union GfxSparkSurf * current;// Offset=0x0 Size=0x4
        union GfxSparkSurf * end;// Offset=0x4 Size=0x4
        void InitFromSurfList(struct GfxSparkSurfIter * ,struct GfxSparkSurfList * );
        void InitFromDrawList(struct GfxSparkSurfIter * ,struct GfxDrawList * );
        void Shutdown(struct GfxSparkSurfIter * );
        struct GfxSparkSurfIter * GetSurfIter(struct GfxDrawListIter * );
        bool IsDone(struct GfxSparkSurfIter * );
        union GfxSparkSurf Current(struct GfxSparkSurfIter * );
        union GfxSparkSurf Next(struct GfxSparkSurfIter * );
        bool Advance(struct GfxSparkSurfIter * );
        void SkipToNextDrawGroup(struct GfxSparkSurfIter * );// Offset=0x0 Size=0x58
    };
    void SaveMark(struct GfxSparkSurfIter * );
    void GoToMark(struct GfxSparkSurfIter * );
    union GfxDrawGroupSetup GetDrawGroupSetup(struct GfxSparkSurfIter * );
    unsigned int GetPrimarySortKey(struct GfxSparkSurfIter * );
};

struct GfxSparkSurfIter// Size=0x8 (Id=6307)
{
    union // Size=0x8 (Id=0)
    {
        union GfxSparkSurf * current;// Offset=0x0 Size=0x4
        union GfxSparkSurf * end;// Offset=0x4 Size=0x4
        void InitFromSurfList(struct GfxSparkSurfIter * ,struct GfxSparkSurfList * );
        void InitFromDrawList(struct GfxSparkSurfIter * ,struct GfxDrawList * );
        void Shutdown(struct GfxSparkSurfIter * );
        struct GfxSparkSurfIter * GetSurfIter(struct GfxDrawListIter * );
        bool IsDone(struct GfxSparkSurfIter * );
        union GfxSparkSurf Current(struct GfxSparkSurfIter * );
        union GfxSparkSurf Next(struct GfxSparkSurfIter * );
        bool Advance(struct GfxSparkSurfIter * );
        void SkipToNextDrawGroup(struct GfxSparkSurfIter * );// Offset=0x0 Size=0x58
    };
    void SaveMark(struct GfxSparkSurfIter * );
    void GoToMark(struct GfxSparkSurfIter * );
    union GfxDrawGroupSetup GetDrawGroupSetup(struct GfxSparkSurfIter * );
    unsigned int GetPrimarySortKey(struct GfxSparkSurfIter * );
};

union GfxCloudSurf// Size=0x4 (Id=6308)
{
    struct GfxCloudSurfFields fields;// Offset=0x0 Size=0x4
    unsigned int packed;// Offset=0x0 Size=0x4
};

struct GfxCloudSurfList// Size=0xc (Id=6309)
{
    struct GfxParticleCloud * particles;// Offset=0x0 Size=0x4
    union GfxCloudSurf * surfs;// Offset=0x4 Size=0x4
    unsigned int count;// Offset=0x8 Size=0x4
};

struct GfxCloudSurfIter// Size=0x8 (Id=6310)
{
    union // Size=0x8 (Id=0)
    {
        union GfxCloudSurf * current;// Offset=0x0 Size=0x4
        union GfxCloudSurf * end;// Offset=0x4 Size=0x4
        void InitFromSurfList(struct GfxCloudSurfIter * ,struct GfxCloudSurfList * );
        void InitFromDrawList(struct GfxCloudSurfIter * ,struct GfxDrawList * );
        void Shutdown(struct GfxCloudSurfIter * );
        struct GfxCloudSurfIter * GetSurfIter(struct GfxDrawListIter * );
        bool IsDone(struct GfxCloudSurfIter * );
        union GfxCloudSurf Current(struct GfxCloudSurfIter * );
        union GfxCloudSurf Next(struct GfxCloudSurfIter * );
        bool Advance(struct GfxCloudSurfIter * );
        void SkipToNextDrawGroup(struct GfxCloudSurfIter * );// Offset=0x0 Size=0x64
    };
    void SaveMark(struct GfxCloudSurfIter * );
    void GoToMark(struct GfxCloudSurfIter * );
    union GfxDrawGroupSetup GetDrawGroupSetup(struct GfxCloudSurfIter * );
    unsigned int GetPrimarySortKey(struct GfxCloudSurfIter * );
};

struct GfxCloudSurfIter// Size=0x8 (Id=6311)
{
    union // Size=0x8 (Id=0)
    {
        union GfxCloudSurf * current;// Offset=0x0 Size=0x4
        union GfxCloudSurf * end;// Offset=0x4 Size=0x4
        void InitFromSurfList(struct GfxCloudSurfIter * ,struct GfxCloudSurfList * );
        void InitFromDrawList(struct GfxCloudSurfIter * ,struct GfxDrawList * );
        void Shutdown(struct GfxCloudSurfIter * );
        struct GfxCloudSurfIter * GetSurfIter(struct GfxDrawListIter * );
        bool IsDone(struct GfxCloudSurfIter * );
        union GfxCloudSurf Current(struct GfxCloudSurfIter * );
        union GfxCloudSurf Next(struct GfxCloudSurfIter * );
        bool Advance(struct GfxCloudSurfIter * );
        void SkipToNextDrawGroup(struct GfxCloudSurfIter * );// Offset=0x0 Size=0x64
    };
    void SaveMark(struct GfxCloudSurfIter * );
    void GoToMark(struct GfxCloudSurfIter * );
    union GfxDrawGroupSetup GetDrawGroupSetup(struct GfxCloudSurfIter * );
    unsigned int GetPrimarySortKey(struct GfxCloudSurfIter * );
};

struct GfxVertexBufferState// Size=0x2c (Id=6312)
{
    long used;// Offset=0x0 Size=0x4
    int total;// Offset=0x4 Size=0x4
    struct D3DVertexBuffer buffer;// Offset=0x8 Size=0x20
    unsigned char * verts;// Offset=0x28 Size=0x4
};

struct GfxCmdBufContext// Size=0x8 (Id=6313)
{
    struct GfxCmdBufSourceState * source;// Offset=0x0 Size=0x4
    struct GfxCmdBufState * state;// Offset=0x4 Size=0x4
};

struct GfxMeshData// Size=0x5c (Id=6314)
{
    unsigned int indexCount;// Offset=0x0 Size=0x4
    unsigned int totalIndexCount;// Offset=0x4 Size=0x4
    struct D3DIndexBuffer ib;// Offset=0x8 Size=0x20
    unsigned short * indices;// Offset=0x28 Size=0x4
    struct GfxVertexBufferState vb;// Offset=0x2c Size=0x2c
    unsigned int vertSize;// Offset=0x58 Size=0x4
};

struct GfxCodeMatrices// Size=0xe00 (Id=6315)
{
    struct GfxMatrix matrix[56];// Offset=0x0 Size=0xe00
};

struct GfxEntity// Size=0x8 (Id=6316)
{
    unsigned int renderFxFlags;// Offset=0x0 Size=0x4
    float materialTime;// Offset=0x4 Size=0x4
};

struct GfxCloudSurfList// Size=0xc (Id=6317)
{
    struct GfxParticleCloud * particles;// Offset=0x0 Size=0x4
    union GfxCloudSurf * surfs;// Offset=0x4 Size=0x4
    unsigned int count;// Offset=0x8 Size=0x4
};

struct GfxBackEndPrimitiveData// Size=0x4 (Id=6318)
{
    int hasSunDirChanged;// Offset=0x0 Size=0x4
};

struct GfxBspSurfList// Size=0x8 (Id=6319)
{
    unsigned int count;// Offset=0x0 Size=0x4
    unsigned short * stream;// Offset=0x4 Size=0x4
};

struct GfxBspLightMapSurfIter : public GfxBspSurfIter// Size=0xc (Id=6320)
{
    struct GfxBspLightMapSurfIter * GetSurfIter(struct GfxDrawListIter * );
    union GfxDrawGroupSetup GetDrawGroupSetup(struct GfxBspLightMapSurfIter * );
    void InitFromSurfList(struct GfxBspLightMapSurfIter * ,struct GfxBspSurfList * );
    void InitFromDrawList(struct GfxBspLightMapSurfIter * ,struct GfxDrawList * );
};

struct GfxCmdBuf// Size=0x8 (Id=6321)
{
    struct D3DDevice * device;// Offset=0x0 Size=0x4
    struct D3DCommandBuffer * buf;// Offset=0x4 Size=0x4
};

union GfxCloudSurf// Size=0x4 (Id=6322)
{
    struct GfxCloudSurfFields fields;// Offset=0x0 Size=0x4
    unsigned int packed;// Offset=0x0 Size=0x4
};

struct GfxModelRigidSurface// Size=0x101c (Id=6323)
{
    struct GfxModelBaseSurface base;// Offset=0x0 Size=0x14
    struct XSurface * xsurf;// Offset=0x14 Size=0x4
    float scale;// Offset=0x18 Size=0x4
    struct GfxModelRigidChildSurface children[128];// Offset=0x1c Size=0x1000
};

struct GfxBspSurfIter// Size=0xc (Id=6324)
{
    union // Size=0xb8 (Id=0)
    {
        unsigned short * current;// Offset=0x0 Size=0x4
        unsigned short * end;// Offset=0x4 Size=0x4
        unsigned short * mark;// Offset=0x8 Size=0x4
        void InitFromSurfList(struct GfxBspSurfIter * ,struct GfxBspSurfList * );
        void InitFromDrawList(struct GfxBspSurfIter * ,struct GfxDrawList * );
        void Shutdown(struct GfxBspSurfIter * );
        struct GfxBspSurfIter * GetSurfIter(struct GfxDrawListIter * );
        bool IsDone(struct GfxBspSurfIter * );
        unsigned short Current(struct GfxBspSurfIter * );
        unsigned short Next(struct GfxBspSurfIter * );
        void Advance(struct GfxBspSurfIter * );
        void SkipToRestart(struct GfxBspSurfIter * );
        void SkipToNextDrawGroup(struct GfxBspSurfIter * );// Offset=0x0 Size=0xb8
        float GetDrawGroupDistSqEst(struct GfxBspSurfIter * ,float * );// Offset=0x0 Size=0x174
    };
    void SaveMark(struct GfxBspSurfIter * );
    void GoToMark(struct GfxBspSurfIter * );
    union GfxDrawGroupSetup GetDrawGroupSetup(struct GfxBspSurfIter * );
    char * GetMaterialName(struct GfxBspSurfIter * );
    unsigned int GetPrimarySortKey(struct GfxBspSurfIter * );
};

struct GfxBspSurfIter// Size=0xc (Id=6325)
{
    union // Size=0xb8 (Id=0)
    {
        unsigned short * current;// Offset=0x0 Size=0x4
        unsigned short * end;// Offset=0x4 Size=0x4
        unsigned short * mark;// Offset=0x8 Size=0x4
        void InitFromSurfList(struct GfxBspSurfIter * ,struct GfxBspSurfList * );
        void InitFromDrawList(struct GfxBspSurfIter * ,struct GfxDrawList * );
        void Shutdown(struct GfxBspSurfIter * );
        struct GfxBspSurfIter * GetSurfIter(struct GfxDrawListIter * );
        bool IsDone(struct GfxBspSurfIter * );
        unsigned short Current(struct GfxBspSurfIter * );
        unsigned short Next(struct GfxBspSurfIter * );
        void Advance(struct GfxBspSurfIter * );
        void SkipToRestart(struct GfxBspSurfIter * );
        void SkipToNextDrawGroup(struct GfxBspSurfIter * );// Offset=0x0 Size=0xb8
        float GetDrawGroupDistSqEst(struct GfxBspSurfIter * ,float * );// Offset=0x0 Size=0x174
    };
    void SaveMark(struct GfxBspSurfIter * );
    void GoToMark(struct GfxBspSurfIter * );
    union GfxDrawGroupSetup GetDrawGroupSetup(struct GfxBspSurfIter * );
    char * GetMaterialName(struct GfxBspSurfIter * );
    unsigned int GetPrimarySortKey(struct GfxBspSurfIter * );
};

enum GfxViewMode
{
    VIEW_MODE_NONE=0,
    VIEW_MODE_3D=1,
    VIEW_MODE_2D=2,
    VIEW_MODE_IDENTITY=3
};

enum GfxViewportBehavior
{
    GFX_USE_VIEWPORT_FOR_VIEW=0,
    GFX_USE_VIEWPORT_FULL=1
};

struct GfxCmdBufSourceState// Size=0x16a0 (Id=6328)
{
    struct GfxCodeMatrices matrices;// Offset=0x0 Size=0xe00
    struct GfxCmdBufInput input;// Offset=0xe00 Size=0x540
    struct GfxViewParms viewParms;// Offset=0x1340 Size=0x150
    float eyeOffset[4];// Offset=0x1490 Size=0x10
    struct GfxMatrix shadowLookupMatrix;// Offset=0x14a0 Size=0x40
    unsigned short constVersions[131];// Offset=0x14e0 Size=0x106
    unsigned short matrixVersions[14];// Offset=0x15e6 Size=0x1c
    unsigned char __align0[2];// Offset=0x1602 Size=0x2
    unsigned int sceneLightForShadowLookupMatrix;// Offset=0x1604 Size=0x4
    struct GfxPlacement * objectPlacement[3];// Offset=0x1608 Size=0xc
    struct GfxViewParms * viewParms3D;// Offset=0x1614 Size=0x4
    unsigned int depthHackFlags;// Offset=0x1618 Size=0x4
    struct GfxScaledPlacement skinnedPlacement;// Offset=0x161c Size=0x20
    int cameraView;// Offset=0x163c Size=0x4
    enum GfxViewMode viewMode;// Offset=0x1640 Size=0x4
    struct GfxSceneDef sceneDef;// Offset=0x1644 Size=0x28
    struct GfxViewport sceneViewport;// Offset=0x166c Size=0x10
    float materialTime;// Offset=0x167c Size=0x4
    enum GfxViewportBehavior viewportBehavior;// Offset=0x1680 Size=0x4
    int renderTargetWidth;// Offset=0x1684 Size=0x4
    int renderTargetHeight;// Offset=0x1688 Size=0x4
    bool viewportIsDirty;// Offset=0x168c Size=0x1
    unsigned char __align1[3];// Offset=0x168d Size=0x3
    unsigned int sceneLightIndex;// Offset=0x1690 Size=0x4
    bool useHeroLighting;// Offset=0x1694 Size=0x1
};

struct GfxSurfsIterGroup// Size=0x154 (Id=6329)
{
    unsigned int iteratorBegin;// Offset=0x0 Size=0x4
    unsigned int iteratorCount;// Offset=0x4 Size=0x4
    struct GfxDrawListIter drawListIter;// Offset=0x8 Size=0x6c
    struct GfxSurfsIterator iteratorPool[8];// Offset=0x74 Size=0xe0
};

struct GfxCmdBufInput// Size=0x540 (Id=6330)
{
    float consts[75][4];// Offset=0x0 Size=0x4b0
    struct GfxImage * codeImages[28];// Offset=0x4b0 Size=0x70
    unsigned char codeImageSamplerStates[28];// Offset=0x520 Size=0x1c
    struct GfxBackEndData * data;// Offset=0x53c Size=0x4
};

struct GfxGlassSurf// Size=0x10 (Id=6331)
{
    union GfxDrawGroupSetup drawGroup;// Offset=0x0 Size=0x4
    unsigned char pad;// Offset=0x4 Size=0x1
    unsigned char reflectionProbeIndex;// Offset=0x5 Size=0x1
    unsigned short triCount;// Offset=0x6 Size=0x2
    unsigned short * indices;// Offset=0x8 Size=0x4
    unsigned short lightingHandle;// Offset=0xc Size=0x2
};

struct GfxGlassSurfList// Size=0x8 (Id=6332)
{
    struct GfxGlassSurf * surfs;// Offset=0x0 Size=0x4
    unsigned int count;// Offset=0x4 Size=0x4
};

struct GfxGlassSurfIter// Size=0xc (Id=6333)
{
    union // Size=0xc (Id=0)
    {
        struct GfxGlassSurf * current;// Offset=0x0 Size=0x4
        struct GfxGlassSurf * end;// Offset=0x4 Size=0x4
        struct GfxGlassSurf * mark;// Offset=0x8 Size=0x4
        void InitFromSurfList(struct GfxGlassSurfIter * ,struct GfxGlassSurfList * );
        void InitFromDrawList(struct GfxGlassSurfIter * ,struct GfxDrawList * );
        void Shutdown(struct GfxGlassSurfIter * );
        struct GfxGlassSurfIter * GetSurfIter(struct GfxDrawListIter * );
        bool IsDone(struct GfxGlassSurfIter * );
        struct GfxGlassSurf * Current(struct GfxGlassSurfIter * );
        bool Advance(struct GfxGlassSurfIter * );
        void SkipToNextDrawGroup(struct GfxGlassSurfIter * );// Offset=0x0 Size=0x48
    };
    void SaveMark(struct GfxGlassSurfIter * );
    void GoToMark(struct GfxGlassSurfIter * );
    union GfxDrawGroupSetup GetDrawGroupSetup(struct GfxGlassSurfIter * );
    unsigned int GetPrimarySortKey(struct GfxGlassSurfIter * );
};

struct GfxGlassSurfIter// Size=0xc (Id=6334)
{
    union // Size=0xc (Id=0)
    {
        struct GfxGlassSurf * current;// Offset=0x0 Size=0x4
        struct GfxGlassSurf * end;// Offset=0x4 Size=0x4
        struct GfxGlassSurf * mark;// Offset=0x8 Size=0x4
        void InitFromSurfList(struct GfxGlassSurfIter * ,struct GfxGlassSurfList * );
        void InitFromDrawList(struct GfxGlassSurfIter * ,struct GfxDrawList * );
        void Shutdown(struct GfxGlassSurfIter * );
        struct GfxGlassSurfIter * GetSurfIter(struct GfxDrawListIter * );
        bool IsDone(struct GfxGlassSurfIter * );
        struct GfxGlassSurf * Current(struct GfxGlassSurfIter * );
        bool Advance(struct GfxGlassSurfIter * );
        void SkipToNextDrawGroup(struct GfxGlassSurfIter * );// Offset=0x0 Size=0x48
    };
    void SaveMark(struct GfxGlassSurfIter * );
    void GoToMark(struct GfxGlassSurfIter * );
    union GfxDrawGroupSetup GetDrawGroupSetup(struct GfxGlassSurfIter * );
    unsigned int GetPrimarySortKey(struct GfxGlassSurfIter * );
};

struct GfxViewportParms// Size=0x160 (Id=6335)
{
    struct GfxViewport viewport;// Offset=0x0 Size=0x10
    struct GfxViewParms viewParms;// Offset=0x10 Size=0x150
};

struct GfxModelBaseSurface// Size=0x14 (Id=6336)
{
    int skinnedCachedOffset;// Offset=0x0 Size=0x4
    struct GfxModelSurfaceInfo info;// Offset=0x4 Size=0x10
};

struct GfxSpliceSurfs// Size=0x700 (Id=6337)
{
    unsigned int iteratorBegin;// Offset=0x0 Size=0x4
    unsigned int iteratorCount;// Offset=0x4 Size=0x4
    unsigned int spliceCount;// Offset=0x8 Size=0x4
    struct GfxDrawListIter drawListIter[5];// Offset=0xc Size=0x21c
    struct GfxViewport scissorViewport[5];// Offset=0x228 Size=0x50
    int isSceneViewport[5];// Offset=0x278 Size=0x14
    struct GfxDrawListInfo * dynLightDrawListInfo[5];// Offset=0x28c Size=0x14
    struct GfxSurfsIterator iteratorPool[40];// Offset=0x2a0 Size=0x460
};

struct GfxLight// Size=0x40 (Id=6338)
{
    unsigned char type;// Offset=0x0 Size=0x1
    unsigned char canUseShadowMap;// Offset=0x1 Size=0x1
    unsigned char unused[2];// Offset=0x2 Size=0x2
    float color[3];// Offset=0x4 Size=0xc
    float dir[3];// Offset=0x10 Size=0xc
    float origin[3];// Offset=0x1c Size=0xc
    float radius;// Offset=0x28 Size=0x4
    float cosHalfFovOuter;// Offset=0x2c Size=0x4
    float cosHalfFovInner;// Offset=0x30 Size=0x4
    int exponent;// Offset=0x34 Size=0x4
    unsigned int spotShadowIndex;// Offset=0x38 Size=0x4
    struct GfxLightDef * def;// Offset=0x3c Size=0x4
};

struct GfxSpotShadow// Size=0x1d0 (Id=6339)
{
    struct GfxSpotShadowSceneLight sceneLight;// Offset=0x0 Size=0x50
    struct GfxViewportParms viewportParms;// Offset=0x50 Size=0x160
    unsigned char sceneLightIndex;// Offset=0x1b0 Size=0x1
    unsigned char pad[3];// Offset=0x1b1 Size=0x3
    struct GfxLight * light;// Offset=0x1b4 Size=0x4
    enum GfxRenderTargetId renderTargetId;// Offset=0x1b8 Size=0x4
    float pixelAdjust[4];// Offset=0x1bc Size=0x10
};

enum ShadowType
{
    SHADOW_NONE=0,
    SHADOW_MAP=1
};

struct GfxViewInfo// Size=0x1f50 (Id=6341)
{
    struct GfxViewParms viewParms;// Offset=0x0 Size=0x150
    struct GfxViewport sceneViewport;// Offset=0x150 Size=0x10
    struct GfxViewport displayViewport;// Offset=0x160 Size=0x10
    struct GfxViewport scissorViewport;// Offset=0x170 Size=0x10
    struct GfxSceneDef sceneDef;// Offset=0x180 Size=0x28
    enum ShadowType dynamicShadowType;// Offset=0x1a8 Size=0x4
    bool needsDistortionResolve;// Offset=0x1ac Size=0x1
    bool viewModelHasDistortion;// Offset=0x1ad Size=0x1
    unsigned char forceSunShadowsGenerate;// Offset=0x1ae Size=0x1
    bool halfResParticles;// Offset=0x1af Size=0x1
    unsigned int sceneLightCount;// Offset=0x1b0 Size=0x4
    float blurRadius;// Offset=0x1b4 Size=0x4
    float frustumPlanes[4][4];// Offset=0x1b8 Size=0x40
    struct GfxDepthOfField dof;// Offset=0x1f8 Size=0x20
    struct GfxFilm film;// Offset=0x218 Size=0x3c
    struct GfxGlow glow;// Offset=0x254 Size=0x14
    struct GfxLightScale charPrimaryLightScale;// Offset=0x268 Size=0x8
    struct GfxStageInfo stageInfo;// Offset=0x270 Size=0x18
    struct GfxCompositeFx waterSheetingFx;// Offset=0x288 Size=0x6c
    void * displayCmds;// Offset=0x2f4 Size=0x4
    struct GfxQuadMeshData * fullSceneViewMesh;// Offset=0x2f8 Size=0x4
    struct GfxDrawList drawList[13];// Offset=0x2fc Size=0x16f4
    struct GfxCmdBufInput input;// Offset=0x19f0 Size=0x540
    enum GfxRenderTargetId renderTargetId;// Offset=0x1f30 Size=0x4
    bool useShadows;// Offset=0x1f34 Size=0x1
    unsigned char __align0[3];// Offset=0x1f35 Size=0x3
    unsigned int sunShadowResolution;// Offset=0x1f38 Size=0x4
    enum GfxRenderTargetId sunShadowRenderTargetId;// Offset=0x1f3c Size=0x4
    unsigned int sunShadowTileCount;// Offset=0x1f40 Size=0x4
};

struct GfxVertex// Size=0x20 (Id=6342)
{
    float xyzw[4];// Offset=0x0 Size=0x10
    union GfxColor color;// Offset=0x10 Size=0x4
    float texCoord[2];// Offset=0x14 Size=0x8
    union PackedUnitVec normal;// Offset=0x1c Size=0x4
};

struct FxSparkMeshData// Size=0x50 (Id=6343)
{
    unsigned int triCount;// Offset=0x0 Size=0x4
    unsigned short * indices;// Offset=0x4 Size=0x4
    unsigned int baseVertex;// Offset=0x8 Size=0x4
    unsigned char pad[4];// Offset=0xc Size=0x4
    struct GfxParticleCloud cloud;// Offset=0x10 Size=0x40
};

struct GfxSModelRigidSurfIter : public GfxSModelSurfIter// Size=0x10 (Id=6344)
{
    void InitFromDrawList(struct GfxSModelRigidSurfIter * ,struct GfxDrawList * );
    struct GfxSModelRigidSurfIter * GetSurfIter(struct GfxDrawListIter * );
    union GfxDrawGroupSetup GetDrawGroupSetup(struct GfxSModelRigidSurfIter * );
};

struct GfxDrawCallOutput// Size=0x10 (Id=6345)
{
    struct GfxCmdBuf cmdBuf;// Offset=0x0 Size=0x8
    long cmdCount;// Offset=0x8 Size=0x4
    long inCmdCount;// Offset=0xc Size=0x4
};

struct GfxDrawListIter// Size=0x6c (Id=6346)
{
    int addedPrimitive;// Offset=0x0 Size=0x4
    struct GfxCmdRingBuf * cmdBuf;// Offset=0x4 Size=0x4
    struct GfxBspSurfIter bspSurfIter;// Offset=0x8 Size=0xc
    struct GfxBspLightMapSurfIter bspLightMapSurfIter;// Offset=0x14 Size=0xc
    struct GfxSModelRigidSurfIter smodelRigidSurfIter;// Offset=0x20 Size=0x10
    struct GfxDrawSurfIter drawSurfIter;// Offset=0x30 Size=0xc
    struct GfxCodeSurfIter codeSurfIter;// Offset=0x3c Size=0x8
    struct GfxMarkSurfIter markSurfIter;// Offset=0x44 Size=0xc
    struct GfxGlassSurfIter glassSurfIter;// Offset=0x50 Size=0xc
    struct GfxCloudSurfIter cloudSurfIter;// Offset=0x5c Size=0x8
    struct GfxSparkSurfIter sparkSurfIter;// Offset=0x64 Size=0x8
};

struct GfxBspSurfList// Size=0x8 (Id=6347)
{
    unsigned int count;// Offset=0x0 Size=0x4
    unsigned short * stream;// Offset=0x4 Size=0x4
};

struct GfxCmdArray// Size=0x10 (Id=6348)
{
    unsigned char * cmds;// Offset=0x0 Size=0x4
    int usedTotal;// Offset=0x4 Size=0x4
    int usedCritical;// Offset=0x8 Size=0x4
    struct GfxCmdHeader * lastCmd;// Offset=0xc Size=0x4
};

struct GfxBackEndData// Size=0x86c00 (Id=6349)
{
    unsigned char sceneLightTechType[13][256];// Offset=0x0 Size=0xd00
    union GfxSparkSurf sparkSurfs[64];// Offset=0xd00 Size=0x100
    struct GfxViewParms viewParms[4];// Offset=0xe00 Size=0x540
    struct GfxMeshData mesh[5];// Offset=0x1340 Size=0x1cc
    int localClientNum;// Offset=0x150c Size=0x4
    struct GfxBackEndPrimitiveData prim;// Offset=0x1510 Size=0x4
    long bspSurfDataUsed;// Offset=0x1514 Size=0x4
    long smodelSurfDataUsed;// Offset=0x1518 Size=0x4
    long smodelSurfVisDataUsed;// Offset=0x151c Size=0x4
    unsigned int sceneLightHasShadowMap[8];// Offset=0x1520 Size=0x20
    int drawSurfCount;// Offset=0x1540 Size=0x4
    long surfPos;// Offset=0x1544 Size=0x4
    long gfxEntCount;// Offset=0x1548 Size=0x4
    unsigned int codeSurfCount[2];// Offset=0x154c Size=0x8
    unsigned int codeSurfArgsCount[2];// Offset=0x1554 Size=0x8
    long cloudDataCount;// Offset=0x155c Size=0x4
    unsigned int glassSurfCount;// Offset=0x1560 Size=0x4
    unsigned int markSurfCount;// Offset=0x1564 Size=0x4
    long sparkSurfCount;// Offset=0x1568 Size=0x4
    struct GfxVertexBufferState * skinnedCacheVb;// Offset=0x156c Size=0x4
    unsigned long endFence;// Offset=0x1570 Size=0x4
    unsigned long endFrameFence;// Offset=0x1574 Size=0x4
    int viewParmCount;// Offset=0x1578 Size=0x4
    struct GfxFog fogSettings;// Offset=0x157c Size=0x38
    struct GfxCmdArray * commands;// Offset=0x15b4 Size=0x4
    unsigned int viewInfoIndex;// Offset=0x15b8 Size=0x4
    unsigned int viewInfoCount;// Offset=0x15bc Size=0x4
    struct GfxViewInfo * viewInfo;// Offset=0x15c0 Size=0x4
    void * cmds;// Offset=0x15c4 Size=0x4
    float sunShadowLightDir[3];// Offset=0x15c8 Size=0xc
    int hasApproxSunDirChanged;// Offset=0x15d4 Size=0x4
    int cmdBufValid[18];// Offset=0x15d8 Size=0x48
    struct GfxDrawCallOutput drawOutput[18];// Offset=0x1620 Size=0x120
    unsigned int drawType;// Offset=0x1740 Size=0x4
    struct GfxDrawList dynLightDrawList[4];// Offset=0x1744 Size=0x710
    unsigned int dynLightCount;// Offset=0x1e54 Size=0x4
    struct GfxDrawList * emissiveSpotShadowDrawList[1];// Offset=0x1e58 Size=0x4
    unsigned int emissiveSpotLightCount;// Offset=0x1e5c Size=0x4
    struct GfxSunShadow sunShadow;// Offset=0x1e60 Size=0x320
    unsigned int spotShadowCount;// Offset=0x2180 Size=0x4
    unsigned char __align0[12];// Offset=0x2184 Size=0xc
    struct GfxSpotShadow spotShadows[4];// Offset=0x2190 Size=0x740
    struct GfxSurfsIterGroup prepassIterGroup[5];// Offset=0x28d0 Size=0x6a4
    struct GfxSpliceSurfs litTransSpliceSurfs;// Offset=0x2f74 Size=0x700
    unsigned char __align1[12];// Offset=0x3674 Size=0xc
    unsigned char surfsBuffer[131072];// Offset=0x3680 Size=0x20000
    float codeSurfArgs[288][4];// Offset=0x23680 Size=0x1200
    struct GfxCodeSurf codeEmissiveSurfs[2048];// Offset=0x24880 Size=0x8000
    struct GfxCodeSurf codeTransSurfs[640];// Offset=0x2c880 Size=0x2800
    struct GfxMarkSurf markSurfs[1536];// Offset=0x2f080 Size=0x6000
    struct GfxGlassSurf glassSurfs[768];// Offset=0x35080 Size=0x3000
    unsigned short bspSurfData[35328];// Offset=0x38080 Size=0x11400
    unsigned char smodelSurfData[35840];// Offset=0x49480 Size=0x8c00
    unsigned char smodelSurfVisData[45056];// Offset=0x52080 Size=0xb000
    union GfxCloudSurf cloudSurfs[256];// Offset=0x5d080 Size=0x400
    struct GfxEntity gfxEnts[128];// Offset=0x5d480 Size=0x400
    struct FxSparkMeshData sparkData[64];// Offset=0x5d880 Size=0x1400
    struct GfxParticleCloud cloudData[256];// Offset=0x5ec80 Size=0x4000
    union GfxDrawSurf drawSurfs[16384];// Offset=0x62c80 Size=0x20000
    struct GfxLight sceneLights[253];// Offset=0x82c80 Size=0x3f40
};

struct GfxDrawList// Size=0x1c4 (Id=6350)
{
    struct GfxBspSurfList bspSurfList;// Offset=0x0 Size=0x8
    struct GfxBspSurfList bspLightMapSurfList;// Offset=0x8 Size=0x8
    struct GfxSModelSurfList smodelSurfList[1];// Offset=0x10 Size=0xc
    struct GfxDrawSurfList drawSurfList;// Offset=0x1c Size=0x8
    struct GfxCodeSurfList codeSurfList;// Offset=0x24 Size=0x8
    struct GfxMarkSurfList markSurfList;// Offset=0x2c Size=0x8
    struct GfxGlassSurfList glassSurfList;// Offset=0x34 Size=0x8
    struct GfxCloudSurfList cloudSurfList;// Offset=0x3c Size=0xc
    struct GfxSparkSurfList sparkSurfList;// Offset=0x48 Size=0x8
    struct GfxDrawListInfo info;// Offset=0x50 Size=0x174
};

struct GfxSModelSurfList// Size=0xc (Id=6351)
{
    unsigned int surfDataBytes;// Offset=0x0 Size=0x4
    unsigned char * surfData;// Offset=0x4 Size=0x4
    unsigned char * visData;// Offset=0x8 Size=0x4
};

struct GfxModelRigidChildSurface// Size=0x20 (Id=6352)
{
    struct GfxPlacement placement;// Offset=0x0 Size=0x1c
    unsigned short triOffset;// Offset=0x1c Size=0x2
    unsigned short triCount;// Offset=0x1e Size=0x2
};

struct GfxCmdBufPrimState// Size=0x2c (Id=6353)
{
    union // Size=0x10 (Id=0)
    {
        struct D3DDevice * device;// Offset=0x0 Size=0x4
        struct D3DIndexBuffer * indexBuffer;// Offset=0x4 Size=0x4
        enum MaterialVertexDeclType vertDeclType;// Offset=0x8 Size=0x4
        unsigned int primType;// Offset=0xc Size=0x4
        struct <unnamed-type-streams>// Size=0xc (Id=66153)
        {
            unsigned int stride;// Offset=0x0 Size=0x4
            struct D3DVertexBuffer * vb;// Offset=0x4 Size=0x4
            unsigned int offset;// Offset=0x8 Size=0x4
        };
        unsigned char __align0[4];// Offset=0xc Size=0x4
    };
    struct GfxCmdBufPrimState::<unnamed-type-streams> streams[2];// Offset=0x10 Size=0x18
    struct D3DVertexDeclaration * vertexDecl;// Offset=0x28 Size=0x4
};

struct GfxCmdBufPrimState::<unnamed-type-streams>// Size=0xc (Id=6354)
{
    unsigned int stride;// Offset=0x0 Size=0x4
    struct D3DVertexBuffer * vb;// Offset=0x4 Size=0x4
    unsigned int offset;// Offset=0x8 Size=0x4
};

union GfxTexture// Size=0x34 (Id=6355)
{
    struct D3DBaseTexture basemap;// Offset=0x0 Size=0x34
    struct D3DLineTexture linemap;// Offset=0x0 Size=0x34
    struct D3DTexture map;// Offset=0x0 Size=0x34
    struct D3DVolumeTexture volmap;// Offset=0x0 Size=0x34
    struct D3DCubeTexture cubemap;// Offset=0x0 Size=0x34
};

struct MaterialTechnique// Size=0x5c (Id=6356)
{
    char * name;// Offset=0x0 Size=0x4
    unsigned short flags;// Offset=0x4 Size=0x2
    unsigned short passCount;// Offset=0x6 Size=0x2
    struct MaterialPass passArray[1];// Offset=0x8 Size=0x54
};

struct MaterialPass// Size=0x54 (Id=6357)
{
    struct MaterialVertexDeclaration * vertexDecl;// Offset=0x0 Size=0x4
    struct MaterialVertexShader * vertexShaderArray[15];// Offset=0x4 Size=0x3c
    struct MaterialVertexShader * vertexShader;// Offset=0x40 Size=0x4
    struct MaterialPixelShader * pixelShader;// Offset=0x44 Size=0x4
    unsigned char perPrimArgCount;// Offset=0x48 Size=0x1
    unsigned char perObjArgCount;// Offset=0x49 Size=0x1
    unsigned char stableArgCount;// Offset=0x4a Size=0x1
    unsigned char customSamplerFlags;// Offset=0x4b Size=0x1
    unsigned char precompiledIndex;// Offset=0x4c Size=0x1
    unsigned char __align0[3];// Offset=0x4d Size=0x3
    struct MaterialShaderArgument * args;// Offset=0x50 Size=0x4
};

struct MaterialPixelShader// Size=0x10 (Id=6358)
{
    char * name;// Offset=0x0 Size=0x4
    union MaterialPixelShaderProgram prog;// Offset=0x4 Size=0xc
};

struct MaterialVertexShader// Size=0x10 (Id=6359)
{
    char * name;// Offset=0x0 Size=0x4
    union MaterialVertexShaderProgram prog;// Offset=0x4 Size=0xc
};

struct GfxCmdBufState// Size=0xb20 (Id=6360)
{
    unsigned char refSamplerState[16];// Offset=0x0 Size=0x10
    unsigned int samplerState[16];// Offset=0x10 Size=0x40
    union GfxTexture * samplerTexture[16];// Offset=0x50 Size=0x40
    struct GfxCmdBufPrimState prim;// Offset=0x90 Size=0x2c
    struct Material * material;// Offset=0xbc Size=0x4
    enum MaterialTechniqueType techType;// Offset=0xc0 Size=0x4
    struct MaterialTechnique * technique;// Offset=0xc4 Size=0x4
    struct MaterialPass * pass;// Offset=0xc8 Size=0x4
    unsigned int passIndex;// Offset=0xcc Size=0x4
    enum GfxDepthRangeType depthRangeType;// Offset=0xd0 Size=0x4
    float depthRangeNear;// Offset=0xd4 Size=0x4
    float depthRangeFar;// Offset=0xd8 Size=0x4
    unsigned char __align0[4];// Offset=0xdc Size=0x4
    unsigned long long vertexShaderConstState[64];// Offset=0xe0 Size=0x200
    unsigned long long pixelShaderConstState[256];// Offset=0x2e0 Size=0x800
    unsigned char alphaRef;// Offset=0xae0 Size=0x1
    unsigned char __align1[3];// Offset=0xae1 Size=0x3
    unsigned short * indices;// Offset=0xae4 Size=0x4
    struct GfxVertex * verts;// Offset=0xae8 Size=0x4
    unsigned int refStateBits[2];// Offset=0xaec Size=0x8
    unsigned int activeStateBits[2];// Offset=0xaf4 Size=0x8
    struct MaterialPixelShader * pixelShader;// Offset=0xafc Size=0x4
    struct MaterialVertexShader * vertexShader;// Offset=0xb00 Size=0x4
    struct GfxViewport viewport;// Offset=0xb04 Size=0x10
    enum GfxRenderTargetId renderTargetId;// Offset=0xb14 Size=0x4
};

struct GfxViewInfo// Size=0x1f50 (Id=6361)
{
    struct GfxViewParms viewParms;// Offset=0x0 Size=0x150
    struct GfxViewport sceneViewport;// Offset=0x150 Size=0x10
    struct GfxViewport displayViewport;// Offset=0x160 Size=0x10
    struct GfxViewport scissorViewport;// Offset=0x170 Size=0x10
    struct GfxSceneDef sceneDef;// Offset=0x180 Size=0x28
    enum ShadowType dynamicShadowType;// Offset=0x1a8 Size=0x4
    bool needsDistortionResolve;// Offset=0x1ac Size=0x1
    bool viewModelHasDistortion;// Offset=0x1ad Size=0x1
    unsigned char forceSunShadowsGenerate;// Offset=0x1ae Size=0x1
    bool halfResParticles;// Offset=0x1af Size=0x1
    unsigned int sceneLightCount;// Offset=0x1b0 Size=0x4
    float blurRadius;// Offset=0x1b4 Size=0x4
    float frustumPlanes[4][4];// Offset=0x1b8 Size=0x40
    struct GfxDepthOfField dof;// Offset=0x1f8 Size=0x20
    struct GfxFilm film;// Offset=0x218 Size=0x3c
    struct GfxGlow glow;// Offset=0x254 Size=0x14
    struct GfxLightScale charPrimaryLightScale;// Offset=0x268 Size=0x8
    struct GfxStageInfo stageInfo;// Offset=0x270 Size=0x18
    struct GfxCompositeFx waterSheetingFx;// Offset=0x288 Size=0x6c
    void * displayCmds;// Offset=0x2f4 Size=0x4
    struct GfxQuadMeshData * fullSceneViewMesh;// Offset=0x2f8 Size=0x4
    struct GfxDrawList drawList[13];// Offset=0x2fc Size=0x16f4
    struct GfxCmdBufInput input;// Offset=0x19f0 Size=0x540
    enum GfxRenderTargetId renderTargetId;// Offset=0x1f30 Size=0x4
    bool useShadows;// Offset=0x1f34 Size=0x1
    unsigned char __align0[3];// Offset=0x1f35 Size=0x3
    unsigned int sunShadowResolution;// Offset=0x1f38 Size=0x4
    enum GfxRenderTargetId sunShadowRenderTargetId;// Offset=0x1f3c Size=0x4
    unsigned int sunShadowTileCount;// Offset=0x1f40 Size=0x4
};

struct GfxDrawListInfo// Size=0x174 (Id=6362)
{
    enum MaterialTechniqueType baseTechType;// Offset=0x0 Size=0x4
    struct GfxViewInfo * viewInfo;// Offset=0x4 Size=0x4
    float eyeOffset[3];// Offset=0x8 Size=0xc
    unsigned int sceneLightIndex;// Offset=0x14 Size=0x4
    int cameraView;// Offset=0x18 Size=0x4
    enum GfxCodeSurfListType codeSurfListType;// Offset=0x1c Size=0x4
    struct GfxSurfsIterGroup iterGroup;// Offset=0x20 Size=0x154
};

struct XZoneMemory// Size=0x30 (Id=6363)
{
    struct XBlock blocks[6];// Offset=0x0 Size=0x30
};

struct XBlock// Size=0x8 (Id=6364)
{
    unsigned char * data;// Offset=0x0 Size=0x4
    unsigned int size;// Offset=0x4 Size=0x4
};

struct StreamPosInfo// Size=0x8 (Id=6365)
{
    unsigned char * pos;// Offset=0x0 Size=0x4
    unsigned int index;// Offset=0x4 Size=0x4
};

struct XAsset// Size=0x8 (Id=6366)
{
    enum XAssetType type;// Offset=0x0 Size=0x4
    union XAssetHeader header;// Offset=0x4 Size=0x4
};

union XAssetSize// Size=0x680 (Id=6367)
{
    union // Size=0x680 (Id=0)
    {
        struct XAnimParts parts;// Offset=0x0 Size=0x58
        struct XModel model;// Offset=0x0 Size=0x10c
        struct Material material;// Offset=0x0 Size=0x58
        struct MaterialPixelShader pixelShader;// Offset=0x0 Size=0x10
        struct MaterialVertexShader vertexShader;// Offset=0x0 Size=0x10
        struct MaterialTechniqueSet techniqueSet;// Offset=0x0 Size=0x90
        struct GfxImage image;// Offset=0x0 Size=0x70
        struct snd_alias_list_t sound;// Offset=0x0 Size=0xc
        struct SndCurve sndCurve;// Offset=0x0 Size=0x88
        struct clipMap_t clipMap;// Offset=0x0 Size=0x100
        struct ComWorld comWorld;// Offset=0x0 Size=0x10
        struct MapEnts mapEnts;// Offset=0x0 Size=0x2c
        struct GfxWorld gfxWorld;// Offset=0x0 Size=0x2c8
        struct GfxLightDef lightDef;// Offset=0x0 Size=0x10
        struct Font_s font;// Offset=0x0 Size=0x18
        struct MenuList menuList;// Offset=0x0 Size=0xc
        struct menuDef_t menu;// Offset=0x0 Size=0x1a0
        struct LocalizeEntry localize;// Offset=0x0 Size=0x8
        struct WeaponDef weapon;// Offset=0x0 Size=0x680
        struct SndDriverGlobals sndDriverGlobals;// Offset=0x0 Size=0x8
        struct FxEffectDef * fx;// Offset=0x0 Size=0x4
        struct FxImpactTable impactFx;// Offset=0x0 Size=0x8
        struct RawFile rawfile;// Offset=0x0 Size=0x10
        struct StringTable stringTable;// Offset=0x0 Size=0x10
        struct LeaderboardDef leaderboardDef;// Offset=0x0 Size=0x18
        struct TracerDef tracerDef;// Offset=0x0 Size=0x70
        struct VehicleDef vehDef;// Offset=0x0 Size=0x2d0
    };
};

struct RawFile// Size=0x10 (Id=6368)
{
    char * name;// Offset=0x0 Size=0x4
    int compressedLen;// Offset=0x4 Size=0x4
    int len;// Offset=0x8 Size=0x4
    char * buffer;// Offset=0xc Size=0x4
};

struct XAssetPool<MenuList,128>// Size=0x604 (Id=6369)
{
    union XAssetPoolEntry<MenuList> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<MenuList> entries[128];// Offset=0x4 Size=0x600
};

struct XAssetPool<menuDef_t,612>// Size=0x3e284 (Id=6370)
{
    union XAssetPoolEntry<menuDef_t> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<menuDef_t> entries[612];// Offset=0x4 Size=0x3e280
};

struct XAssetPool<LocalizeEntry,7000>// Size=0xdac4 (Id=6371)
{
    union XAssetPoolEntry<LocalizeEntry> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<LocalizeEntry> entries[7000];// Offset=0x4 Size=0xdac0
};

struct XAssetPool<WeaponDef,1200>// Size=0x1e7804 (Id=6372)
{
    union XAssetPoolEntry<WeaponDef> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<WeaponDef> entries[1200];// Offset=0x4 Size=0x1e7800
};

struct XAssetPool<SndDriverGlobals,1>// Size=0xc (Id=6373)
{
    union XAssetPoolEntry<SndDriverGlobals> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<SndDriverGlobals> entries[1];// Offset=0x4 Size=0x8
};

struct XAssetPool<FxEffectDef,600>// Size=0x4b04 (Id=6374)
{
    union XAssetPoolEntry<FxEffectDef> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<FxEffectDef> entries[600];// Offset=0x4 Size=0x4b00
};

struct XAssetPool<FxImpactTable,4>// Size=0x24 (Id=6375)
{
    union XAssetPoolEntry<FxImpactTable> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<FxImpactTable> entries[4];// Offset=0x4 Size=0x20
};

struct XAssetPool<RawFile,1024>// Size=0x4004 (Id=6376)
{
    union XAssetPoolEntry<RawFile> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<RawFile> entries[1024];// Offset=0x4 Size=0x4000
};

struct XAssetPool<StringTable,400>// Size=0x1904 (Id=6377)
{
    union XAssetPoolEntry<StringTable> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<StringTable> entries[400];// Offset=0x4 Size=0x1900
};

struct XAssetPool<LeaderboardDef,100>// Size=0x964 (Id=6378)
{
    union XAssetPoolEntry<LeaderboardDef> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<LeaderboardDef> entries[100];// Offset=0x4 Size=0x960
};

struct XAssetPool<StructuredDataDefSet,24>// Size=0x124 (Id=6379)
{
    union XAssetPoolEntry<StructuredDataDefSet> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<StructuredDataDefSet> entries[24];// Offset=0x4 Size=0x120
};

struct XAssetPool<TracerDef,32>// Size=0xe04 (Id=6380)
{
    union XAssetPoolEntry<TracerDef> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<TracerDef> entries[32];// Offset=0x4 Size=0xe00
};

struct XAssetPool<VehicleDef,128>// Size=0x16804 (Id=6381)
{
    union XAssetPoolEntry<VehicleDef> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<VehicleDef> entries[128];// Offset=0x4 Size=0x16800
};

struct XAssetPool<VehicleDef,1>// Size=0x2d4 (Id=6382)
{
    union XAssetPoolEntry<VehicleDef> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<VehicleDef> entries[1];// Offset=0x4 Size=0x2d0
};

struct XAssetPool<PhysPreset,64>// Size=0xb04 (Id=6383)
{
    union XAssetPoolEntry<PhysPreset> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<PhysPreset> entries[64];// Offset=0x4 Size=0xb00
};

struct XAssetPool<PhysCollmap,1024>// Size=0x12004 (Id=6384)
{
    union XAssetPoolEntry<PhysCollmap> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<PhysCollmap> entries[1024];// Offset=0x4 Size=0x12000
};

struct clipMap_t// Size=0x100 (Id=6385)
{
    char * name;// Offset=0x0 Size=0x4
    int isInUse;// Offset=0x4 Size=0x4
    int planeCount;// Offset=0x8 Size=0x4
    struct cplane_s * planes;// Offset=0xc Size=0x4
    unsigned int numStaticModels;// Offset=0x10 Size=0x4
    struct cStaticModel_s * staticModelList;// Offset=0x14 Size=0x4
    unsigned int numMaterials;// Offset=0x18 Size=0x4
    struct ClipMaterial * materials;// Offset=0x1c Size=0x4
    unsigned int numBrushSides;// Offset=0x20 Size=0x4
    struct cbrushside_t * brushsides;// Offset=0x24 Size=0x4
    unsigned int numBrushEdges;// Offset=0x28 Size=0x4
    unsigned char * brushEdges;// Offset=0x2c Size=0x4
    unsigned int numNodes;// Offset=0x30 Size=0x4
    struct cNode_t * nodes;// Offset=0x34 Size=0x4
    unsigned int numLeafs;// Offset=0x38 Size=0x4
    struct cLeaf_t * leafs;// Offset=0x3c Size=0x4
    unsigned int leafbrushNodesCount;// Offset=0x40 Size=0x4
    struct cLeafBrushNode_s * leafbrushNodes;// Offset=0x44 Size=0x4
    unsigned int numLeafBrushes;// Offset=0x48 Size=0x4
    unsigned short * leafbrushes;// Offset=0x4c Size=0x4
    unsigned int numLeafSurfaces;// Offset=0x50 Size=0x4
    unsigned int * leafsurfaces;// Offset=0x54 Size=0x4
    unsigned int vertCount;// Offset=0x58 Size=0x4
    float * verts[3];// Offset=0x5c Size=0x4
    int triCount;// Offset=0x60 Size=0x4
    unsigned short * triIndices;// Offset=0x64 Size=0x4
    unsigned char * triEdgeIsWalkable;// Offset=0x68 Size=0x4
    int borderCount;// Offset=0x6c Size=0x4
    struct CollisionBorder * borders;// Offset=0x70 Size=0x4
    int partitionCount;// Offset=0x74 Size=0x4
    struct CollisionPartition * partitions;// Offset=0x78 Size=0x4
    int aabbTreeCount;// Offset=0x7c Size=0x4
    struct CollisionAabbTree * aabbTrees;// Offset=0x80 Size=0x4
    unsigned int numSubModels;// Offset=0x84 Size=0x4
    struct cmodel_t * cmodels;// Offset=0x88 Size=0x4
    unsigned short numBrushes;// Offset=0x8c Size=0x2
    unsigned char __align0[2];// Offset=0x8e Size=0x2
    struct cbrush_t * brushes;// Offset=0x90 Size=0x4
    struct Bounds * brushBounds;// Offset=0x94 Size=0x4
    int * brushContents;// Offset=0x98 Size=0x4
    struct MapEnts * mapEnts;// Offset=0x9c Size=0x4
    unsigned short smodelNodeCount;// Offset=0xa0 Size=0x2
    unsigned char __align1[2];// Offset=0xa2 Size=0x2
    struct SModelAabbNode * smodelNodes;// Offset=0xa4 Size=0x4
    unsigned short dynEntCount[2];// Offset=0xa8 Size=0x4
    struct DynEntityDef * dynEntDefList[2];// Offset=0xac Size=0x8
    struct DynEntityPose * dynEntPoseList[2];// Offset=0xb4 Size=0x8
    struct DynEntityClient * dynEntClientList[2];// Offset=0xbc Size=0x8
    struct DynEntityColl * dynEntCollList[2];// Offset=0xc4 Size=0x8
    unsigned int checksum;// Offset=0xcc Size=0x4
};

struct XAssetPool<XAnimParts,4096>// Size=0x58004 (Id=6386)
{
    union XAssetPoolEntry<XAnimParts> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<XAnimParts> entries[4096];// Offset=0x4 Size=0x58000
};

struct XAssetPool<XModelSurfs,4096>// Size=0x20004 (Id=6387)
{
    union XAssetPoolEntry<XModelSurfs> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<XModelSurfs> entries[4096];// Offset=0x4 Size=0x20000
};

struct XAssetPool<XModel,1536>// Size=0x64804 (Id=6388)
{
    union XAssetPoolEntry<XModel> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<XModel> entries[1536];// Offset=0x4 Size=0x64800
};

struct XAssetPool<Material,4096>// Size=0x58008 (Id=6389)
{
    union XAssetPoolEntry<Material> * freeHead;// Offset=0x0 Size=0x4
    unsigned char __align0[4];// Offset=0x4 Size=0x4
    union XAssetPoolEntry<Material> entries[4096];// Offset=0x8 Size=0x58000
};

struct XAssetPool<MaterialPixelShader,8096>// Size=0x1fa04 (Id=6390)
{
    union XAssetPoolEntry<MaterialPixelShader> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<MaterialPixelShader> entries[8096];// Offset=0x4 Size=0x1fa00
};

struct XAssetPool<MaterialTechniqueSet,768>// Size=0x1b004 (Id=6391)
{
    union XAssetPoolEntry<MaterialTechniqueSet> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<MaterialTechniqueSet> entries[768];// Offset=0x4 Size=0x1b000
};

struct XAssetPool<GfxImage,3584>// Size=0x62004 (Id=6392)
{
    union XAssetPoolEntry<GfxImage> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<GfxImage> entries[3584];// Offset=0x4 Size=0x62000
};

struct XAssetPool<snd_alias_list_t,16000>// Size=0x2ee04 (Id=6393)
{
    union XAssetPoolEntry<snd_alias_list_t> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<snd_alias_list_t> entries[16000];// Offset=0x4 Size=0x2ee00
};

struct XAssetPool<SndCurve,64>// Size=0x2204 (Id=6394)
{
    union XAssetPoolEntry<SndCurve> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<SndCurve> entries[64];// Offset=0x4 Size=0x2200
};

struct XAssetPool<LoadedSound,1300>// Size=0x32c84 (Id=6395)
{
    union XAssetPoolEntry<LoadedSound> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<LoadedSound> entries[1300];// Offset=0x4 Size=0x32c80
};

struct XAssetPool<MapEnts,2>// Size=0x5c (Id=6396)
{
    union XAssetPoolEntry<MapEnts> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<MapEnts> entries[2];// Offset=0x4 Size=0x58
};

struct XAssetPool<GfxLightDef,32>// Size=0x204 (Id=6397)
{
    union XAssetPoolEntry<GfxLightDef> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<GfxLightDef> entries[32];// Offset=0x4 Size=0x200
};

struct XAssetPool<Font_s,16>// Size=0x184 (Id=6398)
{
    union XAssetPoolEntry<Font_s> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<Font_s> entries[16];// Offset=0x4 Size=0x180
};

struct XAssetPool<menuDef_t,1>// Size=0x1a4 (Id=6399)
{
    union XAssetPoolEntry<menuDef_t> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<menuDef_t> entries[1];// Offset=0x4 Size=0x1a0
};

struct XAssetPool<FxEffectDef,1>// Size=0x24 (Id=6400)
{
    union XAssetPoolEntry<FxEffectDef> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<FxEffectDef> entries[1];// Offset=0x4 Size=0x20
};

union XAssetPoolEntry<WeaponDef>// Size=0x680 (Id=6401)
{
    union // Size=0x680 (Id=0)
    {
        struct WeaponDef entry;// Offset=0x0 Size=0x680
        union XAssetPoolEntry<WeaponDef> * next;// Offset=0x0 Size=0x4
    };
};

union XAssetPoolEntry<StructuredDataDefSet>// Size=0xc (Id=6402)
{
    union // Size=0xc (Id=0)
    {
        struct StructuredDataDefSet entry;// Offset=0x0 Size=0xc
        union XAssetPoolEntry<StructuredDataDefSet> * next;// Offset=0x0 Size=0x4
    };
};

union XAssetPoolEntry<MenuList>// Size=0xc (Id=6403)
{
    union // Size=0xc (Id=0)
    {
        struct MenuList entry;// Offset=0x0 Size=0xc
        union XAssetPoolEntry<MenuList> * next;// Offset=0x0 Size=0x4
    };
};

struct XAssetPool<TracerDef,1>// Size=0x74 (Id=6404)
{
    union XAssetPoolEntry<TracerDef> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<TracerDef> entries[1];// Offset=0x4 Size=0x70
};

struct XAssetPool<StructuredDataDefSet,1>// Size=0x10 (Id=6405)
{
    union XAssetPoolEntry<StructuredDataDefSet> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<StructuredDataDefSet> entries[1];// Offset=0x4 Size=0xc
};

union XAssetPoolEntry<LoadedSound>// Size=0xa0 (Id=6406)
{
    union // Size=0xa0 (Id=0)
    {
        struct LoadedSound entry;// Offset=0x0 Size=0xa0
        union XAssetPoolEntry<LoadedSound> * next;// Offset=0x0 Size=0x4
    };
};

struct XAssetPool<FxImpactTable,1>// Size=0xc (Id=6407)
{
    union XAssetPoolEntry<FxImpactTable> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<FxImpactTable> entries[1];// Offset=0x4 Size=0x8
};

union XAssetPoolEntry<XAnimParts>// Size=0x58 (Id=6408)
{
    union // Size=0x58 (Id=0)
    {
        struct XAnimParts entry;// Offset=0x0 Size=0x58
        union XAssetPoolEntry<XAnimParts> * next;// Offset=0x0 Size=0x4
    };
};

struct XAssetPool<PhysCollmap,1>// Size=0x4c (Id=6409)
{
    union XAssetPoolEntry<PhysCollmap> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<PhysCollmap> entries[1];// Offset=0x4 Size=0x48
};

union XAssetPoolEntry<GfxImage>// Size=0x70 (Id=6410)
{
    union // Size=0x70 (Id=0)
    {
        struct GfxImage entry;// Offset=0x0 Size=0x70
        union XAssetPoolEntry<GfxImage> * next;// Offset=0x0 Size=0x4
    };
};

union XAssetPoolEntry<SndCurve>// Size=0x88 (Id=6411)
{
    union // Size=0x88 (Id=0)
    {
        struct SndCurve entry;// Offset=0x0 Size=0x88
        union XAssetPoolEntry<SndCurve> * next;// Offset=0x0 Size=0x4
    };
};

struct XAssetCopyInfo// Size=0x4 (Id=6412)
{
    struct XAssetEntry * entry;// Offset=0x0 Size=0x4
};

union XAssetPoolEntry<SndDriverGlobals>// Size=0x8 (Id=6413)
{
    union // Size=0x8 (Id=0)
    {
        struct SndDriverGlobals entry;// Offset=0x0 Size=0x8
        union XAssetPoolEntry<SndDriverGlobals> * next;// Offset=0x0 Size=0x4
    };
};

union XAssetPoolEntry<RawFile>// Size=0x10 (Id=6414)
{
    union // Size=0x10 (Id=0)
    {
        struct RawFile entry;// Offset=0x0 Size=0x10
        union XAssetPoolEntry<RawFile> * next;// Offset=0x0 Size=0x4
    };
};

struct XAssetPool<XModel,1>// Size=0x110 (Id=6415)
{
    union XAssetPoolEntry<XModel> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<XModel> entries[1];// Offset=0x4 Size=0x10c
};

union XAssetPoolEntry<GfxLightDef>// Size=0x10 (Id=6416)
{
    union // Size=0x10 (Id=0)
    {
        struct GfxLightDef entry;// Offset=0x0 Size=0x10
        union XAssetPoolEntry<GfxLightDef> * next;// Offset=0x0 Size=0x4
    };
};

struct XAssetPool<SndCurve,1>// Size=0x8c (Id=6417)
{
    union XAssetPoolEntry<SndCurve> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<SndCurve> entries[1];// Offset=0x4 Size=0x88
};

union XAssetPoolEntry<PhysCollmap>// Size=0x48 (Id=6418)
{
    union // Size=0x48 (Id=0)
    {
        struct PhysCollmap entry;// Offset=0x0 Size=0x48
        union XAssetPoolEntry<PhysCollmap> * next;// Offset=0x0 Size=0x4
    };
};

struct XAssetPool<MenuList,1>// Size=0x10 (Id=6419)
{
    union XAssetPoolEntry<MenuList> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<MenuList> entries[1];// Offset=0x4 Size=0xc
};

union XAssetPoolEntry<StringTable>// Size=0x10 (Id=6420)
{
    union // Size=0x10 (Id=0)
    {
        struct StringTable entry;// Offset=0x0 Size=0x10
        union XAssetPoolEntry<StringTable> * next;// Offset=0x0 Size=0x4
    };
};

struct XAssetPool<StringTable,1>// Size=0x14 (Id=6421)
{
    union XAssetPoolEntry<StringTable> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<StringTable> entries[1];// Offset=0x4 Size=0x10
};

union XAssetPoolEntry<FxEffectDef>// Size=0x20 (Id=6422)
{
    union // Size=0x20 (Id=0)
    {
        struct FxEffectDef entry;// Offset=0x0 Size=0x20
        union XAssetPoolEntry<FxEffectDef> * next;// Offset=0x0 Size=0x4
    };
};

union XAssetEntryPoolEntry// Size=0x10 (Id=6423)
{
    union // Size=0x10 (Id=0)
    {
        struct XAssetEntry entry;// Offset=0x0 Size=0x10
        union XAssetEntryPoolEntry * next;// Offset=0x0 Size=0x4
    };
};

union XAssetPoolEntry<PhysPreset>// Size=0x2c (Id=6424)
{
    union // Size=0x2c (Id=0)
    {
        struct PhysPreset entry;// Offset=0x0 Size=0x2c
        union XAssetPoolEntry<PhysPreset> * next;// Offset=0x0 Size=0x4
    };
};

struct Font_s// Size=0x18 (Id=6425)
{
    char * fontName;// Offset=0x0 Size=0x4
    int pixelHeight;// Offset=0x4 Size=0x4
    int glyphCount;// Offset=0x8 Size=0x4
    struct Material * material;// Offset=0xc Size=0x4
    struct Material * glowMaterial;// Offset=0x10 Size=0x4
    struct Glyph * glyphs;// Offset=0x14 Size=0x4
};

struct XAssetPool<Font_s,1>// Size=0x1c (Id=6426)
{
    union XAssetPoolEntry<Font_s> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<Font_s> entries[1];// Offset=0x4 Size=0x18
};

struct XAssetPool<MaterialPixelShader,1>// Size=0x14 (Id=6427)
{
    union XAssetPoolEntry<MaterialPixelShader> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<MaterialPixelShader> entries[1];// Offset=0x4 Size=0x10
};

union XAssetPoolEntry<Material>// Size=0x58 (Id=6428)
{
    union // Size=0x58 (Id=0)
    {
        struct Material entry;// Offset=0x0 Size=0x58
        union XAssetPoolEntry<Material> * next;// Offset=0x0 Size=0x4
    };
};

struct GameWorldSp// Size=0x38 (Id=6429)
{
    char * name;// Offset=0x0 Size=0x4
    struct PathData path;// Offset=0x4 Size=0x28
    struct VehicleTrack vehicleTrack;// Offset=0x2c Size=0x8
    struct G_GlassData * g_glassData;// Offset=0x34 Size=0x4
};

struct XAssetPool<LocalizeEntry,1>// Size=0xc (Id=6430)
{
    union XAssetPoolEntry<LocalizeEntry> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<LocalizeEntry> entries[1];// Offset=0x4 Size=0x8
};

union XAssetPoolEntry<TracerDef>// Size=0x70 (Id=6431)
{
    union // Size=0x70 (Id=0)
    {
        struct TracerDef entry;// Offset=0x0 Size=0x70
        union XAssetPoolEntry<TracerDef> * next;// Offset=0x0 Size=0x4
    };
};

struct VehicleTrack// Size=0x8 (Id=6432)
{
    struct VehicleTrackSegment * segments;// Offset=0x0 Size=0x4
    unsigned int segmentCount;// Offset=0x4 Size=0x4
};

union XAssetPoolEntry<MaterialPixelShader>// Size=0x10 (Id=6433)
{
    union // Size=0x10 (Id=0)
    {
        struct MaterialPixelShader entry;// Offset=0x0 Size=0x10
        union XAssetPoolEntry<MaterialPixelShader> * next;// Offset=0x0 Size=0x4
    };
};

union XAssetPoolEntry<VehicleDef>// Size=0x2d0 (Id=6434)
{
    union // Size=0x2d0 (Id=0)
    {
        struct VehicleDef entry;// Offset=0x0 Size=0x2d0
        union XAssetPoolEntry<VehicleDef> * next;// Offset=0x0 Size=0x4
    };
};

struct XAssetPool<WeaponDef,1>// Size=0x684 (Id=6435)
{
    union XAssetPoolEntry<WeaponDef> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<WeaponDef> entries[1];// Offset=0x4 Size=0x680
};

struct XZoneInfoInternal// Size=0x44 (Id=6436)
{
    char name[64];// Offset=0x0 Size=0x40
    int flags;// Offset=0x40 Size=0x4
};

struct PathData// Size=0x28 (Id=6437)
{
    unsigned int nodeCount;// Offset=0x0 Size=0x4
    struct pathnode_t * nodes;// Offset=0x4 Size=0x4
    struct pathbasenode_t * basenodes;// Offset=0x8 Size=0x4
    unsigned int chainNodeCount;// Offset=0xc Size=0x4
    unsigned short * chainNodeForNode;// Offset=0x10 Size=0x4
    unsigned short * nodeForChainNode;// Offset=0x14 Size=0x4
    int visBytes;// Offset=0x18 Size=0x4
    unsigned char * pathVis;// Offset=0x1c Size=0x4
    int nodeTreeCount;// Offset=0x20 Size=0x4
    struct pathnode_tree_t * nodeTree;// Offset=0x24 Size=0x4
};

union XAssetPoolEntry<XModel>// Size=0x10c (Id=6438)
{
    union // Size=0x10c (Id=0)
    {
        struct XModel entry;// Offset=0x0 Size=0x10c
        union XAssetPoolEntry<XModel> * next;// Offset=0x0 Size=0x4
    };
};

struct XAssetPool<MaterialTechniqueSet,1>// Size=0x94 (Id=6439)
{
    union XAssetPoolEntry<MaterialTechniqueSet> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<MaterialTechniqueSet> entries[1];// Offset=0x4 Size=0x90
};

union XAssetPoolEntry<FxImpactTable>// Size=0x8 (Id=6440)
{
    union // Size=0x8 (Id=0)
    {
        struct FxImpactTable entry;// Offset=0x0 Size=0x8
        union XAssetPoolEntry<FxImpactTable> * next;// Offset=0x0 Size=0x4
    };
};

struct XAssetPool<RawFile,1>// Size=0x14 (Id=6441)
{
    union XAssetPoolEntry<RawFile> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<RawFile> entries[1];// Offset=0x4 Size=0x10
};

struct Glyph// Size=0x18 (Id=6442)
{
    unsigned short letter;// Offset=0x0 Size=0x2
    char x0;// Offset=0x2 Size=0x1
    char y0;// Offset=0x3 Size=0x1
    unsigned char dx;// Offset=0x4 Size=0x1
    unsigned char pixelWidth;// Offset=0x5 Size=0x1
    unsigned char pixelHeight;// Offset=0x6 Size=0x1
    unsigned char __align0[1];// Offset=0x7 Size=0x1
    float s0;// Offset=0x8 Size=0x4
    float t0;// Offset=0xc Size=0x4
    float s1;// Offset=0x10 Size=0x4
    float t1;// Offset=0x14 Size=0x4
};

struct XAssetPool<GfxLightDef,1>// Size=0x14 (Id=6443)
{
    union XAssetPoolEntry<GfxLightDef> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<GfxLightDef> entries[1];// Offset=0x4 Size=0x10
};

struct XAssetPool<LeaderboardDef,1>// Size=0x1c (Id=6444)
{
    union XAssetPoolEntry<LeaderboardDef> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<LeaderboardDef> entries[1];// Offset=0x4 Size=0x18
};

struct XAssetPool<snd_alias_list_t,1>// Size=0x10 (Id=6445)
{
    union XAssetPoolEntry<snd_alias_list_t> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<snd_alias_list_t> entries[1];// Offset=0x4 Size=0xc
};

union XAssetPoolEntry<XModelSurfs>// Size=0x20 (Id=6446)
{
    union // Size=0x20 (Id=0)
    {
        struct XModelSurfs entry;// Offset=0x0 Size=0x20
        union XAssetPoolEntry<XModelSurfs> * next;// Offset=0x0 Size=0x4
    };
};

struct XAssetPool<MapEnts,1>// Size=0x30 (Id=6447)
{
    union XAssetPoolEntry<MapEnts> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<MapEnts> entries[1];// Offset=0x4 Size=0x2c
};

union XAssetPoolEntry<LocalizeEntry>// Size=0x8 (Id=6448)
{
    union // Size=0x8 (Id=0)
    {
        struct LocalizeEntry entry;// Offset=0x0 Size=0x8
        union XAssetPoolEntry<LocalizeEntry> * next;// Offset=0x0 Size=0x4
    };
};

struct XAssetPool<Material,1>// Size=0x60 (Id=6449)
{
    union XAssetPoolEntry<Material> * freeHead;// Offset=0x0 Size=0x4
    unsigned char __align0[4];// Offset=0x4 Size=0x4
    union XAssetPoolEntry<Material> entries[1];// Offset=0x8 Size=0x58
};

struct XAssetPool<XModelSurfs,1>// Size=0x24 (Id=6450)
{
    union XAssetPoolEntry<XModelSurfs> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<XModelSurfs> entries[1];// Offset=0x4 Size=0x20
};

struct XAssetEntry// Size=0x10 (Id=6451)
{
    struct XAsset asset;// Offset=0x0 Size=0x8
    unsigned char zoneIndex;// Offset=0x8 Size=0x1
    unsigned char inuseMask;// Offset=0x9 Size=0x1
    unsigned short nextHash;// Offset=0xa Size=0x2
    unsigned short nextOverride;// Offset=0xc Size=0x2
};

union XAssetPoolEntry<LeaderboardDef>// Size=0x18 (Id=6452)
{
    union // Size=0x18 (Id=0)
    {
        struct LeaderboardDef entry;// Offset=0x0 Size=0x18
        union XAssetPoolEntry<LeaderboardDef> * next;// Offset=0x0 Size=0x4
    };
};

struct XZone// Size=0x80 (Id=6453)
{
    struct DBFile file;// Offset=0x0 Size=0x48
    int flags;// Offset=0x48 Size=0x4
    int allocType;// Offset=0x4c Size=0x4
    struct XZoneMemory mem;// Offset=0x50 Size=0x30
};

union XAssetPoolEntry<Font_s>// Size=0x18 (Id=6454)
{
    union // Size=0x18 (Id=0)
    {
        struct Font_s entry;// Offset=0x0 Size=0x18
        union XAssetPoolEntry<Font_s> * next;// Offset=0x0 Size=0x4
    };
};

struct XAssetPool<PhysPreset,1>// Size=0x30 (Id=6455)
{
    union XAssetPoolEntry<PhysPreset> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<PhysPreset> entries[1];// Offset=0x4 Size=0x2c
};

union XAssetPoolEntry<snd_alias_list_t>// Size=0xc (Id=6456)
{
    union // Size=0xc (Id=0)
    {
        struct snd_alias_list_t entry;// Offset=0x0 Size=0xc
        union XAssetPoolEntry<snd_alias_list_t> * next;// Offset=0x0 Size=0x4
    };
};

struct XAssetPool<XAnimParts,1>// Size=0x5c (Id=6457)
{
    union XAssetPoolEntry<XAnimParts> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<XAnimParts> entries[1];// Offset=0x4 Size=0x58
};

union XAssetPoolEntry<menuDef_t>// Size=0x1a0 (Id=6458)
{
    union // Size=0x1a0 (Id=0)
    {
        struct menuDef_t entry;// Offset=0x0 Size=0x1a0
        union XAssetPoolEntry<menuDef_t> * next;// Offset=0x0 Size=0x4
    };
};

struct XAssetPool<LoadedSound,1>// Size=0xa4 (Id=6459)
{
    union XAssetPoolEntry<LoadedSound> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<LoadedSound> entries[1];// Offset=0x4 Size=0xa0
};

union XAssetPoolEntry<MapEnts>// Size=0x2c (Id=6460)
{
    union // Size=0x2c (Id=0)
    {
        struct MapEnts entry;// Offset=0x0 Size=0x2c
        union XAssetPoolEntry<MapEnts> * next;// Offset=0x0 Size=0x4
    };
};

union XAssetPoolEntry<MaterialTechniqueSet>// Size=0x90 (Id=6461)
{
    union // Size=0x90 (Id=0)
    {
        struct MaterialTechniqueSet entry;// Offset=0x0 Size=0x90
        union XAssetPoolEntry<MaterialTechniqueSet> * next;// Offset=0x0 Size=0x4
    };
};

struct XAssetPool<GfxImage,1>// Size=0x74 (Id=6462)
{
    union XAssetPoolEntry<GfxImage> * freeHead;// Offset=0x0 Size=0x4
    union XAssetPoolEntry<GfxImage> entries[1];// Offset=0x4 Size=0x70
};

enum _unnamed_6463
{
    DM_MEMORY_VIRTUAL=0,
    DM_MEMORY_PHYSICAL=1,
    DM_MEMORY_COUNT=2
};

struct DB_MemoryTypeInfo// Size=0xc (Id=6464)
{
    unsigned int alignment;// Offset=0x0 Size=0x4
    unsigned int physicalType;// Offset=0x4 Size=0x4
    enum PMem_Source physicalSource;// Offset=0x8 Size=0x4
};

enum MaterialWorldVertexFormat
{
    MTL_WORLDVERT_TEX_1_NRM_1=0,
    MTL_WORLDVERT_TEX_2_NRM_1=1,
    MTL_WORLDVERT_TEX_2_NRM_2=2,
    MTL_WORLDVERT_TEX_3_NRM_1=3,
    MTL_WORLDVERT_TEX_3_NRM_2=4,
    MTL_WORLDVERT_TEX_3_NRM_3=5,
    MTL_WORLDVERT_TEX_4_NRM_1=6,
    MTL_WORLDVERT_TEX_4_NRM_2=7,
    MTL_WORLDVERT_TEX_4_NRM_3=8,
    MTL_WORLDVERT_TEX_5_NRM_1=9,
    MTL_WORLDVERT_TEX_5_NRM_2=10,
    MTL_WORLDVERT_TEX_5_NRM_3=11
};

enum nodeType
{
    NODE_ERROR=0,
    NODE_PATHNODE=1,
    NODE_COVER_STAND=2,
    NODE_COVER_CROUCH=3,
    NODE_COVER_CROUCH_WINDOW=4,
    NODE_COVER_PRONE=5,
    NODE_COVER_RIGHT=6,
    NODE_COVER_LEFT=7,
    NODE_AMBUSH=8,
    NODE_EXPOSED=9,
    NODE_CONCEALMENT_STAND=10,
    NODE_CONCEALMENT_CROUCH=11,
    NODE_CONCEALMENT_PRONE=12,
    NODE_DOOR=13,
    NODE_DOOR_INTERIOR=14,
    NODE_SCRIPTED=15,
    NODE_NEGOTIATION_BEGIN=16,
    NODE_NEGOTIATION_END=17,
    NODE_TURRET=18,
    NODE_GUARD=19,
    NODE_NUMTYPES=20,
    NODE_DONTLINK=20
};

enum _unnamed_6467
{
    MAX_WEAP_NOTETRACK_TO_SOUND_MAPPINGS=16
};

enum _unnamed_6468
{
    ENT_DRAW_DOBJ=0,
    ENT_DRAW_BRUSH=1,
    ENT_DRAW_COUNT=2
};

enum PathNodeErrorCode
{
    PNERR_NONE=0,
    PNERR_INSOLID=1,
    PNERR_FLOATING=2,
    PNERR_NOLINK=3,
    PNERR_DUPLICATE=4,
    PNERR_NOSTANCE=5,
    PNERR_INVALIDDOOR=6,
    PNERR_NOANGLES=7,
    PNERR_BADPLACEMENT=8,
    NUM_PATH_NODE_ERRORS=9
};

struct pathnode_constant_t// Size=0x40 (Id=6470)
{
    enum nodeType type;// Offset=0x0 Size=0x4
    unsigned short spawnflags;// Offset=0x4 Size=0x2
    unsigned short targetname;// Offset=0x6 Size=0x2
    unsigned short script_linkName;// Offset=0x8 Size=0x2
    unsigned short script_noteworthy;// Offset=0xa Size=0x2
    unsigned short target;// Offset=0xc Size=0x2
    unsigned short animscript;// Offset=0xe Size=0x2
    int animscriptfunc;// Offset=0x10 Size=0x4
    float vOrigin[3];// Offset=0x14 Size=0xc
    float fAngle;// Offset=0x20 Size=0x4
    float forward[2];// Offset=0x24 Size=0x8
    float fRadius;// Offset=0x2c Size=0x4
    union // Size=0x4 (Id=0)
    {
        float minUseDistSq;// Offset=0x30 Size=0x4
        enum PathNodeErrorCode error;// Offset=0x30 Size=0x4
    };
    short wOverlapNode[2];// Offset=0x34 Size=0x4
    unsigned short totalLinkCount;// Offset=0x38 Size=0x2
    unsigned char __align0[2];// Offset=0x3a Size=0x2
    struct pathlink_s * Links;// Offset=0x3c Size=0x4
};

struct pathnode_transient_t// Size=0x1c (Id=6471)
{
    int iSearchFrame;// Offset=0x0 Size=0x4
    struct pathnode_t * pNextOpen;// Offset=0x4 Size=0x4
    struct pathnode_t * pPrevOpen;// Offset=0x8 Size=0x4
    struct pathnode_t * pParent;// Offset=0xc Size=0x4
    float fCost;// Offset=0x10 Size=0x4
    float fHeuristic;// Offset=0x14 Size=0x4
    union // Size=0x4 (Id=0)
    {
        float nodeCost;// Offset=0x18 Size=0x4
        int linkIndex;// Offset=0x18 Size=0x4
    };
};

struct XMA2_DATA_ALIGNED// Size=0x8 (Id=6472)
{
    unsigned char * pAudioData;// Offset=0x0 Size=0x4
    unsigned long AudioBytes;// Offset=0x4 Size=0x4
};

struct DynEntityServer// Size=0x24 (Id=6473)
{
    struct GfxPlacement pose;// Offset=0x0 Size=0x1c
    unsigned short flags;// Offset=0x1c Size=0x2
    unsigned char __align0[2];// Offset=0x1e Size=0x2
    int health;// Offset=0x20 Size=0x4
};

struct pathnode_tree_t// Size=0x10 (Id=6474)
{
    int axis;// Offset=0x0 Size=0x4
    float dist;// Offset=0x4 Size=0x4
    union pathnode_tree_info_t u;// Offset=0x8 Size=0x8
};

union PackedLightingCoords// Size=0x4 (Id=6475)
{
    unsigned int packed;// Offset=0x0 Size=0x4
};

struct pathnode_dynamic_t// Size=0x2c (Id=6476)
{
    void * pOwner;// Offset=0x0 Size=0x4
    int iFreeTime;// Offset=0x4 Size=0x4
    int iValidTime[3];// Offset=0x8 Size=0xc
    int dangerousNodeTime[3];// Offset=0x14 Size=0xc
    int inPlayerLOSTime;// Offset=0x20 Size=0x4
    short wLinkCount;// Offset=0x24 Size=0x2
    short wOverlapCount;// Offset=0x26 Size=0x2
    short turretEntNumber;// Offset=0x28 Size=0x2
    unsigned char userCount;// Offset=0x2a Size=0x1
    bool hasBadPlaceLink;// Offset=0x2b Size=0x1
};

struct pathbasenode_t// Size=0x10 (Id=6477)
{
    float vOrigin[3];// Offset=0x0 Size=0xc
    unsigned int type;// Offset=0xc Size=0x4
};

struct pathlink_s// Size=0xc (Id=6478)
{
    float fDist;// Offset=0x0 Size=0x4
    unsigned short nodeNum;// Offset=0x4 Size=0x2
    unsigned char disconnectCount;// Offset=0x6 Size=0x1
    unsigned char negotiationLink;// Offset=0x7 Size=0x1
    unsigned char flags;// Offset=0x8 Size=0x1
    unsigned char ubBadPlaceCount[3];// Offset=0x9 Size=0x3
};

struct pathnode_t// Size=0x88 (Id=6479)
{
    struct pathnode_constant_t constant;// Offset=0x0 Size=0x40
    struct pathnode_dynamic_t dynamic;// Offset=0x40 Size=0x2c
    struct pathnode_transient_t transient;// Offset=0x6c Size=0x1c
};

struct XA2Sound// Size=0x44 (Id=6480)
{
    struct XMA2_DATA_ALIGNED data;// Offset=0x0 Size=0x8
    struct XMA2WAVEFORMATEX format;// Offset=0x8 Size=0x34
    struct XA2SeekTable seekTable;// Offset=0x3c Size=0x8
};

struct GfxHeroOnlyLight// Size=0x38 (Id=6481)
{
    unsigned char type;// Offset=0x0 Size=0x1
    unsigned char unused[3];// Offset=0x1 Size=0x3
    float color[3];// Offset=0x4 Size=0xc
    float dir[3];// Offset=0x10 Size=0xc
    float origin[3];// Offset=0x1c Size=0xc
    float radius;// Offset=0x28 Size=0x4
    float cosHalfFovOuter;// Offset=0x2c Size=0x4
    float cosHalfFovInner;// Offset=0x30 Size=0x4
    int exponent;// Offset=0x34 Size=0x4
};

struct pathnode_tree_nodes_t// Size=0x8 (Id=6482)
{
    int nodeCount;// Offset=0x0 Size=0x4
    unsigned short * nodes;// Offset=0x4 Size=0x4
};

struct XA2SeekTable// Size=0x8 (Id=6483)
{
    unsigned long * pSeekData;// Offset=0x0 Size=0x4
    unsigned long SeekBytes;// Offset=0x4 Size=0x4
};

struct Picmip// Size=0x1 (Id=6484)
{
    unsigned char platform[1];// Offset=0x0 Size=0x1
};

union pathnode_tree_info_t// Size=0x8 (Id=6485)
{
    struct pathnode_tree_t * child[2];// Offset=0x0 Size=0x8
    struct pathnode_tree_nodes_t s;// Offset=0x0 Size=0x8
};

struct clipMap_t// Size=0x100 (Id=6486)
{
    char * name;// Offset=0x0 Size=0x4
    int isInUse;// Offset=0x4 Size=0x4
    int planeCount;// Offset=0x8 Size=0x4
    struct cplane_s * planes;// Offset=0xc Size=0x4
    unsigned int numStaticModels;// Offset=0x10 Size=0x4
    struct cStaticModel_s * staticModelList;// Offset=0x14 Size=0x4
    unsigned int numMaterials;// Offset=0x18 Size=0x4
    struct ClipMaterial * materials;// Offset=0x1c Size=0x4
    unsigned int numBrushSides;// Offset=0x20 Size=0x4
    struct cbrushside_t * brushsides;// Offset=0x24 Size=0x4
    unsigned int numBrushEdges;// Offset=0x28 Size=0x4
    unsigned char * brushEdges;// Offset=0x2c Size=0x4
    unsigned int numNodes;// Offset=0x30 Size=0x4
    struct cNode_t * nodes;// Offset=0x34 Size=0x4
    unsigned int numLeafs;// Offset=0x38 Size=0x4
    struct cLeaf_t * leafs;// Offset=0x3c Size=0x4
    unsigned int leafbrushNodesCount;// Offset=0x40 Size=0x4
    struct cLeafBrushNode_s * leafbrushNodes;// Offset=0x44 Size=0x4
    unsigned int numLeafBrushes;// Offset=0x48 Size=0x4
    unsigned short * leafbrushes;// Offset=0x4c Size=0x4
    unsigned int numLeafSurfaces;// Offset=0x50 Size=0x4
    unsigned int * leafsurfaces;// Offset=0x54 Size=0x4
    unsigned int vertCount;// Offset=0x58 Size=0x4
    float * verts[3];// Offset=0x5c Size=0x4
    int triCount;// Offset=0x60 Size=0x4
    unsigned short * triIndices;// Offset=0x64 Size=0x4
    unsigned char * triEdgeIsWalkable;// Offset=0x68 Size=0x4
    int borderCount;// Offset=0x6c Size=0x4
    struct CollisionBorder * borders;// Offset=0x70 Size=0x4
    int partitionCount;// Offset=0x74 Size=0x4
    struct CollisionPartition * partitions;// Offset=0x78 Size=0x4
    int aabbTreeCount;// Offset=0x7c Size=0x4
    struct CollisionAabbTree * aabbTrees;// Offset=0x80 Size=0x4
    unsigned int numSubModels;// Offset=0x84 Size=0x4
    struct cmodel_t * cmodels;// Offset=0x88 Size=0x4
    unsigned short numBrushes;// Offset=0x8c Size=0x2
    unsigned char __align0[2];// Offset=0x8e Size=0x2
    struct cbrush_t * brushes;// Offset=0x90 Size=0x4
    struct Bounds * brushBounds;// Offset=0x94 Size=0x4
    int * brushContents;// Offset=0x98 Size=0x4
    struct MapEnts * mapEnts;// Offset=0x9c Size=0x4
    unsigned short smodelNodeCount;// Offset=0xa0 Size=0x2
    unsigned char __align1[2];// Offset=0xa2 Size=0x2
    struct SModelAabbNode * smodelNodes;// Offset=0xa4 Size=0x4
    unsigned short dynEntCount[2];// Offset=0xa8 Size=0x4
    struct DynEntityDef * dynEntDefList[2];// Offset=0xac Size=0x8
    struct DynEntityPose * dynEntPoseList[2];// Offset=0xb4 Size=0x8
    struct DynEntityClient * dynEntClientList[2];// Offset=0xbc Size=0x8
    struct DynEntityColl * dynEntCollList[2];// Offset=0xc4 Size=0x8
    unsigned int checksum;// Offset=0xcc Size=0x4
};

struct DB_LoadData// Size=0x70 (Id=6487)
{
    struct DBFile * file;// Offset=0x0 Size=0x4
    int outstandingRead;// Offset=0x4 Size=0x4
    unsigned char * fileBuffer;// Offset=0x8 Size=0x4
    unsigned int readSize;// Offset=0xc Size=0x4
    unsigned int completedReadSize;// Offset=0x10 Size=0x4
    unsigned int offset;// Offset=0x14 Size=0x4
    unsigned char * start_in;// Offset=0x18 Size=0x4
    struct _OVERLAPPED overlapped;// Offset=0x1c Size=0x14
    unsigned long readError;// Offset=0x30 Size=0x4
    struct z_stream_s stream;// Offset=0x34 Size=0x30
    unsigned int lookaheadReadSize;// Offset=0x64 Size=0x4
    unsigned int lookaheadOffset;// Offset=0x68 Size=0x4
    unsigned int lookaheadClearAvailIn;// Offset=0x6c Size=0x4
};

struct XFile// Size=0x20 (Id=6488)
{
    unsigned int size;// Offset=0x0 Size=0x4
    unsigned int externalSize;// Offset=0x4 Size=0x4
    unsigned int blockSize[6];// Offset=0x8 Size=0x18
};

union Hash_state// Size=0x70 (Id=6489)
{
    union // Size=0x70 (Id=0)
    {
        char dummy[1];// Offset=0x0 Size=0x1
        struct sha256_state sha256;// Offset=0x0 Size=0x70
        void * data;// Offset=0x0 Size=0x4
    };
};

struct DB_AuthHash// Size=0x20 (Id=6490)
{
    unsigned char bytes[32];// Offset=0x0 Size=0x20
};

struct DB_AuthHash// Size=0x20 (Id=6491)
{
    unsigned char bytes[32];// Offset=0x0 Size=0x20
};

struct DB_AuthSignature// Size=0x100 (Id=6492)
{
    unsigned char bytes[256];// Offset=0x0 Size=0x100
};

struct Rsa_key// Size=0x24 (Id=6493)
{
    int type;// Offset=0x0 Size=0x4
    void * e;// Offset=0x4 Size=0x4
    void * d;// Offset=0x8 Size=0x4
    void * N;// Offset=0xc Size=0x4
    void * p;// Offset=0x10 Size=0x4
    void * q;// Offset=0x14 Size=0x4
    void * qP;// Offset=0x18 Size=0x4
    void * dP;// Offset=0x1c Size=0x4
    void * dQ;// Offset=0x20 Size=0x4
};

struct ltc_hash_descriptor// Size=0x68 (Id=6494)
{
    char * name;// Offset=0x0 Size=0x4
    unsigned char ID;// Offset=0x4 Size=0x1
    unsigned char __align0[3];// Offset=0x5 Size=0x3
    unsigned long hashsize;// Offset=0x8 Size=0x4
    unsigned long blocksize;// Offset=0xc Size=0x4
    unsigned long OID[16];// Offset=0x10 Size=0x40
    unsigned long OIDlen;// Offset=0x50 Size=0x4
    int  ( * init)(union Hash_state * );// Offset=0x54 Size=0x4
    int  ( * process)(union Hash_state * ,unsigned char * ,unsigned long );// Offset=0x58 Size=0x4
    int  ( * done)(union Hash_state * ,unsigned char * );// Offset=0x5c Size=0x4
    int  ( * test)();// Offset=0x60 Size=0x4
    int  ( * hmac_block)(unsigned char * ,unsigned long ,unsigned char * ,unsigned long ,unsigned char * ,unsigned long * );// Offset=0x64 Size=0x4
};

struct ltc_math_descriptor// Size=0xc4 (Id=6495)
{
    char * name;// Offset=0x0 Size=0x4
    int bits_per_digit;// Offset=0x4 Size=0x4
    int  ( * init)(void ** );// Offset=0x8 Size=0x4
    int  ( * init_copy)(void ** ,void * );// Offset=0xc Size=0x4
    void  ( * deinit)(void * );// Offset=0x10 Size=0x4
    int  ( * neg)(void * ,void * );// Offset=0x14 Size=0x4
    int  ( * copy)(void * ,void * );// Offset=0x18 Size=0x4
    int  ( * set_int)(void * ,unsigned long );// Offset=0x1c Size=0x4
    unsigned long  ( * get_int)(void * );// Offset=0x20 Size=0x4
    unsigned long  ( * get_digit)(void * ,int );// Offset=0x24 Size=0x4
    int  ( * get_digit_count)(void * );// Offset=0x28 Size=0x4
    int  ( * compare)(void * ,void * );// Offset=0x2c Size=0x4
    int  ( * compare_d)(void * ,unsigned long );// Offset=0x30 Size=0x4
    int  ( * count_bits)(void * );// Offset=0x34 Size=0x4
    int  ( * count_lsb_bits)(void * );// Offset=0x38 Size=0x4
    int  ( * twoexpt)(void * ,int );// Offset=0x3c Size=0x4
    int  ( * read_radix)(void * ,char * ,int );// Offset=0x40 Size=0x4
    int  ( * write_radix)(void * ,char * ,int );// Offset=0x44 Size=0x4
    unsigned long  ( * unsigned_size)(void * );// Offset=0x48 Size=0x4
    int  ( * unsigned_write)(void * ,unsigned char * );// Offset=0x4c Size=0x4
    int  ( * unsigned_read)(void * ,unsigned char * ,unsigned long );// Offset=0x50 Size=0x4
    int  ( * add)(void * ,void * ,void * );// Offset=0x54 Size=0x4
    int  ( * addi)(void * ,unsigned long ,void * );// Offset=0x58 Size=0x4
    int  ( * sub)(void * ,void * ,void * );// Offset=0x5c Size=0x4
    int  ( * subi)(void * ,unsigned long ,void * );// Offset=0x60 Size=0x4
    int  ( * mul)(void * ,void * ,void * );// Offset=0x64 Size=0x4
    int  ( * muli)(void * ,unsigned long ,void * );// Offset=0x68 Size=0x4
    int  ( * sqr)(void * ,void * );// Offset=0x6c Size=0x4
    int  ( * mpdiv)(void * ,void * ,void * ,void * );// Offset=0x70 Size=0x4
    int  ( * div_2)(void * ,void * );// Offset=0x74 Size=0x4
    int  ( * modi)(void * ,unsigned long ,unsigned long * );// Offset=0x78 Size=0x4
    int  ( * gcd)(void * ,void * ,void * );// Offset=0x7c Size=0x4
    int  ( * lcm)(void * ,void * ,void * );// Offset=0x80 Size=0x4
    int  ( * mulmod)(void * ,void * ,void * ,void * );// Offset=0x84 Size=0x4
    int  ( * sqrmod)(void * ,void * ,void * );// Offset=0x88 Size=0x4
    int  ( * invmod)(void * ,void * ,void * );// Offset=0x8c Size=0x4
    int  ( * montgomery_setup)(void * ,void ** );// Offset=0x90 Size=0x4
    int  ( * montgomery_normalization)(void * ,void * );// Offset=0x94 Size=0x4
    int  ( * montgomery_reduce)(void * ,void * ,void * );// Offset=0x98 Size=0x4
    void  ( * montgomery_deinit)(void * );// Offset=0x9c Size=0x4
    int  ( * exptmod)(void * ,void * ,void * ,void * );// Offset=0xa0 Size=0x4
    int  ( * isprime)(void * ,int * );// Offset=0xa4 Size=0x4
    int  ( * ecc_ptmul)(void * ,void * ,void * ,void * ,int );// Offset=0xa8 Size=0x4
    int  ( * ecc_ptadd)(void * ,void * ,void * ,void * ,void * );// Offset=0xac Size=0x4
    int  ( * ecc_ptdbl)(void * ,void * ,void * ,void * );// Offset=0xb0 Size=0x4
    int  ( * ecc_map)(void * ,void * ,void * );// Offset=0xb4 Size=0x4
    int  ( * ecc_mul2add)(void * ,void * ,void * ,void * ,void * ,void * );// Offset=0xb8 Size=0x4
    int  ( * rsa_keygen)(union Prng_state * ,int ,int ,long ,struct Rsa_key * );// Offset=0xbc Size=0x4
    int  ( * rsa_me)(unsigned char * ,unsigned long ,unsigned char * ,unsigned long * ,int ,struct Rsa_key * );// Offset=0xc0 Size=0x4
};

enum ltc_pkcs_1_paddings
{
    LTC_LTC_PKCS_1_V1_5=1,
    LTC_LTC_PKCS_1_OAEP=2,
    LTC_LTC_PKCS_1_PSS=3
};

struct DB_AuthLoadGlob// Size=0x6030 (Id=6497)
{
    int isSecure;// Offset=0x0 Size=0x4
    char expectedFastfileName[32];// Offset=0x4 Size=0x20
    struct DB_AuthHeader header;// Offset=0x24 Size=0x1fd0
    struct DB_MasterBlock masterBlock;// Offset=0x1ff4 Size=0x2000
    unsigned int authedGroupCount;// Offset=0x3ff4 Size=0x4
    unsigned int authedChunkInGroupCount;// Offset=0x3ff8 Size=0x4
    struct z_stream_s stream;// Offset=0x3ffc Size=0x30
    unsigned int copyBufferEnd;// Offset=0x402c Size=0x4
    unsigned char copyBuffer[8192];// Offset=0x4030 Size=0x2000
};

struct TomGameMemGlob// Size=0x8 (Id=6498)
{
    unsigned char * memAt;// Offset=0x0 Size=0x4
    unsigned char * memEnd;// Offset=0x4 Size=0x4
};

enum _unnamed_6499
{
    CRYPT_OK=0,
    CRYPT_ERROR=1,
    CRYPT_NOP=2,
    CRYPT_INVALID_KEYSIZE=3,
    CRYPT_INVALID_ROUNDS=4,
    CRYPT_FAIL_TESTVECTOR=5,
    CRYPT_BUFFER_OVERFLOW=6,
    CRYPT_INVALID_PACKET=7,
    CRYPT_INVALID_PRNGSIZE=8,
    CRYPT_ERROR_READPRNG=9,
    CRYPT_INVALID_CIPHER=10,
    CRYPT_INVALID_HASH=11,
    CRYPT_INVALID_PRNG=12,
    CRYPT_MEM=13,
    CRYPT_PK_TYPE_MISMATCH=14,
    CRYPT_PK_NOT_PRIVATE=15,
    CRYPT_INVALID_ARG=16,
    CRYPT_FILE_NOTFOUND=17,
    CRYPT_PK_INVALID_TYPE=18,
    CRYPT_PK_INVALID_SYSTEM=19,
    CRYPT_PK_DUP=20,
    CRYPT_PK_NOT_FOUND=21,
    CRYPT_PK_INVALID_SIZE=22,
    CRYPT_INVALID_PRIME_SIZE=23,
    CRYPT_PK_INVALID_PADDING=24
};

struct rijndael_key// Size=0x1e4 (Id=6500)
{
    unsigned long eK[60];// Offset=0x0 Size=0xf0
    unsigned long dK[60];// Offset=0xf0 Size=0xf0
    int Nr;// Offset=0x1e0 Size=0x4
};

union Symmetric_key// Size=0x1e4 (Id=6501)
{
    union // Size=0x1e4 (Id=0)
    {
        struct rijndael_key rijndael;// Offset=0x0 Size=0x1e4
        void * data;// Offset=0x0 Size=0x4
    };
};

struct fortuna_prng// Size=0x1028 (Id=6502)
{
    union Hash_state pool[32];// Offset=0x0 Size=0xe00
    union Symmetric_key skey;// Offset=0xe00 Size=0x1e4
    unsigned char K[32];// Offset=0xfe4 Size=0x20
    unsigned char IV[16];// Offset=0x1004 Size=0x10
    unsigned long pool_idx;// Offset=0x1014 Size=0x4
    unsigned long pool0_len;// Offset=0x1018 Size=0x4
    unsigned long wd;// Offset=0x101c Size=0x4
    unsigned long long reset_cnt;// Offset=0x1020 Size=0x8
};

struct DB_AuthSignature// Size=0x100 (Id=6503)
{
    unsigned char bytes[256];// Offset=0x0 Size=0x100
};

struct DB_MasterBlock// Size=0x2000 (Id=6504)
{
    struct DB_AuthHash chunkHashes[256];// Offset=0x0 Size=0x2000
};

union Prng_state// Size=0x1028 (Id=6505)
{
    char dummy[1];// Offset=0x0 Size=0x1
    struct fortuna_prng fortuna;// Offset=0x0 Size=0x1028
};

struct DB_AuthHeader// Size=0x1fd0 (Id=6506)
{
    union // Size=0x12c (Id=0)
    {
        unsigned char magic[8];// Offset=0x0 Size=0x8
        unsigned int reserved;// Offset=0x8 Size=0x4
        struct DB_AuthHash subheaderHash;// Offset=0xc Size=0x20
        struct DB_AuthSignature signedSubheaderHash;// Offset=0x2c Size=0x100
        struct <unnamed-type-subheader>// Size=0x1ea4 (Id=66964)
        {
            char fastfileName[32];// Offset=0x0 Size=0x20
            unsigned int reserved;// Offset=0x20 Size=0x4
            struct DB_AuthHash masterBlockHashes[244];// Offset=0x24 Size=0x1e80
        };
    };
    struct DB_AuthHeader::<unnamed-type-subheader> subheader;// Offset=0x12c Size=0x1ea4
};

struct DB_AuthHeader::<unnamed-type-subheader>// Size=0x1ea4 (Id=6507)
{
    char fastfileName[32];// Offset=0x0 Size=0x20
    unsigned int reserved;// Offset=0x20 Size=0x4
    struct DB_AuthHash masterBlockHashes[244];// Offset=0x24 Size=0x1e80
};

struct sha256_state// Size=0x70 (Id=6508)
{
    unsigned long long length;// Offset=0x0 Size=0x8
    unsigned long state[8];// Offset=0x8 Size=0x20
    unsigned long curlen;// Offset=0x28 Size=0x4
    unsigned char buf[64];// Offset=0x2c Size=0x40
};

union XAssetHeader// Size=0x4 (Id=6509)
{
    struct PhysPreset * physPreset;// Offset=0x0 Size=0x4
    struct PhysCollmap * physCollmap;// Offset=0x0 Size=0x4
    struct XAnimParts * parts;// Offset=0x0 Size=0x4
    struct XModelSurfs * modelSurfs;// Offset=0x0 Size=0x4
    struct XModel * model;// Offset=0x0 Size=0x4
    struct Material * material;// Offset=0x0 Size=0x4
    struct MaterialPixelShader * pixelShader;// Offset=0x0 Size=0x4
    struct MaterialVertexShader * vertexShader;// Offset=0x0 Size=0x4
    struct MaterialTechniqueSet * techniqueSet;// Offset=0x0 Size=0x4
    struct GfxImage * image;// Offset=0x0 Size=0x4
    struct snd_alias_list_t * sound;// Offset=0x0 Size=0x4
    struct SndCurve * sndCurve;// Offset=0x0 Size=0x4
    struct LoadedSound * loadSnd;// Offset=0x0 Size=0x4
    struct clipMap_t * clipMap;// Offset=0x0 Size=0x4
    struct ComWorld * comWorld;// Offset=0x0 Size=0x4
    struct GameWorldSp * gameWorldSp;// Offset=0x0 Size=0x4
    struct GameWorldMp * gameWorldMp;// Offset=0x0 Size=0x4
    struct MapEnts * mapEnts;// Offset=0x0 Size=0x4
    struct FxWorld * fxWorld;// Offset=0x0 Size=0x4
    struct GfxWorld * gfxWorld;// Offset=0x0 Size=0x4
    struct GfxLightDef * lightDef;// Offset=0x0 Size=0x4
    struct Font_s * font;// Offset=0x0 Size=0x4
    struct MenuList * menuList;// Offset=0x0 Size=0x4
    struct menuDef_t * menu;// Offset=0x0 Size=0x4
    struct LocalizeEntry * localize;// Offset=0x0 Size=0x4
    struct WeaponCompleteDef * weapon;// Offset=0x0 Size=0x4
    struct SndDriverGlobals * sndDriverGlobals;// Offset=0x0 Size=0x4
    struct FxEffectDef * fx;// Offset=0x0 Size=0x4
    struct FxImpactTable * impactFx;// Offset=0x0 Size=0x4
    struct RawFile * rawfile;// Offset=0x0 Size=0x4
    struct StringTable * stringTable;// Offset=0x0 Size=0x4
    struct LeaderboardDef * leaderboardDef;// Offset=0x0 Size=0x4
    struct StructuredDataDefSet * structuredDataDefSet;// Offset=0x0 Size=0x4
    struct TracerDef * tracerDef;// Offset=0x0 Size=0x4
    struct VehicleDef * vehDef;// Offset=0x0 Size=0x4
    struct AddonMapEnts * addonMapEnts;// Offset=0x0 Size=0x4
    void * data;// Offset=0x0 Size=0x4
};

struct clipMap_t// Size=0x100 (Id=6510)
{
    char * name;// Offset=0x0 Size=0x4
    int isInUse;// Offset=0x4 Size=0x4
    int planeCount;// Offset=0x8 Size=0x4
    struct cplane_s * planes;// Offset=0xc Size=0x4
    unsigned int numStaticModels;// Offset=0x10 Size=0x4
    struct cStaticModel_s * staticModelList;// Offset=0x14 Size=0x4
    unsigned int numMaterials;// Offset=0x18 Size=0x4
    struct ClipMaterial * materials;// Offset=0x1c Size=0x4
    unsigned int numBrushSides;// Offset=0x20 Size=0x4
    struct cbrushside_t * brushsides;// Offset=0x24 Size=0x4
    unsigned int numBrushEdges;// Offset=0x28 Size=0x4
    unsigned char * brushEdges;// Offset=0x2c Size=0x4
    unsigned int numNodes;// Offset=0x30 Size=0x4
    struct cNode_t * nodes;// Offset=0x34 Size=0x4
    unsigned int numLeafs;// Offset=0x38 Size=0x4
    struct cLeaf_t * leafs;// Offset=0x3c Size=0x4
    unsigned int leafbrushNodesCount;// Offset=0x40 Size=0x4
    struct cLeafBrushNode_s * leafbrushNodes;// Offset=0x44 Size=0x4
    unsigned int numLeafBrushes;// Offset=0x48 Size=0x4
    unsigned short * leafbrushes;// Offset=0x4c Size=0x4
    unsigned int numLeafSurfaces;// Offset=0x50 Size=0x4
    unsigned int * leafsurfaces;// Offset=0x54 Size=0x4
    unsigned int vertCount;// Offset=0x58 Size=0x4
    float * verts[3];// Offset=0x5c Size=0x4
    int triCount;// Offset=0x60 Size=0x4
    unsigned short * triIndices;// Offset=0x64 Size=0x4
    unsigned char * triEdgeIsWalkable;// Offset=0x68 Size=0x4
    int borderCount;// Offset=0x6c Size=0x4
    struct CollisionBorder * borders;// Offset=0x70 Size=0x4
    int partitionCount;// Offset=0x74 Size=0x4
    struct CollisionPartition * partitions;// Offset=0x78 Size=0x4
    int aabbTreeCount;// Offset=0x7c Size=0x4
    struct CollisionAabbTree * aabbTrees;// Offset=0x80 Size=0x4
    unsigned int numSubModels;// Offset=0x84 Size=0x4
    struct cmodel_t * cmodels;// Offset=0x88 Size=0x4
    unsigned short numBrushes;// Offset=0x8c Size=0x2
    unsigned char __align0[2];// Offset=0x8e Size=0x2
    struct cbrush_t * brushes;// Offset=0x90 Size=0x4
    struct Bounds * brushBounds;// Offset=0x94 Size=0x4
    int * brushContents;// Offset=0x98 Size=0x4
    struct MapEnts * mapEnts;// Offset=0x9c Size=0x4
    unsigned short smodelNodeCount;// Offset=0xa0 Size=0x2
    unsigned char __align1[2];// Offset=0xa2 Size=0x2
    struct SModelAabbNode * smodelNodes;// Offset=0xa4 Size=0x4
    unsigned short dynEntCount[2];// Offset=0xa8 Size=0x4
    struct DynEntityDef * dynEntDefList[2];// Offset=0xac Size=0x8
    struct DynEntityPose * dynEntPoseList[2];// Offset=0xb4 Size=0x8
    struct DynEntityClient * dynEntClientList[2];// Offset=0xbc Size=0x8
    struct DynEntityColl * dynEntCollList[2];// Offset=0xc4 Size=0x8
    unsigned int checksum;// Offset=0xcc Size=0x4
};

struct AssetBufGlob// Size=0x20 (Id=6511)
{
    unsigned char * buf;// Offset=0x0 Size=0x4
    int bufsize;// Offset=0x4 Size=0x4
    unsigned char * pos;// Offset=0x8 Size=0x4
    unsigned char * sourcePos;// Offset=0xc Size=0x4
    struct PointerMapEntry * ptrMap;// Offset=0x10 Size=0x4
    struct PointerMapEntry * ptrMapRoot;// Offset=0x14 Size=0x4
    struct PointerMapEntry * ptrMapEnd;// Offset=0x18 Size=0x4
    int ptrMapSize;// Offset=0x1c Size=0x4
};

struct PointerMapEntry// Size=0x10 (Id=6512)
{
    void * from;// Offset=0x0 Size=0x4
    void * to;// Offset=0x4 Size=0x4
    unsigned short children[2];// Offset=0x8 Size=0x4
    unsigned short height;// Offset=0xc Size=0x2
};

struct MuteData// Size=0x408 (Id=6513)
{
    unsigned char userCount;// Offset=0x0 Size=0x1
    unsigned char __align0[7];// Offset=0x1 Size=0x7
    unsigned long long users[128];// Offset=0x8 Size=0x400
};

enum ScreenPlacementMode
{
    SCRMODE_FULL=0,
    SCRMODE_DISPLAY=1,
    SCRMODE_INVALID=2,
    SCRMODE_COUNT=3
};

enum _unnamed_6515
{
    LOBBYSTAT_KILLS=0,
    LOBBYSTAT_DIVIDER=1,
    LOBBYSTAT_DEATHS=2,
    LOBBYSTAT_COUNT=3
};

struct PartyMessages// Size=0x8 (Id=6516)
{
    char * string;// Offset=0x0 Size=0x4
    void  ( * func)(struct PartyData * ,int ,struct netadr_t ,struct msg_t * );// Offset=0x4 Size=0x4
};

struct PartyMessages// Size=0x8 (Id=6517)
{
    char * string;// Offset=0x0 Size=0x4
    void  ( * func)(struct PartyData * ,int ,struct netadr_t ,struct msg_t * );// Offset=0x4 Size=0x4
};

enum FeedStatus
{
    FETCH_READY=0,
    NEXT_READY=1,
    FEEDSTATUS_COUNT=2
};

enum _unnamed_6519
{
    TASK_FETCHLBCOL=0,
    NUM_TASKS=1
};

struct newsFeed_t// Size=0x840 (Id=6520)
{
    char buffer[2][512];// Offset=0x0 Size=0x400
    int bufsize[2];// Offset=0x400 Size=0x8
    int current;// Offset=0x408 Size=0x4
    char spec[512];// Offset=0x40c Size=0x200
    int parsePos;// Offset=0x60c Size=0x4
    union fetchData_t data;// Offset=0x610 Size=0x198
    struct overlappedTask task;// Offset=0x7a8 Size=0x80
    unsigned long long xuid;// Offset=0x828 Size=0x8
    int nextUpdate;// Offset=0x830 Size=0x4
    int id;// Offset=0x834 Size=0x4
    enum FeedStatus status;// Offset=0x838 Size=0x4
};

union fetchData_t// Size=0x198 (Id=6521)
{
    union // Size=0x198 (Id=0)
    {
        struct LbGetColData lbColData;// Offset=0x0 Size=0x198
        unsigned char data[1];// Offset=0x0 Size=0x1
    };
};

struct GamerSettingState// Size=0x350 (Id=6522)
{
    bool isProfileLoggedIn;// Offset=0x0 Size=0x1
    bool errorOnRead;// Offset=0x1 Size=0x1
    unsigned char __align0[2];// Offset=0x2 Size=0x2
    struct GamerSettingCommonConfig commonConfig;// Offset=0x4 Size=0x30
    struct GamerSettingCommonConfigStrings commonStrings;// Offset=0x34 Size=0x200
    struct GamerSettingExeConfig exeConfig;// Offset=0x234 Size=0x14
    struct GamerSettingExeConfigStrings exeStrings;// Offset=0x248 Size=0x105
};

struct gpfield_t// Size=0x8 (Id=6523)
{
    int offset;// Offset=0x0 Size=0x4
    unsigned int maxSize;// Offset=0x4 Size=0x4
};

struct GamerProfileSetting// Size=0x8 (Id=6524)
{
    char * settingName;// Offset=0x0 Size=0x4
    char * dvarName;// Offset=0x4 Size=0x4
};

enum gamerProfileSettings
{
    invertPitch=0,
    viewSensitivity=1,
    autoAim=2,
    rumble=3,
    thumbstickHandedness=4,
    cod2ExeSettings=5,
    cod2CommonSettings=6,
    READ_SETTINGS_TOTAL_COUNT=7
};

struct GamerProfileDataField// Size=0xc (Id=6526)
{
    char * settingName;// Offset=0x0 Size=0x4
    int offset;// Offset=0x4 Size=0x4
    enum GamerProfileDataType type;// Offset=0x8 Size=0x4
};

struct GamerProfileDataField// Size=0xc (Id=6527)
{
    char * settingName;// Offset=0x0 Size=0x4
    int offset;// Offset=0x4 Size=0x4
    enum GamerProfileDataType type;// Offset=0x8 Size=0x4
};

struct GamerProfileSetting// Size=0x8 (Id=6528)
{
    char * settingName;// Offset=0x0 Size=0x4
    char * dvarName;// Offset=0x4 Size=0x4
};

struct gpfield_t// Size=0x8 (Id=6529)
{
    int offset;// Offset=0x0 Size=0x4
    unsigned int maxSize;// Offset=0x4 Size=0x4
};

struct PrintChannelGlob// Size=0x21e0 (Id=6530)
{
    struct PrintChannel openChannels[256];// Offset=0x0 Size=0x2100
    unsigned int filters[7][8];// Offset=0x2100 Size=0xe0
};

struct PrintChannel// Size=0x21 (Id=6531)
{
    char name[32];// Offset=0x0 Size=0x20
    bool allowScript;// Offset=0x20 Size=0x1
};

enum connstate_t
{
    CA_DISCONNECTED=0,
    CA_CINEMATIC=1,
    CA_LOGO=2,
    CA_CONNECTING=3,
    CA_CHALLENGING=4,
    CA_CONNECTED=5,
    CA_SENDINGSTATS=6,
    CA_LOADING=7,
    CA_PRIMED=8,
    CA_ACTIVE=9
};

enum netsrc_t
{
    NS_CLIENT1=0,
    NS_CLIENT2=1,
    NS_CLIENT3=2,
    NS_CLIENT4=3,
    NS_SERVER=4,
    NS_MAXCLIENTS=4,
    NS_PACKET=5
};

struct VoicePacket_t// Size=0xb (Id=6534)
{
    unsigned char talker;// Offset=0x0 Size=0x1
    unsigned char data[10];// Offset=0x1 Size=0xa
};

enum _unnamed_6535
{
    RENDERCMD_BEGINFRAME=1,
    RENDERCMD_ENDFRAME=2
};

struct MigrationMessage// Size=0x8 (Id=6536)
{
    char * string;// Offset=0x0 Size=0x4
    void  ( * func)(const int ,struct netadr_t ,struct msg_t * );// Offset=0x4 Size=0x4
};

struct ClientPing// Size=0xc (Id=6537)
{
    bool active;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    int ping;// Offset=0x4 Size=0x4
    int nextPingTime;// Offset=0x8 Size=0x4
};

struct ping_t// Size=0x438 (Id=6538)
{
    struct netadr_t adr;// Offset=0x0 Size=0xc
    struct XNADDR xnaddr;// Offset=0xc Size=0x24
    int start;// Offset=0x30 Size=0x4
    int time;// Offset=0x34 Size=0x4
    char info[1024];// Offset=0x38 Size=0x400
};

struct GfxConfiguration// Size=0x24 (Id=6539)
{
    bool inited;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    unsigned int maxClientViews;// Offset=0x4 Size=0x4
    unsigned int entCount;// Offset=0x8 Size=0x4
    unsigned int entnumNone;// Offset=0xc Size=0x4
    unsigned int entnumOrdinaryEnd;// Offset=0x10 Size=0x4
    int threadContextCount;// Offset=0x14 Size=0x4
    int critSectCount;// Offset=0x18 Size=0x4
    bool defaultFullscreen;// Offset=0x1c Size=0x1
    unsigned char __align1[1];// Offset=0x1d Size=0x1
    unsigned short defaultFullscreenFlags;// Offset=0x1e Size=0x2
    int defaultMode;// Offset=0x20 Size=0x4
};

struct FxSystem// Size=0xad0 (Id=6540)
{
    struct FxCamera camera;// Offset=0x0 Size=0xb0
    struct FxCamera cameraPrev;// Offset=0xb0 Size=0xb0
    struct FxSpriteInfo sprite;// Offset=0x160 Size=0x10
    struct FxEffect * effects;// Offset=0x170 Size=0x4
    struct FxPool<FxElem> * elems;// Offset=0x174 Size=0x4
    struct FxPool<FxTrail> * trails;// Offset=0x178 Size=0x4
    struct FxPool<FxTrailElem> * trailElems;// Offset=0x17c Size=0x4
    struct FxPool<FxBolt> * bolts;// Offset=0x180 Size=0x4
    struct FxPool<FxSparkCloud> * sparkClouds;// Offset=0x184 Size=0x4
    struct FxPool<FxSparkFountain> * sparkFountains;// Offset=0x188 Size=0x4
    struct FxPool<FxSparkFountainCluster> * sparkFountainClusters;// Offset=0x18c Size=0x4
    unsigned short * deferredElems;// Offset=0x190 Size=0x4
    long firstFreeElem;// Offset=0x194 Size=0x4
    long firstFreeTrailElem;// Offset=0x198 Size=0x4
    long firstFreeTrail;// Offset=0x19c Size=0x4
    long firstFreeBolt;// Offset=0x1a0 Size=0x4
    long firstFreeSparkCloud;// Offset=0x1a4 Size=0x4
    long firstFreeSparkFountain;// Offset=0x1a8 Size=0x4
    long firstFreeSparkFountainCluster;// Offset=0x1ac Size=0x4
    long deferredElemCount;// Offset=0x1b0 Size=0x4
    long activeElemCount;// Offset=0x1b4 Size=0x4
    long activeTrailElemCount;// Offset=0x1b8 Size=0x4
    long activeTrailCount;// Offset=0x1bc Size=0x4
    long activeBoltCount;// Offset=0x1c0 Size=0x4
    long activeSparkCloudCount;// Offset=0x1c4 Size=0x4
    long activeSparkFountainCount;// Offset=0x1c8 Size=0x4
    long activeSparkFountainClusterCount;// Offset=0x1cc Size=0x4
    long gfxCloudCount;// Offset=0x1d0 Size=0x4
    struct FxVisState * visState;// Offset=0x1d4 Size=0x4
    struct FxVisState * visStateBufferRead;// Offset=0x1d8 Size=0x4
    struct FxVisState * visStateBufferWrite;// Offset=0x1dc Size=0x4
    long firstActiveEffect;// Offset=0x1e0 Size=0x4
    long firstNewEffect;// Offset=0x1e4 Size=0x4
    long firstFreeEffect;// Offset=0x1e8 Size=0x4
    unsigned short allEffectHandles[1024];// Offset=0x1ec Size=0x800
    long activeSpotLightEffectCount;// Offset=0x9ec Size=0x4
    long activeSpotLightElemCount;// Offset=0x9f0 Size=0x4
    unsigned short activeSpotLightEffectHandle;// Offset=0x9f4 Size=0x2
    unsigned short activeSpotLightElemHandle;// Offset=0x9f6 Size=0x2
    short activeSpotLightBoltDobj;// Offset=0x9f8 Size=0x2
    unsigned char __align0[2];// Offset=0x9fa Size=0x2
    long iteratorCount;// Offset=0x9fc Size=0x4
    int msecNow;// Offset=0xa00 Size=0x4
    long msecDraw;// Offset=0xa04 Size=0x4
    int frameCount;// Offset=0xa08 Size=0x4
    bool isInitialized;// Offset=0xa0c Size=0x1
    bool needsGarbageCollection;// Offset=0xa0d Size=0x1
    bool isArchiving;// Offset=0xa0e Size=0x1
    unsigned char localClientNum;// Offset=0xa0f Size=0x1
    unsigned int restartList[32];// Offset=0xa10 Size=0x80
    struct FxEffect ** restartEffectsList;// Offset=0xa90 Size=0x4
    unsigned int restartCount;// Offset=0xa94 Size=0x4
    unsigned int pad1[14];// Offset=0xa98 Size=0x38
};

struct field_t// Size=0x118 (Id=6541)
{
    int cursor;// Offset=0x0 Size=0x4
    int scroll;// Offset=0x4 Size=0x4
    int drawWidth;// Offset=0x8 Size=0x4
    int widthInPixels;// Offset=0xc Size=0x4
    float charHeight;// Offset=0x10 Size=0x4
    int fixedSize;// Offset=0x14 Size=0x4
    char buffer[256];// Offset=0x18 Size=0x100
};

enum _unnamed_6542
{
    KEYS_ALL=0,
    KEYS_GAMEPAD_ONLY=1
};

enum LocSelInputState
{
    LOC_SEL_INPUT_NONE=0,
    LOC_SEL_INPUT_CONFIRM=1,
    LOC_SEL_INPUT_CANCEL=2
};

struct PlayerKeyState// Size=0xd28 (Id=6544)
{
    struct field_t chatField;// Offset=0x0 Size=0x118
    int chat_team;// Offset=0x118 Size=0x4
    int overstrikeMode;// Offset=0x11c Size=0x4
    int anyKeyDown;// Offset=0x120 Size=0x4
    struct KeyState keys[256];// Offset=0x124 Size=0xc00
    enum LocSelInputState locSelInputState;// Offset=0xd24 Size=0x4
};

struct keyname_t// Size=0x8 (Id=6545)
{
    char * name;// Offset=0x0 Size=0x4
    int keynum;// Offset=0x4 Size=0x4
};

struct KeyState// Size=0xc (Id=6546)
{
    int down;// Offset=0x0 Size=0x4
    int repeats;// Offset=0x4 Size=0x4
    char * binding;// Offset=0x8 Size=0x4
};

struct AimInput// Size=0x30 (Id=6547)
{
    float deltaTime;// Offset=0x0 Size=0x4
    float deltaTimeScaled;// Offset=0x4 Size=0x4
    float pitch;// Offset=0x8 Size=0x4
    float pitchAxis;// Offset=0xc Size=0x4
    float pitchMax;// Offset=0x10 Size=0x4
    float yaw;// Offset=0x14 Size=0x4
    float yawAxis;// Offset=0x18 Size=0x4
    float yawMax;// Offset=0x1c Size=0x4
    float forwardAxis;// Offset=0x20 Size=0x4
    float rightAxis;// Offset=0x24 Size=0x4
    int buttons;// Offset=0x28 Size=0x4
    int localClientNum;// Offset=0x2c Size=0x4
};

struct AimOutput// Size=0x10 (Id=6548)
{
    float pitch;// Offset=0x0 Size=0x4
    float yaw;// Offset=0x4 Size=0x4
    float meleeChargeYaw;// Offset=0x8 Size=0x4
    unsigned char meleeChargeDist;// Offset=0xc Size=0x1
};

enum GamepadVirtualAxis
{
    GPAD_VIRTAXIS_SIDE=0,
    GPAD_VIRTAXIS_FORWARD=1,
    GPAD_VIRTAXIS_UP=2,
    GPAD_VIRTAXIS_YAW=3,
    GPAD_VIRTAXIS_PITCH=4,
    GPAD_VIRTAXIS_ATTACK=5,
    GPAD_VIRTAXIS_COUNT=6,
    GPAD_VIRTAXIS_NONE=-1
};

enum _unnamed_6550
{
    KB_LEFT=0,
    KB_RIGHT=1,
    KB_FORWARD=2,
    KB_BACK=3,
    KB_LOOKUP=4,
    KB_LOOKDOWN=5,
    KB_MOVELEFT=6,
    KB_MOVERIGHT=7,
    KB_STRAFE=8,
    KB_SPEED=9,
    KB_UP=10,
    KB_DOWN=11,
    KB_ANYUP=12,
    KB_MLOOK=13,
    KB_SPECTATE=14,
    KB_SPECNEXT=15,
    KB_SPECPREV=16,
    KB_ATTACK=17,
    KB_BREATH=18,
    KB_FRAG=19,
    KB_OFFHANDSECONDARY=20,
    KB_MELEE=21,
    KB_ACTIVATE=22,
    KB_RELOAD=23,
    KB_USE_RELOAD=24,
    KB_LEANLEFT=25,
    KB_LEANRIGHT=26,
    KB_PRONE=27,
    KB_CROUCH=28,
    KB_THROW=29,
    KB_SPRINT=30,
    KB_NIGHTVISION=31,
    NUM_BUTTONS=32
};

struct kbutton_t// Size=0x14 (Id=6551)
{
    int down[2];// Offset=0x0 Size=0x8
    unsigned int downtime;// Offset=0x8 Size=0x4
    unsigned int msec;// Offset=0xc Size=0x4
    bool active;// Offset=0x10 Size=0x1
    bool wasPressed;// Offset=0x11 Size=0x1
};

enum GamepadMapping
{
    GPAD_MAP_LINEAR=0,
    GPAD_MAP_SQUARED=1,
    GPAD_MAP_COUNT=2,
    GPAD_MAP_NONE=-1
};

enum GamePadStick
{
    GPAD_INVALID=0,
    GPAD_LX=1073741824,
    GPAD_LY=1073741825,
    GPAD_RX=1073741826,
    GPAD_RY=1073741827
};

struct StickToCodeMap// Size=0xc (Id=6554)
{
    enum GamepadPhysicalAxis physicalAxis;// Offset=0x0 Size=0x4
    int posCode;// Offset=0x4 Size=0x4
    int negCode;// Offset=0x8 Size=0x4
};

struct GpadAxesGlob// Size=0x48 (Id=6555)
{
    int axesValues[6];// Offset=0x0 Size=0x18
    struct GamepadVirtualAxisMapping virtualAxes[6];// Offset=0x18 Size=0x30
};

struct GamepadVirtualAxisMapping// Size=0x8 (Id=6556)
{
    enum GamepadPhysicalAxis physicalAxis;// Offset=0x0 Size=0x4
    enum GamepadMapping mapType;// Offset=0x4 Size=0x4
};

struct MessageWindow// Size=0x34 (Id=6557)
{
    struct MessageLine * lines;// Offset=0x0 Size=0x4
    struct Message * messages;// Offset=0x4 Size=0x4
    char * circularTextBuffer;// Offset=0x8 Size=0x4
    int textBufSize;// Offset=0xc Size=0x4
    int lineCount;// Offset=0x10 Size=0x4
    int padding;// Offset=0x14 Size=0x4
    int scrollTime;// Offset=0x18 Size=0x4
    int fadeIn;// Offset=0x1c Size=0x4
    int fadeOut;// Offset=0x20 Size=0x4
    int textBufPos;// Offset=0x24 Size=0x4
    int firstLineIndex;// Offset=0x28 Size=0x4
    int activeLineCount;// Offset=0x2c Size=0x4
    int messageIndex;// Offset=0x30 Size=0x4
};

struct ConDrawInputGlob// Size=0x64 (Id=6558)
{
    char autoCompleteChoice[64];// Offset=0x0 Size=0x40
    int matchIndex;// Offset=0x40 Size=0x4
    int matchCount;// Offset=0x44 Size=0x4
    char * inputText;// Offset=0x48 Size=0x4
    int inputTextLen;// Offset=0x4c Size=0x4
    bool hasExactMatch;// Offset=0x50 Size=0x1
    bool mayAutoComplete;// Offset=0x51 Size=0x1
    unsigned char __align0[2];// Offset=0x52 Size=0x2
    float x;// Offset=0x54 Size=0x4
    float y;// Offset=0x58 Size=0x4
    float leftX;// Offset=0x5c Size=0x4
    float fontHeight;// Offset=0x60 Size=0x4
};

struct Console// Size=0x223d0 (Id=6559)
{
    struct MessageWindow consoleWindow;// Offset=0x0 Size=0x34
    struct MessageLine consoleLines[1024];// Offset=0x34 Size=0x6000
    struct Message consoleMessages[1024];// Offset=0x6034 Size=0x2000
    char consoleText[32768];// Offset=0x8034 Size=0x8000
    char textTempLine[512];// Offset=0x10034 Size=0x200
    unsigned int lineOffset;// Offset=0x10234 Size=0x4
    int displayLineOffset;// Offset=0x10238 Size=0x4
    int prevChannel;// Offset=0x1023c Size=0x4
    bool outputVisible;// Offset=0x10240 Size=0x1
    unsigned char __align0[3];// Offset=0x10241 Size=0x3
    int fontHeight;// Offset=0x10244 Size=0x4
    int visibleLineCount;// Offset=0x10248 Size=0x4
    int visiblePixelWidth;// Offset=0x1024c Size=0x4
    float screenMin[2];// Offset=0x10250 Size=0x8
    float screenMax[2];// Offset=0x10258 Size=0x8
    struct MessageBuffer messageBuffer[4];// Offset=0x10260 Size=0x12160
    float color[4];// Offset=0x223c0 Size=0x10
};

struct Message// Size=0x8 (Id=6560)
{
    int startTime;// Offset=0x0 Size=0x4
    int endTime;// Offset=0x4 Size=0x4
};

struct MessageBuffer// Size=0x4858 (Id=6561)
{
    char gamemsgText[4][2048];// Offset=0x0 Size=0x2000
    struct MessageWindow gamemsgWindows[4];// Offset=0x2000 Size=0xd0
    struct MessageLine gamemsgLines[4][12];// Offset=0x20d0 Size=0x480
    struct Message gamemsgMessages[4][12];// Offset=0x2550 Size=0x180
    char miniconText[4096];// Offset=0x26d0 Size=0x1000
    struct MessageWindow miniconWindow;// Offset=0x36d0 Size=0x34
    struct MessageLine miniconLines[100];// Offset=0x3704 Size=0x960
    struct Message miniconMessages[100];// Offset=0x4064 Size=0x320
    char errorText[1024];// Offset=0x4384 Size=0x400
    struct MessageWindow errorWindow;// Offset=0x4784 Size=0x34
    struct MessageLine errorLines[5];// Offset=0x47b8 Size=0x78
    struct Message errorMessages[5];// Offset=0x4830 Size=0x28
};

struct MessageLine// Size=0x18 (Id=6562)
{
    int messageIndex;// Offset=0x0 Size=0x4
    int textBufPos;// Offset=0x4 Size=0x4
    int textBufSize;// Offset=0x8 Size=0x4
    int typingStartTime;// Offset=0xc Size=0x4
    int lastTypingSoundTime;// Offset=0x10 Size=0x4
    int flags;// Offset=0x14 Size=0x4
};

struct MessageWindow// Size=0x34 (Id=6563)
{
    struct MessageLine * lines;// Offset=0x0 Size=0x4
    struct Message * messages;// Offset=0x4 Size=0x4
    char * circularTextBuffer;// Offset=0x8 Size=0x4
    int textBufSize;// Offset=0xc Size=0x4
    int lineCount;// Offset=0x10 Size=0x4
    int padding;// Offset=0x14 Size=0x4
    int scrollTime;// Offset=0x18 Size=0x4
    int fadeIn;// Offset=0x1c Size=0x4
    int fadeOut;// Offset=0x20 Size=0x4
    int textBufPos;// Offset=0x24 Size=0x4
    int firstLineIndex;// Offset=0x28 Size=0x4
    int activeLineCount;// Offset=0x2c Size=0x4
    int messageIndex;// Offset=0x30 Size=0x4
};

struct CgEntCollNode// Size=0x14 (Id=6564)
{
    unsigned short sector;// Offset=0x0 Size=0x2
    unsigned short nextEntInSector;// Offset=0x2 Size=0x2
    float linkMins[2];// Offset=0x4 Size=0x8
    float linkMaxs[2];// Offset=0xc Size=0x8
};

struct CgEntCollTree// Size=0xc (Id=6565)
{
    union // Size=0x6 (Id=0)
    {
        float dist;// Offset=0x0 Size=0x4
        unsigned short axis;// Offset=0x4 Size=0x2
        union <unnamed-type-u>// Size=0x2 (Id=67340)
        {
            unsigned short parent;// Offset=0x0 Size=0x2
            unsigned short nextFree;// Offset=0x0 Size=0x2
        };
        unsigned char __align0[4];// Offset=0x2 Size=0x4
    };
    union CgEntCollTree::<unnamed-type-u> u;// Offset=0x6 Size=0x2
    unsigned short child[2];// Offset=0x8 Size=0x4
};

union CgEntCollTree::<unnamed-type-u>// Size=0x2 (Id=6566)
{
    unsigned short parent;// Offset=0x0 Size=0x2
    unsigned short nextFree;// Offset=0x0 Size=0x2
};

struct CgEntCollSector// Size=0x10 (Id=6567)
{
    struct CgEntCollTree tree;// Offset=0x0 Size=0xc
    unsigned short entListHead;// Offset=0xc Size=0x2
};

struct MissileConeSoundVars// Size=0x58 (Id=6568)
{
    float start[3];// Offset=0x0 Size=0xc
    float dir[3];// Offset=0xc Size=0xc
    struct snd_alias_t * alias;// Offset=0x18 Size=0x4
    struct snd_alias_t * aliasAtBase;// Offset=0x1c Size=0x4
    float radiusAtTop;// Offset=0x20 Size=0x4
    float radiusAtBase;// Offset=0x24 Size=0x4
    float height;// Offset=0x28 Size=0x4
    float volumescaleAtCore;// Offset=0x2c Size=0x4
    float volumescaleAtEdge;// Offset=0x30 Size=0x4
    float volumescaleCoreSize;// Offset=0x34 Size=0x4
    bool pitchshiftEnabled;// Offset=0x38 Size=0x1
    unsigned char __align0[3];// Offset=0x39 Size=0x3
    float pitchAtTop;// Offset=0x3c Size=0x4
    float pitchAtBottom;// Offset=0x40 Size=0x4
    float pitchTopSize;// Offset=0x44 Size=0x4
    float pitchBottomSize;// Offset=0x48 Size=0x4
    bool crossfadeEnabled;// Offset=0x4c Size=0x1
    unsigned char __align1[3];// Offset=0x4d Size=0x3
    float crossfadeTopSize;// Offset=0x50 Size=0x4
    float crossfadeBottomSize;// Offset=0x54 Size=0x4
};

struct MissileConeSoundVars// Size=0x58 (Id=6569)
{
    float start[3];// Offset=0x0 Size=0xc
    float dir[3];// Offset=0xc Size=0xc
    struct snd_alias_t * alias;// Offset=0x18 Size=0x4
    struct snd_alias_t * aliasAtBase;// Offset=0x1c Size=0x4
    float radiusAtTop;// Offset=0x20 Size=0x4
    float radiusAtBase;// Offset=0x24 Size=0x4
    float height;// Offset=0x28 Size=0x4
    float volumescaleAtCore;// Offset=0x2c Size=0x4
    float volumescaleAtEdge;// Offset=0x30 Size=0x4
    float volumescaleCoreSize;// Offset=0x34 Size=0x4
    bool pitchshiftEnabled;// Offset=0x38 Size=0x1
    unsigned char __align0[3];// Offset=0x39 Size=0x3
    float pitchAtTop;// Offset=0x3c Size=0x4
    float pitchAtBottom;// Offset=0x40 Size=0x4
    float pitchTopSize;// Offset=0x44 Size=0x4
    float pitchBottomSize;// Offset=0x48 Size=0x4
    bool crossfadeEnabled;// Offset=0x4c Size=0x1
    unsigned char __align1[3];// Offset=0x4d Size=0x3
    float crossfadeTopSize;// Offset=0x50 Size=0x4
    float crossfadeBottomSize;// Offset=0x54 Size=0x4
};

enum WeaponAnimNumber
{
    WEAP_IDLE=0,
    WEAP_FORCE_IDLE=1,
    WEAP_ATTACK=2,
    WEAP_ATTACK_LASTSHOT=3,
    WEAP_RECHAMBER=4,
    WEAP_ADS_ATTACK=5,
    WEAP_ADS_ATTACK_LASTSHOT=6,
    WEAP_ADS_RECHAMBER=7,
    WEAP_MELEE_ATTACK=8,
    WEAP_MELEE_CHARGE=9,
    WEAP_DROP=10,
    WEAP_RAISE=11,
    WEAP_FIRST_RAISE=12,
    WEAP_RELOAD=13,
    WEAP_RELOAD_EMPTY=14,
    WEAP_RELOAD_START=15,
    WEAP_RELOAD_END=16,
    WEAP_ALTSWITCHFROM=17,
    WEAP_ALTSWITCHTO=18,
    WEAP_QUICK_DROP=19,
    WEAP_QUICK_RAISE=20,
    WEAP_EMPTY_DROP=21,
    WEAP_EMPTY_RAISE=22,
    WEAP_SPRINT_IN=23,
    WEAP_SPRINT_LOOP=24,
    WEAP_SPRINT_OUT=25,
    WEAP_STUNNED_START=26,
    WEAP_STUNNED_LOOP=27,
    WEAP_STUNNED_END=28,
    WEAP_HOLD_FIRE=29,
    WEAP_DETONATE=30,
    WEAP_NIGHTVISION_WEAR=31,
    WEAP_NIGHTVISION_REMOVE=32,
    MAX_WP_ANIMATIONS=33
};

enum LaserOwnerEnum
{
    LASER_OWNER_NON_PLAYER=0,
    LASER_OWNER_PLAYER=1
};

enum TurretAnims
{
    TURRET_ANIM_ROOT=0,
    TURRET_ANIM_IDLE=1,
    TURRET_ANIM_FIRE=2,
    TURRET_ANIM_NUM=3
};

struct weaponStaticInfo_t// Size=0xc (Id=6573)
{
    struct XAnim_s * animsTwoHanded;// Offset=0x0 Size=0x4
    struct XAnim_s * animsRightHanded;// Offset=0x4 Size=0x4
    struct XAnim_s * animsLeftHanded;// Offset=0x8 Size=0x4
};

struct AnimRateOffset// Size=0x8 (Id=6574)
{
    int forWeapDef;// Offset=0x0 Size=0x4
    int forWeapCompleteDef;// Offset=0x4 Size=0x4
};

struct visionSetVars_t// Size=0x6c (Id=6575)
{
    bool glowEnable;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    float glowBloomCutoff;// Offset=0x4 Size=0x4
    float glowBloomDesaturation;// Offset=0x8 Size=0x4
    float glowBloomIntensity0;// Offset=0xc Size=0x4
    float glowBloomIntensity1;// Offset=0x10 Size=0x4
    float glowRadius0;// Offset=0x14 Size=0x4
    float glowRadius1;// Offset=0x18 Size=0x4
    float glowSkyBleedIntensity0;// Offset=0x1c Size=0x4
    float glowSkyBleedIntensity1;// Offset=0x20 Size=0x4
    bool filmEnable;// Offset=0x24 Size=0x1
    unsigned char __align1[3];// Offset=0x25 Size=0x3
    float filmBrightness;// Offset=0x28 Size=0x4
    float filmContrast;// Offset=0x2c Size=0x4
    float filmDesaturation;// Offset=0x30 Size=0x4
    float filmDesaturationDark;// Offset=0x34 Size=0x4
    bool filmInvert;// Offset=0x38 Size=0x1
    unsigned char __align2[3];// Offset=0x39 Size=0x3
    float filmLightTint[3];// Offset=0x3c Size=0xc
    float filmMediumTint[3];// Offset=0x48 Size=0xc
    float filmDarkTint[3];// Offset=0x54 Size=0xc
    bool charPrimaryUseTweaks;// Offset=0x60 Size=0x1
    unsigned char __align3[3];// Offset=0x61 Size=0x3
    float charPrimaryDiffuseScale;// Offset=0x64 Size=0x4
    float charPrimarySpecularScale;// Offset=0x68 Size=0x4
};

enum _unnamed_6576
{
    DTYPE_BOOL=0,
    DTYPE_FLOAT=1,
    DTYPE_VEC3=2
};

struct visField_t// Size=0xc (Id=6577)
{
    char * name;// Offset=0x0 Size=0x4
    int offset;// Offset=0x4 Size=0x4
    int fieldType;// Offset=0x8 Size=0x4
};

struct ClientViewParams// Size=0x10 (Id=6578)
{
    float x;// Offset=0x0 Size=0x4
    float y;// Offset=0x4 Size=0x4
    float width;// Offset=0x8 Size=0x4
    float height;// Offset=0xc Size=0x4
};

enum SunShadowMode
{
    SUN_SHADOW_DEFAULT=0,
    SUN_SHADOW_FORCE_ON=1,
    SUN_SHADOW_FORCE_OFF=2
};

struct ClientViewParams// Size=0x10 (Id=6580)
{
    float x;// Offset=0x0 Size=0x4
    float y;// Offset=0x4 Size=0x4
    float width;// Offset=0x8 Size=0x4
    float height;// Offset=0xc Size=0x4
};

struct TestEffect// Size=0x54 (Id=6581)
{
    char name[64];// Offset=0x0 Size=0x40
    float pos[3];// Offset=0x40 Size=0xc
    int time;// Offset=0x4c Size=0x4
    int respawnTime;// Offset=0x50 Size=0x4
};

struct vehicleEffects// Size=0x28 (Id=6582)
{
    bool active;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    int lastAccessed;// Offset=0x4 Size=0x4
    int entityNum;// Offset=0x8 Size=0x4
    int nextDustFx;// Offset=0xc Size=0x4
    int nextSmokeFx;// Offset=0x10 Size=0x4
    bool soundPlaying;// Offset=0x14 Size=0x1
    unsigned char __align1[3];// Offset=0x15 Size=0x3
    float barrelVelocity;// Offset=0x18 Size=0x4
    float barrelPos;// Offset=0x1c Size=0x4
    int lastBarrelUpdateTime;// Offset=0x20 Size=0x4
    unsigned char tag_engine_left;// Offset=0x24 Size=0x1
    unsigned char tag_engine_right;// Offset=0x25 Size=0x1
};

struct clientInfo_t// Size=0x540 (Id=6583)
{
    int infoValid;// Offset=0x0 Size=0x4
    int nextValid;// Offset=0x4 Size=0x4
    int clientNum;// Offset=0x8 Size=0x4
    char name[32];// Offset=0xc Size=0x20
    enum team_t team;// Offset=0x2c Size=0x4
    enum team_t oldteam;// Offset=0x30 Size=0x4
    int rank;// Offset=0x34 Size=0x4
    int prestige;// Offset=0x38 Size=0x4
    unsigned int perks[2];// Offset=0x3c Size=0x8
    char clanAbbrev[8];// Offset=0x44 Size=0x8
    int score;// Offset=0x4c Size=0x4
    int location;// Offset=0x50 Size=0x4
    int health;// Offset=0x54 Size=0x4
    char model[64];// Offset=0x58 Size=0x40
    char attachModelNames[6][64];// Offset=0x98 Size=0x180
    char attachTagNames[6][64];// Offset=0x218 Size=0x180
    unsigned int partBits[5];// Offset=0x398 Size=0x14
    struct lerpFrame_t legs;// Offset=0x3ac Size=0x30
    struct lerpFrame_t torso;// Offset=0x3dc Size=0x30
    float lerpMoveDir;// Offset=0x40c Size=0x4
    float lerpLean;// Offset=0x410 Size=0x4
    float playerAngles[3];// Offset=0x414 Size=0xc
    int legsAnim;// Offset=0x420 Size=0x4
    int torsoAnim;// Offset=0x424 Size=0x4
    float fTorsoPitch;// Offset=0x428 Size=0x4
    float fWaistPitch;// Offset=0x42c Size=0x4
    int leftHandGun;// Offset=0x430 Size=0x4
    int dobjDirty;// Offset=0x434 Size=0x4
    struct clientControllers_t control;// Offset=0x438 Size=0x48
    unsigned int clientConditions[18][2];// Offset=0x480 Size=0x90
    struct XAnimTree_s * pXAnimTree;// Offset=0x510 Size=0x4
    int iDObjWeapon;// Offset=0x514 Size=0x4
    unsigned char weaponModel;// Offset=0x518 Size=0x1
    unsigned char __align0[3];// Offset=0x519 Size=0x3
    int stanceTransitionTime;// Offset=0x51c Size=0x4
    int turnAnimEndTime;// Offset=0x520 Size=0x4
    char turnAnimType;// Offset=0x524 Size=0x1
    bool hideWeapon;// Offset=0x525 Size=0x1
    bool usingKnife;// Offset=0x526 Size=0x1
    unsigned char __align1[1];// Offset=0x527 Size=0x1
    int dualWielding;// Offset=0x528 Size=0x4
    enum PlayerDiveState diveState;// Offset=0x52c Size=0x4
    int riotShieldNext;// Offset=0x530 Size=0x4
    unsigned int playerCardIcon;// Offset=0x534 Size=0x4
    unsigned int playerCardTitle;// Offset=0x538 Size=0x4
    unsigned int playerCardNameplate;// Offset=0x53c Size=0x4
};

enum SCOREBOARD_FIELDS
{
    SCOREBOARD_CLIENT=0,
    SCOREBOARD_SCORE=1,
    SCOREBOARD_PING=2,
    SCOREBOARD_DEATHS=3,
    SCOREBOARD_STATUSICON=4,
    SCOREBOARD_RANKKILLS=5,
    SCOREBOARD_ASSISTS=6,
    SCOREBOARD_SKILL=7,
    SCOREBOARD_NUMFIELDS=8
};

enum SCOREBOARD_HEADER
{
    SCOREBOARD_SVCMD=0,
    SCOREBOARD_NUMSCORES=1,
    SCOREBOARD_ALLYSCORE=2,
    SCOREBOARD_AXISSCORE=3,
    SCOREBOARD_SCORELIMIT=4,
    SCOREBOARD_HEADERSIZE=5
};

struct <unnamed-type-cg_waitingScriptMenu>// Size=0x48 (Id=6586)
{
    char name[64];// Offset=0x0 Size=0x40
    int index;// Offset=0x40 Size=0x4
    bool useMouse;// Offset=0x44 Size=0x1
};

struct score_t// Size=0x2c (Id=6587)
{
    int client;// Offset=0x0 Size=0x4
    int score;// Offset=0x4 Size=0x4
    int ping;// Offset=0x8 Size=0x4
    int deaths;// Offset=0xc Size=0x4
    int team;// Offset=0x10 Size=0x4
    int kills;// Offset=0x14 Size=0x4
    int rank;// Offset=0x18 Size=0x4
    int assists;// Offset=0x1c Size=0x4
    int skill;// Offset=0x20 Size=0x4
    struct Material * hStatusIcon;// Offset=0x24 Size=0x4
    struct Material * hRankIcon;// Offset=0x28 Size=0x4
};

struct listColumnInfo_t// Size=0x10 (Id=6588)
{
    enum listColumnTypes_t type;// Offset=0x0 Size=0x4
    float fWidth;// Offset=0x4 Size=0x4
    char * pszName;// Offset=0x8 Size=0x4
    int iAlignment;// Offset=0xc Size=0x4
};

enum listColumnTypes_t
{
    LCT_NAME=0,
    LCT_CLAN=1,
    LCT_SCORE=2,
    LCT_DEATHS=3,
    LCT_PING=4,
    LCT_STATUS_ICON=5,
    LCT_TALKING_ICON=6,
    LCT_KILLS=7,
    LCT_RANK_ICON=8,
    LCT_ASSISTS=9,
    LCT_SKILL=10,
    LCT_NUM=11
};

struct listColumnInfo_t// Size=0x10 (Id=6590)
{
    enum listColumnTypes_t type;// Offset=0x0 Size=0x4
    float fWidth;// Offset=0x4 Size=0x4
    char * pszName;// Offset=0x8 Size=0x4
    int iAlignment;// Offset=0xc Size=0x4
};

struct ActiveRumble// Size=0x20 (Id=6591)
{
    union // Size=0x11 (Id=0)
    {
        struct RumbleInfo * rumbleInfo;// Offset=0x0 Size=0x4
        int startTime;// Offset=0x4 Size=0x4
        bool loop;// Offset=0x8 Size=0x1
        unsigned char __align0[3];// Offset=0x9 Size=0x3
        enum RumbleSourceType sourceType;// Offset=0xc Size=0x4
        unsigned char scale;// Offset=0x10 Size=0x1
        union <unnamed-type-source>// Size=0xc (Id=67478)
        {
            int entityNum;// Offset=0x0 Size=0x4
            float pos[3];// Offset=0x0 Size=0xc
        };
        unsigned char __align1[8];// Offset=0xc Size=0x8
    };
    union ActiveRumble::<unnamed-type-source> source;// Offset=0x14 Size=0xc
};

struct ActiveRumble// Size=0x20 (Id=6592)
{
    union // Size=0x11 (Id=0)
    {
        struct RumbleInfo * rumbleInfo;// Offset=0x0 Size=0x4
        int startTime;// Offset=0x4 Size=0x4
        bool loop;// Offset=0x8 Size=0x1
        unsigned char __align0[3];// Offset=0x9 Size=0x3
        enum RumbleSourceType sourceType;// Offset=0xc Size=0x4
        unsigned char scale;// Offset=0x10 Size=0x1
        union <unnamed-type-source>// Size=0xc (Id=67478)
        {
            int entityNum;// Offset=0x0 Size=0x4
            float pos[3];// Offset=0x0 Size=0xc
        };
        unsigned char __align1[8];// Offset=0xc Size=0x8
    };
    union ActiveRumble::<unnamed-type-source> source;// Offset=0x14 Size=0xc
};

struct RumbleInfo// Size=0x1c (Id=6593)
{
    int rumbleNameIndex;// Offset=0x0 Size=0x4
    float duration;// Offset=0x4 Size=0x4
    float range;// Offset=0x8 Size=0x4
    struct RumbleGraph * highRumbleGraph;// Offset=0xc Size=0x4
    struct RumbleGraph * lowRumbleGraph;// Offset=0x10 Size=0x4
    int fadeWithDistance;// Offset=0x14 Size=0x4
    int broadcast;// Offset=0x18 Size=0x4
};

enum RumbleSourceType
{
    RUMBLESOURCE_INVALID=0,
    RUMBLESOURCE_ENTITY=1,
    RUMBLESOURCE_POS=2
};

struct RumbleInfo// Size=0x1c (Id=6595)
{
    int rumbleNameIndex;// Offset=0x0 Size=0x4
    float duration;// Offset=0x4 Size=0x4
    float range;// Offset=0x8 Size=0x4
    struct RumbleGraph * highRumbleGraph;// Offset=0xc Size=0x4
    struct RumbleGraph * lowRumbleGraph;// Offset=0x10 Size=0x4
    int fadeWithDistance;// Offset=0x14 Size=0x4
    int broadcast;// Offset=0x18 Size=0x4
};

union ActiveRumble::<unnamed-type-source>// Size=0xc (Id=6596)
{
    int entityNum;// Offset=0x0 Size=0x4
    float pos[3];// Offset=0x0 Size=0xc
};

struct RumbleGlobals// Size=0x3890 (Id=6597)
{
    struct RumbleGraph graphs[64];// Offset=0x0 Size=0x3100
    struct RumbleInfo infos[32];// Offset=0x3100 Size=0x380
    struct ActiveRumble activeRumbles[32];// Offset=0x3480 Size=0x400
    float receiverPos[3];// Offset=0x3880 Size=0xc
    int receiverEntNum;// Offset=0x388c Size=0x4
};

struct RumbleGraph// Size=0xc4 (Id=6598)
{
    char graphName[64];// Offset=0x0 Size=0x40
    float knots[16][2];// Offset=0x40 Size=0x80
    unsigned short knotCount;// Offset=0xc0 Size=0x2
};

struct snapshot_s// Size=0x33c00 (Id=6599)
{
    struct playerState_s ps;// Offset=0x0 Size=0x3180
    int snapFlags;// Offset=0x3180 Size=0x4
    int ping;// Offset=0x3184 Size=0x4
    int serverTime;// Offset=0x3188 Size=0x4
    int numEntities;// Offset=0x318c Size=0x4
    int numClients;// Offset=0x3190 Size=0x4
    struct entityState_s entities[768];// Offset=0x3194 Size=0x30000
    struct clientState_s clients[18];// Offset=0x33194 Size=0xa68
    int serverCommandSequence;// Offset=0x33bfc Size=0x4
};

struct CEntPlayerInfo// Size=0x8 (Id=6600)
{
    struct clientControllers_t * control;// Offset=0x0 Size=0x4
    unsigned char tag[4];// Offset=0x4 Size=0x4
};

struct transPlayerState_t// Size=0x30 (Id=6601)
{
    int otherFlags;// Offset=0x0 Size=0x4
    int damageEvent;// Offset=0x4 Size=0x4
    int eventSequence;// Offset=0x8 Size=0x4
    int events[4];// Offset=0xc Size=0x10
    int unpredictableEventSequence;// Offset=0x1c Size=0x4
    int unpredictableEvents[4];// Offset=0x20 Size=0x10
};

enum cgDrawTalkEnum
{
    CG_TALKER_NONE=0,
    CG_TALKER_ALL=1,
    CG_TALKER_FRIENDLY=2,
    CG_TALKER_ENEMY=3,
    CG_TALKER_COUNT=4
};

enum MotionTrackerMedia::_unnamed_6603
{
    NOT_LOADED=0,
    LOADED=1
};

struct MotionTrackerMedia// Size=0x20 (Id=6604)
{
    enum _unnamed_67511
    {
        NOT_LOADED=0,
        LOADED=1
    };
    int loadState;// Offset=0x0 Size=0x4
    struct snd_alias_list_t * motionTrackerPing;// Offset=0x4 Size=0x4
    struct snd_alias_list_t * motionTrackerPong;// Offset=0x8 Size=0x4
    struct Material * motiontracker3d_bg;// Offset=0xc Size=0x4
    struct Material * motiontracker3d_sweep;// Offset=0x10 Size=0x4
    struct Material * motiontracker3d_ping_enemy;// Offset=0x14 Size=0x4
    struct Material * motiontracker3d_ping_friendly;// Offset=0x18 Size=0x4
    struct FxEffectDef * fx;// Offset=0x1c Size=0x4
};

struct MotionTrackerBuffers// Size=0x10 (Id=6605)
{
    bool reserveOnly;// Offset=0x0 Size=0x1
    unsigned char __align0[1];// Offset=0x1 Size=0x1
    unsigned short baseVertex;// Offset=0x2 Size=0x2
    struct r_double_index_t * baseIndices;// Offset=0x4 Size=0x4
    int quadIndex;// Offset=0x8 Size=0x4
    int reservedQuads;// Offset=0xc Size=0x4
};

struct MotionTrackerDisplayPos// Size=0x14 (Id=6606)
{
    float dist;// Offset=0x0 Size=0x4
    float yaw;// Offset=0x4 Size=0x4
    float displayYawMin;// Offset=0x8 Size=0x4
    float displayYawMax;// Offset=0xc Size=0x4
    int beginFadeTime;// Offset=0x10 Size=0x4
};

struct CompassActor// Size=0x64 (Id=6607)
{
    int lastUpdate;// Offset=0x0 Size=0x4
    float lastPos[3];// Offset=0x4 Size=0xc
    float lastEnemyPos[3];// Offset=0x10 Size=0xc
    float lastYaw;// Offset=0x1c Size=0x4
    int pingTime;// Offset=0x20 Size=0x4
    struct MotionTrackerDisplayPos motionPos;// Offset=0x24 Size=0x14
    struct MotionTrackerDisplayPos motionPosPrev;// Offset=0x38 Size=0x14
    int beginFadeTime;// Offset=0x4c Size=0x4
    int beginRadarFadeTime;// Offset=0x50 Size=0x4
    int beginVoiceFadeTime;// Offset=0x54 Size=0x4
    int flags;// Offset=0x58 Size=0x4
    unsigned int perks[2];// Offset=0x5c Size=0x8
};

struct MotionTrackerState// Size=0x10 (Id=6608)
{
    int on;// Offset=0x0 Size=0x4
    int stateChangeTime;// Offset=0x4 Size=0x4
    bool playedPingSoundThisSweep;// Offset=0x8 Size=0x1
    unsigned char __align0[3];// Offset=0x9 Size=0x3
    float aspectRatio;// Offset=0xc Size=0x4
};

struct trajectory_t// Size=0x24 (Id=6609)
{
    enum trType_t trType;// Offset=0x0 Size=0x4
    int trTime;// Offset=0x4 Size=0x4
    int trDuration;// Offset=0x8 Size=0x4
    float trBase[3];// Offset=0xc Size=0xc
    float trDelta[3];// Offset=0x18 Size=0xc
};

union SndEntHandle// Size=0x4 (Id=6610)
{
    struct <unnamed-type-field>// Size=0x4 (Id=47562)
    {
        unsigned int entIndex:12;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0xc
        unsigned int localClientNum:2;// Offset=0x0 Size=0x4 BitOffset=0x12 BitSize=0x2
        unsigned int isInKillCam:1;// Offset=0x0 Size=0x4 BitOffset=0x11 BitSize=0x1
    };
    struct SndEntHandle::<unnamed-type-field> field;// Offset=0x0 Size=0x4
    int handle;// Offset=0x0 Size=0x4
};

enum helicopteranims_t
{
    HELICOPTER_ROOT=0,
    HELICOPTER_ROTORS_ROTATE=1,
    HELICOPTER_NUM=2
};

struct CgSoundPlaybackTrackingInfo// Size=0x18 (Id=6612)
{
    int entitynum;// Offset=0x0 Size=0x4
    float origin[3];// Offset=0x4 Size=0xc
    char * aliasname;// Offset=0x10 Size=0x4
    int wasInKillcam;// Offset=0x14 Size=0x4
};

struct localEntity_s// Size=0x64 (Id=6613)
{
    struct localEntity_s * prev;// Offset=0x0 Size=0x4
    struct localEntity_s * next;// Offset=0x4 Size=0x4
    enum leType_t leType;// Offset=0x8 Size=0x4
    struct trajectory_t pos;// Offset=0xc Size=0x24
    int endTime;// Offset=0x30 Size=0x4
    struct TracerInfo tracer;// Offset=0x34 Size=0x30
};

struct cg_hudelem_t// Size=0x238 (Id=6614)
{
    float x;// Offset=0x0 Size=0x4
    float y;// Offset=0x4 Size=0x4
    float width;// Offset=0x8 Size=0x4
    float height;// Offset=0xc Size=0x4
    char hudElemLabel[256];// Offset=0x10 Size=0x100
    float labelWidth;// Offset=0x110 Size=0x4
    char hudElemText[256];// Offset=0x114 Size=0x100
    float textWidth;// Offset=0x214 Size=0x4
    struct Font_s * font;// Offset=0x218 Size=0x4
    float fontScale;// Offset=0x21c Size=0x4
    float fontHeight;// Offset=0x220 Size=0x4
    float color[4];// Offset=0x224 Size=0x10
    int timeNow;// Offset=0x234 Size=0x4
};

union hudelem_color_t// Size=0x4 (Id=6615)
{
    unsigned char r;// Offset=0x0 Size=0x1
    unsigned char g;// Offset=0x1 Size=0x1
    unsigned char b;// Offset=0x2 Size=0x1
    unsigned char a;// Offset=0x3 Size=0x1
    int rgba;// Offset=0x0 Size=0x4
};

struct WaypointDrawArgs// Size=0x2c (Id=6616)
{
    float * worldPos;// Offset=0x0 Size=0x4
    struct Material * iconMaterial;// Offset=0x4 Size=0x4
    float * color4;// Offset=0x8 Size=0x4
    char * label;// Offset=0xc Size=0x4
    float offsetY;// Offset=0x10 Size=0x4
    struct Material * arrowMaterial;// Offset=0x14 Size=0x4
    float arrowWidth;// Offset=0x18 Size=0x4
    float arrowHeight;// Offset=0x1c Size=0x4
    bool arrowForceFullAlpha;// Offset=0x20 Size=0x1
    unsigned char __align0[3];// Offset=0x21 Size=0x3
    float arrowFadeDistance;// Offset=0x24 Size=0x4
    bool rotateAtEdge;// Offset=0x28 Size=0x1
    bool fadeAtEdge;// Offset=0x29 Size=0x1
    bool drawOffscreenOnly;// Offset=0x2a Size=0x1
    bool alwaysDrawIcon;// Offset=0x2b Size=0x1
};

struct cg_hudelem_t// Size=0x238 (Id=6617)
{
    float x;// Offset=0x0 Size=0x4
    float y;// Offset=0x4 Size=0x4
    float width;// Offset=0x8 Size=0x4
    float height;// Offset=0xc Size=0x4
    char hudElemLabel[256];// Offset=0x10 Size=0x100
    float labelWidth;// Offset=0x110 Size=0x4
    char hudElemText[256];// Offset=0x114 Size=0x100
    float textWidth;// Offset=0x214 Size=0x4
    struct Font_s * font;// Offset=0x218 Size=0x4
    float fontScale;// Offset=0x21c Size=0x4
    float fontHeight;// Offset=0x220 Size=0x4
    float color[4];// Offset=0x224 Size=0x10
    int timeNow;// Offset=0x234 Size=0x4
};

enum _unnamed_6618
{
    UILAYER_LOWRES_BACKGROUND=0,
    UILAYER_BACKGROUND=1,
    UILAYER_FOREGROUND=2
};

struct CG_GlassData// Size=0x140c (Id=6619)
{
    struct CG_GlassPiece glassPieces[1024];// Offset=0x0 Size=0x1400
    int glassPieceCount;// Offset=0x1400 Size=0x4
    int soundsThisFrame;// Offset=0x1404 Size=0x4
    bool recievedInitialState;// Offset=0x1408 Size=0x1
};

struct CG_GlassPiece// Size=0x5 (Id=6620)
{
    unsigned char state;// Offset=0x0 Size=0x1
    unsigned char stateNextSnap;// Offset=0x1 Size=0x1
    unsigned char impactDir;// Offset=0x2 Size=0x1
    unsigned char impactPos[2];// Offset=0x3 Size=0x2
};

enum EquipmentSound_t
{
    EQS_WALKING=0,
    EQS_RUNNING=1,
    EQS_SPRINTING=2,
    EQS_QWALKING=3,
    EQS_QRUNNING=4,
    EQS_QSPRINTING=5
};

enum invalid_cmd_hint_t
{
    INVALID_CMD_NO_HINT=0,
    INVALID_CMD_STAND_HINT=1,
    INVALID_CMD_CROUCH_HINT=2,
    INVALID_CMD_PRONE_HINT=3
};

struct DelayListInfo// Size=0xc (Id=6623)
{
    struct centity_s * head;// Offset=0x0 Size=0x4
    struct centity_s * latest;// Offset=0x4 Size=0x4
    int size;// Offset=0x8 Size=0x4
};

enum scriptAnimNoteType_t
{
    ANIM_NOTE_NONE=0,
    ANIM_NOTE_RELOAD=1,
    NUM_ANIM_NOTES=2
};

struct GfxSkinnedXModelSurfs// Size=0x4 (Id=6625)
{
    void * firstSurf;// Offset=0x0 Size=0x4
};

struct GfxSceneEntity// Size=0x78 (Id=6626)
{
    float lightingOrigin[3];// Offset=0x0 Size=0xc
    struct GfxPlacement placement;// Offset=0xc Size=0x1c
    struct GfxSceneEntityCull cull;// Offset=0x28 Size=0x20
    char lods[32];// Offset=0x48 Size=0x20
    struct // Size=0x4 (Id=0)
    {
        unsigned int gfxEntIndex:7;// Offset=0x68 Size=0x4 BitOffset=0x19 BitSize=0x7
        unsigned int entnum:12;// Offset=0x68 Size=0x4 BitOffset=0xd BitSize=0xc
        unsigned int renderFxFlags:13;// Offset=0x68 Size=0x4 BitOffset=0x0 BitSize=0xd
    };
    struct DObj * obj;// Offset=0x6c Size=0x4
    union GfxSceneEntityInfo info;// Offset=0x70 Size=0x4
    unsigned char reflectionProbeIndex;// Offset=0x74 Size=0x1
};

struct GfxSceneEntityCull// Size=0x20 (Id=6627)
{
    unsigned int state;// Offset=0x0 Size=0x4
    struct Bounds bounds;// Offset=0x4 Size=0x18
    struct GfxSkinnedXModelSurfs skinnedSurfs;// Offset=0x1c Size=0x4
};

union GfxSceneEntityInfo// Size=0x4 (Id=6628)
{
    struct cpose_t * pose;// Offset=0x0 Size=0x4
    unsigned short * cachedLightingHandle;// Offset=0x0 Size=0x4
};

struct DrawSplatterInfo// Size=0xa018 (Id=6629)
{
    float vertFloatColor[640][4];// Offset=0x0 Size=0x2800
    unsigned char vertColor[640][4];// Offset=0x2800 Size=0xa00
    float vertXyzw[640][4];// Offset=0x3200 Size=0x2800
    float vertNormal[640][3];// Offset=0x5a00 Size=0x1e00
    float vertSt[640][2];// Offset=0x7800 Size=0x1400
    float vertAngleRadius[640][2];// Offset=0x8c00 Size=0x1400
    struct Material * material;// Offset=0xa000 Size=0x4
    bool prepared;// Offset=0xa004 Size=0x1
    unsigned char __align0[3];// Offset=0xa005 Size=0x3
    float screenLeft;// Offset=0xa008 Size=0x4
    float screenTop;// Offset=0xa00c Size=0x4
    float screenWidth;// Offset=0xa010 Size=0x4
    float screenHeight;// Offset=0xa014 Size=0x4
};

struct SplatterParms// Size=0x28 (Id=6630)
{
    int channel;// Offset=0x0 Size=0x4
    float alpha;// Offset=0x4 Size=0x4
    float innerAngle;// Offset=0x8 Size=0x4
    float outerAngle;// Offset=0xc Size=0x4
    float innerRadius;// Offset=0x10 Size=0x4
    float outerRadius;// Offset=0x14 Size=0x4
    float inTime;// Offset=0x18 Size=0x4
    float fullTime;// Offset=0x1c Size=0x4
    float outTime;// Offset=0x20 Size=0x4
    bool onScreenHits;// Offset=0x24 Size=0x1
};

struct viewDamage_t// Size=0x44 (Id=6631)
{
    int time;// Offset=0x0 Size=0x4
    int duration;// Offset=0x4 Size=0x4
    float dir[3];// Offset=0x8 Size=0xc
    float yaw;// Offset=0x14 Size=0x4
    float playerYaw;// Offset=0x18 Size=0x4
    float playerDir[3][3];// Offset=0x1c Size=0x24
    bool stun;// Offset=0x40 Size=0x1
};

struct SplatterParms// Size=0x28 (Id=6632)
{
    int channel;// Offset=0x0 Size=0x4
    float alpha;// Offset=0x4 Size=0x4
    float innerAngle;// Offset=0x8 Size=0x4
    float outerAngle;// Offset=0xc Size=0x4
    float innerRadius;// Offset=0x10 Size=0x4
    float outerRadius;// Offset=0x14 Size=0x4
    float inTime;// Offset=0x18 Size=0x4
    float fullTime;// Offset=0x1c Size=0x4
    float outTime;// Offset=0x20 Size=0x4
    bool onScreenHits;// Offset=0x24 Size=0x1
};

struct DrawSplatterInfo// Size=0xa018 (Id=6633)
{
    float vertFloatColor[640][4];// Offset=0x0 Size=0x2800
    unsigned char vertColor[640][4];// Offset=0x2800 Size=0xa00
    float vertXyzw[640][4];// Offset=0x3200 Size=0x2800
    float vertNormal[640][3];// Offset=0x5a00 Size=0x1e00
    float vertSt[640][2];// Offset=0x7800 Size=0x1400
    float vertAngleRadius[640][2];// Offset=0x8c00 Size=0x1400
    struct Material * material;// Offset=0xa000 Size=0x4
    bool prepared;// Offset=0xa004 Size=0x1
    unsigned char __align0[3];// Offset=0xa005 Size=0x3
    float screenLeft;// Offset=0xa008 Size=0x4
    float screenTop;// Offset=0xa00c Size=0x4
    float screenWidth;// Offset=0xa010 Size=0x4
    float screenHeight;// Offset=0xa014 Size=0x4
};

struct lagometer_t// Size=0x1008 (Id=6634)
{
    int frameSamples[128];// Offset=0x0 Size=0x200
    int frameCount;// Offset=0x200 Size=0x4
    int snapshotFlags[128];// Offset=0x204 Size=0x200
    int snapshotSamples[128];// Offset=0x404 Size=0x200
    int entitySamples[128];// Offset=0x604 Size=0x200
    int changedEntitySamples[128];// Offset=0x804 Size=0x200
    int archivedEntitySamples[128];// Offset=0xa04 Size=0x200
    int serverBandwidth[128];// Offset=0xc04 Size=0x200
    int killcamTimes[128];// Offset=0xe04 Size=0x200
    int snapshotCount;// Offset=0x1004 Size=0x4
};

struct OverheadFade// Size=0xc (Id=6635)
{
    int lastTime;// Offset=0x0 Size=0x4
    int startTime;// Offset=0x4 Size=0x4
    bool visible;// Offset=0x8 Size=0x1
};

struct CenterPrint// Size=0x408 (Id=6636)
{
    int time;// Offset=0x0 Size=0x4
    char text[1024];// Offset=0x4 Size=0x400
    int priority;// Offset=0x404 Size=0x4
};

struct CompassPlane// Size=0x24 (Id=6637)
{
    int entityNum;// Offset=0x0 Size=0x4
    int lastUpdate;// Offset=0x4 Size=0x4
    float lastPos[3];// Offset=0x8 Size=0xc
    float lastYaw;// Offset=0x14 Size=0x4
    int ownerNum;// Offset=0x18 Size=0x4
    struct Material * friendMaterial;// Offset=0x1c Size=0x4
    struct Material * enemyMaterial;// Offset=0x20 Size=0x4
};

struct CompassSentry// Size=0x34 (Id=6638)
{
    int entityNum;// Offset=0x0 Size=0x4
    int lastUpdateTime;// Offset=0x4 Size=0x4
    int firePingTime;// Offset=0x8 Size=0x4
    int radarPingTime;// Offset=0xc Size=0x4
    float positionCurrent[3];// Offset=0x10 Size=0xc
    float positionLastKnown[3];// Offset=0x1c Size=0xc
    float yawCurrent;// Offset=0x28 Size=0x4
    float yawLastKnown;// Offset=0x2c Size=0x4
    bool isFriendly;// Offset=0x30 Size=0x1
};

struct CgEntCollSector// Size=0x10 (Id=6639)
{
    struct CgEntCollTree tree;// Offset=0x0 Size=0xc
    unsigned short entListHead;// Offset=0xc Size=0x2
};

struct CgEntCollNode// Size=0x14 (Id=6640)
{
    unsigned short sector;// Offset=0x0 Size=0x2
    unsigned short nextEntInSector;// Offset=0x2 Size=0x2
    float linkMins[2];// Offset=0x4 Size=0x8
    float linkMaxs[2];// Offset=0xc Size=0x8
};

struct CgEntCollWorld// Size=0x401c (Id=6641)
{
    struct Bounds box;// Offset=0x0 Size=0x18
    unsigned short freeHead;// Offset=0x18 Size=0x2
    unsigned char __align0[2];// Offset=0x1a Size=0x2
    struct CgEntCollSector sectors[1024];// Offset=0x1c Size=0x4000
};

struct ClientEntSound// Size=0x10 (Id=6642)
{
    float origin[3];// Offset=0x0 Size=0xc
    struct snd_alias_list_t * aliasList;// Offset=0xc Size=0x4
};

struct EffectDefMap// Size=0x80 (Id=6643)
{
    char name[64];// Offset=0x0 Size=0x40
    char filename[64];// Offset=0x40 Size=0x40
};

struct ClientEntSound// Size=0x10 (Id=6644)
{
    float origin[3];// Offset=0x0 Size=0xc
    struct snd_alias_list_t * aliasList;// Offset=0xc Size=0x4
};

struct CameraShake// Size=0x24 (Id=6645)
{
    int time;// Offset=0x0 Size=0x4
    float scale;// Offset=0x4 Size=0x4
    float length;// Offset=0x8 Size=0x4
    float radius;// Offset=0xc Size=0x4
    float src[3];// Offset=0x10 Size=0xc
    float size;// Offset=0x1c Size=0x4
    float rumbleScale;// Offset=0x20 Size=0x4
};

struct CameraShakeSet// Size=0x94 (Id=6646)
{
    struct CameraShake shakes[4];// Offset=0x0 Size=0x90
    float phase;// Offset=0x90 Size=0x4
};

struct ScreenBlur// Size=0x1c (Id=6647)
{
    enum BlurPriority priority;// Offset=0x0 Size=0x4
    enum BlurTime time;// Offset=0x4 Size=0x4
    int timeStart;// Offset=0x8 Size=0x4
    int timeEnd;// Offset=0xc Size=0x4
    float start;// Offset=0x10 Size=0x4
    float end;// Offset=0x14 Size=0x4
    float radius;// Offset=0x18 Size=0x4
};

struct DrawClipAmmoParams// Size=0x18 (Id=6648)
{
    float width;// Offset=0x0 Size=0x4
    float height;// Offset=0x4 Size=0x4
    float xInc;// Offset=0x8 Size=0x4
    float yInc;// Offset=0xc Size=0x4
    int bullet_rowCnt;// Offset=0x10 Size=0x4
    struct Material ** image;// Offset=0x14 Size=0x4
};

struct DrawClipAmmoParams// Size=0x18 (Id=6649)
{
    float width;// Offset=0x0 Size=0x4
    float height;// Offset=0x4 Size=0x4
    float xInc;// Offset=0x8 Size=0x4
    float yInc;// Offset=0xc Size=0x4
    int bullet_rowCnt;// Offset=0x10 Size=0x4
    struct Material ** image;// Offset=0x14 Size=0x4
};

struct SurfaceTypeSoundList// Size=0x8 (Id=6650)
{
    char * surfaceSoundBase;// Offset=0x0 Size=0x4
    struct snd_alias_list_t ** soundAliasList;// Offset=0x4 Size=0x4
};

struct LerpEntityStateTurret// Size=0x20 (Id=6651)
{
    float gunAngles[3];// Offset=0x0 Size=0xc
    int lastBarrelRotChangeTime;// Offset=0xc Size=0x4
    int lastBarrelRotChangeRate;// Offset=0x10 Size=0x4
    int lastHeatChangeLevel;// Offset=0x14 Size=0x4
    int lastHeatChangeTime;// Offset=0x18 Size=0x4
    bool isBarrelRotating;// Offset=0x1c Size=0x1
    bool isOverheat;// Offset=0x1d Size=0x1
    bool isHeatingUp;// Offset=0x1e Size=0x1
    bool isBeingCarried;// Offset=0x1f Size=0x1
};

enum scriptAnimWeaponPositions_t
{
    ANIM_WP_HIP=0,
    ANIM_WP_ADS=1,
    NUM_ANIM_WEAPONPOSITIONS=2
};

struct pml_t// Size=0x84 (Id=6653)
{
    float forward[3];// Offset=0x0 Size=0xc
    float right[3];// Offset=0xc Size=0xc
    float up[3];// Offset=0x18 Size=0xc
    float frametime;// Offset=0x24 Size=0x4
    int msec;// Offset=0x28 Size=0x4
    int walking;// Offset=0x2c Size=0x4
    int groundPlane;// Offset=0x30 Size=0x4
    int almostGroundPlane;// Offset=0x34 Size=0x4
    struct trace_t groundTrace;// Offset=0x38 Size=0x2c
    float impactSpeed;// Offset=0x64 Size=0x4
    float previous_origin[3];// Offset=0x68 Size=0xc
    float previous_velocity[3];// Offset=0x74 Size=0xc
    unsigned int holdrand;// Offset=0x80 Size=0x4
};

enum proneCheckType_t
{
    PCT_CLIENT=0,
    PCT_ACTOR=1
};

enum FeetDirection
{
    FEETDIR_FRONT=0,
    FEETDIR_BACK=1,
    FEETDIR_COUNT=2
};

enum EffectiveStance
{
    PM_EFF_STANCE_DEFAULT=0,
    PM_EFF_STANCE_PRONE=1,
    PM_EFF_STANCE_DUCKED=2,
    PM_EFF_STANCE_LASTSTANDCRAWL=3,
    PM_EFF_STANCE_COUNT=4
};

enum PmStanceFrontBack
{
    PM_STANCE_FORWARD_STAND=0,
    PM_STANCE_FORWARD_PRONE=1,
    PM_STANCE_FORWARD_CROUCH=2,
    PM_STANCE_LASTSTANDCRAWL=3,
    PM_STANCE_BACKWARD_FIRST=4,
    PM_STANCE_BACKWARD_RUN=4,
    PM_STANCE_BACKWARD_PRONE=5,
    PM_STANCE_BACKWARD_CROUCH=6,
    PM_STANCE_BACKWARD_LASTSTAND=7,
    NUM_PM_STANCE_FRONTBACK=8
};

struct pml_t// Size=0x84 (Id=6658)
{
    float forward[3];// Offset=0x0 Size=0xc
    float right[3];// Offset=0xc Size=0xc
    float up[3];// Offset=0x18 Size=0xc
    float frametime;// Offset=0x24 Size=0x4
    int msec;// Offset=0x28 Size=0x4
    int walking;// Offset=0x2c Size=0x4
    int groundPlane;// Offset=0x30 Size=0x4
    int almostGroundPlane;// Offset=0x34 Size=0x4
    struct trace_t groundTrace;// Offset=0x38 Size=0x2c
    float impactSpeed;// Offset=0x64 Size=0x4
    float previous_origin[3];// Offset=0x68 Size=0xc
    float previous_velocity[3];// Offset=0x74 Size=0xc
    unsigned int holdrand;// Offset=0x80 Size=0x4
};

struct pmove_t// Size=0x128 (Id=6659)
{
    struct playerState_s * ps;// Offset=0x0 Size=0x4
    struct usercmd_s cmd;// Offset=0x4 Size=0x28
    struct usercmd_s oldcmd;// Offset=0x2c Size=0x28
    int tracemask;// Offset=0x54 Size=0x4
    int numtouch;// Offset=0x58 Size=0x4
    int touchents[32];// Offset=0x5c Size=0x80
    struct Bounds bounds;// Offset=0xdc Size=0x18
    float xyspeed;// Offset=0xf4 Size=0x4
    int proneChange;// Offset=0xf8 Size=0x4
    float maxSprintTimeMultiplier;// Offset=0xfc Size=0x4
    bool mantleStarted;// Offset=0x100 Size=0x1
    unsigned char __align0[3];// Offset=0x101 Size=0x3
    float mantleEndPos[3];// Offset=0x104 Size=0xc
    int mantleDuration;// Offset=0x110 Size=0x4
    int viewChangeTime;// Offset=0x114 Size=0x4
    float viewChange;// Offset=0x118 Size=0x4
    float fTorsoPitch;// Offset=0x11c Size=0x4
    float fWaistPitch;// Offset=0x120 Size=0x4
    unsigned char handler;// Offset=0x124 Size=0x1
};

enum scriptAnimMoveTypes_t
{
    ANIM_MT_UNUSED=0,
    ANIM_MT_IDLE=1,
    ANIM_MT_IDLECR=2,
    ANIM_MT_IDLEPRONE=3,
    ANIM_MT_WALK=4,
    ANIM_MT_WALKBK=5,
    ANIM_MT_WALKCR=6,
    ANIM_MT_WALKCRBK=7,
    ANIM_MT_WALKPRONE=8,
    ANIM_MT_WALKPRONEBK=9,
    ANIM_MT_RUN=10,
    ANIM_MT_RUNBK=11,
    ANIM_MT_RUNCR=12,
    ANIM_MT_RUNCRBK=13,
    ANIM_MT_TURNRIGHT=14,
    ANIM_MT_TURNLEFT=15,
    ANIM_MT_TURNRIGHTCR=16,
    ANIM_MT_TURNLEFTCR=17,
    ANIM_MT_CLIMBUP=18,
    ANIM_MT_CLIMBDOWN=19,
    ANIM_MT_SPRINT=20,
    ANIM_MT_MANTLE_ROOT=21,
    ANIM_MT_MANTLE_UP_57=22,
    ANIM_MT_MANTLE_UP_51=23,
    ANIM_MT_MANTLE_UP_45=24,
    ANIM_MT_MANTLE_UP_39=25,
    ANIM_MT_MANTLE_UP_33=26,
    ANIM_MT_MANTLE_UP_27=27,
    ANIM_MT_MANTLE_UP_21=28,
    ANIM_MT_MANTLE_OVER_HIGH=29,
    ANIM_MT_MANTLE_OVER_MID=30,
    ANIM_MT_MANTLE_OVER_LOW=31,
    ANIM_MT_FLINCH_FORWARD=32,
    ANIM_MT_FLINCH_BACKWARD=33,
    ANIM_MT_FLINCH_LEFT=34,
    ANIM_MT_FLINCH_RIGHT=35,
    ANIM_MT_STUMBLE_FORWARD=36,
    ANIM_MT_STUMBLE_BACKWARD=37,
    ANIM_MT_STUMBLE_WALK_FORWARD=38,
    ANIM_MT_STUMBLE_WALK_BACKWARD=39,
    ANIM_MT_STUMBLE_CROUCH_FORWARD=40,
    ANIM_MT_STUMBLE_CROUCH_BACKWARD=41,
    ANIM_MT_STUMBLE_SPRINT_FORWARD=42,
    ANIM_MT_JUMPDIVE_FORWARD=43,
    ANIM_MT_JUMPDIVE_FORWARDLEFT=44,
    ANIM_MT_JUMPDIVE_LEFT=45,
    ANIM_MT_JUMPDIVE_BACKLEFT=46,
    ANIM_MT_JUMPDIVE_BACK=47,
    ANIM_MT_JUMPDIVE_BACKRIGHT=48,
    ANIM_MT_JUMPDIVE_RIGHT=49,
    ANIM_MT_JUMPDIVE_FORWARDRIGHT=50,
    ANIM_MT_IDLELASTSTAND=51,
    ANIM_MT_CRAWLLASTSTAND=52,
    ANIM_MT_CRAWLLASTSTANDBK=53,
    NUM_ANIM_MOVETYPES=54
};

enum animBodyPart_t
{
    ANIM_BP_UNUSED=0,
    ANIM_BP_LEGS=1,
    ANIM_BP_TORSO=2,
    ANIM_BP_BOTH=3,
    NUM_ANIM_BODYPARTS=4
};

enum scriptAnimStrafeStates_t
{
    ANIM_STRAFE_NOT=0,
    ANIM_STRAFE_LEFT=1,
    ANIM_STRAFE_RIGHT=2,
    NUM_ANIM_STRAFESTATES=3
};

struct pmoveHandler_t// Size=0xc (Id=6663)
{
    void  ( * trace)(struct trace_t * ,float * ,float * ,struct Bounds * ,int ,int );// Offset=0x0 Size=0x4
    void  ( * playerEvent)(int ,int );// Offset=0x4 Size=0x4
    void  ( * debugLine)(float * ,float * ,float * ,int ,int );// Offset=0x8 Size=0x4
};

struct viewLerpWaypoint_s// Size=0xc (Id=6664)
{
    int iFrac;// Offset=0x0 Size=0x4
    float fViewHeight;// Offset=0x4 Size=0x4
    int iOffset;// Offset=0x8 Size=0x4
};

struct PlayerEquippedWeaponState// Size=0x5 (Id=6665)
{
    bool usedBefore;// Offset=0x0 Size=0x1
    bool dualWielding;// Offset=0x1 Size=0x1
    unsigned char weaponModel;// Offset=0x2 Size=0x1
    bool needsRechamber[2];// Offset=0x3 Size=0x2
};

struct MantleState// Size=0x10 (Id=6666)
{
    float yaw;// Offset=0x0 Size=0x4
    int timer;// Offset=0x4 Size=0x4
    int transIndex;// Offset=0x8 Size=0x4
    int flags;// Offset=0xc Size=0x4
};

enum MantleAnimState
{
    MANTLE_ANIM_STATE_NORMAL=0,
    MANTLE_ANIM_STATE_FASTMANTLE=1,
    MANTLE_ANIM_STATE_COUNT=2
};

enum MantleAnims
{
    MANTLE_ROOT=0,
    MANTLE_UP_57=1,
    MANTLE_UP_51=2,
    MANTLE_UP_45=3,
    MANTLE_UP_39=4,
    MANTLE_UP_33=5,
    MANTLE_UP_27=6,
    MANTLE_UP_21=7,
    MANTLE_OVER_HIGH=8,
    MANTLE_OVER_MID=9,
    MANTLE_OVER_LOW=10,
    MANTLE_ANIM_COUNT=11,
    MANTLE_UP_FIRST=1,
    MANTLE_UP_LAST=7,
    MANTLE_UP_COUNT=7,
    MANTLE_OVER_FIRST=8,
    MANTLE_OVER_LAST=10,
    MANTLE_OVER_COUNT=3
};

struct MantleAnimTransition// Size=0xc (Id=6669)
{
    int upAnimIndex;// Offset=0x0 Size=0x4
    int overAnimIndex;// Offset=0x4 Size=0x4
    float height;// Offset=0x8 Size=0x4
};

enum animScriptParseMode_t
{
    PARSEMODE_DEFINES=0,
    PARSEMODE_ANIMATION=1,
    PARSEMODE_CANNED_ANIMATIONS=2,
    PARSEMODE_STATECHANGES=3,
    PARSEMODE_EVENTS=4,
    NUM_PARSEMODES=5
};

enum scriptAnimMoveDirection_t
{
    ANIM_MOVEDIR_FORWARD=0,
    ANIM_MOVEDIR_FORWARDLEFT=1,
    ANIM_MOVEDIR_LEFT=2,
    ANIM_MOVEDIR_BACKLEFT=3,
    ANIM_MOVEDIR_BACK=4,
    ANIM_MOVEDIR_BACKRIGHT=5,
    ANIM_MOVEDIR_RIGHT=6,
    ANIM_MOVEDIR_FORWARDRIGHT=7,
    NUM_ANIM_MOVEDIRECTIONS=8
};

enum animScriptConditionTypes_t
{
    ANIM_CONDTYPE_BITFLAGS=0,
    ANIM_CONDTYPE_VALUE=1,
    NUM_ANIM_CONDTYPES=2
};

enum animScriptMounted_t
{
    MOUNTED_UNUSED=0,
    MOUNTED_TURRET=1,
    NUM_ANIM_COND_MOUNTED=2
};

struct animConditionTable_t// Size=0x8 (Id=6674)
{
    enum animScriptConditionTypes_t type;// Offset=0x0 Size=0x4
    struct animStringItem_t * values;// Offset=0x4 Size=0x4
};

struct animStringItem_t// Size=0x8 (Id=6675)
{
    char * string;// Offset=0x0 Size=0x4
    int hash;// Offset=0x4 Size=0x4
};

struct AimTarget// Size=0x2c (Id=6676)
{
    int entIndex;// Offset=0x0 Size=0x4
    float worldDistSqr;// Offset=0x4 Size=0x4
    struct Bounds box;// Offset=0x8 Size=0x18
    float velocity[3];// Offset=0x20 Size=0xc
};

struct AimTarget// Size=0x2c (Id=6677)
{
    int entIndex;// Offset=0x0 Size=0x4
    float worldDistSqr;// Offset=0x4 Size=0x4
    struct Bounds box;// Offset=0x8 Size=0x18
    float velocity[3];// Offset=0x20 Size=0xc
};

struct AimTargetGlob// Size=0xb04 (Id=6678)
{
    struct AimTarget targets[64];// Offset=0x0 Size=0xb00
    int targetCount;// Offset=0xb00 Size=0x4
};

struct AimInput// Size=0x30 (Id=6679)
{
    float deltaTime;// Offset=0x0 Size=0x4
    float deltaTimeScaled;// Offset=0x4 Size=0x4
    float pitch;// Offset=0x8 Size=0x4
    float pitchAxis;// Offset=0xc Size=0x4
    float pitchMax;// Offset=0x10 Size=0x4
    float yaw;// Offset=0x14 Size=0x4
    float yawAxis;// Offset=0x18 Size=0x4
    float yawMax;// Offset=0x1c Size=0x4
    float forwardAxis;// Offset=0x20 Size=0x4
    float rightAxis;// Offset=0x24 Size=0x4
    int buttons;// Offset=0x28 Size=0x4
    int localClientNum;// Offset=0x2c Size=0x4
};

struct AimAssistGlobals// Size=0xe80 (Id=6680)
{
    struct AimAssistPlayerState ps;// Offset=0x0 Size=0x2c
    unsigned char __align0[4];// Offset=0x2c Size=0x4
    float screenMtx[4][4];// Offset=0x30 Size=0x40
    float invScreenMtx[4][4];// Offset=0x70 Size=0x40
    bool initialized;// Offset=0xb0 Size=0x1
    unsigned char __align1[3];// Offset=0xb1 Size=0x3
    int prevButtons;// Offset=0xb4 Size=0x4
    struct AimTweakables tweakables;// Offset=0xb8 Size=0x20
    float eyeOrigin[3];// Offset=0xd8 Size=0xc
    float viewOrigin[3];// Offset=0xe4 Size=0xc
    float viewAngles[3];// Offset=0xf0 Size=0xc
    float viewAxis[3][3];// Offset=0xfc Size=0x24
    float fovTurnRateScale;// Offset=0x120 Size=0x4
    float fovScaleInv;// Offset=0x124 Size=0x4
    float adsLerp;// Offset=0x128 Size=0x4
    float pitchDelta;// Offset=0x12c Size=0x4
    float yawDelta;// Offset=0x130 Size=0x4
    float screenWidth;// Offset=0x134 Size=0x4
    float screenHeight;// Offset=0x138 Size=0x4
    struct AimScreenTarget screenTargets[64];// Offset=0x13c Size=0xd00
    int screenTargetCount;// Offset=0xe3c Size=0x4
    int autoAimTargetEnt;// Offset=0xe40 Size=0x4
    bool autoAimPressed;// Offset=0xe44 Size=0x1
    bool autoAimActive;// Offset=0xe45 Size=0x1
    unsigned char __align2[2];// Offset=0xe46 Size=0x2
    float autoAimPitch;// Offset=0xe48 Size=0x4
    float autoAimPitchTarget;// Offset=0xe4c Size=0x4
    float autoAimYaw;// Offset=0xe50 Size=0x4
    float autoAimYawTarget;// Offset=0xe54 Size=0x4
    enum AutoMeleeState autoMeleeState;// Offset=0xe58 Size=0x4
    int autoMeleeTargetEnt;// Offset=0xe5c Size=0x4
    float autoMeleePitch;// Offset=0xe60 Size=0x4
    float autoMeleePitchTarget;// Offset=0xe64 Size=0x4
    float autoMeleeYaw;// Offset=0xe68 Size=0x4
    float autoMeleeYawTarget;// Offset=0xe6c Size=0x4
    int lockOnTargetEnt;// Offset=0xe70 Size=0x4
};

struct AimScreenTarget// Size=0x34 (Id=6681)
{
    int entIndex;// Offset=0x0 Size=0x4
    float clipMins[2];// Offset=0x4 Size=0x8
    float clipMaxs[2];// Offset=0xc Size=0x8
    float aimPos[3];// Offset=0x14 Size=0xc
    float velocity[3];// Offset=0x20 Size=0xc
    float distSqr;// Offset=0x2c Size=0x4
    float crosshairDistSqr;// Offset=0x30 Size=0x4
};

struct AimScreenTarget// Size=0x34 (Id=6682)
{
    int entIndex;// Offset=0x0 Size=0x4
    float clipMins[2];// Offset=0x4 Size=0x8
    float clipMaxs[2];// Offset=0xc Size=0x8
    float aimPos[3];// Offset=0x14 Size=0xc
    float velocity[3];// Offset=0x20 Size=0xc
    float distSqr;// Offset=0x2c Size=0x4
    float crosshairDistSqr;// Offset=0x30 Size=0x4
};

struct AimAssistPlayerState// Size=0x2c (Id=6683)
{
    float velocity[3];// Offset=0x0 Size=0xc
    int eFlags;// Offset=0xc Size=0x4
    int linkFlags;// Offset=0x10 Size=0x4
    int pm_flags;// Offset=0x14 Size=0x4
    int weapFlags;// Offset=0x18 Size=0x4
    int weaponState;// Offset=0x1c Size=0x4
    float fWeaponPosFrac;// Offset=0x20 Size=0x4
    int weapIndex;// Offset=0x24 Size=0x4
    bool hasAmmo;// Offset=0x28 Size=0x1
    bool isDualWielding;// Offset=0x29 Size=0x1
    bool isThirdPerson;// Offset=0x2a Size=0x1
    bool isExtendedMelee;// Offset=0x2b Size=0x1
};

enum AutoMeleeState
{
    AIM_MELEE_STATE_OFF=0,
    AIM_MELEE_STATE_TARGETED=1,
    AIM_MELEE_STATE_UPDATING=2
};

struct AimTweakables// Size=0x20 (Id=6685)
{
    float slowdownRegionWidth;// Offset=0x0 Size=0x4
    float slowdownRegionHeight;// Offset=0x4 Size=0x4
    float autoAimRegionWidth;// Offset=0x8 Size=0x4
    float autoAimRegionHeight;// Offset=0xc Size=0x4
    float autoMeleeRegionWidth;// Offset=0x10 Size=0x4
    float autoMeleeRegionHeight;// Offset=0x14 Size=0x4
    float lockOnRegionWidth;// Offset=0x18 Size=0x4
    float lockOnRegionHeight;// Offset=0x1c Size=0x4
};

struct AimAssistGlobals// Size=0xe80 (Id=6686)
{
    struct AimAssistPlayerState ps;// Offset=0x0 Size=0x2c
    unsigned char __align0[4];// Offset=0x2c Size=0x4
    float screenMtx[4][4];// Offset=0x30 Size=0x40
    float invScreenMtx[4][4];// Offset=0x70 Size=0x40
    bool initialized;// Offset=0xb0 Size=0x1
    unsigned char __align1[3];// Offset=0xb1 Size=0x3
    int prevButtons;// Offset=0xb4 Size=0x4
    struct AimTweakables tweakables;// Offset=0xb8 Size=0x20
    float eyeOrigin[3];// Offset=0xd8 Size=0xc
    float viewOrigin[3];// Offset=0xe4 Size=0xc
    float viewAngles[3];// Offset=0xf0 Size=0xc
    float viewAxis[3][3];// Offset=0xfc Size=0x24
    float fovTurnRateScale;// Offset=0x120 Size=0x4
    float fovScaleInv;// Offset=0x124 Size=0x4
    float adsLerp;// Offset=0x128 Size=0x4
    float pitchDelta;// Offset=0x12c Size=0x4
    float yawDelta;// Offset=0x130 Size=0x4
    float screenWidth;// Offset=0x134 Size=0x4
    float screenHeight;// Offset=0x138 Size=0x4
    struct AimScreenTarget screenTargets[64];// Offset=0x13c Size=0xd00
    int screenTargetCount;// Offset=0xe3c Size=0x4
    int autoAimTargetEnt;// Offset=0xe40 Size=0x4
    bool autoAimPressed;// Offset=0xe44 Size=0x1
    bool autoAimActive;// Offset=0xe45 Size=0x1
    unsigned char __align2[2];// Offset=0xe46 Size=0x2
    float autoAimPitch;// Offset=0xe48 Size=0x4
    float autoAimPitchTarget;// Offset=0xe4c Size=0x4
    float autoAimYaw;// Offset=0xe50 Size=0x4
    float autoAimYawTarget;// Offset=0xe54 Size=0x4
    enum AutoMeleeState autoMeleeState;// Offset=0xe58 Size=0x4
    int autoMeleeTargetEnt;// Offset=0xe5c Size=0x4
    float autoMeleePitch;// Offset=0xe60 Size=0x4
    float autoMeleePitchTarget;// Offset=0xe64 Size=0x4
    float autoMeleeYaw;// Offset=0xe68 Size=0x4
    float autoMeleeYawTarget;// Offset=0xe6c Size=0x4
    int lockOnTargetEnt;// Offset=0xe70 Size=0x4
};

struct AimAssistPlayerState// Size=0x2c (Id=6687)
{
    float velocity[3];// Offset=0x0 Size=0xc
    int eFlags;// Offset=0xc Size=0x4
    int linkFlags;// Offset=0x10 Size=0x4
    int pm_flags;// Offset=0x14 Size=0x4
    int weapFlags;// Offset=0x18 Size=0x4
    int weaponState;// Offset=0x1c Size=0x4
    float fWeaponPosFrac;// Offset=0x20 Size=0x4
    int weapIndex;// Offset=0x24 Size=0x4
    bool hasAmmo;// Offset=0x28 Size=0x1
    bool isDualWielding;// Offset=0x29 Size=0x1
    bool isThirdPerson;// Offset=0x2a Size=0x1
    bool isExtendedMelee;// Offset=0x2b Size=0x1
};

struct _XGPOINT3D// Size=0xc (Id=6688)
{
    long x;// Offset=0x0 Size=0x4
    long y;// Offset=0x4 Size=0x4
    long z;// Offset=0x8 Size=0x4
};

struct tagPOINT// Size=0x8 (Id=6689)
{
    long x;// Offset=0x0 Size=0x4
    long y;// Offset=0x4 Size=0x4
};

struct _FILEIOHOOKS// Size=0x30 (Id=6690)
{
    struct _FILEIOHOOKS * pOldHooks;// Offset=0x0 Size=0x4
    long  ( * NtClose)(void * );// Offset=0x4 Size=0x4
    long  ( * NtDuplicateObject)(void * ,void ** ,unsigned long );// Offset=0x8 Size=0x4
    long  ( * NtCreateFile)(void ** ,unsigned long ,struct _OBJECT_ATTRIBUTES * ,struct _IO_STATUS_BLOCK * ,union _LARGE_INTEGER * ,unsigned long ,unsigned long ,unsigned long ,unsigned long );// Offset=0xc Size=0x4
    long  ( * NtReadFile)(void * ,void * ,void  ( * )(void * ,struct _IO_STATUS_BLOCK * ,unsigned long ),void * ,struct _IO_STATUS_BLOCK * ,void * ,unsigned long ,union _LARGE_INTEGER * );// Offset=0x10 Size=0x4
    long  ( * NtReadFileScatter)(void * ,void * ,void  ( * )(void * ,struct _IO_STATUS_BLOCK * ,unsigned long ),void * ,struct _IO_STATUS_BLOCK * ,union _FILE_SEGMENT_ELEMENT * ,unsigned long ,union _LARGE_INTEGER * );// Offset=0x14 Size=0x4
    long  ( * NtQueryDirectoryFile)(void * ,void * ,void  ( * )(void * ,struct _IO_STATUS_BLOCK * ,unsigned long ),void * ,struct _IO_STATUS_BLOCK * ,struct _FILE_DIRECTORY_INFORMATION * ,unsigned long ,struct _STRING * ,unsigned long );// Offset=0x18 Size=0x4
    long  ( * NtQueryVolumeInformationFile)(void * ,struct _IO_STATUS_BLOCK * ,void * ,unsigned long ,enum _FSINFOCLASS );// Offset=0x1c Size=0x4
    long  ( * NtQueryInformationFile)(void * ,struct _IO_STATUS_BLOCK * ,void * ,unsigned long ,enum _FILE_INFORMATION_CLASS );// Offset=0x20 Size=0x4
    long  ( * NtSetInformationFile)(void * ,struct _IO_STATUS_BLOCK * ,void * ,unsigned long ,enum _FILE_INFORMATION_CLASS );// Offset=0x24 Size=0x4
    long  ( * NtOpenFile)(void ** ,unsigned long ,struct _OBJECT_ATTRIBUTES * ,struct _IO_STATUS_BLOCK * ,unsigned long ,unsigned long );// Offset=0x28 Size=0x4
    long  ( * NtQueryFullAttributesFile)(struct _OBJECT_ATTRIBUTES * ,struct _FILE_NETWORK_OPEN_INFORMATION * );// Offset=0x2c Size=0x4
};

struct _XBOX_HARDWARE_INFO// Size=0x10 (Id=6691)
{
    unsigned long Flags;// Offset=0x0 Size=0x4
    unsigned char NumberOfProcessors;// Offset=0x4 Size=0x1
    unsigned char PCIBridgeRevisionID;// Offset=0x5 Size=0x1
    unsigned char Reserved[6];// Offset=0x6 Size=0x6
    unsigned short BldrMagic;// Offset=0xc Size=0x2
    unsigned short BldrFlags;// Offset=0xe Size=0x2
};

struct _XCONTENT_DATA// Size=0x134 (Id=6692)
{
    unsigned long DeviceID;// Offset=0x0 Size=0x4
    unsigned long dwContentType;// Offset=0x4 Size=0x4
    wchar_t szDisplayName[128];// Offset=0x8 Size=0x100
    char szFileName[42];// Offset=0x108 Size=0x2a
};

enum PIX_API_TYPE
{
    ApiType_BeginNamedEvent=0,
    ApiType_EndNamedEvent=1,
    ApiType_SetMarker=2,
    ApiType_Print=3,
    ApiType_Other=4,
    ApiType_Other_Overflow=5
};

struct _PIXSHAREDCAPTUREINFO// Size=0xc (Id=6694)
{
    unsigned long GroupEnables;// Offset=0x0 Size=0x4
    int RecordingGpuCapture;// Offset=0x4 Size=0x4
    int CaptureTruncated;// Offset=0x8 Size=0x4
};

struct _PIXTHREADCAPTUREINFO// Size=0x10 (Id=6695)
{
    struct _PIXSHAREDCAPTUREINFO * SharedCaptureInfo;// Offset=0x0 Size=0x4
    unsigned long * WriteBuffer;// Offset=0x4 Size=0x4
    unsigned long * WriteCount;// Offset=0x8 Size=0x4
    int AnalysisCaptureByTag;// Offset=0xc Size=0x4
};

struct PIX_NEXT_TIMING_CHUNK// Size=0x14 (Id=6696)
{
    enum PIX_API_TYPE ApiType;// Offset=0x0 Size=0x4
    unsigned long Color;// Offset=0x4 Size=0x4
    char * pFormat;// Offset=0x8 Size=0x4
    char * pArgList;// Offset=0xc Size=0x4
    unsigned long OverflowCount;// Offset=0x10 Size=0x4
};

struct _SYSTEMTIME// Size=0x10 (Id=6697)
{
    unsigned short wYear;// Offset=0x0 Size=0x2
    unsigned short wMonth;// Offset=0x2 Size=0x2
    unsigned short wDayOfWeek;// Offset=0x4 Size=0x2
    unsigned short wDay;// Offset=0x6 Size=0x2
    unsigned short wHour;// Offset=0x8 Size=0x2
    unsigned short wMinute;// Offset=0xa Size=0x2
    unsigned short wSecond;// Offset=0xc Size=0x2
    unsigned short wMilliseconds;// Offset=0xe Size=0x2
};

union _LARGE_INTEGER// Size=0x8 (Id=6698)
{
    long HighPart;// Offset=0x0 Size=0x4
    unsigned long LowPart;// Offset=0x4 Size=0x4
    struct _unnamed_1869 u;// Offset=0x0 Size=0x8
    long long QuadPart;// Offset=0x0 Size=0x8
};

struct XML_ATTRIBUTE// Size=0x10 (Id=6699)
{
    char * strName;// Offset=0x0 Size=0x4
    unsigned int NameLen;// Offset=0x4 Size=0x4
    char * strValue;// Offset=0x8 Size=0x4
    unsigned int ValueLen;// Offset=0xc Size=0x4
};

struct XML_ATTRIBUTE// Size=0x10 (Id=6700)
{
    char * strName;// Offset=0x0 Size=0x4
    unsigned int NameLen;// Offset=0x4 Size=0x4
    char * strValue;// Offset=0x8 Size=0x4
    unsigned int ValueLen;// Offset=0xc Size=0x4
};

struct XNetStartupParams// Size=0xd (Id=6701)
{
    unsigned char cfgSizeOfStruct;// Offset=0x0 Size=0x1
    unsigned char cfgFlags;// Offset=0x1 Size=0x1
    unsigned char cfgSockMaxDgramSockets;// Offset=0x2 Size=0x1
    unsigned char cfgSockMaxStreamSockets;// Offset=0x3 Size=0x1
    unsigned char cfgSockDefaultRecvBufsizeInK;// Offset=0x4 Size=0x1
    unsigned char cfgSockDefaultSendBufsizeInK;// Offset=0x5 Size=0x1
    unsigned char cfgKeyRegMax;// Offset=0x6 Size=0x1
    unsigned char cfgSecRegMax;// Offset=0x7 Size=0x1
    unsigned char cfgQosDataLimitDiv4;// Offset=0x8 Size=0x1
    unsigned char cfgQosProbeTimeoutInSeconds;// Offset=0x9 Size=0x1
    unsigned char cfgQosProbeRetries;// Offset=0xa Size=0x1
    unsigned char cfgQosSrvMaxSimultaneousResponses;// Offset=0xb Size=0x1
    unsigned char cfgQosPairWaitTimeInSeconds;// Offset=0xc Size=0x1
};

struct XML_SUBELEMENT_DATA// Size=0x40 (Id=6702)
{
    int abSeenItems[16];// Offset=0x0 Size=0x40
};

struct XML_ELEMENT_DEFINITION// Size=0x24 (Id=6703)
{
    char * pszName;// Offset=0x0 Size=0x4
    unsigned long dwNameLength;// Offset=0x4 Size=0x4
    HRESULT  ( * pfnElementBeginCallback)(void * ,struct XML_ELEMENT * ,unsigned long ,struct XML_ATTRIBUTE * ,unsigned long );// Offset=0x8 Size=0x4
    HRESULT  ( * pfnElementEndCallback)(void * ,struct XML_ELEMENT * ,unsigned long );// Offset=0xc Size=0x4
    HRESULT  ( * pfnElementDataCallback)(void * ,struct XML_ELEMENT * ,unsigned long ,char * ,unsigned long );// Offset=0x10 Size=0x4
    unsigned long dwNumSubElementDefinitions;// Offset=0x14 Size=0x4
    struct XML_ELEMENT_DEFINITION ** papSubElementDefinitions;// Offset=0x18 Size=0x4
    unsigned long dwDataElementIndex;// Offset=0x1c Size=0x4
    unsigned long dwMaxExpectedDataSize;// Offset=0x20 Size=0x4
};

struct XML_ELEMENT// Size=0x4c (Id=6704)
{
    struct XML_ELEMENT_DEFINITION * pElementDefinition;// Offset=0x0 Size=0x4
    void * pvUserData;// Offset=0x4 Size=0x4
    unsigned long dwSubElementIndex;// Offset=0x8 Size=0x4
    union // Size=0x40 (Id=0)
    {
        struct XML_SUBELEMENT_DATA SubElementData;// Offset=0xc Size=0x40
        char szName[64];// Offset=0xc Size=0x40
    };
};

struct XML_ELEMENT_DEFINITION// Size=0x24 (Id=6705)
{
    char * pszName;// Offset=0x0 Size=0x4
    unsigned long dwNameLength;// Offset=0x4 Size=0x4
    HRESULT  ( * pfnElementBeginCallback)(void * ,struct XML_ELEMENT * ,unsigned long ,struct XML_ATTRIBUTE * ,unsigned long );// Offset=0x8 Size=0x4
    HRESULT  ( * pfnElementEndCallback)(void * ,struct XML_ELEMENT * ,unsigned long );// Offset=0xc Size=0x4
    HRESULT  ( * pfnElementDataCallback)(void * ,struct XML_ELEMENT * ,unsigned long ,char * ,unsigned long );// Offset=0x10 Size=0x4
    unsigned long dwNumSubElementDefinitions;// Offset=0x14 Size=0x4
    struct XML_ELEMENT_DEFINITION ** papSubElementDefinitions;// Offset=0x18 Size=0x4
    unsigned long dwDataElementIndex;// Offset=0x1c Size=0x4
    unsigned long dwMaxExpectedDataSize;// Offset=0x20 Size=0x4
};

struct ORDINAL_TO_INDEX// Size=0x4 (Id=6706)
{
    unsigned short wOrdinal;// Offset=0x0 Size=0x2
    unsigned short wIndex;// Offset=0x2 Size=0x2
};

struct _STRING_DATA// Size=0x6 (Id=6707)
{
    unsigned short wStringSize;// Offset=0x0 Size=0x2
    wchar_t * pszString;// Offset=0x2 Size=0x4
};

struct NCIENCODER_EXTENSION// Size=0x2a0 (Id=6708)
{
    union // Size=0x1c (Id=0)
    {
        struct CODEC_PROCESSOR CodecProcessor;// Offset=0x0 Size=0x1c
        struct XHVENGINE * XHVEngine;// Offset=0x0 Size=0x4
        struct PACKET_PROCESSOR * InputPackets;// Offset=0x4 Size=0x4
        struct PACKET_PROCESSOR * Outputs[2];// Offset=0x8 Size=0x8
        int Running[2];// Offset=0x10 Size=0x8
        struct CODEC_TYPE * CodecType;// Offset=0x18 Size=0x4
    };
    struct NCI_CODEC_IO_BLOCK CodecIO;// Offset=0x1c Size=0x18
    void * Encoder;// Offset=0x34 Size=0x4
    unsigned char __align0[8];// Offset=0x38 Size=0x8
    unsigned char InputFrame[320];// Offset=0x40 Size=0x140
    unsigned char OutputFrame[9];// Offset=0x180 Size=0x9
    unsigned char __align1[7];// Offset=0x189 Size=0x7
    struct XHVRESAMPLER Resampler;// Offset=0x190 Size=0x108
};

struct NCIDECODER_EXTENSION// Size=0x3e0 (Id=6709)
{
    union // Size=0x1c (Id=0)
    {
        struct CODEC_PROCESSOR CodecProcessor;// Offset=0x0 Size=0x1c
        struct XHVENGINE * XHVEngine;// Offset=0x0 Size=0x4
        struct PACKET_PROCESSOR * InputPackets;// Offset=0x4 Size=0x4
        struct PACKET_PROCESSOR * Outputs[2];// Offset=0x8 Size=0x8
        int Running[2];// Offset=0x10 Size=0x8
        struct CODEC_TYPE * CodecType;// Offset=0x18 Size=0x4
    };
    struct NCI_CODEC_IO_BLOCK CodecIO;// Offset=0x1c Size=0x18
    void * Decoder;// Offset=0x34 Size=0x4
    unsigned char __align0[8];// Offset=0x38 Size=0x8
    unsigned char OutputFrame[640];// Offset=0x40 Size=0x280
    unsigned char InputFrame[9];// Offset=0x2c0 Size=0x9
    unsigned char __align1[7];// Offset=0x2c9 Size=0x7
    struct XHVRESAMPLER Resampler;// Offset=0x2d0 Size=0x108
};

union UnionFltInt// Size=0x4 (Id=6710)
{
    float f;// Offset=0x0 Size=0x4
    long l;// Offset=0x0 Size=0x4
};

union dt// Size=0x4 (Id=6711)
{
    float f;// Offset=0x0 Size=0x4
    long l;// Offset=0x0 Size=0x4
};

struct C_BUFFER_TYPE// Size=0x18 (Id=6712)
{
    unsigned char * pBuffer;// Offset=0x0 Size=0x4
    unsigned short wBufferSize;// Offset=0x4 Size=0x2
    unsigned char __align0[2];// Offset=0x6 Size=0x2
    unsigned short * pBufferReadByteOffset;// Offset=0x8 Size=0x4
    unsigned char * pBufferReadBitOffset;// Offset=0xc Size=0x4
    unsigned short * pBufferWriteByteOffset;// Offset=0x10 Size=0x4
    unsigned char * pBufferWriteBitOffset;// Offset=0x14 Size=0x4
};

struct SUBFRAME_PARAM_SC// Size=0x8 (Id=6713)
{
    float Pitch;// Offset=0x0 Size=0x4
    float Pv;// Offset=0x4 Size=0x4
};

struct PARAM_SC// Size=0x44 (Id=6714)
{
    struct SUBFRAME_PARAM_SC SubParam[2];// Offset=0x0 Size=0x10
    float fLog2Gain;// Offset=0x10 Size=0x4
    float pfASK[12];// Offset=0x14 Size=0x30
};

struct tagDecode_mblk// Size=0x74 (Id=6715)
{
    void * hHFRegenMblk;// Offset=0x0 Size=0x4
    float * pMemoryBlock;// Offset=0x4 Size=0x4
    float * overlap;// Offset=0x8 Size=0x4
    float * pfEnv_1;// Offset=0xc Size=0x4
    float * pfPhase_1;// Offset=0x10 Size=0x4
    float * pfMinPhase;// Offset=0x14 Size=0x4
    float * pfLogAmps;// Offset=0x18 Size=0x4
    float fXenonPreSaturationScaleFactor;// Offset=0x1c Size=0x4
    float fXenonSaturationValue;// Offset=0x20 Size=0x4
    float Pitch_1_mid;// Offset=0x24 Size=0x4
    float fTFactor;// Offset=0x28 Size=0x4
    float fPitchWarp;// Offset=0x2c Size=0x4
    float fPitchOffset;// Offset=0x30 Size=0x4
    float fSpectrumWarp;// Offset=0x34 Size=0x4
    short wSpectrumOffset;// Offset=0x38 Size=0x2
    short wSpectrumLedge;// Offset=0x3a Size=0x2
    float fRoboSquash;// Offset=0x3c Size=0x4
    float fPvScaleFactor;// Offset=0x40 Size=0x4
    float fGain;// Offset=0x44 Size=0x4
    float fActualWarp;// Offset=0x48 Size=0x4
    float fSynTimeOffset;// Offset=0x4c Size=0x4
    float fPhaseOffset;// Offset=0x50 Size=0x4
    int dwVoiceProp;// Offset=0x54 Size=0x4
    void * hVoiceProperties;// Offset=0x58 Size=0x4
    short iNewFrame;// Offset=0x5c Size=0x2
    short iSilenceInjectionMode;// Offset=0x5e Size=0x2
    short sSilenceNoiseLevel;// Offset=0x60 Size=0x2
    unsigned char __align0[2];// Offset=0x62 Size=0x2
    long lSilenceNoiseSeed;// Offset=0x64 Size=0x4
    long lUVPhaseRandSeed;// Offset=0x68 Size=0x4
    struct SUBFRAME_PARAM_SC PrevSubParam;// Offset=0x6c Size=0x8
};

struct tagNciCodecBlock// Size=0x2c (Id=6716)
{
    unsigned long dwNciChunkID;// Offset=0x0 Size=0x4
    unsigned long dwCodecClassID;// Offset=0x4 Size=0x4
    unsigned long dwCodecID;// Offset=0x8 Size=0x4
    unsigned char chEncOrDec;// Offset=0xc Size=0x1
    unsigned char __align0[3];// Offset=0xd Size=0x3
    void * hCodecMblk;// Offset=0x10 Size=0x4
    void * pQuanMemBlk;// Offset=0x14 Size=0x4
    void * pnemMemBlk;// Offset=0x18 Size=0x4
    void * pNciCodecIOBlock;// Offset=0x1c Size=0x4
    void * pScratchBlk;// Offset=0x20 Size=0x4
    void * pVU0MicroCodeStore;// Offset=0x24 Size=0x4
    void * pVU0MicroMemStore;// Offset=0x28 Size=0x4
};

struct tagDecode_mblk// Size=0x74 (Id=6717)
{
    void * hHFRegenMblk;// Offset=0x0 Size=0x4
    float * pMemoryBlock;// Offset=0x4 Size=0x4
    float * overlap;// Offset=0x8 Size=0x4
    float * pfEnv_1;// Offset=0xc Size=0x4
    float * pfPhase_1;// Offset=0x10 Size=0x4
    float * pfMinPhase;// Offset=0x14 Size=0x4
    float * pfLogAmps;// Offset=0x18 Size=0x4
    float fXenonPreSaturationScaleFactor;// Offset=0x1c Size=0x4
    float fXenonSaturationValue;// Offset=0x20 Size=0x4
    float Pitch_1_mid;// Offset=0x24 Size=0x4
    float fTFactor;// Offset=0x28 Size=0x4
    float fPitchWarp;// Offset=0x2c Size=0x4
    float fPitchOffset;// Offset=0x30 Size=0x4
    float fSpectrumWarp;// Offset=0x34 Size=0x4
    short wSpectrumOffset;// Offset=0x38 Size=0x2
    short wSpectrumLedge;// Offset=0x3a Size=0x2
    float fRoboSquash;// Offset=0x3c Size=0x4
    float fPvScaleFactor;// Offset=0x40 Size=0x4
    float fGain;// Offset=0x44 Size=0x4
    float fActualWarp;// Offset=0x48 Size=0x4
    float fSynTimeOffset;// Offset=0x4c Size=0x4
    float fPhaseOffset;// Offset=0x50 Size=0x4
    int dwVoiceProp;// Offset=0x54 Size=0x4
    void * hVoiceProperties;// Offset=0x58 Size=0x4
    short iNewFrame;// Offset=0x5c Size=0x2
    short iSilenceInjectionMode;// Offset=0x5e Size=0x2
    short sSilenceNoiseLevel;// Offset=0x60 Size=0x2
    unsigned char __align0[2];// Offset=0x62 Size=0x2
    long lSilenceNoiseSeed;// Offset=0x64 Size=0x4
    long lUVPhaseRandSeed;// Offset=0x68 Size=0x4
    struct SUBFRAME_PARAM_SC PrevSubParam;// Offset=0x6c Size=0x8
};

struct RS2StageVQ_MBlk// Size=0x20 (Id=6718)
{
    const int iStage1Size;// Offset=0x0 Size=0x4
    float * pfStage1CB;// Offset=0x4 Size=0x4
    float * pfRotScaleCB;// Offset=0x8 Size=0x4
    const int iStage2Size;// Offset=0xc Size=0x4
    float * pfStage2InCellCB;// Offset=0x10 Size=0x4
    float * pfStage2OutCellCB;// Offset=0x14 Size=0x4
    const int iNumOfOutCell;// Offset=0x18 Size=0x4
    int * piIndexOfStage2OutCell;// Offset=0x1c Size=0x4
};

struct VQ2_MBlk// Size=0x8 (Id=6719)
{
    const int iCodebookSize;// Offset=0x0 Size=0x4
    float * fCodeBook;// Offset=0x4 Size=0x4
};

struct VQ2_MBlk// Size=0x8 (Id=6720)
{
    const int iCodebookSize;// Offset=0x0 Size=0x4
    float * fCodeBook;// Offset=0x4 Size=0x4
};

struct HFRegenStruct// Size=0xc (Id=6721)
{
    float fOnsetPhase_1;// Offset=0x0 Size=0x4
    float fBeta_1;// Offset=0x4 Size=0x4
    float fPitchDFT_1;// Offset=0x8 Size=0x4
};

struct ENC_MEM_BLK// Size=0x58 (Id=6722)
{
    void * CircBuf_mblk;// Offset=0x0 Size=0x4
    void * PreProc_mblk;// Offset=0x4 Size=0x4
    float fVoicing_km1;// Offset=0x8 Size=0x4
    void * pParamMblk;// Offset=0xc Size=0x4
    void * LDPDA_mblk;// Offset=0x10 Size=0x4
    void * VocalFry_mblk;// Offset=0x14 Size=0x4
    void * Onset_mblk;// Offset=0x18 Size=0x4
    float lastCorrCost;// Offset=0x1c Size=0x4
    int iSCRateValid;// Offset=0x20 Size=0x4
    int iSCRate_1;// Offset=0x24 Size=0x4
    int iSCTargetRate;// Offset=0x28 Size=0x4
    float frameEnergy;// Offset=0x2c Size=0x4
    float uq_Pv_1;// Offset=0x30 Size=0x4
    float uq_Pitch_1;// Offset=0x34 Size=0x4
    float Pv_1;// Offset=0x38 Size=0x4
    float Pitch_1;// Offset=0x3c Size=0x4
    void * pNemMem;// Offset=0x40 Size=0x4
    int dwVFid;// Offset=0x44 Size=0x4
    void * pVFontMblk;// Offset=0x48 Size=0x4
    void * pvVadAgcMblk;// Offset=0x4c Size=0x4
    void * postEnc;// Offset=0x50 Size=0x4
    void * nemKeyPostPack;// Offset=0x54 Size=0x4
};

struct VocalFry_mblk// Size=0xc (Id=6723)
{
    float averagePitch;// Offset=0x0 Size=0x4
    float confident;// Offset=0x4 Size=0x4
    float * averageCepstrum;// Offset=0x8 Size=0x4
};

struct VFNT_VOICEFONT_BLOCK// Size=0x28 (Id=6724)
{
    unsigned short wFontID;// Offset=0x0 Size=0x2
    unsigned char __align0[2];// Offset=0x2 Size=0x2
    unsigned long dwChecksum;// Offset=0x4 Size=0x4
    unsigned long dwVFVersion;// Offset=0x8 Size=0x4
    float fPvFactor;// Offset=0xc Size=0x4
    float fPitchScale;// Offset=0x10 Size=0x4
    float fFoSquash;// Offset=0x14 Size=0x4
    float fPitchOffset;// Offset=0x18 Size=0x4
    short wSpectrumOffset;// Offset=0x1c Size=0x2
    unsigned char __align1[2];// Offset=0x1e Size=0x2
    float fSpectrumWarp;// Offset=0x20 Size=0x4
    short wSpectralLedge;// Offset=0x24 Size=0x2
};

struct ONSET_Mblk// Size=0x30 (Id=6725)
{
    float saveAC0[4];// Offset=0x0 Size=0x10
    float saveAC1[4];// Offset=0x10 Size=0x10
    float sumAC0;// Offset=0x20 Size=0x4
    float sumAC1;// Offset=0x24 Size=0x4
    int ptr0;// Offset=0x28 Size=0x4
    int Onset_1;// Offset=0x2c Size=0x4
};

union _unnamed_6726// Size=0x4 (Id=6726)
{
    float f;// Offset=0x0 Size=0x4
    long l;// Offset=0x0 Size=0x4
};

union dt// Size=0x4 (Id=6727)
{
    float f;// Offset=0x0 Size=0x4
    long l;// Offset=0x0 Size=0x4
};

struct tagSP_CIRC_BUF// Size=0x5d4 (Id=6728)
{
    int iLength;// Offset=0x0 Size=0x4
    int iIndex;// Offset=0x4 Size=0x4
    float fData[371];// Offset=0x8 Size=0x5cc
};

struct tagNEM_AGC_VAD_BLK// Size=0x20 (Id=6729)
{
    void * pCodecBlk;// Offset=0x0 Size=0x4
    void * pVadBlk;// Offset=0x4 Size=0x4
    void * pAgcBlk;// Offset=0x8 Size=0x4
    float frameEng;// Offset=0xc Size=0x4
    float pv;// Offset=0x10 Size=0x4
    short wAGControl;// Offset=0x14 Size=0x2
    short wTargetGain;// Offset=0x16 Size=0x2
    unsigned short UserTrigLevel;// Offset=0x18 Size=0x2
    unsigned short TrigMiliSecond;// Offset=0x1a Size=0x2
    unsigned short voicing;// Offset=0x1c Size=0x2
    unsigned char wAgcSwitch;// Offset=0x1e Size=0x1
};

struct NellyAGC_mblk// Size=0xc (Id=6730)
{
    float * Count;// Offset=0x0 Size=0x4
    float meanEngLevel;// Offset=0x4 Size=0x4
    short update_state;// Offset=0x8 Size=0x2
};

struct NellyVAD_mblk// Size=0x18 (Id=6731)
{
    float noise_flr;// Offset=0x0 Size=0x4
    float threshold;// Offset=0x4 Size=0x4
    float frame_per_msec;// Offset=0x8 Size=0x4
    short userTrigLevel;// Offset=0xc Size=0x2
    short onset_cnt;// Offset=0xe Size=0x2
    short hangover_cnt;// Offset=0x10 Size=0x2
    char init;// Offset=0x12 Size=0x1
    char blk_voicing;// Offset=0x13 Size=0x1
    char spkr_voicing;// Offset=0x14 Size=0x1
    char transmit_voicing;// Offset=0x15 Size=0x1
};

struct GfxBspSurfListBuild// Size=0xc (Id=6732)
{
    unsigned short * start;// Offset=0x0 Size=0x4
    unsigned short * end;// Offset=0x4 Size=0x4
    unsigned short * pos;// Offset=0x8 Size=0x4
};

struct GfxSurface// Size=0x18 (Id=6733)
{
    struct srfTriangles_t tris;// Offset=0x0 Size=0x10
    struct Material * material;// Offset=0x10 Size=0x4
    unsigned char lightmapIndex;// Offset=0x14 Size=0x1
    unsigned char reflectionProbeIndex;// Offset=0x15 Size=0x1
    unsigned char primaryLightIndex;// Offset=0x16 Size=0x1
    unsigned char flags;// Offset=0x17 Size=0x1
};

struct GfxGetBspSurfListCameraLitData// Size=0x20 (Id=6734)
{
    unsigned char * surfaceVisData;// Offset=0x0 Size=0x4
    unsigned char * shadowedSurfaceVisData0;// Offset=0x4 Size=0x4
    unsigned char * shadowedSurfaceVisData1;// Offset=0x8 Size=0x4
    float lodOrigin[3];// Offset=0xc Size=0xc
    float invFovScale;// Offset=0x18 Size=0x4
    struct GfxSurfaceBounds * surfacesBounds;// Offset=0x1c Size=0x4
};

struct GfxBspSurfListBuild// Size=0xc (Id=6735)
{
    unsigned short * start;// Offset=0x0 Size=0x4
    unsigned short * end;// Offset=0x4 Size=0x4
    unsigned short * pos;// Offset=0x8 Size=0x4
};

struct GfxBspSurfMergeState// Size=0x18 (Id=6736)
{
    union GfxDrawSurf drawSurf;// Offset=0x0 Size=0x8
    unsigned int surfIndex;// Offset=0x8 Size=0x4
    unsigned int firstVertex;// Offset=0xc Size=0x4
    unsigned int baseIndex;// Offset=0x10 Size=0x4
    unsigned char lightmapIndex;// Offset=0x14 Size=0x1
    unsigned char reflectionProbeIndex;// Offset=0x15 Size=0x1
};

struct GfxGetSunShadowBspSurfListData// Size=0x8 (Id=6737)
{
    unsigned char * surfaceVisData;// Offset=0x0 Size=0x4
    unsigned int * surfaceCastsSunShadow;// Offset=0x4 Size=0x4
};

struct GfxShadowGeometry// Size=0xc (Id=6738)
{
    unsigned short surfaceCount;// Offset=0x0 Size=0x2
    unsigned short smodelCount;// Offset=0x2 Size=0x2
    unsigned short * sortedSurfIndex;// Offset=0x4 Size=0x4
    unsigned short * smodelIndex;// Offset=0x8 Size=0x4
};

struct GfxGetSunShadowBspSurfListData// Size=0x8 (Id=6739)
{
    unsigned char * surfaceVisData;// Offset=0x0 Size=0x4
    unsigned int * surfaceCastsSunShadow;// Offset=0x4 Size=0x4
};

enum AISpecies
{
    AI_SPECIES_HUMAN=0,
    AI_SPECIES_DOG=1,
    AI_SPECIES_CIVILIAN=2,
    MAX_AI_SPECIES=3,
    AI_SPECIES_ALL=3
};

enum _unnamed_6741
{
    MT_NODE_SIZE=16
};

enum _unnamed_6742
{
    MEMORY_NODE_BITS=16,
    MEMORY_NODE_COUNT=65536,
    MT_SIZE=1048576,
    REFSTRING_STRING_OFFSET=4
};

enum _unnamed_6743
{
    THREAD_CONTEXT_MAIN=0,
    THREAD_CONTEXT_BACKEND=1,
    THREAD_CONTEXT_WORKER0=2,
    THREAD_CONTEXT_WORKER1=3,
    THREAD_CONTEXT_WORKER2=4,
    THREAD_CONTEXT_SERVER=5,
    THREAD_CONTEXT_TRACE_COUNT=6,
    THREAD_CONTEXT_TRACE_LAST=5,
    THREAD_CONTEXT_CINEMATIC=6,
    THREAD_CONTEXT_DATABASE=7,
    THREAD_CONTEXT_STREAM=8,
    THREAD_CONTEXT_SNDSTREAMPACKETCALLBACK=9,
    THREAD_CONTEXT_COUNT=10
};

struct GfxScene// Size=0x9a200 (Id=6744)
{
    struct GfxCodeSurf codeEmissiveSurfs[2048];// Offset=0x0 Size=0x8000
    struct GfxCodeSurf codeTransSurfs[640];// Offset=0x8000 Size=0x2800
    struct GfxMarkSurf markSurfs[1536];// Offset=0xa800 Size=0x6000
    struct GfxGlassSurf glassSurfs[768];// Offset=0x10800 Size=0x3000
    union GfxCloudSurf cloudSurfs[256];// Offset=0x13800 Size=0x400
    union GfxDrawSurf drawSurfsLightMapOpaque[8192];// Offset=0x13c00 Size=0x10000
    union GfxDrawSurf drawSurfsDepthHack[32];// Offset=0x23c00 Size=0x100
    union GfxDrawSurf drawSurfsLitOpaque[8192];// Offset=0x23d00 Size=0x10000
    union GfxDrawSurf drawSurfsLitTrans[1024];// Offset=0x33d00 Size=0x2000
    union GfxDrawSurf drawSurfsEmissive[8192];// Offset=0x35d00 Size=0x10000
    union GfxDrawSurf drawSurfsSunShadow0[4096];// Offset=0x45d00 Size=0x8000
    union GfxDrawSurf drawSurfsSunShadow1[8192];// Offset=0x4dd00 Size=0x10000
    union GfxDrawSurf drawSurfsSpotShadow0[896];// Offset=0x5dd00 Size=0x1c00
    union GfxDrawSurf drawSurfsSpotShadow1[896];// Offset=0x5f900 Size=0x1c00
    union GfxDrawSurf drawSurfsSpotShadow2[896];// Offset=0x61500 Size=0x1c00
    union GfxDrawSurf drawSurfsSpotShadow3[896];// Offset=0x63100 Size=0x1c00
    unsigned int sceneLightIsUsed[32];// Offset=0x64d00 Size=0x80
    unsigned int cachedSceneLightIsUsed[4][32];// Offset=0x64d80 Size=0x200
    union GfxSparkSurf sparkSurfs[64];// Offset=0x64f80 Size=0x100
    unsigned int drawSurfLimit[11];// Offset=0x65080 Size=0x2c
    long drawSurfCount[11];// Offset=0x650ac Size=0x2c
    union GfxDrawSurf * drawSurfs[11];// Offset=0x650d8 Size=0x2c
    long codeSurfUser[2];// Offset=0x65104 Size=0x8
    long markMeshGuard;// Offset=0x6510c Size=0x4
    unsigned int codeEmissiveSurfCount;// Offset=0x65110 Size=0x4
    unsigned int codeTransSurfCount;// Offset=0x65114 Size=0x4
    unsigned int markSurfCount;// Offset=0x65118 Size=0x4
    unsigned int glassSurfCount;// Offset=0x6511c Size=0x4
    struct GfxSceneDef def;// Offset=0x65120 Size=0x28
    unsigned int addedLightCount;// Offset=0x65148 Size=0x4
    struct GfxLight addedLight[32];// Offset=0x6514c Size=0x800
    bool isAddedLightCulled[32];// Offset=0x6594c Size=0x20
    float dynamicSpotLightNearPlaneOffset;// Offset=0x6596c Size=0x4
    float dynamicSpotLightLength;// Offset=0x65970 Size=0x4
    unsigned char __align0[4];// Offset=0x65974 Size=0x4
    struct GfxVisibleLight visLight[4];// Offset=0x65978 Size=0x8020
    struct GfxVisibleLight visLightShadow[1];// Offset=0x6d998 Size=0x2008
    unsigned int * entOverflowedDrawBuf;// Offset=0x6f9a0 Size=0x4
    long gfxEntCount;// Offset=0x6f9a4 Size=0x4
    struct GfxEntity gfxEnts[128];// Offset=0x6f9a8 Size=0x400
    int sceneDObjCount;// Offset=0x6fda8 Size=0x4
    int preClientSceneDObjCount;// Offset=0x6fdac Size=0x4
    int sceneDObjCountAtMark;// Offset=0x6fdb0 Size=0x4
    struct GfxSceneEntity sceneDObj[520];// Offset=0x6fdb4 Size=0xf3c0
    unsigned char sceneDObjVisData[7][512];// Offset=0x7f174 Size=0xe00
    int sceneDObjMarkableViewmodelIndex;// Offset=0x7ff74 Size=0x4
    unsigned int sceneDObjFirstViewmodelIndex;// Offset=0x7ff78 Size=0x4
    unsigned int sceneDObjViewmodelCount;// Offset=0x7ff7c Size=0x4
    long sceneModelCount;// Offset=0x7ff80 Size=0x4
    int sceneModelCountAtMark;// Offset=0x7ff84 Size=0x4
    int sceneDObjModelCount;// Offset=0x7ff88 Size=0x4
    struct GfxSceneModel sceneModel[1024];// Offset=0x7ff8c Size=0x12000
    unsigned char sceneModelVisData[7][1024];// Offset=0x91f8c Size=0x1c00
    long sceneBrushCount;// Offset=0x93b8c Size=0x4
    int sceneBrushCountAtMark;// Offset=0x93b90 Size=0x4
    struct GfxSceneBrush sceneBrush[512];// Offset=0x93b94 Size=0x5000
    unsigned char sceneBrushVisData[3][512];// Offset=0x98b94 Size=0x600
    union GfxSceneGlass sceneGlass[1024];// Offset=0x99194 Size=0x1000
    unsigned int sceneDynModelCount;// Offset=0x9a194 Size=0x4
    unsigned int sceneDynBrushCount;// Offset=0x9a198 Size=0x4
    int gfxEntCountAtMark;// Offset=0x9a19c Size=0x4
    struct GfxSceneDpvs dpvs;// Offset=0x9a1a0 Size=0x38
    int updateSound;// Offset=0x9a1d8 Size=0x4
};

enum _unnamed_6745
{
    R_ADD_BSP_SHADOWMAP=0,
    R_ADD_BSP_LIGHTMAP=1,
    R_ADD_BSP_COUNT=2
};

enum team_t
{
    TEAM_FREE=0,
    TEAM_BAD=0,
    TEAM_AXIS=1,
    TEAM_ALLIES=2,
    TEAM_THREE=3,
    TEAM_NEUTRAL=4,
    TEAM_DEAD=5,
    TEAM_NUM_TEAMS=6
};

union GfxEntCellRefInfo// Size=0x4 (Id=6747)
{
    float radius;// Offset=0x0 Size=0x4
    struct GfxBrushModel * bmodel;// Offset=0x0 Size=0x4
};

struct GfxSceneDpvs// Size=0x38 (Id=6748)
{
    unsigned int localClientNum;// Offset=0x0 Size=0x4
    unsigned char * entVisData[7];// Offset=0x4 Size=0x1c
    unsigned short * sceneXModelIndex;// Offset=0x20 Size=0x4
    unsigned short * sceneDObjIndex;// Offset=0x24 Size=0x4
    union GfxEntCellRefInfo * entInfo[4];// Offset=0x28 Size=0x10
};

struct GfxBrushModel// Size=0x38 (Id=6749)
{
    struct GfxBrushModelWritable writable;// Offset=0x0 Size=0x18
    struct Bounds bounds;// Offset=0x18 Size=0x18
    float radius;// Offset=0x30 Size=0x4
    unsigned short surfaceCount;// Offset=0x34 Size=0x2
    unsigned short startSurfIndex;// Offset=0x36 Size=0x2
};

struct GfxSceneBrush// Size=0x28 (Id=6750)
{
    struct BModelDrawInfo info;// Offset=0x0 Size=0x2
    unsigned short entnum;// Offset=0x2 Size=0x2
    struct GfxBrushModel * bmodel;// Offset=0x4 Size=0x4
    struct GfxPlacement placement;// Offset=0x8 Size=0x1c
    unsigned char reflectionProbeIndex;// Offset=0x24 Size=0x1
};

struct GfxVisibleLight// Size=0x2008 (Id=6751)
{
    int drawSurfCount;// Offset=0x0 Size=0x4
    unsigned char __align0[4];// Offset=0x4 Size=0x4
    union GfxDrawSurf drawSurfs[1024];// Offset=0x8 Size=0x2000
};

class GfxGetSunShadowBspSurfListInterface_FastShadow// Size=0x1 (Id=6752)
{
    public unsigned int GetSurfIndex(struct GfxGetSunShadowBspSurfListData & ,unsigned int );
    public int KeepSurfIndex(struct GfxGetSunShadowBspSurfListData & ,unsigned int );
    public int PerVisibleDrawSurfCallback(struct GfxGetSunShadowBspSurfListData & ,unsigned int ,union GfxDrawSurf );
    public void PerEmittedDrawSurfCallback(union GfxDrawSurf );
};

struct std::pair<GfxSurface * *,GfxSurface * *>// Size=0x8 (Id=6753)
{
    void pair<GfxSurface * *,GfxSurface * *>(struct GfxSurface &*** ,struct GfxSurface &*** );
    void pair<GfxSurface * *,GfxSurface * *>();
    void swap(struct std::pair<GfxSurface * *,GfxSurface * *> & );
    struct GfxSurface ** first;// Offset=0x0 Size=0x4
    struct GfxSurface ** second;// Offset=0x4 Size=0x4
};

class GfxGetSortedBspSurfListInterface// Size=0x1 (Id=6754)
{
    public unsigned int GetSurfIndex(struct GfxSurface ** ,unsigned int );
    public int KeepSurfIndex(struct GfxSurface ** ,unsigned int );
    public int PerVisibleDrawSurfCallback(struct GfxSurface ** ,unsigned int ,union GfxDrawSurf );
    public void PerEmittedDrawSurfCallback(union GfxDrawSurf );
};

class GfxGetSpotShadowBspSurfListInterface// Size=0x1 (Id=6755)
{
    public unsigned int GetSurfIndex(struct GfxShadowGeometry * ,unsigned int );
    public int KeepSurfIndex(struct GfxShadowGeometry * ,unsigned int );
    public int PerVisibleDrawSurfCallback(struct GfxShadowGeometry * ,unsigned int ,union GfxDrawSurf );
    public void PerEmittedDrawSurfCallback(union GfxDrawSurf );
};

struct GfxSceneModel// Size=0x48 (Id=6756)
{
    struct XModelDrawInfo info;// Offset=0x0 Size=0x4
    struct XModel * model;// Offset=0x4 Size=0x4
    struct DObj * obj;// Offset=0x8 Size=0x4
    struct GfxScaledPlacement placement;// Offset=0xc Size=0x20
    struct // Size=0x4 (Id=0)
    {
        unsigned int gfxEntIndex:7;// Offset=0x2c Size=0x4 BitOffset=0x19 BitSize=0x7
        unsigned int entnum:12;// Offset=0x2c Size=0x4 BitOffset=0xd BitSize=0xc
        unsigned int renderFxFlags:13;// Offset=0x2c Size=0x4 BitOffset=0x0 BitSize=0xd
    };
    float radius;// Offset=0x30 Size=0x4
    unsigned short * cachedLightingHandle;// Offset=0x34 Size=0x4
    float lightingOrigin[3];// Offset=0x38 Size=0xc
    unsigned char reflectionProbeIndex;// Offset=0x44 Size=0x1
    char lod;// Offset=0x45 Size=0x1
};

union GfxBspSurfHeader// Size=0x2 (Id=6757)
{
    struct GfxBspSurfFields fields;// Offset=0x0 Size=0x2
    unsigned short packed;// Offset=0x0 Size=0x2
};

class GfxGetBspSurfListCameraLitInterfaceBase// Size=0x1 (Id=6758)
{
    public unsigned int GetSurfIndex(struct GfxGetBspSurfListCameraLitData & ,unsigned int );
    public int PerVisibleDrawSurfCallback(struct GfxGetBspSurfListCameraLitData & ,unsigned int ,union GfxDrawSurf );// Offset=0x0 Size=0x210
    public void PerEmittedDrawSurfCallback(union GfxDrawSurf );
};

struct GfxBspSurfFields// Size=0x2 (Id=6759)
{
    struct // Size=0x2 (Id=0)
    {
        unsigned short restart:1;// Offset=0x0 Size=0x2 BitOffset=0xf BitSize=0x1
        unsigned short countLessOne:15;// Offset=0x0 Size=0x2 BitOffset=0x0 BitSize=0xf
    };
};

struct GfxBspNoSunShadowsSurfIter : public GfxBspSurfIter// Size=0xc (Id=6760)
{
    struct GfxBspNoSunShadowsSurfIter * GetSurfIter(struct GfxDrawListIter * );
    union GfxDrawGroupSetup GetDrawGroupSetup(struct GfxBspNoSunShadowsSurfIter * );
    void Terminate(struct GfxBspNoSunShadowsSurfIter * );
};

class GfxGetBspSurfListCameraLitInterface : public GfxGetBspSurfListCameraLitInterfaceBase// Size=0x1 (Id=6761)
{
    public int KeepSurfIndex(struct GfxGetBspSurfListCameraLitData & ,unsigned int );
};

class GfxGetSunShadowBspSurfListInterface_SlowShadow// Size=0x1 (Id=6762)
{
    public unsigned int GetSurfIndex(struct GfxGetSunShadowBspSurfListData & ,unsigned int );
    public int KeepSurfIndex(struct GfxGetSunShadowBspSurfListData & ,unsigned int );
    public int PerVisibleDrawSurfCallback(struct GfxGetSunShadowBspSurfListData & ,unsigned int ,union GfxDrawSurf );
    public void PerEmittedDrawSurfCallback(union GfxDrawSurf );
};

class GfxAddBspSurfacesCameraNonlitInterface// Size=0x1 (Id=6763)
{
    public unsigned int GetSurfIndex(unsigned char * ,unsigned int );
    public int KeepSurfIndex(unsigned char * ,unsigned int );
    public int PerVisibleDrawSurfCallback(unsigned char * ,unsigned int ,union GfxDrawSurf );
    public void PerEmittedDrawSurfCallback(union GfxDrawSurf );
};

union GfxSModelSurfHeader// Size=0x4 (Id=6764)
{
    struct GfxSModelSurfHeaderFields fields;// Offset=0x0 Size=0x4
    unsigned int packed;// Offset=0x0 Size=0x4
    unsigned short array[2];// Offset=0x0 Size=0x4
};

union GfxSModelSurfVisDataRef// Size=0x2 (Id=6765)
{
    struct GfxSModelSurfVisDataRefFields fields;// Offset=0x0 Size=0x2
    unsigned short packed;// Offset=0x0 Size=0x2
};

struct GfxSModelEmitInfo// Size=0xc (Id=6766)
{
    struct XModel * localModel;// Offset=0x0 Size=0x4
    unsigned int firstMtlSkinIndex;// Offset=0x4 Size=0x4
    unsigned char sceneLightIndex;// Offset=0x8 Size=0x1
    unsigned char reflectionProbeIndex;// Offset=0x9 Size=0x1
    unsigned char unused[2];// Offset=0xa Size=0x2
};

struct GfxSModelSurfDrawData// Size=0xd8 (Id=6767)
{
    unsigned int shadowCasterMaterialIndex;// Offset=0x0 Size=0x4
    unsigned char * visData;// Offset=0x4 Size=0x4
    unsigned int visDataUsed;// Offset=0x8 Size=0x4
    unsigned int visDataLimit;// Offset=0xc Size=0x4
    struct GfxSModelSurfBuildList buildList[5][1];// Offset=0x10 Size=0xc8
};

struct GfxSModelEmitInfo// Size=0xc (Id=6768)
{
    struct XModel * localModel;// Offset=0x0 Size=0x4
    unsigned int firstMtlSkinIndex;// Offset=0x4 Size=0x4
    unsigned char sceneLightIndex;// Offset=0x8 Size=0x1
    unsigned char reflectionProbeIndex;// Offset=0x9 Size=0x1
    unsigned char unused[2];// Offset=0xa Size=0x2
};

struct GfxSModelSurfHeaderFields// Size=0x4 (Id=6769)
{
    struct // Size=0x2 (Id=0)
    {
        unsigned short visDataRefCountLessOne:4;// Offset=0x0 Size=0x2 BitOffset=0xc BitSize=0x4
        unsigned short materialSortedIndex:12;// Offset=0x0 Size=0x2 BitOffset=0x0 BitSize=0xc
    };
    unsigned char sceneLightIndex;// Offset=0x2 Size=0x1
    unsigned char reflectionProbeIndex;// Offset=0x3 Size=0x1
};

struct GfxSModelSurfVisDataHeader// Size=0x8 (Id=6770)
{
    struct XSurface * surfs;// Offset=0x0 Size=0x4
    unsigned short smodelCount;// Offset=0x4 Size=0x2
    unsigned short smodelIndexes[1];// Offset=0x6 Size=0x2
};

struct GfxSModelSurfVisDataRefFields// Size=0x2 (Id=6771)
{
    struct // Size=0x2 (Id=0)
    {
        unsigned short visDataIndexPacked:12;// Offset=0x0 Size=0x2 BitOffset=0x4 BitSize=0xc
        unsigned short surfIndex:4;// Offset=0x0 Size=0x2 BitOffset=0x0 BitSize=0x4
    };
};

enum StaticModelFlag
{
    STATIC_MODEL_FLAG_NO_CAST_SHADOW=1,
    STATIC_MODEL_FLAG_GROUND_LIGHTING=2
};

struct GfxSModelSurfDelaySortFields// Size=0x8 (Id=6773)
{
    union GfxSModelSurfHeader header;// Offset=0x0 Size=0x4
    union GfxSModelSurfVisDataRef visDataRef;// Offset=0x4 Size=0x2
    unsigned short unused;// Offset=0x6 Size=0x2
};

struct GfxSModelSurfBuildList// Size=0x28 (Id=6774)
{
    union GfxSModelSurfHeader lastSurfHeader;// Offset=0x0 Size=0x4
    struct GfxSModelSurf * lastSModelSurf;// Offset=0x4 Size=0x4
    unsigned int visDataRefCount;// Offset=0x8 Size=0x4
    unsigned char * surfDataBegin;// Offset=0xc Size=0x4
    unsigned char * surfDataPos;// Offset=0x10 Size=0x4
    unsigned char * surfDataEnd;// Offset=0x14 Size=0x4
    union GfxSModelSurfHeader minDelaySortKey;// Offset=0x18 Size=0x4
    union GfxSModelSurfDelaySort * delaySurfList;// Offset=0x1c Size=0x4
    unsigned int delaySurfCount;// Offset=0x20 Size=0x4
    unsigned int delaySurfLimit;// Offset=0x24 Size=0x4
};

union GfxSModelSurfDelaySort// Size=0x8 (Id=6775)
{
    struct GfxSModelSurfDelaySortFields fields;// Offset=0x0 Size=0x8
    unsigned long long packed;// Offset=0x0 Size=0x8
};

struct GfxSModelSurf// Size=0x8 (Id=6776)
{
    union GfxSModelSurfHeader header;// Offset=0x0 Size=0x4
    union GfxSModelSurfVisDataRef visDataRefs[1];// Offset=0x4 Size=0x2
};

struct GfxStageInfo// Size=0x18 (Id=6777)
{
    struct Stage activeStage;// Offset=0x0 Size=0x14
    bool activeStageValid;// Offset=0x14 Size=0x1
};

struct GfxDrawConsts// Size=0x1100 (Id=6778)
{
    float outdoorLookupMatrix[4][4];// Offset=0x0 Size=0x40
    struct GfxScaledPlacement identityPlacement;// Offset=0x40 Size=0x20
    float scaleViewport;// Offset=0x60 Size=0x4
    struct D3DVertexBuffer particleCloudVertexBuffer;// Offset=0x64 Size=0x20
    struct D3DIndexBuffer particleCloudIndexBuffer;// Offset=0x84 Size=0x20
    struct D3DVertexBuffer particleCloudSparkVertexBuffer;// Offset=0xa4 Size=0x20
    struct D3DIndexBuffer particleCloudSparkIndexBuffer;// Offset=0xc4 Size=0x20
    unsigned char __align0[28];// Offset=0xe4 Size=0x1c
    unsigned char sortedMaterialKeys[4096];// Offset=0x100 Size=0x1000
};

struct SunLightParseParams// Size=0x80 (Id=6779)
{
    char name[64];// Offset=0x0 Size=0x40
    float ambientScale;// Offset=0x40 Size=0x4
    float ambientColor[3];// Offset=0x44 Size=0xc
    float skyLight;// Offset=0x50 Size=0x4
    float sunLight;// Offset=0x54 Size=0x4
    float sunColor[3];// Offset=0x58 Size=0xc
    float skyColor[3];// Offset=0x64 Size=0xc
    bool skyColorHasBeenSet;// Offset=0x70 Size=0x1
    unsigned char __align0[3];// Offset=0x71 Size=0x3
    float angles[3];// Offset=0x74 Size=0xc
};

struct GfxSModelCachedVertex// Size=0x0 (Id=6780)
{
};

struct GfxBuffers// Size=0x64 (Id=6781)
{
    struct GfxVertexBufferState skinnedCacheVbPool[2];// Offset=0x0 Size=0x58
    unsigned char * skinnedCacheLockAddr;// Offset=0x58 Size=0x4
    struct GfxSModelCachedVertex * smodelCacheVerts;// Offset=0x5c Size=0x4
    int dynamicBufferFrame;// Offset=0x60 Size=0x4
};

struct GfxDynamicIndices// Size=0x2c (Id=6782)
{
    long used;// Offset=0x0 Size=0x4
    int total;// Offset=0x4 Size=0x4
    struct D3DIndexBuffer buffer;// Offset=0x8 Size=0x20
    unsigned short * indices;// Offset=0x28 Size=0x4
};

struct BINKREALTIME// Size=0x38 (Id=6783)
{
    unsigned int FrameNum;// Offset=0x0 Size=0x4
    unsigned int FrameRate;// Offset=0x4 Size=0x4
    unsigned int FrameRateDiv;// Offset=0x8 Size=0x4
    unsigned int Frames;// Offset=0xc Size=0x4
    unsigned int FramesTime;// Offset=0x10 Size=0x4
    unsigned int FramesVideoDecompTime;// Offset=0x14 Size=0x4
    unsigned int FramesAudioDecompTime;// Offset=0x18 Size=0x4
    unsigned int FramesReadTime;// Offset=0x1c Size=0x4
    unsigned int FramesIdleReadTime;// Offset=0x20 Size=0x4
    unsigned int FramesThreadReadTime;// Offset=0x24 Size=0x4
    unsigned int FramesBlitTime;// Offset=0x28 Size=0x4
    unsigned int ReadBufferSize;// Offset=0x2c Size=0x4
    unsigned int ReadBufferUsed;// Offset=0x30 Size=0x4
    unsigned int FramesDataRate;// Offset=0x34 Size=0x4
};

struct BINKREALTIME// Size=0x38 (Id=6784)
{
    unsigned int FrameNum;// Offset=0x0 Size=0x4
    unsigned int FrameRate;// Offset=0x4 Size=0x4
    unsigned int FrameRateDiv;// Offset=0x8 Size=0x4
    unsigned int Frames;// Offset=0xc Size=0x4
    unsigned int FramesTime;// Offset=0x10 Size=0x4
    unsigned int FramesVideoDecompTime;// Offset=0x14 Size=0x4
    unsigned int FramesAudioDecompTime;// Offset=0x18 Size=0x4
    unsigned int FramesReadTime;// Offset=0x1c Size=0x4
    unsigned int FramesIdleReadTime;// Offset=0x20 Size=0x4
    unsigned int FramesThreadReadTime;// Offset=0x24 Size=0x4
    unsigned int FramesBlitTime;// Offset=0x28 Size=0x4
    unsigned int ReadBufferSize;// Offset=0x2c Size=0x4
    unsigned int ReadBufferUsed;// Offset=0x30 Size=0x4
    unsigned int FramesDataRate;// Offset=0x34 Size=0x4
};

enum CinematicEnum
{
    CINEMATIC_NOT_PAUSED=0,
    CINEMATIC_PAUSED=1
};

enum _unnamed_6786
{
    MAPTYPE_NONE=0,
    MAPTYPE_INVALID1=1,
    MAPTYPE_1D=2,
    MAPTYPE_2D=3,
    MAPTYPE_3D=4,
    MAPTYPE_CUBE=5,
    MAPTYPE_COUNT=6
};

enum SND_CHANNELVOLPRIO
{
    SND_CHANNELVOLPRIO_NONE=0,
    SND_CHANNELVOLPRIO_VICTORYSCREEN=1,
    SND_CHANNELVOLPRIO_HOLDBREATH=2,
    SND_CHANNELVOLPRIO_PAIN=3,
    SND_CHANNELVOLPRIO_SHELLSHOCK=4,
    SND_CHANNELVOLPRIO_COUNT=5
};

enum _unnamed_6788
{
    CIN_TARGET_COMMAND=0,
    CIN_TARGET_BACKEND=1,
    CIN_TARGET_UPDATE=2,
    CIN_TARGET_COUNT=3
};

struct CinematicGlob// Size=0x998 (Id=6789)
{
    struct CinematicGlobTarget target[3];// Offset=0x0 Size=0x318
    struct CinematicGlobStatus status;// Offset=0x318 Size=0x104
    struct CinematicGlobServer server;// Offset=0x41c Size=0x104
    bool cinematicFinished;// Offset=0x520 Size=0x1
    bool cinematicPending;// Offset=0x521 Size=0x1
    unsigned char __align0[2];// Offset=0x522 Size=0x2
    int stopId;// Offset=0x524 Size=0x4
    int finishedId;// Offset=0x528 Size=0x4
    int lastFinishedId;// Offset=0x52c Size=0x4
    bool hasFileIO;// Offset=0x530 Size=0x1
    unsigned char __align1[3];// Offset=0x531 Size=0x3
    struct BINK * bink;// Offset=0x534 Size=0x4
    struct BINKTEXTURESET binkTextureSet;// Offset=0x538 Size=0xb8
    struct CinematicHunk masterHunk;// Offset=0x5f0 Size=0xc
    int activeImageFrame;// Offset=0x5fc Size=0x4
    enum CinematicEnum targetPaused;// Offset=0x600 Size=0x4
    enum CinematicEnum currentPaused;// Offset=0x604 Size=0x4
    struct CinematicTextureSet textureSet;// Offset=0x608 Size=0x380
    int lockRead;// Offset=0x988 Size=0x4
    unsigned long * codeImagesFence[2];// Offset=0x98c Size=0x8
    int syncFrame;// Offset=0x994 Size=0x4
};

struct BINKTEXTURESET// Size=0xb8 (Id=6790)
{
    struct BINKFRAMETEXTURES textures[2];// Offset=0x0 Size=0x40
    struct BINKFRAMEBUFFERS bink_buffers;// Offset=0x40 Size=0x78
};

struct CinematicGlobStatus// Size=0x104 (Id=6791)
{
    char name[256];// Offset=0x0 Size=0x100
    unsigned int timeInMsec;// Offset=0x100 Size=0x4
};

struct CinematicGlobTarget// Size=0x108 (Id=6792)
{
    char name[256];// Offset=0x0 Size=0x100
    unsigned int playbackFlags;// Offset=0x100 Size=0x4
    int changed;// Offset=0x104 Size=0x4
};

struct CinematicGlobServer// Size=0x104 (Id=6793)
{
    char name[256];// Offset=0x0 Size=0x100
    unsigned int playbackFlags;// Offset=0x100 Size=0x4
};

struct BINKFRAMETEXTURES// Size=0x20 (Id=6794)
{
    struct D3DTexture * Ytexture;// Offset=0x0 Size=0x4
    struct D3DTexture * cRtexture;// Offset=0x4 Size=0x4
    struct D3DTexture * cBtexture;// Offset=0x8 Size=0x4
    struct D3DTexture * Atexture;// Offset=0xc Size=0x4
    unsigned int Ysize;// Offset=0x10 Size=0x4
    unsigned int cRsize;// Offset=0x14 Size=0x4
    unsigned int cBsize;// Offset=0x18 Size=0x4
    unsigned int Asize;// Offset=0x1c Size=0x4
};

enum XMEDIA_CALLBACK_TYPE
{
    XMEDIA_NOTIFY_END_OF_FRAME=1,
    XMEDIA_NOTIFY_STATE_CHANGE=2,
    XMEDIA_NOTIFY_BEGIN_SCENE=3,
    XMEDIA_NOTIFY_END_SCENE=4
};

enum GfxPrimStatsTarget
{
    GFX_PRIM_STATS_WORLD=0,
    GFX_PRIM_STATS_SMODELRIGID=1,
    GFX_PRIM_STATS_XMODELRIGID=2,
    GFX_PRIM_STATS_XMODELSKINNED=3,
    GFX_PRIM_STATS_BMODEL=4,
    GFX_PRIM_STATS_COUNT_GEO=5,
    GFX_PRIM_STATS_FX=5,
    GFX_PRIM_STATS_HUD=6,
    GFX_PRIM_STATS_DEBUG=7,
    GFX_PRIM_STATS_CODE=8,
    GFX_PRIM_STATS_COUNT=9,
    GFX_PRIM_STATS_INVALID=10
};

enum SND_ENVEFFECTPRIO
{
    SND_ENVEFFECTPRIO_NONE=0,
    SND_ENVEFFECTPRIO_LEVEL=1,
    SND_ENVEFFECTPRIO_SHELLSHOCK=2,
    SND_ENVEFFECTPRIO_REMOTECAMERA=3,
    SND_ENVEFFECTPRIO_COUNT=4
};

struct _XMEDIA_VIDEO_DESCRIPTOR// Size=0x10 (Id=6798)
{
    unsigned long dwWidth;// Offset=0x0 Size=0x4
    unsigned long dwHeight;// Offset=0x4 Size=0x4
    float fFrameRate;// Offset=0x8 Size=0x4
    unsigned long dwClipDuration;// Offset=0xc Size=0x4
};

struct _XMEDIA_AUDIO_DESCRIPTOR// Size=0x10 (Id=6799)
{
    unsigned long dwNumberOfChannels;// Offset=0x0 Size=0x4
    unsigned long dwSampleRate;// Offset=0x4 Size=0x4
    unsigned long dwBitsPerSample;// Offset=0x8 Size=0x4
    unsigned long dwClipDuration;// Offset=0xc Size=0x4
};

struct BINKFRAMEBUFFERS// Size=0x78 (Id=6800)
{
    int TotalFrames;// Offset=0x0 Size=0x4
    unsigned int YABufferWidth;// Offset=0x4 Size=0x4
    unsigned int YABufferHeight;// Offset=0x8 Size=0x4
    unsigned int cRcBBufferWidth;// Offset=0xc Size=0x4
    unsigned int cRcBBufferHeight;// Offset=0x10 Size=0x4
    unsigned int FrameNum;// Offset=0x14 Size=0x4
    struct BINKFRAMEPLANESET Frames[2];// Offset=0x18 Size=0x60
};

struct BINKPLANE// Size=0xc (Id=6801)
{
    int Allocate;// Offset=0x0 Size=0x4
    void * Buffer;// Offset=0x4 Size=0x4
    unsigned int BufferPitch;// Offset=0x8 Size=0x4
};

struct materialCommands_t// Size=0x11820 (Id=6802)
{
    struct GfxVertex verts[2048];// Offset=0x0 Size=0x10000
    unsigned short indices[3072];// Offset=0x10000 Size=0x1800
    enum MaterialVertexDeclType vertDeclType;// Offset=0x11800 Size=0x4
    unsigned int vertexSize;// Offset=0x11804 Size=0x4
    unsigned int indexCount;// Offset=0x11808 Size=0x4
    unsigned int vertexCount;// Offset=0x1180c Size=0x4
    unsigned int firstVertex;// Offset=0x11810 Size=0x4
    unsigned int lastVertex;// Offset=0x11814 Size=0x4
};

enum XMEDIA_PLAYER_STATUS
{
    XMEDIA_PLAYER_IDLE=1,
    XMEDIA_PLAYER_BUFFERING=2,
    XMEDIA_PLAYER_PLAYING=3,
    XMEDIA_PLAYER_PAUSING=4,
    XMEDIA_PLAYER_PAUSED=5,
    XMEDIA_PLAYER_STOPPING=6,
    XMEDIA_PLAYER_STOPPED=7,
    XMEDIA_PLAYER_TERMINATING=8
};

struct IXMediaXmvPlayer// Size=0x1 (Id=6804)
{
    unsigned long AddRef();
    unsigned long Release();
    HRESULT GetNextFrame(struct _XMEDIA_VIDEO_FRAME * );
    HRESULT RenderNextFrame(unsigned long ,long * );
    HRESULT SetRectangle(struct tagRECT * );
    HRESULT GetRectangle(struct tagRECT * );
    HRESULT SetVideoScreen(union _XMEDIA_VIDEO_SCREEN * );
    HRESULT GetVideoScreen(union _XMEDIA_VIDEO_SCREEN * );
    HRESULT GetAudioDescriptor(struct _XMEDIA_AUDIO_DESCRIPTOR * );
    HRESULT GetVideoDescriptor(struct _XMEDIA_VIDEO_DESCRIPTOR * );
    HRESULT Play(unsigned long ,struct _XOVERLAPPED * );
    HRESULT Pause();
    HRESULT Resume();
    HRESULT Stop(unsigned long );
    HRESULT Seek(unsigned long ,unsigned long * );
    HRESULT SetPlaySpeed(float );
    HRESULT GetStatus(struct _XMEDIA_PLAYBACK_STATUS * );
    HRESULT GetSourceVoice(struct IXAudioSourceVoice ** );
    HRESULT SetCallback(enum XMEDIA_CALLBACK_TYPE ,void  ( * )(void * ),void * );
    HRESULT GetAudioVideoStatus(enum XMEDIA_PLAYER_STATUS * ,enum XMEDIA_PLAYER_STATUS * );
};

union _XMEDIA_VIDEO_SCREEN// Size=0x50 (Id=6805)
{
    struct _XMEDIA_VIDEO_SCREEN_VERTEX upperLeft;// Offset=0x0 Size=0x14
    struct _XMEDIA_VIDEO_SCREEN_VERTEX upperRight;// Offset=0x14 Size=0x14
    struct _XMEDIA_VIDEO_SCREEN_VERTEX lowerLeft;// Offset=0x28 Size=0x14
    struct _XMEDIA_VIDEO_SCREEN_VERTEX lowerRight;// Offset=0x3c Size=0x14
    struct _XMEDIA_VIDEO_SCREEN_VERTEX aVertices[4];// Offset=0x0 Size=0x50
};

struct CinematicTextureSet// Size=0x380 (Id=6806)
{
    struct GfxImage imageY[2];// Offset=0x0 Size=0xe0
    struct GfxImage imageCr[2];// Offset=0xe0 Size=0xe0
    struct GfxImage imageCb[2];// Offset=0x1c0 Size=0xe0
    struct GfxImage imageA[2];// Offset=0x2a0 Size=0xe0
};

struct BINKIO// Size=0x144 (Id=6807)
{
    unsigned int  ( * ReadHeader)(struct BINKIO * ,int ,void * ,unsigned int );// Offset=0x0 Size=0x4
    unsigned int  ( * ReadFrame)(struct BINKIO * ,unsigned int ,int ,void * ,unsigned int );// Offset=0x4 Size=0x4
    unsigned int  ( * GetBufferSize)(struct BINKIO * ,unsigned int );// Offset=0x8 Size=0x4
    void  ( * SetInfo)(struct BINKIO * ,void * ,unsigned int ,unsigned int ,unsigned int );// Offset=0xc Size=0x4
    unsigned int  ( * Idle)(struct BINKIO * );// Offset=0x10 Size=0x4
    void  ( * Close)(struct BINKIO * );// Offset=0x14 Size=0x4
    int  ( * BGControl)(struct BINKIO * ,unsigned int );// Offset=0x18 Size=0x4
    struct BINK * bink;// Offset=0x1c Size=0x4
    unsigned int ReadError;// Offset=0x20 Size=0x4
    unsigned int DoingARead;// Offset=0x24 Size=0x4
    unsigned int BytesRead;// Offset=0x28 Size=0x4
    unsigned int Working;// Offset=0x2c Size=0x4
    unsigned int TotalTime;// Offset=0x30 Size=0x4
    unsigned int ForegroundTime;// Offset=0x34 Size=0x4
    unsigned int IdleTime;// Offset=0x38 Size=0x4
    unsigned int ThreadTime;// Offset=0x3c Size=0x4
    unsigned int BufSize;// Offset=0x40 Size=0x4
    unsigned int BufHighUsed;// Offset=0x44 Size=0x4
    unsigned int CurBufSize;// Offset=0x48 Size=0x4
    unsigned int CurBufUsed;// Offset=0x4c Size=0x4
    unsigned int Suspended;// Offset=0x50 Size=0x4
    unsigned char iodata[160];// Offset=0x54 Size=0xa0
    void  ( * suspend_callback)(struct BINKIO * );// Offset=0xf4 Size=0x4
    int  ( * try_suspend_callback)(struct BINKIO * );// Offset=0xf8 Size=0x4
    void  ( * resume_callback)(struct BINKIO * );// Offset=0xfc Size=0x4
    void  ( * idle_on_callback)(struct BINKIO * );// Offset=0x100 Size=0x4
    unsigned int callback_control[16];// Offset=0x104 Size=0x40
};

struct BINKRECT// Size=0x10 (Id=6808)
{
    int Left;// Offset=0x0 Size=0x4
    int Top;// Offset=0x4 Size=0x4
    int Width;// Offset=0x8 Size=0x4
    int Height;// Offset=0xc Size=0x4
};

struct _XMEDIA_VIDEO_SCREEN_VERTEX// Size=0x14 (Id=6809)
{
    float fX;// Offset=0x0 Size=0x4
    float fY;// Offset=0x4 Size=0x4
    float fZ;// Offset=0x8 Size=0x4
    float fTu;// Offset=0xc Size=0x4
    float fTv;// Offset=0x10 Size=0x4
};

struct _XMEDIA_PLAYBACK_STATUS// Size=0x8 (Id=6810)
{
    enum XMEDIA_PLAYER_STATUS Status;// Offset=0x0 Size=0x4
    long lDuration;// Offset=0x4 Size=0x4
};

enum XMEDIA_VIDEO_FORMAT
{
    XMEDIA_VIDEO_FORMAT_I420=1
};

struct _XMEDIA_VIDEO_FRAME// Size=0x30 (Id=6812)
{
    enum XMEDIA_VIDEO_FORMAT videoFormat;// Offset=0x0 Size=0x4
    unsigned long dwFlags;// Offset=0x4 Size=0x4
    long lTimeToPresent;// Offset=0x8 Size=0x4
    struct _XMEDIA_VIDEO_FRAME::_unnamed_6813::<unnamed-type-i420> i420;// Offset=0xc Size=0x24
};

struct _XMEDIA_VIDEO_FRAME::_unnamed_6813::<unnamed-type-i420>// Size=0x24 (Id=6813)
{
    void * pvYBuffer;// Offset=0x0 Size=0x4
    void * pvUBuffer;// Offset=0x4 Size=0x4
    void * pvVBuffer;// Offset=0x8 Size=0x4
    unsigned long dwYBufferSize;// Offset=0xc Size=0x4
    unsigned long dwUBufferSize;// Offset=0x10 Size=0x4
    unsigned long dwVBufferSize;// Offset=0x14 Size=0x4
    unsigned long dwYPitch;// Offset=0x18 Size=0x4
    unsigned long dwUPitch;// Offset=0x1c Size=0x4
    unsigned long dwVPitch;// Offset=0x20 Size=0x4
};

struct BINKFRAMEPLANESET// Size=0x30 (Id=6814)
{
    struct BINKPLANE YPlane;// Offset=0x0 Size=0xc
    struct BINKPLANE cRPlane;// Offset=0xc Size=0xc
    struct BINKPLANE cBPlane;// Offset=0x18 Size=0xc
    struct BINKPLANE APlane;// Offset=0x24 Size=0xc
};

struct CinematicHunk// Size=0xc (Id=6815)
{
    void * base;// Offset=0x0 Size=0x4
    int atFront;// Offset=0x4 Size=0x4
    int end;// Offset=0x8 Size=0x4
};

struct BINK// Size=0x388 (Id=6816)
{
    unsigned int Width;// Offset=0x0 Size=0x4
    unsigned int Height;// Offset=0x4 Size=0x4
    unsigned int Frames;// Offset=0x8 Size=0x4
    unsigned int FrameNum;// Offset=0xc Size=0x4
    unsigned int LastFrameNum;// Offset=0x10 Size=0x4
    unsigned int FrameRate;// Offset=0x14 Size=0x4
    unsigned int FrameRateDiv;// Offset=0x18 Size=0x4
    unsigned int ReadError;// Offset=0x1c Size=0x4
    unsigned int OpenFlags;// Offset=0x20 Size=0x4
    unsigned int BinkType;// Offset=0x24 Size=0x4
    unsigned int Size;// Offset=0x28 Size=0x4
    unsigned int FrameSize;// Offset=0x2c Size=0x4
    unsigned int SndSize;// Offset=0x30 Size=0x4
    struct BINKRECT FrameRects[8];// Offset=0x34 Size=0x80
    int NumRects;// Offset=0xb4 Size=0x4
    struct BINKFRAMEBUFFERS * FrameBuffers;// Offset=0xb8 Size=0x4
    void * MaskPlane;// Offset=0xbc Size=0x4
    unsigned int MaskPitch;// Offset=0xc0 Size=0x4
    unsigned int MaskLength;// Offset=0xc4 Size=0x4
    unsigned int LargestFrameSize;// Offset=0xc8 Size=0x4
    unsigned int InternalFrames;// Offset=0xcc Size=0x4
    int NumTracks;// Offset=0xd0 Size=0x4
    unsigned int Highest1SecRate;// Offset=0xd4 Size=0x4
    unsigned int Highest1SecFrame;// Offset=0xd8 Size=0x4
    int Paused;// Offset=0xdc Size=0x4
    unsigned int BackgroundThread;// Offset=0xe0 Size=0x4
    void * compframe;// Offset=0xe4 Size=0x4
    void * preloadptr;// Offset=0xe8 Size=0x4
    unsigned int * frameoffsets;// Offset=0xec Size=0x4
    struct BINKIO bio;// Offset=0xf0 Size=0x144
    unsigned char * ioptr;// Offset=0x234 Size=0x4
    unsigned int iosize;// Offset=0x238 Size=0x4
    unsigned int decompwidth;// Offset=0x23c Size=0x4
    unsigned int decompheight;// Offset=0x240 Size=0x4
    int * trackindexes;// Offset=0x244 Size=0x4
    unsigned int * tracksizes;// Offset=0x248 Size=0x4
    unsigned int * tracktypes;// Offset=0x24c Size=0x4
    int * trackIDs;// Offset=0x250 Size=0x4
    unsigned int numrects;// Offset=0x254 Size=0x4
    unsigned int playedframes;// Offset=0x258 Size=0x4
    unsigned int firstframetime;// Offset=0x25c Size=0x4
    unsigned int startframetime;// Offset=0x260 Size=0x4
    unsigned int startblittime;// Offset=0x264 Size=0x4
    unsigned int startsynctime;// Offset=0x268 Size=0x4
    unsigned int startsyncframe;// Offset=0x26c Size=0x4
    unsigned int twoframestime;// Offset=0x270 Size=0x4
    unsigned int entireframetime;// Offset=0x274 Size=0x4
    unsigned int slowestframetime;// Offset=0x278 Size=0x4
    unsigned int slowestframe;// Offset=0x27c Size=0x4
    unsigned int slowest2frametime;// Offset=0x280 Size=0x4
    unsigned int slowest2frame;// Offset=0x284 Size=0x4
    unsigned int soundon;// Offset=0x288 Size=0x4
    unsigned int videoon;// Offset=0x28c Size=0x4
    unsigned int totalmem;// Offset=0x290 Size=0x4
    unsigned int timevdecomp;// Offset=0x294 Size=0x4
    unsigned int timeadecomp;// Offset=0x298 Size=0x4
    unsigned int timeblit;// Offset=0x29c Size=0x4
    unsigned int timeopen;// Offset=0x2a0 Size=0x4
    unsigned int fileframerate;// Offset=0x2a4 Size=0x4
    unsigned int fileframeratediv;// Offset=0x2a8 Size=0x4
    unsigned int runtimeframes;// Offset=0x2ac Size=0x4
    int rtindex;// Offset=0x2b0 Size=0x4
    unsigned int * rtframetimes;// Offset=0x2b4 Size=0x4
    unsigned int * rtadecomptimes;// Offset=0x2b8 Size=0x4
    unsigned int * rtvdecomptimes;// Offset=0x2bc Size=0x4
    unsigned int * rtblittimes;// Offset=0x2c0 Size=0x4
    unsigned int * rtreadtimes;// Offset=0x2c4 Size=0x4
    unsigned int * rtidlereadtimes;// Offset=0x2c8 Size=0x4
    unsigned int * rtthreadreadtimes;// Offset=0x2cc Size=0x4
    unsigned int lastblitflags;// Offset=0x2d0 Size=0x4
    unsigned int lastdecompframe;// Offset=0x2d4 Size=0x4
    unsigned int lastresynctime;// Offset=0x2d8 Size=0x4
    unsigned int doresync;// Offset=0x2dc Size=0x4
    unsigned int skipcount;// Offset=0x2e0 Size=0x4
    unsigned int toofewskipstomask;// Offset=0x2e4 Size=0x4
    unsigned int playingtracks;// Offset=0x2e8 Size=0x4
    unsigned int soundskips;// Offset=0x2ec Size=0x4
    struct BINKSND * bsnd;// Offset=0x2f0 Size=0x4
    unsigned int skippedlastblit;// Offset=0x2f4 Size=0x4
    unsigned int skipped_status_this_frame;// Offset=0x2f8 Size=0x4
    unsigned int very_delayed;// Offset=0x2fc Size=0x4
    unsigned int skippedblits;// Offset=0x300 Size=0x4
    struct BUNDLEPOINTERS bunp;// Offset=0x304 Size=0x24
    unsigned int skipped_in_a_row;// Offset=0x328 Size=0x4
    unsigned int paused_sync_diff;// Offset=0x32c Size=0x4
    unsigned int last_time_almost_empty;// Offset=0x330 Size=0x4
    unsigned int last_read_count;// Offset=0x334 Size=0x4
    unsigned int last_sound_count;// Offset=0x338 Size=0x4
    unsigned int snd_callback_buffer[16];// Offset=0x33c Size=0x40
    int allkeys;// Offset=0x37c Size=0x4
    unsigned int compframesize;// Offset=0x380 Size=0x4
    struct BINKFRAMEBUFFERS * allocatedframebuffers;// Offset=0x384 Size=0x4
};

struct BUNDLEPOINTERS// Size=0x24 (Id=6817)
{
    void * typeptr;// Offset=0x0 Size=0x4
    void * type16ptr;// Offset=0x4 Size=0x4
    void * colorptr;// Offset=0x8 Size=0x4
    void * bits2ptr;// Offset=0xc Size=0x4
    void * motionXptr;// Offset=0x10 Size=0x4
    void * motionYptr;// Offset=0x14 Size=0x4
    void * dctptr;// Offset=0x18 Size=0x4
    void * mdctptr;// Offset=0x1c Size=0x4
    void * patptr;// Offset=0x20 Size=0x4
};

struct BINKSND// Size=0x17c (Id=6818)
{
    int  ( * Ready)(struct BINKSND * );// Offset=0x0 Size=0x4
    int  ( * Lock)(struct BINKSND * ,unsigned char ** ,unsigned int * );// Offset=0x4 Size=0x4
    int  ( * Unlock)(struct BINKSND * ,unsigned int );// Offset=0x8 Size=0x4
    void  ( * Volume)(struct BINKSND * ,int );// Offset=0xc Size=0x4
    void  ( * Pan)(struct BINKSND * ,int );// Offset=0x10 Size=0x4
    int  ( * Pause)(struct BINKSND * ,int );// Offset=0x14 Size=0x4
    int  ( * SetOnOff)(struct BINKSND * ,int );// Offset=0x18 Size=0x4
    void  ( * Close)(struct BINKSND * );// Offset=0x1c Size=0x4
    void  ( * MixBins)(struct BINKSND * ,unsigned int * ,unsigned int );// Offset=0x20 Size=0x4
    void  ( * MixBinVols)(struct BINKSND * ,unsigned int * ,int * ,unsigned int );// Offset=0x24 Size=0x4
    unsigned int sndbufsize;// Offset=0x28 Size=0x4
    unsigned char * sndbuf;// Offset=0x2c Size=0x4
    unsigned char * sndend;// Offset=0x30 Size=0x4
    unsigned char * sndwritepos;// Offset=0x34 Size=0x4
    unsigned char * sndreadpos;// Offset=0x38 Size=0x4
    unsigned int sndcomp;// Offset=0x3c Size=0x4
    unsigned int sndamt;// Offset=0x40 Size=0x4
    unsigned int sndconvert8;// Offset=0x44 Size=0x4
    unsigned int sndendframe;// Offset=0x48 Size=0x4
    unsigned int sndprime;// Offset=0x4c Size=0x4
    unsigned int sndpad;// Offset=0x50 Size=0x4
    unsigned int BestSizeIn16;// Offset=0x54 Size=0x4
    unsigned int BestSizeMask;// Offset=0x58 Size=0x4
    unsigned int SoundDroppedOut;// Offset=0x5c Size=0x4
    int NoThreadService;// Offset=0x60 Size=0x4
    int OnOff;// Offset=0x64 Size=0x4
    unsigned int Latency;// Offset=0x68 Size=0x4
    unsigned int VideoScale;// Offset=0x6c Size=0x4
    unsigned int freq;// Offset=0x70 Size=0x4
    int bits;// Offset=0x74 Size=0x4
    int chans;// Offset=0x78 Size=0x4
    unsigned char snddata[256];// Offset=0x7c Size=0x100
};

class GfxSortCloudSurfsInterface// Size=0x1 (Id=6819)
{
    public unsigned int GetIncrement(union GfxCloudSurf * );
    public unsigned int GetMaterialSortedIndex(union GfxCloudSurf * );
};

enum GfxDrawSceneMethod
{
    GFX_DRAW_SCENE_NONE=0,
    GFX_DRAW_SCENE_FULLBRIGHT=1,
    GFX_DRAW_SCENE_DEBUGSHADER=2,
    GFX_DRAW_SCENE_STANDARD=3
};

struct GfxDrawMethod// Size=0x68 (Id=6821)
{
    enum GfxDrawSceneMethod drawScene;// Offset=0x0 Size=0x4
    enum MaterialTechniqueType baseTechType;// Offset=0x4 Size=0x4
    enum MaterialTechniqueType emissiveTechType;// Offset=0x8 Size=0x4
    unsigned char litTechType[13][7];// Offset=0xc Size=0x5b
};

struct GfxCodeSurfGlob// Size=0x48 (Id=6822)
{
    unsigned int surfCount;// Offset=0x0 Size=0x4
    unsigned int vertCount;// Offset=0x4 Size=0x4
    unsigned int indexCount;// Offset=0x8 Size=0x4
    unsigned int argsCount;// Offset=0xc Size=0x4
    struct GfxPackedVertex * verts;// Offset=0x10 Size=0x4
    unsigned short * indices;// Offset=0x14 Size=0x4
    struct GfxCodeSurf * codeSurfsMain;// Offset=0x18 Size=0x4
    unsigned int * codeSurfCountMain;// Offset=0x1c Size=0x4
    float * outCodeSurfArgsMain[4];// Offset=0x20 Size=0x4
    unsigned int surfLimit;// Offset=0x24 Size=0x4
    unsigned int vertLimit;// Offset=0x28 Size=0x4
    unsigned int indexLimit;// Offset=0x2c Size=0x4
    unsigned int argsLimit;// Offset=0x30 Size=0x4
    enum GfxWarningType surfLimitWarn;// Offset=0x34 Size=0x4
    enum GfxWarningType vertLimitWarn;// Offset=0x38 Size=0x4
    enum GfxWarningType indexLimitWarn;// Offset=0x3c Size=0x4
    enum GfxWarningType argsLimitWarn;// Offset=0x40 Size=0x4
    enum GfxCodeSurfListType surfList;// Offset=0x44 Size=0x4
};

class GfxSortCodeSurfsInterface// Size=0x1 (Id=6823)
{
    public unsigned int GetIncrement(struct GfxCodeSurf * );
    public unsigned int GetMaterialSortedIndex(struct GfxCodeSurf * );
};

struct GfxAabbTree// Size=0x28 (Id=6824)
{
    struct Bounds bounds;// Offset=0x0 Size=0x18
    unsigned short childCount;// Offset=0x18 Size=0x2
    unsigned short surfaceCount;// Offset=0x1a Size=0x2
    unsigned short startSurfIndex;// Offset=0x1c Size=0x2
    unsigned short smodelIndexCount;// Offset=0x1e Size=0x2
    unsigned short * smodelIndexes;// Offset=0x20 Size=0x4
    int childrenOffset;// Offset=0x24 Size=0x4
};

struct Sphere// Size=0x14 (Id=6825)
{
    float origin[3];// Offset=0x0 Size=0xc
    float radius;// Offset=0xc Size=0x4
    float radiusSq;// Offset=0x10 Size=0x4
};

struct DObjSkelMat// Size=0x40 (Id=6826)
{
    float axis[3][4];// Offset=0x0 Size=0x30
    float origin[4];// Offset=0x30 Size=0x10
};

struct GfxModelSurfaceInfo// Size=0x10 (Id=6827)
{
    struct DObjAnimMat * modelBasePoseMat;// Offset=0x0 Size=0x4
    unsigned char modelBoneIndex;// Offset=0x4 Size=0x1
    unsigned char modelBoneCount;// Offset=0x5 Size=0x1
    unsigned short gfxEntIndex;// Offset=0x6 Size=0x2
    unsigned short lightingHandle;// Offset=0x8 Size=0x2
    unsigned char __align0[2];// Offset=0xa Size=0x2
    union GfxColor ambientColor;// Offset=0xc Size=0x4
};

struct SkinXModelCmd// Size=0x20 (Id=6828)
{
    void * modelSurfs;// Offset=0x0 Size=0x4
    struct DObjAnimMat * mat;// Offset=0x4 Size=0x4
    int surfacePartBits[5];// Offset=0x8 Size=0x14
    unsigned short surfCount;// Offset=0x1c Size=0x2
};

enum _unnamed_6829
{
    DOBJ_MAX_SURFS=64,
    XMODEL_MAX_SURFS=128
};

enum _unnamed_6830
{
    CULL_STATE_OUT=0,
    CULL_STATE_BOUNDED_PENDING=1,
    CULL_STATE_BOUNDED=2,
    CULL_STATE_SKINNED_PENDING=3,
    CULL_STATE_DONE=4
};

struct GfxModelSkinnedSurface// Size=0x18 (Id=6831)
{
    struct GfxModelBaseSurface base;// Offset=0x0 Size=0x14
    struct XSurface * xsurf;// Offset=0x14 Size=0x4
};

struct GfxMatrix// Size=0x40 (Id=6832)
{
    float m[4][4];// Offset=0x0 Size=0x40
};

enum DpvsClipChildren
{
    DPVS_DONT_CLIP_CHILDREN=0,
    DPVS_CLIP_CHILDREN=1
};

enum DpvsForceBevels
{
    DPVS_DONT_FORCE_BEVELS=0,
    DPVS_FORCE_BEVELS=1
};

struct GfxPortal// Size=0x3c (Id=6835)
{
    struct GfxPortalWritable writable;// Offset=0x0 Size=0xc
    struct DpvsPlane plane;// Offset=0xc Size=0x10
    float * vertices[3];// Offset=0x1c Size=0x4
    unsigned short cellIndex;// Offset=0x20 Size=0x2
    unsigned char vertexCount;// Offset=0x22 Size=0x1
    unsigned char __align0[1];// Offset=0x23 Size=0x1
    float hullAxis[2][3];// Offset=0x24 Size=0x18
};

struct GfxCell// Size=0x28 (Id=6836)
{
    struct Bounds bounds;// Offset=0x0 Size=0x18
    int portalCount;// Offset=0x18 Size=0x4
    struct GfxPortal * portals;// Offset=0x1c Size=0x4
    unsigned char reflectionProbeCount;// Offset=0x20 Size=0x1
    unsigned char __align0[3];// Offset=0x21 Size=0x3
    unsigned char * reflectionProbes;// Offset=0x24 Size=0x4
};

struct FilterEntInfo// Size=0x10 (Id=6837)
{
    unsigned int localClientNum;// Offset=0x0 Size=0x4
    unsigned int entnum;// Offset=0x4 Size=0x4
    union GfxEntCellRefInfo info;// Offset=0x8 Size=0x4
    unsigned int cellOffset;// Offset=0xc Size=0x4
};

struct FilterEntInfo// Size=0x10 (Id=6838)
{
    unsigned int localClientNum;// Offset=0x0 Size=0x4
    unsigned int entnum;// Offset=0x4 Size=0x4
    union GfxEntCellRefInfo info;// Offset=0x8 Size=0x4
    unsigned int cellOffset;// Offset=0xc Size=0x4
};

struct DpvsDynamicCellCmd// Size=0xc (Id=6839)
{
    struct DpvsPlane * planes;// Offset=0x0 Size=0x4
    unsigned int cellIndex;// Offset=0x4 Size=0x4
    unsigned char planeCount;// Offset=0x8 Size=0x1
    unsigned char frustumPlaneCount;// Offset=0x9 Size=0x1
    unsigned short sceneViewType;// Offset=0xa Size=0x2
};

struct DpvsStaticCellCmd// Size=0xc (Id=6840)
{
    struct DpvsPlane * planes;// Offset=0x0 Size=0x4
    struct GfxAabbTree * tree;// Offset=0x4 Size=0x4
    unsigned char planeCount;// Offset=0x8 Size=0x1
    unsigned char frustumPlaneCount;// Offset=0x9 Size=0x1
    unsigned short sceneViewType;// Offset=0xa Size=0x2
};

enum _unnamed_6841
{
    FX_STATUS_REF_COUNT_MASK=8191,
    FX_STATUS_DONT_REWIND=8192,
    FX_STATUS_DONT_DRAW=16384,
    FX_STATUS_HAS_PENDING_LOOP_ELEMS=32768,
    FX_STATUS_OWNED_EFFECTS_SHIFT=16,
    FX_STATUS_OWNED_EFFECTS_MASK=67043328,
    FX_STATUS_DEFER_UPDATE=67108864,
    FX_STATUS_SELF_OWNED=134217728,
    FX_STATUS_ACTIVE_CLIENT0=268435456,
    FX_STATUS_ACTIVE_CLIENT1=536870912,
    FX_STATUS_IS_LOCKED=1073741824,
    FX_STATUS_IS_LOCKED_MASK=-1073741824
};

enum _unnamed_6842
{
    VISDATA_UNKNOWN=0,
    VISDATA_VISIBLE=1,
    VISDATA_CULL_OUT=2
};

struct clipMap_t// Size=0x100 (Id=6843)
{
    char * name;// Offset=0x0 Size=0x4
    int isInUse;// Offset=0x4 Size=0x4
    int planeCount;// Offset=0x8 Size=0x4
    struct cplane_s * planes;// Offset=0xc Size=0x4
    unsigned int numStaticModels;// Offset=0x10 Size=0x4
    struct cStaticModel_s * staticModelList;// Offset=0x14 Size=0x4
    unsigned int numMaterials;// Offset=0x18 Size=0x4
    struct ClipMaterial * materials;// Offset=0x1c Size=0x4
    unsigned int numBrushSides;// Offset=0x20 Size=0x4
    struct cbrushside_t * brushsides;// Offset=0x24 Size=0x4
    unsigned int numBrushEdges;// Offset=0x28 Size=0x4
    unsigned char * brushEdges;// Offset=0x2c Size=0x4
    unsigned int numNodes;// Offset=0x30 Size=0x4
    struct cNode_t * nodes;// Offset=0x34 Size=0x4
    unsigned int numLeafs;// Offset=0x38 Size=0x4
    struct cLeaf_t * leafs;// Offset=0x3c Size=0x4
    unsigned int leafbrushNodesCount;// Offset=0x40 Size=0x4
    struct cLeafBrushNode_s * leafbrushNodes;// Offset=0x44 Size=0x4
    unsigned int numLeafBrushes;// Offset=0x48 Size=0x4
    unsigned short * leafbrushes;// Offset=0x4c Size=0x4
    unsigned int numLeafSurfaces;// Offset=0x50 Size=0x4
    unsigned int * leafsurfaces;// Offset=0x54 Size=0x4
    unsigned int vertCount;// Offset=0x58 Size=0x4
    float * verts[3];// Offset=0x5c Size=0x4
    int triCount;// Offset=0x60 Size=0x4
    unsigned short * triIndices;// Offset=0x64 Size=0x4
    unsigned char * triEdgeIsWalkable;// Offset=0x68 Size=0x4
    int borderCount;// Offset=0x6c Size=0x4
    struct CollisionBorder * borders;// Offset=0x70 Size=0x4
    int partitionCount;// Offset=0x74 Size=0x4
    struct CollisionPartition * partitions;// Offset=0x78 Size=0x4
    int aabbTreeCount;// Offset=0x7c Size=0x4
    struct CollisionAabbTree * aabbTrees;// Offset=0x80 Size=0x4
    unsigned int numSubModels;// Offset=0x84 Size=0x4
    struct cmodel_t * cmodels;// Offset=0x88 Size=0x4
    unsigned short numBrushes;// Offset=0x8c Size=0x2
    unsigned char __align0[2];// Offset=0x8e Size=0x2
    struct cbrush_t * brushes;// Offset=0x90 Size=0x4
    struct Bounds * brushBounds;// Offset=0x94 Size=0x4
    int * brushContents;// Offset=0x98 Size=0x4
    struct MapEnts * mapEnts;// Offset=0x9c Size=0x4
    unsigned short smodelNodeCount;// Offset=0xa0 Size=0x2
    unsigned char __align1[2];// Offset=0xa2 Size=0x2
    struct SModelAabbNode * smodelNodes;// Offset=0xa4 Size=0x4
    unsigned short dynEntCount[2];// Offset=0xa8 Size=0x4
    struct DynEntityDef * dynEntDefList[2];// Offset=0xac Size=0x8
    struct DynEntityPose * dynEntPoseList[2];// Offset=0xb4 Size=0x8
    struct DynEntityClient * dynEntClientList[2];// Offset=0xbc Size=0x8
    struct DynEntityColl * dynEntCollList[2];// Offset=0xc4 Size=0x8
    unsigned int checksum;// Offset=0xcc Size=0x4
};

struct <unnamed-type-dpvsGlob>// Size=0x8c50 (Id=6844)
{
    struct GfxMatrix viewProjMtx;// Offset=0x0 Size=0x40
    struct GfxMatrix invViewProjMtx;// Offset=0x40 Size=0x40
    struct DpvsPlane viewPlane;// Offset=0x80 Size=0x10
    struct DpvsPlane fogPlane;// Offset=0x90 Size=0x10
    struct DpvsPlane * nearPlane;// Offset=0xa0 Size=0x4
    struct DpvsPlane * farPlane;// Offset=0xa4 Size=0x4
    float viewOrg[4];// Offset=0xa8 Size=0x10
    int viewOrgIsDir;// Offset=0xb8 Size=0x4
    int queuedCount;// Offset=0xbc Size=0x4
    struct PortalHeapNode * portalQueue;// Offset=0xc0 Size=0x4
    union GfxHullPointsPool * nextFreeHullPoints;// Offset=0xc4 Size=0x4
    float cullDist;// Offset=0xc8 Size=0x4
    struct DpvsPlane childPlanes[2048];// Offset=0xcc Size=0x8000
    struct DpvsView views[4][3];// Offset=0x80cc Size=0xae0
    struct DpvsPlane * sideFrustumPlanes;// Offset=0x8bac Size=0x4
    unsigned int * entVisBits[4];// Offset=0x8bb0 Size=0x10
    unsigned int * cellBits;// Offset=0x8bc0 Size=0x4
    unsigned int cellVisibleBits[32];// Offset=0x8bc4 Size=0x80
};

struct FxSystem// Size=0xc40 (Id=6845)
{
    struct FxCamera camera;// Offset=0x0 Size=0xb0
    struct FxCamera cameraPrev;// Offset=0xb0 Size=0xb0
    int localClientCount;// Offset=0x160 Size=0x4
    struct FxCamera cameraPrevArray[2];// Offset=0x164 Size=0x160
    int cgameClientNum;// Offset=0x2c4 Size=0x4
    int pad[2];// Offset=0x2c8 Size=0x8
    struct FxSpriteInfo sprite;// Offset=0x2d0 Size=0x10
    struct FxEffect * effects;// Offset=0x2e0 Size=0x4
    struct FxPool<FxElem> * elems;// Offset=0x2e4 Size=0x4
    struct FxPool<FxTrail> * trails;// Offset=0x2e8 Size=0x4
    struct FxPool<FxTrailElem> * trailElems;// Offset=0x2ec Size=0x4
    struct FxPool<FxBolt> * bolts;// Offset=0x2f0 Size=0x4
    struct FxPool<FxSparkCloud> * sparkClouds;// Offset=0x2f4 Size=0x4
    struct FxPool<FxSparkFountain> * sparkFountains;// Offset=0x2f8 Size=0x4
    struct FxPool<FxSparkFountainCluster> * sparkFountainClusters;// Offset=0x2fc Size=0x4
    unsigned short * deferredElems;// Offset=0x300 Size=0x4
    long firstFreeElem;// Offset=0x304 Size=0x4
    long firstFreeTrailElem;// Offset=0x308 Size=0x4
    long firstFreeTrail;// Offset=0x30c Size=0x4
    long firstFreeBolt;// Offset=0x310 Size=0x4
    long firstFreeSparkCloud;// Offset=0x314 Size=0x4
    long firstFreeSparkFountain;// Offset=0x318 Size=0x4
    long firstFreeSparkFountainCluster;// Offset=0x31c Size=0x4
    long deferredElemCount;// Offset=0x320 Size=0x4
    long activeElemCount;// Offset=0x324 Size=0x4
    long activeTrailElemCount;// Offset=0x328 Size=0x4
    long activeTrailCount;// Offset=0x32c Size=0x4
    long activeBoltCount;// Offset=0x330 Size=0x4
    long activeSparkCloudCount;// Offset=0x334 Size=0x4
    long activeSparkFountainCount;// Offset=0x338 Size=0x4
    long activeSparkFountainClusterCount;// Offset=0x33c Size=0x4
    long gfxCloudCount;// Offset=0x340 Size=0x4
    struct FxVisState * visState;// Offset=0x344 Size=0x4
    struct FxVisState * visStateBufferRead;// Offset=0x348 Size=0x4
    struct FxVisState * visStateBufferWrite;// Offset=0x34c Size=0x4
    long firstActiveEffect;// Offset=0x350 Size=0x4
    long firstNewEffect;// Offset=0x354 Size=0x4
    long firstFreeEffect;// Offset=0x358 Size=0x4
    unsigned short allEffectHandles[1024];// Offset=0x35c Size=0x800
    long activeSpotLightEffectCount;// Offset=0xb5c Size=0x4
    long activeSpotLightElemCount;// Offset=0xb60 Size=0x4
    unsigned short activeSpotLightEffectHandle;// Offset=0xb64 Size=0x2
    unsigned short activeSpotLightElemHandle;// Offset=0xb66 Size=0x2
    short activeSpotLightBoltDobj;// Offset=0xb68 Size=0x2
    unsigned char __align0[2];// Offset=0xb6a Size=0x2
    long iteratorCount;// Offset=0xb6c Size=0x4
    int msecNow;// Offset=0xb70 Size=0x4
    long msecDraw;// Offset=0xb74 Size=0x4
    int frameCount;// Offset=0xb78 Size=0x4
    bool isInitialized;// Offset=0xb7c Size=0x1
    bool needsGarbageCollection;// Offset=0xb7d Size=0x1
    bool isArchiving;// Offset=0xb7e Size=0x1
    unsigned char localClientNum;// Offset=0xb7f Size=0x1
    unsigned int restartList[32];// Offset=0xb80 Size=0x80
    struct FxEffect ** restartEffectsList;// Offset=0xc00 Size=0x4
    unsigned int restartCount;// Offset=0xc04 Size=0x4
    unsigned int pad1[14];// Offset=0xc08 Size=0x38
};

struct FxBolt// Size=0x20 (Id=6846)
{
    union // Size=0x4 (Id=0)
    {
        const int HANDLE_SCALE;// Offset=0x0 Size=0x4
        const int POOL_SIZE;// Offset=0x0 Size=0x4
        struct // Size=0x4 (Id=0)
        {
            unsigned int dobjHandle:12;// Offset=0x0 Size=0x4 BitOffset=0x14 BitSize=0xc
            unsigned int temporalBits:2;// Offset=0x0 Size=0x4 BitOffset=0x12 BitSize=0x2
            unsigned int boneIndex:10;// Offset=0x0 Size=0x4 BitOffset=0x8 BitSize=0xa
            unsigned int unused:8;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0x8
        };
    };
    struct FxSpatialFrame offset;// Offset=0x4 Size=0x1c
};

struct BModelSurface// Size=0x8 (Id=6847)
{
    struct GfxPlacement * placement;// Offset=0x0 Size=0x4
    struct GfxSurface * surf;// Offset=0x4 Size=0x4
};

union GfxHullPointsPool// Size=0x200 (Id=6848)
{
    union GfxHullPointsPool * nextFree;// Offset=0x0 Size=0x4
    float points[64][2];// Offset=0x0 Size=0x200
};

struct DpvsView// Size=0xe8 (Id=6849)
{
    unsigned int renderFxFlagsCull;// Offset=0x0 Size=0x4
    struct DpvsPlane frustumPlanes[14];// Offset=0x4 Size=0xe0
    int frustumPlaneCount;// Offset=0xe4 Size=0x4
};

struct PortalHeapNode// Size=0x8 (Id=6850)
{
    struct GfxPortal * portal;// Offset=0x0 Size=0x4
    float dist;// Offset=0x4 Size=0x4
};

struct clipMap_t// Size=0x100 (Id=6851)
{
    char * name;// Offset=0x0 Size=0x4
    int isInUse;// Offset=0x4 Size=0x4
    int planeCount;// Offset=0x8 Size=0x4
    struct cplane_s * planes;// Offset=0xc Size=0x4
    unsigned int numStaticModels;// Offset=0x10 Size=0x4
    struct cStaticModel_s * staticModelList;// Offset=0x14 Size=0x4
    unsigned int numMaterials;// Offset=0x18 Size=0x4
    struct ClipMaterial * materials;// Offset=0x1c Size=0x4
    unsigned int numBrushSides;// Offset=0x20 Size=0x4
    struct cbrushside_t * brushsides;// Offset=0x24 Size=0x4
    unsigned int numBrushEdges;// Offset=0x28 Size=0x4
    unsigned char * brushEdges;// Offset=0x2c Size=0x4
    unsigned int numNodes;// Offset=0x30 Size=0x4
    struct cNode_t * nodes;// Offset=0x34 Size=0x4
    unsigned int numLeafs;// Offset=0x38 Size=0x4
    struct cLeaf_t * leafs;// Offset=0x3c Size=0x4
    unsigned int leafbrushNodesCount;// Offset=0x40 Size=0x4
    struct cLeafBrushNode_s * leafbrushNodes;// Offset=0x44 Size=0x4
    unsigned int numLeafBrushes;// Offset=0x48 Size=0x4
    unsigned short * leafbrushes;// Offset=0x4c Size=0x4
    unsigned int numLeafSurfaces;// Offset=0x50 Size=0x4
    unsigned int * leafsurfaces;// Offset=0x54 Size=0x4
    unsigned int vertCount;// Offset=0x58 Size=0x4
    float * verts[3];// Offset=0x5c Size=0x4
    int triCount;// Offset=0x60 Size=0x4
    unsigned short * triIndices;// Offset=0x64 Size=0x4
    unsigned char * triEdgeIsWalkable;// Offset=0x68 Size=0x4
    int borderCount;// Offset=0x6c Size=0x4
    struct CollisionBorder * borders;// Offset=0x70 Size=0x4
    int partitionCount;// Offset=0x74 Size=0x4
    struct CollisionPartition * partitions;// Offset=0x78 Size=0x4
    int aabbTreeCount;// Offset=0x7c Size=0x4
    struct CollisionAabbTree * aabbTrees;// Offset=0x80 Size=0x4
    unsigned int numSubModels;// Offset=0x84 Size=0x4
    struct cmodel_t * cmodels;// Offset=0x88 Size=0x4
    unsigned short numBrushes;// Offset=0x8c Size=0x2
    unsigned char __align0[2];// Offset=0x8e Size=0x2
    struct cbrush_t * brushes;// Offset=0x90 Size=0x4
    struct Bounds * brushBounds;// Offset=0x94 Size=0x4
    int * brushContents;// Offset=0x98 Size=0x4
    struct MapEnts * mapEnts;// Offset=0x9c Size=0x4
    unsigned short smodelNodeCount;// Offset=0xa0 Size=0x2
    unsigned char __align1[2];// Offset=0xa2 Size=0x2
    struct SModelAabbNode * smodelNodes;// Offset=0xa4 Size=0x4
    unsigned short dynEntCount[2];// Offset=0xa8 Size=0x4
    struct DynEntityDef * dynEntDefList[2];// Offset=0xac Size=0x8
    struct DynEntityPose * dynEntPoseList[2];// Offset=0xb4 Size=0x8
    struct DynEntityClient * dynEntClientList[2];// Offset=0xbc Size=0x8
    struct DynEntityColl * dynEntCollList[2];// Offset=0xc4 Size=0x8
    unsigned int checksum;// Offset=0xcc Size=0x4
};

struct DpvsEntityCmd// Size=0x10 (Id=6852)
{
    struct GfxSceneEntity * sceneEnt;// Offset=0x0 Size=0x4
    struct DpvsPlane * planes;// Offset=0x4 Size=0x4
    unsigned short planeCount;// Offset=0x8 Size=0x2
    unsigned short cellIndex;// Offset=0xa Size=0x2
    unsigned char * entVisData;// Offset=0xc Size=0x4
};

struct SpuArrayIteratorLookup<unsigned char>// Size=0x8 (Id=6853)
{
    unsigned char * entry;// Offset=0x0 Size=0x4
    unsigned int index;// Offset=0x4 Size=0x4
};

struct DpvsClipPlaneSet// Size=0x44 (Id=6854)
{
    struct DpvsClipPlane * planes[16];// Offset=0x0 Size=0x40
    unsigned int count;// Offset=0x40 Size=0x4
};

struct DpvsClipPlane// Size=0x20 (Id=6855)
{
    struct __vector4 coeffs;// Offset=0x0 Size=0x10
    struct __vector4 signs;// Offset=0x10 Size=0x10
};

struct DpvsClipPlaneSet// Size=0x44 (Id=6856)
{
    struct DpvsClipPlane * planes[16];// Offset=0x0 Size=0x40
    unsigned int count;// Offset=0x40 Size=0x4
};

struct DpvsStaticCellCmd// Size=0xc (Id=6857)
{
    struct DpvsPlane * planes;// Offset=0x0 Size=0x4
    struct GfxAabbTree * tree;// Offset=0x4 Size=0x4
    unsigned char planeCount;// Offset=0x8 Size=0x1
    unsigned char frustumPlaneCount;// Offset=0x9 Size=0x1
    unsigned short sceneViewType;// Offset=0xa Size=0x2
};

struct DpvsClipPlane// Size=0x20 (Id=6858)
{
    struct __vector4 coeffs;// Offset=0x0 Size=0x10
    struct __vector4 signs;// Offset=0x10 Size=0x10
};

struct DpvsPlanes// Size=0x8 (Id=6859)
{
    struct DpvsPlane * planes;// Offset=0x0 Size=0x4
    int count;// Offset=0x4 Size=0x4
};

struct srfTriangles_t// Size=0x10 (Id=6860)
{
    unsigned int vertexLayerData;// Offset=0x0 Size=0x4
    unsigned int firstVertex;// Offset=0x4 Size=0x4
    unsigned short vertexCount;// Offset=0x8 Size=0x2
    unsigned short triCount;// Offset=0xa Size=0x2
    unsigned int baseIndex;// Offset=0xc Size=0x4
};

struct GfxDrawPrimArgs// Size=0xc (Id=6861)
{
    int vertexCount;// Offset=0x0 Size=0x4
    int triCount;// Offset=0x4 Size=0x4
    int baseIndex;// Offset=0x8 Size=0x4
};

struct GfxTrianglesDrawStream// Size=0x18 (Id=6862)
{
    struct GfxBspSurfIter * bspSurfIter;// Offset=0x0 Size=0x4
    union GfxTexture * reflectionProbeTexture;// Offset=0x4 Size=0x4
    union GfxTexture * lightmapPrimaryTexture;// Offset=0x8 Size=0x4
    union GfxTexture * lightmapSecondaryTexture;// Offset=0xc Size=0x4
    unsigned int customSamplerFlags;// Offset=0x10 Size=0x4
    struct GfxCmdRingBuf * cmdBuf;// Offset=0x14 Size=0x4
};

enum _unnamed_6863
{
    CUSTOM_SAMPLER_REFLECTION_PROBE=0,
    CUSTOM_SAMPLER_LIGHTMAP_PRIMARY=1,
    CUSTOM_SAMPLER_LIGHTMAP_SECONDARY=2,
    CUSTOM_SAMPLER_COUNT=3
};

struct DrawWorkerCmd// Size=0xc (Id=6864)
{
    struct GfxBackEndData * data;// Offset=0x0 Size=0x4
    struct GfxViewInfo * viewInfo;// Offset=0x4 Size=0x4
    unsigned int drawListType;// Offset=0x8 Size=0x4
};

enum _unnamed_6865
{
    MTL_PREPASS_STANDARD=0,
    MTL_PREPASS_ALPHA=1,
    MTL_PREPASS_FLOATZ=2,
    MTL_PREPASS_NONE=3,
    MTL_PREPASS_TYPECOUNT=4
};

struct GfxLightScale// Size=0x8 (Id=6866)
{
    float diffuseScale;// Offset=0x0 Size=0x4
    float specularScale;// Offset=0x4 Size=0x4
};

struct GfxLightDef// Size=0x10 (Id=6867)
{
    char * name;// Offset=0x0 Size=0x4
    struct GfxLightImage attenuation;// Offset=0x4 Size=0x8
    int lmapLookupStart;// Offset=0xc Size=0x4
};

enum LightHasShadowMap
{
    LIGHT_HAS_SHADOWMAP=0,
    LIGHT_HAS_NO_SHADOWMAP=1
};

struct GfxStaticModelDrawStream// Size=0x34 (Id=6869)
{
    struct GfxSModelSurfIter * smodelSurfIter;// Offset=0x0 Size=0x4
    unsigned int precompiledIndex;// Offset=0x4 Size=0x4
    float eyeOffset[3];// Offset=0x8 Size=0xc
    union GfxSModelSurfHeader smodelSurfHeader;// Offset=0x14 Size=0x4
    unsigned char * smodelSurfVisData;// Offset=0x18 Size=0x4
    union GfxTexture * reflectionProbeTexture;// Offset=0x1c Size=0x4
    unsigned int customSamplerFlags;// Offset=0x20 Size=0x4
    struct XSurface * localSurf;// Offset=0x24 Size=0x4
    unsigned int smodelCount;// Offset=0x28 Size=0x4
    unsigned short * smodelList;// Offset=0x2c Size=0x4
    struct GfxCmdRingBuf * cmdBuf;// Offset=0x30 Size=0x4
};

enum _unnamed_6870
{
    VERTEX_SHADER_NONE=0,
    VERTEX_SHADER_MODEL_LIT=1,
    VERTEX_SHADER_MODEL_UNLIT=2,
    VERTEX_SHADER_MODEL_AMBIENT=3
};

struct GfxSModelRigidNoSunShadowsSurfIter : public GfxSModelRigidSurfIter// Size=0x10 (Id=6871)
{
    struct GfxSModelRigidNoSunShadowsSurfIter * GetSurfIter(struct GfxDrawListIter * );
    union GfxDrawGroupSetup GetDrawGroupSetup(struct GfxSModelRigidNoSunShadowsSurfIter * );
    void Terminate(struct GfxSModelRigidNoSunShadowsSurfIter * );
};

class GfxSModelArrayCallback_NoPrepass// Size=0x1 (Id=6872)
{
    public void Callback(struct GfxStaticModelDrawStream * ,struct GfxCmdBufPrimState * );
};

struct GfxSunShadowPartition// Size=0x160 (Id=6873)
{
    struct GfxViewportParms viewportParms;// Offset=0x0 Size=0x160
};

struct SunShadowMapUserData// Size=0x18 (Id=6874)
{
    unsigned int partitionIndex;// Offset=0x0 Size=0x4
    struct GfxSunShadowPartition * partition;// Offset=0x4 Size=0x4
    struct GfxDrawList * drawList;// Offset=0x8 Size=0x4
    unsigned int resolution;// Offset=0xc Size=0x4
    enum GfxRenderTargetId renderTargetId;// Offset=0x10 Size=0x4
    struct GfxBackEndData * data;// Offset=0x14 Size=0x4
};

struct GfxModelRigidChildSurface// Size=0x20 (Id=6875)
{
    struct GfxPlacement placement;// Offset=0x0 Size=0x1c
    unsigned short triOffset;// Offset=0x1c Size=0x2
    unsigned short triCount;// Offset=0x1e Size=0x2
};

struct GfxDrawListArgs// Size=0xc (Id=6876)
{
    struct GfxCmdBufContext context;// Offset=0x0 Size=0x8
    struct GfxDrawListInfo * listInfo;// Offset=0x8 Size=0x4
};

struct GfxXModelDrawStream// Size=0x28 (Id=6877)
{
    struct GfxDrawSurfIter * drawSurfIter;// Offset=0x0 Size=0x4
    unsigned int precompiledIndex;// Offset=0x4 Size=0x4
    union GfxTexture * reflectionProbeTexture;// Offset=0x8 Size=0x4
    unsigned int customSamplerFlags;// Offset=0xc Size=0x4
    float eyeOffset[3];// Offset=0x10 Size=0xc
    struct GfxBackEndData * data;// Offset=0x1c Size=0x4
    struct XSurface * localSurf;// Offset=0x20 Size=0x4
    struct GfxCmdRingBuf * cmdBuf;// Offset=0x24 Size=0x4
};

struct std::pair<GfxSurface *,GfxSurface *>// Size=0x8 (Id=6878)
{
    void pair<GfxSurface *,GfxSurface *>(struct GfxSurface &** ,struct GfxSurface &** );
    void pair<GfxSurface *,GfxSurface *>();
    void swap(struct std::pair<GfxSurface *,GfxSurface *> & );
    struct GfxSurface * first;// Offset=0x0 Size=0x4
    struct GfxSurface * second;// Offset=0x4 Size=0x4
};

struct GfxSortDrawSurfsInterface// Size=0x1 (Id=6879)
{
    unsigned long long GetSortKey(union GfxDrawSurf );
};

enum _unnamed_6880
{
    R_COLOR_OVERRIDE_BLACK=0,
    R_COLOR_OVERRIDE_NONE=1,
    R_COLOR_OVERRIDE_WHITE=2,
    R_COLOR_OVERRIDE_GRAY=3,
    R_COLOR_OVERRIDE_COUNT=4
};

enum _unnamed_6881
{
    R_NORMAL_OVERRIDE_FLAT=0,
    R_NORMAL_OVERRIDE_NONE=1,
    R_NORMAL_OVERRIDE_COUNT=2
};

enum _unnamed_6882
{
    R_DETAIL_OVERRIDE_HIDE=0,
    R_DETAIL_OVERRIDE_NONE=1,
    R_DETAIL_OVERRIDE_COUNT=2
};

enum _unnamed_6883
{
    R_FB_COLOR_DEBUG_NONE=0,
    R_FB_COLOR_DEBUG_SCREEN=1,
    R_FB_COLOR_DEBUG_FEEDBACK=2,
    R_FB_COLOR_DEBUG_COUNT=3
};

enum _unnamed_6884
{
    R_DEBUGSHADER_NONE=0,
    R_DEBUGSHADER_TEXTURE=1,
    R_DEBUGSHADER_TANGENT=2,
    R_DEBUGSHADER_BINORMAL=3,
    R_DEBUGSHADER_NORMAL=4,
    R_DEBUGSHADER_COUNT=5
};

enum _unnamed_6885
{
    R_GPU_SYNC_OFF=0,
    R_GPU_SYNC_ADAPTIVE=1,
    R_GPU_SYNC_AGGRESSIVE=2,
    R_GPU_SYNC_COUNT=3
};

enum _unnamed_6886
{
    R_CLEAR_NEVER=0,
    R_CLEAR_DEV_ONLY_BLINK=1,
    R_CLEAR_BLINK=2,
    R_CLEAR_STEADY=3,
    R_CLEAR_FOG_COLOR=4,
    R_CLEAR_COUNT=5
};

enum _unnamed_6887
{
    GFX_SHOW_PIXEL_COST_OFF=0,
    GFX_SHOW_PIXEL_COST_TIMING_ONLY=1,
    GFX_SHOW_PIXEL_COST_USE_DEPTH=2,
    GFX_SHOW_PIXEL_COST_IGNORE_DEPTH=3,
    GFX_SHOW_PIXEL_COST_COUNT=4
};

enum _unnamed_6888
{
    R_MIP_FILTER_UNCHANGED=0,
    R_MIP_FILTER_FORCE_LINEAR=1,
    R_MIP_FILTER_FORCE_NEAREST=2,
    R_MIP_FILTER_FORCE_NO_MIPS=3,
    R_MIP_FILTER_COUNT=4
};

struct Glyph// Size=0x18 (Id=6889)
{
    unsigned short letter;// Offset=0x0 Size=0x2
    char x0;// Offset=0x2 Size=0x1
    char y0;// Offset=0x3 Size=0x1
    unsigned char dx;// Offset=0x4 Size=0x1
    unsigned char pixelWidth;// Offset=0x5 Size=0x1
    unsigned char pixelHeight;// Offset=0x6 Size=0x1
    unsigned char __align0[1];// Offset=0x7 Size=0x1
    float s0;// Offset=0x8 Size=0x4
    float t0;// Offset=0xc Size=0x4
    float s1;// Offset=0x10 Size=0x4
    float t1;// Offset=0x14 Size=0x4
};

struct <unnamed-type-g_glassVertGlob>// Size=0x14 (Id=6890)
{
    unsigned int surfCount;// Offset=0x0 Size=0x4
    unsigned int vertCount;// Offset=0x4 Size=0x4
    unsigned int indexCount;// Offset=0x8 Size=0x4
    struct GfxPackedVertex * verts;// Offset=0xc Size=0x4
    unsigned short * indices;// Offset=0x10 Size=0x4
};

class GfxSortGlassSurfsInterface// Size=0x1 (Id=6891)
{
    public unsigned int GetMaterialSortedIndex(struct GfxGlassSurf * );
};

struct GfxSortSurfBin// Size=0x8 (Id=6892)
{
    unsigned short mtlSortIndex;// Offset=0x0 Size=0x2
    unsigned short first;// Offset=0x2 Size=0x2
    unsigned int last;// Offset=0x4 Size=0x4
};

enum _unnamed_6893
{
    IMG_FLAG_NOPICMIP=1,
    IMG_FLAG_NOMIPMAPS=2,
    IMG_FLAG_STREAMING=4,
    IMG_FLAG_LEGACY_NORMALS=8,
    IMG_FLAG_CLAMP_U=16,
    IMG_FLAG_CLAMP_V=32,
    IMG_FLAG_ALPHA_WEIGHTED_COLORS=64,
    IMG_FLAG_DXTC_APPROX_WEIGHTS=128,
    IMG_FLAG_GAMMA_NONE=0,
    IMG_FLAG_GAMMA_SRGB=256,
    IMG_FLAG_GAMMA_PWL=512,
    IMG_FLAG_GAMMA_2=768,
    IMG_FLAG_MAPTYPE_2D=0,
    IMG_FLAG_MAPTYPE_CUBE=65536,
    IMG_FLAG_MAPTYPE_3D=131072,
    IMG_FLAG_MAPTYPE_1D=196608,
    IMG_FLAG_NORMALMAP=262144,
    IMG_FLAG_INTENSITY_TO_ALPHA=524288,
    IMG_FLAG_DYNAMIC=16777216,
    IMG_FLAG_RENDER_TARGET=33554432
};

enum _unnamed_6894
{
    IMAGE_PROG_SHADOWMAP_LARGE=0,
    IMAGE_PROG_SHADOWMAP_SMALL=1,
    IMAGE_PROG_FLOATZ=2,
    IMAGE_PROG_HALF_PARTICLES=3,
    IMAGE_PROG_HALF_PARTICLES_Z=4,
    IMAGE_PROG_POST_EFFECT_0=5,
    IMAGE_PROG_POST_EFFECT_1=6,
    IMAGE_PROG_RESOLVED_SCENE=7,
    IMAGE_PROG_HALF_RESAMPLED_SCENE=8,
    IMAGE_PROG_SAVEDSCREEN=9,
    IMAGE_PROG_MODEL_LIGHTING=10,
    IMAGE_PROG_COUNT=11
};

struct GfxImageCache// Size=0x12600 (Id=6895)
{
    struct GfxImageEntry imageEntries[3584];// Offset=0x0 Size=0xa800
    struct GfxUnusedEntry unusedEntries[3584];// Offset=0xa800 Size=0x7000
    struct GfxDmaEntry imageDmaEntries[256];// Offset=0x11800 Size=0xc00
    unsigned int imageUpdateEntries[112];// Offset=0x12400 Size=0x1c0
    unsigned int imageEntryCount;// Offset=0x125c0 Size=0x4
    unsigned int unusedEntryCount;// Offset=0x125c4 Size=0x4
    int imageUpdateEntrySet;// Offset=0x125c8 Size=0x4
    unsigned int imageDmaEntryCount;// Offset=0x125cc Size=0x4
    unsigned int unusedMemorySize;// Offset=0x125d0 Size=0x4
    int waitImageFence;// Offset=0x125d4 Size=0x4
};

struct GfxDmaEntry// Size=0xc (Id=6896)
{
    unsigned char * dst;// Offset=0x0 Size=0x4
    unsigned char * src;// Offset=0x4 Size=0x4
    unsigned int size;// Offset=0x8 Size=0x4
};

struct GfxUnusedEntry// Size=0x8 (Id=6897)
{
    unsigned char * begin;// Offset=0x0 Size=0x4
    unsigned char * end;// Offset=0x4 Size=0x4
};

struct GfxImageEntry// Size=0xc (Id=6898)
{
    unsigned char * begin;// Offset=0x0 Size=0x4
    unsigned char * end;// Offset=0x4 Size=0x4
    struct GfxImage * image;// Offset=0x8 Size=0x4
};

struct GfxWindowParms// Size=0x1c (Id=6899)
{
    bool isWideScreen;// Offset=0x0 Size=0x1
    bool isHiDef;// Offset=0x1 Size=0x1
    unsigned char __align0[2];// Offset=0x2 Size=0x2
    float hz;// Offset=0x4 Size=0x4
    int sceneWidth;// Offset=0x8 Size=0x4
    int sceneHeight;// Offset=0xc Size=0x4
    int displayWidth;// Offset=0x10 Size=0x4
    int displayHeight;// Offset=0x14 Size=0x4
    int aaSamples;// Offset=0x18 Size=0x4
};

struct GfxGammaRamp// Size=0x200 (Id=6900)
{
    unsigned short entries[256];// Offset=0x0 Size=0x200
};

struct GfxConfiguration// Size=0x24 (Id=6901)
{
    bool inited;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    unsigned int maxClientViews;// Offset=0x4 Size=0x4
    unsigned int entCount;// Offset=0x8 Size=0x4
    unsigned int entnumNone;// Offset=0xc Size=0x4
    unsigned int entnumOrdinaryEnd;// Offset=0x10 Size=0x4
    int threadContextCount;// Offset=0x14 Size=0x4
    int critSectCount;// Offset=0x18 Size=0x4
    bool defaultFullscreen;// Offset=0x1c Size=0x1
    unsigned char __align1[1];// Offset=0x1d Size=0x1
    unsigned short defaultFullscreenFlags;// Offset=0x1e Size=0x2
    int defaultMode;// Offset=0x20 Size=0x4
};

struct GfxWindowParms// Size=0x1c (Id=6902)
{
    bool isWideScreen;// Offset=0x0 Size=0x1
    bool isHiDef;// Offset=0x1 Size=0x1
    unsigned char __align0[2];// Offset=0x2 Size=0x2
    float hz;// Offset=0x4 Size=0x4
    int sceneWidth;// Offset=0x8 Size=0x4
    int sceneHeight;// Offset=0xc Size=0x4
    int displayWidth;// Offset=0x10 Size=0x4
    int displayHeight;// Offset=0x14 Size=0x4
    int aaSamples;// Offset=0x18 Size=0x4
};

struct GfxAssets// Size=0x4 (Id=6903)
{
    struct D3DQuery * pixelCountQuery;// Offset=0x0 Size=0x4
};

struct std::pair<float *,float *>// Size=0x8 (Id=6904)
{
    void pair<float *,float *>(float &** ,float &** );
    void pair<float *,float *>();
    void swap(struct std::pair<float *,float *> & );
    float * first;// Offset=0x0 Size=0x4
    float * second;// Offset=0x4 Size=0x4
};

struct BspOmniLightCallback// Size=0x4 (Id=6905)
{
    unsigned char * surfaceVisData;// Offset=0x0 Size=0x4
};

struct BspSpotLightCallback// Size=0x64 (Id=6906)
{
    unsigned char * surfaceVisData;// Offset=0x0 Size=0x4
    float planes[6][4];// Offset=0x4 Size=0x60
};

struct StaticModelLightCallback// Size=0x64 (Id=6907)
{
    unsigned char * smodelVisData;// Offset=0x0 Size=0x4
    float planes[6][4];// Offset=0x4 Size=0x60
};

struct clipMap_t// Size=0x100 (Id=6908)
{
    char * name;// Offset=0x0 Size=0x4
    int isInUse;// Offset=0x4 Size=0x4
    int planeCount;// Offset=0x8 Size=0x4
    struct cplane_s * planes;// Offset=0xc Size=0x4
    unsigned int numStaticModels;// Offset=0x10 Size=0x4
    struct cStaticModel_s * staticModelList;// Offset=0x14 Size=0x4
    unsigned int numMaterials;// Offset=0x18 Size=0x4
    struct ClipMaterial * materials;// Offset=0x1c Size=0x4
    unsigned int numBrushSides;// Offset=0x20 Size=0x4
    struct cbrushside_t * brushsides;// Offset=0x24 Size=0x4
    unsigned int numBrushEdges;// Offset=0x28 Size=0x4
    unsigned char * brushEdges;// Offset=0x2c Size=0x4
    unsigned int numNodes;// Offset=0x30 Size=0x4
    struct cNode_t * nodes;// Offset=0x34 Size=0x4
    unsigned int numLeafs;// Offset=0x38 Size=0x4
    struct cLeaf_t * leafs;// Offset=0x3c Size=0x4
    unsigned int leafbrushNodesCount;// Offset=0x40 Size=0x4
    struct cLeafBrushNode_s * leafbrushNodes;// Offset=0x44 Size=0x4
    unsigned int numLeafBrushes;// Offset=0x48 Size=0x4
    unsigned short * leafbrushes;// Offset=0x4c Size=0x4
    unsigned int numLeafSurfaces;// Offset=0x50 Size=0x4
    unsigned int * leafsurfaces;// Offset=0x54 Size=0x4
    unsigned int vertCount;// Offset=0x58 Size=0x4
    float * verts[3];// Offset=0x5c Size=0x4
    int triCount;// Offset=0x60 Size=0x4
    unsigned short * triIndices;// Offset=0x64 Size=0x4
    unsigned char * triEdgeIsWalkable;// Offset=0x68 Size=0x4
    int borderCount;// Offset=0x6c Size=0x4
    struct CollisionBorder * borders;// Offset=0x70 Size=0x4
    int partitionCount;// Offset=0x74 Size=0x4
    struct CollisionPartition * partitions;// Offset=0x78 Size=0x4
    int aabbTreeCount;// Offset=0x7c Size=0x4
    struct CollisionAabbTree * aabbTrees;// Offset=0x80 Size=0x4
    unsigned int numSubModels;// Offset=0x84 Size=0x4
    struct cmodel_t * cmodels;// Offset=0x88 Size=0x4
    unsigned short numBrushes;// Offset=0x8c Size=0x2
    unsigned char __align0[2];// Offset=0x8e Size=0x2
    struct cbrush_t * brushes;// Offset=0x90 Size=0x4
    struct Bounds * brushBounds;// Offset=0x94 Size=0x4
    int * brushContents;// Offset=0x98 Size=0x4
    struct MapEnts * mapEnts;// Offset=0x9c Size=0x4
    unsigned short smodelNodeCount;// Offset=0xa0 Size=0x2
    unsigned char __align1[2];// Offset=0xa2 Size=0x2
    struct SModelAabbNode * smodelNodes;// Offset=0xa4 Size=0x4
    unsigned short dynEntCount[2];// Offset=0xa8 Size=0x4
    struct DynEntityDef * dynEntDefList[2];// Offset=0xac Size=0x8
    struct DynEntityPose * dynEntPoseList[2];// Offset=0xb4 Size=0x8
    struct DynEntityClient * dynEntClientList[2];// Offset=0xbc Size=0x8
    struct DynEntityColl * dynEntCollList[2];// Offset=0xc4 Size=0x8
    unsigned int checksum;// Offset=0xcc Size=0x4
};

struct FxModelMarkPoint// Size=0x18 (Id=6909)
{
    float xyz[3];// Offset=0x0 Size=0xc
    float vertWeights[3];// Offset=0xc Size=0xc
};

struct FxWorldMarkPoint// Size=0x18 (Id=6910)
{
    float xyz[3];// Offset=0x0 Size=0xc
    float vertWeights[3];// Offset=0xc Size=0xc
};

struct GfxWorldVertex// Size=0x2c (Id=6911)
{
    float xyz[3];// Offset=0x0 Size=0xc
    float binormalSign;// Offset=0xc Size=0x4
    union GfxColor color;// Offset=0x10 Size=0x4
    float texCoord[2];// Offset=0x14 Size=0x8
    float lmapCoord[2];// Offset=0x1c Size=0x8
    union PackedUnitVec normal;// Offset=0x24 Size=0x4
    union PackedUnitVec tangent;// Offset=0x28 Size=0x4
};

struct MarkModelCoreContext// Size=0x1c (Id=6912)
{
    struct MarkInfo * markInfo;// Offset=0x0 Size=0x4
    struct GfxMarkContext * markContext;// Offset=0x4 Size=0x4
    float * markOrigin;// Offset=0x8 Size=0x4
    float * markDir;// Offset=0xc Size=0x4
    float * clipPlanes[4];// Offset=0x10 Size=0x4
    float * transformMatrix[3];// Offset=0x14 Size=0x4
    float * transformNormalMatrix[3];// Offset=0x18 Size=0x4
};

enum _unnamed_6913
{
    MARK_MODEL_MAX_SURF_INDEX=256
};

struct FxWorldMarkPoint// Size=0x18 (Id=6914)
{
    float xyz[3];// Offset=0x0 Size=0xc
    float vertWeights[3];// Offset=0xc Size=0xc
};

struct FxModelMarkPoint// Size=0x18 (Id=6915)
{
    float xyz[3];// Offset=0x0 Size=0xc
    float vertWeights[3];// Offset=0xc Size=0xc
};

struct <unnamed-type-g_markVertGlob>// Size=0x14 (Id=6916)
{
    unsigned int surfCount;// Offset=0x0 Size=0x4
    unsigned int vertCount;// Offset=0x4 Size=0x4
    unsigned int indexCount;// Offset=0x8 Size=0x4
    struct GfxWorldVertex * verts;// Offset=0xc Size=0x4
    unsigned short * indices;// Offset=0x10 Size=0x4
};

class GfxSortMarkSurfsInterface// Size=0x1 (Id=6917)
{
    public unsigned int GetIncrement(struct GfxMarkSurf * );
    public unsigned int GetMaterialSortedIndex(struct GfxMarkSurf * );
};

enum MtlTechSetNotFoundBehavior
{
    MTL_TECHSET_NOT_FOUND_RETURN_NULL=0,
    MTL_TECHSET_NOT_FOUND_RETURN_DEFAULT=1
};

struct BuiltInMaterialTable// Size=0x8 (Id=6919)
{
    char * name;// Offset=0x0 Size=0x4
    struct Material ** material;// Offset=0x4 Size=0x4
};

struct MaterialTechniqueSetList// Size=0xc04 (Id=6920)
{
    struct MaterialTechniqueSet * entry[768];// Offset=0x0 Size=0xc00
    int count;// Offset=0xc00 Size=0x4
};

struct BuiltInMaterialTable// Size=0x8 (Id=6921)
{
    char * name;// Offset=0x0 Size=0x4
    struct Material ** material;// Offset=0x4 Size=0x4
};

struct GfxCmdBufInput// Size=0x540 (Id=6922)
{
    float consts[75][4];// Offset=0x0 Size=0x4b0
    struct GfxImage * codeImages[28];// Offset=0x4b0 Size=0x70
    unsigned char codeImageSamplerStates[28];// Offset=0x520 Size=0x1c
    struct GfxBackEndData * data;// Offset=0x53c Size=0x4
};

struct GfxShaderConstantBlock// Size=0x64 (Id=6923)
{
    unsigned int count;// Offset=0x0 Size=0x4
    unsigned short dest[16];// Offset=0x4 Size=0x20
    float * value[16];// Offset=0x24 Size=0x40
};

struct MaterialTechniqueSet// Size=0x90 (Id=6924)
{
    char * name;// Offset=0x0 Size=0x4
    unsigned char worldVertFormat;// Offset=0x4 Size=0x1
    unsigned char unused[2];// Offset=0x5 Size=0x2
    unsigned char __align0[1];// Offset=0x7 Size=0x1
    struct MaterialTechniqueSet * remappedTechniqueSet;// Offset=0x8 Size=0x4
    struct MaterialTechnique * techniques[33];// Offset=0xc Size=0x84
};

enum MaterialUpdateFrequency
{
    MTL_UPDATE_PER_PRIM=0,
    MTL_UPDATE_PER_OBJECT=1,
    MTL_UPDATE_RARELY=2,
    MTL_UPDATE_CUSTOM=3
};

enum MaterialUpdateFrequency
{
    MTL_UPDATE_PER_PRIM=0,
    MTL_UPDATE_PER_OBJECT=1,
    MTL_UPDATE_RARELY=2,
    MTL_UPDATE_CUSTOM=3
};

struct GfxMtlFeatureMap// Size=0x10 (Id=6927)
{
    char * name;// Offset=0x0 Size=0x4
    unsigned int mask;// Offset=0x4 Size=0x4
    unsigned int value;// Offset=0x8 Size=0x4
    bool valueRequired;// Offset=0xc Size=0x1
};

enum _unnamed_6928
{
    MTL_FEATURE_TWEAK=32
};

struct <unnamed-type-mtlOverrideGlob>// Size=0xc (Id=6929)
{
    bool isRegisteringOverrides;// Offset=0x0 Size=0x1
    bool isDirty;// Offset=0x1 Size=0x1
    unsigned char __align0[2];// Offset=0x2 Size=0x2
    unsigned int remapMask;// Offset=0x4 Size=0x4
    unsigned int remapValue;// Offset=0x8 Size=0x4
};

struct GfxMtlFeatureMap// Size=0x10 (Id=6930)
{
    char * name;// Offset=0x0 Size=0x4
    unsigned int mask;// Offset=0x4 Size=0x4
    unsigned int value;// Offset=0x8 Size=0x4
    bool valueRequired;// Offset=0xc Size=0x1
};

struct GfxMeshGlobals// Size=0x1b0 (Id=6931)
{
    struct GfxQuadMeshData fullSceneViewMesh[4];// Offset=0x0 Size=0x1b0
};

struct clipMap_t// Size=0x100 (Id=6932)
{
    char * name;// Offset=0x0 Size=0x4
    int isInUse;// Offset=0x4 Size=0x4
    int planeCount;// Offset=0x8 Size=0x4
    struct cplane_s * planes;// Offset=0xc Size=0x4
    unsigned int numStaticModels;// Offset=0x10 Size=0x4
    struct cStaticModel_s * staticModelList;// Offset=0x14 Size=0x4
    unsigned int numMaterials;// Offset=0x18 Size=0x4
    struct ClipMaterial * materials;// Offset=0x1c Size=0x4
    unsigned int numBrushSides;// Offset=0x20 Size=0x4
    struct cbrushside_t * brushsides;// Offset=0x24 Size=0x4
    unsigned int numBrushEdges;// Offset=0x28 Size=0x4
    unsigned char * brushEdges;// Offset=0x2c Size=0x4
    unsigned int numNodes;// Offset=0x30 Size=0x4
    struct cNode_t * nodes;// Offset=0x34 Size=0x4
    unsigned int numLeafs;// Offset=0x38 Size=0x4
    struct cLeaf_t * leafs;// Offset=0x3c Size=0x4
    unsigned int leafbrushNodesCount;// Offset=0x40 Size=0x4
    struct cLeafBrushNode_s * leafbrushNodes;// Offset=0x44 Size=0x4
    unsigned int numLeafBrushes;// Offset=0x48 Size=0x4
    unsigned short * leafbrushes;// Offset=0x4c Size=0x4
    unsigned int numLeafSurfaces;// Offset=0x50 Size=0x4
    unsigned int * leafsurfaces;// Offset=0x54 Size=0x4
    unsigned int vertCount;// Offset=0x58 Size=0x4
    float * verts[3];// Offset=0x5c Size=0x4
    int triCount;// Offset=0x60 Size=0x4
    unsigned short * triIndices;// Offset=0x64 Size=0x4
    unsigned char * triEdgeIsWalkable;// Offset=0x68 Size=0x4
    int borderCount;// Offset=0x6c Size=0x4
    struct CollisionBorder * borders;// Offset=0x70 Size=0x4
    int partitionCount;// Offset=0x74 Size=0x4
    struct CollisionPartition * partitions;// Offset=0x78 Size=0x4
    int aabbTreeCount;// Offset=0x7c Size=0x4
    struct CollisionAabbTree * aabbTrees;// Offset=0x80 Size=0x4
    unsigned int numSubModels;// Offset=0x84 Size=0x4
    struct cmodel_t * cmodels;// Offset=0x88 Size=0x4
    unsigned short numBrushes;// Offset=0x8c Size=0x2
    unsigned char __align0[2];// Offset=0x8e Size=0x2
    struct cbrush_t * brushes;// Offset=0x90 Size=0x4
    struct Bounds * brushBounds;// Offset=0x94 Size=0x4
    int * brushContents;// Offset=0x98 Size=0x4
    struct MapEnts * mapEnts;// Offset=0x9c Size=0x4
    unsigned short smodelNodeCount;// Offset=0xa0 Size=0x2
    unsigned char __align1[2];// Offset=0xa2 Size=0x2
    struct SModelAabbNode * smodelNodes;// Offset=0xa4 Size=0x4
    unsigned short dynEntCount[2];// Offset=0xa8 Size=0x4
    struct DynEntityDef * dynEntDefList[2];// Offset=0xac Size=0x8
    struct DynEntityPose * dynEntPoseList[2];// Offset=0xb4 Size=0x8
    struct DynEntityClient * dynEntClientList[2];// Offset=0xbc Size=0x8
    struct DynEntityColl * dynEntCollList[2];// Offset=0xc4 Size=0x8
    unsigned int checksum;// Offset=0xcc Size=0x4
};

enum GfxModelLightExtrapolation
{
    GFX_MODELLIGHT_EXTRAPOLATE=0,
    GFX_MODELLIGHT_SHOW_MISSING=1
};

struct GfxFindLightForBox// Size=0x18 (Id=6934)
{
    struct Bounds bounds;// Offset=0x0 Size=0x18
};

struct GfxFindLightForSphere// Size=0x10 (Id=6935)
{
    float origin[3];// Offset=0x0 Size=0xc
    float radius;// Offset=0xc Size=0x4
};

struct GfxSmodelLightGlob// Size=0x11080 (Id=6936)
{
    union // Size=0x5c00 (Id=0)
    {
        unsigned short freeableHandles[7680];// Offset=0x0 Size=0x3c00
        unsigned int lightingBits[2048];// Offset=0x3c00 Size=0x2000
        struct <unnamed-type-local>// Size=0xb480 (Id=69565)
        {
            unsigned short smodelIndex[7680];// Offset=0x0 Size=0x3c00
            unsigned int usedFrameCount[7680];// Offset=0x3c00 Size=0x7800
            unsigned int entryLimit;// Offset=0xb400 Size=0x4
            unsigned int assignedCount;// Offset=0xb404 Size=0x4
            unsigned int freeableCount;// Offset=0xb408 Size=0x4
            unsigned int frameCount;// Offset=0xb40c Size=0x4
            int anyNewLighting;// Offset=0xb410 Size=0x4
            unsigned int pad[27];// Offset=0xb414 Size=0x6c
        };
    };
    struct GfxSmodelLightGlob::<unnamed-type-local> local;// Offset=0x5c00 Size=0xb480
};

struct GfxEntity// Size=0x8 (Id=6937)
{
    unsigned int renderFxFlags;// Offset=0x0 Size=0x4
    float materialTime;// Offset=0x4 Size=0x4
};

struct <unnamed-type-modelLightGlob>// Size=0x5c (Id=6938)
{
    union // Size=0x4 (Id=0)
    {
        float invImageHeight;// Offset=0x0 Size=0x4
        struct <unnamed-type-xmodel>// Size=0x4 (Id=69578)
        {
            unsigned int baseIndex;// Offset=0x0 Size=0x4
        };
    };
    struct <unnamed-type-modelLightGlob>::<unnamed-type-xmodel> xmodel;// Offset=0x4 Size=0x4
    unsigned int totalEntryLimit;// Offset=0x8 Size=0x4
    unsigned int entryBitsY;// Offset=0xc Size=0x4
    unsigned int imageHeight;// Offset=0x10 Size=0x4
    struct GfxEntity * entities;// Offset=0x14 Size=0x4
    unsigned int modFrameCount;// Offset=0x18 Size=0x4
    struct GfxImage * image;// Offset=0x1c Size=0x4
    unsigned int xmodelEntryLimit;// Offset=0x20 Size=0x4
    struct GfxLightingInfo * lightingInfo;// Offset=0x24 Size=0x4
    float * lightingOrigins[3];// Offset=0x28 Size=0x4
    union GfxColor * ambientColor;// Offset=0x2c Size=0x4
    int allocModelFail;// Offset=0x30 Size=0x4
    unsigned int * pixelFreeBits[4];// Offset=0x34 Size=0x10
    unsigned int * prevPrevPixelFreeBits;// Offset=0x44 Size=0x4
    unsigned int * prevPixelFreeBits;// Offset=0x48 Size=0x4
    unsigned int * currPixelFreeBits;// Offset=0x4c Size=0x4
    unsigned int pixelFreeBitsSize;// Offset=0x50 Size=0x4
    unsigned int pixelFreeBitsWordCount;// Offset=0x54 Size=0x4
    unsigned int pixelFreeRover;// Offset=0x58 Size=0x4
};

struct <unnamed-type-modelLightGlob>::<unnamed-type-xmodel>// Size=0x4 (Id=6939)
{
    unsigned int baseIndex;// Offset=0x0 Size=0x4
};

struct GfxSmodelLightGlob::<unnamed-type-local>// Size=0xb480 (Id=6940)
{
    unsigned short smodelIndex[7680];// Offset=0x0 Size=0x3c00
    unsigned int usedFrameCount[7680];// Offset=0x3c00 Size=0x7800
    unsigned int entryLimit;// Offset=0xb400 Size=0x4
    unsigned int assignedCount;// Offset=0xb404 Size=0x4
    unsigned int freeableCount;// Offset=0xb408 Size=0x4
    unsigned int frameCount;// Offset=0xb40c Size=0x4
    int anyNewLighting;// Offset=0xb410 Size=0x4
    unsigned int pad[27];// Offset=0xb414 Size=0x6c
};

struct GfxSceneMarkDrawData// Size=0x2c (Id=6941)
{
    unsigned char * smodelVisLods;// Offset=0x0 Size=0x4
    unsigned char * dObjVisData;// Offset=0x4 Size=0x4
    unsigned char * modelVisData;// Offset=0x8 Size=0x4
    unsigned char * brushVisData;// Offset=0xc Size=0x4
    int dpvsLocalClientNum;// Offset=0x10 Size=0x4
    int dObjViewmodelIndex;// Offset=0x14 Size=0x4
    int smodelCount;// Offset=0x18 Size=0x4
    int dObjCount;// Offset=0x1c Size=0x4
    int brushCount;// Offset=0x20 Size=0x4
    int modelCount;// Offset=0x24 Size=0x4
    unsigned short entnumOrdinaryEnd;// Offset=0x28 Size=0x2
};

struct SpuLocalStructPtr<cpose_t const ,31>// Size=0x4 (Id=6942)
{
    struct cpose_t * localPtr;// Offset=0x0 Size=0x4
    struct cpose_t * operator->();
    struct cpose_t * operator const struct cpose_t *();
};

struct GfxSceneEntity// Size=0x78 (Id=6943)
{
    float lightingOrigin[3];// Offset=0x0 Size=0xc
    struct GfxPlacement placement;// Offset=0xc Size=0x1c
    struct GfxSceneEntityCull cull;// Offset=0x28 Size=0x20
    char lods[32];// Offset=0x48 Size=0x20
    struct // Size=0x4 (Id=0)
    {
        unsigned int gfxEntIndex:7;// Offset=0x68 Size=0x4 BitOffset=0x19 BitSize=0x7
        unsigned int entnum:12;// Offset=0x68 Size=0x4 BitOffset=0xd BitSize=0xc
        unsigned int renderFxFlags:13;// Offset=0x68 Size=0x4 BitOffset=0x0 BitSize=0xd
    };
    struct DObj * obj;// Offset=0x6c Size=0x4
    union GfxSceneEntityInfo info;// Offset=0x70 Size=0x4
    unsigned char reflectionProbeIndex;// Offset=0x74 Size=0x1
};

struct XSurfaceVertexInfo// Size=0xc (Id=6944)
{
    short vertCount[4];// Offset=0x0 Size=0x8
    unsigned short * vertsBlend;// Offset=0x8 Size=0x4
};

enum LightInfluenceType
{
    LIGHT_INFLUENCE_NONE=0,
    LIGHT_INFLUENCE_PRIMARY=1,
    LIGHT_INFLUENCE_SECONDARY=2,
    LIGHT_INFLUENCE_COINCIDENT=3
};

struct GfxHeroOnlyLight// Size=0x38 (Id=6946)
{
    unsigned char type;// Offset=0x0 Size=0x1
    unsigned char unused[3];// Offset=0x1 Size=0x3
    float color[3];// Offset=0x4 Size=0xc
    float dir[3];// Offset=0x10 Size=0xc
    float origin[3];// Offset=0x1c Size=0xc
    float radius;// Offset=0x28 Size=0x4
    float cosHalfFovOuter;// Offset=0x2c Size=0x4
    float cosHalfFovInner;// Offset=0x30 Size=0x4
    int exponent;// Offset=0x34 Size=0x4
};

struct GfxShadowedLightHistory// Size=0x58 (Id=6947)
{
    unsigned int sceneLightWasUsed[8];// Offset=0x0 Size=0x20
    struct GfxShadowedLightEntry entries[4];// Offset=0x20 Size=0x30
    unsigned int entryCount;// Offset=0x50 Size=0x4
    unsigned int lastUpdateTime;// Offset=0x54 Size=0x4
};

struct GfxShadowedLightEntry// Size=0xc (Id=6948)
{
    unsigned char sceneLightIndex;// Offset=0x0 Size=0x1
    bool isFadingOut;// Offset=0x1 Size=0x1
    unsigned char __align0[2];// Offset=0x2 Size=0x2
    float score;// Offset=0x4 Size=0x4
    float fade;// Offset=0x8 Size=0x4
};

struct GfxCandidateShadowedLight// Size=0x8 (Id=6949)
{
    unsigned int sceneLightIndex;// Offset=0x0 Size=0x4
    float score;// Offset=0x4 Size=0x4
};

struct GfxLightRegionHull// Size=0x50 (Id=6950)
{
    float kdopMidPoint[9];// Offset=0x0 Size=0x24
    float kdopHalfSize[9];// Offset=0x24 Size=0x24
    unsigned int axisCount;// Offset=0x48 Size=0x4
    struct GfxLightRegionAxis * axis;// Offset=0x4c Size=0x4
};

struct GfxLightRegion// Size=0x8 (Id=6951)
{
    unsigned int hullCount;// Offset=0x0 Size=0x4
    struct GfxLightRegionHull * hulls;// Offset=0x4 Size=0x4
};

struct clipMap_t// Size=0x100 (Id=6952)
{
    char * name;// Offset=0x0 Size=0x4
    int isInUse;// Offset=0x4 Size=0x4
    int planeCount;// Offset=0x8 Size=0x4
    struct cplane_s * planes;// Offset=0xc Size=0x4
    unsigned int numStaticModels;// Offset=0x10 Size=0x4
    struct cStaticModel_s * staticModelList;// Offset=0x14 Size=0x4
    unsigned int numMaterials;// Offset=0x18 Size=0x4
    struct ClipMaterial * materials;// Offset=0x1c Size=0x4
    unsigned int numBrushSides;// Offset=0x20 Size=0x4
    struct cbrushside_t * brushsides;// Offset=0x24 Size=0x4
    unsigned int numBrushEdges;// Offset=0x28 Size=0x4
    unsigned char * brushEdges;// Offset=0x2c Size=0x4
    unsigned int numNodes;// Offset=0x30 Size=0x4
    struct cNode_t * nodes;// Offset=0x34 Size=0x4
    unsigned int numLeafs;// Offset=0x38 Size=0x4
    struct cLeaf_t * leafs;// Offset=0x3c Size=0x4
    unsigned int leafbrushNodesCount;// Offset=0x40 Size=0x4
    struct cLeafBrushNode_s * leafbrushNodes;// Offset=0x44 Size=0x4
    unsigned int numLeafBrushes;// Offset=0x48 Size=0x4
    unsigned short * leafbrushes;// Offset=0x4c Size=0x4
    unsigned int numLeafSurfaces;// Offset=0x50 Size=0x4
    unsigned int * leafsurfaces;// Offset=0x54 Size=0x4
    unsigned int vertCount;// Offset=0x58 Size=0x4
    float * verts[3];// Offset=0x5c Size=0x4
    int triCount;// Offset=0x60 Size=0x4
    unsigned short * triIndices;// Offset=0x64 Size=0x4
    unsigned char * triEdgeIsWalkable;// Offset=0x68 Size=0x4
    int borderCount;// Offset=0x6c Size=0x4
    struct CollisionBorder * borders;// Offset=0x70 Size=0x4
    int partitionCount;// Offset=0x74 Size=0x4
    struct CollisionPartition * partitions;// Offset=0x78 Size=0x4
    int aabbTreeCount;// Offset=0x7c Size=0x4
    struct CollisionAabbTree * aabbTrees;// Offset=0x80 Size=0x4
    unsigned int numSubModels;// Offset=0x84 Size=0x4
    struct cmodel_t * cmodels;// Offset=0x88 Size=0x4
    unsigned short numBrushes;// Offset=0x8c Size=0x2
    unsigned char __align0[2];// Offset=0x8e Size=0x2
    struct cbrush_t * brushes;// Offset=0x90 Size=0x4
    struct Bounds * brushBounds;// Offset=0x94 Size=0x4
    int * brushContents;// Offset=0x98 Size=0x4
    struct MapEnts * mapEnts;// Offset=0x9c Size=0x4
    unsigned short smodelNodeCount;// Offset=0xa0 Size=0x2
    unsigned char __align1[2];// Offset=0xa2 Size=0x2
    struct SModelAabbNode * smodelNodes;// Offset=0xa4 Size=0x4
    unsigned short dynEntCount[2];// Offset=0xa8 Size=0x4
    struct DynEntityDef * dynEntDefList[2];// Offset=0xac Size=0x8
    struct DynEntityPose * dynEntPoseList[2];// Offset=0xb4 Size=0x8
    struct DynEntityClient * dynEntClientList[2];// Offset=0xbc Size=0x8
    struct DynEntityColl * dynEntCollList[2];// Offset=0xc4 Size=0x8
    unsigned int checksum;// Offset=0xcc Size=0x4
};

struct GfxPointVertex// Size=0x10 (Id=6953)
{
    float xyz[3];// Offset=0x0 Size=0xc
    unsigned char color[4];// Offset=0xc Size=0x4
};

enum GfxProjectionTypes
{
    GFX_PROJECTION_2D=0,
    GFX_PROJECTION_3D=1
};

enum _unnamed_6955
{
    TEXT_RENDERFLAG_FORCEMONOSPACE=1,
    TEXT_RENDERFLAG_CURSOR=2,
    TEXT_RENDERFLAG_DROPSHADOW=4,
    TEXT_RENDERFLAG_DROPSHADOW_EXTRA=8,
    TEXT_RENDERFLAG_GLOW=16,
    TEXT_RENDERFLAG_GLOW_FORCE_COLOR=32,
    TEXT_RENDERFLAG_FX_DECODE=64,
    TEXT_RENDERFLAG_PADDING=128,
    TEXT_RENDERFLAG_SUBTITLETEXT=256,
    TEXT_RENDERFLAG_CINEMATIC=512
};

struct GfxCmdSaveScreen// Size=0x8 (Id=6956)
{
    struct GfxCmdHeader header;// Offset=0x0 Size=0x4
    int screenTimerId;// Offset=0x4 Size=0x4
};

struct GfxCmdStretchPicRotateXY// Size=0x30 (Id=6957)
{
    struct GfxCmdHeader header;// Offset=0x0 Size=0x4
    struct Material * material;// Offset=0x4 Size=0x4
    float x;// Offset=0x8 Size=0x4
    float y;// Offset=0xc Size=0x4
    float w;// Offset=0x10 Size=0x4
    float h;// Offset=0x14 Size=0x4
    float s0;// Offset=0x18 Size=0x4
    float t0;// Offset=0x1c Size=0x4
    float s1;// Offset=0x20 Size=0x4
    float t1;// Offset=0x24 Size=0x4
    union GfxColor color;// Offset=0x28 Size=0x4
    float rotation;// Offset=0x2c Size=0x4
};

struct GfxCmdSaveScreenSection// Size=0x18 (Id=6958)
{
    struct GfxCmdHeader header;// Offset=0x0 Size=0x4
    float s0;// Offset=0x4 Size=0x4
    float t0;// Offset=0x8 Size=0x4
    float ds;// Offset=0xc Size=0x4
    float dt;// Offset=0x10 Size=0x4
    int screenTimerId;// Offset=0x14 Size=0x4
};

struct GfxCmdSetViewport// Size=0x14 (Id=6959)
{
    struct GfxCmdHeader header;// Offset=0x0 Size=0x4
    struct GfxViewport viewport;// Offset=0x4 Size=0x10
};

enum FogTypes
{
    FOG_NORMAL=1,
    FOG_DFOG=2
};

struct GfxCmdDrawText3D// Size=0x34 (Id=6961)
{
    struct GfxCmdHeader header;// Offset=0x0 Size=0x4
    float org[3];// Offset=0x4 Size=0xc
    struct Font_s * font;// Offset=0x10 Size=0x4
    float xPixelStep[3];// Offset=0x14 Size=0xc
    float yPixelStep[3];// Offset=0x20 Size=0xc
    union GfxColor color;// Offset=0x2c Size=0x4
    char text[4];// Offset=0x30 Size=0x4
};

struct GfxCmdStretchRaw// Size=0x28 (Id=6962)
{
    struct GfxCmdHeader header;// Offset=0x0 Size=0x4
    int x;// Offset=0x4 Size=0x4
    int y;// Offset=0x8 Size=0x4
    int w;// Offset=0xc Size=0x4
    int h;// Offset=0x10 Size=0x4
    int cols;// Offset=0x14 Size=0x4
    int rows;// Offset=0x18 Size=0x4
    unsigned char * data;// Offset=0x1c Size=0x4
    int client;// Offset=0x20 Size=0x4
    int dirty;// Offset=0x24 Size=0x4
};

struct GfxCmdDrawText2D// Size=0x54 (Id=6963)
{
    struct GfxCmdHeader header;// Offset=0x0 Size=0x4
    float x;// Offset=0x4 Size=0x4
    float y;// Offset=0x8 Size=0x4
    float rotation;// Offset=0xc Size=0x4
    struct Font_s * font;// Offset=0x10 Size=0x4
    float xScale;// Offset=0x14 Size=0x4
    float yScale;// Offset=0x18 Size=0x4
    union GfxColor color;// Offset=0x1c Size=0x4
    int maxChars;// Offset=0x20 Size=0x4
    int renderFlags;// Offset=0x24 Size=0x4
    int cursorPos;// Offset=0x28 Size=0x4
    char cursorLetter;// Offset=0x2c Size=0x1
    unsigned char __align0[3];// Offset=0x2d Size=0x3
    union GfxColor glowForceColor;// Offset=0x30 Size=0x4
    int fxBirthTime;// Offset=0x34 Size=0x4
    int fxLetterTime;// Offset=0x38 Size=0x4
    int fxDecayStartTime;// Offset=0x3c Size=0x4
    int fxDecayDuration;// Offset=0x40 Size=0x4
    struct Material * fxMaterial;// Offset=0x44 Size=0x4
    struct Material * fxMaterialGlow;// Offset=0x48 Size=0x4
    float padding;// Offset=0x4c Size=0x4
    char text[3];// Offset=0x50 Size=0x3
};

struct GfxCmdDrawQuadPic// Size=0x2c (Id=6964)
{
    struct GfxCmdHeader header;// Offset=0x0 Size=0x4
    struct Material * material;// Offset=0x4 Size=0x4
    float verts[4][2];// Offset=0x8 Size=0x20
    union GfxColor color;// Offset=0x28 Size=0x4
};

struct GfxCmdClearScreen// Size=0x1c (Id=6965)
{
    struct GfxCmdHeader header;// Offset=0x0 Size=0x4
    unsigned char whichToClear;// Offset=0x4 Size=0x1
    unsigned char stencil;// Offset=0x5 Size=0x1
    unsigned char __align0[2];// Offset=0x6 Size=0x2
    float depth;// Offset=0x8 Size=0x4
    float color[4];// Offset=0xc Size=0x10
};

struct GfxCmdDrawPoints// Size=0x18 (Id=6966)
{
    struct GfxCmdHeader header;// Offset=0x0 Size=0x4
    short pointCount;// Offset=0x4 Size=0x2
    unsigned char size;// Offset=0x6 Size=0x1
    unsigned char dimensions;// Offset=0x7 Size=0x1
    struct GfxPointVertex verts[1];// Offset=0x8 Size=0x10
};

struct GfxCmdSetMaterialColor// Size=0x14 (Id=6967)
{
    struct GfxCmdHeader header;// Offset=0x0 Size=0x4
    float color[4];// Offset=0x4 Size=0x10
};

struct GfxCmdDrawTriangles// Size=0x14 (Id=6968)
{
    struct GfxCmdHeader header;// Offset=0x0 Size=0x4
    struct Material * material;// Offset=0x4 Size=0x4
    enum MaterialTechniqueType techType;// Offset=0x8 Size=0x4
    unsigned char dimensions;// Offset=0xc Size=0x1
    unsigned char __align0[1];// Offset=0xd Size=0x1
    short indexCount;// Offset=0xe Size=0x2
    short vertexCount;// Offset=0x10 Size=0x2
};

struct GfxCmdSetScissor// Size=0x14 (Id=6969)
{
    struct GfxCmdHeader header;// Offset=0x0 Size=0x4
    struct GfxViewport viewport;// Offset=0x4 Size=0x10
};

struct GfxCmdDrawLines// Size=0x28 (Id=6970)
{
    struct GfxCmdHeader header;// Offset=0x0 Size=0x4
    short lineCount;// Offset=0x4 Size=0x2
    unsigned char width;// Offset=0x6 Size=0x1
    unsigned char dimensions;// Offset=0x7 Size=0x1
    struct GfxPointVertex verts[2];// Offset=0x8 Size=0x20
};

struct GfxPointVertex// Size=0x10 (Id=6971)
{
    float xyz[3];// Offset=0x0 Size=0xc
    unsigned char color[4];// Offset=0xc Size=0x4
};

struct GfxCmdStretchPic// Size=0x2c (Id=6972)
{
    struct GfxCmdHeader header;// Offset=0x0 Size=0x4
    struct Material * material;// Offset=0x4 Size=0x4
    float x;// Offset=0x8 Size=0x4
    float y;// Offset=0xc Size=0x4
    float w;// Offset=0x10 Size=0x4
    float h;// Offset=0x14 Size=0x4
    float s0;// Offset=0x18 Size=0x4
    float t0;// Offset=0x1c Size=0x4
    float s1;// Offset=0x20 Size=0x4
    float t1;// Offset=0x24 Size=0x4
    union GfxColor color;// Offset=0x28 Size=0x4
};

struct GfxCmdStretchPicRotateST// Size=0x40 (Id=6973)
{
    struct GfxCmdHeader header;// Offset=0x0 Size=0x4
    struct Material * material;// Offset=0x4 Size=0x4
    float x;// Offset=0x8 Size=0x4
    float y;// Offset=0xc Size=0x4
    float w;// Offset=0x10 Size=0x4
    float h;// Offset=0x14 Size=0x4
    float centerS;// Offset=0x18 Size=0x4
    float centerT;// Offset=0x1c Size=0x4
    float scaleFinalS;// Offset=0x20 Size=0x4
    float scaleFinalT;// Offset=0x24 Size=0x4
    float minS;// Offset=0x28 Size=0x4
    float maxS;// Offset=0x2c Size=0x4
    float minT;// Offset=0x30 Size=0x4
    float maxT;// Offset=0x34 Size=0x4
    union GfxColor color;// Offset=0x38 Size=0x4
    float rotation;// Offset=0x3c Size=0x4
};

struct GfxCmdBlendSavedScreenFlashed// Size=0x20 (Id=6974)
{
    struct GfxCmdHeader header;// Offset=0x0 Size=0x4
    bool replace;// Offset=0x4 Size=0x1
    unsigned char __align0[3];// Offset=0x5 Size=0x3
    float intensityWhiteout;// Offset=0x8 Size=0x4
    float intensityScreengrab;// Offset=0xc Size=0x4
    float s0;// Offset=0x10 Size=0x4
    float t0;// Offset=0x14 Size=0x4
    float ds;// Offset=0x18 Size=0x4
    float dt;// Offset=0x1c Size=0x4
};

struct GfxCmdBlendSavedScreenBlurred// Size=0x1c (Id=6975)
{
    struct GfxCmdHeader header;// Offset=0x0 Size=0x4
    int fadeMsec;// Offset=0x4 Size=0x4
    float s0;// Offset=0x8 Size=0x4
    float t0;// Offset=0xc Size=0x4
    float ds;// Offset=0x10 Size=0x4
    float dt;// Offset=0x14 Size=0x4
    int screenTimerId;// Offset=0x18 Size=0x4
};

struct GfxCmdProjectionSet// Size=0x8 (Id=6976)
{
    struct GfxCmdHeader header;// Offset=0x0 Size=0x4
    enum GfxProjectionTypes projection;// Offset=0x4 Size=0x4
};

struct GfxCmdDrawFullScreenColoredQuad// Size=0x1c (Id=6977)
{
    struct GfxCmdHeader header;// Offset=0x0 Size=0x4
    struct Material * material;// Offset=0x4 Size=0x4
    float s0;// Offset=0x8 Size=0x4
    float t0;// Offset=0xc Size=0x4
    float s1;// Offset=0x10 Size=0x4
    float t1;// Offset=0x14 Size=0x4
    union GfxColor color;// Offset=0x18 Size=0x4
};

enum FullscreenType
{
    FULLSCREEN_DISPLAY=0,
    FULLSCREEN_MIXED=1,
    FULLSCREEN_SCENE=2
};

enum RenderTargetUsage
{
    RENDERTARGET_USAGE_DEPTH=0,
    RENDERTARGET_USAGE_RENDER=1,
    RENDERTARGET_USAGE_RENDER_SHARE_SCENE=2,
    RENDERTARGET_USAGE_TEXTURE=3
};

struct GfxCamera// Size=0x50 (Id=6980)
{
    float origin[3];// Offset=0x0 Size=0xc
    float axis[3][3];// Offset=0xc Size=0x24
    float subWindowMins[2];// Offset=0x30 Size=0x8
    float subWindowMaxs[2];// Offset=0x38 Size=0x8
    float tanHalfFovX;// Offset=0x40 Size=0x4
    float tanHalfFovY;// Offset=0x44 Size=0x4
    float zNear;// Offset=0x48 Size=0x4
    float depthHackNearClip;// Offset=0x4c Size=0x4
};

struct GfxSceneParms// Size=0x3f38 (Id=6981)
{
    int localClientNum;// Offset=0x0 Size=0x4
    float blurRadius;// Offset=0x4 Size=0x4
    bool playerTeleported;// Offset=0x8 Size=0x1
    bool viewModelHasDistortion;// Offset=0x9 Size=0x1
    unsigned char forceSunShadowsGenerate;// Offset=0xa Size=0x1
    bool halfResParticles;// Offset=0xb Size=0x1
    struct GfxDepthOfField dof;// Offset=0xc Size=0x20
    struct GfxFilm film;// Offset=0x2c Size=0x3c
    struct GfxGlow glow;// Offset=0x68 Size=0x14
    struct GfxLightScale charPrimaryLightScale;// Offset=0x7c Size=0x8
    struct GfxStageInfo stageInfo;// Offset=0x84 Size=0x18
    struct GfxCompositeFx waterSheetingFx;// Offset=0x9c Size=0x6c
    struct GfxViewport sceneViewport;// Offset=0x108 Size=0x10
    struct GfxViewport displayViewport;// Offset=0x118 Size=0x10
    struct GfxViewport scissorViewport;// Offset=0x128 Size=0x10
    struct GfxLight primaryLights[248];// Offset=0x138 Size=0x3e00
};

union GfxSceneGlass// Size=0x4 (Id=6982)
{
    bool rendered;// Offset=0x0 Size=0x1
    unsigned char reflectionProbeIndex;// Offset=0x1 Size=0x1
    unsigned short lightingHandle;// Offset=0x2 Size=0x2
    unsigned int packed;// Offset=0x0 Size=0x4
};

struct GfxSunShadowProjection// Size=0x20 (Id=6983)
{
    float switchPartition[4];// Offset=0x0 Size=0x10
    float shadowmapScale[4];// Offset=0x10 Size=0x10
};

struct SceneEntCmd// Size=0x4 (Id=6984)
{
    struct GfxViewInfo * viewInfo;// Offset=0x0 Size=0x4
};

struct FxSystem// Size=0xc40 (Id=6985)
{
    struct FxCamera camera;// Offset=0x0 Size=0xb0
    struct FxCamera cameraPrev;// Offset=0xb0 Size=0xb0
    int localClientCount;// Offset=0x160 Size=0x4
    struct FxCamera cameraPrevArray[2];// Offset=0x164 Size=0x160
    int cgameClientNum;// Offset=0x2c4 Size=0x4
    int pad[2];// Offset=0x2c8 Size=0x8
    struct FxSpriteInfo sprite;// Offset=0x2d0 Size=0x10
    struct FxEffect * effects;// Offset=0x2e0 Size=0x4
    struct FxPool<FxElem> * elems;// Offset=0x2e4 Size=0x4
    struct FxPool<FxTrail> * trails;// Offset=0x2e8 Size=0x4
    struct FxPool<FxTrailElem> * trailElems;// Offset=0x2ec Size=0x4
    struct FxPool<FxBolt> * bolts;// Offset=0x2f0 Size=0x4
    struct FxPool<FxSparkCloud> * sparkClouds;// Offset=0x2f4 Size=0x4
    struct FxPool<FxSparkFountain> * sparkFountains;// Offset=0x2f8 Size=0x4
    struct FxPool<FxSparkFountainCluster> * sparkFountainClusters;// Offset=0x2fc Size=0x4
    unsigned short * deferredElems;// Offset=0x300 Size=0x4
    long firstFreeElem;// Offset=0x304 Size=0x4
    long firstFreeTrailElem;// Offset=0x308 Size=0x4
    long firstFreeTrail;// Offset=0x30c Size=0x4
    long firstFreeBolt;// Offset=0x310 Size=0x4
    long firstFreeSparkCloud;// Offset=0x314 Size=0x4
    long firstFreeSparkFountain;// Offset=0x318 Size=0x4
    long firstFreeSparkFountainCluster;// Offset=0x31c Size=0x4
    long deferredElemCount;// Offset=0x320 Size=0x4
    long activeElemCount;// Offset=0x324 Size=0x4
    long activeTrailElemCount;// Offset=0x328 Size=0x4
    long activeTrailCount;// Offset=0x32c Size=0x4
    long activeBoltCount;// Offset=0x330 Size=0x4
    long activeSparkCloudCount;// Offset=0x334 Size=0x4
    long activeSparkFountainCount;// Offset=0x338 Size=0x4
    long activeSparkFountainClusterCount;// Offset=0x33c Size=0x4
    long gfxCloudCount;// Offset=0x340 Size=0x4
    struct FxVisState * visState;// Offset=0x344 Size=0x4
    struct FxVisState * visStateBufferRead;// Offset=0x348 Size=0x4
    struct FxVisState * visStateBufferWrite;// Offset=0x34c Size=0x4
    long firstActiveEffect;// Offset=0x350 Size=0x4
    long firstNewEffect;// Offset=0x354 Size=0x4
    long firstFreeEffect;// Offset=0x358 Size=0x4
    unsigned short allEffectHandles[1024];// Offset=0x35c Size=0x800
    long activeSpotLightEffectCount;// Offset=0xb5c Size=0x4
    long activeSpotLightElemCount;// Offset=0xb60 Size=0x4
    unsigned short activeSpotLightEffectHandle;// Offset=0xb64 Size=0x2
    unsigned short activeSpotLightElemHandle;// Offset=0xb66 Size=0x2
    short activeSpotLightBoltDobj;// Offset=0xb68 Size=0x2
    unsigned char __align0[2];// Offset=0xb6a Size=0x2
    long iteratorCount;// Offset=0xb6c Size=0x4
    int msecNow;// Offset=0xb70 Size=0x4
    long msecDraw;// Offset=0xb74 Size=0x4
    int frameCount;// Offset=0xb78 Size=0x4
    bool isInitialized;// Offset=0xb7c Size=0x1
    bool needsGarbageCollection;// Offset=0xb7d Size=0x1
    bool isArchiving;// Offset=0xb7e Size=0x1
    unsigned char localClientNum;// Offset=0xb7f Size=0x1
    unsigned int restartList[32];// Offset=0xb80 Size=0x80
    struct FxEffect ** restartEffectsList;// Offset=0xc00 Size=0x4
    unsigned int restartCount;// Offset=0xc04 Size=0x4
    unsigned int pad1[14];// Offset=0xc08 Size=0x38
};

struct GfxSceneParms// Size=0x3f38 (Id=6986)
{
    int localClientNum;// Offset=0x0 Size=0x4
    float blurRadius;// Offset=0x4 Size=0x4
    bool playerTeleported;// Offset=0x8 Size=0x1
    bool viewModelHasDistortion;// Offset=0x9 Size=0x1
    unsigned char forceSunShadowsGenerate;// Offset=0xa Size=0x1
    bool halfResParticles;// Offset=0xb Size=0x1
    struct GfxDepthOfField dof;// Offset=0xc Size=0x20
    struct GfxFilm film;// Offset=0x2c Size=0x3c
    struct GfxGlow glow;// Offset=0x68 Size=0x14
    struct GfxLightScale charPrimaryLightScale;// Offset=0x7c Size=0x8
    struct GfxStageInfo stageInfo;// Offset=0x84 Size=0x18
    struct GfxCompositeFx waterSheetingFx;// Offset=0x9c Size=0x6c
    struct GfxViewport sceneViewport;// Offset=0x108 Size=0x10
    struct GfxViewport displayViewport;// Offset=0x118 Size=0x10
    struct GfxViewport scissorViewport;// Offset=0x128 Size=0x10
    struct GfxLight primaryLights[248];// Offset=0x138 Size=0x3e00
};

enum CubemapShot
{
    CUBEMAPSHOT_NONE=0,
    CUBEMAPSHOT_RIGHT=1,
    CUBEMAPSHOT_LEFT=2,
    CUBEMAPSHOT_BACK=3,
    CUBEMAPSHOT_FRONT=4,
    CUBEMAPSHOT_UP=5,
    CUBEMAPSHOT_DOWN=6,
    CUBEMAPSHOT_COUNT=7
};

struct <unnamed-type-cubeShotGlob>// Size=0x18 (Id=6988)
{
    unsigned char * pixels[6];// Offset=0x0 Size=0x18
};

struct MaterialArgumentCodeConst// Size=0x4 (Id=6989)
{
    unsigned short index;// Offset=0x0 Size=0x2
    unsigned char firstRow;// Offset=0x2 Size=0x1
    unsigned char rowCount;// Offset=0x3 Size=0x1
};

struct GfxCmdBufSourceState// Size=0x16a0 (Id=6990)
{
    struct GfxCodeMatrices matrices;// Offset=0x0 Size=0xe00
    struct GfxCmdBufInput input;// Offset=0xe00 Size=0x540
    struct GfxViewParms viewParms;// Offset=0x1340 Size=0x150
    float eyeOffset[4];// Offset=0x1490 Size=0x10
    struct GfxMatrix shadowLookupMatrix;// Offset=0x14a0 Size=0x40
    unsigned short constVersions[131];// Offset=0x14e0 Size=0x106
    unsigned short matrixVersions[14];// Offset=0x15e6 Size=0x1c
    unsigned char __align0[2];// Offset=0x1602 Size=0x2
    unsigned int sceneLightForShadowLookupMatrix;// Offset=0x1604 Size=0x4
    struct GfxPlacement * objectPlacement[3];// Offset=0x1608 Size=0xc
    struct GfxViewParms * viewParms3D;// Offset=0x1614 Size=0x4
    unsigned int depthHackFlags;// Offset=0x1618 Size=0x4
    struct GfxScaledPlacement skinnedPlacement;// Offset=0x161c Size=0x20
    int cameraView;// Offset=0x163c Size=0x4
    enum GfxViewMode viewMode;// Offset=0x1640 Size=0x4
    struct GfxSceneDef sceneDef;// Offset=0x1644 Size=0x28
    struct GfxViewport sceneViewport;// Offset=0x166c Size=0x10
    float materialTime;// Offset=0x167c Size=0x4
    enum GfxViewportBehavior viewportBehavior;// Offset=0x1680 Size=0x4
    int renderTargetWidth;// Offset=0x1684 Size=0x4
    int renderTargetHeight;// Offset=0x1688 Size=0x4
    bool viewportIsDirty;// Offset=0x168c Size=0x1
    unsigned char __align1[3];// Offset=0x168d Size=0x3
    unsigned int sceneLightIndex;// Offset=0x1690 Size=0x4
    bool useHeroLighting;// Offset=0x1694 Size=0x1
};

struct MaterialShaderArgument// Size=0x8 (Id=6991)
{
    unsigned short type;// Offset=0x0 Size=0x2
    unsigned short dest;// Offset=0x2 Size=0x2
    union MaterialArgumentDef u;// Offset=0x4 Size=0x4
};

union GfxShaderConstantState// Size=0x8 (Id=6992)
{
    struct <unnamed-type-fields>// Size=0x8 (Id=69855)
    {
        struct MaterialArgumentCodeConst codeConst;// Offset=0x0 Size=0x4
        unsigned int version;// Offset=0x4 Size=0x4
    };
    struct GfxShaderConstantState::<unnamed-type-fields> fields;// Offset=0x0 Size=0x8
    unsigned long long packed;// Offset=0x0 Size=0x8
};

struct MaterialTextureDef// Size=0xc (Id=6993)
{
    unsigned int nameHash;// Offset=0x0 Size=0x4
    char nameStart;// Offset=0x4 Size=0x1
    char nameEnd;// Offset=0x5 Size=0x1
    unsigned char samplerState;// Offset=0x6 Size=0x1
    unsigned char semantic;// Offset=0x7 Size=0x1
    union MaterialTextureDefInfo u;// Offset=0x8 Size=0x4
};

struct WaterWorkerCmd// Size=0x4 (Id=6994)
{
    struct water_t * water;// Offset=0x0 Size=0x4
};

struct GfxShaderConstantState::<unnamed-type-fields>// Size=0x8 (Id=6995)
{
    struct MaterialArgumentCodeConst codeConst;// Offset=0x0 Size=0x4
    unsigned int version;// Offset=0x4 Size=0x4
};

struct SunFlareDynamic// Size=0x28 (Id=6996)
{
    float flareIntensity;// Offset=0x0 Size=0x4
    float currentBlind;// Offset=0x4 Size=0x4
    float currentGlare;// Offset=0x8 Size=0x4
    int lastTime;// Offset=0xc Size=0x4
    float lastVisibility;// Offset=0x10 Size=0x4
    float lastDot;// Offset=0x14 Size=0x4
    bool error;// Offset=0x18 Size=0x1
    bool sunQueryIssued[2];// Offset=0x19 Size=0x2
    unsigned char __align0[1];// Offset=0x1b Size=0x1
    struct D3DQuery * sunQuery[2];// Offset=0x1c Size=0x8
    int hitNum;// Offset=0x24 Size=0x4
};

class GfxSortSparkSurfsInterface// Size=0x1 (Id=6997)
{
    public unsigned int GetIncrement(union GfxSparkSurf * );
    public unsigned int GetMaterialSortedIndex(union GfxSparkSurf * );
};

struct GfxSpotShadowEntCmd// Size=0x8 (Id=6998)
{
    struct GfxSceneEntity * sceneEnt;// Offset=0x0 Size=0x4
    struct GfxLight * light;// Offset=0x4 Size=0x4
};

struct clipMap_t// Size=0x100 (Id=6999)
{
    char * name;// Offset=0x0 Size=0x4
    int isInUse;// Offset=0x4 Size=0x4
    int planeCount;// Offset=0x8 Size=0x4
    struct cplane_s * planes;// Offset=0xc Size=0x4
    unsigned int numStaticModels;// Offset=0x10 Size=0x4
    struct cStaticModel_s * staticModelList;// Offset=0x14 Size=0x4
    unsigned int numMaterials;// Offset=0x18 Size=0x4
    struct ClipMaterial * materials;// Offset=0x1c Size=0x4
    unsigned int numBrushSides;// Offset=0x20 Size=0x4
    struct cbrushside_t * brushsides;// Offset=0x24 Size=0x4
    unsigned int numBrushEdges;// Offset=0x28 Size=0x4
    unsigned char * brushEdges;// Offset=0x2c Size=0x4
    unsigned int numNodes;// Offset=0x30 Size=0x4
    struct cNode_t * nodes;// Offset=0x34 Size=0x4
    unsigned int numLeafs;// Offset=0x38 Size=0x4
    struct cLeaf_t * leafs;// Offset=0x3c Size=0x4
    unsigned int leafbrushNodesCount;// Offset=0x40 Size=0x4
    struct cLeafBrushNode_s * leafbrushNodes;// Offset=0x44 Size=0x4
    unsigned int numLeafBrushes;// Offset=0x48 Size=0x4
    unsigned short * leafbrushes;// Offset=0x4c Size=0x4
    unsigned int numLeafSurfaces;// Offset=0x50 Size=0x4
    unsigned int * leafsurfaces;// Offset=0x54 Size=0x4
    unsigned int vertCount;// Offset=0x58 Size=0x4
    float * verts[3];// Offset=0x5c Size=0x4
    int triCount;// Offset=0x60 Size=0x4
    unsigned short * triIndices;// Offset=0x64 Size=0x4
    unsigned char * triEdgeIsWalkable;// Offset=0x68 Size=0x4
    int borderCount;// Offset=0x6c Size=0x4
    struct CollisionBorder * borders;// Offset=0x70 Size=0x4
    int partitionCount;// Offset=0x74 Size=0x4
    struct CollisionPartition * partitions;// Offset=0x78 Size=0x4
    int aabbTreeCount;// Offset=0x7c Size=0x4
    struct CollisionAabbTree * aabbTrees;// Offset=0x80 Size=0x4
    unsigned int numSubModels;// Offset=0x84 Size=0x4
    struct cmodel_t * cmodels;// Offset=0x88 Size=0x4
    unsigned short numBrushes;// Offset=0x8c Size=0x2
    unsigned char __align0[2];// Offset=0x8e Size=0x2
    struct cbrush_t * brushes;// Offset=0x90 Size=0x4
    struct Bounds * brushBounds;// Offset=0x94 Size=0x4
    int * brushContents;// Offset=0x98 Size=0x4
    struct MapEnts * mapEnts;// Offset=0x9c Size=0x4
    unsigned short smodelNodeCount;// Offset=0xa0 Size=0x2
    unsigned char __align1[2];// Offset=0xa2 Size=0x2
    struct SModelAabbNode * smodelNodes;// Offset=0xa4 Size=0x4
    unsigned short dynEntCount[2];// Offset=0xa8 Size=0x4
    struct DynEntityDef * dynEntDefList[2];// Offset=0xac Size=0x8
    struct DynEntityPose * dynEntPoseList[2];// Offset=0xb4 Size=0x8
    struct DynEntityClient * dynEntClientList[2];// Offset=0xbc Size=0x8
    struct DynEntityColl * dynEntCollList[2];// Offset=0xc4 Size=0x8
    unsigned int checksum;// Offset=0xcc Size=0x4
};

struct GfxDrawPrimArgs// Size=0xc (Id=7000)
{
    int vertexCount;// Offset=0x0 Size=0x4
    int triCount;// Offset=0x4 Size=0x4
    int baseIndex;// Offset=0x8 Size=0x4
};

struct GfxViewport// Size=0x10 (Id=7001)
{
    int x;// Offset=0x0 Size=0x4
    int y;// Offset=0x4 Size=0x4
    int width;// Offset=0x8 Size=0x4
    int height;// Offset=0xc Size=0x4
};

struct GfxSceneDef// Size=0x28 (Id=7002)
{
    int time;// Offset=0x0 Size=0x4
    float floatTime;// Offset=0x4 Size=0x4
    float viewOffset[3];// Offset=0x8 Size=0xc
    struct GfxImage * sunShadowImage;// Offset=0x14 Size=0x4
    float sunShadowPixelAdjust[4];// Offset=0x18 Size=0x10
};

enum GfxViewportBehavior
{
    GFX_USE_VIEWPORT_FOR_VIEW=0,
    GFX_USE_VIEWPORT_FULL=1
};

enum _D3DTEXTUREFILTERTYPE
{
    D3DTEXF_NONE=2,
    D3DTEXF_POINT=0,
    D3DTEXF_LINEAR=1,
    D3DTEXF_ANISOTROPIC=4,
    D3DTEXF_FORCE_DWORD=2147483647
};

struct MaterialStreamRouting// Size=0x2 (Id=7005)
{
    unsigned char source;// Offset=0x0 Size=0x1
    unsigned char dest;// Offset=0x1 Size=0x1
};

struct stream_source_info_t// Size=0x8 (Id=7006)
{
    unsigned short Stream;// Offset=0x0 Size=0x2
    unsigned short Offset;// Offset=0x2 Size=0x2
    unsigned long Type;// Offset=0x4 Size=0x4
};

struct stream_dest_info_t// Size=0x2 (Id=7007)
{
    unsigned char Usage;// Offset=0x0 Size=0x1
    unsigned char UsageIndex;// Offset=0x1 Size=0x1
};

struct stream_source_info_t// Size=0x8 (Id=7008)
{
    unsigned short Stream;// Offset=0x0 Size=0x2
    unsigned short Offset;// Offset=0x2 Size=0x2
    unsigned long Type;// Offset=0x4 Size=0x4
};

struct stream_dest_info_t// Size=0x2 (Id=7009)
{
    unsigned char Usage;// Offset=0x0 Size=0x1
    unsigned char UsageIndex;// Offset=0x1 Size=0x1
};

struct GfxSunShadowProjectionSetup// Size=0x54 (Id=7010)
{
    float sunAxis[3][3];// Offset=0x0 Size=0x24
    float nearShadowMinDist;// Offset=0x24 Size=0x4
    float frustumRayDistToEdgeOfNearMap;// Offset=0x28 Size=0x4
    float shadowOrg[2];// Offset=0x2c Size=0x8
    float shadowOrgPixelCenter[2];// Offset=0x34 Size=0x8
    float snappedShadowOrg[2][2];// Offset=0x3c Size=0x10
    float sampleSize[2];// Offset=0x4c Size=0x8
};

struct GfxSunShadowMapMetrics// Size=0x18 (Id=7011)
{
    unsigned int pixelsPerTile;// Offset=0x0 Size=0x4
    unsigned int tilesPerTexture;// Offset=0x4 Size=0x4
    unsigned int usefulSize;// Offset=0x8 Size=0x4
    unsigned int minCoord;// Offset=0xc Size=0x4
    float nearClip;// Offset=0x10 Size=0x4
    float farClip;// Offset=0x14 Size=0x4
};

struct GfxSunShadowFrustumRays// Size=0x88 (Id=7012)
{
    float worldRays[4][3];// Offset=0x0 Size=0x30
    float shadowRays[4][2];// Offset=0x30 Size=0x20
    float sinInteriorAngle[4];// Offset=0x50 Size=0x10
    float sinMin;// Offset=0x60 Size=0x4
    float sinMax;// Offset=0x64 Size=0x4
    float mins[2];// Offset=0x68 Size=0x8
    float maxs[2];// Offset=0x70 Size=0x8
    unsigned int boundingArcRay[2];// Offset=0x78 Size=0x8
    unsigned int interiorArcRay[2];// Offset=0x80 Size=0x8
};

struct ShadowRayDistRange// Size=0x8 (Id=7013)
{
    float enter;// Offset=0x0 Size=0x4
    float leave;// Offset=0x4 Size=0x4
};

struct GfxSunShadowFrustumRays// Size=0x88 (Id=7014)
{
    float worldRays[4][3];// Offset=0x0 Size=0x30
    float shadowRays[4][2];// Offset=0x30 Size=0x20
    float sinInteriorAngle[4];// Offset=0x50 Size=0x10
    float sinMin;// Offset=0x60 Size=0x4
    float sinMax;// Offset=0x64 Size=0x4
    float mins[2];// Offset=0x68 Size=0x8
    float maxs[2];// Offset=0x70 Size=0x8
    unsigned int boundingArcRay[2];// Offset=0x78 Size=0x8
    unsigned int interiorArcRay[2];// Offset=0x80 Size=0x8
};

struct GfxSunShadowProjectionSetup// Size=0x54 (Id=7015)
{
    float sunAxis[3][3];// Offset=0x0 Size=0x24
    float nearShadowMinDist;// Offset=0x24 Size=0x4
    float frustumRayDistToEdgeOfNearMap;// Offset=0x28 Size=0x4
    float shadowOrg[2];// Offset=0x2c Size=0x8
    float shadowOrgPixelCenter[2];// Offset=0x34 Size=0x8
    float snappedShadowOrg[2][2];// Offset=0x3c Size=0x10
    float sampleSize[2];// Offset=0x4c Size=0x8
};

struct GfxSunShadowClip// Size=0x150 (Id=7016)
{
    unsigned int planeCount[2];// Offset=0x0 Size=0x8
    unsigned int frustumPlaneCount[2];// Offset=0x8 Size=0x8
    struct DpvsPlane planes[2][10];// Offset=0x10 Size=0x140
};

struct GfxSunShadowMapMetrics// Size=0x18 (Id=7017)
{
    unsigned int pixelsPerTile;// Offset=0x0 Size=0x4
    unsigned int tilesPerTexture;// Offset=0x4 Size=0x4
    unsigned int usefulSize;// Offset=0x8 Size=0x4
    unsigned int minCoord;// Offset=0xc Size=0x4
    float nearClip;// Offset=0x10 Size=0x4
    float farClip;// Offset=0x14 Size=0x4
};

struct water_t// Size=0x48 (Id=7018)
{
    struct WaterWritable writable;// Offset=0x0 Size=0x4
    float * H0X;// Offset=0x4 Size=0x4
    float * H0Y;// Offset=0x8 Size=0x4
    float * wTerm;// Offset=0xc Size=0x4
    int M;// Offset=0x10 Size=0x4
    int N;// Offset=0x14 Size=0x4
    float Lx;// Offset=0x18 Size=0x4
    float Lz;// Offset=0x1c Size=0x4
    float gravity;// Offset=0x20 Size=0x4
    float windvel;// Offset=0x24 Size=0x4
    float winddir[2];// Offset=0x28 Size=0x8
    float amplitude;// Offset=0x30 Size=0x4
    float codeConstant[4];// Offset=0x34 Size=0x10
    struct GfxImage * image;// Offset=0x44 Size=0x4
};

struct WaterGlob// Size=0x9000 (Id=7019)
{
    float HX[4096];// Offset=0x0 Size=0x4000
    float HY[4096];// Offset=0x4000 Size=0x4000
    unsigned char pixels[4096];// Offset=0x8000 Size=0x1000
};

struct WaterGlobStatic// Size=0x1c00 (Id=7020)
{
    float sinTable[1024];// Offset=0x0 Size=0x1000
    struct complex_s fftTrigTable[256];// Offset=0x1000 Size=0x800
    int fftBitswap[256];// Offset=0x1800 Size=0x400
};

struct WorkerCmds// Size=0x80 (Id=7021)
{
    long startPos;// Offset=0x0 Size=0x4
    long endPos;// Offset=0x4 Size=0x4
    long syncedEndPos;// Offset=0x8 Size=0x4
    long inSize;// Offset=0xc Size=0x4
    long outSize;// Offset=0x10 Size=0x4
    unsigned int dataSize;// Offset=0x14 Size=0x4
    unsigned char * buf;// Offset=0x18 Size=0x4
    int bufSize;// Offset=0x1c Size=0x4
    int bufCount;// Offset=0x20 Size=0x4
    unsigned int pad[23];// Offset=0x24 Size=0x5c
};

struct GfxGammaRamp// Size=0x200 (Id=7022)
{
    unsigned short entries[256];// Offset=0x0 Size=0x200
};

struct GfxCmdDrawPoints// Size=0x18 (Id=7023)
{
    struct GfxCmdHeader header;// Offset=0x0 Size=0x4
    short pointCount;// Offset=0x4 Size=0x2
    unsigned char size;// Offset=0x6 Size=0x1
    unsigned char dimensions;// Offset=0x7 Size=0x1
    struct GfxPointVertex verts[1];// Offset=0x8 Size=0x10
};

union GfxColor// Size=0x4 (Id=7024)
{
    unsigned int packed;// Offset=0x0 Size=0x4
    unsigned char array[4];// Offset=0x0 Size=0x4
};

struct GfxRenderCommandExecState// Size=0x4 (Id=7025)
{
    void * cmd;// Offset=0x0 Size=0x4
};

struct r_backEndGlobals_t// Size=0xc (Id=7026)
{
    int glowCount;// Offset=0x0 Size=0x4
    struct GfxImage * glowImage;// Offset=0x4 Size=0x4
    struct Font_s * debugFont;// Offset=0x8 Size=0x4
};

class GfxBspSurfTessCallback// Size=0x1 (Id=7027)
{
    public void Tess(struct GfxDrawListArgs * ,struct GfxBspSurfIter * );
};

class GfxSModelRigidSurfTessCallback// Size=0x1 (Id=7028)
{
    public void Tess(struct GfxDrawListArgs * ,struct GfxSModelRigidSurfIter * );
};

class GfxGlassSurfTessCallback// Size=0x1 (Id=7029)
{
    public void Tess(struct GfxDrawListArgs * ,struct GfxGlassSurfIter * );
};

class GfxMarkSurfTessCallback// Size=0x1 (Id=7030)
{
    public void Tess(struct GfxDrawListArgs * ,struct GfxMarkSurfIter * );
};

class GfxCodeSurfTessCallback// Size=0x1 (Id=7031)
{
    public void Tess(struct GfxDrawListArgs * ,struct GfxCodeSurfIter * );
};

class GfxSparkSurfTessCallback// Size=0x1 (Id=7032)
{
    public void Tess(struct GfxDrawListArgs * ,struct GfxSparkSurfIter * );
};

class GfxDrawSurfTessCallback// Size=0x1 (Id=7033)
{
    public void Tess(struct GfxDrawListArgs * ,struct GfxDrawSurfIter * );
};

union GfxDrawGroupSortKey// Size=0x4 (Id=7034)
{
    struct <unnamed-type-fields>// Size=0x4 (Id=69997)
    {
        unsigned int unused:1;// Offset=0x0 Size=0x4 BitOffset=0x1f BitSize=0x1
        unsigned int primarySortKey:6;// Offset=0x0 Size=0x4 BitOffset=0x19 BitSize=0x6
        unsigned int surfType:4;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x4
        unsigned int sceneLightIndex:8;// Offset=0x0 Size=0x4 BitOffset=0xd BitSize=0x8
        unsigned int useHeroLighting:1;// Offset=0x0 Size=0x4 BitOffset=0xc BitSize=0x1
        unsigned int materialSortedIndex:12;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xc
    };
    struct GfxDrawGroupSortKey::<unnamed-type-fields> fields;// Offset=0x0 Size=0x4
    unsigned int packed;// Offset=0x0 Size=0x4
};

struct GfxDrawGroupSortKey::<unnamed-type-fields>// Size=0x4 (Id=7035)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned int unused:1;// Offset=0x0 Size=0x4 BitOffset=0x1f BitSize=0x1
        unsigned int primarySortKey:6;// Offset=0x0 Size=0x4 BitOffset=0x19 BitSize=0x6
        unsigned int surfType:4;// Offset=0x0 Size=0x4 BitOffset=0x15 BitSize=0x4
        unsigned int sceneLightIndex:8;// Offset=0x0 Size=0x4 BitOffset=0xd BitSize=0x8
        unsigned int useHeroLighting:1;// Offset=0x0 Size=0x4 BitOffset=0xc BitSize=0x1
        unsigned int materialSortedIndex:12;// Offset=0x0 Size=0x4 BitOffset=0x0 BitSize=0xc
    };
};

class GfxCloudSurfTessCallback// Size=0x1 (Id=7036)
{
    public void Tess(struct GfxDrawListArgs * ,struct GfxCloudSurfIter * );
};

class GfxBspLightMapSurfTessCallback// Size=0x1 (Id=7037)
{
    public void Tess(struct GfxDrawListArgs * ,struct GfxBspLightMapSurfIter * );
};

struct GfxImageFilterPass// Size=0x98 (Id=7038)
{
    struct Material * material;// Offset=0x0 Size=0x4
    float srcWidth;// Offset=0x4 Size=0x4
    float srcHeight;// Offset=0x8 Size=0x4
    int dstWidth;// Offset=0xc Size=0x4
    int dstHeight;// Offset=0x10 Size=0x4
    int tapHalfCount;// Offset=0x14 Size=0x4
    float tapOffsetsAndWeights[8][4];// Offset=0x18 Size=0x80
};

struct GfxImageFilter// Size=0x994 (Id=7039)
{
    int passCount;// Offset=0x0 Size=0x4
    struct GfxImageFilterPass passes[16];// Offset=0x4 Size=0x980
    struct GfxImage * sourceImage;// Offset=0x984 Size=0x4
    enum GfxRenderTargetId finalTarget;// Offset=0x988 Size=0x4
    int useGammaReadsAfterFirstPass;// Offset=0x98c Size=0x4
    enum GfxRenderTargetId feedbackTarget;// Offset=0x990 Size=0x4
};

struct GfxImageFilter// Size=0x994 (Id=7040)
{
    int passCount;// Offset=0x0 Size=0x4
    struct GfxImageFilterPass passes[16];// Offset=0x4 Size=0x980
    struct GfxImage * sourceImage;// Offset=0x984 Size=0x4
    enum GfxRenderTargetId finalTarget;// Offset=0x988 Size=0x4
    int useGammaReadsAfterFirstPass;// Offset=0x98c Size=0x4
    enum GfxRenderTargetId feedbackTarget;// Offset=0x990 Size=0x4
};

struct GfxImageFilterPass// Size=0x98 (Id=7041)
{
    struct Material * material;// Offset=0x0 Size=0x4
    float srcWidth;// Offset=0x4 Size=0x4
    float srcHeight;// Offset=0x8 Size=0x4
    int dstWidth;// Offset=0xc Size=0x4
    int dstHeight;// Offset=0x10 Size=0x4
    int tapHalfCount;// Offset=0x14 Size=0x4
    float tapOffsetsAndWeights[8][4];// Offset=0x18 Size=0x80
};

struct GfxLightGrid// Size=0x38 (Id=7042)
{
    bool hasLightRegions;// Offset=0x0 Size=0x1
    unsigned char __align0[3];// Offset=0x1 Size=0x3
    unsigned int lastSunPrimaryLightIndex;// Offset=0x4 Size=0x4
    unsigned short mins[3];// Offset=0x8 Size=0x6
    unsigned short maxs[3];// Offset=0xe Size=0x6
    unsigned int rowAxis;// Offset=0x14 Size=0x4
    unsigned int colAxis;// Offset=0x18 Size=0x4
    unsigned short * rowDataStart;// Offset=0x1c Size=0x4
    unsigned int rawRowDataSize;// Offset=0x20 Size=0x4
    unsigned char * rawRowData;// Offset=0x24 Size=0x4
    unsigned int entryCount;// Offset=0x28 Size=0x4
    struct GfxLightGridEntry * entries;// Offset=0x2c Size=0x4
    unsigned int colorCount;// Offset=0x30 Size=0x4
    struct GfxLightGridColors * colors;// Offset=0x34 Size=0x4
};

struct GfxLightGridEntry// Size=0x4 (Id=7043)
{
    unsigned short colorsIndex;// Offset=0x0 Size=0x2
    unsigned char primaryLightIndex;// Offset=0x2 Size=0x1
    unsigned char needsTrace;// Offset=0x3 Size=0x1
};

enum GfxSortedHistoryAdd
{
    SH_ADD_NEVER=0,
    SH_ADD_IF_NEW=1
};

struct GfxLightGridColors// Size=0xa8 (Id=7045)
{
    unsigned char rgb[56][3];// Offset=0x0 Size=0xa8
};

struct <unnamed-type-s_vc_log>// Size=0x8 (Id=7046)
{
    unsigned short * history[3];// Offset=0x0 Size=0x4
    int count;// Offset=0x4 Size=0x4
};

struct GfxLightGridRow// Size=0xc (Id=7047)
{
    unsigned short colStart;// Offset=0x0 Size=0x2
    unsigned short colCount;// Offset=0x2 Size=0x2
    unsigned short zStart;// Offset=0x4 Size=0x2
    unsigned short zCount;// Offset=0x6 Size=0x2
    unsigned int firstEntry;// Offset=0x8 Size=0x4
};

struct GfxSpotShadow// Size=0x1d0 (Id=7048)
{
    struct GfxSpotShadowSceneLight sceneLight;// Offset=0x0 Size=0x50
    struct GfxViewportParms viewportParms;// Offset=0x50 Size=0x160
    unsigned char sceneLightIndex;// Offset=0x1b0 Size=0x1
    unsigned char pad[3];// Offset=0x1b1 Size=0x3
    struct GfxLight * light;// Offset=0x1b4 Size=0x4
    enum GfxRenderTargetId renderTargetId;// Offset=0x1b8 Size=0x4
    float pixelAdjust[4];// Offset=0x1bc Size=0x10
};

struct SpotShadowMapUserData// Size=0x10 (Id=7049)
{
    struct GfxSpotShadow * spotShadow;// Offset=0x0 Size=0x4
    struct GfxDrawList * drawList;// Offset=0x4 Size=0x4
    struct GfxBackEndData * data;// Offset=0x8 Size=0x4
    unsigned int spotShadowIndex;// Offset=0xc Size=0x4
};

struct GfxModelSkinnedSurface// Size=0x18 (Id=7050)
{
    struct GfxModelBaseSurface base;// Offset=0x0 Size=0x14
    struct XSurface * xsurf;// Offset=0x14 Size=0x4
};

class __CrtImplementationDetails::NativeDll// Size=0x1 (Id=7051)
{
    union // Size=0x4 (Id=0)
    {
        const unsigned int ProcessDetach;// Offset=0x0 Size=0x4
        const unsigned int ProcessAttach;// Offset=0x0 Size=0x4
        const unsigned int ThreadAttach;// Offset=0x0 Size=0x4
        const unsigned int ThreadDetach;// Offset=0x0 Size=0x4
        const unsigned int ProcessVerifier;// Offset=0x0 Size=0x4
    };
    public bool IsInDllMain();
    public bool IsInProcessAttach();
    public bool IsInProcessDetach();
    public bool IsInVcclrit();
    public bool IsSafeForManagedCode();
};

struct __lc_time_data// Size=0xb8 (Id=7052)
{
    char * wday_abbr[7];// Offset=0x0 Size=0x1c
    char * wday[7];// Offset=0x1c Size=0x1c
    char * month_abbr[12];// Offset=0x38 Size=0x30
    char * month[12];// Offset=0x68 Size=0x30
    char * ampm[2];// Offset=0x98 Size=0x8
    char * ww_sdatefmt;// Offset=0xa0 Size=0x4
    char * ww_ldatefmt;// Offset=0xa4 Size=0x4
    char * ww_timefmt;// Offset=0xa8 Size=0x4
    unsigned long ww_lcid;// Offset=0xac Size=0x4
    int ww_caltype;// Offset=0xb0 Size=0x4
    int refcount;// Offset=0xb4 Size=0x4
};

struct threadmbcinfostruct// Size=0x4 (Id=7053)
{
    int refcount;// Offset=0x0 Size=0x4
};

class _LocaleUpdate// Size=0x1 (Id=7054)
{
    public void _LocaleUpdate(struct localeinfo_struct * );
    public struct localeinfo_struct * GetLocaleT();
};

enum STATE
{
    ST_NORMAL=0,
    ST_PERCENT=1,
    ST_FLAG=2,
    ST_WIDTH=3,
    ST_DOT=4,
    ST_PRECIS=5,
    ST_SIZE=6,
    ST_TYPE=7,
    ST_INVALID=8
};

enum CHARTYPE
{
    CH_OTHER=0,
    CH_PERCENT=1,
    CH_DOT=2,
    CH_STAR=3,
    CH_ZERO=4,
    CH_DIGIT=5,
    CH_FLAG=6,
    CH_SIZE=7,
    CH_TYPE=8
};

struct ioinfo// Size=0x48 (Id=7057)
{
    int osfhnd;// Offset=0x0 Size=0x4
    char osfile;// Offset=0x4 Size=0x1
    char pipech;// Offset=0x5 Size=0x1
    unsigned char __align0[2];// Offset=0x6 Size=0x2
    int lockinitflag;// Offset=0x8 Size=0x4
    struct _RTL_CRITICAL_SECTION lock;// Offset=0xc Size=0x1c
    struct // Size=0x1 (Id=0)
    {
        char textmode:7;// Offset=0x28 Size=0x1 BitOffset=0x1 BitSize=0x7
        char unicode:1;// Offset=0x28 Size=0x1 BitOffset=0x0 BitSize=0x1
    };
    char pipech2[2];// Offset=0x29 Size=0x2
    unsigned char __align1[5];// Offset=0x2b Size=0x5
    long long startpos;// Offset=0x30 Size=0x8
    int utf8translations;// Offset=0x38 Size=0x4
    char dbcsBuffer;// Offset=0x3c Size=0x1
    unsigned char __align2[3];// Offset=0x3d Size=0x3
    int dbcsBufferUsed;// Offset=0x40 Size=0x4
};

enum ARG_TYPE
{
    eblank=0,
    e_int_arg=1,
    e_short_arg=2,
    e_ptr_arg=3,
    e_int64_arg=4,
    e_long_long_arg=5,
    e_long_arg=6,
    e_longdouble_arg=7,
    e_double_arg=8
};

struct positional_param// Size=0x10 (Id=7059)
{
    enum ARG_TYPE arg_type;// Offset=0x0 Size=0x4
    char * arg_ptr;// Offset=0x4 Size=0x4
    char type;// Offset=0x8 Size=0x1
    unsigned char __align0[3];// Offset=0x9 Size=0x3
    int flags;// Offset=0xc Size=0x4
};

enum STATE
{
    ST_NORMAL=0,
    ST_PERCENT=1,
    ST_FLAG=2,
    ST_WIDTH=3,
    ST_DOT=4,
    ST_PRECIS=5,
    ST_SIZE=6,
    ST_TYPE=7
};

union _output_l::__l2::<unnamed-type-buffer>// Size=0x200 (Id=7061)
{
    char sz[512];// Offset=0x0 Size=0x200
};

union _output_l::__l2::<unnamed-type-text>// Size=0x4 (Id=7062)
{
    char * sz;// Offset=0x0 Size=0x4
    wchar_t * wz;// Offset=0x0 Size=0x4
};

struct _output_l::__l83::_count_string// Size=0x8 (Id=7063)
{
    short Length;// Offset=0x0 Size=0x2
    short MaximumLength;// Offset=0x2 Size=0x2
    char * Buffer;// Offset=0x4 Size=0x4
};

struct _flt// Size=0x18 (Id=7064)
{
    int flags;// Offset=0x0 Size=0x4
    int nbytes;// Offset=0x4 Size=0x4
    long lval;// Offset=0x8 Size=0x4
    unsigned char __align0[4];// Offset=0xc Size=0x4
    float dval;// Offset=0x10 Size=0x8
};

enum INTRNCVT_STATUS
{
    INTRNCVT_OK=0,
    INTRNCVT_OVERFLOW=1,
    INTRNCVT_UNDERFLOW=2
};

struct _strflt// Size=0x10 (Id=7066)
{
    int sign;// Offset=0x0 Size=0x4
    int decpt;// Offset=0x4 Size=0x4
    int flag;// Offset=0x8 Size=0x4
    char * mantissa;// Offset=0xc Size=0x4
};

struct _U32ARRAY// Size=0x10 (Id=7067)
{
    unsigned long W[4];// Offset=0x0 Size=0x10
};

struct _U64// Size=0x8 (Id=7068)
{
    unsigned long W[2];// Offset=0x0 Size=0x8
};

struct _FP128// Size=0x10 (Id=7069)
{
    unsigned long W[4];// Offset=0x0 Size=0x10
};

struct _FPIEEE_RECORD// Size=0x70 (Id=7070)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned int RoundingMode:2;// Offset=0x0 Size=0x4 BitOffset=0x1e BitSize=0x2
        unsigned int Precision:3;// Offset=0x0 Size=0x4 BitOffset=0x1b BitSize=0x3
        unsigned int Operation:12;// Offset=0x0 Size=0x4 BitOffset=0xf BitSize=0xc
    };
    struct _FPIEEE_EXCEPTION_FLAGS Cause;// Offset=0x4 Size=0x4
    struct _FPIEEE_EXCEPTION_FLAGS Enable;// Offset=0x8 Size=0x4
    struct _FPIEEE_EXCEPTION_FLAGS Status;// Offset=0xc Size=0x4
    struct _FPIEEE_VALUE Operand1;// Offset=0x10 Size=0x20
    struct _FPIEEE_VALUE Operand2;// Offset=0x30 Size=0x20
    struct _FPIEEE_VALUE Result;// Offset=0x50 Size=0x20
};

struct _FPIEEE_EXCEPTION_FLAGS// Size=0x4 (Id=7071)
{
    struct // Size=0x4 (Id=0)
    {
        unsigned int Inexact:1;// Offset=0x0 Size=0x4 BitOffset=0x1f BitSize=0x1
        unsigned int Underflow:1;// Offset=0x0 Size=0x4 BitOffset=0x1e BitSize=0x1
        unsigned int Overflow:1;// Offset=0x0 Size=0x4 BitOffset=0x1d BitSize=0x1
        unsigned int ZeroDivide:1;// Offset=0x0 Size=0x4 BitOffset=0x1c BitSize=0x1
        unsigned int InvalidOperation:1;// Offset=0x0 Size=0x4 BitOffset=0x1b BitSize=0x1
    };
};

struct _FPQ64// Size=0x10 (Id=7072)
{
    long long W[2];// Offset=0x0 Size=0x10
};

union _unnamed_7073// Size=0x10 (Id=7073)
{
    float Fp32Value;// Offset=0x0 Size=0x4
    float Fp64Value;// Offset=0x0 Size=0x8
    struct _FP80 Fp80Value;// Offset=0x0 Size=0xa
    struct _FP128 Fp128Value;// Offset=0x0 Size=0x10
    short I16Value;// Offset=0x0 Size=0x2
    int I32Value;// Offset=0x0 Size=0x4
    struct _I64 I64Value;// Offset=0x0 Size=0x8
    unsigned short U16Value;// Offset=0x0 Size=0x2
    unsigned int U32Value;// Offset=0x0 Size=0x4
    struct _U64 U64Value;// Offset=0x0 Size=0x8
    struct _BCD80 Bcd80Value;// Offset=0x0 Size=0xa
    char * StringValue;// Offset=0x0 Size=0x4
    int CompareValue;// Offset=0x0 Size=0x4
    struct _U32ARRAY U32ArrayValue;// Offset=0x0 Size=0x10
    long long Q64Value;// Offset=0x0 Size=0x8
    struct _FPQ64 Fpq64Value;// Offset=0x0 Size=0x10
};

struct _FPIEEE_VALUE// Size=0x20 (Id=7074)
{
    union _unnamed_7073 Value;// Offset=0x0 Size=0x10
    struct // Size=0x4 (Id=0)
    {
        unsigned int OperandValid:1;// Offset=0x10 Size=0x4 BitOffset=0x1f BitSize=0x1
        unsigned int Format:4;// Offset=0x10 Size=0x4 BitOffset=0x1b BitSize=0x4
    };
};

struct _I64// Size=0x8 (Id=7075)
{
    unsigned long W[2];// Offset=0x0 Size=0x8
};

struct _BCD80// Size=0xa (Id=7076)
{
    unsigned short W[5];// Offset=0x0 Size=0xa
};

struct _FP80// Size=0xa (Id=7077)
{
    unsigned short W[5];// Offset=0x0 Size=0xa
};

struct transitiondate// Size=0xc (Id=7078)
{
    int yr;// Offset=0x0 Size=0x4
    int yd;// Offset=0x4 Size=0x4
    int ms;// Offset=0x8 Size=0x4
};

union FT// Size=0x8 (Id=7079)
{
    unsigned long long ft_scalar;// Offset=0x0 Size=0x8
    struct _FILETIME ft_struct;// Offset=0x0 Size=0x8
};

struct _tiddata// Size=0xc4 (Id=7080)
{
    unsigned long _tid;// Offset=0x0 Size=0x4
    unsigned int _thandle;// Offset=0x4 Size=0x4
    int _terrno;// Offset=0x8 Size=0x4
    unsigned long _tdoserrno;// Offset=0xc Size=0x4
    unsigned int _fpds;// Offset=0x10 Size=0x4
    unsigned long _holdrand;// Offset=0x14 Size=0x4
    char * _token;// Offset=0x18 Size=0x4
    unsigned short * _wtoken;// Offset=0x1c Size=0x4
    unsigned char * _mtoken;// Offset=0x20 Size=0x4
    char * _errmsg;// Offset=0x24 Size=0x4
    unsigned short * _werrmsg;// Offset=0x28 Size=0x4
    char * _namebuf0;// Offset=0x2c Size=0x4
    unsigned short * _wnamebuf0;// Offset=0x30 Size=0x4
    char * _namebuf1;// Offset=0x34 Size=0x4
    unsigned short * _wnamebuf1;// Offset=0x38 Size=0x4
    char * _asctimebuf;// Offset=0x3c Size=0x4
    unsigned short * _wasctimebuf;// Offset=0x40 Size=0x4
    void * _gmtimebuf;// Offset=0x44 Size=0x4
    char * _cvtbuf;// Offset=0x48 Size=0x4
    unsigned char _con_ch_buf[5];// Offset=0x4c Size=0x5
    unsigned char __align0[1];// Offset=0x51 Size=0x1
    unsigned short _ch_buf_used;// Offset=0x52 Size=0x2
    void * _initaddr;// Offset=0x54 Size=0x4
    void * _initarg;// Offset=0x58 Size=0x4
    void * _pxcptacttab;// Offset=0x5c Size=0x4
    void * _tpxcptinfoptrs;// Offset=0x60 Size=0x4
    int _tfpecode;// Offset=0x64 Size=0x4
    unsigned long _NLG_dwCode;// Offset=0x68 Size=0x4
    void * _terminate;// Offset=0x6c Size=0x4
    void * _unexpected;// Offset=0x70 Size=0x4
    void * _translator;// Offset=0x74 Size=0x4
    void * _purecall;// Offset=0x78 Size=0x4
    void * _curexception;// Offset=0x7c Size=0x4
    void * _curcontext;// Offset=0x80 Size=0x4
    int _ProcessingThrow;// Offset=0x84 Size=0x4
    void * _curexcspec;// Offset=0x88 Size=0x4
    void * _pExitContext;// Offset=0x8c Size=0x4
    void * _pUnwindContext;// Offset=0x90 Size=0x4
    void * _pFrameInfoChain;// Offset=0x94 Size=0x4
    int _FrameInfo[6];// Offset=0x98 Size=0x18
    void * _pForeignException;// Offset=0xb0 Size=0x4
    void * _reserved1;// Offset=0xb4 Size=0x4
    void * _reserved2;// Offset=0xb8 Size=0x4
    void * _reserved3;// Offset=0xbc Size=0x4
    int _cxxReThrow;// Offset=0xc0 Size=0x4
};

union _unnamed_7081// Size=0x10 (Id=7081)
{
    unsigned long RawEvent[4];// Offset=0x0 Size=0x10
};

struct _RTL_CRITICAL_SECTION// Size=0x1c (Id=7082)
{
    union _unnamed_7081 Synchronization;// Offset=0x0 Size=0x10
    long LockCount;// Offset=0x10 Size=0x4
    long RecursionCount;// Offset=0x14 Size=0x4
    void * OwningThread;// Offset=0x18 Size=0x4
};

struct _XCPT_ACTION// Size=0xc (Id=7083)
{
    unsigned long XcptNum;// Offset=0x0 Size=0x4
    int SigNum;// Offset=0x4 Size=0x4
    void  ( * XcptAction)(int );// Offset=0x8 Size=0x4
};

struct _XCPT_ACTION// Size=0xc (Id=7084)
{
    unsigned long XcptNum;// Offset=0x0 Size=0x4
    int SigNum;// Offset=0x4 Size=0x4
    void  ( * XcptAction)(int );// Offset=0x8 Size=0x4
};

enum _unnamed_7085
{
    lkNormal=0,
    lkPrealloc=1,
    lkDeleted=2
};

struct _unnamed_7086// Size=0x8 (Id=7086)
{
    struct _RTL_CRITICAL_SECTION * lock;// Offset=0x0 Size=0x4
    enum _unnamed_7085 kind;// Offset=0x4 Size=0x4
};

struct rterrmsgs// Size=0x8 (Id=7087)
{
    int rterrno;// Offset=0x0 Size=0x4
    char * rterrtxt;// Offset=0x4 Size=0x4
};

struct _unnamed_7088// Size=0x8 (Id=7088)
{
    long upperhalf;// Offset=0x0 Size=0x4
    unsigned long lowerhalf;// Offset=0x4 Size=0x4
};

union doubleint// Size=0x8 (Id=7089)
{
    long long bigint;// Offset=0x0 Size=0x8
    struct _unnamed_7088 twoints;// Offset=0x0 Size=0x8
};

struct errentry// Size=0x8 (Id=7090)
{
    unsigned long oscode;// Offset=0x0 Size=0x4
    int errnocode;// Offset=0x4 Size=0x4
};

struct _tiddata// Size=0xc4 (Id=7091)
{
    unsigned long _tid;// Offset=0x0 Size=0x4
    unsigned int _thandle;// Offset=0x4 Size=0x4
    int _terrno;// Offset=0x8 Size=0x4
    unsigned long _tdoserrno;// Offset=0xc Size=0x4
    unsigned int _fpds;// Offset=0x10 Size=0x4
    unsigned long _holdrand;// Offset=0x14 Size=0x4
    char * _token;// Offset=0x18 Size=0x4
    wchar_t * _wtoken;// Offset=0x1c Size=0x4
    unsigned char * _mtoken;// Offset=0x20 Size=0x4
    char * _errmsg;// Offset=0x24 Size=0x4
    wchar_t * _werrmsg;// Offset=0x28 Size=0x4
    char * _namebuf0;// Offset=0x2c Size=0x4
    wchar_t * _wnamebuf0;// Offset=0x30 Size=0x4
    char * _namebuf1;// Offset=0x34 Size=0x4
    wchar_t * _wnamebuf1;// Offset=0x38 Size=0x4
    char * _asctimebuf;// Offset=0x3c Size=0x4
    wchar_t * _wasctimebuf;// Offset=0x40 Size=0x4
    void * _gmtimebuf;// Offset=0x44 Size=0x4
    char * _cvtbuf;// Offset=0x48 Size=0x4
    unsigned char _con_ch_buf[5];// Offset=0x4c Size=0x5
    unsigned char __align0[1];// Offset=0x51 Size=0x1
    unsigned short _ch_buf_used;// Offset=0x52 Size=0x2
    void * _initaddr;// Offset=0x54 Size=0x4
    void * _initarg;// Offset=0x58 Size=0x4
    void * _pxcptacttab;// Offset=0x5c Size=0x4
    void * _tpxcptinfoptrs;// Offset=0x60 Size=0x4
    int _tfpecode;// Offset=0x64 Size=0x4
    unsigned long _NLG_dwCode;// Offset=0x68 Size=0x4
    void * _terminate;// Offset=0x6c Size=0x4
    void * _unexpected;// Offset=0x70 Size=0x4
    void * _translator;// Offset=0x74 Size=0x4
    void * _purecall;// Offset=0x78 Size=0x4
    void * _curexception;// Offset=0x7c Size=0x4
    void * _curcontext;// Offset=0x80 Size=0x4
    int _ProcessingThrow;// Offset=0x84 Size=0x4
    void * _curexcspec;// Offset=0x88 Size=0x4
    void * _pExitContext;// Offset=0x8c Size=0x4
    void * _pUnwindContext;// Offset=0x90 Size=0x4
    void * _pFrameInfoChain;// Offset=0x94 Size=0x4
    int _FrameInfo[6];// Offset=0x98 Size=0x18
    void * _pForeignException;// Offset=0xb0 Size=0x4
    void * _reserved1;// Offset=0xb4 Size=0x4
    void * _reserved2;// Offset=0xb8 Size=0x4
    void * _reserved3;// Offset=0xbc Size=0x4
    int _cxxReThrow;// Offset=0xc0 Size=0x4
};

union _CRT_DOUBLE_COMPONENTS// Size=0x8 (Id=7092)
{
    float d;// Offset=0x0 Size=0x8
    struct // Size=0x8 (Id=0)
    {
        unsigned long long mantissa:52;// Offset=0x0 Size=0x8 BitOffset=0xc BitSize=0x34
        unsigned long long exponent:11;// Offset=0x0 Size=0x8 BitOffset=0x1 BitSize=0xb
        unsigned long long sign:1;// Offset=0x0 Size=0x8 BitOffset=0x0 BitSize=0x1
    };
};

union _dbl// Size=0x8 (Id=7093)
{
    long lng[2];// Offset=0x0 Size=0x8
    float dbl;// Offset=0x0 Size=0x8
};

union _dbl// Size=0x8 (Id=7094)
{
    long lng[2];// Offset=0x0 Size=0x8
    float dbl;// Offset=0x0 Size=0x8
};

struct constant// Size=0x78 (Id=7095)
{
    const float PI_OVER_TWO;// Offset=0x0 Size=0x8
    const float PI_INV;// Offset=0x8 Size=0x8
    const float YMAX;// Offset=0x10 Size=0x8
    const float zero;// Offset=0x18 Size=0x4
    const float one;// Offset=0x1c Size=0x4
    const float minus_one;// Offset=0x20 Size=0x4
    const float one_half;// Offset=0x24 Size=0x4
    const union _dbl _C1;// Offset=0x28 Size=0x8
    const union _dbl _C2;// Offset=0x30 Size=0x8
    const float SinCosCoeffr1;// Offset=0x38 Size=0x8
    const float SinCosCoeffr2;// Offset=0x40 Size=0x8
    const float SinCosCoeffr3;// Offset=0x48 Size=0x8
    const float SinCosCoeffr4;// Offset=0x50 Size=0x8
    const float SinCosCoeffr5;// Offset=0x58 Size=0x8
    const float SinCosCoeffr6;// Offset=0x60 Size=0x8
    const float SinCosCoeffr7;// Offset=0x68 Size=0x8
    const float SinCosCoeffr8;// Offset=0x70 Size=0x8
};

enum _FP_OPERATION_CODE
{
    _FpCodeUnspecified=0,
    _FpCodeAdd=1,
    _FpCodeSubtract=2,
    _FpCodeMultiply=3,
    _FpCodeDivide=4,
    _FpCodeSquareRoot=5,
    _FpCodeRemainder=6,
    _FpCodeCompare=7,
    _FpCodeConvert=8,
    _FpCodeRound=9,
    _FpCodeTruncate=10,
    _FpCodeFloor=11,
    _FpCodeCeil=12,
    _FpCodeAcos=13,
    _FpCodeAsin=14,
    _FpCodeAtan=15,
    _FpCodeAtan2=16,
    _FpCodeCabs=17,
    _FpCodeCos=18,
    _FpCodeCosh=19,
    _FpCodeExp=20,
    _FpCodeFabs=21,
    _FpCodeFmod=22,
    _FpCodeFrexp=23,
    _FpCodeHypot=24,
    _FpCodeLdexp=25,
    _FpCodeLog=26,
    _FpCodeLog10=27,
    _FpCodeModf=28,
    _FpCodePow=29,
    _FpCodeSin=30,
    _FpCodeSinh=31,
    _FpCodeTan=32,
    _FpCodeTanh=33,
    _FpCodeY0=34,
    _FpCodeY1=35,
    _FpCodeYn=36,
    _FpCodeLogb=37,
    _FpCodeNextafter=38,
    _FpCodeNegate=39,
    _FpCodeFmin=40,
    _FpCodeFmax=41,
    _FpCodeConvertTrunc=42,
    _XMMIAddps=43,
    _XMMIAddss=44,
    _XMMISubps=45,
    _XMMISubss=46,
    _XMMIMulps=47,
    _XMMIMulss=48,
    _XMMIDivps=49,
    _XMMIDivss=50,
    _XMMISqrtps=51,
    _XMMISqrtss=52,
    _XMMIMaxps=53,
    _XMMIMaxss=54,
    _XMMIMinps=55,
    _XMMIMinss=56,
    _XMMICmpps=57,
    _XMMICmpss=58,
    _XMMIComiss=59,
    _XMMIUComiss=60,
    _XMMICvtpi2ps=61,
    _XMMICvtsi2ss=62,
    _XMMICvtps2pi=63,
    _XMMICvtss2si=64,
    _XMMICvttps2pi=65,
    _XMMICvttss2si=66,
    _XMMIAddsubps=67,
    _XMMIHaddps=68,
    _XMMIHsubps=69,
    _XMMIRoundps=70,
    _XMMIRoundss=71,
    _XMMIDpps=72,
    _XMMI2Addpd=73,
    _XMMI2Addsd=74,
    _XMMI2Subpd=75,
    _XMMI2Subsd=76,
    _XMMI2Mulpd=77,
    _XMMI2Mulsd=78,
    _XMMI2Divpd=79,
    _XMMI2Divsd=80,
    _XMMI2Sqrtpd=81,
    _XMMI2Sqrtsd=82,
    _XMMI2Maxpd=83,
    _XMMI2Maxsd=84,
    _XMMI2Minpd=85,
    _XMMI2Minsd=86,
    _XMMI2Cmppd=87,
    _XMMI2Cmpsd=88,
    _XMMI2Comisd=89,
    _XMMI2UComisd=90,
    _XMMI2Cvtpd2pi=91,
    _XMMI2Cvtsd2si=92,
    _XMMI2Cvttpd2pi=93,
    _XMMI2Cvttsd2si=94,
    _XMMI2Cvtps2pd=95,
    _XMMI2Cvtss2sd=96,
    _XMMI2Cvtpd2ps=97,
    _XMMI2Cvtsd2ss=98,
    _XMMI2Cvtdq2ps=99,
    _XMMI2Cvttps2dq=100,
    _XMMI2Cvtps2dq=101,
    _XMMI2Cvttpd2dq=102,
    _XMMI2Cvtpd2dq=103,
    _XMMI2Addsubpd=104,
    _XMMI2Haddpd=105,
    _XMMI2Hsubpd=106,
    _XMMI2Roundpd=107,
    _XMMI2Roundsd=108,
    _XMMI2Dppd=109
};

enum _FPIEEE_FORMAT
{
    _FpFormatFp32=0,
    _FpFormatFp64=1,
    _FpFormatFp80=2,
    _FpFormatFp128=3,
    _FpFormatI16=4,
    _FpFormatI32=5,
    _FpFormatI64=6,
    _FpFormatU16=7,
    _FpFormatU32=8,
    _FpFormatU64=9,
    _FpFormatBcd80=10,
    _FpFormatCompare=11,
    _FpFormatString=12
};

enum _FPIEEE_ROUNDING_MODE
{
    _FpRoundNearest=0,
    _FpRoundMinusInfinity=1,
    _FpRoundPlusInfinity=2,
    _FpRoundChopped=3
};

enum _FPIEEE_PRECISION
{
    _FpPrecisionFull=0,
    _FpPrecision53=1,
    _FpPrecision24=2
};

struct constant// Size=0x70 (Id=7100)
{
    const union _dbl OVFX;// Offset=0x0 Size=0x8
    const union _dbl UFLX;// Offset=0x8 Size=0x8
    const union _dbl inf;// Offset=0x10 Size=0x8
    const float EPS;// Offset=0x18 Size=0x8
    const float LN2INV;// Offset=0x20 Size=0x8
    const float C1;// Offset=0x28 Size=0x8
    const float C2;// Offset=0x30 Size=0x8
    const float p0;// Offset=0x38 Size=0x8
    const float p1;// Offset=0x40 Size=0x8
    const float p2;// Offset=0x48 Size=0x8
    const float q0;// Offset=0x50 Size=0x8
    const float q1;// Offset=0x58 Size=0x8
    const float q2;// Offset=0x60 Size=0x8
    const float zero;// Offset=0x68 Size=0x4
    const float one_half;// Offset=0x6c Size=0x4
};

struct constant// Size=0xb8 (Id=7101)
{
    const float EPS;// Offset=0x0 Size=0x8
    const float PI_OVER_TWO;// Offset=0x8 Size=0x8
    const float PI;// Offset=0x10 Size=0x8
    const float TWO_M_SQRT3;// Offset=0x18 Size=0x8
    const float SQRT3_M_ONE;// Offset=0x20 Size=0x8
    const float SQRT3;// Offset=0x28 Size=0x8
    const float MAX_ARG;// Offset=0x30 Size=0x8
    const float p0;// Offset=0x38 Size=0x8
    const float p1;// Offset=0x40 Size=0x8
    const float p2;// Offset=0x48 Size=0x8
    const float p3;// Offset=0x50 Size=0x8
    const float q0;// Offset=0x58 Size=0x8
    const float q1;// Offset=0x60 Size=0x8
    const float q2;// Offset=0x68 Size=0x8
    const float q3;// Offset=0x70 Size=0x8
    const float q4;// Offset=0x78 Size=0x8
    float a[4];// Offset=0x80 Size=0x20
    const float kDBL_MIN;// Offset=0xa0 Size=0x8
    const float zero;// Offset=0xa8 Size=0x4
    const float half;// Offset=0xac Size=0x4
    const float one;// Offset=0xb0 Size=0x4
};

struct constant// Size=0x80 (Id=7102)
{
    const float zero;// Offset=0x0 Size=0x4
    const float one;// Offset=0x4 Size=0x4
    const float two;// Offset=0x8 Size=0x4
    const float one_half;// Offset=0xc Size=0x4
    float a[2];// Offset=0x10 Size=0x10
    float b[2];// Offset=0x20 Size=0x10
    const float p1;// Offset=0x30 Size=0x8
    const float p2;// Offset=0x38 Size=0x8
    const float p3;// Offset=0x40 Size=0x8
    const float p4;// Offset=0x48 Size=0x8
    const float p5;// Offset=0x50 Size=0x8
    const float q0;// Offset=0x58 Size=0x8
    const float q1;// Offset=0x60 Size=0x8
    const float q2;// Offset=0x68 Size=0x8
    const float q3;// Offset=0x70 Size=0x8
    const float q4;// Offset=0x78 Size=0x8
};

struct _FloatOutStruct// Size=0x1a (Id=7103)
{
    short exp;// Offset=0x0 Size=0x2
    char sign;// Offset=0x2 Size=0x1
    char ManLen;// Offset=0x3 Size=0x1
    char man[22];// Offset=0x4 Size=0x16
};

enum state_t
{
    S_INIT=0,
    S_EAT0L=1,
    S_SIGNM=2,
    S_GETL=3,
    S_GETR=4,
    S_POINT=5,
    S_E=6,
    S_SIGNE=7,
    S_EAT0E=8,
    S_GETE=9,
    S_END=10,
    S_E_IMPLICIT=11
};

struct FpFormatDescriptor// Size=0x18 (Id=7105)
{
    int max_exp;// Offset=0x0 Size=0x4
    int min_exp;// Offset=0x4 Size=0x4
    int precision;// Offset=0x8 Size=0x4
    int exp_width;// Offset=0xc Size=0x4
    int format_width;// Offset=0x10 Size=0x4
    int bias;// Offset=0x14 Size=0x4
};

struct FRAME_BACKCHAIN// Size=0x50 (Id=7106)
{
    unsigned long BackChain;// Offset=0x0 Size=0x4
    unsigned long CompilerReserved;// Offset=0x4 Size=0x4
    unsigned char __align0[8];// Offset=0x8 Size=0x8
    long long ParameterArea;// Offset=0x10 Size=0x8
};

struct FRAME_LONGJMP// Size=0x50 (Id=7107)
{
    unsigned long BackChain;// Offset=0x0 Size=0x4
    unsigned long CompilerReserved;// Offset=0x4 Size=0x4
    unsigned long LjReturnAddr;// Offset=0x8 Size=0x4
    unsigned char __align0[4];// Offset=0xc Size=0x4
    long long ParameterArea;// Offset=0x10 Size=0x8
};

struct T// Size=0x8 (Id=7108)
{
    long long t1;// Offset=0x0 Size=0x8
};

#endif
